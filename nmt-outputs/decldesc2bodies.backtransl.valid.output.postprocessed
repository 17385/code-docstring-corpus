DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) = = 2 ) DCNL DCSP assert ( len ( values ) =
DCSP cow _ opts = images.qemu _ img _ info ( backing _ file ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP cow _ opts = { &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size , &apos; size &apos; : size } DCNL DCSP return cow _ opts
DCSP global _ current _ config DCNL DCSP if ( _ current _ config is None ) : DCNL DCSP DCSP _ current _ config = copy.deepcopy ( _ _ opts _ _ ) DCNL DCSP else : DCNL DCSP DCSP _ current _ config = copy.deepcopy ( _ _ opts _ _ ) DCNL DCSP return config
DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = { } DCNL DCSP if ( mapping is None ) :
DCSP class Meta : DCNL DCSP DCSP class Meta : DCNL DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP DCSP DCSP class Meta : DCNL DCSP DCSP DCSP
DCSP p &#91; 0 &#93; = ( t &#91; 1 &#93; * t &#91; 3 &#93; )
DCSP arr = arr.@@ copy ( ) DCNL DCSP if keep : DCNL DCSP DCSP arr = arr.@@ copy ( ) DCNL DCSP else : DCNL DCSP DCSP result = arr.@@ pop ( n , keep ) DCNL DCSP return result
DCSP with open ( test _ dir , &apos; w &apos; ) as f : DCNL DCSP DCSP runner.run ( )
DCSP url = request.get _ full _ url ( ) DCNL DCSP url = ( &apos; https : / / % s / % s / % s &apos; % ( getpass.getuser ( ) , url , urlencode ( headers ) ) ) DCNL DCSP return url
DCSP return IMPL.@@ cg _ has _ volumes _ filter ( attached _ or _ with _ snapshots )
DCSP return bool ( get _ url _ from _ url ( url , spider ) )
DCSP factors = &#91; &#93; DCNL DCSP for i in range ( 1 , ( n - 1 ) ) : DCNL DCSP DCSP for i in range ( 1 , ( n - 1 ) ) : DCNL DCSP DCSP DCSP for j in range ( 1 , ( n - 1 ) ) : DCNL DCSP DCSP DCSP DCSP seq.append ( dup _ mul _ ground ( i , i , K ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP seq.append ( dup _ mul _ ground ( i , i , K ) ) DCNL DCSP return dup _ mul _ ground ( dup _ lshift ( seq &#91; 0 &#93; , K ) , K )
DCSP if ( event.key = = &apos; proj &apos; ) : DCNL DCSP DCSP if ( event.key = = &apos; bottom &apos; ) : DCNL DCSP DCSP DCSP del params &#91; &apos; projs &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP if ( event.key = = &apos; proj &apos; ) : DCNL DCSP DCSP if ( event.key = = &apos; bottom &apos; ) : DCNL DCSP DCSP DCSP del params &#91; &apos; projs &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP del params &#91; &apos; projs &apos; &#93;
DCSP if ( start _ idx is None ) : DCNL DCSP DCSP start _ idx = 0 DCNL DCSP else : DCNL DCSP DCSP start _ idx = 0 DCNL DCSP DCSP for i in range ( start _ idx ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP break DCNL DCSP if ( start _ idx is None ) : DCNL DCSP DCSP start _ idx = 0 DCNL DCSP DCSP for i in range ( start _ idx ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Length DCSP of DCSP % s DCSP is DCSP not DCSP a DCSP same DCSP size &apos; % coord _ idx ) ) DCNL DCSP for i in range ( start _ idx ) : DCNL DCSP DCSP for i in range ( start _ idx ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP
DCSP assert ( val.type = = Type.int ( 1 ) ) DCNL DCSP return builder.add ( val , Constant.int ( TIMEDELTA64 , val ) )
DCSP if ( ( n is None ) or ( n = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n is None ) or ( n = = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n = = 1 ) or ( n = = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n &lt; 0 ) or ( n &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n &lt; 0 ) or ( n &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n &lt; 0 ) or ( n
DCSP dest _ file = open ( dest _ dir , &apos; w &apos; ) DCNL DCSP with open ( dest _ dir , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.close ( )
DCSP G = nx.DiGraph ( ) DCNL DCSP G.add _ edges _ from ( G.nodes ( ) ) DCNL DCSP G.add _ edges _ from ( G.nodes ( ) ) DCNL DCSP G.add _ edges _ from ( G.nodes ( ) ) DCNL DCSP G.add _ edges _ from ( G.nodes ( ) ) DCNL DCSP G.add _ edges _ from ( edges ) DCNL DCSP return G
DCSP mem _ info = _ get _ mem _ info ( ) DCNL DCSP if ( mem _ info is not None ) : DCNL DCSP DCSP return mem _ info &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return Push@@ NotificationService ( config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) )
DCSP return reverse _ course _ url ( handler _ name , course _ key , kwargs )
DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return limits DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP raise ValueError ( &apos; limits DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP
DCSP if ( data is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( data is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( data is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( data is None ) : DCNL DCSP DCSP return None DCNL DCSP return ( data &#91; 0 &#93; , data &#91; 1 &#93; , data &#91; 2 &#93; )
DCSP evaluatedLinkValue = getEvaluatedLinkValue ( key , xmlElement ) DCNL DCSP if ( evaluatedLinkValue . _ _ class _ _ = = dict ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return None DCNL DCSP
DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP return value DCNL DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP
DCSP return all ( ( conn.@@ features.@@ supports _ transactions for conn in connections.@@ all ( ) ) )
DCSP def cleanup ( ) : DCNL DCSP DCSP pass DCNL DCSP def cleanup ( ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP del sys.modules &#91; &apos; DJANGO _ SETTINGS _ MODULE &apos; &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP request.addfinalizer ( fin )
DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not term ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( (
DCSP return ( str ( parse _ version ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ( str ) ) ) ) ) ) ) ) ) )
DCSP url = &apos; { 0 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 1 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } / { 2 } /
DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP labels = &#91; &#93; DCNL DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP labels = &#91; &#93; DCNL DCSP for ( key , value ) in enumerate ( data _ home ) : DCNL DCSP DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( key , value ) in
DCSP return ( &apos; % s _ % s &apos; % ( function . _ _ class _ _ . _ _ name _ _ , _ body _ region ( ) ) )
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP LOG.exception ( _ ( &apos; Failed DCSP to DCSP find DCSP tasks DCSP to DCSP % s : DCSP % s &apos; ) , e ) DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP if ( not conn ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP if ( get _ configured _ provider ( ) is False ) : DCNL DCSP DCSP return False DCNL DCSP return _ _ virtualname _ _
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value
DCSP if ( limits is None ) : DCNL DCSP DCSP limits = np.asarray ( a ) DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP limits = np.asarray ( a ) DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP if ( limits is None ) : DCNL DCSP DCSP DCSP if ( limits is None ) : DCNL DCSP DCSP DCSP DCSP if ( limits is None ) : DCNL DCSP DCSP DCSP DCSP DCSP axis = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP axis = ( -1 ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP axis = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP axis = ( -1 ) DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP limits = &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP limits = &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP if ( limits is None ) : DCNL DCSP DCSP DCSP if ( limits is None ) : DCNL DCSP DCSP DCSP
DCSP if ( ( auth is not None ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( auth is not None ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not force ) and ( not force ) ) : DCNL DCSP DCSP return DCNL DCSP if force : DCNL DCSP
DCSP return DatetimeIndex ( start = start , end = end , periods = periods , periods = periods , freq = freq , tz = tz , normalize = normalize , name = name , closed = closed , * * kwargs )
DCSP pass
DCSP if ( not instance ) : DCNL DCSP DCSP return DCNL DCSP for ( key , value ) in kwargs.items ( ) : DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = { } DCNL DCSP DCSP for ( key , value ) in kwargs.items ( ) : DCNL DCSP DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP DCSP _ update _ cached _ instance ( instance , key )
DCSP return ( value and ( value &#91; 0 &#93; .upper ( ) + value &#91; 1 : &#93; ) )
DCSP if ( not logical _ line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP ( yield ( 0 , &apos; W391 DCSP blank DCSP line DCSP of DCSP blank DCSP line &apos; ) ) DCNL DCSP if ( ( blank _ line is not None ) and ( not blank _ line ) ) : DCNL DCSP DCSP ( yield ( 0 , &apos; E@@ 301 DCSP Use DCSP blank DCSP line DCSP ( % s ) &apos; ) ) DCNL DCSP else : DCNL DCSP DCSP ( yield ( 0 , &apos; E@@ 301 DCSP Use DCSP blank DCSP line DCSP of DCSP blank DCSP line DCSP ( % s ) &apos; ) , ( &apos; DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL DCSP host = config.get ( CONF _ PORT ) DCNL
DCSP if isinstance ( Z , sp.csc _ matrix ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP trigger _ type = trigger _ type . _ _ class _ _ . _ _ name _ _ DCNL DCSP trigger _ type = trigger _ type . _ _ class _ _ . _ _ name _ _ DCNL DCSP trigger _ type = trigger _ type . _ _ class _ _ . _ _ name _ _ DCNL DCSP return trigger _ type
DCSP return &#91; f for f in f if ( f in f ) &#93;
DCSP if ( not os.path.exists ( fullname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fullname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fullname ) ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( not os.path.exists ( fullname ) ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP except os.error : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( not os.path.exists ( fullname ) ) : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP
DCSP s3.prep = ( lambda r : ( r.method = = &apos; search _ ac &apos; ) ) DCNL DCSP return s3 _ rest _ controller ( extra _ filter = extra _ filter )
DCSP for loop in loops : DCNL DCSP DCSP insetLoops = &#91; &#93; DCNL DCSP DCSP for loop in loops : DCNL DCSP DCSP DCSP insetLoops = &#91; loop &#93; DCNL DCSP DCSP DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP DCSP DCSP pointBegin = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP DCSP DCSP DCSP pointBegin = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP DCSP loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP loops &#91; pointIndex &#93; = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP loops &#91; pointIndex &#93; = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP
DCSP if isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP else : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP
DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP with open ( fname , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP except IOError as err : DCNL DCSP DCSP log.error ( &apos; Failed DCSP to DCSP read DCSP file DCSP % s : DCSP % s &apos; , fname , err ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( &apos; utf-8 &apos; ) DCNL DCSP return s
DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( f , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP with open ( f , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( f.read ( ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( )
DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL DCSP if ( param _ name is None ) : DCNL DCSP DCSP param _ list = &#91; &#93; DCNL
DCSP if ( width is None ) : DCNL DCSP DCSP width = 0.0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP if ( width is None ) : DCNL DCSP DCSP width = 0 DCNL DCSP else : DCNL DCSP
DCSP return repeat ( repeat ( sequence , sequence ) )
DCSP if ( not isinstance ( object _ , six.string _ types ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP kwargs = { } DCNL DCSP for ( key , value ) in six.iteritems ( kwargs ) : DCNL DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP for ( key , value ) in six.iteritems ( kwargs ) : DCNL DCSP DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP if isinstance ( object _ , six.string _ types ) : DCNL DCSP DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs &#91; &apos; protocol &apos; &#93; = protocol DCNL DCSP kwargs
DCSP f = open ( filename , &apos; w &apos; ) DCNL DCSP f.write ( contents ) DCNL DCSP f.close ( )
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return tokens &#91; 0 &#93;
DCSP conf = global _ conf.copy ( ) DCNL DCSP conf.update ( local _ conf ) DCNL DCSP def auth _ filter ( app ) : DCNL DCSP DCSP return Account@@ Quota@@ Middleware ( app ) DCNL DCSP return auth _ filter
DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = &#91; shape &#93; DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = &#91; shape &#93; DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = &#91; shape &#93; DCNL DCSP if ( not isinstance ( shape , tuple ) ) : DCNL DCSP DCSP shape = ( shape , )
DCSP return &#91; ( x &#91; 0 &#93; , x &#91; 1 &#93; ) for i in range ( 10 ) &#93;
DCSP if gcodec.isProcedureDoneOrFileIsEmpty ( gcodeText , &apos; cool &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( gcodeText = = &apos; &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( repository = = None
DCSP service = get _ object _ or _ 404 ( Service , pk = service _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; services / service _ add &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP ( in1 , in2 ) = tee ( iterable ) DCNL DCSP it = izip ( imap ( itemgetter ( n ) , in2 ) , in2 ) DCNL DCSP result = _ nlargest ( n , it ) DCNL DCSP return result
DCSP return active _ id ( _ _ opts _ _ &#91; &apos; job _ id &apos; &#93; , display _ progress = _ _ opts _ _ )
DCSP osb = XML.SubElement ( xml _ parent , &apos; com.openshift.jenkins.plugins.pipeline.OpenShift@@ Deployer &apos; ) DCNL DCSP mapping = &#91; ( &apos; auth-token &apos; , &apos; authToken &apos; , &apos; &apos; ) &#93; DCNL DCSP helpers.convert _ mapping _ to _ xml ( osb , data , mapping , fail _ required = True )
DCSP f.seek ( 0 ) DCNL DCSP f.seek ( 0 ) DCNL DCSP for i in xrange ( 1000 ) : DCNL DCSP DCSP f.seek ( 0 , 0 )
DCSP return value.replace ( arg , &apos; &apos; )
DCSP if ( url.startswith ( &apos; http : / / &apos; ) or url.startswith ( &apos; http : / / &apos; ) ) : DCNL DCSP DCSP url = ( &apos; http : / / % s &apos; % url ) DCNL DCSP else : DCNL DCSP DCSP url = ( &apos; http : / / % s / % s &apos; % ( url , url ) ) DCNL DCSP return url
DCSP if isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP elif isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP elif isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP elif isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP elif isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP elif isinstance ( text , SafeData ) : DCNL DCSP DCSP return text DCNL DCSP else : DCNL DCSP DCSP return text
DCSP if ( suffix is None ) : DCNL DCSP DCSP suffix = &apos; &apos; DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP suffix = &apos; / &apos; DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP suffix = &apos; / &apos; DCNL DCSP if ( suffix = = &apos; / &apos; ) : DCNL DCSP DCSP suffix = &apos; / &apos; DCNL DCSP else : DCNL DCSP DCSP suffix = &apos; / &apos; DCNL DCSP return os.path.join ( path , suffix )
DCSP return Parser ( handle ) .parse ( * * kwargs )
DCSP result = &#91; &#93; DCNL DCSP for ( key , value ) in six.iteritems ( query ) : DCNL DCSP DCSP if ( not isinstance ( key , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( key , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value ,
DCSP hash = hashlib.sha1 ( sha ) .hexdigest ( ) DCNL DCSP return hashlib.sha1 ( hash.digest ( ) ) .hexdigest ( )
DCSP return tf.@@ sin ( x )
DCSP if ( radius@@ Complex.real = = radius@@ Complex.imag ) : DCNL DCSP DCSP return radius@@ Complex.real DCNL DCSP return math.sqrt ( ( radius@@ Complex.real * radius@@ Complex.imag ) )
DCSP for x in range ( n ) : DCNL DCSP DCSP ( yield x )
DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( f , &apos; _ _ iter _ _ &apos; )
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( _ _ opts _ _ &#91; &apos; config &apos; &#93; , ret &#91; &apos; data &apos; &#93; , ret &#91; &apos; data &apos; &#93; ) ) DCNL DCSP except Exception as exc : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos;
DCSP if isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes ) : DCNL DCSP DCSP return bytes _ list DCNL DCSP elif isinstance ( byte _ list , bytes )
DCSP return _ group _ or _ org _ purge ( context , data _ dict , is _ org = False )
DCSP try : DCNL DCSP DCSP job = Job.objects.get ( pk = job _ idx ) DCNL DCSP DCSP return job DCNL DCSP except Job@@ .DoesNotExist : DCNL DCSP DCSP return None
DCSP ret = { } DCNL DCSP for i in range ( len ( chunks ) ) : DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; ! = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( x &#91; i &#93; = = &apos; _ &apos; ) : DCNL
DCSP sym = &apos; &apos; DCNL DCSP for i in range ( 0 , len ( sym ) , 2 ) : DCNL DCSP DCSP sym = sym &#91; i &#93; DCNL DCSP DCSP if ( sym = = &apos; B &apos; ) : DCNL DCSP DCSP DCSP sym + = 1 DCNL DCSP DCSP elif ( sym = = &apos; B &apos; ) : DCNL DCSP DCSP DCSP sym + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sym + = 1 DCNL DCSP return sym
DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) :
DCSP user _ ids = &#91; &#93; DCNL DCSP for user in user _ ids : DCNL DCSP DCSP user _ id = user _ ids &#91; user &#93; DCNL DCSP DCSP if ( user _ id is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( user _ id in user _ ids ) : DCNL DCSP DCSP DCSP user _ ids.append ( user _ id ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user _ ids.append ( user _ id ) DCNL DCSP return user _ users
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( not uri ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( not uri ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( not uri ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( not uri ) : DCNL DCSP DCSP uri = context.lookup _ uri _ from _ uri ( uri ) DCNL DCSP DCSP
DCSP record = Step.from _ string ( I _ HAVE _ TASTY _ BEVERAGES ) DCNL DCSP assert ( len ( records ) = = 1 ) DCNL DCSP assert ( len ( records &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( record &#91;
DCSP XML.SubElement ( xml _ parent , &apos; com.cloudbees.@@ jenkins.@@ GitHub@@ Commit@@ Builder &apos; )
DCSP try : DCNL DCSP DCSP return int ( ( t * 1000000.0 ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return t
DCSP try : DCNL DCSP DCSP client = _ connect ( username , password , * * kwargs ) DCNL DCSP DCSP return True DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False
DCSP return &#91; x for x in items if ( ( x is not None ) and ( not predicate ( x ) ) ) &#93;
DCSP if ( len ( entry _ type ) = = 1 ) : DCNL DCSP DCSP return ( &apos; &apos; , &apos; &apos; ) DCNL DCSP if ( len ( entry _ type ) = = 1 ) : DCNL DCSP DCSP return ( &apos; &apos; , &apos; &apos; ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; &apos; , &apos; &apos; )
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( ) DCNL DCSP DCSP conn.@@ load _ client ( lb ) DCNL DCSP DCSP return True DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Unable DCSP to DCSP load DCSP { 0 } : DCSP { 1 } &apos; .format ( lb , e ) ) DCNL DCSP DCSP return False
DCSP if ( platform.system ( ) = = &apos; Windows &apos; ) : DCNL DCSP DCSP return os.sysconf ( &apos; SC _ NPROCESSORS _ ONLN &apos; ) DCNL DCSP else : DCNL DCSP DCSP return _ psplatform.@@ cpu _ freq ( )
DCSP return user.has _ permission ( user , model , permission _ codename = permission _ codename )
DCSP XML.SubElement ( xml _ parent , &apos; plugin &apos; ) .text = data
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP setattr ( namespace , name , value ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if isinstance ( obj , dict ) : DCNL DCSP DCSP return { &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; } DCNL DCSP elif isinstance ( obj , dict ) : DCNL DCSP DCSP return { &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; } DCNL DCSP elif isinstance ( obj , dict ) : DCNL DCSP DCSP return { &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; , &apos; type &apos; : obj &#91; &apos; type &apos; &#93; } DCNL DCSP else : DCNL DCSP DCSP return obj
DCSP ( w , h ) = ( x.shape &#91; col _ axis &#93; , x.shape &#91; col _ axis &#93; ) DCNL DCSP ( w , h ) = ( x.shape &#91; col _ axis &#93; , x.shape &#91; col _ axis &#93; ) DCNL DCSP ( w , h ) = ( x.shape &#91; col _ axis &#93; , x.shape &#91; col _ axis &#93; ) DCNL DCSP ( w , h ) = ( x.shape &#91; col _ axis &#93; , x.shape &#91; col _ axis &#93; ) DCNL DCSP ( w , w ) = np.meshgrid ( x , w ) DCNL DCSP ( w , w ) = np.meshgrid ( x , w ) DCNL DCSP w = np.rollaxis ( x , ( wrg * w ) ) DCNL DCSP return x
DCSP if ( repository is None ) : DCNL DCSP DCSP repository = None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP repository = None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP repository = trans.sa _ session.query ( app.model.@@ Repository ) .first ( ) DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( not repository ) : DCNL DCSP DCSP repository = get _ repository _
DCSP return dict ( row = row , row = row )
DCSP result = compute _ volume _ get _ volume ( client , volume , volume _ id = volume _ id , host = host , vol _ map = vol _ map ) DCNL DCSP return result
DCSP return config.check _ driver _ dependencies ( _ _ virtualname _ _ , { &apos; libcloud &apos; : HAS _ LIBS } )
DCSP message = { &apos; account _ id &apos; : account _ id , &apos; account _ id &apos; : account _ id , &apos; message _ id &apos; : message _ id } DCNL DCSP if message _ id : DCNL DCSP DCSP message &#91; &apos; message &apos; &#93; = message _ id DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message &apos; &#93; = message DCNL DCSP message &#91; &apos; message
DCSP n = np.asarray ( x ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return
DCSP try : DCNL DCSP DCSP return minidom.parseString ( xml _ string ) DCNL DCSP except Exception as e : DCNL DCSP DCSP raise exception.MalformedRequestBody ( reason = e )
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = floatx ( ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = floatx ( ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP
DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP
DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) :
DCSP if ( not hasattr ( module , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP handler = getattr ( module , &apos; _ _ module _ _ &apos; , None ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP handler = getattr ( module , &apos; _ _ module _ _ &apos; , None ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP handler = getattr ( module , &apos; _ _ module _ _ &apos; , None ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP handler = getattr ( module , &apos; _ _ module _ _ &apos; , None ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP for i in range ( ( len ( individual ) - 1 ) ) : DCNL DCSP DCSP for i in range ( len ( individual ) ) : DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; i ) : DCNL DCSP DCSP DCSP DCSP
DCSP return ( h / HOURS _ PER _ DAY )
DCSP class MyFs ( io.FileSystem , ) : DCNL DCSP DCSP pass DCNL DCSP collect.inject ( None ) DCNL DCSP d.close ( ) DCNL DCSP with pytest.raises ( exception.UserCritical ) : DCNL DCSP DCSP d.delete ( 1 )
DCSP new@@ Object = old@@ Factory ( state ) DCNL DCSP del old@@ Context &#91; state &#93; DCNL DCSP return new@@ Factory
DCSP cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , remote , remote ) ) DCNL DCSP if remote : DCNL DCSP DCSP cmd + = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( remote , remote ) ) DCNL DCSP else : DCNL DCSP DCSP cmd + = &apos; DCSP { 0 } &apos; .format ( remote ) DCNL DCSP remote _ cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git , remote , remote ) ) DCNL DCSP remote _ cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , remote _ path ) ) DCNL DCSP remote _ cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , remote _ path ) ) DCNL DCSP remote _ cmd + = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , remote _ path ) ) DCNL DCSP remote _ cmd + = ( &apos;
DCSP if ( not subject ) : DCNL DCSP DCSP subject = subject DCNL DCSP if ( not subject ) : DCNL DCSP DCSP subject = subject DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP subject = subject DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP subject = subject DCNL DCSP if ( not subject ) : DCNL DCSP DCSP subject = subject DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( not recipients ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP if ( recipients is None ) : DCNL DCSP DCSP recipients = &#91; &#93; DCNL DCSP
DCSP data = _ get _ data ( ) DCNL DCSP return du.process _ recarray _ pandas ( data , endog _ idx = 0 , dtype = float )
DCSP session = context &#91; &apos; session &apos; &#93; DCNL DCSP session = context &#91; &apos; session &apos; &#93; DCNL DCSP session = context &#91; &apos; session &apos; &#93; DCNL DCSP session = context &#91; &apos; session &apos; &#93; DCNL DCSP if ( &apos; deleted &apos; not in locations ) : DCNL DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP return DCNL DCSP if location : DCNL DCSP DCSP if ( &apos; deleted &apos; not in locations ) : DCNL DCSP DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP DCSP raise exception.Invalid ( msg ) DCNL DCSP if location : DCNL DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP return DCNL DCSP if location : DCNL DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP return DCNL DCSP if location : DCNL DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP DCSP return DCNL DCSP if location : DCNL DCSP DCSP msg &#91; &apos; Location &apos; &#93; = location DCNL DCSP
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( request , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if ( not hasattr ( self , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % node . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP try : DCNL DCSP DCSP fn ( * args , * * kwargs ) DCNL DCSP except Exception as exc : DCNL DCSP DCSP if ( exc.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise
DCSP return &apos; &apos;.join ( ( ( &apos; % 02x &apos; % ord ( c ) ) for x in ip.split ( &apos; .&apos; ) ) )
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP if ( not
DCSP widget = QtWidgets.Q@@ Application.instance ( ) DCNL DCSP if ( widget is None ) : DCNL DCSP DCSP widgets = None DCNL DCSP for widget in widgets : DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( widget
DCSP try : DCNL DCSP DCSP client = urlopen ( env ) DCNL DCSP DCSP return client.get ( &apos; / &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Unable DCSP to DCSP get DCSP client DCSP file : DCSP { } &apos; .format ( e ) ) DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP obj = getattr ( obj , attr ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = 0 DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP G =
DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = None DCNL DCSP if ( ns is
DCSP course _ key = CourseKey.from _ string ( course ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP return ( &apos; https : / / % s / % s &apos; % ( course _ key , course _ key ) )
DCSP retVal = &#91; &#93; DCNL DCSP for line in payload : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL
DCSP try : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if isinstance ( field _ path , basestring ) : DCNL DCSP DCSP field _ path = field _ path DCNL DCSP else : DCNL DCSP DCSP field _ path = field _ path DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP field _ path
DCSP if ( not host _ exists ( context , host _ name ) ) : DCNL DCSP DCSP raise exception.@@ ComputeHostNotFound ( host = host _ name ) DCNL DCSP if ( not enabled ) : DCNL DCSP DCSP raise exception.@@ ComputeHostNotFound ( host = host _ name ) DCNL DCSP else : DCNL DCSP DCSP raise exception.@@ ComputeHostNotFound ( host = host _ name )
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.@@ secgroup _ create ( name , description )
DCSP ret = { } DCNL DCSP for ( name , value ) in _ get _ tests ( fname ) : DCNL DCSP DCSP if ( not isinstance ( value , str ) ) : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP if ( not isinstance ( value , str ) ) : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP if isinstance ( value , str ) : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = None DCNL DCSP DCSP if isinstance ( value , str ) : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP if ( not isinstance ( value , str ) ) : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP if ( not isinstance ( value , str ) ) : DCNL DCSP DCSP DCSP value = str (
DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return request ( request , username = username , password = password ) DCNL DCSP else : DCNL DCSP DCSP return login ( request , username , password )
DCSP if ( len ( x ) = = 0 ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; 0 ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL DCSP if ( x &lt; y ) : DCNL DCSP DCSP return x DCNL
DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args
DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , s ) DCNL DCSP except socket.error : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP a = time.strptime ( string _ , &apos; % Y % m % d DCSP % H : % M : % S DCSP % Y DCSP % H : % M : % S DCSP % H : % M : % S DCSP % H : % M : % S DCSP GMT &apos; ) DCNL DCSP return ( &apos; % s DCSP % s DCSP % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d
DCSP policies = { } DCNL DCSP for directive in response : DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; ! = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; ! = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( directive &#91; &apos; name &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP for i in xrange ( 10 ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP return 1
DCSP return _ find _ tag _ with _ wait ( context , ( By.@@ ID , id _ str ) , * * kwargs )
DCSP if ( not callback ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP pin = callback DCNL DCSP except Exception : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP for callback in callback : DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( event , event ) ) DCNL DCSP DCSP DCSP return DCNL DCSP add _ devices ( callback )
DCSP @ wraps ( view _ func ) DCNL DCSP def wrapped _ view ( request , * args , * * kwargs ) : DCNL DCSP DCSP if view _ func : DCNL DCSP DCSP DCSP return view _ func ( request , * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return view _ func ( request , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP try : DCNL DCSP DCSP conn = _ get _ client ( ) DCNL DCSP DCSP response = bigip _ session.post ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / profile / { 0 } &apos; .format ( name ) ) , * * kwargs ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return { } DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.post ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / profile / { 0 } &apos; .format ( name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP return _ load _ connection _ error ( hostname , e ) DCNL DCSP if ( not isinstance ( response , dict ) ) : DCNL DCSP DCSP return { } DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.post ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / profile / { 0 } &apos; .format (
DCSP try : DCNL DCSP DCSP if ( not string ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP methods = &#91; &#93; DCNL DCSP if ( method is None ) :
DCSP bits = 0 DCNL DCSP for i in range ( 0 , ( N - 1 ) ) : DCNL DCSP DCSP if ( N &gt; = N ) : DCNL DCSP DCSP DCSP size + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP size + = 1 DCNL DCSP return bits
DCSP parsed _ path = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP if ( path _ url is None ) : DCNL DCSP DCSP path _ url = None DCNL DCSP else :
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError )
DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP import
DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if
DCSP with open ( signature _ file , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( signature _ file , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP pubkey = f.read ( ) .decode ( &apos; ascii &apos; ) DCNL DCSP DCSP DCSP if ( len ( pubkey ) = = 2 ) : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP return False
DCSP return string.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr
DCSP storage _ client = storage.Client ( ) DCNL DCSP bucket = storage _ client.get _ bucket ( bucket _ name ) DCNL DCSP blob = bucket.blob ( blob _ name ) DCNL DCSP blob.@@ delete ( ) DCNL DCSP blob.@@ delete ( )
DCSP if ( &apos; cancel &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; cancel &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; action &apos; in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status &apos; not in kwargs ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( &apos; status
DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) = = 4 ) DCNL DCSP assert ( len ( cols ) =
DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = _ _ import _ _ ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = _ _ import _ _ ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod
DCSP if ( method = = &apos; nt &apos; ) : DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP if ( method = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; correction DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP if ( method = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; correction DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP if ( method = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; The DCSP method DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP return ( 1.0 + ( ( 1.0 - correction ) * * 2 ) ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; invalid DCSP distribution &apos; )
DCSP if ( len ( p ) = = 2 ) : DCNL DCSP DCSP p &#91; 0 &#93; = p &#91; 1 &#93; DCNL DCSP else : DCNL DCSP DCSP p &#91; 0 &#93; = p &#91; 1 &#93;
DCSP if ( not isinstance ( w , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; theta DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) :
DCSP s = re.sub ( &apos; ( \ \ d + ) &apos; , &apos; &apos; , string ) DCNL DCSP return re.sub ( &apos; ( \ \ d + ) &apos; , &apos; &apos; , string )
DCSP batch _ job _ id = client.GetService ( &apos; BatchJobService &apos; , &apos; v201605 &apos; ) DCNL DCSP selector = { &apos; entries &apos; : &#91; batch _ job _ id , &apos; predicates &apos; : &#91; batch _ job _ id &#93; , &apos; operator &apos; : &apos; EQUALS &apos; , &apos; values &apos; : &#91; batch _ job _ id &#93; , &apos; predicates &apos; : &#91; { &apos; operator &apos; : &apos; EQUALS &apos; , &apos; values &apos; : &#91; batch _ job _ id &#93; , &apos; operator &apos; : &apos; EQUALS &apos; , &apos; values &apos; : &#91; batch _ job _ id &#93; } &#93; } DCNL DCSP return batch _ job _ service.get ( selector )
DCSP return reverse ( handler _ name , key _ name = key _ name , key _ value = key _ value , kwargs = kwargs )
DCSP return ( ioThread = = getThread@@ ID ( ) )
DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( date , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP
DCSP args = &#91; &apos; a &apos; , &apos; b &apos; , &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; ,
DCSP dsk = { } DCNL DCSP for ( k , v ) in dsk.items ( ) : DCNL DCSP DCSP if isinstance ( k , ( list , tuple ) ) : DCNL DCSP DCSP DCSP dsk &#91; k &#93; = v DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP dsk2 &#91; k &#93; = v DCNL DCSP return dsk
DCSP if ( ( not desired _ state ) or ( desired _ state ! = desired _ state ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP dataset DCSP % s : DCSP % s &apos; % ( uuid , current _ state ) ) ) DCNL DCSP if ( ( not desired _ state ) or ( desired _ state ! = desired _ state ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP dataset DCSP % s : DCSP % s &apos; % ( uuid , current _ state ) ) ) DCNL DCSP if ( ( not desired _ state ) or ( desired _ state ! = desired _ state ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP dataset DCSP % s : DCSP % s &apos; % ( uuid , current _ state ) ) ) DCNL DCSP if ( ( not desired _ state ) or ( desired _ state ! = desired _ state ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP dataset DCSP % s : DCSP % s &apos; % ( uuid
DCSP result = script.pip ( &apos; list &apos; , &apos; -vvv &apos; , &apos; --index-url &apos; , data.find _ links , &apos; --no-index &apos; , &apos; simple = = 1.0 &apos; ) DCNL DCSP result = script.pip ( &apos; list &apos; , &apos; --format = legacy &apos; ) DCNL DCSP assert ( len ( result ) = = 1 )
DCSP for i in range ( 0 , len ( samples ) , 1 ) : DCNL DCSP DCSP samples = samples &#91; i &#93; DCNL DCSP DCSP for ( i , i ) in enumerate ( W _ list ) : DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP samples &#91; i &#93; = i DCNL DCSP return samples
DCSP pending = len ( iterables ) DCNL DCSP nexts = cycle ( ( next ( it ) for it in iterables ) ) DCNL DCSP nexts = cycle ( ( next ( it ) for it in iterables ) ) DCNL DCSP for pending in nexts : DCNL DCSP DCSP ( yield next ( pending ) )
DCSP for ( key , value ) in six.iteritems ( expected _ params _ objects ) : DCNL DCSP DCSP if ( key in expected _ parameter _ values ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP instance _ type _ ref = _ instance _ type _ access _ get ( context , flavor _ id , project _ id ) DCNL DCSP session = get _ session ( ) DCNL DCSP with session.begin ( ) : DCNL DCSP DCSP with session.begin ( ) : DCNL DCSP DCSP DCSP instance _ type _ ref.save ( session = session ) DCNL DCSP DCSP return volume _ type _ ref
DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if strip : DCNL
DCSP if ( msg is not None ) : DCNL DCSP DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP else : DCNL DCSP DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL DCSP msg + = ( &apos; \ n &apos; + msg ) DCNL
DCSP r = f ( ) DCNL DCSP for row in f : DCNL DCSP DCSP if ( c &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP r &#91; &apos; id &apos; &#93; = row &#91; &apos; id &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in id ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in id ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in id ) : DCNL DCSP DCSP DCSP
DCSP p &#91; 0 &#93; = ( - p &#91; 2 &#93; )
DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s
DCSP ( start , end ) = ( &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None , None
DCSP try : DCNL DCSP DCSP tb = sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP except ValueError : DCNL DCSP DCSP tb = sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP return tb
DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP return 1 DCNL DCSP else : DCNL DCSP DCSP return ( len ( s ) = = 0 )
DCSP days = &#91; &#93; DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0 DCNL DCSP days = 0
DCSP try : DCNL DCSP DCSP key = key.encode ( &apos; utf8 &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( key , value ) )
DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not review _ service _ id ) : DCNL DCSP DCSP
DCSP return _ group _ types _ get _ by _ name _ or _ id ( context , group _ type _ list )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP
DCSP a = np.asarray ( x ) DCNL DCSP a = dict ( ( ( a , b ) for ( a , b ) in zip ( x , x ) ) ) DCNL DCSP return tuple ( a )
DCSP for ( name , value ) in items : DCNL DCSP DCSP if ( not isinstance ( arg , ( list , list ) ) ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP collection DCSP named DCSP % s &apos; % ( name , name ) ) ) DCNL DCSP DCSP if ( not isinstance ( value , ( list , list ) ) ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP collection DCSP named DCSP % s &apos; % ( name , name ) ) ) DCNL DCSP DCSP if ( not isinstance ( value , ( list , list ) ) ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP collection DCSP named DCSP % s &apos; % ( name , name ) ) ) DCNL DCSP DCSP if ( not isinstance ( value , ( list , list ) ) ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP collection
DCSP pp = &#91; &#93; DCNL DCSP for macro in macros : DCNL DCSP DCSP if ( macro &#91; 0 &#93; = = &apos; pp &apos; ) : DCNL DCSP DCSP DCSP pp = macro &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( macro &#91; 0 &#93; = = &apos; pp &apos; ) : DCNL DCSP DCSP DCSP DCSP pp = macro &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pp = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP opts.append ( ( &apos; -D % s &apos; % macro &#91; 0 &#93; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP opts.append ( ( &apos; -D % s &apos; % macro &#91; 0 &#93; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP opts.append ( ( &apos; -D % s &apos; % macro &#91; 0 &#93; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP opts.append ( ( &apos; -D % s &apos; % macro &#91; 0 &#93; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP opts.append ( ( &apos; -D
DCSP try : DCNL DCSP DCSP return iso8601.parse _ date ( timestr ) DCNL DCSP except iso8601.ParseError as e : DCNL DCSP DCSP raise ValueError ( ( &apos; Unable DCSP to DCSP convert DCSP % s : DCSP % s &apos; % ( timestr , e ) ) )
DCSP db = ( app.config &#91; &apos; DATABASE _ URL &apos; &#93; + app.config &#91; &apos; DATABASE _ URL &apos; &#93; ) DCNL DCSP db = ( app.config &#91; &apos; DATABASE _ URL &apos; &#93; + app.config &#91; &apos; DATABASE _ URL &apos; &#93; ) DCNL DCSP db = ( &apos; % s : % s &apos; % ( db , password ) ) DCNL DCSP db = current.db ( query ) .select ( table.organisation _ id , limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP os.makedirs ( db ) DCNL DCSP return db
DCSP if ( not noqa ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not noqa ) or ( not noqa ) ) : DCNL DCSP DCSP
DCSP new _ ports = &#91; &#93; DCNL DCSP while True : DCNL DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP for child in source : DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports = &#91; &#93; DCNL DCSP DCSP DCSP new _ ports + = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports DCNL DCSP DCSP DCSP new _ ports = new _ ports
DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure (
DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) :
DCSP if ( sys.version _ info &gt; = ( 3 , 6 ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP else : DCNL DCSP DCSP return ( locale.getdefaultlocale ( ) &#91; 1 &#93; + &apos; \ n &apos; )
DCSP return date _ obj.strftime ( &apos; % b DCSP % d DCSP % Y DCSP % Y DCSP % H : % M : % S &apos; )
DCSP a = TpPd ( pd = 6 ) DCNL DCSP b = MessageType ( mesType = 53 ) DCNL DCSP c = RrCause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP ret = { } DCNL DCSP for ( key , value ) in _ get _ nodes ( ) : DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( value ,
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP return _ vzctl ( &apos; running &apos; , ctid _ or _ name )
DCSP try : DCNL DCSP DCSP return int ( int _ str ) DCNL DCSP except ValueError : DCNL DCSP DCSP return default
DCSP return ( isinstance ( c , six.string _ types ) and ( not isinstance ( c , six.string _ types ) ) )
DCSP return re.sub ( &apos; ( \ \ d + ) &apos; , &apos; DCSP &apos; , value )
DCSP if isinstance ( expr , ( tuple , tuple ) ) : DCNL DCSP DCSP return expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP if ( len ( lengths ) = = 1 ) : DCNL DCSP DCSP return np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; ) DCNL DCSP else : DCNL DCSP DCSP return np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; )
DCSP return ( command in &#91; &apos; running &apos; , &apos; -f &apos; , command &#93; )
DCSP if ( sys.version _ info &lt; ( 3 , 3 ) ) : DCNL DCSP DCSP mac = &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP mac = &apos; &apos; DCNL DCSP if ( sys.version _ info &lt; ( 3 , 3 ) ) : DCNL DCSP DCSP mac = &apos; &apos; DCNL DCSP elif ( sys.version _ info &lt; ( 3 , 3 ) ) : DCNL DCSP DCSP mac = &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP mac = &apos; &apos; DCNL DCSP return mac
DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = request.path DCNL DCSP else : DCNL DCSP DCSP template _ name =
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links ) , ( &apos; --find-links = &apos; + data.find _ links )
DCSP if ( not isinstance ( coeffs , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP if six.PY3 : DCNL DCSP DCSP instr = salt.utils.to _ str ( instr ) DCNL DCSP DCSP return base64.b64encode ( base64.decodestring ( instr ) ) DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP for cmd in args : DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91; &apos; cmd &apos; &#93; DCNL DCSP DCSP cmd = cmd &#91;
DCSP ret = salt.utils.mac _ utils.execute _ return _ result ( &apos; systemsetup DCSP -get@@ reload &apos; ) DCNL DCSP return ( salt.utils.mac _ utils.validate _ enabled ( salt.utils.mac _ utils.parse _ return ( ret ) ) = = &apos; on &apos; )
DCSP course = get _ course _ or _ 404 ( course , username , course _ key ) DCNL DCSP return render _ to _ response ( &apos; courseware / course _ detail &apos; , { &apos; course &apos; : course , &apos; course _ key &apos; : course _ key , &apos; course _ key &apos; : course _ key } )
DCSP cache = { } DCNL DCSP cache = { } DCNL DCSP for key in keys : DCNL DCSP DCSP key = key &#91; 0 &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP key = key &#91; 1 : &#93; DCNL DCSP DCSP
DCSP n = asarray ( a ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP a DCSP arguments &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP a DCSP same DCSP arguments &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Can DCSP only DCSP define DCSP the DCSP same DCSP distribution . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be
DCSP items = &#91; &#93; DCNL DCSP for item in queue : DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in seen ) : DCNL
DCSP if ( not hasattr ( f , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP return f
DCSP w = wcs.WCS ( naxis = 2 ) DCNL DCSP for i in range ( 5 ) : DCNL DCSP DCSP for i in range ( 5 ) : DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( w ) = = 1 ) DCNL DCSP
DCSP response = render _ to _ response ( &apos; infrastructure / ajax _ location _ lookup &apos; , { &apos; service &apos; : service } , context _ instance = RequestContext ( request ) , response _ format = response _ format ) DCNL DCSP return render _ to _ response ( &apos; infrastructure / ajax _ location _ lookup &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP server = _ connect ( host , port , db , password ) DCNL DCSP return server.@@ ping ( )
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = serializers.JSONResponseSerializer ( ) DCNL DCSP return wsgi.Resource ( Controller ( ) , deserializer , serializer )
DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( options ) &gt; 1 ) : DCNL DCSP
DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP try : DCNL DCSP DCSP image
DCSP if ( &apos; influxdb.db _ exists &apos; in _ _ salt _ _ ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return False
DCSP if isinstance ( x , bytes ) : DCNL DCSP DCSP x = x.encode ( &apos; hex &apos; ) DCNL DCSP return str ( x.encode ( &apos; hex &apos; ) )
DCSP assert ( len ( text ) = = len ( text ) ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len ( text ) = = 1 ) DCNL DCSP assert ( len (
DCSP return _ apply _ scalar _ per _ pixel ( generic _ cy . _ mean , image , selem , out = out , mask = mask , shift _ x = shift _ x , shift _ y = shift _ y )
DCSP result = 0 DCNL DCSP for i in xrange ( ( position + 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP for i in range ( ( position + 1 ) , ( position + 1 ) ) : DCNL DCSP DCSP DCSP result + = ( ord ( x &#91; ( i + 1 ) &#93; ) - ord ( x &#91; i &#93; ) ) DCNL DCSP return result
DCSP if ( resource _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( resource _ id is None ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( &apos; id &apos; in resource _ id ) : DCNL DCSP DCSP return { &apos; id &apos; : resource _ id , &apos; resource _ id &apos; : resource _ id , &apos; resource _ id &apos; : resource _ id } DCNL DCSP else : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93;
DCSP stub = stubs.@@ Session@@ Manager@@ Stub ( ) DCNL DCSP objreg.register ( &apos; config &apos; , stub ) DCNL DCSP ( yield stub ) DCNL DCSP objreg.delete ( &apos; config &apos; )
DCSP if is _ admin : DCNL DCSP DCSP return get _ repository _ file _ contents ( app , file _ path , repository _ id , is _ admin ) DCNL DCSP else : DCNL DCSP DCSP return get _ repository _ file _ contents ( app , file _ path , repository _ id , is _ admin )
DCSP try : DCNL DCSP DCSP with open ( target , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP return f.read ( ) .decode ( &apos; utf-8 &apos; ) DCNL DCSP except : DCNL DCSP DCSP return &apos; &apos;
DCSP try : DCNL DCSP DCSP _ _ import _ _ ( lib ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP _ _ import _ _ ( lib ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( token is None ) : DCNL DCSP DCSP expiration = time.time ( ) DCNL DCSP params = { &apos; url &apos; : url , &apos; token &apos; : token } DCNL DCSP if ( params is not None ) : DCNL DCSP DCSP params &#91; &apos; token &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; timestamp &apos; &#93; = token DCNL DCSP if ( timeout is not None ) : DCNL DCSP DCSP params &#91; &apos; expires &apos; &#93; =
DCSP cwd = os.getcwd ( ) DCNL DCSP os.chdir ( os.getcwd ( ) ) DCNL DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP room = get _ room _ from _ id ( room _ url _ key ) DCNL DCSP if ( room is None ) : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( room ) DCNL DCSP DCSP return DCNL DCSP room = get _ room _ from _ id ( room ) DCNL DCSP if ( room is None ) : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( room ) DCNL DCSP DCSP return DCNL DCSP room = get _ room _ from _ id ( room ) DCNL DCSP if ( room is None ) : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( room ) DCNL DCSP DCSP return DCNL DCSP room = get _ room _ from _ id ( room ) DCNL DCSP if ( room is None ) : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( room ) DCNL DCSP DCSP return DCNL DCSP room = get _ room _ from _ id ( room ) DCNL DCSP if ( room is None ) : DCNL DCSP DCSP return DCNL DCSP
DCSP if ( not isinstance ( collection.collection _ type ( ) , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( collection.collection _ type ( ) , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( collection , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( collection , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( collection , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( collection , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Collection DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP try : DCNL DCSP DCSP
DCSP ret = { } DCNL DCSP cmd = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; = = 0 ) : DCNL DCSP DCSP return ret &#91; &apos; stdout &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return s3 _ rest _ controller ( )
DCSP factor = np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; ) DCNL DCSP return clip.fl _ image ( ( lambda x : x &#91; 0 &#93; ) , axis = 1 )
DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not name.startswith ( &apos; / &apos; ) )
DCSP ret = { } DCNL DCSP for item in objects : DCNL DCSP DCSP if isinstance ( item , dict ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = val DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = val DCNL DCSP return result
DCSP if ( not isinstance ( user , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; User DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( default _ hidden and ( not isinstance ( user , six.string _ types ) ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; User DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( default _ hidden and ( not isinstance ( user , six.string _ types ) ) ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( user ) ) DCNL DCSP if default _ hidden : DCNL DCSP DCSP return _ profile _ get ( user , default _ hidden = default _ hidden ) DCNL DCSP else : DCNL DCSP DCSP return _ profiles _ get ( user , default _ hidden = default _ hidden )
DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP avail _ locations DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function , DCSP or DCSP with DCSP the DCSP --list-locations DCSP option &apos; ) DCNL DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP avail _ locations DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function , DCSP or DCSP with DCSP the DCSP --list-locations DCSP option &apos; ) DCNL DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP avail _ locations DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP avail _ locations DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP ret = { } DCNL DCSP for
DCSP return slice ( key , shape &#91; 0 &#93; , shape &#91; 1 &#93; , shape &#91; 1 &#93; )
DCSP if ( not format _ string.format ( * args , * * kwargs ) ) : DCNL DCSP DCSP return format _ string.format ( * args , * * kwargs ) DCNL DCSP return format _ string.format ( * args , * * kwargs )
DCSP pre _ info = info ( name ) DCNL DCSP if ( not pre _ info ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP pre _ info = info ( name ) DCNL DCSP if ( not pre _ info ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP pre _ info = info ( name ) DCNL DCSP if ( not pre _ info ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP pre _ info = info ( name ) DCNL DCSP if ( not pre _ info ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP pre _ info = info ( name ) DCNL DCSP if ( pre _ info
DCSP if ( id _ or _ symbols is None ) : DCNL DCSP DCSP id _ or _ symbols = { } DCNL DCSP if ( id _ or _ symbols is None ) : DCNL DCSP DCSP id _ or _ symbols = { } DCNL DCSP if ( id _ or _ symbols is not None ) : DCNL DCSP DCSP if isinstance ( id _ or _ symbols , basestring ) : DCNL DCSP DCSP DCSP id _ or _ symbols = &apos; &apos; DCNL DCSP DCSP elif isinstance ( id _ or _ symbols , basestring ) : DCNL DCSP DCSP DCSP id _ or _ symbols = str ( id _ or _ symbols ) DCNL DCSP DCSP elif isinstance ( id _ or _ symbols , basestring ) : DCNL DCSP DCSP DCSP id _ or _ symbols = str ( id _ or _ symbols ) DCNL DCSP DCSP elif isinstance ( id _ or _ symbols , basestring ) : DCNL DCSP DCSP DCSP id _ or _ symbols = str ( id _ or _ symbols ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP id _ or _
DCSP perms = &#91; &#93; DCNL DCSP for obj in objs : DCNL DCSP DCSP for obj in objs : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield obj ) DCNL DCSP DCSP DCSP except Exception : DCNL DCSP DCSP DCSP DCSP pass
DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( inst is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL
DCSP ret = { } DCNL DCSP for ( key , value ) in six.iteritems ( functions ) : DCNL DCSP DCSP ret &#91; key &#93; = func ( * args , * * kwargs ) DCNL DCSP return ret
DCSP vpc _ id = vpc _ conn.get _ all _ vpcs ( vpc _ id = vpc _ id , vpc _ id = vpc _ id , cidr = cidr , cidr = cidr ) DCNL DCSP if ( not vpc _ id ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( vpc _ ids ) = = 1 ) : DCNL DCSP DCSP return vpc _ id DCNL DCSP else : DCNL DCSP DCSP return None
DCSP @ functools.wraps ( meth ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP table = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; , &apos; comment &apos; : &apos; &apos; } DCNL DCSP try : DCNL DCSP DCSP table = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( name , character _ set ) , * * connection _ args ) DCNL DCSP except TerminalException as e : DCNL DCSP DCSP log.error ( &apos; Failed DCSP to DCSP parse DCSP database DCSP database : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP result = &#91; &#93; DCNL DCSP for line in source : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL
DCSP if ( required is None ) : DCNL DCSP DCSP required = { } DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( required is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( allowed is None ) : DCNL DCSP DCSP required = &#91; &#93; DCNL DCSP if ( allowed is None ) : DCNL DCSP DCSP allowed = &#91; &#93; DCNL DCSP if ( allowed is None ) : DCNL DCSP DCSP choices = &#91; &#93; DCNL DCSP for ( attr , value ) in attr@@ s.items ( ) : DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( attr in allowed ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP if ( not conn ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP return unicode ( int ( time.time ( ) ) )
DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; )
DCSP if copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP elif copy : DCNL DCSP DCSP scale = scale DCNL DCSP else : DCNL DCSP DCSP scale = scale DCNL DCSP return scale
DCSP incs = _ FixPaths ( incs ) DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( incs ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP
DCSP try : DCNL DCSP DCSP with open ( dev , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP for line in f : DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP return struct.pack ( &apos; &gt; H &apos; , x , y , z )
DCSP FigureClass = kwargs.pop ( &apos; FigureClass &apos; , Figure ) DCNL DCSP figure = FigureClass ( * * kwargs ) DCNL DCSP canvas = FigureCanvas@@ GTK ( figure ) DCNL DCSP if ( figManager is not None ) : DCNL DCSP DCSP figManager.canvas.draw _ idle ( )
DCSP if ( len ( results ) = = 1 ) : DCNL DCSP DCSP return results &#91; 0 &#93; DCNL DCSP if ( len ( results ) = = 1 ) : DCNL DCSP DCSP return results &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP
DCSP try : DCNL DCSP DCSP klass = klass . _ _ class _ _ . _ _ name _ _ DCNL DCSP except KeyError : DCNL DCSP DCSP klass = klass DCNL DCSP return klass
DCSP try : DCNL DCSP DCSP return globals ( ) &#91; &apos; operator &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( spec , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string DCSP of DCSP % s &apos; % ( spec . _ _ name _ _ , version ) ) ) DCNL DCSP if ( not isinstance ( spec , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string DCSP of DCSP % s &apos; % ( spec . _ _ name _ _ , version ) ) ) DCNL DCSP if ( not isinstance ( spec , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP dictionary . &apos; % spec ) ) DCNL DCSP if ( not isinstance ( spec , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP dictionary . &apos; % spec ) ) DCNL DCSP if ( not isinstance ( spec , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must
DCSP conf = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP axis = 0 DCNL DCSP
DCSP return config.get _ cloud _ config _ value ( &apos; create &apos; , vm _ , _ _ opts _ _ , search _ global = False )
DCSP try : DCNL DCSP DCSP mem _ info = os.sysconf ( &apos; SC _ NPROCESSORS _ ONLN &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP return mem _ info
DCSP return dict ( ( ( k , v ) for ( k , v ) in params.items ( ) if ( v is not None ) ) )
DCSP pass
DCSP result = { } DCNL DCSP for item in attribute : DCNL DCSP DCSP if ( item not in attribute ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in attribute ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in attribute ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item in attribute ) : DCNL DCSP DCSP DCSP return item DCNL DCSP return None
DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not
DCSP global _ lexer _ cache DCNL DCSP _ lexer _ cache = { }
DCSP ret = { } DCNL DCSP if ( repo _ name is not None ) : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Job DCSP { 0 } DCSP does DCSP not DCSP exist . &apos; .format ( repo _ name ) DCNL DCSP else : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Job DCSP { 0 } DCSP does DCSP not DCSP exist . &apos; .format ( repo _ name ) DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Job DCSP { 0 } DCSP does DCSP not DCSP exist . &apos; .format ( repo _ name ) DCNL DCSP return ret
DCSP if G.is _ directed ( ) : DCNL DCSP DCSP edges = G.edges ( keys = True ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( keys = True ) DCNL DCSP if G.is _ multigraph ( ) : DCNL DCSP DCSP edges = G.edges ( keys = True ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( keys = True ) DCNL DCSP edges = G.number _ of _ edges ( ) DCNL DCSP return ( edges , edges )
DCSP if ( not uri ) : DCNL DCSP DCSP return False DCNL DCSP if ( not uri.startswith ( &apos; http : / / &apos; ) ) : DCNL DCSP DCSP uri = &apos; https : / / { } : { } &apos; .format ( uri , uri ) DCNL DCSP else : DCNL DCSP DCSP uri = ( &apos; http : / / % s &apos; % uri ) DCNL DCSP return ( uri is not None )
DCSP section _ info = get _ course _ info _ section ( request , user , course , section _ key ) DCNL DCSP if ( not info _ info ) : DCNL DCSP DCSP return { } DCNL DCSP return { &apos; course _ info &apos; : course _ info , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section _ key , &apos; section _ key &apos; : section
DCSP hosts = models.Host.query _ objects ( hosts _ to _ release ) DCNL DCSP reservations.@@ force _ release ( hosts _ to _ release = hosts _ to _ release , username = username )
DCSP for i in range ( 0 , len ( sys.argv ) ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 )
DCSP validate _ user _ preference ( requesting _ user , preference _ key , username ) DCNL DCSP return _ delete _ user _ preference ( requesting _ user , preference _ key , username )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( not isinstance ( t , Tag ) ) : DCNL DCSP DCSP return None DCNL DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , t )
DCSP ( _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _ _ , _ _ opts _
DCSP events = &#91; &#93; DCNL DCSP for i in xrange ( len ( args ) ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP time.sleep ( delay ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( delay )
DCSP return a.mean ( axis = axis , out = out , keepdims = keepdims )
DCSP return mark _ safe ( text )
DCSP count = 0 DCNL DCSP count = 0 DCNL DCSP for i in range ( len ( lst ) ) : DCNL DCSP DCSP count + = 1 DCNL DCSP DCSP count + = 1 DCNL DCSP return count
DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return path _ list DCNL DCSP if ( not path _ list ) : DCNL DCSP DCSP return
DCSP if ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( record is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return list ( record )
DCSP if use _ sudo : DCNL DCSP DCSP install _ setuptools ( python _ cmd = python _ cmd ) DCNL DCSP else : DCNL DCSP DCSP install _ setuptools ( python _ cmd = python _ cmd , use _ sudo = use _ sudo )
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP LOG.exception ( _ LE ( &apos; Failed DCSP to DCSP find DCSP error : DCSP % s &apos; ) , e )
DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP _ _ init _ _ ( self , * args , * * kwargs ) DCNL DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP _ _ init _ _ ( self , * args , * * kwargs ) DCNL DCSP _ _ init _ _ ( self , * args , * * kwargs )
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP for i in range ( ( len ( col ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP if ( col &#91; ( i + 1 ) &#93; = = row &#91; ( i + 1 ) &#93; ) : DCNL DCSP DCSP DCSP return i DCNL DCSP return None
DCSP if filename.endswith ( &apos; .py &apos; ) : DCNL DCSP DCSP return filename &#91; : ( -4 ) &#93; DCNL DCSP return filename
DCSP if isinstance ( msg , compat.string _ types ) : DCNL DCSP DCSP warnings.warn ( msg , DeprecationWarning , stacklevel = 2 ) DCNL DCSP else : DCNL DCSP DCSP warnings.warn ( msg , stacklevel = 2 )
DCSP return ( ( a &#91; 0 &#93; = = b &#91; 0 &#93; ) and ( a &#91; 1 &#93; = = b &#91; 1 &#93; ) )
DCSP while True : DCNL DCSP DCSP while True : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP DCSP DCSP conn.close ( ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP traceback.print _ exc ( )
DCSP if ( not u ) : DCNL DCSP DCSP return dup _ mul ( f , c , u , K ) DCNL DCSP else : DCNL DCSP DCSP return dmp _ mul _ ground ( f , c , u , K )
DCSP if ( ( not title ) or ( not title ) ) : DCNL DCSP DCSP title = title _ dict.get ( &apos; title &apos; ) DCNL DCSP if ( not title ) : DCNL DCSP DCSP title = title _ dict.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP title = title _ dict.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP title = title &#91; : ( -1 ) &#93; DCNL DCSP
DCSP from multiprocessing.synchronize import Semaphore DCNL DCSP return Semaphore ( value , value )
DCSP @ wraps ( case ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except SystemExit : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = { } DCNL
DCSP return dict ( ( ( k , v ) for ( k , v ) in params.items ( ) if ( v is not None ) ) )
DCSP pidfile = logging.getLogger ( _ _ name _ _ ) DCNL DCSP scenarios _ scenarios = &#91; &#93; DCNL DCSP for p in scenarios _ scenarios : DCNL DCSP DCSP pidfile = logging.getLogger ( name ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP pid@@ s.append ( lockfile ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP pid@@ s.append ( pid@@ s.pop ( ) ) DCNL DCSP DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP
DCSP centerMinusBegin = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter = ( center - begin ) DCNL DCSP endMinusCenter
DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else
DCSP if ( resp _ timeout is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( method _ timeout is not None ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if ( method _ timeout is not None ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if ( method _ timeout is not None ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if ( method _ timeout is not None ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP return resp
DCSP if ( not isinstance ( vectors , ( list , tuple ) ) ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP return make _ model ( vectors , shape , settings )
DCSP username = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass ( ) DCNL DCSP password = getpass
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return args &#91; 0 &#93;
DCSP if ( bw is None ) : DCNL DCSP DCSP bw = bw DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP elif ( bw is None ) : DCNL DCSP DCSP bw = data &#91; : , np.newaxis &#93; DCNL DCSP else : DCNL DCSP
DCSP version = token.split _ contents ( ) &#91; 1 : &#93; DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP is DCSP not DCSP a DCSP valid DCSP version &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP requires DCSP &apos; version &apos; DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( (
DCSP authenticate ( username , password , post ) DCNL DCSP site = Site.objects.get _ current ( ) DCNL DCSP post = Site.objects.get _ current ( ) DCNL DCSP return post
DCSP if ( len ( games ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( games ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP f = open ( fname , &apos; rb &apos; ) DCNL DCSP f = open ( fname , &apos; rb &apos; ) DCNL DCSP f.close ( ) DCNL DCSP return f
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win _ win : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP with open ( s , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( text.encode ( encoding ) )
DCSP if ( not conn ) : DCNL DCSP DCSP conn = get _ conn ( ) DCNL DCSP try : DCNL DCSP DCSP pkg _ files = os.listdir ( pkg _ files ) DCNL DCSP except os.error : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP pkg _ files = os.listdir ( pkg _ files ) DCNL DCSP except os.error : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( pkg _ files ) ) : DCNL DCSP DCSP os.makedirs ( pkg _ files ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP os.makedirs ( pkg _ files ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP os.makedirs ( pkg _ files ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP os.makedirs ( pkg _ files ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP os.makedirs ( pkg _ files ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP raise CommandExecutionError (
DCSP ratio = &apos; auto &apos; DCNL DCSP bc = BalanceCascade ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , bc.fit _ sample , X , Y )
DCSP return _ menu _ link ( text , * args , * * kwargs )
DCSP ret = { } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; grains.get &apos; &#93; ( &apos; role _ list &apos; ) DCNL DCSP if ( len ( roles ) = = 1 ) : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Role DCSP &quot; { 0 } &quot; DCSP does DCSP not DCSP exist . &apos; .format ( role &#91; &apos; roles &apos; &#93; ) DCNL DCSP return ret
DCSP eib = XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ promoted _ _ build@@ Publisher &apos; ) DCNL DCSP XML.SubElement ( plugin , &apos; plugin &apos; ) .text = str ( data.get ( &apos; include-@@ failed-builds &apos; , False ) ) .lower ( )
DCSP if ( not context ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP return context &#91; u &apos;request &apos; &#93; .render ( context )
DCSP if ( ( doc _ size is not None ) and ( doc _ size &lt; max _ size ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP an DCSP integer &apos; % doc _ size ) ) DCNL DCSP if ( not isinstance ( doc _ size , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP an DCSP integer &apos; % doc _ size ) ) DCNL DCSP if ( not isinstance ( doc _ size , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP an DCSP integer &apos; % doc _ size ) ) DCNL DCSP if ( not isinstance ( doc _ size , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP an DCSP integer &apos; % doc _ size ) ) DCNL DCSP if ( not isinstance ( doc _ size , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP
DCSP return create _ model ( session , forward _ only )
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP add _ devices (
DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP if ( not session ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP credential =
DCSP click.@@ clear ( )
DCSP dist = rs.randn ( 3 , 3 ) DCNL DCSP algo.randomize _ corrmat ( a , &apos; s1 &apos; , &#91; 1.0 , 1.0 &#93; )
DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return ( &apos; %
DCSP if ( not isinstance ( y , Symbol ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial DCSP of DCSP % s &apos; % ( x , y ) ) ) DCNL DCSP if ( not isinstance ( y , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial DCSP of DCSP % s &apos; % ( x , y ) ) ) DCNL DCSP if ( not isinstance ( y , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial DCSP of DCSP % s &apos; % ( x , y ) ) ) DCNL DCSP if ( not isinstance ( y , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial DCSP of DCSP % s &apos; % ( x , y ) ) ) DCNL DCSP if ( not isinstance ( t ,
DCSP if ( not isinstance ( path , list ) ) : DCNL DCSP DCSP path = &#91; path &#93; DCNL DCSP paths = &#91; &#93; DCNL DCSP for path in path : DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP
DCSP return &#91; &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; &#93;
DCSP data = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP assert _ equal ( len ( info ) , 1 ) DCNL DCSP assert _ equal ( len ( info ) , 1 ) DCNL DCSP assert _ equal ( len ( info ) , 1 ) DCNL DCSP assert _ equal ( len ( info ) , 1 ) DCNL DCSP assert _ equal ( len ( info ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 0 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal ( len ( info &#91; 1 &#93; ) , 1 ) DCNL DCSP assert _ equal (
DCSP if isinstance ( func , six.string _ types ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP else : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _ func DCNL DCSP if ( func is None ) : DCNL DCSP DCSP func = func.im _
DCSP if ( not tag _ tags ) : DCNL DCSP DCSP return None DCNL DCSP tag _ tags = &#91; &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos; , &apos; tag &apos;
DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP count = 0 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP DCSP DCSP count = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP
DCSP if isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins , order _ book _ id ) DCNL DCSP return ( order _ book _ id , order _ book _ id )
DCSP assert ( hug.test.get ( api , &apos; foo &apos; ) .data = = &apos; Hello DCSP World ! &apos; )
DCSP flow _ dict = { } DCNL DCSP for ( k , v ) in G.edges ( ) : DCNL DCSP DCSP flow _ dict &#91; k &#93; = v DCNL DCSP return flow _ dict
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.attach _ principal _ policy ( policyName = policyName , principal = principal ) DCNL DCSP DCSP return { &apos; deleted &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP reload &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP if ( not isinstance ( config , basestring ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP with open ( hass.config.path ( config ) , &apos; rb &apos; ) as fdesc : DCNL DCSP DCSP DCSP fdesc.write ( json.dumps ( config ) ) DCNL DCSP except Exception as err : DCNL DCSP DCSP _ LOGGER.error ( &apos; Unable DCSP to DCSP connect DCSP to DCSP % s : DCSP % s &apos; , config , exc ) DCNL DCSP DCSP return False
DCSP if hasattr ( func , &apos; _ _ init _ _ &apos; ) : DCNL DCSP DCSP return func . _ _ init _ _ DCNL DCSP else : DCNL DCSP DCSP return func . _ _ closure _ _
DCSP _ check _ access ( &apos; group _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; group _ create &apos; , context , data _ dict ) DCNL DCSP return _ group _ or _ org _ create ( context , data _ dict )
DCSP try : DCNL DCSP DCSP if ( not os.path.exists ( destination ) ) : DCNL DCSP DCSP DCSP return DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return json.loads ( content.decode ( ) ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP return None DCNL DCSP return None
DCSP header _ dict = { } DCNL DCSP for ( name , value ) in zip ( logfile , logfile ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP url = open ( logfile , &apos; rb &apos; ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( str ( e ) , e ) ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( str ( e ) , str ( e ) ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( str ( e ) , str ( e ) ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( str ( e ) , str ( e ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( str ( e ) , e ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos;
DCSP if ( not perf _ data ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( perf _ data is None ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( perf _ data is None ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( perf _ data is None ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( perf _ data is None ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( perf _ data &#91; 0 &#93; is not None ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not perf _ data ) or ( not perf _ data ) ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError : DCNL DCSP DCSP pass DCNL DCSP return { }
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( cls ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return cls ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP return cls ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP def cleanup ( ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return fn ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return fn ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except Exception : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return inner
DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( body is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( body is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( body is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( body is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( body is not None ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = body _ type DCNL DCSP if body : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = body _ type DCNL DCSP return response
DCSP status = client.show _ volume ( volume _ id ) &#91; &apos; status &apos; &#93; DCNL DCSP if ( status = = &apos; DONE &apos; ) : DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout ) DCNL DCSP DCSP time.sleep ( client.build _ timeout )
DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP operator DCSP type DCSP % s &apos; % type ( expr ) . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP operator . &apos; % type ( expr ) . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP operator DCSP type : DCSP % s &apos; % type ( expr ) . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP operator DCSP type : DCSP % s &apos; %
DCSP FigureClass = kwargs.pop ( &apos; FigureClass &apos; , Figure ) DCNL DCSP thisFig = FigureClass ( * args , * * kwargs ) DCNL DCSP return new _ figure _ manager _ given _ figure ( num , thisFig )
DCSP return md5 ( case.mktemp ( ) ) .hexdigest ( )
DCSP mails = &#91; &#93; DCNL DCSP for app in apps.get _ app _ apps ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP review = apps.get _ model ( app , u &apos;@@ Review &apos; ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EACCES ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not review ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP form.save ( ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP logging.error ( u &apos;Failed DCSP to DCSP set DCSP review DCSP request DCSP from DCSP % s : DCSP % s &apos; , e , e ) DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP result = compute ( expr , d , * * kwargs ) DCNL DCSP if ( result is not None ) : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return result
DCSP if full _ value : DCNL DCSP DCSP if full _ value : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return False
DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP data = read _ raw _ fif ( fname , proj = False , eeg = verbose , verbose = verbose , verbose = verbose ) DCNL DCSP DCSP if ( proj is not None ) : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP raise RuntimeError ( &apos; No DCSP events DCSP found . &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP raise RuntimeError ( ( &apos; Could DCSP not DCSP read DCSP % s DCSP from DCSP % s &apos; % ( fname , fname ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP raise RuntimeError ( ( &apos; % s DCSP does DCSP not DCSP exist DCSP in DCSP % s &apos; % ( fname , fname ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise RuntimeError ( &apos; No DCSP such DCSP file . &apos; )
DCSP return _ get _ resource ( &apos; resource _ create &apos; , context , data _ dict )
DCSP if ( root is None ) : DCNL DCSP DCSP root = nx.Graph ( ) DCNL DCSP G = nx.empty _ graph ( G ) DCNL DCSP G.add _ edges _ from ( nx.utils.@@ pairwise ( G ) ) DCNL DCSP return G
DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP have DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( password , str ) ) : DCNL DCSP
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( response is None ) : DCNL DCSP DCSP DCSP cherrypy.log ( ( &apos; Redirecting DCSP % s DCSP to DCSP % s &apos; % ( uri , uri ) ) ) DCNL DCSP DCSP return redirect ( uri , permanent = abort , code = code , request = request , response = body ) DCNL DCSP else : DCNL DCSP DCSP return redirect ( uri , permanent = abort , code = code , body = body , request = request , response = body )
DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP args = &#91; &#93; DCNL DCSP for
DCSP sql = &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP sql = &apos; \ n
DCSP if ( not vg _ exists ( vg _ name ) ) : DCNL DCSP DCSP raise error.TestError ( ( &apos; Invalid DCSP volume DCSP name DCSP % s &apos; % lv _ name ) ) DCNL DCSP if ( lv _ name not in lv _ exists ( vg _ name , lv _ name ) ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP ret = { &apos; user &apos; : user , &apos; user &apos; : user } DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger.addHandler ( NullHandler ( ) ) DCNL DCSP return logger
DCSP rel = rel.@@ lower ( ) DCNL DCSP rel = rel.@@ pop ( 0 ) DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( rel is None ) : DCNL DCSP DCSP return None DCNL DCSP
DCSP if ( ( idx is None ) or ( idx = = 0 ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( idx = = 0 ) : DCNL DCSP DCSP
DCSP auth = get _ paged _ request ( project = project , num = num , auth = auth ) DCNL DCSP if auth : DCNL DCSP DCSP response.raise _ for _ status ( ) DCNL DCSP return response.json ( )
DCSP if ( not isinstance ( text , string _ types ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( text , ( list , tuple ) ) ) : DCNL DCSP
DCSP return &#91; i for i in &#91; &#93; &#93;
DCSP return ( ( a * b ) + ( a * b ) )
DCSP print ( _ _ doc _ _ ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stderr.flush ( ) DCNL DCSP sys.stdout.flush ( )
DCSP if ( &apos; proxy &apos; in opts ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP
DCSP config _ path = os.path.join ( config _ path , &apos; config &apos; ) DCNL DCSP with open ( config _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP for line in f : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP
DCSP if ( config _ path is None ) : DCNL DCSP DCSP config _ path = config.get ( config _ path ) DCNL DCSP else : DCNL DCSP DCSP config _ path = config.get ( config _ path ) DCNL DCSP if ( config _ path is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( config _ path is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( config _ path is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( config _ path is None ) : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return True
DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( klass . _ _ class _ _ . _ _ name _ _ , klass . _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( klass . _ _ name _ _ , klass . _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( klass . _ _ name _ _ , klass . _ _ name _ _ ) ) )
DCSP if ( retries is None ) : DCNL DCSP DCSP retries = 0 DCNL DCSP else : DCNL DCSP DCSP retries = 0 DCNL DCSP if ( retries &gt; = 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP comment + = &apos; \ n &apos; DCNL DCSP if (
DCSP dist _ names = &#91; &#93; DCNL DCSP for ( i , sample _ names ) in enumerate ( zip ( sample _ names , sample _ names ) ) : DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( dist _ names ) = = 0 ) : DCNL DCSP DCSP DCSP continue
DCSP s3.prep = ( lambda r : ( r.method = = &apos; search _ ac &apos; ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id
DCSP if isinstance ( addresses , list ) : DCNL DCSP DCSP return list ( addresses ) DCNL DCSP elif isinstance ( addresses , list ) : DCNL DCSP DCSP return list ( map ( list , addresses ) ) DCNL DCSP elif isinstance ( addresses , list ) : DCNL DCSP DCSP return list ( map ( list , addresses ) ) DCNL DCSP else : DCNL DCSP DCSP return list ( addresses )
DCSP for handler in handler _ list : DCNL DCSP DCSP for handler in handler _ list : DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( handler . _ _ class _ _ . _ _ name _ _ , entry ) )
DCSP line = text.split ( &apos; \ n &apos; ) DCNL DCSP if ( not line ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP return line &#91; : ( -1 ) &#93;
DCSP rc ( u &apos;image &apos; , cmap = u &apos;@@ cool &apos; ) DCNL DCSP im = gci ( ) DCNL DCSP if ( im is not None ) : DCNL DCSP DCSP im.set _ cmap ( cm.@@ pri@@ sm )
DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , output _ loglevel = output _ loglevel , ignore _ retcode = ignore _ retcode , use _ vt = use _ vt , use _ vt = use _ vt )
DCSP n = len ( data ) DCNL DCSP if ( ( n _ bins is None ) or ( n _ bins is None ) ) : DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP else : DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP else : DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP else : DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins = ( n _ bins - 1 ) DCNL DCSP DCSP n _ bins
DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &amp; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &amp; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &amp; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP data = data.replace ( &apos; &quot; &apos; , &apos; &amp; quot ; &apos; ) DCNL DCSP return data
DCSP return ( u &apos; % s _ % s &apos; % ( key _ prefix , version ) )
DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( compute is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( free
DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = None DCNL DCSP else : DCNL DCSP
DCSP message = MIMEText ( message ) DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message &#91; &apos; message &apos; &#93; = text DCNL DCSP message
DCSP if ( not isinstance ( filename , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % filename ) ) DCNL DCSP if ( not isinstance ( filename , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % filename ) ) DCNL DCSP if ( not isinstance ( filename , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; filename DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % filename ) ) DCNL DCSP if ( not isinstance ( filename , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % filename ) ) DCNL DCSP if ( not re.match ( &apos; \ \ s + &apos; , filename ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP
DCSP if ( _ _ grains _ _ &#91; &apos; os _ family &apos; &#93; = = &apos; Windows &apos; ) : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; cassandra.@@ host &apos; ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; poudriere.@@ host &apos; )
DCSP collected _ globs = set ( ) DCNL DCSP for bear in possible _ globs : DCNL DCSP DCSP if ( not os.path.isdir ( bear ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP collected = &#91; &#93; DCNL DCSP DCSP for bear in possible _ globs : DCNL DCSP DCSP DCSP if ( not os.path.isdir ( bear ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( bear is not None ) and ( not isinstance ( bear , dict ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( bear is not None ) and ( not isinstance ( bear , dict ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.isdir ( bear ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield bear ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( bear , list ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( password is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP return _ format _ to _ bytes ( password , salt , encrypt ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return &apos; &apos;
DCSP stats = defaultdict ( int ) DCNL DCSP for ( key , val ) in six.iteritems ( values ) : DCNL DCSP DCSP stats &#91; key &#93; = val DCNL DCSP return stats
DCSP return metric ( params )
DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return ( 1.0 - ( ( 1.0 - center ) * * 2 ) ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return ( 1.0 - ( ( 1.0 - center ) * * 2 ) ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( axis = = 0 ) :
DCSP from boto.@@ dynamodb.@@ layer2 import Layer2 DCNL DCSP return get _ regions ( &apos; elastic@@ loadbalan@@ cing &apos; , connection _ cls = ELB@@ Connection )
DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( arr , cupy.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP return
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , text )
DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) :
DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP DCSP s.connect ( ( host , port ) ) DCNL DCSP DCSP DCSP sock.connect ( ( host , port ) ) DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP pass
DCSP result = _ get _ service _ result _ parser ( run ) DCNL DCSP if ( result is not None ) : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return None
DCSP qos _ specs = _ get _ qos _ specs ( context , qos _ specs _ id , specs ) DCNL DCSP if ( qos _ specs is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( qos _ specs is None ) : DCNL DCSP DCSP specs = &#91; &#93; DCNL DCSP DCSP specs = &#91; &#93; DCNL DCSP DCSP for specs in specs : DCNL DCSP DCSP DCSP qos _ specs = &#91; &#93; DCNL DCSP DCSP DCSP for key in specs : DCNL DCSP DCSP DCSP DCSP if ( key in specs ) : DCNL DCSP DCSP DCSP DCSP DCSP specs &#91; key &#93; = specs &#91; key &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP qos _ specs &#91; key &#93; = specs &#91; key &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP qos _ specs &#91; key &#93; = specs &#91; key &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP qos _ specs &#91; key &#93; = specs &#91; key &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP extensions = &#91; &#93; DCNL DCSP for extension in extensions : DCNL DCSP DCSP if ( extension not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP x = np.zeros ( ( n _ objs , n _ objs ) ) DCNL DCSP for i in range ( ( n _ objs - 1 ) ) : DCNL DCSP DCSP x = ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) - ( x &#91; ( i , 1 ) &#93; * x &#91; ( i + 1 ) &#93; ) ) DCNL DCSP DCSP x &#91; ( ( i + 1 ) - 1 ) &#93; = ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) - ( x &#91; ( i , 1 ) &#93; * x &#91; ( i + 1 ) &#93; ) ) DCNL DCSP return ( x , y )
DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax =
DCSP if ( n _ times is None ) : DCNL DCSP DCSP n _ times = len ( src ) DCNL DCSP if ( n _ times is None ) : DCNL DCSP DCSP n _ times = len ( src ) DCNL DCSP if ( n _ times is not None ) : DCNL DCSP DCSP if ( n _ times is None ) : DCNL DCSP DCSP DCSP n _ times = 0 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP specified &apos; ) DCNL DCSP if ( n _ times is None ) : DCNL DCSP DCSP n _ times = 0 DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP specified &apos; ) DCNL DCSP if ( n _ times is None ) : DCNL DCSP DCSP n _ times = 0 DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP specified &apos; ) DCNL DCSP if ( n _ times is None ) : DCNL DCSP DCSP n _ times = 0 DCNL DCSP else : DCNL
DCSP return IMPL.security _ group _ rule _ get _ by _ instance ( context , instance _ uuid )
DCSP font = get _ font ( section = section , font = option , font _ size _ delta = font _ size _ delta ) DCNL DCSP if ( font is not None ) : DCNL DCSP DCSP return font &#91; &apos; font &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP tp0 _ store _ fs.@@ save ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP tp0 _ store _ fs.@@ save ( )
DCSP if isinstance ( boolean , bool ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return decorator
DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError : DCNL DCSP DCSP pass
DCSP changed = False DCNL DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP changed = True DCNL
DCSP if ( output _ dtype is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ shape DCSP must DCSP be DCSP a DCSP dictionary . &apos; ) DCNL DCSP if ( not isinstance ( input , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( input ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( len ( input ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( len ( input ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP 2-dimensional . &apos; ) DCNL DCSP if ( len ( input ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP 2-dimensional . &apos; ) DCNL DCSP if ( len ( input ) = = 1 ) : DCNL
DCSP with open ( filepath , &apos; rb &apos; ) as f : DCNL DCSP DCSP hash _ hash = f.read ( ) DCNL DCSP DCSP hash _ hash = hashlib.md5 ( ) .hexdigest ( ) DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash _ hash = hash _ hash &#91; : ( -1 ) &#93; DCNL DCSP DCSP hash
DCSP return IMPL.backup _ destroy ( context , backup _ id )
DCSP resource = service &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL
DCSP t.lexer.lineno + = t.value.count ( &apos; \ n &apos; ) DCNL DCSP return t
DCSP params = { &apos; page &apos; : page , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size , &apos; page _ size &apos; : page _ size } DCNL DCSP return render _ to _ response ( &apos;
DCSP if full : DCNL DCSP DCSP if full : DCNL DCSP DCSP DCSP return ( &apos; % s : % s &apos; % ( line , pattern ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( &apos; % s DCSP % s &apos; % ( line , pattern ) ) DCNL DCSP else : DCNL DCSP DCSP return line
DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax =
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP @ functools.wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP product = get _ object _ or _ 404 ( SaleOrder , pk = order _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; order &apos; : order } ) DCNL DCSP return render _ to _ response ( &apos; sales / product _ product _ add &apos; , { &apos; order &apos; : order } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( not isinstance ( G , string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP string &apos; % ( label , ) ) ) DCNL DCSP if ( not isinstance ( G , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP string &apos; % ( label , ) ) ) DCNL DCSP if ( not isinstance ( G , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP string &apos; % ( label , ) ) ) DCNL DCSP if ( not isinstance ( G , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP string &apos; % ( label , ) ) ) DCNL DCSP try : DCNL DCSP DCSP
DCSP if namespaces : DCNL DCSP DCSP builder = Expat@@ BuilderNS ( ) DCNL DCSP else : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP if namespaces : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP else : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP if namespaces : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP else : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP if ( not isinstance ( string , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % string ) ) DCNL DCSP if namespaces : DCNL DCSP DCSP builder = Expat@@ BuilderNS ( ) DCNL DCSP elif isinstance ( string , ( list , tuple ) ) : DCNL DCSP DCSP builder = Expat@@ BuilderNS ( ) DCNL DCSP else : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP if namespaces : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP else : DCNL DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP return
DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP lines.append ( line ) DCNL DCSP return &apos; \ n &apos; .join ( lines )
DCSP if ( not isinstance ( val , ( list , tuple ) ) ) : DCNL DCSP DCSP val = &#91; val &#93; DCNL DCSP if ( not isinstance ( val , ( list , tuple ) ) ) : DCNL DCSP DCSP val = &#91; val &#93; DCNL DCSP for i in xrange ( len ( val ) ) : DCNL DCSP DCSP for i in xrange ( ( len ( i ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield i )
DCSP return IMPL.worker _ destroy ( context , * * filters )
DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; cmd.run _ stdout &apos; , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; = = 0 ) : DCNL DCSP DCSP return ret &#91; &apos; stdout &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP unit = int ( time.time ( ) ) DCNL DCSP DCSP unit = int ( time.time ( ) ) DCNL DCSP DCSP unit = int ( time.time ( ) ) DCNL DCSP DCSP unit = int ( time.time ( ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP number DCSP of DCSP % s &apos; % ( unit , unit ) ) ) DCNL DCSP if ( unit = = &apos; units &apos; ) : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( unit , unit ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s
DCSP chunks = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( sequence ) , size ) : DCNL DCSP DCSP ( yield sequence &#91; i : ( i + size ) &#93; ) DCNL DCSP DCSP ( yield sequence &#91; i : ( i + size ) &#93; )
DCSP if ( not isinstance ( action , ( list , tuple ) ) ) : DCNL DCSP DCSP filters.append ( item ) DCNL DCSP elif isinstance ( action , basestring ) : DCNL DCSP DCSP filters.insert ( 0 , item ) DCNL DCSP else : DCNL DCSP DCSP filters.insert ( 0 , item )
DCSP if ( &apos; tempest / lib &apos; in logical _ line ) : DCNL DCSP DCSP ( yield ( 0 , &apos; N@@ 307 : DCSP assertRaises DCSP Exception DCSP too DCSP broad &apos; ) )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return ret
DCSP run _ as _ root ( ( &apos; % ( distribution ) s DCSP % ( distribution ) s &apos; % locals ( ) ) )
DCSP return redirect ( url _ for ( &apos; delay &apos; , delay = delay ) )
DCSP try : DCNL DCSP DCSP unit = get _ unit _ from _ unit ( unit _ 1 , unit _ 1 ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit _ 1 ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = unit _ LooseVersion ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP unit = int ( unit ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL
DCSP return ( not is _ installed _ requirement ( requirement ) )
DCSP i = 0 DCNL DCSP for i in range ( 0 , ( i + 1 ) ) : DCNL DCSP DCSP i + = 1 DCNL DCSP DCSP i + = 1 DCNL DCSP return i
DCSP try : DCNL DCSP DCSP return launch _ server ( a _ flow , network , first , count , ip , ip ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; ! = &apos; Error &apos; ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP return False
DCSP if use _ datetime : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP mkdatetime =
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 8 ) DCNL DCSP c = Detach@@ Type@@ AndSpareHalfOctets ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP return Response ( &apos; sup@@ ressed &apos; )
DCSP headers = { } DCNL DCSP for ( key , value ) in full _ dict.items ( ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP headers &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP headers &#91; key &#93; = value DCNL DCSP return headers
DCSP if ( ( val % 4 ) = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP return ( ( ( val &gt; &gt; 24 ) &amp; 255 ) , ( val &lt; &lt; 8 ) )
DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) :
DCSP view _ plugin = datapreview.get _ view _ plugin ( resource &#91; &apos; view _ type &apos; &#93; ) DCNL DCSP return view _ plugin.info ( ) .get ( &apos; resource _ view &apos; , { } ) .get ( &apos; resource _ view &apos; , { } )
DCSP ret = { } DCNL DCSP for attr in attr : DCNL DCSP DCSP if ( key in attr ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = value DCNL DCSP return ret
DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;accounts &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get
DCSP try : DCNL DCSP DCSP return get _ timezone ( ) .get _ current _ timezone ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP if ( len ( lights ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP encodedStream = &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( xml , xml _ parent , data ) , python _ shell = False ) DCNL DCSP except CommandExecutionError as exc : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Unable DCSP to DCSP load DCSP { 0 } : DCSP { 1 } &apos; .format ( result , str ( err ) ) ) DCNL DCSP return ret
DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = { } DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = { } DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = { } DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = { } DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( extra _ args is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL
DCSP if ( a is None ) : DCNL DCSP DCSP a = &#91; &#93; DCNL DCSP a = &#91; &#93; DCNL DCSP a = &#91; &#93; DCNL DCSP for a in c : DCNL DCSP DCSP if ( a = = b ) : DCNL DCSP DCSP DCSP a = b DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP a = b DCNL DCSP return a
DCSP send _ notification ( user = user , action = TICKET _ PURCHASED _ ORGANIZER , subject = MAILS &#91; TICKET _ PURCHASED _ ORGANIZER &#93; &#91; &apos; subject &apos; &#93; .format ( invoice _ id = invoice _ id , order _ url = order _ url ) )
DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape &#91; 0 &#93; , shape &#91; 1 &#93; ) DCNL DCSP else : DCNL DCSP DCSP image = image &#91; 0 &#93; DCNL DCSP return image
DCSP if ( len ( image ) ! = len ( image ) ) : DCNL DCSP DCSP raise ValueError ( &apos; percentile DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( image ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; percentile DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( len ( image ) = = 1 ) and ( len ( image ) = = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; percentile DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( ( len ( image ) = = 1 ) and ( len ( image ) = = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; percentile DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( ( len ( image ) = = 1 ) and ( len ( image ) = = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; percentile DCSP must DCSP be DCSP greater DCSP than DCSP
DCSP if ( plural is not None ) : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( prefix , plural ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( prefix , plural ) )
DCSP if request.GET : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP else : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; infrastructure / index _ index &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP try : DCNL DCSP DCSP with open ( ssh _ bin , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP ip _ address = f.read ( ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ip _ address DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( A , Vector ) ) : DCNL DCSP DCSP raise ValueError ( &apos; A DCSP must DCSP be DCSP a DCSP non-negative DCSP integer
DCSP user = get _ user _ api _ key ( ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return get _ user _ api _ key ( ) DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP return None
DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( sequences ) = = 0 ) : DCNL DCSP DCSP raise ValueError
DCSP if ( tokens is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP tokens = tokens &#91; 0 &#93; DCNL DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( not isinstance ( asset _ dates , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP dates &apos; % dt _ idx ) ) DCNL DCSP if ( not isinstance ( asset _ dates , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP dates &apos; % dt _ idx ) ) DCNL DCSP if ( not isinstance ( asset _ dates , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP dates &apos; % dt _ idx ) ) DCNL DCSP if ( not isinstance ( asset _ dates , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP dates &apos; % dt _ idx ) ) DCNL DCSP if ( not isinstance ( asset _ dates , list ) ) : DCNL DCSP
DCSP return _ item _ create ( item = item , item _ id = item _ id , item _ type = item _ type , item _ type = item _ type , create = False , extra _ args = extra _ args , cibfile = cibfile )
DCSP if ( seed is None ) : DCNL DCSP DCSP seed = qubit _ ids DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = circuit DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = 0 DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed
DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( ( not overwrite ) or ( not overwrite ) ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP
DCSP if ( os.sep = = &apos; / &apos; ) : DCNL DCSP DCSP return &apos; / &apos; DCNL DCSP return path.replace ( &apos; / &apos; , &apos; / &apos; ) .replace ( &apos; / &apos; , &apos; / &apos; )
DCSP if ( _ _ grains _ _ &#91; &apos; os _ family &apos; &#93; = = &apos; Windows &apos; ) : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( _ get _ cron _ cmdstr ( path ) , runas = user , python _ shell = False ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( _ get _ cron _ cmdstr ( path ) , runas = user , python _ shell = False )
DCSP if ( image _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP img _ path = os.path.join ( image _ path , image _ path ) DCNL DCSP img _ path = os.path.join ( image _ path , image _ path ) DCNL DCSP img _ path = os.path.join ( image _ path , image _ path ) DCNL DCSP img _ path = os.path.join ( image _ path , image _ path ) DCNL DCSP return image _ channel
DCSP from django.conf import settings DCNL DCSP year _ date _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP if ( year _ month _ format = = &apos; YEAR _ MONTH _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = &apos; YEAR _ MONTH _ FORMAT &apos; DCNL DCSP if ( year _ month _ format = = &apos; YEAR _ MONTH _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = &apos; MONTH _ DAY _ FORMAT &apos; DCNL DCSP return ( year _ month _ format , month _ day _ format )
DCSP if isinstance ( value , ( int , long ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , str ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP else : DCNL DCSP DCSP value = str ( value ) DCNL DCSP return value
DCSP cert = _ _ salt _ _ &#91; &apos; icinga2.@@ generate _ cert &apos; &#93; ( name , cert ) DCNL DCSP return cert
DCSP if ( ( drive = = &apos; &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive = = &apos; / &apos; ) or ( drive = = &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( drive
DCSP if ( not config _ file ) : DCNL DCSP DCSP config _ file = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( _ _ grains _ _ , config _ file ) ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( state = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( state = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP elif ( state = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP elif ( state = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP try : DCNL DCSP DCSP hook ( ui , repo , * * kwargs ) DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( exc.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP return ( hasattr ( function , &apos; _ _ call _ _ &apos; ) and ( function . _ _ class _ _ . _ _ name _ _ = = &apos; function &apos; ) )
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP count = 0 DCNL DCSP while True : DCNL DCSP DCSP line = line.split ( ) DCNL DCSP DCSP if ( line = = 0 ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = =
DCSP if os.path.exists ( path ) : DCNL DCSP DCSP return path DCNL DCSP else : DCNL DCSP DCSP return path
DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import django DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try
DCSP if hasattr ( obj , &apos; _ _ signature _ _ &apos; ) : DCNL DCSP DCSP return obj . _ _ signature _ _ DCNL DCSP else : DCNL DCSP DCSP return obj . _ _ signature _ _ ( )
DCSP try : DCNL DCSP DCSP _ _ salt _ _ &#91; &apos; napalm.call &apos; &#93; ( &apos; set _ server _ setting &apos; , settings = settings , server = server ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Failed DCSP to DCSP set DCSP server DCSP setting : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP return False
DCSP if ( netaddr.IPNetwork ( network ) .version = = 6 ) : DCNL DCSP DCSP return &apos; IPv6 &apos; DCNL DCSP elif ( netaddr.IPNetwork ( network ) .version = = 6 ) : DCNL DCSP DCSP return &apos; IPv6 &apos; DCNL DCSP elif ( netaddr.IPNetwork ( network ) .version = = 6 ) : DCNL DCSP DCSP return &apos; IPv@@ 4&apos;
DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if (
DCSP if ( not isinstance ( value , unicode ) ) : DCNL DCSP DCSP value = unicode ( value ) DCNL DCSP if ( not isinstance ( value , unicode ) ) : DCNL DCSP DCSP value = unicode ( value ) DCNL DCSP if ( not isinstance ( value , unicode ) ) : DCNL DCSP DCSP value = unicode ( value ) DCNL DCSP if ( not isinstance ( value , unicode ) ) : DCNL DCSP DCSP text = unicode ( value ) DCNL DCSP return unicode ( value , encoding , errors )
DCSP secret _ key = &apos; { } / { } &apos; .format ( project _ directory , project _ directory ) DCNL DCSP return secret _ key
DCSP try : DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP module = sys.modules &#91; moduleName &#93; DCNL DCSP DCSP
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return tokens &#91; 0 &#93;
DCSP ret = &#91; &#93; DCNL DCSP for item in gc.get _ objects ( ) : DCNL DCSP DCSP if isinstance ( item , Variable ) : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret.append ( item ) DCNL DCSP return ret
DCSP if ( method = = &apos; win32 &apos; ) : DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP DCSP alpha = 1.0 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP AssertUnreachable ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP account = get _ object _ or _ 404 ( Account , pk = account _ id ) DCNL DCSP return render _ to _ response ( &apos; finance / account _ view &apos; , { &apos; account &apos; : account } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( not hasattr ( exc , &apos; frozen &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( exc , dict ) ) : DCNL DCSP DCSP return False DCNL
DCSP func.argtypes = argtypes DCNL DCSP func.restype = ctypes.c _ void _ p DCNL DCSP func.restype = ctypes.c _ void _ p DCNL DCSP return ptr
DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP
DCSP meta = dict ( ( ( k , v ) for ( k , v ) in params.items ( ) if ( v is not None ) ) ) DCNL DCSP return meta
DCSP assert _ array _ almost _ equal ( mat.p _ mat , preds , err _ msg , verbose ) DCNL DCSP if verbose : DCNL DCSP DCSP raise AssertionError ( ( &apos; Invalid DCSP array DCSP list DCSP of DCSP % s &apos; % ( err _ msg , ) ) )
DCSP try : DCNL DCSP DCSP int ( &apos; 1&apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP pass
DCSP output _ filename = os.path.join ( dataset _ dir , &apos; cifar-10-batches-@@ py &apos; ) DCNL DCSP output _ filename = os.path.join ( dataset _ dir , &apos; cifar-10-batches-@@ py &apos; ) DCNL DCSP return output _ filename
DCSP form = form _ form ( form = form ) DCNL DCSP if form.validate _ on _ submit ( ) : DCNL DCSP DCSP form.save ( ) DCNL DCSP DCSP return redirect ( url _ for ( &apos; forum.index &apos; ) ) DCNL DCSP return render _ to _ response ( &apos; login.html &apos; , form = form )
DCSP return getattr ( * args , * * kwargs ) ( * args , * * kwargs )
DCSP if ( not expr ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError
DCSP ( new _ str , value ) = codecs.utf _ 8 _ decode ( &apos; abc &apos; ) DCNL DCSP AreEqual ( new _ str , &apos; abc &apos; ) DCNL DCSP AreEqual ( new _ str , &apos; abc &apos; )
DCSP line = clean _ lines.elided &#91; linenum &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP if ( line.startswith ( &apos; # &apos; ) and ( line &#91; ( -1 ) &#93; ! = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( line &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) and ( line &#91; ( -1 ) &#93; ! = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( line &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) and ( line &#91; ( -1 ) &#93; ! = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( line &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) and ( line &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP return path
DCSP data = &#91; &#93; DCNL DCSP for plugin in plugins : DCNL DCSP DCSP data = get _ plugin ( plugin , args ) DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos; &#93; DCNL DCSP DCSP data = data &#91; &apos; data &apos;
DCSP next = request.GET.get ( &apos; next &apos; , default ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP next = urlresolvers.reverse ( default , default = default , default = default ) DCNL DCSP else : DCNL DCSP DCSP next = next DCNL DCSP return redirect
DCSP if ( M &lt; = 0 ) : DCNL DCSP DCSP return ( - M ) DCNL DCSP M = ( M - ( M * M ) ) DCNL DCSP if ( M &lt; = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP else : DCNL DCSP DCSP return ( ( M - M ) / M )
DCSP if ( not parent ) : DCNL DCSP DCSP return DCNL DCSP for ( key , value ) in parent.@@ iteritems ( ) : DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP value = getattr ( parent , key ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP value = getattr ( parent , key ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return value
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP return wrapper
DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return value.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; )
DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 1
DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if
DCSP return ( ( len ( label1.@@ intersection ( label2 ) ) - len ( label1.@@ intersection ( label2 ) ) ) / len ( label1.@@ intersection ( label2 ) ) )
DCSP c = _ FFI.from _ handle ( context _ handle ) DCNL DCSP return c.from _ value ( msg _ ptr )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP rpc = get _ client ( session = session , image _ service _ api = image _ service _ api , image _ id = image _ service _ api , api _ state = api _ api , volume _ id = volume _ id ) DCNL DCSP return rpc.get _ result ( )
DCSP if ( not force ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if force : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return ( &apos; % s : DCSP % s &apos; % ( &apos; , DCSP &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in data.items ( ) &#93; ) ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP return False
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP conn.commit ( ) DCNL DCSP conn.close ( )
DCSP if cond : DCNL DCSP DCSP return a DCNL DCSP return a
DCSP p = subprocess.Popen ( command , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP ( stdout , stderr ) = p.communicate ( ) DCNL DCSP if ( p.returncode ! = 0 ) : DCNL DCSP DCSP raise SystemExit ( 1 ) DCNL DCSP return True
DCSP result = &apos; &apos; DCNL DCSP for i in range ( 0 , len ( nt _ barcode ) , 2 ) : DCNL DCSP DCSP result + = ( &apos; % s % s &apos; % ( seq &#91; i &#93; , seq &#91; ( i + 1 ) &#93; ) ) DCNL DCSP return result
DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , path ) DCNL DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP return f.read ( )
DCSP return inet _ pton ( socket.AF _ INET6 , ip )
DCSP for i in range ( ( len ( x ) - 1 ) ) : DCNL DCSP DCSP x &#91; i &#93; = x &#91; i &#93; DCNL DCSP return x
DCSP @ wraps ( f ) DCNL DCSP def wrapper ( request , * args , * * kwargs ) : DCNL DCSP DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP DCSP return f ( request , * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return f ( request , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP DCSP DCSP DCSP EmailAddress.objects.get ( user
DCSP out = &#91; &#93; DCNL DCSP for line in branch : DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line.split ( ) ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) :
DCSP if ( len ( bem &#91; &apos; surfs &apos; &#93; ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( surfs ) = = 1 ) : DCNL DCSP DCSP raise RuntimeError ( &apos;
DCSP try : DCNL DCSP DCSP pidfile = open ( pidfile ) DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( exc.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP ret = { } DCNL DCSP for ( key , value ) in config.@@ iteritems ( ) : DCNL DCSP DCSP if ( key in config ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP for i in xrange ( 0 , ( len ( sys.argv ) - 1 ) ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP start + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sys.stdout.write ( ( &apos
DCSP comment = get _ object _ or _ 404 ( comments.get _ model ( ) , request = request , comment = comment ) DCNL DCSP return render _ to _ response ( &apos; comments / comment _ delete.html &apos; , { &apos; comment &apos; : comment } , context _ instance = RequestContext ( request ) )
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text.strip ( ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP result = requests.get ( url ) DCNL DCSP DCSP request.raise _ for _ status ( ) DCNL DCSP except : DCNL DCSP DCSP return &apos; &apos;
DCSP if ( emLen &lt; ( emLen - sLen ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Selected DCSP hash DCSP must DCSP be DCSP an DCSP integer , DCSP got DCSP % s &apos; % emLen ) ) DCNL DCSP if ( emLen &lt; ( sLen - 1 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Selected DCSP hash DCSP must DCSP be DCSP positive , DCSP got DCSP % s &apos; % emLen ) ) DCNL DCSP if ( emLen &lt; ( emLen - ( emLen - sLen ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Selected DCSP hash DCSP must DCSP be DCSP positive , DCSP got DCSP % s &apos; % emLen ) ) DCNL DCSP return ( ( ( emLen - sLen ) + mhash.digest ( ) ) + bchr ( 1 ) )
DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) : DCNL DCSP DCSP picks = &#91; &#93; DCNL DCSP if ( picks is None ) :
DCSP ( a , b ) = _ chk _ asarray ( a , b , axis = axis ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP dimension DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP dimension DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP
DCSP return apiproxy _ stub _ map.UserRPC ( &apos; memcache &apos; , deadline , deadline = deadline )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP callback ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if ( app _ info is None ) : DCNL DCSP DCSP app _ info = sys.exc _ info ( ) DCNL DCSP if ( len ( app _ info ) = = 1 ) : DCNL DCSP DCSP raise appinfo _ errors.@@ EmptyConfigurationFile ( ) DCNL DCSP if ( len ( app _ info ) = = 1 ) : DCNL DCSP DCSP raise appinfo _ errors.@@ EmptyConfigurationFile ( ) DCNL DCSP if ( len ( app _ info ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( app _ info ) &gt; 1 ) : DCNL DCSP DCSP raise appinfo _ errors.@@ EmptyConfigurationFile ( ) DCNL DCSP if ( len ( app _ info ) &gt; 1 ) : DCNL DCSP DCSP raise appinfo _ errors.@@ EmptyConfigurationFile ( ) DCNL DCSP if ( len ( app _ info ) &gt; 1 ) : DCNL DCSP DCSP raise appinfo _ errors.@@ EmptyConfigurationFile ( ) DCNL DCSP if ( len ( app _ info ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( app _ info ) = = 1 ) : DCNL
DCSP return ( RegexTokenizer ( &apos; \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00
DCSP pb.set _ version ( document.doc _ id ) DCNL DCSP pb.set _ version ( document.doc _ id ) DCNL DCSP pb.set _ version ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP pb.set _ document ( document.doc _ id ) DCNL
DCSP if ( N = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( N = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP z = &#91; &#93; DCNL DCSP for i in range ( N ) : DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP return ( &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos; limit &apos; , &apos;
DCSP if ( runas is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP { 1 } DCSP { 1 } &apos; .format ( name , snap _ name , strict = strict ) , runas = runas ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP upgrading DCSP name &apos; , name = name ) DCNL DCSP return ret
DCSP result = &#91; &#93; DCNL DCSP for line in data : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( len ( line )
DCSP version = get _ version ( ) DCNL DCSP version _ dict = { } DCNL DCSP for ( k , v ) in p.items ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP d &#91; k &#93; = v DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in version _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in version _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in version _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in version _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in version _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP version _ dict &#91; k &#93; = v DCNL DCSP return version _ list
DCSP if ( not user _ profile ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not user _ profile ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not user _ profile ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not user _ profile ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not user _ profile ) : DCNL DCSP DCSP return { } DCNL DCSP data = { &apos; user &apos; : user , &apos; user _ data &apos; : user _ data } DCNL DCSP return HttpResponse ( json.dumps ( data ) , content _ type = &apos; application / json &apos; )
DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser = optparse.OptionParser ( ) DCNL DCSP if ( parser is None ) : DCNL DCSP DCSP parser =
DCSP if isinstance ( row , datetime.date ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP return current.messages &#91; &apos; NONE &apos; &#93;
DCSP try : DCNL DCSP DCSP return int ( time.time ( ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP return Mis@@ sion@@ Module ( mpstate )
DCSP sample _ dists = &#91; &#93; DCNL DCSP for ( i , sample _ id ) in enumerate ( sample _ dists ) : DCNL DCSP DCSP sample _ dist = get _ sample _ dist ( dist _ name , sample _ id ) DCNL DCSP DCSP if ( not dist _ dist ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP sample _ dist = get _ sample _ dist ( dist _ name ) DCNL DCSP DCSP if ( sample _ dist is not None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( sample _ id not in sample _ dists ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP sample _ dist = get _ sample _ dist ( dist _ name , sample _ id ) DCNL DCSP DCSP if ( sample _ dist is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP sample _ dist = get _ sample _ dist ( dist _ id ) DCNL DCSP DCSP if ( curr _ dist is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP sample _ dist = get _ sample _
DCSP project = get _ object _ or _ 404 ( Project , pk = project _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; project &apos; : project , &apos; project &apos; : project } ) DCNL DCSP return render _ to _ response ( &apos; projects / project _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( collection _ id is None
DCSP signals.initialized.connect ( pelican _ init )
DCSP if ( not isabs ( path ) ) : DCNL DCSP DCSP if ( not isabs ( path ) ) : DCNL DCSP DCSP DCSP cwd = os.getcwdu ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP cwd = os.getcwd ( ) DCNL DCSP DCSP path = normpath ( path ) DCNL DCSP return normpath ( path )
DCSP if ( not paths ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( paths ) = = 1 ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP return inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP except Exception : DCNL DCSP DCSP return None
DCSP if ( len ( inList ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inList ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( inList ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP return &#91; &#93;
DCSP try : DCNL DCSP DCSP shutil.copy2 ( src , dst ) DCNL DCSP DCSP return DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP result = reconstruction ( np.zeros ( ( 10 , 10 ) ) , np.ones ( ( 10 , 10 ) ) ) DCNL DCSP assert np.all ( ( result = = 0 ) ) DCNL DCSP assert np.all ( ( result = = 0 ) )
DCSP if ( code is None ) : DCNL DCSP DCSP code = environ.get ( &apos; PATH _ INFO &apos; , &apos; &apos; ) DCNL DCSP if ( code is None ) : DCNL DCSP DCSP code = environ.get ( &apos; PATH _ INFO &apos; , &apos; &apos; ) DCNL DCSP if ( code is None ) : DCNL DCSP DCSP code = environ.get ( &apos; SCRIPT _ NAME &apos; , &apos; &apos; ) DCNL DCSP return path
DCSP if ( packages is None ) : DCNL DCSP DCSP packages = { } DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = { } DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = { } DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) :
DCSP return serialize ( node , stream , Dumper , * * kwds )
DCSP result = { } DCNL DCSP for ( k , v ) in zip ( array , array ) : DCNL DCSP DCSP res &#91; k &#93; = v DCNL DCSP return result
DCSP print &gt; &gt; sys.stderr , ( &apos; % s : DCSP % s &apos; % ( s , s ) )
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return expr ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP DCSP return DCNL DCSP return expr
DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP with open ( f.read ( ) , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP with open ( f.read ( ) , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP line = f.read ( ) DCNL DCSP DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP ( i , j ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP result = filters.sobel _ h ( image ) DCNL DCSP assert _ allclose ( result , 0 )
DCSP if isinstance ( typ , six.integer _ types ) : DCNL DCSP DCSP typ = typ . _ _ type _ _ DCNL DCSP return typ
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP return ptr ( ptr , shape , dtype = dtype )
DCSP if ( not isinstance ( context , dict ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , dict ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , list ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , dict ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , list ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , list ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , list ) ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( not isinstance ( context , list ) )
DCSP v1 = ( v1 - v2 ) DCNL DCSP return ( ( v1 - v2 ) / ( v1 - v2 ) )
DCSP if ( label is None ) : DCNL DCSP DCSP label = ( &apos; % s . % s &apos; % ( X.shape &#91; 0 &#93; , n _ jobs ) ) DCNL DCSP if ( label is None ) : DCNL DCSP DCSP label = ( &apos; % s . % s &apos; % ( X.shape &#91; 0 &#93; , n _ jobs ) ) DCNL DCSP if ( label is None ) : DCNL DCSP DCSP label = ( &apos; % s . % s &apos; % ( X.shape &#91; 0 &#93; , n _ jobs ) ) DCNL DCSP if ( label is None ) : DCNL DCSP DCSP label = ( &apos; % s . % s &apos; % ( X.shape &#91; 0 &#93; , n _ jobs ) ) DCNL DCSP if ( label is None ) : DCNL DCSP DCSP label = ( &apos; % s . % s &apos; % ( X.shape &#91; 0 &#93; , n _ jobs ) ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP number DCSP of DCSP % s &apos; %
DCSP if ( read _ cover is None ) : DCNL DCSP DCSP read _ xml = BytesIO ( ) DCNL DCSP with open ( file _ path , &apos; rb &apos; ) as f : DCNL DCSP DCSP data = f.read ( ) DCNL DCSP return data
DCSP J = np.dot ( J , J ) DCNL DCSP grad = ( np.dot ( J , J ) * * 2 ) DCNL DCSP grad = ( grad * * 2 ) .sum ( ) DCNL DCSP return grad
DCSP conn = _ get _ conn ( ) DCNL DCSP return conn.@@ secgroup _ info ( kwargs = kwargs )
DCSP if ( not isinstance ( w , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Arguments DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( len ( vec ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( vec ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( vectors ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( vectors ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( n is None ) : DCNL DCSP DCSP n = int ( s ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP integer &apos; % s ) ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP integer &apos; % s ) ) DCNL DCSP s = ( s + ( &apos; % s % s &apos; % ( s , s ) ) ) DCNL DCSP return ( &apos; % s % s % s &apos; % ( s , s , s ) )
DCSP try : DCNL DCSP DCSP _ _ import _ _ ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( n _ samples is None ) : DCNL DCSP DCSP n _ samples = len ( n ) DCNL DCSP if ( n _ samples is None ) : DCNL DCSP DCSP n _ samples = n _ samples DCNL DCSP else : DCNL DCSP DCSP n _ samples = len ( n ) DCNL DCSP n _ samples = n _ samples &#91; : n _ samples &#93; DCNL DCSP n _ samples = n _ samples &#91; : n _ samples &#93; DCNL DCSP if ( n _ samples &lt; n _ samples ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n _ samples &lt; n _ samples ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n _ samples &lt; n _ samples ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n _ samples &lt; n _ samples ) : DCNL
DCSP return &#91; ( k , v ) for ( k , v ) in app _ list if ( k not in app _ list ) &#93;
DCSP return ( &apos; % s : % s &apos; % ( key , timestamp ) ) .hexdigest ( )
DCSP secret _ parameters = params.get ( &apos; secret _ parameters &apos; , None ) DCNL DCSP if ( not secret _ parameters ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP secret DCSP parameters : DCSP % s &apos; % secret _ parameters ) ) DCNL DCSP parameters = { } DCNL DCSP for ( key , value ) in parameters : DCNL DCSP DCSP if ( key in parameters ) : DCNL DCSP DCSP DCSP parameters &#91; key &#93; = value DCNL DCSP return parameters
DCSP conn = boto.connect _ ec2 ( u &apos;the _ key &apos; , u &apos;the _ secret &apos; ) DCNL DCSP with pytest.raises ( EC2ResponseError ) as cm : DCNL DCSP DCSP conn.allocate _ address ( u &apos;@@ bogus &apos; ) DCNL DCSP cm.exception.code.should.equal ( u &apos;Invalid@@ ParameterValue &apos; ) DCNL DCSP cm.exception.status.should.equal ( 400 ) DCNL DCSP cm.exception.request _ id.should _ not.be.none
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP return value
DCSP css _ css = css _ css _ css ( css _ css _ css ) DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL DCSP css _ css = css _ css &#91; &apos; css &apos; &#93; DCNL
DCSP if ( not isinstance ( item , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( info &#91; 0 &#93; ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP
DCSP if ( not pid ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except OSError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP except OSError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP pid = int ( pid ) DCNL DCSP DCSP DCSP DCSP except
DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices ) , 2 ) DCNL DCSP DCSP assert _ equal ( len ( vertices
DCSP return get _ database _ password ( name ) .get _ database _ password ( )
DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP token : DCSP % s &apos; % key ) ) DCNL DCSP if ( not isinstance ( secret , unicode ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , unicode ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , unicode ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , unicode ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , unicode ) ) :
DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP read _ raw _ fif ( fname _ fname , preload = True ) DCNL DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; )
DCSP with open ( name , &apos; r &apos; ) as f : DCNL DCSP DCSP content = f.read ( ) DCNL DCSP return content
DCSP if ( resp &#91; ( -1 ) &#93; ! = &apos; 229 &apos; ) : DCNL DCSP DCSP raise error _ proto ( resp ) DCNL DCSP if ( resp &#91; ( -1 ) &#93; = = &apos; 229 &apos; ) : DCNL DCSP DCSP return ( resp &#91; &apos; host &apos; &#93; , resp &#91; &apos; host &apos; &#93; ) DCNL DCSP if ( resp &#91; &apos; host &apos; &#93; = = &apos; 229 &apos; ) : DCNL DCSP DCSP return ( resp &#91; &apos; host &apos; &#93; , resp &#91; &apos; host &apos; &#93; ) DCNL DCSP return ( resp &#91; &apos; host &apos; &#93; , resp &#91; &apos; host &apos; &#93; )
DCSP skey = get _ key ( profile ) DCNL DCSP return skey.@@ set _ key ( key , value , ttl , ttl , directory )
DCSP comment = get _ object _ or _ 404 ( comments.get _ model ( ) , pk = pk ) DCNL DCSP comment = get _ object _ or _ 404 ( comments.get _ model ( ) , pk = pk ) DCNL DCSP return render _ to _ response ( &apos; comments / comment _ edit &apos; , { &apos; comment &apos; : comment , &apos; comment &apos; : comment } , context _ instance = RequestContext ( request ) )
DCSP if ( len ( paths ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP return &#91; &#93;
DCSP job _ dir = os.path.join ( expt _ dir , &apos; expt _ dir &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ dir = os.path.join ( expt _ dir , &apos; output &apos; ) DCNL DCSP output _ file.write ( ( &apos; % s DCSP % s \ n &apos; % ( expt _ dir , best _ job ) ) ) DCNL DCSP output _ dir = os.path.join ( expt _ dir
DCSP if ( search _ artist is None ) : DCNL DCSP DCSP search _ artist = None DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = None DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if ( search _ title is None ) : DCNL DCSP DCSP search _ title = &apos; &apos; DCNL DCSP if
DCSP import sys DCNL DCSP try : DCNL DCSP DCSP frappe.init ( site = verbose ) DCNL DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP for app in context.sites : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP frappe.init ( site = verbose ) DCNL DCSP DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP DCSP ctx.@@ debug ( ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP frappe.destroy ( )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP global _ ENGINE DCNL DCSP if ( _ ENGINE is None ) : DCNL DCSP DCSP _ ENGINE = None DCNL DCSP return _ ENGINE
DCSP return dict ( &#91; ( key , value ) for ( key , value ) in iteritems ( mapping ) &#93; )
DCSP return tf.reduce _ mean ( y _ true , y _ pred )
DCSP return _ VarintSize ( wire _ format.@@ PackTag ( field _ number , is _ repeated , key ) )
DCSP return host _ reference.@@ config.network.@@ vnic
DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return _
DCSP if use _ datetime : DCNL DCSP DCSP return pickle.loads ( data ) DCNL DCSP else : DCNL DCSP DCSP return pickle.loads ( data )
DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( code is None ) :
DCSP if isinstance ( iri , unicode ) : DCNL DCSP DCSP iri = iri _ to _ uri ( iri ) DCNL DCSP return iri _ to _ uri ( iri )
DCSP if ( bits &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; bits DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP bits = ( bits &#91; : ( -1 ) &#93; + bits &#91; 1 : &#93; ) DCNL DCSP return bits
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP DCSP DCSP DCSP for name in dirs : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not islink ( name ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP dirs.append ( name ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP dirs.append ( name ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP nondirs.append ( name ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP dirs.append ( name ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP nondirs.append ( name ) DCNL DCSP if ( followlinks and ( not topdown ) ) : DCNL DCSP DCSP if
DCSP try : DCNL DCSP DCSP return getattr ( sys.modules &#91; namespace &#93; , namespace ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP types = &#91; &#93; DCNL DCSP for code in codes : DCNL DCSP DCSP if ( type ( code ) = = type ) : DCNL DCSP DCSP DCSP typ = unicode ( typ ) DCNL DCSP DCSP DCSP if ( type ( type ) = = type ) : DCNL DCSP DCSP DCSP DCSP typ = unicode ( typ ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ = type DCNL DCSP DCSP DCSP elif ( type ( type ) = = type ) : DCNL DCSP DCSP DCSP DCSP typ = typ DCNL DCSP DCSP DCSP elif ( type ( type ) = = type ) : DCNL DCSP DCSP DCSP DCSP typ = type DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ = type DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ = unicode ( typ ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ = unicode ( typ ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ = unicode ( typ ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP typ =
DCSP global _ threadlocal DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if isinstance ( x , bytes ) : DCNL DCSP DCSP return x DCNL DCSP elif isinstance ( x , unicode ) : DCNL DCSP DCSP return x DCNL DCSP else : DCNL DCSP DCSP return x
DCSP t = set ( &#91; 1 , 2 , 3 &#93; ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist ) = = 1 ) DCNL DCSP assert ( len ( hist
DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = { } DCNL DCSP if ( env is None ) :
DCSP def wrapper ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return function ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return wrapper
DCSP return bool _ exists ( dbname , name = name , owner = owner , db _ user = db _ user , db _ port = db _ port , db _ port = db _ port )
DCSP return ( isinstance ( entry , numbers.Integral ) and ( not isinstance ( entry , numbers.Integral ) ) )
DCSP return &apos; &apos;.join ( ( random.choice ( ( string.ascii _ uppercase + string.digits ) ) for _ in range ( N ) ) )
DCSP return &apos; &apos;.join ( &#91; str ( x ) for x in value.split ( &apos; , &apos; ) &#93; )
DCSP import sys DCNL DCSP try : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import win32api DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP DCSP import
DCSP return self.meta.client.@@ upload _ fileobj ( Fileobj = Fileobj , Bucket = self.bucket _ name , Key = Key , ExtraArgs = ExtraArgs , Callback = Callback , Config = Config )
DCSP global _ active DCNL DCSP _ active = None
DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return value
DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path =
DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( paths ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP ret = { } DCNL DCSP
DCSP deployer = XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ site@@ Publisher &apos; ) DCNL DCSP helpers.convert _ mapping _ to _ xml ( osb , data , mappings , fail _ required = True )
DCSP try : DCNL DCSP DCSP return json.loads ( match , encoding = encoding , errors = encoding ) DCNL DCSP except UnicodeDecodeError as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; ! = e.args &#91; 0 &#93; ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; ! = e.args &#91; 0 &#93; ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP hostport = ( &apos; % s : % s &apos; % ( perspective , perspective ) ) DCNL DCSP while True : DCNL DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( perspective , perspective ) ) DCNL DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP time.sleep ( 0.1 )
DCSP return ( start _ date + timedelta ( days = start _ date , end _ date = end _ date , num = delta ) )
DCSP try : DCNL DCSP DCSP import etree DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP return set ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP client = create _ client ( session , session = session ) DCNL DCSP conn.execute ( &apos; CREATE DCSP TABLE DCSP { 0 } \ n
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP for line in f : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP return line.split ( &apos; : &apos; ) &#91; 0 &#93; DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return None
DCSP return ( ( not os.path.exists ( prefix ) ) or ( not os.access ( prefix , os.W _ OK ) ) )
DCSP if include _ columns : DCNL DCSP DCSP if ( not include _ cells ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if include _ cells : DCNL DCSP DCSP DCSP if include _ cells : DCNL DCSP DCSP DCSP DCSP if include _ cells : DCNL DCSP DCSP DCSP DCSP DCSP if include _ cells : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if include _ cells : DCNL DCSP DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( len ( t ) = = 2 ) : DCNL DCSP DCSP return 1 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP if ( not isinstance ( f , str ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP an DCSP integer &apos; % ( f , ) ) ) DCNL DCSP return f ( ( &apos; % s DCSP % s &apos; % ( f , n ) ) )
DCSP try : DCNL DCSP DCSP module = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP ( module , module ) = imp.find _ module ( path , forceload ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; No DCSP module DCSP found : DCSP % s &apos; % path ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP module = import _ module (
DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = ( start _ date - start _ date ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = ( start _ date - start _ date ) DCNL DCSP else : DCNL DCSP DCSP start _ date = ( start _ date - start _ date ) DCNL DCSP return ( start _ date , start _ date )
DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; N DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( len ( N ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError (
DCSP if ( not is _ block _ dev ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not is _ block _ dev ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not is _ block _ dev ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not is _ block _ dev ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if is _ block _ dev : DCNL DCSP DCSP return ( &apos; % s . % s &apos; % ( hypervisor _ version , is _ block _ dev ) ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP seg = worker.WalTransferGroup ( FakeWalUploader ( ) ) DCNL DCSP seg = FakeWalSegment ( ( lambda x : x &#91; 1 &#93; ) , explicit = True ) DCNL DCSP group.start ( seg ) DCNL DCSP with pytest.raises ( Explosion ) as e : DCNL DCSP DCSP group.join ( ) DCNL DCSP assert ( len ( seg ) = = 1 )
DCSP if ( key in dictionary ) : DCNL DCSP DCSP return dictionary &#91; key &#93; DCNL DCSP else : DCNL DCSP DCSP return dictionary &#91; key &#93;
DCSP session = get _ session ( ) DCNL DCSP with session.begin ( ) : DCNL DCSP DCSP instance _ type _ ref.update ( values ) DCNL DCSP DCSP instance _ type _ ref.update ( values ) DCNL DCSP DCSP instance _ type _ ref.save ( session = session ) DCNL DCSP return volume _ type _ ref
DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t &#91; 0 &#93; ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t &#91; 0 &#93; ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t &#91; 0 &#93; ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( t &#91; 0 &#93; ) =
DCSP output = subprocess.check _ output ( cmd , cwd = cwd ) DCNL DCSP if output : DCNL DCSP DCSP return output DCNL DCSP else : DCNL DCSP DCSP return output
DCSP if context.is _ admin : DCNL DCSP DCSP return DCNL DCSP for opt in search _ options : DCNL DCSP DCSP if ( opt not in allowed _ search _ options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP del options &#91; opt &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass
DCSP cmd = &apos; chage DCSP -m DCSP { 0 } DCSP { 1 } &apos; .format ( date , date ) DCNL DCSP _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( info ( name ) &#91; &apos; date &apos; &#93; = = date )
DCSP if ( platform.system ( ) = = &apos; Darwin &apos; ) : DCNL DCSP DCSP return &apos; x86 _ 64 &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; unknown&apos;
DCSP return value.@@ ljust ( int ( arg ) )
DCSP if ( name is None ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP return default
DCSP if isinstance ( relpath , compat.text _ type ) : DCNL DCSP DCSP relpath = path.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP return u &apos; { 0 } / { 1 } &apos; .format ( relpath , relpath )
DCSP if ( node _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( node _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( node _ list , list ) : DCNL DCSP DCSP for child in node _ list : DCNL DCSP DCSP DCSP if isinstance ( child , Node ) : DCNL DCSP DCSP DCSP DCSP for child in child : DCNL DCSP DCSP DCSP DCSP DCSP ( yield item ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield child )
DCSP if ( not isinstance ( subsystem _ type , subsystem _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP option DCSP % s &apos; % subsystem _ type ) ) DCNL DCSP if ( not isinstance ( subsystem _ type , subsystem _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP option DCSP % s &apos; % subsystem _ type ) ) DCNL DCSP if ( not isinstance ( subsystem _ type , subsystem _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP option DCSP % s &apos; % subsystem _ type ) ) DCNL DCSP if ( not isinstance ( subsystem _ type , subsystem _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP option DCSP % s &apos; % subsystem _ type ) ) DCNL DCSP if ( not isinstance ( subsystem _ type , subsystem _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP option DCSP % s &apos; % subsystem _ type ) ) DCNL DCSP if ( scope is None ) : DCNL DCSP
DCSP return _ apply ( s , args )
DCSP if ( name not in g.userpl ) : DCNL DCSP DCSP g.message = ( util.F ( &apos; No DCSP such DCSP playlist &apos; ) % name ) DCNL DCSP DCSP g.content = content.generate _ songlist _ display ( ) DCNL DCSP DCSP g.content = content.generate _ songlist _ display ( ) DCNL DCSP DCSP g.content = content.playlists _ display ( ) DCNL DCSP DCSP g.content = content.playlists _ display ( ) DCNL DCSP DCSP g.content = content.playlists _ display ( ) DCNL DCSP DCSP g.content = content.playlists _ display ( ) DCNL DCSP DCSP return DCNL DCSP g.content = content.generate _ songlist _ display ( )
DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; Windows &apos; ) : DCNL DCSP DCSP return _ set _ state ( name , set _ type , family , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( node is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP data = request.args.to _ dict ( ) DCNL DCSP return { &apos; project &apos; : node }
DCSP def prep ( r ) : DCNL DCSP DCSP if ( r.representation = = &apos; s3json &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP cmd = &apos; ovs-vsctl DCSP { 0 } DCSP { 1 } &apos; .format ( br , port , id ) DCNL DCSP res = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( res &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP global redis _ connection DCNL DCSP if ( not redis _ conn ) : DCNL DCSP DCSP redis _ conn = get _ connection ( ) DCNL DCSP try : DCNL DCSP DCSP redis _ conn = connect _ db ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.debug ( u &apos;@@ Redis DCSP connection DCSP failed : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP try : DCNL DCSP DCSP redis _ conn = connect _ db ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.debug ( u &apos;@@ Redis DCSP connection DCSP failed : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP try : DCNL DCSP DCSP redis _ conn = connect _ connect ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.debug ( u &apos;@@ Redis DCSP connection DCSP failed : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = file _ class . _ _ name _ _ DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = fname DCNL DCSP
DCSP return web.try _ shorten ( text , reply )
DCSP cmd = &apos; { 0 } DCSP { 1 } DCSP { 1 } &apos; .format ( watch , start _ cmd , stop _ cmd , port , remote _ cmd , port _ vars , remote _ cmd ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP configuration.set ( shop , SAMPLE _ CATEGORIES _ KEY , category _ pk )
DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme = &apos; https &apos; DCNL DCSP if ( scheme is None ) : DCNL DCSP DCSP scheme =
DCSP return rstrips ( lstrips ( direction , text ) , remove )
DCSP if ( len ( arguments ) &lt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &lt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &gt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &gt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &gt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &gt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP if ( len ( arguments ) &gt; 1 ) : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP arguments = arguments &#91; 0 &#93; DCNL DCSP
DCSP if ( not metadata ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( value , list ) : DCNL DCSP DCSP DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP DCSP DCSP if isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP context &#91; u &apos;user &apos; &#93; = parent DCNL DCSP return context
DCSP if ( split is None ) : DCNL DCSP DCSP split = &#91; &#93; DCNL DCSP if ( not isinstance ( arg , list ) ) : DCNL DCSP DCSP value = &#91; arg &#93; DCNL DCSP if ( not isinstance ( arg , list ) ) : DCNL DCSP DCSP value = &#91; arg &#93; DCNL DCSP return value
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return fun ( * args , * * kwargs ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.EINTR ) : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( query is None ) : DCNL DCSP DCSP query = paginate ( model , query , increment ) DCNL DCSP if ( query is not None ) : DCNL DCSP DCSP return model DCNL DCSP else : DCNL DCSP DCSP return model
DCSP if ( not isinstance ( f _ obs , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f _ obs , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( len ( f _ obs ) = = 1 ) and ( x.shape &#91; ( -1 ) &#93; ! = ( -1 ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( x.shape &#91; ( -1 ) &#93; ! = ( -1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( x.shape &#91; ( -1 ) &#93; ! = ( -1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP
DCSP return &apos; .&apos;.join ( map ( str , version.split ( &apos; .&apos; ) &#91; ( -1 ) &#93; ) )
DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; _ &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = &apos; &apos; DCNL DCSP
DCSP langs = get _ languages ( accept _ lang ) DCNL DCSP if ( len ( langs ) = = 1 ) : DCNL DCSP DCSP return langs &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP ret = { } DCNL DCSP for path in paths : DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP if ( errors = = &apos; strict &apos; ) : DCNL DCSP DCSP return input ( input , errors ) DCNL DCSP elif ( errors = = &apos; strict &apos; ) : DCNL DCSP DCSP return input ( input ) DCNL DCSP else : DCNL DCSP DCSP return input ( input , errors )
DCSP metric _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; metric &apos; ) DCNL DCSP metric _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; ) DCNL DCSP metric _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; metric &apos; ) DCNL DCSP metric _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; metric &apos; ) DCNL DCSP metric _ path = os.path.join ( path _ path , &apos; .. &apos; ) DCNL DCSP metric _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; metric &apos; ) DCNL DCSP metric _ path = os.path.join (
DCSP context = { &apos; locale &apos; : request.LANGUAGE _ CODE } DCNL DCSP return render ( request , template , context )
DCSP try : DCNL DCSP DCSP os.remove ( _ _ file _ _ ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP DCSP sys.exit ( 1 )
DCSP if ( not s ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos;
DCSP if ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = 0.0 DCNL DCSP if ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = min DCNL DCSP if ( min _ threshold is not None ) : DCNL DCSP DCSP min _ threshold = min ( min _ threshold , min _ threshold ) DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = max _ threshold DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = max _ threshold DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = max _ threshold DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = max _ threshold DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = max _ threshold DCNL DCSP elif ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = min _ threshold DCNL DCSP else : DCNL DCSP DCSP min
DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ permissions ( ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ permissions ( ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP roles = &#91; &#93; DCNL DCSP for role in meta &#91; &apos; roles &apos; &#93; : DCNL DCSP DCSP if ( role &#91; &apos; role &apos; &#93; = = &apos; role &apos; ) : DCNL DCSP DCSP DCSP role = role &#91; &apos; role &apos; &#93; DCNL DCSP DCSP DCSP permissions &#91; role &#93; = { &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; , &apos; role &apos; : role &#91; &apos; name &apos; &#93; } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP
DCSP return &#91; ( y _ test , y _ pred ) for ( y _ test , y _ pred ) in zip ( y _ test , y _ test , n _ classes ) &#93;
DCSP if ( not resource ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , basestring ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP resource = { } DCNL DCSP if ( not isinstance ( resource , basestring ) ) : DCNL DCSP DCSP resource = ( &apos; % s . % s &apos;
DCSP if ( to _ dir is None ) : DCNL DCSP DCSP to _ dir = os.path.dirname ( to _ dir ) DCNL DCSP if ( not os.path.exists ( to _ dir ) ) : DCNL DCSP DCSP os.mkdir ( to _ dir ) DCNL DCSP if ( not os.path.exists ( to _ dir ) ) : DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP log.warn ( &apos; Downloading DCSP % s DCSP from DCSP % s &apos; , version , to _ dir ) DCNL DCSP DCSP raise
DCSP for attr in attrs : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP DCSP sys.exit ( 1 )
DCSP if hasattr ( request , &apos; _ messages &apos; ) : DCNL DCSP DCSP return request . _ messages DCNL DCSP else : DCNL DCSP DCSP return request . _ messages
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return ( False , &apos; The DCSP module DCSP execution DCSP module DCSP cannot DCSP be DCSP loaded : DCSP only DCSP available DCSP on DCSP non-Windows DCSP systems . &apos; ) DCNL DCSP return _ _ virtualname _ _
DCSP action _ name = ( &apos; % s . % s &apos; % ( action _ name , event _ name , operation _ model ) ) DCNL DCSP operation = ( &apos; % s . % s &apos; % ( action _ name , operation _ name , operation _ model ) ) DCNL DCSP operation = ( &apos; % s : % s &apos; % ( action _ name , operation _ name , operation ) ) DCNL DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s &apos; % ( operation _
DCSP if ( sep is None ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP elif ( sep = = &apos; s &apos; ) : DCNL DCSP DCSP sep = &apos; DCSP &apos; DCNL DCSP else :
DCSP for role in roles : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP return False
DCSP if ( not isinstance ( email , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP user DCSP id : DCSP % s &apos; % email ) ) DCNL DCSP if ( not isinstance ( email , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP user DCSP id : DCSP % s &apos; % email ) ) DCNL DCSP if ( not isinstance ( email , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP user DCSP id : DCSP % s &apos; % email ) ) DCNL DCSP if ( not isinstance ( email , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP user DCSP id : DCSP % s &apos; % email ) ) DCNL DCSP if ( not isinstance ( email , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP user DCSP id : DCSP % s &apos; % email ) ) DCNL DCSP return secret
DCSP return _ cache _ cache
DCSP app = ( app or webapp2.get _ app ( ) ) DCNL DCSP app.registry &#91; key &#93; = store
DCSP return get _ server _ info ( request ) .get _ server _ info ( )
DCSP if ( volume _ entries is None ) : DCNL DCSP DCSP volume _ entries = &#91; &#93; DCNL DCSP elif ( volume _ entries is None ) : DCNL DCSP DCSP volume _ entries = &#91; &#93; DCNL DCSP elif ( volume _ entries is None ) : DCNL DCSP DCSP volume _ entries = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP image _ entries = &#91; &#93; DCNL DCSP DCSP for i in range ( 0 , len ( data _ entries ) , 1 ) : DCNL DCSP DCSP DCSP data = data &#91; i &#93; DCNL DCSP DCSP DCSP data = data &#91; index &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91; 0 &#93; DCNL DCSP DCSP DCSP data = data &#91;
DCSP dims = x.shape DCNL DCSP if ( len ( x.shape ) = = 1 ) : DCNL DCSP DCSP return dims &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return dims &#91; ( -1 ) &#93;
DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) : DCNL DCSP DCSP metadata = { } DCNL DCSP if ( metadata is None ) :
DCSP if ( interface is None ) : DCNL DCSP DCSP interface = factory ( ) DCNL DCSP elif ( interface = = &apos; AF _ INET &apos; ) : DCNL DCSP DCSP return int ( port ) DCNL DCSP else : DCNL DCSP DCSP return ( int ( port ) , factory )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( &apos; action &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( &apos; action &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP
DCSP return _ get _ snapshot ( jid , config = config )
DCSP return ( ( host = = host ) and ( host = = host ) )
DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; )
DCSP result = { } DCNL DCSP for k in keys : DCNL DCSP DCSP if ( k in d ) : DCNL DCSP DCSP DCSP d &#91; k &#93; = d &#91; k &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP d &#91; k &#93; = v DCNL DCSP return result
DCSP return ( &apos; % s _ % s &apos; % ( class _ instance . _ _ name _ _ , class _ instance . _ _ class _ _ . _ _ name _ _ ) )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if ( name in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Team DCSP { 0 } DCSP does DCSP not DCSP exist . &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP if ( name in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Team DCSP { 0 } DCSP does DCSP not DCSP exist . &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP if ( name in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Team DCSP { 0 } DCSP does DCSP not DCSP
DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = &#91; &#93; DCNL DCSP for o in gc.get _ objects ( ) : DCNL DCSP DCSP
DCSP if ( df &#91; 0 &#93; is None ) : DCNL DCSP DCSP return df &#91; 0 &#93; DCNL DCSP elif isinstance ( df &#91; 0 &#93; , pd.DataFrame ) : DCNL DCSP DCSP return df &#91; 0 &#93; &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return df &#91; 0 &#93; &#91; 0 &#93;
DCSP existing = destination.@@ settings.get ( setting , None ) DCNL DCSP if ( value is not None ) : DCNL DCSP DCSP existing.@@ update ( value ) DCNL DCSP DCSP destination.settings &#91; setting &#93; = value
DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( dist is
DCSP TOPIC _ NAME = ( &apos; topic _ % s &apos; % ( _ millis ( ) , ) ) DCNL DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP topic.create ( ) DCNL DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP DCSP topic = client.topic ( TOPIC _ NAME )
DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP path = kwargs.pop ( &apos; path &apos; , None ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( path is None ) : DCNL DCSP DCSP kwargs
DCSP try : DCNL DCSP DCSP d = pickle.load ( f ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; = = &apos; Error &apos; ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP d = pickle.load ( f ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP raise RuntimeError ( ( &apos; Unable DCSP to DCSP find DCSP the DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return None
DCSP nt.assert _ raises ( ImportError , make _ module , &apos; foo &apos; ) DCNL DCSP nt.assert _ equal ( modnames , set ( ) )
DCSP try : DCNL DCSP DCSP os.makedirs ( source ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP return ( ( element is not None ) and ( element is not None ) )
DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = u &apos; &apos; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html =
DCSP table = ascii.get _ reader ( Reader = ascii.Ipac ) DCNL DCSP table = ascii.read ( table , parallel = parallel ) DCNL DCSP assert _ table _ equal ( table , expected )
DCSP try : DCNL DCSP DCSP return name &#91; name &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return name
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape &#91; axis &#93; DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape &#91; axis &#93; DCNL DCSP return a.chunks &#91; axis &#93;
DCSP try : DCNL DCSP DCSP utils.execute ( &apos; delete &apos; , &apos; delete &apos; , target , stop ) DCNL DCSP except processutils.ProcessExecutionError as exc : DCNL DCSP DCSP if ( exc.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return seq &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return seq &#91; 0 &#93;
DCSP if isinstance ( node , pytree.Leaf ) : DCNL DCSP DCSP return tree DCNL DCSP elif isinstance ( node , pytree.Leaf ) : DCNL DCSP DCSP return tree . _ _ dict _ _ DCNL DCSP else : DCNL DCSP DCSP return tree
DCSP try : DCNL DCSP DCSP f ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e )
DCSP def decorator ( f ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( algorithm = = &apos; darwin &apos; ) : DCNL DCSP DCSP nonce = ( &apos; % s . % s &apos; % ( realm , algorithm ) ) DCNL DCSP else : DCNL DCSP DCSP nonce = ( &apos; % s . % s &apos; % ( realm , algorithm ) ) DCNL DCSP return coro
DCSP if ( not isinstance ( message , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; % ( message , ) ) ) DCNL DCSP if ( not isinstance ( message , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; % ( message , ) ) ) DCNL DCSP if ( not isinstance ( message , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; % ( message , ) ) ) DCNL DCSP if ( not isinstance ( message , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; % ( message , ) ) ) DCNL DCSP if ( not isinstance ( message , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP message : DCSP % s &apos; % message ) ) DCNL DCSP if (
DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ r &apos; , &apos; \ n &apos; ) DCNL DCSP return text
DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , packages _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , packages _ to _ install ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos; , &apos; -f &apos; , package _ to _ install ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , package _ to _ install , &apos; --no-index &apos;
DCSP try : DCNL DCSP DCSP os.rename ( archive , targetDir ) DCNL DCSP DCSP return True DCNL DCSP except Exception as error : DCNL DCSP DCSP if ( exc.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False
DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL DCSP DCSP default _ name = default _ name DCNL DCSP if ( default _ name is None ) : DCNL
DCSP if ( not isinstance ( noise , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( noise , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( noise , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( noise , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( noise , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( order is None ) : DCNL DCSP DCSP random _ mode = ( -1 ) DCNL DCSP else : DCNL DCSP DCSP alpha = 0 DCNL DCSP else : DCNL DCSP DCSP
DCSP ret = { &apos; hostname &apos; : hostname , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = _ _ salt _ _ &#91; &apos; junos.@@ set _ hostname &apos; &#93; ( hostname , commit _ comment ) DCNL DCSP return ret
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return method ( self , * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP lock.release ( ) DCNL DCSP return wrapper
DCSP if ( args is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP args = { } DCNL DCSP if ( name is None ) :
DCSP return _ js _ escaped _ string ( string _ or _ js , &apos; text / html &apos; )
DCSP translations _ dir = apps.get _ model ( u &apos;sites &apos; , u &apos;@@ languages.json &apos; ) DCNL DCSP for lang in apps.get _ model ( u &apos;@@ languages &apos; , u &apos;@@ languages &apos; ) : DCNL DCSP DCSP for lang in frappe.get _ all _ apps ( ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP frappe.get _ doc ( u &apos;lang &apos; , app _ name ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( lang , list ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP translations = frappe.get _ doc ( u &apos;lang &apos; , app _ name ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP for lang in translations : DCNL DCSP DCSP DCSP DCSP DCSP for lang in frappe.get _ all _ apps ( ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if
DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is
DCSP ros = RandomOverSampler ( random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , ros.fit _ sample , X , Y ) DCNL DCSP assert _ raises ( ValueError , ros.fit _ sample , X , Y )
DCSP if ( current _ release is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( current _ release not in current _ release ) : DCNL DCSP DCSP return False DCNL DCSP if ( current _ release &#91; 0 &#93; ! = current _ release &#91; 0 &#93; ) : DCNL DCSP DCSP return False DCNL DCSP if ( current _ release &#91; 0 &#93; ! = current _ release &#91; 0 &#93; ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP return dict ( ( ( k , v ) for ( k , v ) in globals ( ) .items ( ) if ( v is not None ) ) )
DCSP if ( not expr ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( expr.args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP indices = &#91; &#93; DCNL DCSP for i in range ( len ( expr.args ) ) : DCNL DCSP DCSP for i in range ( len ( indices ) ) : DCNL DCSP DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP
DCSP if ( method not in &#91; &apos; polys &apos; , &apos; polys &apos; &#93; ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method not in &#91; &apos; polys &apos; , &apos; polys &apos; &#93; ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if
DCSP buff = event.current _ buffer DCNL DCSP buff = event.current _ buffer DCNL DCSP if ( len ( buff ) = = 0 ) : DCNL DCSP DCSP event.cli.@@ output.@@ bell ( )
DCSP ( y _ true , y _ prob ) = _ log _ loss ( y _ true , y _ prob ) DCNL DCSP return ( np.log ( ( y _ true * y _ prob ) ) / ( y _ prob - y _ prob ) )
DCSP server = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL
DCSP return { &apos; exploration _ id &apos; : exploration _ id , &apos; version &apos; : exploration _ id , &apos; version &apos; : exploration _ id , &apos; version &apos; : exploration _ id }
DCSP if ( b is None ) : DCNL DCSP DCSP b = np.asarray ( x ) DCNL DCSP else : DCNL DCSP DCSP b = np.asarray ( x ) DCNL DCSP if ( b is None ) : DCNL DCSP DCSP b = x.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( b is None ) : DCNL DCSP DCSP b = x.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( b is None ) : DCNL DCSP DCSP b = x.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( b is None ) : DCNL DCSP DCSP b = x.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP
DCSP return os.path.normpath ( os.path.join ( path , &apos; / &apos; .join ( path ) ) )
DCSP if ( start is None ) : DCNL DCSP DCSP start = 0 DCNL DCSP else : DCNL DCSP DCSP start = start DCNL DCSP start = start DCNL DCSP while ( start &lt; end ) : DCNL DCSP DCSP ( start , end ) = ( start , end ) DCNL DCSP DCSP if ( end &gt; end ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP ( yield ( start , end ) )
DCSP if ( len ( a ) = = 1 ) : DCNL DCSP DCSP return a &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return a
DCSP return _ compile ( pattern , flags ) .match ( string )
DCSP with tf.name _ scope ( name ) as scope : DCNL DCSP DCSP scope = tf.get _ collection ( name , dtype = tensor.dtype.base _ dtype , name = name ) DCNL DCSP return name
DCSP return getResolver ( ) .lookup@@ Authority ( name , timeout )
DCSP client = _ client ( * * client _ args ) DCNL DCSP client.create _ database ( name ) DCNL DCSP return True
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP implemented &apos; ) DCNL DCSP G.add _ edges
DCSP client _ list = &#91; &#93; DCNL DCSP for ( i , p ) in enumerate ( docker _ dir ) : DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path _ path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not
DCSP params = { &apos; api _ url &apos; : api _ url , &apos; post _ data &apos; : post _ data } DCNL DCSP return api _ url
DCSP if ( sys.version _ info &gt; = ( 3 , 3 ) ) : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP else : DCNL DCSP DCSP from django.conf import import _ class DCNL DCSP def test ( ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( not issubclass ( test , unittest.TestSuite ) ) : DCNL DCSP DCSP DCSP DCSP raise TypeError ( ( &apos; No DCSP tests DCSP for DCSP % s &apos; % test _ class ) ) DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return test DCNL DCSP return decorator
DCSP return get _ page _ page ( status , * * kwargs )
DCSP with open ( output _ dir , &apos; r &apos; ) as f : DCNL DCSP DCSP with open ( output _ dir , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP content = f.read ( ) DCNL DCSP return output
DCSP with open ( local _ file , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( chunk )
DCSP return get _ var ( &apos; FEATURES &apos; )
DCSP if ( category is not None ) : DCNL DCSP DCSP for ( i , t ) in enumerate ( data ) : DCNL DCSP DCSP DCSP for ( i , t ) in enumerate ( data ) : DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue
DCSP return np.ones ( ( width , height ) , dtype = dtype )
DCSP tokens = tokenize ( doc ) DCNL DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( not isinstance ( x , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP return
DCSP try : DCNL DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP sock.connect ( ( opts , opts ) ) DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP pass
DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = &#91; column &#93; DCNL
DCSP proc = subprocess.Popen ( cmd , stdout = subprocess.PIPE , stderr = subprocess.PIPE , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP ( out , err ) = p.communicate ( ) DCNL DCSP if ( p.returncode ! = 0 ) : DCNL DCSP DCSP raise DCNL DCSP return result
DCSP if ( not a ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not a ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP
DCSP if ( proj is None ) : DCNL DCSP DCSP return backend.idd _ reconid ( idx , proj ) DCNL DCSP else : DCNL DCSP DCSP return backend.idz _ copycols ( idx , proj )
DCSP if isinstance ( f , six.text _ type ) : DCNL DCSP DCSP return f DCNL DCSP elif isinstance ( f , six.text _ type ) : DCNL DCSP DCSP return f . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return f
DCSP return IP@@ Device ( device _ name , ip _ address , mac , namespace )
DCSP s3 _ redirect _ default ( URL ( f = &apos; summary &apos; ) )
DCSP if isinstance ( expr , ( list , tuple ) ) : DCNL DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP for x in expr.args : DCNL DCSP DCSP DCSP if isinstance ( x , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result
DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; utf-8 &apos; DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding =
DCSP dict _ dict = { } DCNL DCSP for ( key , value ) in filters _ dict.items ( ) : DCNL DCSP DCSP if ( name not in filters _ dict ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( key , value ) in six.iteritems ( filters _ dict ) : DCNL DCSP DCSP DCSP if ( name not in filters _ dict ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( name not in filters _ dict ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP for ( key , value ) in six.iteritems ( filters _ dict ) : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP for ( key , value ) in six.iteritems ( filters ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP if ( ax is None ) : DCNL DCSP DCSP return ax.get _ frame ( ) DCNL DCSP else : DCNL DCSP DCSP return ax.get _ frame ( )
DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is not None )
DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP if ( ( n &lt; 0 ) or ( n &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( n % 2 ) = = 0
DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) = = 1 ) DCNL DCSP assert ( len ( res ) =
DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; README@@ .md &apos; ) DCNL DCSP return open ( path , &apos; rb &apos; ) .read ( )
DCSP if ( not chain ) : DCNL DCSP DCSP return &apos; Error : DCSP Chain DCSP needs DCSP to DCSP be DCSP specified &apos; DCNL DCSP cmd = &apos; { 0 } DCSP -t DCSP { 1 } &apos; .format ( _ iptables _ cmd ( family ) , nft _ family , family ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( format _ string is not None ) : DCNL DCSP DCSP return format _ string ( format _ string ) DCNL DCSP elif isinstance ( format _ string , string _ types ) : DCNL DCSP DCSP return format _ string ( format _ string ) DCNL DCSP elif isinstance ( format _ string , string _ types ) : DCNL DCSP DCSP return format _ string ( format _ string ) DCNL DCSP else : DCNL DCSP DCSP return format _ string
DCSP context.status = &apos; 500 DCSP Internal DCSP Server DCSP Error &apos; DCNL DCSP context.headers = &#91; ( &apos; Content-Type &apos; , &apos; text / html &apos; ) &#93; DCNL DCSP context.headers = &#91; ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos; ) , ( &apos; Content-Type &apos; , &apos; text / html &apos;
DCSP return getattr ( params , &apos; unauthenticated &apos; , False )
DCSP pvals = &#91; &#93; DCNL DCSP for i in range ( count ) : DCNL DCSP DCSP pvals = &#91; &#93; DCNL DCSP DCSP for pair in range ( count ) : DCNL DCSP DCSP DCSP if ( len ( pair ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( pair &#91; 1 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP from boto.@@ dynamodb.@@ layer2 import Layer2 DCNL DCSP return get _ regions ( &apos; dynamodb &apos; , connection _ cls = ST@@ SConnection )
DCSP with tf.name _ scope ( name ) as scope : DCNL DCSP DCSP inference = tf.nn.avg _ pool ( incoming , kernel _ size , name ) DCNL DCSP DCSP tf.add _ to _ collection ( ( ( tf.GraphKeys.LAYER _ TENSOR + &apos; / &apos; ) + name ) , name ) DCNL DCSP return inference
DCSP files = &#91; &#93; DCNL DCSP for ( dirpath , dirnames , filenames ) in os.walk ( path ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( path ) : DCNL DCSP DCSP DCSP for f in filenames : DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax.set _ xlabel ( &apos;
DCSP devnull = open ( os.path.dirname ( _ _ file _ _ ) , &apos; w &apos; ) DCNL DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( f.read ( ) ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP feed = text.strip ( ) DCNL DCSP try : DCNL DCSP DCSP data = requests.get ( url ) DCNL DCSP DCSP request.raise _ for _ status ( ) DCNL DCSP except ( requests.exceptions.HTTPError , requests.exceptions.ConnectionError ) as e : DCNL DCSP DCSP log.error ( ( &apos; Could DCSP not DCSP parse DCSP % s : DCSP % s &apos; % ( c.y , str ( e ) , e ) ) ) DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP response = requests.get ( url ) DCNL DCSP DCSP request.raise _ for _ status ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( ( &apos; Could DCSP not DCSP parse DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP return render _ to _ response ( &apos; projects / group _ list &apos; , { &apos; group &apos; : group } , context _ instance = RequestContext ( request ) )
DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP r = conn.create _ subnet _ group ( name = name , description = description , subnet _ ids = subnet _ ids , vpc _ ids = subnet _ ids , tags = tags , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP return { &apos; created &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; created &apos; : False , &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP manager = MANAGER DCNL DCSP if kernel : DCNL DCSP DCSP run _ as _ root ( ( &apos; % ( manager ) s DCSP update &apos; % locals ( ) ) ) DCNL DCSP else : DCNL DCSP DCSP run _ as _ root ( ( &apos; % ( manager ) s DCSP update &apos; % locals ( ) ) )
DCSP if ( category is None ) : DCNL DCSP DCSP locale = get _ locale ( ) DCNL DCSP if ( category is None ) : DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP if ( category is not None ) : DCNL DCSP DCSP locale = locale . _ _ name _ _ DCNL DCSP return locale
DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key
DCSP if ( not isinstance ( code , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; encoding DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( encoding , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; encoding DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( encoding , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( encoding , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( encoding , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( encoding , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP
DCSP rel = Element ( &apos; tag &apos; , &apos; tag &apos; ) DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id = &apos; &apos; DCNL DCSP if ( not rel _ id ) : DCNL DCSP DCSP rel _ id
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax =
DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with open ( file
DCSP return _ set _ user _ preference ( requesting _ user , preference _ key , preference _ value , username )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP node = node.root ( ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP node = node.root ( ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield node ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield node )
DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP return value
DCSP if ( not cluster ) : DCNL DCSP DCSP return None DCNL DCSP res = session . _ call _ method ( vim _ util , &apos; get _ dynamic _ pool &apos; , cluster , cluster = cluster ) DCNL DCSP return res &#91; 0 &#93;
DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) = = 1 ) DCNL DCSP assert ( len ( password ) =
DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP return False
DCSP url = urlunparse ( ( url , url , value ) ) DCNL DCSP return url
DCSP for child in cls . _ _ subclasses _ _ ( ) : DCNL DCSP DCSP if isinstance ( child , cls ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ version _ version &apos; , None ) or _ Cfunction ( &apos; libvlc _ version _ version &apos; , ( ( 1 , ) , ) , None , ctypes.c _ char _ p ) ) DCNL DCSP return f ( )
DCSP s3 _ redirect _ default ( URL ( f = &apos; summary &apos; ) )
DCSP data = { &apos; openid &apos; : openid _ request , &apos; openid &apos; : openid _ request } DCNL DCSP return render _ to _ response ( &apos; openid / openid _ openid _ request &apos; , { &apos; openid &apos; : openid , &apos; openid _ request &apos; : openid _ request } , context _ instance = RequestContext ( request ) , content _ type = &apos; application / json &apos; )
DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri = &apos; / &apos; DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP
DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = ( shape , ) DCNL DCSP if ( shape is not None ) : DCNL DCSP DCSP data = np.fromstring ( fid.read ( 4 ) , dtype = &apos; &gt; i4 &apos; ) .astype ( dtype ) DCNL DCSP else : DCNL DCSP DCSP buf = fid.read ( dtype.itemsize ) DCNL DCSP data = np.fromstring ( fid.read ( 4 ) , dtype = &apos; &gt; f4 &apos; ) .reshape ( shape ) DCNL DCSP return data
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP raise PermissionDenied DCNL DCSP request = get _ object _ or _ 404 ( Project.objects.for _ admin _ user ( request.user ) , pk = request.user.id ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return HttpResponse ( json.dumps ( { &apos; status &apos; : &apos; Success &apos; } ) ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponse ( json.dumps ( { &apos; success &apos; : True } ) )
DCSP @ wraps ( caller ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return caller ( ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return _ load
DCSP try : DCNL DCSP DCSP base = urlparse ( url _ filename ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP add-on : DCSP % s &apos; % ( scheme , dest _ filename ) ) ) DCNL DCSP try : DCNL DCSP DCSP base = urlparse ( url _ filename ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP add-on : DCSP % s &apos; % ( requested _ filename , remote _ filename ) ) ) DCNL DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP add-on : DCSP % s &apos; % ( requested _ filename , remote _ filename ) ) )
DCSP return ( ( not isinstance ( path , six.string _ types ) ) and ( not isinstance ( path , six.string _ types ) ) )
DCSP if isinstance ( func , six.text _ type ) : DCNL DCSP DCSP func = GEOM _ PTR DCNL DCSP else : DCNL DCSP DCSP func.restype = c _ uchar _ p DCNL DCSP return func
DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not ischair ( trigger.nick , trigger.sender ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not
DCSP current _ tracks = &#91; &#93; DCNL DCSP for current _ tracks in orig _ tracks : DCNL DCSP DCSP current _ tracks = &#91; &#93; DCNL DCSP DCSP for current _ track in old _ tracks : DCNL DCSP DCSP DCSP if ( new _ playlist is not None ) : DCNL DCSP DCSP DCSP DCSP current _ playlist = current _ playlist DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP current _ playlist = None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( current _ playlist is not None ) : DCNL DCSP DCSP DCSP DCSP current _ playlist = current _ playlist DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( current _ playlist is not None ) : DCNL DCSP DCSP DCSP DCSP current _ playlist = current _ playlist DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( current _ playlist is not None ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP current _
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP vpc = conn.get _ vpc ( vpc _ id = vpc _ id , vpc _ id = vpc _ id , cidr = cidr , tags = tags , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP return vpc
DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( G _ sequence ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if ( num _ classes is None ) : DCNL DCSP DCSP num _ classes = len ( inputs ) DCNL DCSP if
DCSP a = TpPd ( pd = 6 ) DCNL DCSP b = MessageType ( mesType = 21 ) DCNL DCSP c = Rejec@@ t@@ Cause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP if ( order is not None ) : DCNL DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP return ( None , None ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return ( None , None ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( None , None ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP if ( not deleted ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except Exception as e : DCNL DCSP DCSP LOG.exception ( _ ( &apos; Failed DCSP to DCSP update DCSP database DCSP schema : DCSP % s &apos; ) , exc _ info ( ) ) DCNL DCSP DCSP raise
DCSP try : DCNL DCSP DCSP with open ( config _ file , &apos; r &apos; ) as fdesc : DCNL DCSP DCSP DCSP fdesc.write ( json.dumps ( config _ file ) ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( exc.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP return None
DCSP d = &#91; &#93; DCNL DCSP for i in range ( len ( path ) ) : DCNL DCSP DCSP if ( a &#91; i &#93; = = path &#91; ( i + 1 ) &#93; ) : DCNL DCSP DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return d
DCSP if ( len ( prefix ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( prefix ) = = 1 ) : DCNL DCSP DCSP return &apos; / &apos; .join ( prefix ) DCNL DCSP else : DCNL DCSP DCSP return prefix
DCSP return ( user in _ get _ user ( user ) )
DCSP if ignore _ errors : DCNL DCSP DCSP shutil.rmtree ( path , ignore _ errors = ignore _ errors , onerror = onerror ) DCNL DCSP else : DCNL DCSP DCSP shutil.rmtree ( path , ignore _ errors = ignore _ errors , onerror = onerror )
DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP basicConfig ( ) DCNL DCSP root.@@ debug ( * args , * * kwargs )
DCSP if ( header is None ) : DCNL DCSP DCSP header = None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = &apos; &apos; DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = &apos; &apos; DCNL DCSP if ( header is None ) : DCNL DCSP DCSP header = &apos; &apos; DCNL DCSP if ( header is not None ) : DCNL DCSP DCSP body + = ( &apos; \ n &apos; + header ) DCNL DCSP return body
DCSP url = &apos; { 0 } / api / v1 / { 1 } &apos; .format ( apiserver _ url , namespace ) DCNL DCSP url = &apos; { 0 } / api / v1 / { 1 } &apos; .format ( apiserver _ url , namespace , name ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP return sum ( ( x for x in x if ( x is not None ) ) )
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP nobs = len ( args ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return rvs &#91; 0 &#93; DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP return rvs &#91; 0 &#93; DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP return rvs &#91; 0 &#93; &#91; 0 &#93; DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP return rvs &#91; 0 &#93; &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Argument DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; )
DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP if ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP elif ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP elif ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP elif ( results is None ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP results =
DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP data
DCSP conn = _ get _ conn ( port = port , cql _ user = cql _ user , cql _ pass = cql _ pass ) DCNL DCSP if cql _ user : DCNL DCSP DCSP return cql _ query ( contact _ points , port , cql _ user , cql _ pass ) DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( code is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( code = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( code = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( code = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( code = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s DCSP % s &apos; % ( code , period ) )
DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ (
DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % name ) ) DCNL DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP callable &apos; % name ) ) DCNL DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP callable &apos; % name ) ) DCNL DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP callable &apos; % name ) ) DCNL DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP callable &apos; % name ) ) DCNL
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP return datetime.strptime ( options , &apos; % Y- % m- % dT % H : % M : % S &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP if ( not page _ size ) : DCNL DCSP DCSP page _ size = page _ size DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( page _ size is None ) or ( page _ size is None ) ) : DCNL DCSP DCSP return
DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Alias DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Alias DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Alias DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP document DCSP document : DCSP % s &apos; % document ) ) DCNL DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Alias DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( document , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP document DCSP document : DCSP % s &apos; % document ) ) DCNL DCSP return domhelpers.findElementsWithAttribute ( document ,
DCSP if ( argv is None ) : DCNL DCSP DCSP argv = &#91; &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv =
DCSP conn = _ get _ conn ( host = host , port = port , maintenance _ db = maintenance _ db , password = password ) DCNL DCSP if group : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP else : DCNL DCSP
DCSP try : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP sizes = avail _ images ( ) DCNL DCSP vm _ volumes = &#91; &#93; DCNL DCSP for vm _ name in vm _ volumes : DCNL DCSP DCSP if ( vm _ uuid not in vm _ volumes ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ uuid not in vm _ volumes ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ uuid not in vm _ volumes ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ uuid not in vm _ volumes ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ uuid in vm _ volumes ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ rec &#91; &apos; id &apos; &#93; = = vm _ uuid ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( vm _ rec &#91; &apos; id &apos; &#93; = = vm _ uuid ) : DCNL DCSP DCSP DCSP return vm _ volume DCNL DCSP return None
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( tokens ) = = 2 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP _ install _ setuptools ( python _ cmd = python _ cmd , use _ sudo = use _ sudo )
DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( fname ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists
DCSP course = get _ object _ or _ 404 ( ccx , ccx = ccx ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP ccx = None DCNL DCSP if ( ccx is None ) : DCNL DCSP DCSP
DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( ( len ( args ) = = 1 ) and ( len ( args ) = = 1 ) ) : DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = kwargs.get ( &apos; title &apos; , &apos; &apos; ) DCNL DCSP DCSP title = ( &apos; % s DCSP % s DCSP % s &apos; % (
DCSP if isinstance ( url , basestring ) : DCNL DCSP DCSP return url DCNL DCSP else : DCNL DCSP DCSP return url
DCSP try : DCNL DCSP DCSP return set ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; ! = &apos; Error &apos; ) : DCNL DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP fd = open ( fd , &apos; r &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( num _ times is None ) : DCNL DCSP DCSP num _ times = int ( num _ times ) DCNL DCSP if ( num _ times is None ) : DCNL DCSP DCSP num _ cpus = int ( num _ cpus ) DCNL DCSP if ( num _ times is None ) : DCNL DCSP DCSP num _ cpus = int ( num _ cpus ) DCNL DCSP if ( num _ times is None ) : DCNL DCSP DCSP num _ cpus = int ( num _ cpus ) DCNL DCSP if ( num _ cpus is not None ) : DCNL DCSP DCSP if ( num _ cpus is None ) : DCNL DCSP DCSP DCSP num _ cpus = int ( num _ cpus ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP num _ times = num _ cpus DCNL DCSP else : DCNL DCSP DCSP num _ times = num _ cpus DCNL DCSP return ( num _ threads , num _ times )
DCSP with open ( os.path.join ( os.path.dirname ( os.path.realpath ( _ _ file _ _ ) ) , &apos; rb &apos; ) , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP ( yield w )
DCSP if ( saltenv is None ) : DCNL DCSP DCSP saltenv = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; Pillar _ pillar &apos; , saltenv = saltenv , saltenv = saltenv , saltenv = saltenv , saltenv = saltenv , keyid = keyid , profile = pillar , pillarenv = pillarenv ) DCNL DCSP ret = { } DCNL DCSP for ( key , value ) in six.iteritems ( opts ) : DCNL DCSP DCSP if ( key not in ret ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = { } DCNL DCSP DCSP for key in keys : DCNL DCSP DCSP DCSP if ( key not in pillar _ cache ) : DCNL DCSP DCSP DCSP DCSP ret &#91; key &#93; = { } DCNL DCSP DCSP DCSP for key in keys : DCNL DCSP DCSP DCSP DCSP if ( key not in ret ) : DCNL DCSP DCSP DCSP DCSP DCSP ret &#91; key &#93; = { } DCNL DCSP DCSP DCSP DCSP for key in keys : DCNL DCSP DCSP DCSP DCSP DCSP if ( key not in ret ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not names ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( not
DCSP names = &#91; &#93; DCNL DCSP for ( name , value ) in six.iteritems ( spec ) : DCNL DCSP DCSP if ( name not in spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name not in names ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name not in names ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP names.append ( name ) DCNL DCSP return names
DCSP return &apos; &apos;.join ( ( str ( x ) for x in value ) )
DCSP s3db.@@ create _ index ( ) DCNL DCSP create _ index ( ) DCNL DCSP create _ index ( )
DCSP return HttpResponseRedirect ( ( &apos; % s / % s / % s &apos; % ( instance.name , instance.name ) ) )
DCSP if isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s
DCSP result = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = context &#91; &apos; context &apos; &#93; DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; =
DCSP stepKey = getStepKey ( x , y ) DCNL DCSP addElementTo@@ ListTable ( element , stepKey , pixelDictionary )
DCSP if ( address is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , address ) DCNL DCSP except ( AddressValueError , NetmaskValueError ) : DCNL DCSP DCSP pass DCNL DCSP return None
DCSP return ( not is _ enabled ( iface ) )
DCSP if G.is _ multigraph ( ) : DCNL DCSP DCSP if G.is _ multigraph ( ) : DCNL DCSP DCSP DCSP edges = G.edges ( data = True ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP edges = G.edges ( data = True ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( data = True ) DCNL DCSP return dict ( ( ( v , v ) for ( k , v ) in G.edges ( ) if ( v is not None ) ) )
DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id &#91; &apos; id &apos; &#93; DCNL DCSP network _ id = network _ id.replace ( &apos; network _ id &apos; , &apos; &apos; ) DCNL DCSP if ( not network _ id ) : DCNL DCSP DCSP raise
DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; = = 0 ) : DCNL DCSP DCSP return ret &#91; &apos; result &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return ret
DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except TypeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP page = request.GET.get (
DCSP return Session ( * args , * * kwargs )
DCSP def check _ decorator ( x ) : DCNL DCSP DCSP array.assert _ array _ almost _ equal ( x , y _ msg , verbose , name , type _ check , accept _ error ) DCNL DCSP return decorator
DCSP browser.@@ verify _ access _ cookie _ cookie ( openid _ request _ cookie ) DCNL DCSP return True
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 37 ) DCNL DCSP packet = ( a / b ) DCNL DCSP if ( Facility _ presence is 1 ) : DCNL DCSP DCSP c = FacilityHdr ( ieiF = 28 , eightBitF = 0 ) DCNL DCSP DCSP packet = ( packet / c ) DCNL DCSP if ( UserUser _ presence is 1 ) : DCNL DCSP DCSP e = UserUserHdr ( ieiUU = 126 , eightBitUU = 0 ) DCNL DCSP DCSP packet = ( packet / e ) DCNL DCSP if ( UserUser _ presence is 1 ) : DCNL DCSP DCSP e = UserUserHdr ( ieiUU = 126 , eightBitUU = 0 ) DCNL DCSP DCSP packet = ( packet / e ) DCNL DCSP if ( SsVersionIndicator _ presence is 1 ) : DCNL DCSP DCSP f = SsVersionIndicatorHdr ( ieiSVI = 127 , eightBitSVI = 0 ) DCNL DCSP DCSP packet = ( packet / f ) DCNL DCSP if ( UserUser _ presence is 1 ) : DCNL DCSP DCSP e = UserUserHdr ( ieiUU = 126 , eightBitUU = 0 ) DCNL DCSP
DCSP print ( msg , indent = indent , prefix = prefix , prefix = prefix )
DCSP if ( not isinstance ( nrows , tuple ) ) : DCNL DCSP DCSP nrows = len ( nrows ) DCNL DCSP if ( len ( nrows ) = = 1 ) : DCNL DCSP DCSP nrows = len ( nrows ) DCNL DCSP DCSP ncols = len ( nrows ) DCNL DCSP else : DCNL DCSP DCSP nrows = len ( nrows ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( nrows ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( nrows ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( nrows ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( nrows ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( range ( len ( nrows ) )
DCSP try : DCNL DCSP DCSP return get _ review _ type ( file _ ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP new _ version = _ get _ new _ version ( data ) DCNL DCSP new _ version = _ new _ version ( new _ version ) DCNL DCSP new _ version = _ new _ version ( new _ version ) DCNL DCSP new _ version = _ new _ version ( new _ version ) DCNL DCSP new _ version = _ new _ version ( new _ version ) DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version DCNL DCSP new _ version = new _ version
DCSP if ( priority is None ) : DCNL DCSP DCSP priority = None DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = None DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = None DCNL DCSP if ( priority is not None ) : DCNL DCSP DCSP if ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP if ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP if ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP if ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP if ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP elif ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP elif ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP elif ( priority is None ) : DCNL DCSP DCSP DCSP priority = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP priority
DCSP srs = Subreddit . _ by _ name ( sr _ names ) DCNL DCSP uploader = Solr@@ Subreddit@@ Uploader ( things = srs ) DCNL DCSP return uploader.inject ( )
DCSP return ( &apos; % s DCSP % s DCSP % s &apos; % ( method _ name , method . _ _ name _ _ , method . _ _ name _ _ ) )
DCSP rng = np.random.RandomState ( seed _ seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed
DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if ( not isinstance ( d , dict ) ) : DCNL DCSP DCSP d = &#91; &#93; DCNL DCSP if isinstance ( d , dict ) : DCNL DCSP DCSP for ( k , v ) in d.items ( ) : DCNL DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP
DCSP if ( not pattern ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP ( yield pattern ) DCNL DCSP except StopIteration : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( instance is None ) : DCNL DCSP DCSP instance = { } DCNL DCSP if ( not instance ) : DCNL DCSP DCSP instance = cls ( * * extra _ filters ) DCNL DCSP if ( not instance ) : DCNL DCSP DCSP instance = cls ( * * extra _ filters ) DCNL DCSP if ( not instance ) : DCNL DCSP DCSP instance = cls ( * * extra _ filters ) DCNL DCSP else : DCNL DCSP DCSP tags = &#91; &#93; DCNL DCSP DCSP for field in fields : DCNL DCSP DCSP DCSP if ( field not in extra ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( field not in extra _ filters ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( field not in extra _ filters ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( field not in extra _ filters ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( field not in extra _ filters ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if
DCSP try : DCNL DCSP DCSP return app &#91; app &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP return int ( mode ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP mode DCSP to DCSP code DCSP % r &apos; % mode ) )
DCSP if isinstance ( nditerty , ( list , tuple ) ) : DCNL DCSP DCSP return _ extract _ flattening _ cls _ cls ( nditerty ) DCNL DCSP else : DCNL DCSP DCSP return _ make _ flattening _ cls _ cls ( nditerty , &apos; _ _ getitem _ _ &apos; )
DCSP return render _ javascript _ catalog ( request , domain , packages )
DCSP if isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , basestring ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP elif isinstance ( path , ( list , tuple ) ) : DCNL DCSP DCSP path = path DCNL DCSP else : DCNL
DCSP nn = &apos; rnd &apos; DCNL DCSP ada = ADASYN ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , ada.@@ sample , X , Y )
DCSP monitor = _ find _ monitor ( cs , args.monitor _ id ) DCNL DCSP monitor.@@ snapshot ( )
DCSP salt.utils.traverse _ dict _ and _ list ( _ _ grains _ _ , key , default , delimiter ) DCNL DCSP return salt.utils.traverse _ dict _ and _ list ( _ _ grains _ _ , key , default , delimiter )
DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP nodelist = parser.parse ( ( &apos; end@@ comment &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP return Comment@@ Node ( )
DCSP return &#91; ( x , x ) for ( x , y ) in zip ( data , param , start , sep ) &#93;
DCSP version = get _ version ( ) DCNL DCSP if ( version is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( version is None ) : DCNL DCSP DCSP return None DCNL DCSP version = VERSION _ MATCH@@ .search ( version ) DCNL DCSP if ( version is not None ) : DCNL DCSP DCSP return version DCNL DCSP else : DCNL DCSP DCSP return None
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( formatter ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( formatter ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( filename ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( formatter ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( formatter ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s DCSP
DCSP if ( s is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return s
DCSP if ( index is None ) : DCNL DCSP DCSP index = 0 DCNL DCSP if ( index is None ) : DCNL DCSP DCSP index = 0 DCNL DCSP if ( index is None ) : DCNL DCSP DCSP index = 0 DCNL DCSP if ( index is None ) : DCNL DCSP DCSP index = 0 DCNL DCSP if ( index is None ) : DCNL DCSP DCSP index = 0 DCNL DCSP if ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP index = ( index + 1 ) DCNL DCSP elif ( index &gt; 0 ) : DCNL DCSP DCSP
DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if args : DCNL DCSP DCSP args = args DCNL DCSP else : DCNL DCSP DCSP args = args DCNL DCSP if args : DCNL DCSP DCSP args + = &#91; &apos; DCSP &apos; .join ( args ) &#93;
DCSP base _ dir = os.path.dirname ( os.path.abspath ( base _ dir ) ) DCNL DCSP if ( not os.path.exists ( dest _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP file DCSP % s &apos; % ( base _ dir , base _ dir ) ) ) DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP already DCSP exists &apos; % base _ dir ) ) DCNL DCSP if ( not os.path.exists ( dest _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP file &apos; % ( base _ dir , ) ) ) DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP already DCSP exists &apos; % base _ dir ) ) DCNL DCSP if ( not os.path.exists ( dest _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP already DCSP exists &apos; % base _ dir ) )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( dt.tzinfo is None ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( val1 , string _ types ) ) : DCNL DCSP DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP return None
DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP f.write ( f.read ( ) )
DCSP @ functools.wraps ( f ) DCNL DCSP def wrapper ( request , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return _ wrapped
DCSP if ( not isinstance ( right , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; columns DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( right , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; columns DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( right , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; columns DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( right , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; columns DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( right , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; columns DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( right , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP
DCSP if ( isinstance ( node.op , T.@@ AllocEmpty ) and ( not node.op.inplace ) ) : DCNL DCSP DCSP new _ op = node.op. _ _ class _ _ ( inplace = True ) DCNL DCSP DCSP new _ op = node.op. _ _ class _ _ ( inplace = True ) DCNL DCSP DCSP copy _ stack _ trace ( node.outputs , new _ op ) DCNL DCSP DCSP return &#91; new _ node &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( len ( entry ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( entry ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( entry ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return &#91; entry &#91; 0 &#93; for i in range ( max _ depth ) &#93; DCNL DCSP else : DCNL DCSP DCSP return list ( map ( int , entry &#91; 1 : &#93; ) )
DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return resnet _ v1 ( inputs , num _ classes , is _ training = is _ training , global _ pool = global _ pool , output _ stride = output _ stride , reuse = reuse , scope = scope ) DCNL DCSP else : DCNL DCSP DCSP return resnet _ v1 ( inputs , blocks , num _ classes , is _ training , global _ pool = global _ pool , output _ stride = output _ stride , reuse = reuse , scope = scope )
DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP
DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = settings.LANGUAGE _ CODE
DCSP if ( not isinstance ( values , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % type ( name ) ) ) DCNL DCSP if ( not isinstance ( values , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % type ( name ) ) ) DCNL DCSP if ( not isinstance ( values , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % type ( name ) ) ) DCNL DCSP if isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = tuple ( values ) DCNL DCSP else : DCNL DCSP DCSP values = values DCNL DCSP if isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , list ) : DCNL DCSP DCSP values = tuple (
DCSP host = request.get _ full _ url ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host = request.get _ full _ hostname ( ) DCNL DCSP host
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return ret
DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert
DCSP script _ path = ( &apos; % s / % s &apos; % ( sdk _ file , sdk _ path ) ) DCNL DCSP return os.path.join ( bootstrap _ dir , &apos; deploy &apos; , ( &apos; % s / % s &apos; % ( sdk _ file , sdk _ file ) ) )
DCSP try : DCNL DCSP DCSP return source &#91; start : end &#93; DCNL DCSP except IndexError : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP return globals ( ) &#91; name &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return name
DCSP for i in range ( 0 , len ( entry _ rate ) , 1 ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP fp _ rate = int ( fp _ rate &#91; 1 &#93; ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass
DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP raise ValueError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not g ) : DCNL DCSP DCSP return p DCNL DCSP if ( not g ) :
DCSP try : DCNL DCSP DCSP os.remove ( txt ) DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; % s : DCSP % s \ n &apos; % ( txt , e ) ) )
DCSP if ( plot _ ch _ idx is None ) : DCNL DCSP DCSP axes = &#91; &#93; DCNL DCSP if ( len ( axes ) = = 1 ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP else : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP
DCSP if check _ enabled : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import inspect DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import inspect DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP if check _ enabled : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False
DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if update : DCNL DCSP DCSP options.append
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.@@ token _ get ( profile , * * connection _ args )
DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _
DCSP rpc = horizontal _ flip _ async ( image _ data , output _ encoding = output _ encoding , quality = quality , correct _ orientation = correct _ orientation , rpc = rpc , transparent _ substitution _ rgb = transparent _ substitution _ rgb ) DCNL DCSP return rpc.get _ result ( )
DCSP user = kwargs &#91; &apos; instance &apos; &#93; DCNL DCSP user = kwargs &#91; &apos; instance &apos; &#93; DCNL DCSP user = kwargs &#91; &apos; user &apos; &#93; DCNL DCSP if ( user is not None ) : DCNL DCSP DCSP user &#91; &apos; user &apos; &#93; = user DCNL DCSP DCSP user.save ( )
DCSP try : DCNL DCSP DCSP os.unlink ( src _ filename ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP for ( key , value ) in enumerate ( plot _ options _ from _ call _ map.items ( ) ) : DCNL DCSP DCSP for ( key , value ) in six.iteritems ( options ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ( key , value ) ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP stream.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP
DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP an DCSP integer &apos; % dim ) ) DCNL DCSP if ( len ( value ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( value ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP try : DCNL DCSP DCSP return upload _ version ( addon , upload , channel ) DCNL DCSP except Exception as err : DCNL DCSP DCSP log.error ( ( &apos; Failed DCSP to DCSP create DCSP % s DCSP from DCSP % s : DCSP % s &apos; % ( addon , upload , channel ) ) ) DCNL DCSP DCSP return False
DCSP result = &#91; &#93; DCNL DCSP for item in old : DCNL DCSP DCSP if ( not isinstance ( item , list ) ) : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP return result
DCSP return _ filter _ segment _ info ( segment _ info , segment _ info , u &apos;output &apos; , None )
DCSP with open ( file _ obj , &apos; w &apos; ) as file _ obj : DCNL DCSP DCSP json.dump ( file _ obj , file _ obj )
DCSP for n in range ( n ) : DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if ( n = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP DCSP if
DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP barcode _ type = barcode _ type DCNL DCSP if ( barcode _ type is None ) : DCNL
DCSP if ( not args ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return args &#91; 0 &#93;
DCSP network = netaddr.IPNetwork ( port ) DCNL DCSP if ( not network ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP an DCSP IPv4 DCSP or DCSP IPv6 DCSP network &apos; % port ) ) DCNL DCSP return network
DCSP if isinstance ( text , unicode ) : DCNL DCSP DCSP text = text.decode ( &apos; utf-8 &apos; ) DCNL DCSP return text
DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; show DCSP -n DCSP { 0 } &apos; .format ( config ) ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP click.@@ launch ( url )
DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is None ) : DCNL DCSP DCSP interface = &apos; &apos; DCNL DCSP if ( interface is not None )
DCSP try : DCNL DCSP DCSP with open ( result _ file ) as f : DCNL DCSP DCSP DCSP with open ( result _ file , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( result _ file ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP return Push@@ NotificationService ( config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME )
DCSP return dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( pkg _ list ) if ( k not in root _ list ) ) )
DCSP while 1 : DCNL DCSP DCSP buf = fsrc.read ( length ) DCNL DCSP DCSP if ( not buf ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP fdst.write ( buf )
DCSP s3.filter = ( FS ( &apos; person _ id &apos; ) = = &apos; person _ id &apos; ) DCNL DCSP return s3db.hrm _ training _ controller ( )
DCSP to _ dict = { } DCNL DCSP for ( k , v ) in request.GET.@@ items ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = getattr ( request , field _ name ) DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = getattr ( request , field _ name ) DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = getattr ( request , field ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( getattr ( request , &apos; id &apos; , None ) is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = getattr ( request , field ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP logging.exception ( e ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if (
DCSP proc = subprocess.Popen ( cmd , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP ( out , err ) = p.communicate ( ) DCNL DCSP if ( proc.returncode ! = 0 ) : DCNL DCSP DCSP raise CalledProcessError ( retcode , cmd ) DCNL DCSP return out
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP Distance ( &#91; 0 , 1 , 1 &#93; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP Distance ( &#91; 0 , 1 , 1 &#93; )
DCSP if ( data is None ) : DCNL DCSP DCSP data = { } DCNL DCSP if ( data is None ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP handlers = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP if ( data is None ) : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP if ( data is not None ) : DCNL DCSP DCSP data = response.read ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP return output DCNL DCSP else : DCNL DCSP DCSP return
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if copy : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X ) DCNL DCSP if copy : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = X &#91; : , np.newaxis &#93; DCNL DCSP return ( X , Y )
DCSP if text : DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP DCSP text = text.replace
DCSP return call _ talib _ with _ ohlc ( barDs , count , talib.CDL@@ LONG@@ LINE )
DCSP return isotime ( datetime.datetime.utcfromtimestamp ( timestamp ) , datetime.datetime.utcfromtimestamp ( timestamp ) )
DCSP ret = { } DCNL DCSP for arg in args : DCNL DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = val DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; key &#93; = val DCNL DCSP return ret
DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP f = open ( f , &apos;
DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.sendto ( (
DCSP if command : DCNL DCSP DCSP command = ( &apos; % s DCSP % s &apos; % ( command , command ) ) DCNL DCSP else : DCNL DCSP DCSP command = &apos; \ n &apos; .join ( command ) DCNL DCSP return command
DCSP try : DCNL DCSP DCSP return int ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP return s
DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , spec ) DCNL DCSP if os.path.exists ( path ) : DCNL DCSP DCSP return path DCNL DCSP else : DCNL DCSP DCSP return None
DCSP loc = get _ object _ or _ 404 ( models.ImageMember , image _ id = image _ id ) DCNL DCSP if ( not locations ) : DCNL DCSP DCSP return None DCNL DCSP return locations &#91; 0 &#93;
DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP assert _ true ( ( len ( w ) = = 1 ) )
DCSP track _ info = { &apos; track _ id &apos; : track _ id , &apos; track _ id &apos; : track _ id , &apos; track _ id &apos; : track _ id , &apos; track _ id &apos; : track _ id } DCNL DCSP return track _ info
DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP if ( not u ) : DCNL DCSP DCSP return f DCNL DCSP else : DCNL DCSP
DCSP scriptDir = &apos; &apos; DCNL DCSP for i in range ( numRepeats ) : DCNL DCSP DCSP seqIdxs + = range ( numSequences ) DCNL DCSP sequences = &#91; &#93; DCNL DCSP for i in range ( numSequences ) : DCNL DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP DCSP seq = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP DCSP seqIdxs + = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( numSequences ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP with open ( os.path.join ( package , &apos; _ _ init _ _ .py &apos; ) , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( ) .strip ( )
DCSP for region in regions ( ) : DCNL DCSP DCSP if ( region.name = = region _ name ) : DCNL DCSP DCSP DCSP return region.connect ( * * kw _ params ) DCNL DCSP return None
DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( names ) = = 1
DCSP return create _ resource ( prefix , * args , * * kwargs )
DCSP raw = read _ evokeds ( fname , preload = True ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; ) DCNL DCSP assert _ array _ equal
DCSP images = get _ images ( ) DCNL DCSP for image in images : DCNL DCSP DCSP if hasattr ( image , &apos; images &apos; ) : DCNL DCSP DCSP DCSP for image in images : DCNL DCSP DCSP DCSP DCSP ( yield image )
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP
DCSP service = get _ object _ or _ 404 ( Service , pk = service _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; service &apos; : service } ) DCNL DCSP return render _ to _ response ( &apos; services / service _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP taskqueue _ services.@@ enqueue _ task ( user _ id , reference , old _ status , new _ status )
DCSP @ functools.wraps ( test ) DCNL DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP _ _ import _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP except KeyboardInterrupt : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP thread.join ( ) DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP _ _ import _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except KeyboardInterrupt : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP except Exception : DCNL DCSP DCSP DCSP DCSP pass
DCSP if isinstance ( expression , pytree.Leaf ) : DCNL DCSP DCSP return expression DCNL DCSP else : DCNL DCSP DCSP return expression
DCSP return _ Resolve ( hostname , &#91; AF _ INET &#93; )
DCSP if ( length is None ) : DCNL DCSP DCSP length = len ( space ) DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = len ( space ) DCNL DCSP for i in range ( length ) : DCNL DCSP DCSP if reverse : DCNL DCSP DCSP DCSP ( yield space &#91; i : ( i + length ) &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield i )
DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path = ( &apos; / &apos; + path ) DCNL DCSP return path
DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP pointBegin = loop &#91; pointIndex &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP if ( pointBegin.imag &gt; pointEnd.imag ) : DCNL DCSP DCSP DCSP pointOriginal = pointBegin DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len (
DCSP try : DCNL DCSP DCSP cache _ key = _ get _ cache _ key ( cache _ key ) DCNL DCSP DCSP return cache _ key DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP return joinedload _ all ( * args , * * kwargs )
DCSP return _ list _ env ( saltenv = saltenv ) &#91; 0 &#93;
DCSP return &apos; &apos;.join ( ( ( &apos; % s = % s &apos; % ( key , value ) ) for ( key , value ) in six.iteritems ( f ) ) )
DCSP try : DCNL DCSP DCSP ( yield logical _ line ) DCNL DCSP except ValueError : DCNL DCSP DCSP pass
DCSP result = &#91; &#93; DCNL DCSP for c in seq : DCNL DCSP DCSP if ( c = = &apos; &apos; ) : DCNL DCSP DCSP DCSP result.append ( c ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( c ) DCNL DCSP return &apos; &apos;.join ( result )
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP handler = logging.StreamHandler ( ) DCNL DCSP handler.setFormatter ( logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( message ) s &apos; ) ) DCNL DCSP return handler
DCSP ( p1 , p2 ) = urlparse ( url1 ) DCNL DCSP if ( p1.@@ scheme = = url2.@@ netloc ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP w = wcs.WCS ( naxis = 2 ) DCNL DCSP for ( i , x ) in enumerate ( w ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ( yield ( ( i + 1 ) , ( i + 1 ) ) )
DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name in
DCSP runner = Runner ( join ( abspath ( dirname ( _ _ file _ _ ) ) , &apos; w &apos; ) ) DCNL DCSP runner.run ( )
DCSP if ( len ( filename ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP return ( ( len ( filename ) - 1 ) + 1 )
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return get@@ statusoutput ( cmd ) &#91; 1 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP response = HttpResponse ( ) DCNL DCSP response &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP assert ( &apos; Content-Type &apos; in response )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return ret
DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) :
DCSP return base64.b64encode ( s )
DCSP if ( deferrable is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP DCSP onupdate = fk _ col _ name DCNL DCSP if ( onupdate is None ) : DCNL DCSP
DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap = plt.gca ( ) DCNL DCSP if ( transform is None ) : DCNL DCSP DCSP cmap =
DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from sqlalchemy import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL
DCSP if ( not keep _ blank _ values ) : DCNL DCSP DCSP return qs DCNL DCSP qs = urlparse.parse _ qs ( qs , keep _ blank _ values , strict _ parsing ) DCNL DCSP if ( not keep _ blank _ values ) : DCNL DCSP DCSP return qs DCNL DCSP else : DCNL DCSP DCSP return qs
DCSP return jsonify ( get _ dict ( input _ path = input _ path ) )
DCSP if ( barcode _ len is not None ) : DCNL DCSP DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP barcode _ count = 0 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP barcode _ count = 0 DCNL DCSP DCSP DCSP elif ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP DCSP barcode _ seq = fasta _ seqs &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP barcode _ count = 0 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP barcode _ count = 0 DCNL DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP if ( barcode _ type = = &apos; fasta &apos; ) : DCNL DCSP DCSP DCSP DCSP barcode
DCSP assert ( not tmpdir.join ( &apos; cache &apos; ) ) DCNL DCSP assert ( tmpdir.join ( &apos; name &apos; ) is None ) DCNL DCSP assert ( tmpdir.join ( &apos; name &apos; ) is not None ) DCNL DCSP assert ( tmpdir.join ( &apos; name &apos; ) is None ) DCNL DCSP assert ( tmpdir.join ( &apos; name &apos; ) is not None )
DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP for item in list _ : DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP return result
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP messages.info ( request , _ ( &apos; You DCSP are DCSP not DCSP available . &apos; ) ) DCNL DCSP return render ( request , &apos; WebConsole / list _ list.html &apos; , context )
DCSP with open ( os.devnull , &apos; w &apos; ) as fd : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP with open ( sys.argv &#91; 1 &#93; , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( not path ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP module &apos; % path ) ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( path ,
DCSP try : DCNL DCSP DCSP return User.objects.get ( pk = price ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP return list ( map ( get _ children , course ) )
DCSP return colorize ( text , &apos; yellow &apos; , attrib )
DCSP topic = get _ object _ or _ 404 ( Group , slug = slug ) DCNL DCSP topic = get _ object _ or _ 404 ( GroupTopic , pk = topic _ id , slug = topic _ id ) DCNL DCSP return render ( request , template _ name , { &apos; topic &apos; : topic , &apos; topic &apos; : topic } )
DCSP if ( not dry _ run ) : DCNL DCSP DCSP dry _ run = &#91; &#93; DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP dry _ run = &#91; &#93; DCNL DCSP DCSP if dry _ run : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if dry _ run : DCNL DCSP DCSP DCSP print ( &apos
DCSP if ( not response.has _ header ( &apos; content-type &apos; ) ) : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP return response
DCSP filename = request.GET.get ( &apos; file &apos; , &apos; &apos; ) DCNL DCSP filename = filename.replace ( &apos; .&apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos; / &apos; , &apos; _ &apos; ) DCNL DCSP filename = filename.replace ( &apos;
DCSP def decorator ( func ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return inner DCNL DCSP return decorator
DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP pass
DCSP return _ compile _ function ( name , code , globs )
DCSP ( a , b ) = ( p1 &#91; ( -1 ) &#93; , p2 &#91; ( -1 ) &#93; ) DCNL DCSP for ( a , b ) in zip ( p1 , p2 ) : DCNL DCSP DCSP if ( a = = p1 ) : DCNL DCSP DCSP DCSP return ( a , p2 ) DCNL DCSP return ( a , p2 )
DCSP try : DCNL DCSP DCSP return config.get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN , { } ) .get ( DOMAIN ,
DCSP if ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf ( ) DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf DCNL DCSP elif ( family = = &apos; linux &apos; ) : DCNL DCSP DCSP return _ conf &#91;
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP fields = &#91; &#93; DCNL DCSP for ( key , value ) in field@@ s.items ( ) : DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP if ( not br ) : DCNL DCSP DCSP return _ os _ dispatch ( &apos; br@@ br &apos; , br ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP { 1 } DCSP { 1 } &apos; .format ( br , iface ) )
DCSP if use _ norm : DCNL DCSP DCSP if use _ norm : DCNL DCSP DCSP DCSP if use _ norm : DCNL DCSP DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP elif use _ norm : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP positive &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP positive &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; decimal DCSP must DCSP be DCSP positive &apos; ) DCNL DCSP if ( decimal &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP try : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP return False
DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP src = None DCNL DCSP if ( src is
DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return rv.args &#91; 0 &#93; DCNL DCSP if ( rv.func is None ) : DCNL DCSP DCSP return (
DCSP if ( node is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return node
DCSP category = get _ object _ or _ 404 ( Category , pk = category _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; category &apos; : category } ) DCNL DCSP return render _ to _ response ( &apos; knowledge / category _ add &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return crypto _ show ( )
DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL DCSP if ( fraction _ ref is None ) : DCNL DCSP DCSP fraction _ ref = &apos; &apos; DCNL
DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert isinstance ( dim _ cols , tuple ) DCNL DCSP assert ( len ( dimensions _ cols ) = = 1 ) DCNL DCSP assert ( len ( dimensions _ cols ) = = 1 ) DCNL DCSP assert ( len ( dimensions _ cols ) = = 1 ) DCNL DCSP assert ( len ( dimensions _ cols ) = = 1 ) DCNL DCSP
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP pubsub _ client = pubsub.Client ( ) DCNL DCSP topic = pubsub _ client.topic ( node _ id ) DCNL DCSP if ( not topic ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( topics ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len
DCSP if ( not isinstance ( instance _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( instance _ or _ dict , model _ or _ dict ) ) ) DCNL DCSP if ( not isinstance ( instance _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model _ or _ dict , model _ or _ dict ) ) ) DCNL DCSP if ( not isinstance ( instance _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model _ or _ dict , model _ name ) ) ) DCNL DCSP if ( not isinstance ( instance _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP DCSP DCSP DCSP assert ( tpot _ obj.@@ score ( ) = = expected _ score ) DCNL DCSP DCSP DCSP DCSP assert ( tpot _ obj.@@ score ( ) = = expected _ score ) DCNL DCSP DCSP DCSP DCSP assert ( tpot _ obj.@@ score ( ) = = expected _ score ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP assert False DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP tpot _ obj = TPOTClassifier ( )
DCSP if ( node.op = = node.outputs &#91; 0 &#93; .type ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP help _ texts = &#91; &#93; DCNL DCSP if ( password _ validators is None ) : DCNL DCSP DCSP password _ validators = get _ password _ validators ( ) DCNL DCSP help _ texts = &#91; &#93; DCNL DCSP for help _ message in password _ validators : DCNL DCSP DCSP help _ text + = ( u &apos; \ n &apos; + u &apos; \ n &apos; ) DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u &apos; \ n &apos; DCNL DCSP help _ text + = u
DCSP forumsread = ForumsRead.query.filter ( ( ForumsRead.user _ id = = user.id ) , ( ForumsRead.forum _ id = = topic.forum _ id ) ) .first ( ) DCNL DCSP forum = Forum.query.filter _ by ( id = forum@@ .id ) .first ( ) DCNL DCSP assert ( forumsread is None )
DCSP flavor = _ find _ flavor ( cs , args.flavor ) DCNL DCSP columns = &#91; &apos; Flavor _ ID &apos; , &apos; Tenant _ ID &apos; &#93; DCNL DCSP utils.print _ list ( flavor , columns )
DCSP return ( &apos; server % d &apos; % ( word , ) )
DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = list ( G ) DCNL DCSP if ( nodes is not None ) : DCNL DCSP DCSP if ( nodes is not None ) : DCNL DCSP DCSP DCSP if ( nodes is not None ) : DCNL DCSP DCSP DCSP DCSP if ( nodes is None ) : DCNL DCSP DCSP DCSP DCSP DCSP nodes = &#91; &#93; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( nodes is None ) : DCNL DCSP DCSP DCSP DCSP DCSP nodes = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for ( i , v ) in enumerate ( G ) : DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( v , ( tuple , tuple ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for ( i , v ) in enumerate ( G ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , ( tuple , tuple ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for ( i , v ) in enumerate ( G ) : DCNL DCSP DCSP DCSP
DCSP headers = dict ( ( ( k , v ) for ( k , v ) in headers.items ( ) ) ) DCNL DCSP headers = dict ( ( ( k , v ) for ( k , v ) in headers.items ( ) ) ) DCNL DCSP headers = dict ( ( ( k , v ) for ( k , v ) in headers.items ( ) ) ) DCNL DCSP headers = dict ( ( ( k , v ) for ( k , v ) in headers.items ( ) ) ) DCNL DCSP headers = dict ( ( ( k , v ) for ( k , v ) in headers.items ( ) if ( k in headers ) ) ) DCNL DCSP return headers
DCSP warnings.warnpy3k ( &apos; In DCSP 3.x , DCSP os.path.walk DCSP is DCSP removed DCSP in DCSP favor DCSP of DCSP os.walk. &apos; , stacklevel = 2 ) DCNL DCSP try : DCNL DCSP DCSP names = os.listdir ( top ) DCNL DCSP except os.error : DCNL DCSP DCSP return DCNL DCSP func ( arg , top , names ) DCNL DCSP for name in names : DCNL DCSP DCSP if ( name in names ) : DCNL DCSP DCSP DCSP walk ( name , func , arg )
DCSP class Table ( tables.Table , ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP def _ _ new _ _ ( self ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ new _ _ ( self , * args , * * kwargs ) :
DCSP if ( not isinstance ( keystr , string _ types ) ) : DCNL DCSP DCSP return False DCNL DCSP if isinstance ( keystr , string _ types ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return True
DCSP if isinstance ( symbols , ( list , tuple ) ) : DCNL DCSP DCSP symbols = &#91; &#93; DCNL DCSP DCSP for s in symbols : DCNL DCSP DCSP DCSP if ( not isinstance ( s , ( tuple , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( s , ( tuple , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( s , ( tuple , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( s , ( tuple , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP if ( not isinstance ( script , string _ types ) ) : DCNL DCSP DCSP script _ name = script _ name.replace ( &apos; -&apos; , &apos; _ &apos; ) .replace ( &apos; DCSP &apos; , &apos; _ &apos; ) .replace ( &apos; DCSP &apos; , &apos; _ &apos; ) .replace ( &apos; DCSP &apos; , &apos; _ &apos; ) .replace ( &apos; DCSP &apos; , &apos; _ &apos; ) .replace ( &apos; DCSP &apos; , &apos; _ &apos; ) DCNL DCSP return script _ name.replace ( &apos; -&apos; , &apos; _ &apos; ) .replace ( &apos; -&apos; , &apos; _ &apos; ) .replace ( &apos; -&apos; , &apos; _ &apos; ) .replace ( &apos; -&apos; , &apos; _ &apos; ) .replace ( &apos; -&apos; , &apos; _ &apos; )
DCSP return ( ( &apos; dependencies &apos; in _ _ salt _ _ ) and ( &apos; dependencies &apos; in _ _ salt _ _ ) )
DCSP sensorRegion = network.regions &#91; &apos; identity@@ Region &apos; &#93; DCNL DCSP sensor.@@ dataSource = network.regions &#91; &apos; identity@@ Region &apos; &#93; DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; face &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; identity@@ Region &apos; , &apos; identity@@ Region
DCSP for ( value , value ) in iteritems ( values ) : DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP value = value DCNL DCSP DCSP elif isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP value = value DCNL DCSP DCSP elif isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP value = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = value DCNL DCSP return value
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP reload &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP jobs = &#91; &#93; DCNL DCSP for filename in filenames : DCNL DCSP DCSP if os.path.exists ( filename ) : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else :
DCSP if ( not isinstance ( r , dict ) ) : DCNL DCSP DCSP r = { } DCNL DCSP else : DCNL DCSP DCSP d = { } DCNL DCSP DCSP for ( k , v ) in attrs.items ( ) : DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP r &#91; k &#93; = None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP r &#91; k &#93; = None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP r &#91; k &#93; = None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP r &#91; k &#93; = None DCNL DCSP return r
DCSP if ( filter _ flip is not None ) : DCNL DCSP DCSP filter _ shape = ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = filter _ shape DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter _ shape DCNL DCSP else : DCNL DCSP DCSP filter _ shape =
DCSP for sitedir in known _ paths : DCNL DCSP DCSP if os.path.isdir ( sitedir ) : DCNL DCSP DCSP DCSP addsitedir ( sitedir , known _ paths ) DCNL DCSP return known _ paths
DCSP if ( r.representation = = &apos; csv &apos; ) : DCNL DCSP DCSP record = r.record DCNL DCSP else : DCNL DCSP DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return DCNL DCSP record = r.record DCNL DCSP if ( record is None ) : DCNL DCSP
DCSP return Count@@ Errors ( oc@@ r _ text.split ( ) , truth _ text.split ( ) )
DCSP if ( num _ bits is None ) : DCNL DCSP DCSP num _ bits = 0 DCNL DCSP else : DCNL DCSP DCSP num _ bits = len ( value ) DCNL DCSP if ( num _ bits &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % r &apos; % num _ bits ) ) DCNL DCSP if ( num _ bits &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num _ bits ) ) DCNL DCSP if ( num _ bits &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num _ bits ) ) DCNL DCSP if ( num _ bits &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string DCSP % s &apos; % num _ bits ) ) DCNL DCSP if ( num _ bits &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( (
DCSP return _ run ( name , source , saltenv , saltenv = saltenv , args = args , env = env , exec _ driver = exec _ driver , stdin = stdin , python _ shell = python _ shell , output _ loglevel = output _ loglevel , ignore _ retcode = ignore _ retcode , keep _ env = keep _ env )
DCSP ( yield ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP os.close ( fd )
DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is None ) : DCNL DCSP DCSP prompt = default DCNL DCSP return default
DCSP t = ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; &#93; ) DCNL DCSP assert ( t.colnames = = &#91; &apos; a &apos; , &apos; b &apos; &#93; )
DCSP if ( nout is None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout is None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout is None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout is None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nout = options &#91; &apos; dim _ proj
DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes ( ) DCNL DCSP return PKCS@@ 1@@ OAEP _ Cipher ( key , randfunc )
DCSP if ( request _ or _ response is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return _ ParseFileEx ( request _ or _ response , request _ or _ response )
DCSP if ( ( r is None ) or ( r is None ) ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r
DCSP if ( scope = = &apos; 1&apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( scope = = &apos; little &apos; ) : DCNL DCSP DCSP return &apos; &apos;.join ( &#91; chr ( random.randint ( 0 , 255 ) ) for x in scope &#93; ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % s &apos; % scope ) )
DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &#91; &apos; git &apos; , &apos; --version &apos; , &apos; -V &apos; &#93; , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if out : DCNL DCSP DCSP return out &#91; : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) = = 3 ) DCNL DCSP assert ( len ( args ) =
DCSP import twill DCNL DCSP twill.@@ reset _ output ( )
DCSP run _ as _ root ( ( &apos; git DCSP % s DCSP % s &apos; % ( _ _ version _ _ , &apos; git &apos; ) ) ) DCNL DCSP run _ as _ root ( ( &apos; git DCSP % s DCSP % s &apos; % ( _ _ version _ _ , &apos; git &apos; ) ) )
DCSP ( out , err ) = capfd.readouterr ( ) DCNL DCSP nt.assert _ equal ( len ( out ) , 2 ) DCNL DCSP nt.assert _ equal ( out &#91; 0 &#93; , &apos; bar &apos; )
DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is not None ) : DCNL DCSP DCSP target &#91; &apos; action &apos; &#93; = target DCNL DCSP return action
DCSP if ( match is None ) : DCNL DCSP DCSP return None DCNL DCSP result = predicate ( match ) DCNL DCSP if ( result is None ) : DCNL DCSP DCSP return None DCNL DCSP return result
DCSP devices = &#91; &#93; DCNL DCSP for device in devices : DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( device is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP
DCSP if ( lamb ! = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Unknown DCSP argument DCSP type &apos; ) DCNL DCSP if ( chrs is None ) : DCNL DCSP DCSP return { } DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Unknown DCSP argument DCSP type &apos; )
DCSP u = _ validate _ vector ( u ) DCNL DCSP v = _ validate _ vector ( v ) DCNL DCSP dist = _ validate _ vector ( v ) DCNL DCSP return dist
DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP volume _ instance _ destroy DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP ret = aws.query ( params , * * kwargs ) DCNL DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP return ret
DCSP parent = parent DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP return parent
DCSP if ( filepath = = &apos; &apos; ) : DCNL DCSP DCSP filepath = filepath &#91; : ( -1 ) &#93; DCNL DCSP return filepath
DCSP if ( not s ) : DCNL DCSP DCSP return s DCNL DCSP s = s.split ( &apos; \ n &apos; ) DCNL DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP return s &#91; 0 : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP return s
DCSP if request.GET : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP else : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; filters &apos; : filters , &apos; filters &apos; : filters } ) DCNL DCSP return render _ to _ response ( &apos; messaging / index _ created &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return get _ TextField ( kwargs )
DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return value
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.server _ list _ detailed ( )
DCSP if ( left is not None ) : DCNL DCSP DCSP return left DCNL DCSP else : DCNL DCSP DCSP return ( left + right )
DCSP if ( df is None ) : DCNL DCSP DCSP return df DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return df DCNL DCSP if isinstance ( df , pd.DataFrame ) : DCNL DCSP DCSP return df &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return df
DCSP if isinstance ( data , dict ) : DCNL DCSP DCSP return data DCNL DCSP elif isinstance ( data , dict ) : DCNL DCSP DCSP return data DCNL DCSP else : DCNL DCSP DCSP return data
DCSP try : DCNL DCSP DCSP import os DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP if ( not hasattr ( sys , &apos; frozen &apos; ) ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import os DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import os DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import os DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import os DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import os DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP import sys DCNL DCSP DCSP DCSP DCSP import
DCSP if ( not left ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is None ) or ( left = = &apos; git &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( left is not None ) and ( not diff ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP git DCSP git DCSP
DCSP if ( dest _ dir is None ) : DCNL DCSP DCSP dest _ dir = os.path.dirname ( os.path.abspath ( dest _ dir ) ) DCNL DCSP if ( not os.path.exists ( dest _ dir ) ) : DCNL DCSP DCSP os.makedirs ( dest _ dir ) DCNL DCSP return file _ func
DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP if ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP n = 0 DCNL DCSP elif ( n = = 0 )
DCSP from google.appengine. _ internal.django.utils.html import urlize DCNL DCSP return mark _ safe ( urlize ( text , trim _ url _ limit = trim _ url _ limit , nofollow = nofollow , autoescape = autoescape ) )
DCSP docstring = docstring _ docstring ( docstring ) DCNL DCSP docstring = docstring _ docstring ( docstring , docstring ) DCNL DCSP return ( docstring , docstring )
DCSP result = { } DCNL DCSP for ( key , value ) in subject.@@ iteritems ( ) : DCNL DCSP DCSP if ( value is not None ) : DCNL DCSP DCSP DCSP result &#91; name &#93; = value DCNL DCSP return result
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.delete _ policy ( name , policy _ name , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP home _ dir = os.path.dirname ( os.path.abspath ( _ _ file _ _ ) ) DCNL DCSP if ( not os.path.isdir ( home _ dir ) ) : DCNL DCSP DCSP os.makedirs ( home _ dir ) DCNL DCSP return home _ dir
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP lines = f.readlines ( ) DCNL DCSP DCSP DCSP for line in lines : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( line ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP
DCSP if hasattr ( attr , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return attr . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return attr
DCSP if ( not term ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( term , ( list , tuple ) ) ) : DCNL DCSP DCSP if ( not isinstance ( term , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP if ( not isinstance ( term , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass
DCSP neigh _ entry = _ get _ neigh _ entry ( ip _ address , mac _ address , device _ address , device , * * kwargs ) DCNL DCSP if ( ip _ address is not None ) : DCNL DCSP DCSP ip _ address = ip _ address DCNL DCSP else : DCNL DCSP DCSP ip _ address = ip _ address DCNL DCSP return neigh _ entry
DCSP try : DCNL DCSP DCSP row = table &#91; table &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist DCSP in DCSP % s &apos; % ( table , table ) ) ) DCNL DCSP for row in table : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP DCSP row = row &#91; 1 : &#93; DCNL DCSP DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP DCSP row = row &#91; 1 : &#93; DCNL DCSP DCSP DCSP row = row &#91; 1 : &#93; DCNL DCSP DCSP DCSP row = row &#91; : ( -1 ) &#93; DCNL DCSP DCSP
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP activity _ data = get _ activity _ data ( request ) DCNL DCSP if ( not data _ data ) : DCNL DCSP DCSP raise Http404 ( &apos; No DCSP activity DCSP data DCSP found . &apos; ) DCNL DCSP return render _ to _ response ( &apos; actstream / actor.@@ html &apos; , { &apos; activity _ data &apos; : activity _ data } , context _ instance = RequestContext ( request ) )
DCSP if ( geometryOutput . _ _ class _ _ = = list ) : DCNL DCSP DCSP return geometryOutput DCNL DCSP if ( len ( geometryOutput ) &lt; 1 ) : DCNL DCSP DCSP return geometryOutput DCNL DCSP geometryOutput@@ Vertexes = matrix.getConnectionVertexes ( geometryOutput ) DCNL DCSP if ( len ( geometryOutput@@ Vertexes ) &lt; 1 ) : DCNL DCSP DCSP return geometryOutput DCNL DCSP if ( len ( geometryOutput@@ Vertexes ) &lt; 1 ) : DCNL DCSP DCSP return geometryOutput DCNL DCSP euclidean.translateVector3Path ( matrix.getVertexes ( geometryOutput ) , Vector3 ( ) ) DCNL DCSP return geometryOutput
DCSP @ wraps ( func ) DCNL DCSP def inner ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return inner
DCSP return Demo@@ NotificationService ( hass , config &#91; CONF _ API _ KEY &#93; , config &#91; CONF _ API _ KEY &#93; )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP DCSP sock.bind ( ( host , port ) ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sock.close ( )
DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP scalars . &apos; ) DCNL
DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) .replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) .replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) .replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) .replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP html = html.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL
DCSP ( tfreq , tmag , tphase ) = SM.sine@@ ModelAnal ( x , fs , w , N , maxnSines , minSineDur , freqDevOffset , freqDevSlope ) DCNL DCSP Ns = 512 DCNL DCSP Ns = 512 DCNL DCSP xr = UF.@@ sineSubtraction ( x , Ns , H , tfreq , tmag , tphase , maxnSines , minSineDur , freqDevOffset , freqDevSlope ) DCNL DCSP Ns = 512 DCNL DCSP Ns = 512 DCNL DCSP xr = UF.@@ sineSubtraction ( x , Ns , H , tfreq , tmag , tphase ) DCNL DCSP return ( tfreq , tmag , tphase )
DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = get _ constr _ id ( ) DCNL
DCSP return os.environ &#91; &apos; CURRENT _ VERSION _ ID &apos; &#93; .split ( &apos; .&apos; ) &#91; ( -1 ) &#93;
DCSP shutil.copyfile ( src , dst ) DCNL DCSP try : DCNL DCSP DCSP copytimes ( src , dst ) DCNL DCSP except OSError : DCNL DCSP DCSP pass
DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ unit DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( input _ unit is None ) or ( input _ unit is None ) ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP
DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP else : DCNL DCSP DCSP x _ start = x _ start DCNL DCSP x _ start = ( window _ start - window _ start ) DCNL DCSP x _ start = ( window _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - window _ start ) DCNL DCSP x _ start = ( x _ start - t _ start ) DCNL DCSP x _ start = ( x _ start - t _ start ) DCNL
DCSP return Locale.parse ( locale ) .@@ format _ format ( format , locale )
DCSP return base64.b64encode ( base64.b64encode ( data ) .digest ( ) )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return func ( * args ) DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP return func ( * args ) DCNL DCSP else : DCNL DCSP DCSP return func ( * args )
DCSP if ( len ( lst ) = = 1 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( len ( lst ) = = 1 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP if ( key in args ) : DCNL DCSP DCSP args &#91; key &#93; = value DCNL DCSP else : DCNL DCSP DCSP args &#91; key &#93; = value
DCSP credentials = GoogleCredentials.get _ application _ default ( ) DCNL DCSP net.start ( ) DCNL DCSP CLI ( net ) DCNL DCSP net.stop ( )
DCSP meta = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta.bind = migrate _ engine DCNL DCSP meta = MetaData ( bind = migrate _ engine ) DCNL DCSP meta.bind = migrate _ engine
DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP seen _ add = seen.add DCNL DCSP return seen
DCSP if isinstance ( data , dict ) : DCNL DCSP DCSP data = { } DCNL DCSP DCSP for ( key , value ) in data.items ( ) : DCNL DCSP DCSP DCSP if ( key in data ) : DCNL DCSP DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP return data
DCSP if ( start is None ) : DCNL DCSP DCSP start = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is None ) : DCNL DCSP DCSP stop = 0 DCNL DCSP if ( stop is
DCSP return np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; )
DCSP output _ root = &apos; &apos;.join ( map ( str , output _ root ) ) DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + = &apos; \ n &apos; DCNL DCSP output _ root + =
DCSP text = &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if ( obj is None ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( obj , &apos; set _ stylesheet &apos; ) ) : DCNL DCSP DCSP obj . _ default _ stylesheet = ( &apos; % s . % s &apos; % ( obj . _ _ class _ _ . _ _ name _ _ , ) )
DCSP nt.assert _ equal ( ip.user _ ns &#91; &apos; a &apos; &#93; , &#91; &apos; foo &apos; , &apos; foo &apos; &#93; )
DCSP blocks = &#91; &#93; DCNL DCSP for block in block _ block : DCNL DCSP DCSP block = block &#91; block &#93; DCNL DCSP DCSP for block in blocks : DCNL DCSP DCSP DCSP block = block &#91; block &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP DCSP block = block &#91; &apos; blocks &apos; &#93; DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except KeyError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass
DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( content )
DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP DCSP DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ch _ type = = &apos; set &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ch = &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP filename = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; w &apos; ) DCNL DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP lines = f.readlines ( ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _
DCSP return _ check _ diff _ value ( label , ( -1 ) , ( -1 ) , ( -1 ) )
DCSP result = &#91; &#93; DCNL DCSP for line in handle : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; 0 &#93; = = &apos; -&apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; 0 &#93; = = &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; data &apos; &#93; DCNL DCSP if ( &apos; user &apos; in context ) : DCNL DCSP DCSP context &#91; &apos; user _ id &apos; &#93; = data _ dict &#91; &apos; user _ id &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP context &#91; &apos; user _ id &apos; &#93; = data _ dict &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos; user _ id &apos; &#93; = data &#91; &apos; email &apos; &#93; DCNL DCSP context &#91; &apos;
DCSP if ( size is None ) : DCNL DCSP DCSP input = numpy.asarray ( input ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size
DCSP try : DCNL DCSP DCSP return import _ module ( module _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP time.sleep ( 0.1 ) DCNL DCSP wait _ for _ server ( server , port )
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = wsgi.JSON@@ ResponseSerializer ( ) DCNL DCSP return wsgi.Resource ( Controller ( ) , deserializer , serializer )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP groups = conn.describe _ security _ groups ( groups _ ids = groups _ ids , filters = filters , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP return { }
DCSP kwargs = dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( kwargs ) if isinstance ( v , dict ) ) ) DCNL DCSP kwargs = dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( kwargs ) if ( k in kwargs ) ) ) DCNL DCSP return _ periodic _ task ( * args , * * kwargs )
DCSP l = &#91; &#93; DCNL DCSP for word in word : DCNL DCSP DCSP if isinstance ( word , basestring ) : DCNL DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP if ( ( element is None ) or ( element is None ) ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return DCNL DCSP if ( element is None ) : DCNL DCSP
DCSP output = render _ to _ response ( template _ name , { &apos; form &apos; : form } , context _ instance = RequestContext ( request ) ) DCNL DCSP return render _ to _ response ( template _ name , { &apos; form &apos; : form } )
DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( c ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP
DCSP pos = logical _ line.find ( &apos; `&apos; ) DCNL DCSP if ( pos &gt; ( -1 ) ) : DCNL DCSP DCSP ( yield ( pos , &apos; W604 DCSP backticks DCSP are DCSP deprecated &apos; ) )
DCSP context = { } DCNL DCSP for ( key , value ) in data.items ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP data = data &#91; key &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP context &#91; key &#93; = value DCNL DCSP return context
DCSP if ( key in item ) : DCNL DCSP DCSP return item &#91; key &#93; DCNL DCSP else : DCNL DCSP DCSP return item
DCSP return &apos; &apos;.join ( &#91; ( &apos; % s = % s &apos; % ( i , i ) ) for ( i , v ) in obj.items ( ) &#93; )
DCSP httpd = ServerClass ( ) DCNL DCSP try : DCNL DCSP DCSP httpd.serve _ forever ( ) DCNL DCSP except KeyboardInterrupt : DCNL DCSP DCSP pass DCNL DCSP finally : DCNL DCSP DCSP httpd.serve _ forever ( )
DCSP if ( len ( mag ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Only DCSP one DCSP arrays DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( mag ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Only DCSP one DCSP arrays DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( mag ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Only DCSP one DCSP arrays DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( mag ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Only DCSP one DCSP arrays DCSP must DCSP be DCSP greater DCSP than DCSP 1 . &apos; ) DCNL DCSP if ( len ( mag ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Only DCSP one DCSP arrays DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( len ( mag ) &gt; 1 ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP os.mkdir ( req ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP return False
DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP intensity = np.asarray ( x ) DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index = = 0 ) : DCNL DCSP DCSP channel _ index = intensity DCNL DCSP elif ( channel _ index = = 0 ) : DCNL DCSP DCSP channel _ index = intensity DCNL
DCSP with TestingCanvas ( ) as c : DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _ true ( ( len ( x ) = = 1 ) ) DCNL DCSP DCSP assert _
DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dt _ str is None
DCSP regions = get _ regions ( ) DCNL DCSP for region in regions : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP del resource &#91; &apos; region &apos; &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP return resource
DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP return yaml.load ( f , Loader = yaml.@@ Loader )
DCSP smote = SMOTE ( random _ state = RND _ SEED ) DCNL DCSP smote.fit ( X , Y ) DCNL DCSP assert _ raises ( RuntimeError , smote.@@ sample , X , Y )
DCSP server = _ find _ server ( cs , args.server ) DCNL DCSP _ print _ server ( cs , args.server )
DCSP if ( not var ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( var , Mul ) ) : DCNL DCSP DCSP
DCSP dest = os.path.join ( dest , dest ) DCNL DCSP if os.path.exists ( dest ) : DCNL DCSP DCSP shutil.copy ( src , dest )
DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 204 , 51 , 204 ) = = (
DCSP import inspect DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP _ _ import _ _ ( name ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP _ _ import _ _ ( name ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP _ _ import _ _ ( name ) DCNL DCSP except : DCNL DCSP DCSP pass
DCSP options.allowed _ flags ( args , &#91; &apos; polys &apos; &#93; ) DCNL DCSP try : DCNL DCSP DCSP ( F , opt ) = poly _ from _ expr ( f , * gens , * * args ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; sqf &apos; , 1 , exc ) DCNL DCSP if ( not opt.polys ) : DCNL DCSP DCSP return result.as _ expr ( ) DCNL DCSP else : DCNL DCSP DCSP return result
DCSP @ functools.wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP if ( not HAS _ VERSION ) : DCNL DCSP DCSP return False DCNL DCSP if ( not HAS _ VERSION ) : DCNL DCSP DCSP return False DCNL DCSP if ( not HAS _ VERSION ) : DCNL DCSP DCSP return False DCNL DCSP if ( not HAS _ VERSION ) : DCNL DCSP DCSP return False DCNL DCSP if ( not api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( not api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( not api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( not api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( not api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( &apos; api &apos; not in api _ version ) : DCNL DCSP DCSP return False DCNL DCSP if ( &apos; api &apos; in api _ version ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( not hasattr ( node , &apos; _ _ doc _ _ &apos; ) ) : DCNL DCSP DCSP return node.body . _ _ doc _ _ DCNL DCSP else : DCNL DCSP DCSP return node.body . _ _ doc _ _
DCSP app = get _ app ( app ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP if isinstance ( string , bytes ) : DCNL DCSP DCSP return string DCNL DCSP else : DCNL DCSP DCSP return string
DCSP lines = sys.argv &#91; 1 : &#93; DCNL DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line =
DCSP if ( len ( loop ) &lt; 1 ) : DCNL DCSP DCSP return &#91; loop &#93; DCNL DCSP loopComplex = euclidean.getComplexPath ( loop ) DCNL DCSP return euclidean.getVector3Paths ( &#91; euclidean.getLoop@@ Convex ( loopComplex ) &#93; , loop &#91; ( -1 ) &#93; .z )
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if ( not section ) : DCNL DCSP DCSP return None DCNL DCSP course _ key = CourseKey.from _ string ( section ) DCNL DCSP course _ key = CourseKey.from _ string ( section _ id ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if ( not section ) : DCNL DCSP DCSP return None DCNL DCSP course _ key = CourseKey.from _ string ( section ) DCNL DCSP course _ key = CourseKey.from _ string ( section ) DCNL DCSP course = modulestore ( ) .get _
DCSP statements = &#91; &#93; DCNL DCSP for app in models.get _ models ( app ) : DCNL DCSP DCSP output.extend ( get _ sql _ sequence ( app , app ) ) DCNL DCSP return statements
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; ) DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; ) DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; ) DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; ) DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; ) DCNL DCSP else : DCNL DCSP DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; )
DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , basestring ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if ( not isinstance ( input _ map , six.string _ types ) ) : DCNL DCSP DCSP input _ map = { } DCNL DCSP if debug : DCNL DCSP
DCSP stmt = parent DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL DCSP node.remove ( ) DCNL
DCSP if ( alphabet is None ) : DCNL DCSP DCSP alphabet = &#91; &#93; DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( alphabet is None ) : DCNL DCSP DCSP alphabet = &#91; &#93; DCNL DCSP
DCSP room = get _ room ( room _ id , message = message , from _ name = api _ key , api _ url = api _ url , api _ url = api _ url , color = color , notify = notify ) DCNL DCSP return message
DCSP language = get _ language _ from _ request ( request ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP return None DCNL DCSP return get _ language _ from _ request ( request )
DCSP sa _ session = app.model.context.current DCNL DCSP return IMPL.quota _ create ( context , entity _ id , traversal _ id , is _ update , stack _ id )
DCSP if ( ( worN is None ) or ( len ( z ) ! = 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( z ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( len ( z ) = = 1 ) and ( len ( z ) &gt; 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( z ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( z ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( z ) = = 1 ) : DCNL DCSP DCSP return
DCSP if ( not value ) : DCNL DCSP DCSP raise ValidationValueError ( &apos; Invalid DCSP title : DCSP { } &apos; .format ( value ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValidationValueError ( &apos; Invalid DCSP title : DCSP { } &apos; .format ( value ) ) DCNL DCSP return value
DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = int ( limit ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = 0 DCNL DCSP else : DCNL DCSP
DCSP return captured _ output ( &apos; stdout &apos; )
DCSP global _ mimetype _ handler DCNL DCSP _ mimetype _ handler = handler
DCSP return IMPL.@@ purge _ deleted _ rows ( context , age _ in _ days = age _ in _ days , max _ rows = max _ rows , session = session )
DCSP check _ usage ( mne _ compare _ fiff )
DCSP containers.refresh ( ) DCNL DCSP manager.stop _ containers ( containers.running ) DCNL DCSP containers.notice _ changed ( manager.get _ inspect _ containers ( containers.running ) ) DCNL DCSP containers.notice _ changed ( manager.get _ inspect _ containers ( containers.running ) )
DCSP pool = get _ pool ( test _ case ) DCNL DCSP return pool
DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP usage _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ id , course _ id = course _ id , course _ id = course _ id , course _ id = course _ id , course _ id = course _ id ) DCNL DCSP if ( not usage ) : DCNL DCSP DCSP return None DCNL DCSP if ( usage _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( usage _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( usage _ id is None ) : DCNL DCSP DCSP module _ state _ key = UsageKey.from _ string ( usage _ id ) DCNL DCSP DCSP usage _ key.course _ key = usage _ key.course _ key DCNL DCSP DCSP return True DCNL DCSP return False
DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL
DCSP fields = &#91; &#93; DCNL DCSP for line in fp : DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.datetime.now ( ) DCNL DCSP return timesince ( now , d )
DCSP for task in tasks : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP task.@@ run ( ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except TypeError : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP return HttpResponseRedirect ( &apos; / get _ redirect _ view / &apos; )
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated (
DCSP for exclude in exclude : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.remove ( exclude ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass
DCSP result = &#91; &#93; DCNL DCSP for c in source : DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c in e ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c not in e ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP return Demo@@ NotificationService ( hass , config &#91; DOMAIN &#93; )
DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( ( &apos; % s \ n &apos; % filename ) )
DCSP width = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP ret = { &apos; path &apos; : path , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP res = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( res &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( not parts ) : DCNL DCSP DCSP return None DCNL DCSP parts = parts &#91; 0 &#93; DCNL DCSP if ( len ( parts ) = = 1 ) : DCNL DCSP DCSP return parts &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return ( parts &#91; 0 &#93; , parts &#91; 1 &#93; )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield 1 ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass
DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) :
DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL DCSP name = config.get ( CONF _ NAME ) DCNL
DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP if ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP elif ( method = = &apos; csc &apos; ) : DCNL DCSP DCSP method = &apos; csc &apos; DCNL DCSP else : DCNL DCSP DCSP
DCSP account = get _ object _ or _ 404 ( Account , pk = account _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( account , mode = &apos; w &apos; ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP account &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; finance / account _ edit &apos; , { &apos; form &apos; : form } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return s3 _ rest _ controller ( )
DCSP return captured _ output ( &apos; stdout &apos; )
DCSP session = Session ( bind = engine ) DCNL DCSP session.bulk _ delete _ objects ( &#91; Customer ( name = ( &apos; customer DCSP name DCSP % d &apos; % i ) , description = ( &apos; customer DCSP description DCSP % d &apos; % i ) ) for i in range ( n ) &#93; ) DCNL DCSP session.commit ( )
DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; export DCSP export DCSP { 0 } DCSP does DCSP not DCSP exist &apos; .format ( module.params &#91; &apos; path &apos; &#93; ) ) DCNL DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP DCSP export = module.params &#91; &apos; project &apos; &#93; DCNL DCSP DCSP DCSP export =
DCSP if ( ( request.method = = &apos; POST &apos; ) and ( request.method = = &apos; POST &apos; ) ) : DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( request.GET.get ( &apos; next &apos; , &apos; &apos; ) ) DCNL DCSP else : DCNL DCSP
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP try : DCNL DCSP DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP except ObjectDoesNotExist : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP try : DCNL DCSP DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP except
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return f ( self , * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP log.debug ( e ) DCNL DCSP DCSP DCSP return False DCNL DCSP return wrapper
DCSP if ( sys _ argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; : ( -1 ) &#93; DCNL DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP
DCSP return dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( settings ) ) )
DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if isinstance ( val
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP usage = os.statvfs ( path ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( path = = &apos; / &apos; ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( path = = &apos; / &apos; ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( path = = &apos; / &apos; ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL
DCSP session = Session ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP session = Session ( bind = engine ) DCNL DCSP for table in tables : DCNL DCSP DCSP model.metadata.create _ all ( engine )
DCSP if ( not isinstance ( root _ part , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; % ( root _ part , root _ path ) ) ) DCNL DCSP if ( not isinstance ( root _ part , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; % ( root _ part , root _ part ) ) ) DCNL DCSP if ( not isinstance ( root _ part , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; % ( root _ part , root _ part ) ) ) DCNL DCSP if ( not isinstance ( root _ part , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; %
DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; slug &apos; , &apos; locale &apos; )
DCSP action _ name = ugettext _ noop ( &apos; generated &apos; ) DCNL DCSP task _ fn = partial ( upload _ grade _ csv , xmodule _ instance _ args ) DCNL DCSP return run _ main _ task ( entry _ id , task _ fn , action _ name )
DCSP return dict ( ( ( k , v ) for ( k , v ) in match.groupdict ( ) .items ( ) ) )
DCSP sideLoop.loop = euclidean.getLoopWithoutCloseSequentialPoints ( sideLoop@@ .close , sideLoop.loop ) DCNL DCSP return sideLoop@@ .get@@ Manipul@@ ation@@ Plugin@@ Loops ( xmlElement )
DCSP result = &#91; &#93; DCNL DCSP for patch in patch : DCNL DCSP DCSP result + = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( path ) ) : DCNL DCSP DCSP DCSP result &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( len ( path ) ) : DCNL DCSP DCSP DCSP DCSP result &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result.append ( d &#91; i &#93; ) DCNL DCSP return result
DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = { } DCNL DCSP if ( option is None ) :
DCSP if ( not isinstance ( desired , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP version DCSP of DCSP % s &apos; % ( name , desired ) ) ) DCNL DCSP if ( not isinstance ( desired , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP version DCSP of DCSP % s &apos; % ( name , desired ) ) ) DCNL DCSP if ( not version ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP version DCSP of DCSP % s &apos; % ( name , desired ) ) )
DCSP if ( not context ) : DCNL DCSP DCSP return { } DCNL DCSP c = context &#91; &apos; request &apos; &#93; DCNL DCSP c = context &#91; &apos; request &apos; &#93; DCNL DCSP c = dict ( context.items ( ) ) DCNL DCSP c.update ( context = context ) DCNL DCSP return c
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return decorated DCNL DCSP return decorator
DCSP return s3 _ rest _ controller ( )
DCSP if ( not isinstance ( val , six.string _ types ) ) : DCNL DCSP DCSP val = str ( val ) DCNL DCSP return ( &apos; % s DCSP % s &apos; % ( val , val ) )
DCSP try : DCNL DCSP DCSP return urllib2.urlopen ( url ) .read ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( ( &apos; Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP return None
DCSP ratio = &apos; auto &apos; DCNL DCSP cc = ClusterCentroids ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ warns ( UserWarning , cc.fit , X , y )
DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP else : DCNL DCSP DCSP cluster = &apos; &apos; DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = timeutils.utcnow ( ) DCNL DCSP elif
DCSP return ( ( y _ true * y _ score ) + ( y _ true * y _ score ) )
DCSP if is _ interactive ( ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP features = &#91; &#93; DCNL DCSP for i in range ( 10 ) : DCNL DCSP DCSP for j in range ( ( len ( sys.argv ) - 1 ) ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if
DCSP if ( plot _ info is None ) : DCNL DCSP DCSP plot _ info = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP plot _ info = &#91; &#93; DCNL DCSP DCSP for ( label , label ) in enumerate ( plot _ data ) : DCNL DCSP DCSP DCSP if ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; &apos; DCNL DCSP DCSP DCSP elif ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; png &apos; DCNL DCSP DCSP DCSP elif ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; png &apos; DCNL DCSP DCSP DCSP elif ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; png &apos; DCNL DCSP DCSP DCSP elif ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; png &apos; DCNL DCSP DCSP DCSP elif ( label = = &apos; png &apos; ) : DCNL DCSP DCSP DCSP DCSP label = &apos; image &apos; DCNL DCSP DCSP DCSP elif ( label =
DCSP with open ( path , &apos; w &apos; ) as f : DCNL DCSP DCSP for i in range ( 0 , ( len ( path ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP if ( ( i + 1 ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( i + 1 ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( i + 1 ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( not node.is _ registration ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP try : DCNL DCSP DCSP return serialize _ draft _ registration ( auth , auth , * args , * * kwargs ) DCNL DCSP except NodeStateError as err : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST )
DCSP seen = set ( ) DCNL DCSP for item in items : DCNL DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for item in items : DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( item not in seen ) : DCNL DCSP DCSP DCSP DCSP continue DCNL
DCSP current _ date = get _ current _ date ( ) DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP return last _ date
DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = { } DCNL DCSP if ( sample _ id _ map
DCSP for i in xrange ( len ( vertexes ) ) : DCNL DCSP DCSP for j in xrange ( len ( vertexes ) ) : DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( random.random ( ) &lt; maximum@@ Complex.imag ) :
DCSP locale = Locale.parse ( locale ) DCNL DCSP if ( format is not None ) : DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP locale = Locale.parse ( locale ) DCNL DCSP DCSP
DCSP num = 0 DCNL DCSP for i in range ( num ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP num = int ( num ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP break DCNL DCSP return num
DCSP return IMPL.compute _ node _ compute _ set ( context , host , free _ ram _ mb , free _ disk _ gb , host , count )
DCSP if ( len ( vmax ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( vmax ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( indexedLoops ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( segments ) = = 1 ) : DCNL
DCSP if ( ctxt is None ) : DCNL DCSP DCSP ctxt = context.get _ admin _ context ( ) DCNL DCSP return db.instance _ type _ access _ get _ by _ flavor _ id ( ctxt , flavorid )
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 17 ) DCNL DCSP packet = ( a / b ) DCNL DCSP return packet
DCSP global _ config _ vars DCNL DCSP if ( _ config _ vars is None ) : DCNL DCSP DCSP _ config _ vars = _ config _ vars DCNL DCSP else : DCNL DCSP DCSP _ config _ vars = _ config _ vars DCNL DCSP return _ config _ vars
DCSP j = np.array ( &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
DCSP try : DCNL DCSP DCSP os.remove ( path ) DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( exc.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP params = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL
DCSP filename = os.path.join ( filename , filename ) DCNL DCSP if ( filename is not None ) : DCNL DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP if ( filename is not None ) : DCNL DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP if ( filename is not None ) : DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP DCSP if ( filename is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( filename , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join (
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return pmf ( k , n , p = p )
DCSP if isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( args ) ) ) DCNL DCSP elif isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( args ) ) ) DCNL DCSP elif isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( args ) ) ) DCNL DCSP elif isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( args ) ) ) DCNL DCSP elif isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( args ) ) ) DCNL DCSP elif isinstance ( args , dict ) : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k ,
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP ( v1 , v2 ) = ( v1 , v2 ) DCNL DCSP ( v1 , v2 ) = ( v1 , v2 ) DCNL DCSP return ( v1 , v2 )
DCSP return ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; Linux &apos; )
DCSP return search _ by _ name ( service , name , * * kwargs )
DCSP if logical _ line.startswith ( &apos; \ n &apos; ) : DCNL DCSP DCSP ( yield ( 0 , &apos; W391 DCSP blank DCSP line DCSP of DCSP blank DCSP line &apos; ) ) DCNL DCSP else : DCNL DCSP DCSP ( yield ( 0 , &apos; E@@ 301 DCSP Use DCSP blank DCSP line DCSP of DCSP blank DCSP line DCSP ( % s ) &apos; ) , ( &apos
DCSP @ wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP if ( not isinstance ( h , Deferred ) ) : DCNL DCSP DCSP DCSP raise TypeError ( ( &apos; Expected DCSP a DCSP coroutine , DCSP got DCSP % r &apos; % ( d , ) ) ) DCNL DCSP DCSP return True DCNL DCSP return True
DCSP request = client _ factory ( client , user _ id , device _ id , request = request ) DCNL DCSP ( yield Activity.VerifyActivityId ( client , user _ id , device _ id , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Remove@@ Photo@@ sOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Photo@@ sOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Photo@@ sOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Query@@ Operation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Query@@ Operation.Execute &apos; , request ) ) DCNL DCSP ( yield Activity.VerifyActivityId ( client , user _ id , device _ id , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client ,
DCSP conf _ file = ( &apos; % s . % s &apos; % ( service _ path , service _ path ) ) DCNL DCSP try : DCNL DCSP DCSP conf _ file = open ( conf _ path , &apos; r &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP raise ConfigurationError ( ( &apos; Unable DCSP to DCSP load DCSP % s : DCSP % s &apos; % ( service _ path , e ) ) ) DCNL DCSP try : DCNL DCSP DCSP result = service _ mapping &#91; service _ name &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP raise Exception ( ( &apos; Unable DCSP to DCSP load DCSP % s : DCSP % s &apos; % ( service _ path , service _ path ) ) ) DCNL DCSP return result
DCSP member = get _ user _ member ( user , member ) DCNL DCSP return user
DCSP code = re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , sub ) DCNL DCSP s = re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , sub ) DCNL DCSP s = re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , sub ) DCNL DCSP return s
DCSP cmd = &apos; { 0 } DCSP { 1 } DCSP { 2 } DCSP { 2 } DCSP { 2 } DCSP { 2 } DCSP { 2 } &apos; .format ( branch , old _ retries , old _ retries , new _ retries ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP sol = &#91; &#93; DCNL DCSP for i in range ( len ( sol ) ) : DCNL DCSP DCSP sol = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( sol ) ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( sol ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( sol ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( sol ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP sol = &#91; &#93; DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sol = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( sol ) ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( sol ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if
DCSP try : DCNL DCSP DCSP return ex ( e ) DCNL DCSP except Exception : DCNL DCSP DCSP return e
DCSP return parse _ tree _ tree ( root _ node , * a , * * kw )
DCSP if salt.utils.is _ darwin ( ) : DCNL DCSP DCSP return _ osquery _ cmd ( table = &apos; osquery _ packages &apos; , attrs = attrs , where = where ) DCNL DCSP return { &apos; result &apos; : False , &apos; comment &apos; : &apos; Only DCSP available DCSP on DCSP macOS DCSP systems . &apos; }
DCSP with _ get _ xapi _ session ( ) as xapi : DCNL DCSP DCSP vm _ uuid = _ get _ vm _ uuid ( xapi , &apos; VM &apos; , vm _ ) DCNL DCSP DCSP if ( vm _ uuid is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP vm _ uuid = _ get _ vm _ uuid ( xapi , &apos; VM &apos; , vm _ ) DCNL DCSP DCSP if ( vm _ uuid is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP xapi.VM@@ .set _ vbd ( vm _ ) DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP return False
DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP DCSP fun = _ _ opts _ _ DCNL DCSP if ( fun is None ) : DCNL DCSP
DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not
DCSP lines = &#91; &#93; DCNL DCSP for line in obj : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; &quot; &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line &#91; ( -1 ) &#93; = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP entry = entry DCNL DCSP for entry in entry : DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 0 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry =
DCSP cmd = &apos; { 0 } DCSP interface DCSP { 1 } &apos; .format ( iface , iface ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP mlp = MLP ( layers = &#91; Linear ( layer _ name = &apos; h &apos; , dim = 5 , irange = 0.01 , irange = 0.01 ) &#93; ) DCNL DCSP conditional = DiagonalGaussian ( mlp = mlp , name = &apos; conditional &apos; ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP input _ space = VectorSpace ( dim = 5 ) DCNL DCSP conditional.initialize _ parameters ( input _ space = input _ space , ndim = 5 )
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ media _ set _ user _ data &apos; , None ) or _ Cfunction ( &apos; libvlc _ media _ set _ user _ data &apos; , ( ( 1 , ) , ( 1 , ) ) , None , ctypes.c _ int , Media , ctypes.c _ char _ p ) ) DCNL DCSP return f ( p _ md , p _ new _ user _ data )
DCSP modnames = loaded _ vispy _ modules ( &apos; vispy.app &apos; , 2 ) DCNL DCSP assert _ equal ( modnames , set ( ) )
DCSP if ( not isinstance ( error _ count , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP exception DCSP count &apos; ) DCNL DCSP if ( not isinstance ( error _ count , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP exception _ count DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( error _ count , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Expected DCSP an DCSP int , DCSP got DCSP { 0 } &apos; .format ( error _ count ) ) DCNL DCSP if ( not isinstance ( error _ count , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Expected DCSP an DCSP int , DCSP got DCSP { 0 } &apos; .format ( error _ count ) ) DCNL DCSP if ( not isinstance ( error _ count , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP exception DCSP count &apos; ) DCNL DCSP
DCSP save _ translations ( key )
DCSP if ( code is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP return _ find _ program _ variables ( code ) DCNL DCSP except KeyError : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP program DCSP variables : DCSP % s &apos; % code ) )
DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( G ) = = 1
DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise ValueError ( &apos; order DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not sparse.issparse ( X ) ) : DCNL DCSP DCSP raise
DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = _ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP filename = ( &apos; % s . % s &apos; % ( filename , filename ) ) DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP
DCSP klass = getattr ( classname , &apos; class &apos; , None ) DCNL DCSP if ( klass is not None ) : DCNL DCSP DCSP return klass DCNL DCSP else : DCNL DCSP DCSP return klass
DCSP if ( not isinstance ( path , six.string _ types ) ) : DCNL DCSP DCSP path = _ _ salt _ _ &#91; &apos; cp.cache _ file &apos; &#93; ( path , text , passphrase , passphrase ) DCNL DCSP return _ create _ private _ key ( path = path , text = text , passphrase = text , umask = umask , key = key , keyid = keyid , verbose = verbose )
DCSP return dict ( ( ( k , v ) for ( k , v ) in kwargs.items ( ) if ( k not in kwargs ) ) )
DCSP return IMPL.compute _ node _ get ( context , compute _ id )
DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = ssl.@@ ClientContextFactory ( ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP factory = reactor.connect@@ SSL ( url , factory , contextFactory = contextFactory , * args , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP mod = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module = import _ module ( module ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP module =
DCSP cmd = &#91; &apos; netsh &apos; , &apos; advfirewall &apos; , &apos; get &apos; , ip &#93; DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP prefix = gettempdir ( ) DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( suffix is None ) : DCNL DCSP DCSP prefix =
DCSP counter = _ Delta@@ Counter ( name , description , unit _ seconds ) DCNL DCSP manager.register ( counter ) DCNL DCSP return rate
DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP
DCSP siteconfig = SiteConfiguration.objects.get _ current ( ) DCNL DCSP if siteconfig.get ( u &apos;mail _ send _ review _ mail &apos; ) : DCNL DCSP DCSP mail _ mail ( review , user , review _ request , type , * * kwargs )
DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( ds , list )
DCSP np.random.seed ( 0 ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP pool.put ( FakeTarPartition ( 1 ) ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP pool.put ( FakeTarPartition ( 1 ) ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP pool.put ( FakeTarPartition ( 1 ) )
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP DCSP return &apos; win &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &apos; win &apos; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP for f in flowgrams : DCNL DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP for f in f : DCNL DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP for f in f : DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP fh.write ( f ) DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return conn.get _ resource _ id ( resource , name , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return None
DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not sub ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not
DCSP sequence = &#91; &#93; DCNL DCSP for line in handle : DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = handle.readline ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ( yield line )
DCSP try : DCNL DCSP DCSP return get _ format ( request , serializer , default _ format , * * kwargs ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return default _ format
DCSP if ( s is None ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ \ &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) : DCNL DCSP DCSP return s DCNL DCSP if ( s = = &apos; \ n &apos; ) :
DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( entry , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos;
DCSP result = &#91; &#93; DCNL DCSP for c in code : DCNL DCSP DCSP if ( c in code ) : DCNL DCSP DCSP DCSP result.append ( c ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out.append ( c ) DCNL DCSP return result
DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP self . \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ init _ _ ( self , match ) : DCNL DCSP DCSP DCSP return ( ( self . _ _ name _ _ + &apos; \ \ &apos; ) + self ) DCNL DCSP DCSP def _ _ init _ _ ( self , match ) : DCNL DCSP DCSP DCSP return ( &apos; \ \ &apos; + name ) DCNL DCSP DCSP def _ _ init _ _ ( self , match ) : DCNL DCSP DCSP DCSP return ( &apos; \ \ &apos; + name ) DCNL DCSP DCSP def _ _ init _ _ ( self , match ) : DCNL DCSP DCSP DCSP return ( &apos; \ \ &apos; + name ) DCNL DCSP DCSP def _ _ init _ _ ( self , match ) : DCNL DCSP DCSP DCSP return ( &apos; \ \ &apos; + name ) DCNL DCSP DCSP def _ _ init _ _ ( self ,
DCSP for ( i , label ) in enumerate ( features ) : DCNL DCSP DCSP for ( i , label ) in enumerate ( features ) : DCNL DCSP DCSP DCSP for ( i , label ) in enumerate ( features ) : DCNL DCSP DCSP DCSP DCSP for ( i , label ) in enumerate ( features &#91; i &#93; ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( i = = label ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP label = ( &apos; % s % s &apos; % ( label , label ) ) DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP label = ( &apos; % s % s &apos; % ( label , label ) ) DCNL DCSP DCSP DCSP DCSP DCSP label = ( &apos; % s % s &apos; % ( label , label ) ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP label = ( &apos; % s % s &apos; % ( label , label ) ) DCNL
DCSP ( out , err ) = run _ command ( command , * commands , * * kwargs ) DCNL DCSP if ( result is not None ) : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return result
DCSP if ( len ( first _ token ) &gt; 0 ) : DCNL DCSP DCSP first _ token = first _ token &#91; 0 &#93; DCNL DCSP DCSP if ( first _ token &#91; 0 &#93; = = &apos; &apos; ) : DCNL DCSP DCSP DCSP first _ token = last _ token &#91; 1 : &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP first _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP first _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token _ depth DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP last _ token = token
DCSP result = &#91; &#93; DCNL DCSP for i in range ( len ( pkt ) ) : DCNL DCSP DCSP if ( len ( pkt &#91; i &#93; ) &lt; len ( pkt ) ) : DCNL DCSP DCSP DCSP result.append ( i ) DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( i ) DCNL DCSP return &apos; &apos;.join ( result )
DCSP if ( time _ string is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( time _ string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( time _ string , time _ string ) )
DCSP result = &#91; &#93; DCNL DCSP for char in text : DCNL DCSP DCSP if ( char in text ) : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP return result
DCSP extension = os.path.splitext ( view ) &#91; 0 &#93; DCNL DCSP extension = os.path.splitext ( filename ) &#91; 0 &#93; DCNL DCSP extension = os.path.splitext ( filename ) &#91; 0 &#93; DCNL DCSP return os.path.splitext ( filename ) &#91; 0 &#93;
DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP value = int ( value ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP value = int ( value ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP value = float ( value ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP value = ( &apos; % s DCSP % s &apos; % ( int ( value ) , float ( value ) ) ) DCNL DCSP return t
DCSP f = open ( data _ file _ name , &apos; rb &apos; ) DCNL DCSP data = cPickle.load ( f ) DCNL DCSP f.close ( ) DCNL DCSP return data
DCSP if ( not HAS _ BOTO ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP return int ( ec2 _ ip _ address _ address ( ec2 _ ip _ address _ address ) ) DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP with open ( value , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return ( _ SOURCE _ PREFIX + ( &apos; % s &apos; % sys.version _ info &#91; : 3 &#93; ) )
DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP return float ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return &apos; &apos;
DCSP return config.is _ provider _ configured ( _ _ opts _ _ , ( _ _ active _ provider _ name _ _ or _ _ virtualname _ _ ) , ( &apos; apikey &apos; , ) )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.delete _ instance _ profile ( name ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP return _ version _ to _ version &#91; version &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP version DCSP version DCSP % r &apos; % version ) )
DCSP return get _ pymodule _ path ( modulename , * joins )
DCSP for item in sequence : DCNL DCSP DCSP if ( item is not None ) : DCNL DCSP DCSP DCSP ( yield item )
DCSP count = 0 DCNL DCSP for i in range ( ( len ( last _ token ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP count + = 1 DCNL DCSP DCSP count + = 1 DCNL DCSP return count
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( fun , fun ) , * args , * * kw ) DCNL DCSP except Exception as exc : DCNL DCSP DCSP if ( &apos; Error &apos; in err ) : DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP DCSP ret &#91; &apos; comment &apos; &#93; =
DCSP with open ( _ _ file _ _ ) as f : DCNL DCSP DCSP line = f.readline ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( not isinstance ( string , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; string DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % string ) ) DCNL DCSP if ( not isinstance ( string , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Expected DCSP a DCSP string DCSP or DCSP string , DCSP got DCSP % r &apos; % string ) ) DCNL DCSP if ( not isinstance ( string , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Expected DCSP a DCSP string DCSP or DCSP string , DCSP got DCSP % r &apos; % string ) ) DCNL DCSP if ( not isinstance ( string , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Expected DCSP a DCSP string DCSP or DCSP string , DCSP got DCSP % r &apos; % string ) ) DCNL DCSP if ( not isinstance ( string , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Expected DCSP a DCSP string DCSP
DCSP sr _ ref = session.call _ xenapi ( &apos; VDI.get _ by _ uuid &apos; , sr _ uuid ) DCNL DCSP return sr _ ref
DCSP return open ( xml _ config _ file , &apos; r &apos; ) .read ( )
DCSP return _ colorize ( text , &apos; yellow &apos; , text , opts , * * kwargs )
DCSP if context.is _ admin : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is not None ) : DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( context.owner is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP
DCSP if ( ( first is not None ) and ( second is not None ) ) : DCNL DCSP DCSP assert _ equal ( first , second ) DCNL DCSP else : DCNL DCSP DCSP assert _ equal ( first , second )
DCSP return jinja2.Markup ( list ( list ( list _ ) ) )
DCSP pdef = build _ xml ( registry , xml _ parent , data , True , &apos; hudson.model.@@ Password@@ ParameterDefinition &apos; ) DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; type &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; type &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos;
DCSP response = requests.get ( url , method = method , method = method , body = body ) DCNL DCSP if ( response.status _ code = = 200 ) : DCNL DCSP DCSP return response.read ( ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( stdin is None ) : DCNL DCSP DCSP stdin = os.getcwd ( ) DCNL DCSP try : DCNL DCSP DCSP subprocess.check _ call ( cmd , stdin = stdin , strip = strip , strip = strip ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP response = urlopen ( url ) DCNL DCSP DCSP request.raise _ for _ status ( ) DCNL DCSP except Exception : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP ret = { } DCNL DCSP cmd = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP return ret DCNL DCSP return ret
DCSP if ( not logical _ line ) : DCNL DCSP DCSP return False DCNL DCSP if isinstance ( logical _ line , basestring ) : DCNL DCSP DCSP return ( len ( logical _ line ) = = len ( logical _ line ) ) DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.isdir ( dirname )
DCSP cache _ key = ( &apos; views.decorators.cache.cache _ page . % s . % s . % s &apos; % ( key _ prefix , path.hexdigest ( ) , ctx.hexdigest ( ) ) ) DCNL DCSP return _ i18n _ cache _ key ( request , cache _ key , cache _ key )
DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( since _ tag is None ) : DCNL DCSP DCSP
DCSP if ( http _ info is None ) : DCNL DCSP DCSP http _ info = http _ info DCNL DCSP elif ( http _ info is None ) : DCNL DCSP DCSP http _ info = http _ info DCNL DCSP elif ( http _ info is None ) : DCNL DCSP DCSP http _ info = http _ info DCNL DCSP elif ( http _ info is None ) : DCNL DCSP DCSP return http _ info DCNL DCSP else : DCNL DCSP DCSP return None
DCSP x = np.asarray ( x ) DCNL DCSP if ( not ( ( x &lt; 0 ) or ( x &lt; 0 ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not ( x &gt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not ( x &gt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not ( x &gt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not ( x &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not ( x &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must
DCSP if ( values is None ) : DCNL DCSP DCSP values = &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = np.asarray ( f ) DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = np.asarray ( f ) DCNL DCSP if ( values is not None ) : DCNL DCSP DCSP if ( values is None ) : DCNL DCSP DCSP DCSP values = np.array ( values ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP values = np.array ( values ) DCNL DCSP else : DCNL DCSP DCSP values = np.array ( values ) DCNL DCSP return indices
DCSP with open ( file _ path , &apos; r &apos; ) as file _ handle : DCNL DCSP DCSP return file _ handle.read ( )
DCSP postag ( )
DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Function DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP result = &#91; &#93; DCNL DCSP for i in range ( len ( x ) ) : DCNL DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP for i in range ( len ( x ) ) : DCNL DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP x = x &#91; :
DCSP now = time.time ( ) DCNL DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP with open ( os.devnull , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP for line in f : DCNL DCSP DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP return ( ( 1 / / 2 ) + 1 ) DCNL DCSP except ValueError : DCNL DCSP DCSP return ( -1 )
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return { } DCNL DCSP locale = request.LANGUAGE _ CODE DCNL DCSP if ( locale not in locales ) : DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP locale = request.LANGUAGE _ CODE DCNL DCSP DCSP if ( locale not in locales ) : DCNL DCSP DCSP DCSP locale = settings.LANGUAGE _ CODE DCNL DCSP DCSP locale = settings.LANGUAGE _ CODE DCNL DCSP return locale
DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = &#91; newhe@@ ader for newhe@@ ader in newheaders if ( newhe@@ ader.@@ lower ( ) in vary _ headers ) &#93; DCNL DCSP else : DCNL DCSP DCSP vary _
DCSP return unencoded _ ampersands _ re.sub ( &apos; &amp; amp ; &apos; , value )
DCSP if ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP elif ( &apos; priority &apos; in request.GET ) : DCNL DCSP DCSP params &#91; &apos; priority &apos; &#93; = priority DCNL DCSP else
DCSP ( toknum , tokval ) = tok DCNL DCSP if ( toknum = = tokenize.OP ) : DCNL DCSP DCSP return ( toknum , tokval ) DCNL DCSP else : DCNL DCSP DCSP return ( toknum , tokval )
DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP socket.inet _ pton ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP break DCNL DCSP return retVal
DCSP if isinstance ( lst , list ) : DCNL DCSP DCSP return lst DCNL DCSP else : DCNL DCSP DCSP return &apos; , DCSP &apos; .join ( lst )
DCSP if isinstance ( key , list ) : DCNL DCSP DCSP return tuple ( sorted ( key , key = key ) ) DCNL DCSP elif isinstance ( key , list ) : DCNL DCSP DCSP return tuple ( sorted ( key , key = key ) ) DCNL DCSP else : DCNL DCSP DCSP return sorted ( key ( key ) )
DCSP client = _ get _ client ( profile ) DCNL DCSP return client.@@ create ( name , profile , * * kwargs )
DCSP regex = re.compile ( pattern ) DCNL DCSP pattern = re.compile ( pattern ) DCNL DCSP return re.compile ( pattern )
DCSP ( X , y ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP ( X , y ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP ( X , y ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP y = np.array ( &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
DCSP return render _ template ( product , size , method = method )
DCSP if ( not sentence ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( sentence , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( sentence , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( sentence , ( list , tuple ) ) : DCNL DCSP DCSP for ( i , v ) in enumerate ( sentence ) : DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP
DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is not None )
DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = random _ state DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = random _ state DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random
DCSP if ( segmentation _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = None DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = None DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = None DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = None DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = None DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP
DCSP return IMPL.@@ after _ all ( context )
DCSP try : DCNL DCSP DCSP return str ( a ) DCNL DCSP except ValueError : DCNL DCSP DCSP return &apos; &apos;
DCSP files = &#91; &#93; DCNL DCSP for ( root , dirs , files ) in os.walk ( pkg _ dir ) : DCNL DCSP DCSP for file in files : DCNL DCSP DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP a = &#91; &#93; DCNL DCSP for i in range ( ( k + 1 ) ) : DCNL DCSP DCSP if ( len ( a ) = = k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( w ) = = k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( w ) = = k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( i % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if context.is _ admin : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None
DCSP if ( pidfile is None ) : DCNL DCSP DCSP pidfile = os.getcwd ( ) DCNL DCSP try : DCNL DCSP DCSP os.chdir ( pidfile ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.close ( fd ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri
DCSP if ( maxiter is None ) : DCNL DCSP DCSP N = 1 DCNL DCSP else : DCNL DCSP DCSP nobs = 1 DCNL DCSP if ( N = = 1 ) : DCNL DCSP DCSP alpha = 1 DCNL DCSP else : DCNL DCSP DCSP nobs = 1 DCNL DCSP if ( N = = 1 ) : DCNL DCSP DCSP alpha = 1 DCNL DCSP else : DCNL DCSP DCSP nobs = 1 DCNL DCSP if ( N = = 1 ) : DCNL DCSP DCSP alpha = 1 DCNL DCSP else : DCNL DCSP DCSP nobs = 1 DCNL DCSP return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP global _ global _ options DCNL DCSP return _ global _ options
DCSP if ( a _ end is None ) : DCNL DCSP DCSP b _ start = 0 DCNL DCSP else : DCNL DCSP DCSP b _ end = b _ end DCNL DCSP if ( b _ end is None ) : DCNL DCSP DCSP b _ start = b _ end DCNL DCSP else : DCNL DCSP DCSP b _ end = b _ end DCNL DCSP if ( b _ end is None ) : DCNL DCSP DCSP b _ end = b _ end DCNL DCSP else : DCNL DCSP DCSP b _ end = b _ end DCNL DCSP if ( b _ start &lt; b _ end ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP type DCSP % r DCSP is DCSP % r &apos; % ( a _ start , a _ end , b _ end ) ) ) DCNL DCSP if ( b _ start &lt; b _ end ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP pointer DCSP type : DCSP % s &apos; % a _ end ) ) DCNL DCSP if ( b _ start &lt; b _ end )
DCSP cmd = &apos; { 0 } DCSP does DCSP not DCSP exist &apos; .format ( name ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP models = ( Image , ImageProperty ) DCNL DCSP for model in models : DCNL DCSP DCSP model.metadata.create _ all ( engine )
DCSP import sys DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP ( yield )
DCSP try : DCNL DCSP DCSP result = &#91; &#93; DCNL DCSP except AttributeError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = &#91; &#93;
DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP return value.encode ( &apos; utf-8 &apos; ) DCNL DCSP raise ValueError ( ( &apos; Invalid DCSP property DCSP value : DCSP % s &apos; % value ) )
DCSP if isinstance ( instr , unicode ) : DCNL DCSP DCSP return instr DCNL DCSP else : DCNL DCSP DCSP return instr
DCSP return dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( get _ order _ args ( ) ) ) )
DCSP s3.prep = ( lambda r : ( ( r.method = = &apos; options &apos; ) and ( r.representation = = &apos; s3json &apos; ) ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP return IMPL.service _ get ( context , service _ id , backend _ match _ level , * * filters )
DCSP return os.path.join ( os.path.dirname ( os.path.abspath ( _ _ file _ _ ) ) , name )
DCSP content = json.dumps ( content , content _ type = content _ type , content _ type = content _ type , content _ type = content _ type ) DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; = content DCNL DCSP content &#91; &apos; content &apos; &#93; =
DCSP if ( not args ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP
DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from
DCSP if ( not isinstance ( handle , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP coroutine &apos; % type ( handle ) . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( args ) = =
DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL
DCSP try : DCNL DCSP DCSP return unichr ( int ( text ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return text
DCSP try : DCNL DCSP DCSP st = os.lstat ( _ _ file _ _ ) DCNL DCSP except os.error : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP lexer = Lexer ( ) DCNL DCSP for lexer in lexer.@@ tokenize ( lexer ) : DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( lexer is None ) : DCNL DCSP DCSP DCSP lexer = Lexer ( ) DCNL DCSP DCSP DCSP
DCSP n = len ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( n =
DCSP if isinstance ( model _ string , six.string _ types ) : DCNL DCSP DCSP model _ string = model _ string.split ( u &apos; . &apos; ) &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP model _ string = model _ string.split ( u &apos; . &apos; ) &#91; 0 &#93; DCNL DCSP return model _ string
DCSP cmd = _ service _ cmd ( name , &apos; restart &apos; ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP os.close ( fd )
DCSP if ( len ( loop ) &lt; 1 ) : DCNL DCSP DCSP return &#91; loop &#93; DCNL DCSP loopComplex = euclidean.getComplexPath ( loop ) DCNL DCSP return euclidean.getVector3Paths ( &#91; euclidean.getLoop@@ Convex ( loopComplex ) &#93; , loop &#91; ( -1 ) &#93; .z )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP return decorator DCNL DCSP return decorator
DCSP plugin = XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ env@@ Builder &apos; ) DCNL DCSP XML.SubElement ( plugin , &apos; plugin &apos; ) .text = str ( data.get ( &apos; script-@@ type &apos; , &apos; &apos; ) ) DCNL DCSP XML.SubElement ( plugin , &apos; plugin &apos; ) .text = str ( data.get ( &apos; script-@@ type &apos; , &apos; &apos; ) )
DCSP options = { } DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP options = { } DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; = options DCNL DCSP DCSP options &#91; &apos; options &apos; &#93; =
DCSP assert ( _ tk _ type is not None ) DCNL DCSP return ( _ tk _ type = = &apos; cocoa &apos; )
DCSP if ( result is None ) : DCNL DCSP DCSP return None DCNL DCSP result = result &#91; &apos; results &apos; &#93; DCNL DCSP if result : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return result
DCSP return _ run _ cmd ( &apos; rm DCSP -rf DCSP { 0 } &apos; .format ( &apos; / etc / flocker &apos; ) , run _ as _ root = True , run _ as _ root = True )
DCSP action = action &#91; &apos; action &apos; &#93; DCNL DCSP if ( action = = &apos; action &apos; ) : DCNL DCSP DCSP action = &apos; action &apos; DCNL DCSP else : DCNL DCSP DCSP action = &apos; action &apos; DCNL DCSP return action
DCSP bin _ path = _ get _ bin _ path ( bin _ env , user = user , cwd = cwd , cwd = cwd , use _ vt = use _ vt ) DCNL DCSP if ( not os.path.exists ( bin _ path ) ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( bin _ path ) ) DCNL DCSP if ( use _ vt is not None ) : DCNL DCSP DCSP bin _ path = os.path.join ( bin _ dir , &apos; bin &apos; , &apos; freeze &apos; ) DCNL DCSP else : DCNL DCSP DCSP bin _ dir = os.getcwd ( ) DCNL DCSP bin _ path = os.path.join ( bin _ dir , &apos; bin &apos; , &apos; freeze &apos; ) DCNL DCSP if ( not os.path.exists ( bin _ path ) ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( bin _ path ) ) DCNL DCSP if ( use _ vt is not None ) : DCNL DCSP DCSP cmd.extend ( &#91; &apos;
DCSP if ( not part ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 1 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP if ( len ( part ) = = 2 ) : DCNL DCSP DCSP return ( part , None ) DCNL DCSP else : DCNL DCSP DCSP return
DCSP global _ logger@@ Class DCNL DCSP _ logger@@ Class = klass
DCSP server = _ find _ server ( cs , args.server ) DCNL DCSP server.@@ floating _ ip _ disassociate ( args.@@ floating _ ip , args.@@ floating _ ip )
DCSP DATASET _ NAME = ( &apos; dataset _ list _ dataset _ dataset _ % d &apos; % ( _ millis ( ) , ) ) DCNL DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP dataset.create ( ) DCNL DCSP for dataset in bigquery _ client.list _ datasets ( ) : DCNL DCSP DCSP ( yield dataset )
DCSP pdef = XML.SubElement ( xml _ parent , &apos; com.@@ mi@@ chel@@ in.@@ Build@@ Publisher &apos; ) DCNL DCSP XML.SubElement ( patterns , &apos; failed@@ Validation@@ Message &apos; ) .text = str ( data.get ( &apos; properties-file &apos; ) ) .lower ( ) DCNL DCSP XML.SubElement ( ownership , &apos; inject@@ Default@@ If@@ Result &apos; ) .text = str ( data.get ( &apos; properties-file &apos; ) ) .lower ( ) DCNL DCSP XML.SubElement ( ownership , &apos; inject@@ Default@@ If@@ Result &apos; ) .text = str ( data.get ( &apos; properties-file &apos; ) ) .lower ( ) DCNL DCSP XML.SubElement ( pdef , &apos; failed@@ Validation@@ Message &apos; ) .text = str ( data.get ( &apos; check-@@ build-@@ failure &apos; , False ) ) .lower ( )
DCSP result = { } DCNL DCSP for task in task _ ids : DCNL DCSP DCSP result &#91; task &#91; &apos; id &apos; &#93; &#93; = task &#91; &apos; status &apos; &#93; DCNL DCSP return result
DCSP keyhint.update _ keyhint ( &apos; normal &apos; , &apos; a &apos; ) DCNL DCSP keyhint.update _ keyhint ( &apos; normal &apos; , &apos; a &apos; ) DCNL DCSP keyhint.update _ keyhint ( &apos; normal &apos; , &apos; a &apos; ) DCNL DCSP assert ( keyhint.text ( ) = = &#91; ( &apos; a &apos; , &apos; cmd-aa &apos; ) , ( &apos; ab &apos; , &apos; cmd-ab &apos; ) &#93; )
DCSP if hasattr ( object , &apos; _ _ file _ _ &apos; ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP with open ( object , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP with open ( object , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP f = pickle.load ( f ) DCNL DCSP DCSP DCSP except IOError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP fd = pickle.load ( f ) DCNL DCSP DCSP DCSP DCSP except IOError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP DCSP fd = pickle.load ( f ) DCNL DCSP DCSP DCSP DCSP DCSP except IOError : DCNL DCSP DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP
DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return func DCNL DCSP return decorator
DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP assert ( ( Path ( &apos; scratch &apos; ) / &apos; initools &apos; ) in result.files _ created ) , str ( result )
DCSP func = function ( * args , * * dargs ) DCNL DCSP try : DCNL DCSP DCSP return function ( * args , * * dargs ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP evoked = read _ evokeds ( fname , 0 ) DCNL DCSP evoked = read _ evokeds ( fname , 0 ) DCNL DCSP evoked = read _ evokeds ( fname , &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
DCSP match = re.search ( pattern , rule ) DCNL DCSP if match : DCNL DCSP DCSP return match.group ( 1 ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP UserModel = auth.get _ user _ manager ( ) DCNL DCSP db.reset _ queries ( ) DCNL DCSP try : DCNL DCSP DCSP return UserModel . _ default _ manager.get _ by _ natural _ key ( username ) DCNL DCSP except UserModel.DoesNotExist : DCNL DCSP DCSP return None
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP parser = Parser ( ) DCNL DCSP parser = Parser ( ) DCNL DCSP parser = parser ( parser = parser ) DCNL DCSP parser.add _ argument ( &apos; --list &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; ) DCNL DCSP return parser
DCSP return dict ( ( ( k , v ) for ( k , v ) in G.degree ( ) ) )
DCSP if ( not raw ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP address DCSP address &apos; ) DCNL DCSP if ( not raw ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP address DCSP address &apos; ) DCNL DCSP if ( not raw ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP address DCSP address &apos; ) DCNL DCSP try : DCNL DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP raise DCNL DCSP try : DCNL DCSP DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP raise DCNL DCSP return r
DCSP try : DCNL DCSP DCSP result = f ( * args , * * kwargs ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.args &#91; 0 &#93; = = &apos; Error &apos; ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = f ( * args , * * kwargs ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP res = f ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result = f ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result = f ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result = f ( * args , * * kwargs ) DCNL DCSP return result
DCSP if ( start is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _ rule = None DCNL DCSP if ( end is None ) : DCNL DCSP DCSP start _
DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = None DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = None DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if ( extra _ data is None ) : DCNL DCSP DCSP extra _ data = { } DCNL DCSP if
DCSP try : DCNL DCSP DCSP return proc.@@ time ( ) DCNL DCSP except ( psutil.NoSuchProcess , psutil.AccessDenied ) : DCNL DCSP DCSP return None
DCSP result = run ( ) DCNL DCSP for line in out.split ( &apos; \ n &apos; ) : DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP
DCSP disk _ bus = get _ disk _ bus _ for _ disk _ type ( virt _ type , image _ meta , device _ type ) DCNL DCSP return disk _ bus
DCSP if proxy : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; napalm.call &apos; &#93; ( &apos; version _ list &apos; , proxy = proxy ) DCNL DCSP else : DCNL DCSP DCSP return { }
DCSP vif _ ref = _ virtual _ interface _ query ( context ) .filter _ by ( uuid = vif _ uuid ) .first ( ) DCNL DCSP return vif _ ref
DCSP if isinstance ( coro , types.GeneratorType ) : DCNL DCSP DCSP return coro DCNL DCSP else : DCNL DCSP DCSP return coro
DCSP t = nikola.utils.slugify ( u &apos;@@ hello-world &apos; , lang = u &apos;en &apos; ) DCNL DCSP assert ( o = = u &apos;@@ hello-world &apos; ) DCNL DCSP assert ( o = = u &apos;@@ hello-world &apos; )
DCSP try : DCNL DCSP DCSP return issubclass ( obj , interface ) DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP runner = Runner ( feature _ name ( &apos; features &apos; ) ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass
DCSP if ( key is None ) : DCNL DCSP DCSP scheme = None DCNL DCSP else : DCNL DCSP DCSP scheme = None DCNL DCSP if ( key is not None ) : DCNL DCSP DCSP if ( key is not None ) : DCNL DCSP DCSP DCSP if ( key is not None ) : DCNL DCSP DCSP DCSP DCSP if ( key is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( key is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( key is None
DCSP kwargs = { } DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos; kwargs &apos; &#93; = kwargs DCNL DCSP kwargs &#91; &apos;
DCSP if ( resp _ timeout is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP headers = { } DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp.read ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp.read ( ) DCNL
DCSP for i in range ( ( len ( z ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP return i DCNL DCSP return 0
DCSP sid = get _ sid _ from _ sid ( principal ) DCNL DCSP return win32security.ConvertSidToStringSid ( sid )
DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( User , user = user , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( Document , object = object , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( Document , object = object , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( Document , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( Document , object = object , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object = get _ object _ or _ 404 ( Document , object = object , object = object ) DCNL DCSP if ( object is None ) : DCNL DCSP DCSP object
DCSP if ( old = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return ( old - new )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( request , * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapped DCNL DCSP return decorator
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP print ( &apos
DCSP if ( not isinstance ( params , list ) ) : DCNL DCSP DCSP params = { } DCNL DCSP params = { } DCNL DCSP for ( key , value ) in params.items ( ) : DCNL DCSP DCSP if ( key in params ) : DCNL DCSP DCSP DCSP params &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP params &#91; key &#93; = value DCNL DCSP return params
DCSP def wrapper ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return wrapper
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return HttpResponseRedirect ( &apos; / &apos; ) DCNL DCSP else : DCNL DCSP DCSP return render _ to _ response ( &apos; projects / asset _ update &apos; , { &apos; id &apos; : user } , context _ instance = RequestContext ( request ) , response _ format = &apos; application / json &apos; )
DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Expected DCSP
DCSP return { &apos; result &apos; : ( &apos; inclusion _ two _ params DCSP - DCSP Expected DCSP result : DCSP % s , DCSP % s &apos; % ( one , two ) ) }
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP return call _ command ( name , * args , * * options )
DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP milestones _ api.add _ course _ milestone ( course _ key , prereq _ content _ key , &apos; fulfills &apos; )
DCSP compute _ api _ class = importutils.import _ class ( compute _ api _ class _ name ( * args , * * kwargs ) ) DCNL DCSP return importutils.import _ object ( compute _ api _ class , * args , * * kwargs )
DCSP result = script.pip ( &apos; install &apos; , script _ path , cwd = cwd , context = context ) DCNL DCSP if ( not result ) : DCNL DCSP DCSP raise Exception ( ( &apos; Unable DCSP to DCSP run DCSP script DCSP % s &apos; % script _ path ) ) DCNL DCSP with open ( script _ path , &apos; w &apos; ) as script _ file : DCNL DCSP DCSP with open ( script _ path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP os.unlink ( script _ path ) DCNL DCSP DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP ret = &#91; &#93; DCNL DCSP for ip in addresses : DCNL DCSP DCSP if ( not addr.@@ startswith ( &apos; 127 . &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP addr = socket.inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not addr.@@ startswith ( &apos; 127 . &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP addr = socket.inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP addr = socket.inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP addr = socket.inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP DCSP except socket.error : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not addr.@@ startswith ( &apos; 127 . &apos; ) ) : DCNL DCSP
DCSP return tf.reduce _ sum ( x )
DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return
DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP fp = open ( &apos; / etc / init.d / &apos; , &apos; w &apos; ) DCNL DCSP DCSP except IOError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP except Exception : DCNL DCSP DCSP pass
DCSP if ( not HAS _ BOTO ) : DCNL DCSP DCSP return ( False , &apos; The DCSP boto _ cloudwatch DCSP module DCSP could DCSP not DCSP be DCSP loaded : DCSP boto DCSP libraries DCSP not DCSP found &apos; ) DCNL DCSP return True
DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) :
DCSP if ( n is None ) : DCNL DCSP DCSP n = len ( items ) DCNL DCSP if ( n is None ) : DCNL DCSP DCSP n = len ( items ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return query
DCSP nodelist = parser.parse ( ( &apos; endcache &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP nodelist = parser.parse ( ( &apos; endcache &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP tokens = token.contents.split ( ) DCNL DCSP if ( len ( tokens ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP requires DCSP exactly DCSP one DCSP argument &quot; % tokens &#91; 0 &#93; ) ) DCNL DCSP return CacheNode ( nodelist , tokens &#91; 1 : &#93; , tokens &#91; 1 : &#93; )
DCSP if ( not entity _ id ) : DCNL DCSP DCSP entity _ id = entity _ id ( ) DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( not entity _ id ) : DCNL DCSP DCSP return DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id =
DCSP try : DCNL DCSP DCSP return _ distro.@@ version _ version ( ) DCNL DCSP except ValueError : DCNL DCSP DCSP return &apos; unknown&apos;
DCSP rpc = blobstore.create _ rpc ( * * options ) DCNL DCSP ( yield blobstore.@@ async _ data _ async ( blob , start _ index , end _ index , * * options ) )
DCSP ( x , y ) = csd ( x , y , fs , window , NFFT , Fs , detrend , window , noverlap , noverlap , noverlap , noverlap , noverlap , noverlap , sides , dtype , dtype ) DCNL DCSP ( Pxy , Y ) = csd ( x , y , fs , window , NFFT , Fs , detrend , window , noverlap , noverlap , noverlap , ( -1 ) , ddof = 1 ) DCNL DCSP ( Pxy , Y ) = csd ( x , y , fs , window , NFFT , Fs , detrend , window , noverlap , noverlap , noverlap , noverlap , ( -1 ) , axis = 0 ) DCNL DCSP ( Pxy , Y ) = csd ( x , y , fs , window , NFFT , Fs , detrend , window , noverlap , noverlap , noverlap , ( -1 ) , ddof = 1 ) DCNL DCSP ( Pxy , Y ) = csd ( x , y , fs , window , NFFT , Fs , detrend , window , noverlap , noverlap , noverlap , noverlap , noverlap
DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env =
DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP scroll _ page _ up ( event.cli , event.cli.current _ buffer _ id ) DCNL DCSP if ( not event.@@ is _ displayed ( ) ) : DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL DCSP DCSP b.cursor _ position + = 1 DCNL
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text.strip ( ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return &apos; issue &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP faces = &#91; &#93; DCNL DCSP for rowIndex in xrange ( len ( vertexes ) ) : DCNL DCSP DCSP for pointIndex in xrange ( len ( vertexes ) ) : DCNL DCSP DCSP DCSP for pointIndex in xrange ( len ( indexed@@ Row ) ) : DCNL DCSP DCSP DCSP DCSP indexed@@ Row = &#91; &#93; DCNL DCSP DCSP DCSP DCSP indexed@@ Row = &#91; &#93; DCNL DCSP DCSP DCSP DCSP indexed@@ Row = &#91; &#93; DCNL DCSP DCSP DCSP DCSP indexed@@ Row = &#91; &#93; DCNL DCSP DCSP DCSP DCSP indexed@@ Loops.append ( vector3index ) DCNL DCSP DCSP DCSP DCSP indexed@@ Loops.append ( vector3index ) DCNL DCSP DCSP DCSP DCSP indexed@@ Loops.append ( vector3index ) DCNL DCSP DCSP DCSP DCSP indexed@@ Loops.append ( vector3index ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP indexed@@ Loops.append ( vector3index ) DCNL DCSP return indexed@@ Row
DCSP if ( not user _ is _ valid _ password ( user , password ) ) : DCNL DCSP DCSP raise ValidationError ( ( _ ( &apos; Invalid DCSP password DCSP for DCSP password DCSP % s &apos; ) % password ) ) DCNL DCSP return _ validate _ password ( user , password )
DCSP if ( status _ int is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( status _ int = = 200 ) : DCNL DCSP DCSP return False DCNL DCSP if ( status _ int = = 200 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP def _ _ call _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return obj . _ _ name _ _ DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return obj
DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( config is None ) :
DCSP if isinstance ( f , Deferred ) : DCNL DCSP DCSP result = f ( * args , * * kw ) DCNL DCSP else : DCNL DCSP DCSP result = f ( * args , * * kw ) DCNL DCSP return result
DCSP settings.add@@ PluginsParent@@ ToMenu ( skeinforge _ analyz@@ e.get@@ PluginsDirectoryPath ( ) , menu , window )
DCSP @ functools.wraps ( test ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP return test ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( proxy is None ) : DCNL DCSP DCSP proxy = { } DCNL DCSP if ( proxy is None ) : DCNL DCSP DCSP proxy = { } DCNL DCSP if ( proxy is None ) : DCNL DCSP DCSP proxy = { } DCNL DCSP if ( proxy is None ) : DCNL DCSP DCSP proxy = { } DCNL DCSP ret = LazyLoader ( _ module _ dirs ( opts , &apos; grains &apos; ) , opts ) DCNL DCSP ret.pack &#91; &apos; _ _ salt _ _ &apos; &#93; = ret DCNL DCSP return ret
DCSP response = _ client _ wrapper ( &apos; inspect _ container &apos; , container , network _ id ) DCNL DCSP _ clear _ context ( ) DCNL DCSP return response
DCSP if ( key in listDictionary ) : DCNL DCSP DCSP listDictionary &#91; key &#93; .append ( elementList ) DCNL DCSP else : DCNL DCSP DCSP listDictionary &#91; key &#93; = elementList
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with
DCSP DEBUG _ MSG ( ( &apos; Welcome DCSP to DCSP % s &apos; % request.LANGUAGE _ CODE ) )
DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP auth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL DCSP if ( oauth _ parameters is None ) : DCNL DCSP DCSP oauth _ parameters = { } DCNL
DCSP return ( &apos; boto _ datapipeline &apos; if ( &apos; boto _ asg.@@ exists &apos; in _ _ salt _ _ ) else False )
DCSP return fitness _ and _ quality _ parsed ( mime _ type , parsed _ ranges ) &#91; 0 &#93;
DCSP if isinstance ( s , bytes ) : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP ratio = &apos; auto &apos; DCNL DCSP ee = EasyEnsemble ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ equal ( ee.@@ random _ state , RND _ SEED )
DCSP if ( not version ) : DCNL DCSP DCSP return DCNL DCSP bump _ version ( _ get _ candidate _ version ( version ) )
DCSP git = subprocess.Popen ( &#91; &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; rev-parse &apos; , &apos; --always &apos; &#93; , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL
DCSP ncr = NeighbourhoodCleaningRule ( random _ state = RND _ SEED ) DCNL DCSP ncr.fit ( X , Y ) DCNL DCSP assert _ raises ( ValueError , ncr.fit _ sample , X , Y )
DCSP state = _ get _ state ( ) DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( state , state ) , python _ shell = False ) DCNL DCSP else : DCNL DCSP DCSP raise CommandExecutionError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( pattern ) ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP upgrading DCSP packages &apos; , status = status ) DCNL DCSP return ret
DCSP cache = { } DCNL DCSP for ( k , v ) in six.iteritems ( desired ) : DCNL DCSP DCSP if ( k not in desired ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in desired ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( k not in desired ) and ( k not in desired ) ) : DCNL DCSP DCSP DCSP
DCSP cache@@ DB = db.DBConnection ( &apos; cache.db &apos; ) DCNL DCSP cache@@ DB = db.DBConnection ( &apos; cache.db &apos; ) DCNL DCSP cache@@ DB.@@ clear ( )
DCSP try : DCNL DCSP DCSP os.stat ( srv ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return True
DCSP if ( i is None ) : DCNL DCSP DCSP return default DCNL DCSP if ( i = = 0 ) : DCNL DCSP DCSP return default DCNL DCSP elif ( i = = 0 ) : DCNL DCSP DCSP return default DCNL DCSP else : DCNL DCSP DCSP return default
DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not value ) : DCNL DCSP DCSP return &apos;
DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for surroundingLoop in surroundingLoops : DCNL
DCSP def _ decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapped ( * args , * * kwds ) : DCNL DCSP DCSP DCSP if ( not hasattr ( caller , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwds ) DCNL DCSP DCSP DCSP return func ( * args , * * kwds ) DCNL DCSP DCSP return wrapped DCNL DCSP return decorator
DCSP exploration _ summary = get _ exploration _ summary ( exploration _ id , contributor _ id _ to _ add ) DCNL DCSP exploration _ summary = exp _ services.get _ exploration _ summary _ by _ id ( exploration _ id ) DCNL DCSP if ( exploration _ summary is None ) : DCNL DCSP DCSP return DCNL DCSP update _ exploration _ summary ( exploration _ id , contributor _ id _ to _ add )
DCSP headers = dict ( ( ( k , v ) for ( k , v ) in data.items ( ) if ( k.lower ( ) = = k.lower ( ) ) ) ) DCNL DCSP headers = dict ( ( ( k , v ) for ( k , v ) in data.items ( ) if ( k.lower ( ) = = k.lower ( ) ) ) ) DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application / x-www-form-urlencoded &apos; } DCNL DCSP headers = { &apos; Content-Type &apos; : &apos; application
DCSP try : DCNL DCSP DCSP mContext = autoclass ( &apos; android.content.Context &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP telephonyManager = cast ( &apos; android.telephony.TelephonyManager &apos; , pythonActivity.mService.getSystemService ( mContext.TELEPHONY _ SERVICE ) ) DCNL DCSP DCSP request.raise _ for _ status ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP return None
DCSP return &apos; { } / { } &apos; .format ( settings.STATIC _ URL , module . _ _ name _ _ )
DCSP session = ( session or get _ session ( ) ) DCNL DCSP return metadef _ api.create ( context , namespace _ name , values , session )
DCSP out = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP if ( val is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( val is not None ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP if ( len ( argv ) = = 1 ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( argv ) &gt; 1 ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( argv ) &gt; 1 ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( argv ) &gt; 1 ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( argv ) &gt; 1 ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP args = parser.parse _ args ( argv )
DCSP canvas = FigureCanvas@@ GTK ( figure ) DCNL DCSP manager = FigureManager@@ Mac ( canvas , num ) DCNL DCSP return manager
DCSP out = np.empty ( ( len ( shape ) , 2 ) , dtype = np.float64 ) DCNL DCSP for i in range ( 0 , len ( shape ) ) : DCNL DCSP DCSP selem &#91; ( i , i ) &#93; = selem &#91; i &#93; DCNL DCSP return selem
DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : True } } DCNL DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : True } } DCNL DCSP monkeypatch.setattr ( &apos; qutebrowser.@@ mainwindow.@@ mark-manager &apos; , stub _ stub ) DCNL DCSP ( yield stub ) DCNL DCSP objreg.delete ( &apos; key-config &apos; )
DCSP input _ tuples = &#91; &#93; DCNL DCSP for input _ string in binary _ tuples : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP decoded _ value = input _ tuple &#91; 0 &#93; DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP decoded _ value = input _ tuple &#91; 0 &#93; DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return decoded _ value
DCSP count = 0 DCNL DCSP while True : DCNL DCSP DCSP count = 0 DCNL DCSP DCSP while True : DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP return count
DCSP try : DCNL DCSP DCSP shutil.rmtree ( dirname ) DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( exc.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if ( data _ index is None ) : DCNL DCSP DCSP data _ index = 0 DCNL DCSP if ( ( batch _ size is None ) or ( batch _ size is None ) ) : DCNL DCSP DCSP data _ index = 0 DCNL DCSP else : DCNL DCSP DCSP batch _ size = 0 DCNL DCSP DCSP for i in range ( 0 , ( batch _ size - 1 ) ) : DCNL DCSP DCSP DCSP for i in range ( num _ steps ) : DCNL DCSP DCSP DCSP DCSP for i in range ( num _ steps ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP
DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = 0 DCNL DCSP elif ( order = = &apos; sort &apos; ) : DCNL DCSP DCSP order = ( order + 1 ) DCNL DCSP elif ( order = = &apos; sort &apos; ) : DCNL DCSP DCSP order = order DCNL DCSP elif ( order = = &apos; sort &apos; ) : DCNL DCSP DCSP order = order DCNL DCSP else : DCNL DCSP DCSP order
DCSP IMPL.aggregate _ metadata _ add ( context , aggregate _ id , metadata , set _ delete )
DCSP sys.stdout.write ( &apos; \ n &apos; ) DCNL DCSP sys.stdout.flush ( )
DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = SVGDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( elementNode ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = SVGDerivation ( elementNode ) DCNL DCSP return lineation.getGeometryOutputByLoop ( elementNode , lineation.SideLoop ( shaftPath ) )
DCSP if ( not isinstance ( dataset , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP try : DCNL DCSP DCSP if ( not isinstance ( data , six.string _ types ) ) : DCNL DCSP DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP except KeyError : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP try : DCNL DCSP DCSP if ( not isinstance ( data , six.string _ types ) ) : DCNL DCSP DCSP DCSP raise SaltInvocationError ( &apos;
DCSP result = &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for ( key , value ) in zip ( items , right ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP figManager = Gcf.get _ active ( ) DCNL DCSP if ( figManager is not None ) : DCNL DCSP DCSP figManager = Gcf.get _ active ( ) DCNL DCSP DCSP if ( figManager is not None ) : DCNL DCSP DCSP DCSP figManager.canvas.draw ( )
DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is None ) : DCNL DCSP DCSP lang = None DCNL DCSP if ( lang is
DCSP client = _ get _ client ( user = user , host = host , port = port , maintenance _ db = maintenance _ db , host = host , port = port , maintenance _ db = maintenance _ db , user = user , host = host , port = port , runas = runas ) DCNL DCSP try : DCNL DCSP DCSP ret = client.create _ user ( name = name , object _ name = object _ name , object _ type = object _ type , runas = runas , host = host , port = port , maintenance _ db = maintenance _ db , user = user , password = password , runas = runas ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.critical ( &apos; Failed DCSP to DCSP remove DCSP { 0 } : DCSP { 1 } &apos; .format ( name , e ) ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP dist = dist . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( dist is not None ) : DCNL DCSP DCSP dist = dist . _ _ class _ _ . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP dist = dist DCNL DCSP return dist
DCSP with open ( fileobj , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP run ( ( &apos; % s DCSP % s &apos; % ( sys.argv &#91; 0 &#93; , sys.argv &#91; 1 &#93; ) ) )
DCSP if ( not style _ dir ) : DCNL DCSP DCSP return DCNL DCSP for name in style _ dir : DCNL DCSP DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ( yield ( name , filename ) )
DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP try : DCNL DCSP DCSP with open ( path _ or _ file , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP with open ( path _ or _ file , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( f.read ( ) ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP f.close ( )
DCSP if cond : DCNL DCSP DCSP return a DCNL DCSP return a
DCSP if ( port _ name in &#91; &apos; trunk &apos; , &apos; trunk &apos; &#93; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP warnings.warn ( ( &apos; Call DCSP to DCSP deprecated DCSP function DCSP % s . &apos; % func . _ _ name _ _ ) , DeprecationWarning , stacklevel = 2 ) DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return func DCNL DCSP return decorator
DCSP return call _ talib _ with _ ohlc ( barDs , count , talib.CDL@@ FILE _ TIME )
DCSP if ( theta is None ) : DCNL DCSP DCSP theta = np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; , dtype = float ) DCNL DCSP else : DCNL
DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP if ( verbose is None ) : DCNL DCSP DCSP verbose = False DCNL DCSP else : DCNL DCSP
DCSP schema = vol.Schema ( cv.@@ event _ schema ) DCNL DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP schema ( &apos; value &apos; )
DCSP if ( not HAS _ NETADDR ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; ifconfig &apos; ) DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP return _ compile ( pattern , flags , kwargs ) .findall ( string , pos , pos , endpos , concurrent , partial )
DCSP jobs = _ get _ jobs ( opts ) DCNL DCSP if ( jobs is None ) : DCNL DCSP DCSP jobs = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP jobs = &#91; &#93; DCNL DCSP for job in jobs : DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not job ) : DCNL DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( output is None ) : DCNL DCSP DCSP output = input _ dict DCNL DCSP if full _ document : DCNL DCSP DCSP for ( key , value ) in input _ dict.items ( ) : DCNL DCSP DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP DCSP value = unicode ( value , encoding , full _ document , * * kwargs ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP value = unicode ( value , encoding , full _ document , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = unicode ( value , encoding , full _ document , * * kwargs ) DCNL DCSP return value
DCSP if ( alias is None ) : DCNL DCSP DCSP connection = get _ connection ( ) DCNL DCSP try : DCNL DCSP DCSP connection = connections &#91; alias &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP connection = connections &#91; alias &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP connection = connections &#91; alias &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None DCNL DCSP connection = connections &#91; alias &#93; DCNL DCSP return connection
DCSP if ( index = = 0 ) : DCNL DCSP DCSP index = 0 DCNL DCSP elif ( index = = 0 ) : DCNL DCSP DCSP index = 0 DCNL DCSP elif ( index = = 0 ) : DCNL DCSP DCSP index = 0 DCNL DCSP else : DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP index = 0 DCNL DCSP DCSP for index in range ( index ) : DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP DCSP index + = 1 DCNL DCSP DCSP
DCSP if ( ignore is None ) : DCNL DCSP DCSP ignore = &apos; &apos; DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = &apos; &apos; DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = &apos; &apos; DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = &apos; &apos; DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = False DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP if ( ignore and ( not ignore ) ) : DCNL DCSP DCSP ignore = True DCNL DCSP
DCSP if ( check is None ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; The DCSP specified DCSP module DCSP has DCSP been DCSP removed . &apos; ) DCNL DCSP if ( ( not check ) or ( not check ) ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; The DCSP specified DCSP module DCSP has DCSP been DCSP removed . &apos; ) DCNL DCSP if ( module.params &#91; &apos; status &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; The DCSP specified DCSP module DCSP has DCSP been DCSP removed . &apos; ) DCNL DCSP if ( module.params &#91; &apos; status &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; The DCSP specified DCSP module DCSP has DCSP been DCSP removed . &apos; ) DCNL DCSP if ( module.params &#91; &apos; status &apos; &#93; = = &apos; true &apos; ) : DCNL DCSP DCSP module.fail _ json ( msg = &apos; The DCSP specified DCSP module DCSP has DCSP been DCSP removed &apos; ) DCNL DCSP if ( module.params &#91; &apos;
DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( controller is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not
DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP return ( &apos; % s : DCSP % s &apos; % ( type ( value ) , str ( value ) ) )
DCSP for module in functions : DCNL DCSP DCSP if ( mod not in sys.modules ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if ( mod is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP mod = mod . _ _ module _ _ DCNL DCSP DCSP if
DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( line = = &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP
DCSP if ( not s ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % s ) ) DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % s ) ) DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % s ) ) DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a
DCSP return dict ( ( ( x , x ) for ( x , y ) in dictionary.items ( ) ) )
DCSP ( func _ func , func _ func ) = _ get _ score _ func ( score _ func ) DCNL DCSP if ( ( score _ func is not None ) and ( score _ func is not None ) ) : DCNL DCSP DCSP return score _ func ( score _ func , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return func ( score _ func , * * kwargs )
DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP if ( not context
DCSP return collections.OrderedDict ( &#91; ( &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in dictionary.items ( ) &#93; )
DCSP return Response ( &apos; sup@@ ressed &apos; )
DCSP if ( len ( str ) = = 1 ) : DCNL DCSP DCSP return str DCNL DCSP if ( len ( str ) = = 1 ) : DCNL DCSP DCSP return str &#91; 1 : ( -1 ) &#93; DCNL DCSP if ( len ( str ) = = 2 ) : DCNL DCSP DCSP return ( str &#91; 1 : ( -1 ) &#93; , str &#91; 1 : &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( str , str ( str ) )
DCSP if ( style _ dir is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( style _ dir is None ) : DCNL DCSP DCSP style _ dir = os.path.dirname ( style _ dir ) DCNL DCSP return os.path.join ( style _ dir , style _ dir )
DCSP numberOfBezierPoints = int ( numberOfBezierPoints ) DCNL DCSP if ( numberOfBezierPoints = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP endMinusBegin = ( end - begin ) DCNL DCSP if ( numberOfBezierPoints = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP endMinusBegin = ( end - begin ) DCNL DCSP if ( numberOfBezierPoints = = 0 ) : DCNL DCSP DCSP return 0.0 DCNL DCSP endMinusBegin = ( end - begin ) DCNL DCSP end = ( end - begin ) DCNL DCSP return ( begin + begin )
DCSP if ( framework _ name is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return render _ to _ string ( &apos; index.html &apos; , { &apos; platform _ name &apos; : platform _ name } , context _ instance = RequestContext ( request ) )
DCSP str = re.sub ( &apos; --- &apos; , smartchars.@@ em@@ dash , str ) DCNL DCSP str = re.sub ( &apos; -- &apos; , smartchars.@@ em@@ dash , str ) DCNL DCSP return str
DCSP try : DCNL DCSP DCSP return pd.Timestamp ( args &#91; 0 &#93; ) .decode ( &apos; utf-8 &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP parameters = dict ( ( ( k , v ) for ( k , v ) in dictionary.items ( ) ) ) DCNL DCSP return dict ( ( ( k , v ) for ( k , v ) in dictionary.items ( ) if ( v is not None ) ) )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP if ( cols is None ) : DCNL DCSP DCSP cols = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP cols = &#91; &#93; DCNL DCSP DCSP for col in cols : DCNL DCSP DCSP DCSP if ( len ( col ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP col = col &#91; 1 &#93; DCNL DCSP DCSP DCSP
DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL DCSP if ( action _ name is None ) : DCNL DCSP DCSP action _ name = &apos; &apos; DCNL
DCSP url = &apos; https : / / www.google.com / &apos; DCNL DCSP eq _ ( html , html )
DCSP return ( &apos; % s _ % s &apos; % ( string _ to _ sign , string _ to _ sign ) )
DCSP squareValues = &#91; &#93; DCNL DCSP for pointIndex in xrange ( ( len ( splitLine ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP stepKey = getStepKey ( pointIndex , point ) DCNL DCSP DCSP if ( stepKey in pixelDictionary ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP request = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; status &apos; : status } ) DCNL DCSP return render _ to _ response ( &apos; sales / tags _ all _ event &apos; , { &apos; filters &apos; : filters } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP table = ascii.get _ reader ( Reader = ascii.RST ) DCNL DCSP dat = reader.read ( table ) DCNL DCSP assert _ equal ( dat.colnames , &#91; &apos; Col1 &apos; , &apos; Col2 &apos; &#93; ) DCNL DCSP assert _ equal ( dat &#91; 0 &#93; &#91; 1 &#93; , &apos; \ n &apos; )
DCSP try : DCNL DCSP DCSP return open ( fname , &apos; rb &apos; ) .read ( ) DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( t is None ) : DCNL DCSP DCSP return DCNL DCSP if ( m is None ) : DCNL DCSP DCSP return DCNL DCSP if ( m is not None ) : DCNL DCSP DCSP if ( m is not None ) : DCNL DCSP DCSP DCSP if ( m is not None ) : DCNL DCSP DCSP DCSP DCSP t = ( u &apos; % s DCSP ( % s ) &apos; % ( t , t ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP t = ( u &apos; % s : % s &apos; % ( t , t ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP f = ( u &apos; % s : % s &apos; % ( t , t ) ) DCNL DCSP else : DCNL DCSP DCSP f = ( u &apos; % s . % s &apos; % ( t , t ) ) DCNL DCSP if ( not w ) : DCNL DCSP DCSP return DCNL DCSP if ( m is not None ) : DCNL DCSP DCSP if ( m is not None ) : DCNL DCSP DCSP
DCSP if ( not isinstance ( input , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( input , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( sample is None ) : DCNL DCSP DCSP sample = np.asarray ( input ) DCNL DCSP if ( not isinstance ( input , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample is None ) : DCNL DCSP DCSP sample = np.asarray ( input ) DCNL DCSP if ( not isinstance ( input , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample is None ) : DCNL DCSP DCSP sample = np.asarray ( input ) DCNL DCSP if ( not isinstance ( input , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError (
DCSP if ( not user ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not os.path.exists ( user ) ) : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP try : DCNL DCSP DCSP os.system ( &apos; rm DCSP -rf DCSP { 0 } &apos; .format ( user ) ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP data = { } DCNL DCSP for name in names : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( f.read ( ) ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP f.close ( )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP user = get _ object _ or _ 404 ( translation , request = request , user _ id = user _ id , last _ unit _ url = new _ unit _ url , max _ unit _ url = last _ unit _ url ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP translation = get _ object _ or _ 404 ( translation , user = user , user _ id = user _ id , user _ id = user _ id , last _ unit _ url = new _ unit _ url ) DCNL DCSP except Exception as e : DCNL DCSP DCSP raise Http404 ( ( &apos; Invalid DCSP translation DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP return True
DCSP return IMPL.group _ type _ get _ by _ name ( context , name )
DCSP if ( not project ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP req = requests.get ( ( &apos; https : / / api.github.com / repos / { 0 } &apos; .format ( project ) ) ) DCNL DCSP if ( not req ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP return &#91; ( &apos; % s : % s &apos; % ( x &#91; 0 &#93; , x &#91; 1 &#93; ) ) for x in matches &#93;
DCSP return get _ client ( host , port = port , timeout = timeout , use _ ssl = use _ ssl , username = username , password = password , tenant _ token = auth _ token , auth _ token = auth _ token , region = region )
DCSP out = { } DCNL DCSP for item in _ iter _ item _ types ( ) : DCNL DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP val = load ( item ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP
DCSP result = &#91; &#93; DCNL DCSP for ( key , value ) in options.items ( ) : DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP result.append ( ( &apos; % s = % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( ( &apos; % s = % s &apos; % ( key , value ) ) ) DCNL DCSP return result
DCSP return HttpResponse ( &apos; Hello DCSP world &apos; )
DCSP s3.prep = ( lambda r : ( r.method = = &apos; options &apos; ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP for field in args : DCNL DCSP DCSP if ( field in field ) : DCNL DCSP DCSP DCSP return field DCNL DCSP return None
DCSP try : DCNL DCSP DCSP os.makedirs ( folder ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP _ add _ floating _ ip ( floating _ ip , device )
DCSP chart = Chart ( interpolate = &apos; cubic &apos; ) DCNL DCSP chart = make _ data ( chart , datas ) DCNL DCSP assert chart.render ( )
DCSP return frappe.get _ doc ( doctype , old , new , force = force , merge = merge , ignore _ permissions = ignore _ permissions )
DCSP bigip _ session = _ build _ session ( username ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.post ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / transaction / { label } &apos; .format ( label = label ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP return _ load _ connection _ error ( hostname , e ) DCNL DCSP return _ load _ response ( response )
DCSP ( stdout , stderr ) = p.communicate ( ) DCNL DCSP if stderr : DCNL DCSP DCSP err _ msg = ( &apos; % s : DCSP % s &apos; % ( stdout , stderr ) ) DCNL DCSP else : DCNL DCSP DCSP err _ msg = ( &apos; % s : DCSP % s &apos; % ( stdout , stderr ) ) DCNL DCSP if err _ status : DCNL DCSP DCSP err _ msg = ( &apos; % s : DCSP % s &apos; % ( stdout , stderr ) ) DCNL DCSP if err _ status : DCNL DCSP DCSP err _ msg = ( &apos; % s : DCSP % s &apos; % ( stdout , stderr ) ) DCNL DCSP return ( stdout , stderr )
DCSP if isinstance ( node.op , T.Elemwise ) : DCNL DCSP DCSP x = node.inputs &#91; 0 &#93; DCNL DCSP DCSP if ( isinstance ( node.op , T.Elemwise ) and ( not isinstance ( x.owner.op , T.Elemwise ) ) ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if isinstance ( node.op , T.Elemwise ) : DCNL DCSP DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93;
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP return FirstOfNode ( &#91; parser.compile _ filter ( bit ) for bit in bits &#93; )
DCSP return node _ info ( ) &#91; &apos; free _ cpus &apos; &#93;
DCSP if ( &apos; npm &apos; in arg ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return list ( ( _ list _ interface _ ip ( ip _ desc ) for ip in retries _ desc ) )
DCSP client = _ get _ client ( profile ) DCNL DCSP ret = client.get ( path ) DCNL DCSP return ret
DCSP return ( os.environ.get ( &apos; SERVER _ SOFTWARE &apos; , &apos; &apos; ) = = &apos; Development / &apos; )
DCSP dipoles = read _ dipole ( dip _ fname ) DCNL DCSP dipoles = read _ dipole ( dip _ fname ) DCNL DCSP assert _ raises ( ValueError , dipo@@ le@@ s.@@ sample , X , Y )
DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( g ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.update _ quotas ( tenant _ id = tenant _ id , subnet _ id = tenant _ id , subnet = subnet , router = router , port = port , security _ group = security _ group , security _ group _ rule = security _ group _ rule )
DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP if ( request.method = = &apos; GET &apos; )
DCSP config _ stub.data = { &apos; storage &apos; : { &apos; cache-size &apos; : 1024 } , &apos; general &apos; : { &apos; private-browsing &apos; : True } } DCNL DCSP disk _ cache = cache.DiskCache ( str ( tmpdir ) ) DCNL DCSP assert ( disk _ cache.cacheSize ( ) = = 0 )
DCSP ( stdoutData , stderrData ) = args DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93; DCNL DCSP stdoutData = stderrData &#91; 0 &#93;
DCSP return list ( map ( int , s.split ( &apos; , &apos; ) ) )
DCSP try : DCNL DCSP DCSP os.makedirs ( path _ path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( image _ id is not None ) : DCNL DCSP DCSP if ( image _ id = = image _ id ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( image _ id = = image _ id ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( image _ id = = image _ id ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( image _ id = = image _ id ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return ( &apos; % s- % s &apos; % ( name , size , file _ extension ) )
DCSP userinfo = _ get _ loginclass ( name ) DCNL DCSP userinfo = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( loginclass , name ) ) DCNL DCSP if ( userinfo &#91; 0 &#93; = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP if ( search _ directory ! = search _ directory ) : DCNL DCSP DCSP return search _ directory DCNL DCSP else : DCNL DCSP DCSP return os.path.join ( search _ directory , search _ directory )
DCSP return dict ( ( ( k , v ) for ( k , v ) in params.items ( ) if ( v is not None ) ) )
DCSP numpy.testing.assert _ array _ almost _ equal ( cupy.asnumpy ( x ) , cupy.asnumpy ( y ) , err _ msg = err _ msg , verbose = verbose )
DCSP if ( session _ file is None ) : DCNL DCSP DCSP session _ file = session _ file ( session _ file ) DCNL DCSP with open ( session _ file , &apos; rb &apos; ) as f : DCNL DCSP DCSP content = f.read ( ) DCNL DCSP return content
DCSP global _ cache _ tz DCNL DCSP _ cache _ tz = _ get _ localzone ( ) DCNL DCSP return _ cache _ tz
DCSP raw = read _ raw _ fif ( fname _ fname ) DCNL DCSP raw = read _ raw _ fif ( fname _ fname ) DCNL DCSP assert _ array _ almost _ equal ( raw.info &#91; &apos; projs &apos; &#93; , &#91; &#93; )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP if ( len ( fields ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( fields ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( fields ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP try : DCNL DCSP DCSP with open ( sys.argv &#91; 0 &#93; , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP with open ( sys.argv &#91; 1 &#93; , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP lines = f.readlines ( ) DCNL DCSP DCSP DCSP except IOError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP
DCSP if ( not isinstance ( value , list ) ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value ) DCNL DCSP if ( min is not None ) : DCNL DCSP DCSP raise VdtTypeError ( value )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP return ( &apos; splunk &apos; if ( &apos; pagerduty _ util.get _ resource &apos; in _ _ salt _ _ ) else False )
DCSP @ wraps ( wrapped ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno = = 403 ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP return wrapped DCNL DCSP return decorator
DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( lst ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if
DCSP try : DCNL DCSP DCSP ( yield ( 0 , 0 , 0 ) ) DCNL DCSP except iso8601.ParseError as e : DCNL DCSP DCSP raise ValueError ( ( &apos; Unable DCSP to DCSP parse DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP return _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; HKLM &apos; , _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; HKLM &apos; , &apos; &apos; ) , _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; HKLM &apos; , _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; HKLM &apos; , &apos; &apos; , vname ) )
DCSP for ( name , value ) in container.mime _ map.iteritems ( ) : DCNL DCSP DCSP if ( name = = container.opf _ name ) : DCNL DCSP DCSP DCSP return name DCNL DCSP return None
DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP ( X , Y ) = np.meshgrid ( X , Y ) DCNL DCSP return ( X , Y )
DCSP idc _ id = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP if ( not request.user.profile.is _ admin ( &apos; treeio.sales &apos; ) ) : DCNL DCSP DCSP return user _ denied ( request , &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP form &quot; ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP idc _ id = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP DCSP if ( not request.user.profile.is _ admin ( &apos; treeio.sales &apos; ) ) : DCNL DCSP DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP idc _ id = request.GET.get ( &apos; term &apos; , &apos; &apos; ) DCNL DCSP DCSP if ( not request.user.profile.is _ admin ( &apos; treeio.sales &apos; ) ) : DCNL DCSP DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP idc _ id = request.GET.get ( &apos; term &apos; ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP idc _ id =
DCSP if ( pattern is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) :
DCSP sample _ ids = &#91; &#93; DCNL DCSP for sample _ id in mapping _ f : DCNL DCSP DCSP sample _ ids = &#91; &#93; DCNL DCSP DCSP for sample _ id in sample _ ids _ str.split ( &apos; , &apos; ) : DCNL DCSP DCSP DCSP if ( sample _ id not in valid _ states _ str ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP sample _ id = sample _ ids &#91; sample _ id &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( sample _ id not in valid _ states _ str ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( sample _ id not in valid _ states _ str ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP sample _ ids = sample _ ids &#91; sample _ id &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP sample _ ids = sample _
DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) DCNL DCSP s = s.replace ( &apos; \ \ &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP s =
DCSP if ( not flags ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( splitLine ) = = 1 ) : DCNL DCSP DCSP
DCSP assert ( len ( topo ) = = 2 ) DCNL DCSP assert ( len ( topo ) = = 2 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( topo &#91; 0 &#93; ) =
DCSP ( type , val ) = _ get _ impl ( context , builder , value , attr ) DCNL DCSP return impl _ context _ borrowed ( context , builder , val , val )
DCSP if ( max _ scale is None ) : DCNL DCSP DCSP max _ scale = 0 DCNL DCSP elif ( max _ scale = = 0 ) : DCNL DCSP DCSP min _ scale = ( max _ scale * max _ scale ) DCNL DCSP elif ( max _ scale = = 0 ) : DCNL DCSP DCSP min _ scale = ( max _ scale * max _ scale ) DCNL DCSP elif ( max _ scale = = 0 ) : DCNL DCSP DCSP min _ scale = ( min _ scale * max _ scale ) DCNL DCSP elif ( max _ scale = = 0 ) : DCNL DCSP DCSP min _ scale = ( min _ scale * max _ scale ) DCNL DCSP elif ( max _ scale &lt; min _ scale ) : DCNL DCSP DCSP scale = ( min _ scale * max _ scale ) DCNL DCSP elif ( max _ scale = = 0 ) : DCNL DCSP DCSP min _ scale = ( min _ scale * max _ scale ) DCNL DCSP elif ( min _ scale = = 0 ) : DCNL DCSP DCSP
DCSP evaluate.setAttributesByArguments ( &#91; &apos; radius &apos; , &apos; end &apos; &#93; , arguments , elementNode ) DCNL DCSP return getGeometryOutput ( None , elementNode )
DCSP d = defer.Deferred ( ) DCNL DCSP for i in range ( ( len ( x1 ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP for j in range ( ( i + 1 ) , ( i + 1 ) ) : DCNL DCSP DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( 0.1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP time.sleep ( 0.1 )
DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import tkinter DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return True
DCSP ret = { } DCNL DCSP for profile in _ get _ profile _ images ( username ) : DCNL DCSP DCSP ret &#91; profile &#91; &apos; name &apos; &#93; &#93; = profile &#91; &apos; name &apos; &#93; DCNL DCSP return ret
DCSP start = time.time ( ) DCNL DCSP while True : DCNL DCSP DCSP time.sleep ( max _ attempts ) DCNL DCSP DCSP time.sleep ( max _ attempts ) DCNL DCSP DCSP time.sleep ( max _ attempts ) DCNL DCSP DCSP time.sleep ( max _ attempts ) DCNL DCSP DCSP time.sleep ( max _ attempts ) DCNL DCSP return retry
DCSP raise SystemExit
DCSP return ( isinstance ( value , list ) and isinstance ( value , list ) )
DCSP randint = ( random.@@ Wi@@ ch@@ mann@@ H@@ ill ( seed ) .randint if ( seed is not None ) else seed ) DCNL DCSP return randint ( start , stop )
DCSP if ( size is None ) : DCNL DCSP DCSP size = len ( filename ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = len ( filename ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = len ( filename ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = 0 DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = size DCNL DCSP if ( size is None ) : DCNL DCSP DCSP
DCSP return &#91; ( x , f ) for ( i , f ) in enumerate ( pvals ) &#93;
DCSP if ( dt.weekday ( ) = = 6 ) : DCNL DCSP DCSP return &apos; % H : % M : % S &apos; DCNL DCSP elif ( dt.weekday ( ) = = 6 ) : DCNL DCSP DCSP return &apos; % Y- % m- % dT % H : % M : % S &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP retVal = &#91; &#93; DCNL DCSP for key in params : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP key = key.encode ( &apos; utf-8 &apos; ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key = ( &apos; % s . % s &apos; % ( key , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key = ( &apos; % s . % s &apos; % ( key , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key = ( &apos; % s . % s &apos; % ( key , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key = ( &apos; % s . % s &apos; % ( key , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key = ( &apos; % s . % s &apos; % ( key , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key + = ( &apos; % s = % s &apos; % ( key , value ) ) DCNL DCSP return
DCSP items = &#91; &#93; DCNL DCSP for item in xml : DCNL DCSP DCSP if ( item = = &apos; &apos; ) : DCNL DCSP DCSP DCSP items.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP items.append ( item ) DCNL DCSP return items
DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ init _ _ ( self , pos ) : DCNL DCSP DCSP DCSP self . _ InternalSerialize ( self ) DCNL DCSP DCSP DCSP return self DCNL DCSP cls . _ _ name _ _ = cls . _ _ name _ _ DCNL DCSP return cls
DCSP return &apos; { 0 } { 1 } &apos; .format ( display , name )
DCSP if ( node.op = = node.inputs &#91; 0 &#93; .owner ) : DCNL DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93;
DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = _ _ import _ _ ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod = _ _ import _ _ ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP mod
DCSP tokens = token.contents.split ( ) DCNL DCSP if ( len ( tokens ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % tokens &#91; 0 &#93; ) ) DCNL DCSP return parser.parse ( args &#91; 1 : &#93; )
DCSP return escape ( text )
DCSP if ( not isinstance ( code _ or _ name , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP code DCSP type : DCSP % s &apos; % code _ or _ name ) ) DCNL DCSP if ( not isinstance ( code _ or _ name , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP code DCSP type : DCSP % s &apos; % code _ or _ name ) ) DCNL DCSP try : DCNL DCSP DCSP return validator ( code _ or _ name , validator _ or _ name ) DCNL DCSP except Exception as e : DCNL DCSP DCSP raise e
DCSP p = zeros ( ( t , t ) ) DCNL DCSP for i in range ( len ( a ) ) : DCNL DCSP DCSP p &#91; i &#93; = ( t &#91; i &#93; / t &#91; ( i + 1 ) &#93; ) DCNL DCSP return p
DCSP conf = global _ conf.copy ( ) DCNL DCSP conf.update ( local _ conf ) DCNL DCSP def auth _ filter ( app ) : DCNL DCSP DCSP return Account@@ Quota@@ Middleware ( app ) DCNL DCSP return auth _ filter
DCSP import sys DCNL DCSP if ( sys.version _ info &gt; = ( 3 , 3 ) ) : DCNL DCSP DCSP import sys DCNL DCSP DCSP mod = sys.modules &#91; _ _ module _ _ &#93; DCNL DCSP else : DCNL DCSP DCSP mod = sys.modules &#91; _ _ name _ _ &#93; DCNL DCSP return globals
DCSP if ( len ( individual ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP for i in xrange ( len ( individual ) ) : DCNL DCSP DCSP if ( len ( individual &#91; i &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( individual &#91; 0 &#93; ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( stack ) &gt; 1 ) : DCNL DCSP DCSP DCSP
DCSP if ( not login _ url ) : DCNL DCSP DCSP login _ url = settings.LOGIN _ URL DCNL DCSP return logout ( request , login _ url , extra _ context = extra _ context )
DCSP if ( not isinstance ( relation , Association@@ Proxy ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model . _ _ name _ _ , instance . _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP if ( not isinstance ( relation , Association@@ Proxy ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model . _ _ name _ _ , instance . _ _ name _ _ ) ) ) DCNL DCSP if ( not isinstance ( relation , Association@@ Proxy ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model . _ _ name _ _ , instance . _ _ name _ _ ) ) ) DCNL DCSP if ( relation is None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP relation DCSP
DCSP if isinstance ( params , dict ) : DCNL DCSP DCSP params = params.items ( ) DCNL DCSP params = { } DCNL DCSP for ( key , value ) in params.items ( ) : DCNL DCSP DCSP if ( key in params ) : DCNL DCSP DCSP DCSP params &#91; key &#93; = value DCNL DCSP return params
DCSP if ( order is None ) : DCNL DCSP DCSP order = len ( G ) DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = len ( G ) DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = &#91; &#93; DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order = order DCNL DCSP if ( order is None ) : DCNL DCSP DCSP order =
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP return cupy.ndarray ( a , dtype = dtype )
DCSP try : DCNL DCSP DCSP os.remove ( _ _ file _ _ ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if isinstance ( s , text _ type ) : DCNL DCSP DCSP return s.encode ( encoding , errors ) DCNL DCSP else : DCNL DCSP DCSP return s
DCSP object = get _ object _ or _ 404 ( ctype.model _ class ( ) , object _ id = object _ id , slug = slug , slug = slug , slug = slug , template _ name = template _ name , template _ name = template _ name , template _ name = template _ name , template _ name = template _ name , template _ name = template _ name , template _ name = template _ name , context _ processors = context _ processors , context _ processors = context _ processors ) DCNL DCSP if ( template _ class is not None ) : DCNL DCSP DCSP context.update ( extra _ context ) DCNL DCSP return HttpResponseRedirect ( reverse ( template _ name , context = context ) )
DCSP pubsub _ client = pubsub.Client ( ) DCNL DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP topic.create ( ) DCNL DCSP for subscription in subscriptions : DCNL DCSP DCSP subscription = topic.subscription ( subscription _ id ) DCNL DCSP DCSP subscription.@@ delete ( ) DCNL DCSP DCSP subscription.@@ delete ( )
DCSP return _ makeGetterFactory ( url , HTTPClientFactory , contextFactory = contextFactory , * args , * * kwargs ) .deferred
DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP except TerminalException as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP rcParams.update ( rcParams@@ Default )
DCSP ( train _ train , train _ train ) = train _ train _ train ( train _ train , y _ train , train _ train , y _ train , y _ train , y _ shape , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples , nb _ val _ samples ) DCNL DCSP return ( train _ train , train _ train , y _ train , y _ train )
DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _ topics ) : DCNL DCSP DCSP return DCNL DCSP if ( not remove _ enabled _
DCSP p &#91; 0 &#93; = ( &apos; END &apos; , p &#91; 2 &#93; )
DCSP dest = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; SPECS &apos; , spec ) DCNL DCSP if ( not os.path.exists ( dest ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( spec ) ) DCNL DCSP if ( not os.path.exists ( dest ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( spec ) ) DCNL DCSP if ( not os.path.exists ( dest ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( spec ) ) DCNL DCSP if ( not os.path.exists ( dest ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( spec ) ) DCNL DCSP if ( not os.path.exists ( dest ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( spec ) ) DCNL DCSP if ( not
DCSP if ( not g ) : DCNL DCSP DCSP return ( &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; ) DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not g ) :
DCSP if ( chunksize is None ) : DCNL DCSP DCSP chunksize = ( &apos; % s . % s &apos; % ( queryset.order _ by ( &apos; pk &apos; ) , queryset.order _ by ( &apos; pk &apos; ) ) ) DCNL DCSP else : DCNL DCSP DCSP queryset = queryset.order _ by ( &apos; pk &apos; ) DCNL DCSP return queryset
DCSP try : DCNL DCSP DCSP import doctest DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP unittest.TextTestRunner ( verbosity = 2 ) .run ( )
DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP if ( not terms ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not terms ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( terms ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( terms ) = = 2 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( len ( value ) &lt; max _ len ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP bytes DCSP of DCSP % s &apos; % ( name , value ) ) )
DCSP if isinstance ( iterable , tuple ) : DCNL DCSP DCSP return iterable DCNL DCSP elif isinstance ( iterable , tuple ) : DCNL DCSP DCSP return iterable DCNL DCSP else : DCNL DCSP DCSP return list ( iterable )
DCSP tool _ shed _ url = common _ util.remove _ protocol _ from _ tool _ shed _ url ( tool _ shed _ url ) DCNL DCSP return util.remove _ protocol _ from _ tool _ shed _ url ( tool _ shed _ url )
DCSP def f ( * args , * * kwargs ) : DCNL DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP siteconfig = SiteConfiguration.objects.get _ current ( ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return
DCSP if ( not config _ exists ( config , full _ path ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( config _ path , basestring ) ) : DCNL DCSP DCSP raise errors.Error ( &apos; Repository DCSP must DCSP be DCSP a DCSP string . &apos; ) DCNL DCSP if ( not isinstance ( config _ path , basestring ) ) : DCNL DCSP DCSP raise errors.Error ( &quot; The DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( full _ path ) ) DCNL DCSP if ( not isinstance ( config _ path , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP configuration DCSP file : DCSP % s &apos; % full _ path ) ) DCNL DCSP if ( not isinstance ( config _ path , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP configuration DCSP file : DCSP % s &apos; % full _ path ) ) DCNL DCSP if ( not os.path.exists ( full _ path ) ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP
DCSP acl _ json = { } DCNL DCSP for acl in acl _ dict : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP acl = json.loads ( acl ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP return acl
DCSP version = version.replace ( &apos; .&apos; , &apos; .&apos; ) DCNL DCSP assert ( len ( version ) = = 3 ) DCNL DCSP assert ( version &#91; 0 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; = = &apos; version &apos; ) DCNL DCSP assert ( version &#91; 1 &#93; =
DCSP for key in args : DCNL DCSP DCSP if ( key in args ) : DCNL DCSP DCSP DCSP del client &#91; key &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP del client &#91; key &#93;
DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL DCSP model = context &#91; &apos; model &apos; &#93; DCNL
DCSP with open ( remote _ path , &apos; r &apos; ) as scp _ file : DCNL DCSP DCSP with open ( remote _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP with open ( remote _ path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP f.write
DCSP if ( len ( layers ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for ( i , v ) in enumerate ( batch _ size ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( (
DCSP def decorator ( f ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP if ( not hasattr ( original _ function , &apos; label &apos; ) ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist . &apos; % original _ function . _ _ name _ _ ) ) DCNL DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( sys.version _ info &gt; = ( 3 , 6 ) ) : DCNL DCSP DCSP globs = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP globs = { } DCNL DCSP if ( sys.version _ info &gt; = ( 3 , 3 ) ) : DCNL DCSP DCSP globs = { } DCNL DCSP else : DCNL DCSP DCSP suite = unittest.TestSuite ( ) DCNL DCSP DCSP for ( name , dirnames , filenames ) in os.walk ( executable ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP globs = { } DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP globs = { } DCNL DCSP DCSP DCSP for ( name , dirnames , filenames ) in os.walk ( executable ) : DCNL DCSP DCSP DCSP DCSP if ( ( name = = &apos; .&apos; ) and ( name = = &apos; .pyc &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( ( &apos; .pyc &apos; in filename ) and ( &apos; .py &apos; in filename )
DCSP if logical _ line.startswith ( &apos; self.assertRaises ( Exception ) &apos; ) : DCNL DCSP DCSP ( yield ( 0 , &apos; CINDER DCSP N202 : DCSP assertRaises DCSP Exception DCSP too DCSP broad &apos; ) )
DCSP return _ find _ clickable _ elem _ with _ wait ( context , by , wait _ time )
DCSP issues = get _ issues _ from _ bulk ( bulk _ data , * * additional _ fields ) DCNL DCSP return issues
DCSP if ( not string _ ) : DCNL DCSP DCSP return None DCNL DCSP if ( not string _ ) : DCNL DCSP DCSP return None DCNL DCSP if ( not string _ ) : DCNL DCSP DCSP return None DCNL DCSP if ( not string _ ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( string _ ) = = 1 ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP else : DCNL DCSP DCSP return
DCSP groups = &#91; &#93; DCNL DCSP if groups : DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL DCSP DCSP groups = groups &#91; 0 &#93; DCNL
DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not isinstance ( resp , datetime.datetime ) ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( resp , datetime.datetime ) : DCNL DCSP DCSP return (
DCSP if ( len ( salt ) = = 1 ) : DCNL DCSP DCSP return ( &apos; 0&apos; , &apos; &apos; ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( retVal.upper ( ) if uppercase else retVal.lower ( ) ) )
DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP result = { } DCNL DCSP for ( key , value ) in lookup _ dict.items ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP return result
DCSP cmd = &apos; \ n
DCSP holiday _ list = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( sys.argv ) ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP
DCSP cmd = &apos; hciconfig DCSP { 0 } &apos; .format ( addr ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd ) .splitlines ( ) DCNL DCSP return out
DCSP comment = get _ object _ or _ 404 ( Comment , pk = comment _ id ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP comment.@@ delete ( ) DCNL DCSP else : DCNL DCSP DCSP comment = get _ object _ or _ 404 ( Comment , pk = comment _ id ) DCNL DCSP DCSP if form.is _ valid ( ) : DCNL DCSP DCSP DCSP form.save ( ) DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; wiki.discuss.@@ posts &apos; , args = &#91; comment _ id &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; wiki.discuss.@@ posts &apos; , args = &#91; comment _ id &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return render ( request , &apos; delete _ comment _ delete.html &apos; , { &apos; comment &apos; : comment } )
DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( tag is None ) or ( tag is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if
DCSP otu _ table = defaultdict ( list ) DCNL DCSP for ( otu _ id , otu _ id ) in otu _ table.@@ iteritems ( ) : DCNL DCSP DCSP if ( otu _ table &#91; &apos; id &apos; &#93; = = otu _ table &#91; &apos; id &apos; &#93; ) : DCNL DCSP DCSP DCSP otu _ table &#91; &apos; id &apos; &#93; = otu _ table &#91; &apos; id &apos; &#93; DCNL DCSP DCSP DCSP otu _ table &#91; &apos; id &apos; &#93; = otu _ table &#91; &apos; id &apos; &#93; DCNL DCSP return otu _ table
DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value DCNL DCSP return value
DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP destroy DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP destroy DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP destroy DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP destroy DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP destroy DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP
DCSP images = get _ images _ table ( meta ) DCNL DCSP return images
DCSP if ( len ( paths ) = = 1 ) : DCNL DCSP DCSP return paths &#91; 0 &#93; DCNL DCSP elif ( len ( paths ) = = 1 ) : DCNL DCSP DCSP return paths &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return paths &#91; 0 &#93;
DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = get _ label _ id ( ) DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = get _ label _ id ( ) DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id = None DCNL DCSP if ( project _ id is None ) : DCNL DCSP DCSP project _ id =
DCSP return sum ( ( ( random.random ( ) * 255.0 ) for i in range ( random.randint ( 0 , 255 ) ) ) )
DCSP if ( cf is None ) : DCNL DCSP DCSP container _ meta = { } DCNL DCSP else : DCNL DCSP DCSP container _ meta = { } DCNL DCSP DCSP for ( key , value ) in six.iteritems ( container _ meta ) : DCNL DCSP DCSP DCSP if ( key not in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key not in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key in container _ meta ) : DCNL DCSP DCSP DCSP DCSP
DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( seq ) &gt; 1 ) : DCNL DCSP
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; )
DCSP if ( j is None ) : DCNL DCSP DCSP j = 1 DCNL DCSP else : DCNL DCSP DCSP w = w &#91; : , np.newaxis &#93; DCNL DCSP if ( j &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; s DCSP must DCSP be DCSP one DCSP of DCSP % s , DCSP got DCSP % s &apos; % ( w , w ) ) ) DCNL DCSP if ( j &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; s DCSP must DCSP be DCSP one DCSP of DCSP % s , DCSP got DCSP % s &apos; % ( w , w ) ) ) DCNL DCSP if ( j &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; s DCSP must DCSP be DCSP at DCSP least DCSP one DCSP of DCSP % s , DCSP got DCSP % s &apos; % ( w , w ) ) ) DCNL DCSP if ( j &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; s DCSP must DCSP be DCSP one DCSP of DCSP % s , DCSP got DCSP % s
DCSP if ( dir is None ) : DCNL DCSP DCSP dir = salt.utils.get _ user ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = salt.utils.get _ user ( name ) DCNL DCSP if ( not os.path.exists ( name ) ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP return ret &#91; &apos; result &apos; &#93;
DCSP if ( key is None ) : DCNL DCSP DCSP key = &#91; &#93; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; &apos; DCNL DCSP if ( key is not None ) : DCNL DCSP DCSP if ( key is not None ) : DCNL DCSP DCSP DCSP
DCSP _ unpublicize _ activity ( committer _ id , exploration _ id , feconf.ACTIVITY _ TYPE _ EXPLORATION )
DCSP try : DCNL DCSP DCSP with open ( cmd , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( cmd ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except OSError as e : DCNL DCSP
DCSP @ wraps ( request ) DCNL DCSP def wrapper ( request , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return view ( request , * args , * * kwargs ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP return render _ to _ response ( &apos; actstream / actor.@@ html &apos; , { &apos; form &apos; : form } , context _ instance = RequestContext ( request ) )
DCSP minimum = complex ( 9.876543219876543e + 17 , 9.876543219876543e + 17 ) DCNL DCSP for path in paths : DCNL DCSP DCSP minimum = getMinimum ( minimum , point ) DCNL DCSP return minimum
DCSP with open ( loc , &apos; r &apos; ) as f : DCNL DCSP DCSP for line in lines : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP ( yield line )
DCSP if ( not module ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( module , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % module ) ) DCNL DCSP if ( not isinstance ( module , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( not isinstance ( module , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( not isinstance ( module , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( not isinstance ( module , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( not isinstance ( module , dict ) ) : DCNL
DCSP if ( node is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( node , pytree.Leaf ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , pytree.Leaf ) : DCNL DCSP DCSP return node.children &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP def decorate ( fn ) : DCNL DCSP DCSP @ functools.wraps ( fn ) DCNL DCSP DCSP def wrapper ( * args , * * kw ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return fn ( * args , * * kw ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP return fn ( * args , * * kw ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorate
DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not response.has _ header ( &apos; Cache-Control &apos; ) ) : DCNL DCSP DCSP return None DCNL
DCSP return XBlock@@ Configuration.@@ objects.@@ enabled _ enabled ( )
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise template.TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise template.TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP
DCSP t.lexer.lineno + = t.value.count ( &apos; \ n &apos; ) DCNL DCSP return t
DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ list is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( entry _ list ) = = 1 ) : DCNL DCSP DCSP return entry _ list &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if isinstance ( name , types.ModuleType ) : DCNL DCSP DCSP name = name.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( name , dict ) : DCNL DCSP DCSP name = name.encode ( &apos; utf-8 &apos; ) DCNL DCSP return name
DCSP rare _ mat = line.split ( &apos; \ n &apos; ) &#91; 0 &#93; DCNL DCSP rare _ mat = line &#91; 1 : ( -1 ) &#93; DCNL DCSP rare _ mat = &apos; \ n &apos; .join ( map ( ( lambda x : x &#91; 1 &#93; ) , line ) ) DCNL DCSP rare _ mat = &apos; \ n &apos; .join ( map ( ( lambda x : x &#91; 1 &#93; ) , line ) ) DCNL DCSP rare _ mat = &apos; \ n &apos; .join ( map ( ( lambda x : ( x &#91; 1 &#93; + 1 ) ) , line &#91; 1 : &#93; ) ) DCNL DCSP return ( rare _ mat , rarefaction _ fn )
DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) = = 1 ) DCNL DCSP assert ( len ( key ) =
DCSP if ( not record _ list ) : DCNL DCSP DCSP return None DCNL DCSP if ( not record _ list ) : DCNL DCSP DCSP record _ list = &#91; &#93; DCNL DCSP for item in record _ list : DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in record _ list ) : DCNL
DCSP if ( not isinstance ( keys , dict ) ) : DCNL DCSP DCSP keys = dict ( ( ( k , v ) for ( k , v ) in iteritems ( keys ) if ( k not in keys ) ) ) DCNL DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( keys ) if ( k not in keys ) ) )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP tokenize ( &apos
DCSP if ( not is _ integer ( func ) ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( header
DCSP if isinstance ( img , np.ndarray ) : DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : : ( -1 ) &#93; DCNL DCSP DCSP img = img &#91; : , : ,
DCSP opts = salt.returners.get _ returner _ options ( _ _ virtualname _ _ , ret , attrs , _ _ salt _ _ = _ _ salt _ _ , _ _ salt _ _ = _ _ salt _ _ , _ _ salt _ _ = _ _ salt _ _ ) DCNL DCSP return _ options
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = wsgi.JSON@@ ResponseSerializer ( ) DCNL DCSP return wsgi.Resource ( Controller ( ) , deserializer , serializer )
DCSP return globals ( ) &#91; name &#93;
DCSP if ( not result ) : DCNL DCSP DCSP raise ValidationError ( msg ) DCNL DCSP if ( expected and ( expected ! = expected ) ) : DCNL DCSP DCSP raise ValidationError ( msg )
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xticks ( &#91; &#93; ) DCNL DCSP ax.set _ xlabel ( &apos;
DCSP context = req.environ &#91; &apos; placement.context &apos; &#93; DCNL DCSP uuid = util.wsgi _ path _ path ( req.environ , &apos; uuid &apos; ) DCNL DCSP resource _ provider = objects.ResourceProvider.get _ by _ uuid ( context , uuid ) DCNL DCSP resource _ provider = objects.ResourceProvider.get _ by _ uuid ( resource _ provider , resource _ provider ) DCNL DCSP return resource _ provider
DCSP return _ delete _ at _ rows ( context , age _ in _ days = age _ in _ days )
DCSP try : DCNL DCSP DCSP return _ _ import _ _ ( module _ name , members ) DCNL DCSP except ImportError : DCNL DCSP DCSP return False
DCSP return ( ( u &apos; \ n &apos; + name ) + u &apos; \ n &apos; )
DCSP if ( not u ) : DCNL DCSP DCSP return dup _ div ( f , g , K ) DCNL DCSP if ( not u ) : DCNL DCSP DCSP return dup _ div ( f , g , K ) DCNL DCSP else : DCNL DCSP DCSP return dmp _ div ( f , g , u , K ) &#91; 0 &#93;
DCSP request = context &#91; &apos; request &apos; &#93; DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return request &#91; &apos; request &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return IMPL.service _ get _ all _ by _ host ( context , host )
DCSP return urllib.quote ( domain ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; )
DCSP return getattr ( request , u &apos;@@ cache _ key _ prefix &apos; , get _ cache _ key ( request ) )
DCSP if ( axis is None ) : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP else : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP else : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP else : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP else : DCNL DCSP DCSP filt = LPIFilter2D ( impulse _ response , * * filter _ params ) DCNL DCSP if ( axis is not None ) : DCNL DCSP DCSP
DCSP if ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP elif ( passphrase is None ) : DCNL DCSP DCSP passphrase = _ get _ private _ key ( ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP specify DCSP a DCSP string DCSP or DCSP FILETYPE _ PEM DCSP or DCSP FILETYPE _ ASN1 &apos; ) DCNL DCSP if ( passphrase is not None ) : DCNL DCSP DCSP
DCSP if ( len ( meta ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP image DCSP size : DCSP % s &apos; % size ) ) DCNL DCSP if ( ( size &lt; 0 ) or ( size &gt; 255 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP image DCSP size : DCSP % s &apos; % label ) ) DCNL DCSP if ( ( size &gt; 255 ) and ( size &gt; 255 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP image DCSP size : DCSP % s &apos; % label ) ) DCNL DCSP if ( ( size &gt; 255 ) and ( size &gt; 255 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP image DCSP size : DCSP % s &apos; % label ) ) DCNL DCSP if ( ( size &gt; 255 ) and ( size &gt; 255 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP image DCSP size : DCSP % s &apos; % label ) ) DCNL DCSP if ( ( size &gt; 255 ) and (
DCSP try : DCNL DCSP DCSP os.makedirs ( egg ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP return tf.reduce _ sum ( x , axis = axis )
DCSP global idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ proxy DCNL DCSP idb _ proxy = idb _ proxy DCNL DCSP idb _ proxy = idb _ proxy DCNL DCSP idb _ proxy = IdbProxy ( rpcclt , pyshell , idb _ proxy ) DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = idb _ adap _ oid DCNL DCSP idb _ proxy = IdbProxy ( rpcclt , pyshell , idb _ proxy ) DCNL DCSP
DCSP print &apos; Hello DCSP World ! &apos; DCNL DCSP print &apos; Hello DCSP World ! &apos; DCNL DCSP print &apos; Hello DCSP World ! &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n &apos; DCNL DCSP print &apos; \ n
DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = sickrage.srCore.srConfig.NAMING _ PATTERN DCNL DCSP sickrage.srCore.srLogger.debug ( ( ( u &apos;Checking DCSP whether DCSP the DCSP pattern DCSP &apos; + pattern ) + u &apos; DCSP is DCSP valid . &apos; ) ) DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = sickrage.srCore.srConfig.NAMING _ PATTERN DCNL DCSP sickrage.srCore.srLogger.debug ( ( u &apos;Checking DCSP whether DCSP the DCSP pattern DCSP &apos; + pattern ) ) DCNL DCSP return valid
DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP if ( attachments is None ) : DCNL DCSP DCSP attachments = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP attachments =
DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP widget = context.get ( u &apos;request &apos; ) DCNL DCSP if ( widget is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP context &#91; u &apos;request &apos; &#93; = widget DCNL DCSP return context
DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP if ( len ( G ) = = 1 ) : DCNL DCSP DCSP return G DCNL DCSP G
DCSP response = _ _ salt _ _ &#91; &apos; bigip.list _ pool &apos; &#93; ( hostname , username , password , member ) DCNL DCSP return _ _ salt _ _ &#91; &apos; bigip.list _ pool &apos; &#93; ( hostname , username , password , member )
DCSP d = { } DCNL DCSP for entry in entry : DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 0 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 1 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 1 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 1 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 1 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 1 &#93; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = &apos; .&apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = &apos; .&apos; ) : DCNL
DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP if ( using is None ) : DCNL DCSP DCSP using = DEFAULT _ DB _ ALIAS DCNL DCSP connection = connections &#91; using &#93; DCNL DCSP def
DCSP if ( alternative in &#91; &apos; two-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP elif ( alternative in &#91; &apos; two-sided &apos; , &apos; 2-sided &apos; , &apos; 2s &apos; &#93; ) : DCNL DCSP DCSP alternative = &apos; larger &apos; DCNL DCSP
DCSP for ( idx , row ) in enumerate ( fields ) : DCNL DCSP DCSP if ( ( row &#91; 0 &#93; = = label &#91; ( -1 ) &#93; ) and ( row &#91; ( -1 ) &#93; = = label &#91; ( -1 ) &#93; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) and ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) and ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) and ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( row &#91; ( -1 ) &#93; = = &apos; .&apos; ) and ( row &#91; ( -1 ) &#93; = = &apos; DCSP &apos; ) ) :
DCSP return ( result = = expected )
DCSP pdef = XML.SubElement ( xml _ parent , &apos; hudson.@@ maven@@ .get &apos; ) DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data.get ( &apos; spec &apos; , &apos; &apos; ) DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; spec &apos; ) .text = data &#91; &apos; url &apos; &#93; DCNL DCSP
DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP DCSP weight = G.is _ directed ( ) DCNL DCSP if ( weight is None ) : DCNL DCSP
DCSP try : DCNL DCSP DCSP module = _ _ import _ _ ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return sys.modules &#91; path &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None
DCSP if ( languages is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) :
DCSP return s3 _ rest _ controller ( )
DCSP ret = _ sync ( &apos; output &apos; , saltenv ) DCNL DCSP if refresh : DCNL DCSP DCSP refresh _ modules ( ) DCNL DCSP return ret
DCSP ret = { } DCNL DCSP for item in queue : DCNL DCSP DCSP ret &#91; item &#93; = item DCNL DCSP return ret
DCSP superConsole.SendKeys ( &apos; outputRedirectStart { ( } { ) } { ENTER } &apos; ) DCNL DCSP testRegex = &apos; &apos; DCNL DCSP superConsole.SendKeys ( &apos; outputRedirectStop { ( } { ) } { ENTER } &apos; ) DCNL DCSP testRegex = &apos; &apos; DCNL DCSP superConsole.SendKeys ( &apos; outputRedirectStop { ( } { ) } { ENTER } &apos; ) DCNL DCSP verifyResults ( getTestOutput ( ) &#91; 0 &#93; , testRegex )
DCSP centrality = { } DCNL DCSP centrality = { } DCNL DCSP for v in nodes : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP G.remove _ edge ( v , v ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP betweenness &#91; ( i , v ) &#93; = v DCNL DCSP return centrality
DCSP chart = Chart ( ) DCNL DCSP chart.add ( &apos; B &apos; , &#91; 1 , 2 , 3 &#93; ) DCNL DCSP chart.add ( &apos; \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \ x81 \ xe2 \ x96 \
DCSP if ( ( tol is None ) or ( tol &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( tol is None ) or ( tol = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Jacobian DCSP is DCSP not DCSP implemented DCSP for DCSP this DCSP function . &apos; ) DCNL DCSP if ( ( tol is None ) or ( tol &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( tol is None ) or ( tol = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( tol = = 0 ) or ( tol &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( tol &lt; 0 ) or
DCSP if ( A.shape &#91; 0 &#93; ! = B.shape &#91; 0 &#93; ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP positive DCSP dimensions &apos; % A.shape &#91; 0 &#93; ) ) DCNL DCSP delta = ( A &#91; ( -1 ) &#93; - A &#91; ( -1 ) &#93; ) DCNL DCSP return ( A &#91; ( -1 ) &#93; , A &#91; ( -1 ) &#93; )
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP return
DCSP for i in range ( 0 , len ( l ) , n ) : DCNL DCSP DCSP ( yield l &#91; i : ( i + n ) &#93; )
DCSP loader = Loader ( stream ) DCNL DCSP while loader.check _ node ( ) : DCNL DCSP DCSP ( yield loader.get _ node ( ) )
DCSP return s3db.req _ send _ commit ( )
DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL
DCSP return dict ( ( ( k , v ) for ( k , v ) in inventory.@@ items ( ) if ( v is not None ) ) )
DCSP config _ stub.data = { &apos; storage &apos; : { &apos; cache-size &apos; : 1024 } , &apos; general &apos; : { &apos; private-browsing &apos; : True } }
DCSP if ( bin _ env is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP if ( bin _ env is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP if ( bin _ env is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP if ( bin _ env is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP if ( bin _ env is not None ) : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -c &apos; , bin _ env &#93; ) DCNL DCSP if use _ vt : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -c &apos; , bin _ env &#93; ) DCNL DCSP if use _ vt : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -c &apos; , bin _ env &#93; ) DCNL DCSP if use _ vt : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -r &apos; , bin _ env &#93; ) DCNL DCSP if use _ vt : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -c &apos; , bin _ env &#93; ) DCNL DCSP
DCSP return str ( obj )
DCSP try : DCNL DCSP DCSP return int ( size ) DCNL DCSP except ValueError : DCNL DCSP DCSP return &apos; &apos;
DCSP quteproc.send _ cmd ( cmd , value , value )
DCSP pass
DCSP try : DCNL DCSP DCSP return ( ( u &apos; % &apos; + str ( arg ) ) % value ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return u &apos; &apos;
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP cmd = &apos; volume DCSP quota DCSP { 0 } &apos; .format ( name ) DCNL DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP try : DCNL DCSP DCSP return get _ cache _ slug ( ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP ptr = ptr &#91; ptr &#93; DCNL DCSP ptr = ptr &#91; ptr &#93; DCNL DCSP return ptr
DCSP try : DCNL DCSP DCSP data = json.loads ( json.dumps ( data ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( ( &apos; Failed DCSP to DCSP parse DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP return None DCNL DCSP return json.loads ( s )
DCSP result = &#91; &#93; DCNL DCSP for ( i , value ) in enumerate ( context ) : DCNL DCSP DCSP if ( ( i = = 0 ) or ( i &gt; = 0 ) ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP result.append ( ( i , ) ) DCNL DCSP return result
DCSP driver = driver . _ _ class _ _ . _ _ name _ _ DCNL DCSP return { &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _ _ , &apos; driver _ name &apos; : driver . _ _ name _
DCSP return rand _ base ( length , bad , set ( chars ) )
DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return redirect ( url _ for ( &apos; Content-Type &apos; , &apos; text / html &apos; ) ) DCNL DCSP else : DCNL DCSP DCSP return redirect ( url _ for ( &apos; Content-Type &apos; , &apos; text / html &apos; ) )
DCSP blocks = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( data ) , 1 ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP break DCNL DCSP
DCSP def wrapper ( func ) : DCNL DCSP DCSP @ functools.wraps ( wrapped ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP return wrapped ( * args , * * kwargs ) DCNL DCSP DCSP return wrapped DCNL DCSP return wrapper
DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ body is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( &apos; token &apos; in http _ body ) : DCNL DCSP DCSP return http _ body &#91; &apos; token &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP x = np.asarray ( x ) DCNL DCSP if ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = np.asarray ( x ) DCNL DCSP elif ( x.ndim = = 1 ) : DCNL DCSP DCSP d = x &#91; : , np.newaxis &#93; DCNL DCSP else : DCNL DCSP DCSP n = x.shape &#91; 0 &#93; DCNL DCSP if ( x.ndim = = 1 ) : DCNL DCSP DCSP x = x &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP
DCSP if pieces &#91; &apos; closest-tag &apos; &#93; : DCNL DCSP DCSP rendered = pieces &#91; &apos; closest-tag &apos; &#93; DCNL DCSP DCSP if pieces &#91; &apos; closest-tag &apos; &#93; : DCNL DCSP DCSP DCSP rendered + = &apos; .dev0 &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP rendered + = &apos; .dev0 &apos; DCNL DCSP return rendered
DCSP for i in range ( 0 , ( n _ objs + 1 ) ) : DCNL DCSP DCSP x = ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) + ( x &#91; ( i , 1 ) &#93; * ind &#91; ( i + 1 ) &#93; ) ) DCNL DCSP DCSP x = ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) - ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) + ( ( x &#91; : , 0 &#93; * x &#91; ( i + 1 ) &#93; ) ) ) DCNL DCSP DCSP x = ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) - ( ( x &#91; : ( -1 ) &#93; * x &#91; ( i + 1 ) &#93; ) + ( ( x &#91; : , 0 &#93; * x &#91; ( i + 1 ) &#93; ) ) ) DCNL DCSP DCSP d &#91; i &#93; =
DCSP try : DCNL DCSP DCSP return getattr ( obj , attr , default ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return default
DCSP if hasattr ( f , &apos; mode &apos; ) : DCNL DCSP DCSP return f.read ( ) DCNL DCSP elif isinstance ( f , bytes ) : DCNL DCSP DCSP return f.read ( ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP mode &apos; % f ) )
DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP if ( k is None ) : DCNL DCSP DCSP k = 1 DCNL DCSP else : DCNL DCSP
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 1 ) DCNL DCSP c = S ( 1 ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( type ( value ) is str ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP if ( ( index _ col is None ) or ( index _ col is not None ) ) : DCNL DCSP DCSP return ( row &#91; index _ col &#93; + row &#91; index _ col &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename in &#91; &apos; audio &apos; , &apos; audio &apos; , &apos; audio &apos; , &apos; audio &apos; , &apos; audio &apos; &#93; ) : DCNL DCSP DCSP return
DCSP q = Session.query ( cls ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = = &apos; q &apos; ) ) .filter ( ( cls.interval = =
DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length is None ) : DCNL DCSP DCSP length = 0 DCNL DCSP if ( length &lt;
DCSP return t &#91; : ( -1 ) &#93;
DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( referenced _ images ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len (
DCSP path = os.path.join ( saltenv , saltenv ) DCNL DCSP if ( not os.path.isfile ( path ) ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP fp = open ( path , &apos; rb &apos; ) DCNL DCSP except IOError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP fp = open ( path , &apos; rb &apos; ) DCNL DCSP except IOError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP fp = open ( path , &apos; rb &apos; ) DCNL DCSP except IOError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP fp = open ( path , &apos; r &apos; ) DCNL DCSP except IOError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( repository = = None ) : DCNL DCSP DCSP repository = settings.getReadRepository ( SkeinisoRepository ( ) ) DCNL DCSP skein@@ Window = getWindow@@ Given@@ Text@@ Repository ( fileName , gcodeText , repository ) DCNL DCSP skein@@ Window.@@ update@@ ify ( ) DCNL DCSP return skein@@ Window
DCSP if ( len ( p ) = = 1 ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; ) DCNL DCSP if ( not isinstance ( p , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; x DCSP must DCSP be DCSP a DCSP positive , DCSP got DCSP % s &apos; % p ) ) DCNL DCSP if ( len ( p ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( p ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for i in range ( len ( p ) ) : DCNL DCSP DCSP if ( x &#91; i &#93; = = x &#91; i &#93; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP for i in data : DCNL DCSP DCSP if ( i in data ) : DCNL DCSP DCSP DCSP if ( data &#91; i &#93; = = data &#91; i &#93; ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP data &#91; i &#93; = data &#91; i &#93;
DCSP d = defer.Deferred ( ) DCNL DCSP def wrapper ( * args , * * kw ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return result &#91; key &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP return result
DCSP try : DCNL DCSP DCSP import json DCNL DCSP except ImportError : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; utf-8 &apos;
DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP elif ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP elif ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP elif ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP elif ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP elif ( start _ date is None ) : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP else : DCNL DCSP DCSP start _ date = start _ date DCNL DCSP return ( start _ date , end _ date )
DCSP try : DCNL DCSP DCSP driver = driver . _ _ class _ _ . _ _ name _ _ DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP driver = driver . _ _ class _ _ . _ _ name _ _ DCNL DCSP DCSP driver = driver . _ _ class _ _ . _ _ name _ _ DCNL DCSP DCSP if ( driver is not None ) : DCNL DCSP DCSP DCSP _ check _ driver _ driver ( driver , driver )
DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( not context ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( not context ) : DCNL DCSP
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP DCSP DCSP DCSP os.remove ( &apos; foo &apos; )
DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( options ) = = 1 ) : DCNL DCSP DCSP return ( &#91; &#93; , &#91; &#93; ) DCNL DCSP else : DCNL DCSP
DCSP if ( not isinstance ( kwargs , dict ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP try : DCNL DCSP DCSP for ( key , value ) in six.iteritems ( kwargs ) : DCNL DCSP DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP kwargs &#91; key &#93; = kwargs &#91; key &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass
DCSP doctype = get _ doctype _ name ( doctype ) DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos; &#93; DCNL DCSP doctype = doctype &#91; u &apos;doctype &apos;
DCSP ret = { } DCNL DCSP for name in name : DCNL DCSP DCSP if ( name in name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; name &#93; = = name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; ( -1 ) &#93; = = name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; ( -1 ) &#93; = = name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; ( -1 ) &#93; = = name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; ( -1 ) &#93; = = name ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name &#91; ( -1 )
DCSP cwd = os.getcwd ( ) DCNL DCSP os.chdir ( dirname ( dirname ( _ _ file _ _ ) ) ) DCNL DCSP sys.path.insert ( 0 , ( &apos; % s . % s &apos; % ( dirname ( dirname ( dirname ( _ _ file _ _ ) ) ) ) ) ) DCNL DCSP sys.path.insert ( 0 , ( &apos; % s . % s &apos; % ( dirname ( dirname ( dirname ( _ _ file _ _ ) ) ) ) ) )
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP except : DCNL DCSP DCSP ret = False DCNL DCSP return ret
DCSP candidates = &#91; &#93; DCNL DCSP for item in items : DCNL DCSP DCSP out.extend ( plugin.@@ candidates ( items , artist , album , va _ likely ) ) DCNL DCSP return candidates
DCSP names &#91; p &#91; 1 &#93; &#93; = p &#91; 1 &#93;
DCSP service _ instance = salt.utils.vmware.get _ service _ instance ( host = host , username = username , password = password , service _ name = service _ name , protocol = protocol , host _ names = host _ names ) DCNL DCSP return service _ instance
DCSP return &#91; &#93;
DCSP if ( not s ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP seconds = int ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP seconds = int ( s ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP unit DCSP format : DCSP % s &apos; % s ) ) DCNL DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP unit DCSP format : DCSP % s &apos; % s ) ) DCNL DCSP try : DCNL DCSP DCSP seconds = int ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP unit DCSP format : DCSP % s &apos; % s ) ) DCNL DCSP try : DCNL DCSP DCSP seconds = int ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP seconds = int ( s ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP
DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP auth _ token = None DCNL DCSP if ( not user _ token ) : DCNL DCSP DCSP access _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP auth _ token = None DCNL DCSP if ( access _ token is None ) : DCNL DCSP DCSP auth _ token = None DCNL DCSP if ( access _ token is None ) : DCNL
DCSP if hasattr ( module , &apos; _ _ module _ _ &apos; ) : DCNL DCSP DCSP return module . _ _ module _ _ DCNL DCSP else : DCNL DCSP DCSP return getattr ( module , &apos; _ _ module _ _ &apos; , None )
DCSP if ( exog _ idx is None ) : DCNL DCSP DCSP exog _ idx = exog.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP endog _ idx = exog &#91; : , np.newaxis &#93; DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx = np.argsort ( endog _ idx ) DCNL DCSP endog _ idx =
DCSP new _ dict = { } DCNL DCSP for ( key , value ) in new _ dict.items ( ) : DCNL DCSP DCSP new _ dict &#91; key &#93; = value DCNL DCSP return new _ dict
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP from Crypto.PublicKey import RSA DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP from Crypto.PublicKey import RSA DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP v1 = get _ edx _ request ( ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP API DCSP consumer : DCSP % s &apos; % uuid.uuid4 ( ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; Invalid DCSP course DCSP key &apos; ) DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( v1 , v1 ) = UserProfile.objects.get ( ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP API DCSP consumer : DCSP % s &apos; % v1 ) ) DCNL DCSP
DCSP if ( x _ len is not None ) : DCNL DCSP DCSP if ( x _ len is not None ) : DCNL DCSP DCSP DCSP if ( x _ len is not None ) : DCNL DCSP DCSP DCSP DCSP if ( x _ len is None ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( x _ len is None ) : DCNL DCSP DCSP DCSP DCSP DCSP x _ len = x _ len DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( x _ len is None ) : DCNL DCSP DCSP DCSP DCSP DCSP x _ len = x _ len DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( x _ len is None ) : DCNL DCSP DCSP DCSP DCSP DCSP x _ len = x _ len DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP x _ len = x _ len DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( x _ len is None ) : DCNL DCSP
DCSP try : DCNL DCSP DCSP os.kill ( pid , 0 ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP session = db.get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP creds = session.query ( network _ models _ v2.Credential ) .filter _ by ( tenant _ id = tenant _ id ) .filter _ by ( tenant _ id = tenant _ id ) .filter _ by ( tenant _ id = tenant _ id ) .one ( ) DCNL DCSP DCSP return cred DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( e , Exception ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP return Demo@@ NotificationService ( hass , config &#91; CONF _ API _ KEY &#93; , config &#91; CONF _ API _ KEY &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; , config &#91; CONF _ USERNAME &#93; ,
DCSP if ( len ( strs ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( strs ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( strs ) = = 0 ) : DCNL DCSP DCSP return out DCNL DCSP if ( len ( strs ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( strs ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( strs ) = = 1 ) : DCNL DCSP DCSP return out &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return out &#91; 0 &#93;
DCSP return path.replace ( u &apos; / &apos; , u &apos; / &apos; )
DCSP return result ( result )
DCSP if ( ( num _ cpus is not None ) and ( num _ cpus is not None ) ) : DCNL DCSP DCSP if verbose : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP
DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; path &apos; , * args )
DCSP if ( not isinstance ( arr , ( list , tuple ) ) ) : DCNL DCSP DCSP out = &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for char in arr : DCNL DCSP DCSP if ( char in table ) : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP return result
DCSP ( t , t ) = ( ( ( ( t - t ) * t ) + ( t * t ) ) , ( ( t &gt; = 0 ) and ( t &gt; = 0 ) ) ) DCNL DCSP if ( t = = 0 ) : DCNL DCSP DCSP return ( a , t ) DCNL DCSP else : DCNL DCSP DCSP return ( a , t )
DCSP course _ cohort = modulestore ( ) .get _ course ( course _ type ) DCNL DCSP if ( course _ cohort is None ) : DCNL DCSP DCSP return None DCNL DCSP course _ cohort _ cohort = Cohort@@ Factory ( course _ cohort _ name = assignment _ type , course _ cohort _ name = assignment _ type ) DCNL DCSP return course _ cohort _ cohort
DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( lines ) = = 0 ) : DCNL DCSP DCSP raise AssertionError ( ( &apos;
DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP text = text.replace ( &apos; &lt; &apos; , &apos; &amp; gt ; &apos; ) DCNL DCSP return text
DCSP output = Popen ( command , stdout = subprocess.PIPE , * * kwargs ) DCNL DCSP output = p.communicate ( ) &#91; 0 &#93; DCNL DCSP if ( p.returncode ! = 0 ) : DCNL DCSP DCSP raise CalledProcessError ( retcode , output ) DCNL DCSP return output
DCSP return _ parse _ emr _ step _ stderr _ logs ( fs , log _ dir _ stream , step _ id = step _ id )
DCSP return ( &apos; % s % s &apos; % ( colname ( colx ) , ( rowx + 1 ) ) )
DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP image _ id = _ get _ language _ id ( context ) DCNL DCSP if ( image _ id is None ) : DCNL
DCSP try : DCNL DCSP DCSP mContext = autoclass ( &apos; android.content.Context &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP pythonActivity = autoclass ( &apos; org.renpy.android.PythonService &apos; ) DCNL DCSP DCSP telephonyManager = cast ( &apos; android.telephony.TelephonyManager &apos; , pythonActivity.mService.getSystemService ( mContext.TELEPHONY _ SERVICE ) ) DCNL DCSP DCSP return phone@@ Count DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return render _ to _ response ( &apos; 403.html &apos; , { &apos; flatpage &apos; : f } ) DCNL DCSP return render _ to _ response ( &apos; login.html &apos; , { &apos; flatpage &apos; : f } , context _ instance = RequestContext ( request ) )
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP network = conn.create _ network _ interface ( name = name , subnet _ id = subnet _ id , subnet _ id = subnet _ id , private _ ip _ address = private _ ip _ address , description = description ) DCNL DCSP DCSP return { &apos; created &apos; : True } DCNL DCSP except BotoServerError as e : DCNL DCSP DCSP return { &apos; created &apos; : False , &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP return IMPL.network _ disassociate ( context , network _ id , disassociate _ host , disassociate _ project )
DCSP return ( S ( ( n - 1 ) ) / factorial ( ( n - 1 ) ) )
DCSP return apiproxy _ stub _ map.UserRPC ( &apos; certificates &apos; , deadline , deadline )
DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role ) ) DCNL DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role ) ) DCNL DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role ) ) DCNL DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role ) ) DCNL DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role ) ) DCNL DCSP try : DCNL DCSP
DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num = = 0 )
DCSP for start in settings.IGNORABLE _ 404 _ STARTS : DCNL DCSP DCSP if uri.startswith ( end ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP staticLib = ctypes.windll.LoadLibrary ( &apos; labjackud &apos; ) DCNL DCSP DCSP DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import win32api DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP import traceback DCNL DCSP DCSP DCSP DCSP DCSP traceback.print _ exc ( ) DCNL DCSP DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP old _ stdout = sys.stdout DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP sys.stdout = old _ stdout
DCSP return _ get _ powercfg _ value ( ( lambda x : ( x is not None ) ) , ( lambda x : ( x is not None ) ) , ( lambda x : ( x is not None ) ) , ( lambda x : ( x is not None ) ) , ( lambda x : ( x is not None ) ) )
DCSP try : DCNL DCSP DCSP return _ valid _ doc _ types ( ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP if pulls : DCNL DCSP DCSP start = ( datetime.utcnow ( ) - timedelta ( days = days ) ) DCNL DCSP else : DCNL DCSP DCSP start = ( datetime.utcnow ( ) - timedelta ( days = days ) ) DCNL DCSP if pulls : DCNL DCSP DCSP start = ( start + timedelta ( days = days ) ) DCNL DCSP DCSP if pulls : DCNL DCSP DCSP DCSP start = ( start + timedelta ( days = days ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP start = ( datetime.datetime.now ( g.tz ) - timedelta ( days = days ) ) DCNL DCSP DCSP if pulls : DCNL DCSP DCSP DCSP start = ( start + datetime.timedelta ( days = days ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP start = ( datetime.datetime.now ( g.tz ) - timedelta ( days = days ) ) DCNL DCSP DCSP if pulls : DCNL DCSP DCSP DCSP start = ( start + datetime.timedelta ( days = days ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP start = ( start + timedelta ( days = days ) ) DCNL DCSP DCSP
DCSP ( yield ) DCNL DCSP ( yield ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP if ( message is None ) : DCNL DCSP DCSP message = { } DCNL DCSP if ( message is None ) : DCNL DCSP DCSP message = { } DCNL DCSP if ( message is not None ) : DCNL DCSP DCSP if ( message is not None ) : DCNL DCSP DCSP DCSP if ( message is not None ) : DCNL DCSP DCSP DCSP DCSP warnings.warn ( message , stacklevel = 2 ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP warnings.warn ( message , stacklevel = 2 ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP def decorator ( function ) : DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return function ( * args , * * kwargs ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP return function ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if hasattr ( obj , &apos; _ _ file _ _ &apos; ) : DCNL DCSP DCSP return obj . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s . % s &apos; % ( obj . _ _ name _ _ , obj . _ _ name _ _ ) )
DCSP return ( &apos; % s _ % s &apos; % ( name , name ) )
DCSP ops = &#91; &#93; DCNL DCSP for ( op , op ) in zip ( ops , cost _ op ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP sess.run ( ops ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP print ( &apos; Failed DCSP to DCSP run DCSP % s : DCSP % s &apos; % ( e , e ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( e , e ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( e , e ) )
DCSP return _ update _ usage _ plan _ apis ( plan _ id , apis , &apos; update &apos; , region = region , key = key , keyid = keyid , profile = profile )
DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) : DCNL DCSP DCSP original = &apos; &apos; DCNL DCSP if ( original is None ) :
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP ret &#91; &apos; comment &apos; &#93; = &apos;
DCSP if items : DCNL DCSP DCSP return list ( list ( list ) ) DCNL DCSP else : DCNL DCSP DCSP return default
DCSP if ( not word ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP if ( not target ) : DCNL DCSP DCSP target = mat DCNL DCSP err _ code = _ eigenmat.apply _ log ( mat.p _ mat , target.p _ mat ) DCNL DCSP if err : DCNL DCSP DCSP raise generate _ exception ( err _ code ) DCNL DCSP return target
DCSP if ( not os.path.exists ( app ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( app ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP os.mkdir ( app ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP else : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir ,
DCSP subName = &apos; &apos; DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( subName = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return os.path.join ( subName , &apos; &apos; )
DCSP model = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP model = apps.get _ model ( u &apos;oauth &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;@@ social@@ account &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;@@ social@@ account &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP account = apps.get _ model ( u &apos;@@ social@@ account &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;@@ social@@ account &apos; , u &apos;@@ RemoteOrganization &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;@@ social@@ account &apos; , u &apos;@@ Social@@ Account &apos; ) DCNL DCSP for account in Social@@ Account.@@ objects.all ( ) : DCNL DCSP DCSP for account in Social@@ Account.@@ objects.all ( ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP account.@@ save ( ) DCNL DCSP DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP
DCSP metrics = get _ metrics ( ) DCNL DCSP try : DCNL DCSP DCSP delta = metrics &#91; &apos; data &apos; &#93; &#91; name &#93; DCNL DCSP except StandardError : DCNL DCSP DCSP delta = 0 DCNL DCSP return delta
DCSP for desc in _ description.@@ splitlines ( ) : DCNL DCSP DCSP print desc
DCSP mgr.set _ lang _ info ( lang , silvercity _ lexer = X@@ UL@@ exer ( ) , buf _ class = X@@ UL@@ CILEDriver , is _ cpln _ lang = True )
DCSP if ( not string ) : DCNL DCSP DCSP return DCNL DCSP for line in string : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith (
DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP result = script.pip (
DCSP if ( not isinstance ( pnode , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % type ( typ ) ) ) DCNL DCSP r = pnode &#91; 0 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93; DCNL DCSP if ( len ( content ) = = 1 ) : DCNL DCSP DCSP r = pnode &#91; 1 &#93;
DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if ( not os.path.isdir ( newdir ) ) : DCNL DCSP DCSP os.makedirs ( newdir ) DCNL DCSP if
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP else : DCNL DCSP
DCSP if ( not method.startswith ( &apos; _ _ &apos; ) ) : DCNL DCSP DCSP t = TestSet ( method , op ) DCNL DCSP DCSP if ( not method.startswith ( &apos; _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP callfuncs ( t ) DCNL DCSP DCSP t = TestSet ( method , op ) DCNL DCSP DCSP if t : DCNL DCSP DCSP DCSP t = TestSet ( method , op ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP t = TestSet ( method , op ) DCNL DCSP DCSP DCSP DCSP if ( t is None ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP callfuncs ( t ) DCNL DCSP DCSP DCSP except VerifyError as err : DCNL DCSP DCSP DCSP DCSP if ( not method.startswith ( &apos; _ _ &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP callfuncs ( t ) DCNL DCSP DCSP DCSP DCSP t = TestSet ( method , op ) DCNL DCSP DCSP DCSP DCSP if ( t is not None ) : DCNL DCSP DCSP DCSP DCSP
DCSP encodedStream = &apos; &apos; DCNL DCSP return ( -1 )
DCSP if ( not keyword ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return keyword
DCSP if ( not stream ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( stream , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP realm DCSP % r &apos; % stream ) ) DCNL DCSP if ( not isinstance ( stream , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP coroutine &apos; % stream ) ) DCNL DCSP if ( not isinstance ( stream , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP coroutine &apos; % stream ) ) DCNL DCSP if ( not isinstance ( stream , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP coroutine &apos; % stream ) ) DCNL DCSP if ( not isinstance ( stream , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP homematic = get _ component ( &apos; homematic &apos; ) DCNL DCSP return homematic.setup _ hmdevice _ discovery _ helper ( hass , HM@@ BinarySensor , discovery _ info , add _ devices )
DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP return None DCNL DCSP parent = xblock.get _ parent ( ) DCNL DCSP if ( parent is None )
DCSP return getCraftedTextFromText ( archive.getTextIfEmpty ( fileName , text ) , repository )
DCSP return rpc _ amqp.@@ multicall ( conf , context , topic , msg , timeout , connection _ pool )
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; simple = = 1.0 &apos; ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links &apos; , data.find _ links ,
DCSP secgroup = _ find _ secgroup ( cs , args.secgroup ) DCNL DCSP _ print _ secgroups ( &#91; secgroup &#93; )
DCSP with open ( filepath , &apos; wb &apos; ) as f : DCNL DCSP DCSP f.write ( content )
DCSP env1x = { } DCNL DCSP for ( k , v ) in environ.items ( ) : DCNL DCSP DCSP if isinstance ( v , unicode ) : DCNL DCSP DCSP DCSP v = v.encode ( &apos; ISO-8859-1 &apos; ) DCNL DCSP DCSP env1x &#91; k.encode ( &apos; ISO-8859-1 &apos; ) &#93; = v DCNL DCSP return env1x
DCSP try : DCNL DCSP DCSP os.rename ( archive , targetDir ) DCNL DCSP DCSP return True DCNL DCSP except Exception as error : DCNL DCSP DCSP if ( exc.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False
