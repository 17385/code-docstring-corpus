DCSP for app in frappe.get _ all _ apps ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP frappe.clear _ cache ( ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP frappe.clear _ cache ( ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP frappe.destroy ( )
DCSP module = AnsibleModule ( argument _ spec = ClcPublicIp . _ define _ module _ spec ( ) , supports _ check _ mode = True , supports _ check _ mode = True ) DCNL DCSP clc _ aa _ policy.process _ request ( )
DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL
DCSP for child in app.children : DCNL DCSP DCSP if ( getattr ( app , attr ) is not None ) : DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( child is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance (
DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n \ n &apos; ) DCNL DCSP DCSP with open ( &apos; / usr / bin / sh &apos; , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; .join ( ( ( &apos
DCSP script.scratch _ path.join ( &apos; blank.txt &apos; ) .write ( &apos; \ n &apos; ) DCNL DCSP script.pip ( &apos; install &apos; , &apos; blank.txt &apos; )
DCSP try : DCNL DCSP DCSP with open ( &apos; / proc / json &apos; , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP lines = pickle.load ( f ) DCNL DCSP DCSP except IOError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP break
DCSP if ( not msg.endswith ( &apos; \ n &apos; ) ) : DCNL DCSP DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP return msg
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not data ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL
DCSP return make _ option _ values ( accessing _ type , * * options )
DCSP nobs = len ( params ) DCNL DCSP nobs = len ( params ) DCNL DCSP nobs = len ( params ) DCNL DCSP nobs = len ( params ) DCNL DCSP nobs = len ( params ) DCNL DCSP nobs = len ( params ) DCNL DCSP if ( len ( nobs ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Length DCSP of DCSP arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( sigma2 ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Length DCSP of DCSP % s DCSP must DCSP be DCSP less DCSP than DCSP 1 DCSP or DCSP 2 &apos; % ( nout , ) ) ) DCNL DCSP if ( params &#91; ( -1 ) &#93; = = 1 ) : DCNL DCSP DCSP cdf = params &#91; ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( sigma2 ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( (
DCSP b = usertypes.Timer ( ) DCNL DCSP with pytest.raises ( ValueError ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP assert ( len ( q ( &apos; .dots &apos; ) ) = = 2 )
DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) :
DCSP ret = { &apos; name &apos; : name , &apos; data &apos; : data , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if data : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP send DCSP file DCSP { 0 } &apos; .format ( name ) DCNL DCSP else : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP send DCSP file DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP send DCSP file DCSP { 0 } : DCSP { 1 } &apos; .format ( name , data ) DCNL DCSP return ret
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP user = request.user DCNL DCSP except AttributeError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP user = get _ current _ request ( request ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP user = get _ current _ request ( request ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; site _ view &apos; , args = &#91; r.id &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; site _ view &apos; , args = &#91; r.id &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return IMPL.block _ device _ mapping _ update _ or _ create ( context , values )
DCSP return novaclient ( request ) .flavor _ list ( )
DCSP if ( format is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if isinstance ( format , unicode ) : DCNL DCSP DCSP if isinstance ( format , unicode ) : DCNL DCSP DCSP DCSP format = u &apos;utf-8 &apos; DCNL DCSP DCSP elif isinstance ( format , unicode ) : DCNL DCSP DCSP DCSP format = u &apos;utf-8 &apos; DCNL DCSP DCSP elif isinstance ( format , unicode ) : DCNL DCSP DCSP DCSP format = u &apos;utf-8 &apos; DCNL DCSP DCSP elif isinstance ( format , unicode ) : DCNL DCSP DCSP DCSP format = u &apos;utf-8 &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP encoding = u &apos;utf-8 &apos; DCNL DCSP return format
DCSP assign _ random _ category ( resource ) DCNL DCSP assign _ random _ category ( resource )
DCSP try : DCNL DCSP DCSP ( yield obj ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield obj ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP if ( not course ) : DCNL DCSP DCSP return False DCNL DCSP course _ key = CourseKey.from _ string ( course ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ item ( course _ key ) DCNL DCSP if ( not is _ enabled ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP DCSP if ( not enabled ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except KeyError : DCNL DCSP DCSP return False
DCSP seqs = &#91; &#93; DCNL DCSP for id _ in ids : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP out = open ( file _ lines , mode = &apos; w &apos; ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP return out
DCSP output = tf.clip _ by _ value ( output , target , epsilon ) DCNL DCSP return tf.reduce _ mean ( tf.cast ( output , tf.float32 ) )
DCSP if hasattr ( self , &apos; _ _ init _ _ &apos; ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP self.rollback ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP self.rollback ( )
DCSP try : DCNL DCSP DCSP with open ( aFileName ) as f : DCNL DCSP DCSP DCSP return f.read ( ) DCNL DCSP except IOError as e : DCNL DCSP DCSP print ( &apos; Error : DCSP % s &apos; % str ( e ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP functions = tuple ( functions ) DCNL DCSP if case _ sensitive : DCNL DCSP DCSP functions = tuple ( functions ) DCNL DCSP DCSP if case _ sensitive : DCNL DCSP DCSP DCSP args = tuple ( functions ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP types = &#91; &#93; DCNL DCSP DCSP for arg in functions : DCNL DCSP DCSP DCSP if isinstance ( arg , tuple ) : DCNL DCSP DCSP DCSP DCSP args = tuple ( arg ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP args = tuple ( symbols ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP types = tuple ( symbols ) DCNL DCSP DCSP if case _ sensitive : DCNL DCSP DCSP DCSP args = tuple ( symbols ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP types = &#91; &#93; DCNL DCSP DCSP for arg in functions : DCNL DCSP DCSP DCSP if isinstance ( arg , tuple ) : DCNL DCSP DCSP DCSP DCSP value = tuple ( arg ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP value = tuple ( arg ) DCNL DCSP DCSP DCSP
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP segments = &#91; &#93; DCNL DCSP for ( i , t ) in enumerate ( data ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP labels.append ( &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; \ n &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; \ n &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; \ n &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; \ n &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( &apos; \ n &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP s1 = os.lstat ( path ) DCNL DCSP except os.error : DCNL DCSP DCSP return False DCNL DCSP dev1 = s1.st _ dev DCNL DCSP dev2 = s2.st _ ino DCNL DCSP if ( dev1 ! = dev2 ) : DCNL DCSP DCSP return False DCNL DCSP ino1 = s1.st _ ino DCNL DCSP ino2 = s2.st _ ino DCNL DCSP if ( ino1 = = ino2 ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ vlm _ get _ media _ instance _ title &apos; , None ) or _ Cfunction ( &apos; libvlc _ vlm _ get _ media _ instance _ title &apos; , ( ( 1 , ) , ( 1 , ) ) , None , ctypes.c _ int , Instance , ctypes.c _ char _ p , ctypes.c _ char _ p ) ) DCNL DCSP return f ( p _ instance , psz _ name , i _ instance )
DCSP if isinstance ( s , type ) : DCNL DCSP DCSP return int ( s ) DCNL DCSP elif isinstance ( s , type ) : DCNL DCSP DCSP return int ( s ) DCNL DCSP elif isinstance ( s , type ) : DCNL DCSP DCSP return int ( s ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; unsupported DCSP type DCSP type : DCSP % r &apos; % s ) )
DCSP result = &#91; &#93; DCNL DCSP for path in path _ seqs : DCNL DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP return result
DCSP ips = netaddr.IPNetwork ( network ) DCNL DCSP return ips &#91; 0 &#93;
DCSP data = { } DCNL DCSP for ( name , value ) in data.iteritems ( ) : DCNL DCSP DCSP if ( name not in dataset ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name not in unique _ test ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP data &#91; key &#93; = { } DCNL DCSP DCSP for ( key , value ) in six.iteritems ( data ) : DCNL DCSP DCSP DCSP if ( name not in unique _ test ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( name not in unique _ test ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP return data
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ video _ get _ spu _ description &apos; , None ) or _ Cfunction ( &apos; libvlc _ video _ get _ spu _ description &apos; , ( ( 1 , ) , ) , None , ctypes.POINTER ( TrackDescription ) , MediaPlayer ) ) DCNL DCSP return f ( p _ mi )
DCSP if ( not isinstance ( data , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Expected DCSP a DCSP string , DCSP got DCSP % s &apos; % len ( data ) ) ) DCNL DCSP if isinstance ( data , ( list , tuple ) ) : DCNL DCSP DCSP for i in range ( len ( data ) ) : DCNL DCSP DCSP DCSP ( yield i ) DCNL DCSP else : DCNL DCSP DCSP for i in range ( len ( data ) ) : DCNL DCSP DCSP DCSP ( yield i )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP table.as _ html ( request )
DCSP closestDistance = 1e + 18 DCNL DCSP for nestedRing in nestedRings : DCNL DCSP DCSP if ( distance &lt; closestDistance ) : DCNL DCSP DCSP DCSP closestDistance = distance DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = distance DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = distance DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP DCSP closestDistance = 1e + 18 DCNL DCSP DCSP
DCSP if ( not only ) : DCNL DCSP DCSP projects = &#91; &#93; DCNL DCSP if ( not only ) : DCNL DCSP DCSP projects = &#91; &#93; DCNL DCSP if only : DCNL DCSP DCSP if ( not only ) : DCNL DCSP DCSP DCSP only _ only = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP projects = &#91; &#93; DCNL DCSP DCSP if ( not only ) : DCNL DCSP DCSP DCSP only _ only = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP projects = &#91; &#93; DCNL DCSP DCSP for ( k , v ) in enumerate ( projects ) : DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP
DCSP return ( &apos; % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s _ % s &apos; %
DCSP return _ _ execute _ cmd ( &apos; { 0 } DCSP set DCSP { 1 } &apos; .format ( ip , netmask , gateway ) )
DCSP try : DCNL DCSP DCSP return pickle.loads ( pickle.dumps ( obj , protocol ) ) DCNL DCSP except : DCNL DCSP DCSP pass
DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( not changed _ file ) : DCNL
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; % ( basedir , path ) ) ) DCNL DCSP if ( not isinstance ( tree2 , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( tree2 , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( tree2 , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP list DCSP of DCSP % s &apos; % ( basedir , path ) ) ) DCNL DCSP if ( not isinstance ( tree2 , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Source DCSP entry DCSP must DCSP be DCSP a DCSP string DCSP or DCSP
DCSP for db in User.objects.all ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP session.delete ( db ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP else : DCNL DCSP DCSP return &#91; gf _ mul ( f , a , p , K ) for cf in f &#93;
DCSP if ( server _ url is None ) : DCNL DCSP DCSP server _ url = server _ url DCNL DCSP if ( server _ url is None ) : DCNL DCSP DCSP server _ url = server _ url DCNL DCSP if ( server _ url is None ) : DCNL DCSP DCSP server _ url = server _ url DCNL DCSP if ( server _ url is None ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP review _ request = open ( server _ url , &apos; r &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP logging.error ( ( &apos; Failed DCSP to DCSP connect DCSP to DCSP % s : DCSP % s &apos; % ( server _ url , e ) ) ) DCNL DCSP DCSP raise Exception ( ( &apos; Failed DCSP to DCSP connect DCSP to DCSP % s : DCSP % s &apos; % ( server _ url , server _ url ) ) )
DCSP encoding = getattr ( argument , &apos; encoding &apos; , None ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = &apos; ascii &apos; DCNL DCSP return encoding
DCSP global _ default DCNL DCSP _ default = copy.deepcopy ( opts )
DCSP for ( key , value ) in d.items ( ) : DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in results ) : DCNL
DCSP text = GetQueryNodeText ( node ) DCNL DCSP for child in node.childNodes : DCNL DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP elif ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( child.nodeType = = child.ELEMENT _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( child.nodeType = = child.CDATA _ SECTION _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP output.append ( child.nodeType = 1 ) DCNL DCSP DCSP DCSP DCSP DCSP elif ( child.nodeType = = child.CDATA _ SECTION _ NODE ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if ( not isinstance ( namespace _ , basestring ) ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP else : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace _ name = name DCNL DCSP if ( namespace _ name is None ) : DCNL DCSP DCSP namespace
DCSP try : DCNL DCSP DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP except IndexError : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP text = text &#91; 1 : ( -1 ) &#93; DCNL DCSP return text
DCSP try : DCNL DCSP DCSP return list ( item ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return default
DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP lines = text.splitlines ( ) DCNL DCSP lines = &#91; &#93; DCNL DCSP for line in txt : DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP text = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue
DCSP if ( extension is None ) : DCNL DCSP DCSP extension = None DCNL DCSP if ( extension is None ) : DCNL DCSP DCSP extension = &apos; .&apos;.join ( &#91; base _ name , extension &#93; ) DCNL DCSP return os.path.join ( base _ name , extension )
DCSP for elt in iterator : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield item ) DCNL DCSP DCSP except StopIteration : DCNL DCSP DCSP DCSP pass
DCSP values = np.zeros ( ( m , n ) ) DCNL DCSP for ( k , v ) in enumerate ( v ) : DCNL DCSP DCSP if isinstance ( v , np.ndarray ) : DCNL DCSP DCSP DCSP values &#91; i &#93; = v DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP values &#91; k &#93; = v DCNL DCSP return values
DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) : DCNL DCSP DCSP filter _ func = None DCNL DCSP if ( filter _ func is None ) :
DCSP return Vector3 ( ( -9.876543219876543e + 17 ) , ( -9.876543219876543e + 17 ) )
DCSP if ( len ( node.inputs ) ! = 2 ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; ) DCNL DCSP if ( len ( node.inputs ) ! = 2 ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; ) DCNL DCSP if ( len ( node.inputs ) ! = 2 ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP for ( i , y ) in enumerate ( fs ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( ( i + 1 ) % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP global _ nxm _ header DCNL DCSP if ( _ nxm _ type is not None ) : DCNL DCSP DCSP _ nxm _ maskable = set ( _ nxm _ maskable ) DCNL DCSP if ( _ nxm _ type is not None ) : DCNL DCSP DCSP _ nxm _ maskable = set ( _ nxm _ maskable ) DCNL DCSP if ( _ nxm _ type is not None ) : DCNL DCSP DCSP _ nxm _ maskable = set ( _ nxm _ maskable ) DCNL DCSP if ( _ nxm _ type is not None ) : DCNL DCSP DCSP _ nxm _ maskable = set ( _ nxm _ maskable ) DCNL DCSP return _ nxm _ type
DCSP return get _ i18n ( ) .gettext ( string , * * variables )
DCSP X = np.zeros ( ( X.shape &#91; 0 &#93; , X.shape &#91; 1 &#93; ) ) DCNL DCSP for i in range ( ( len ( X ) - 1 ) ) : DCNL DCSP DCSP X = np.asarray ( X &#91; i &#93; , dtype = np.float64 ) DCNL DCSP DCSP for i in range ( n _ samples ) : DCNL DCSP DCSP DCSP X &#91; i &#93; = ( X &#91; i &#93; * y &#91; ( i + 1 ) &#93; ) DCNL DCSP return X
DCSP return &#91; translate _ exception ( req , e ) for e in e &#93;
DCSP import random DCNL DCSP try : DCNL DCSP DCSP import random DCNL DCSP except ImportError : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP return str ( uuid.uuid4 ( ) ) .decode ( &apos; hex &apos; ) DCNL DCSP except : DCNL DCSP DCSP pass DCNL DCSP return str ( uuid.uuid4 ( ) ) .decode ( &apos; hex &apos; )
DCSP return time.time ( )
DCSP ( rc , out , err ) = module.run _ command ( cmd , python _ shell = False ) DCNL DCSP if ( rc = = 0 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP txt = cPickle.load ( f ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP DCSP raise DCNL DCSP except Exception as e : DCNL DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP raise DCNL DCSP except Exception as e : DCNL DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % e ) )
DCSP provider = driver . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( driver is not None ) : DCNL DCSP DCSP driver . _ _ name _ _ = driver . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP driver . _ _ name _ _ = driver . _ _ name _ _ DCNL DCSP _ drivers &#91; driver &#93; = driver
DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( table , ( list , tuple ) ) ) : DCNL DCSP
DCSP splitLine = line.split ( ) DCNL DCSP if ( len ( splitLine ) &gt; 1 ) : DCNL DCSP DCSP return splitLine &#91; 0 &#93; DCNL DCSP return splitLine &#91; 0 &#93;
DCSP if ( not isinstance ( packet , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( packet , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( packet , list ) : DCNL DCSP DCSP return &#91; r &#93; DCNL DCSP elif isinstance ( packet , list ) : DCNL DCSP DCSP return list ( map ( int , packet ) ) DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP items = &#91; &#93; DCNL DCSP for item in request : DCNL DCSP DCSP item = request.META.get ( key , None ) DCNL DCSP DCSP if ( item is not None ) : DCNL DCSP DCSP DCSP item &#91; key &#93; = item DCNL DCSP return item
DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( tck , BSpline ) ) : DCNL DCSP DCSP raise TypeError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP
DCSP request = context &#91; &apos; request &apos; &#93; DCNL DCSP response _ format = &apos; html &apos; DCNL DCSP if ( &apos; response _ format &apos; in context ) : DCNL DCSP DCSP response _ format = context &#91; &apos; response _ format &apos; &#93; DCNL DCSP return Markup ( render _ to _ string ( &apos; core / tags / tags _ list _ list &apos; , { &apos; objects &apos; : objects , &apos; skip _ group &apos; : skip _ group } , context _ instance = RequestContext ( request ) , response _ format = response _ format ) )
DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pci _ addr is None
DCSP finder = _ getfinder ( ) DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( info is None ) : DCNL DCSP
DCSP labels = &#91; &#93; DCNL DCSP for label in labels : DCNL DCSP DCSP if ( label not in labels ) : DCNL DCSP DCSP DCSP labels.append ( label ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP labels.append ( label ) DCNL DCSP return labels
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , runas = user , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP user DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP user DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP user DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP user DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos;
DCSP return _ list _ users ( )
DCSP frame = getattr ( frame , &apos; _ _ frame _ _ &apos; , None ) DCNL DCSP if ( frame is not None ) : DCNL DCSP DCSP frame = frame.f _ back DCNL DCSP return frame
DCSP if ( not u ) : DCNL DCSP DCSP return K.zero DCNL DCSP else : DCNL DCSP DCSP return f &#91; 0 &#93;
DCSP return codecs.load _ random _ bytes ( buffer _ name )
DCSP d = { } DCNL DCSP for ( k , v ) in enumerate ( split ) : DCNL DCSP DCSP if ( k not in top _ k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP d &#91; k &#93; = v DCNL DCSP return d
DCSP for pattern in files : DCNL DCSP DCSP if fnmatch.fnmatch ( fname , fname ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; vsphere.system _ info &apos; &#93; ( * args , * * kwargs ) DCNL DCSP except TerminalException as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP raise e DCNL DCSP return result
DCSP axis = _ normalize _ axis ( axis , ndim ( x ) ) DCNL DCSP return tf.reduce _ mean ( x , reduction _ indices = axis , keepdims = keepdims )
DCSP if ( subjects _ dir is None ) : DCNL DCSP DCSP subjects _ dir = get _ subjects _ dir ( subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , verbose = verbose ) DCNL DCSP with open ( src _ from , &apos; w &apos; ) as fid : DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src _ from ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src _ from ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src _ from ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src ) DCNL DCSP DCSP logger.info ( &apos; Loading DCSP spaces DCSP for DCSP % s &apos; , src ) DCNL DCSP DCSP logger.info (
DCSP with open ( filepath _ or _ buffer , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return dict ( ( ( v , v ) for ( v , v ) in six.iteritems ( options ) if ( v is not None ) ) )
DCSP if ( get _ configured _ provider ( ) is False ) : DCNL DCSP DCSP return False DCNL DCSP if ( get _ dependencies ( ) is False ) : DCNL DCSP DCSP return False DCNL DCSP return _ _ virtualname _ _
DCSP R = p.ring DCNL DCSP R = R.gens.index ( x ) DCNL DCSP for expv in p : DCNL DCSP DCSP if ( monomial _ mul ( expv , expv ) = = expv ) : DCNL DCSP DCSP DCSP break DCNL DCSP return p1
DCSP if ( rospack is None ) : DCNL DCSP DCSP rospack = rospkg.RosPack ( ) DCNL DCSP return _ generate _ python _ path ( pkg , rospack )
DCSP if ( lastlines _ dirpath is None ) : DCNL DCSP DCSP lastlines _ dirpath = os.getcwd ( ) DCNL DCSP if ( not os.path.exists ( lastlines _ dirpath ) ) : DCNL DCSP DCSP os.makedirs ( lastlines _ dirpath ) DCNL DCSP if ( not os.path.exists ( lastlines _ dirpath ) ) : DCNL DCSP DCSP os.makedirs ( lastlines _ dirpath ) DCNL DCSP if ( not os.path.exists ( lastlines _ dirpath ) ) : DCNL DCSP DCSP os.makedirs ( lastlines _ dirpath ) DCNL DCSP if ( not os.path.exists ( lastlines _ dirpath ) ) : DCNL DCSP DCSP raise ValueError ( &apos; No DCSP paths DCSP found . &apos; ) DCNL DCSP with open ( lastlines _ dirpath , &apos; r &apos; ) as f : DCNL DCSP DCSP for line in items : DCNL DCSP DCSP DCSP fh.write ( ( &apos; % s \ n &apos; % line ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP fh.write ( ( &apos; % s \ n &apos; % line ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP fh.write ( ( &apos; % s DCSP % s \ n &apos; % (
DCSP if isinstance ( data , dict ) : DCNL DCSP DCSP return data DCNL DCSP elif isinstance ( keys , dict ) : DCNL DCSP DCSP return &#91; data &#93; DCNL DCSP else : DCNL DCSP DCSP return data
DCSP try : DCNL DCSP DCSP user = get _ user ( user , api _ name ) DCNL DCSP except Profile.DoesNotExist : DCNL DCSP DCSP return False DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP user = User.objects.get ( username = user ) DCNL DCSP except Profile.DoesNotExist : DCNL DCSP DCSP return False DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user = = api _ name ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return r.type.c _ extract ( r , name , sub )
DCSP if isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return value
DCSP return ( &apos; % s : % s &apos; % ( url , ident ) )
DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP pointBegin = loop &#91; pointIndex &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) )
DCSP if ( not is _ frame ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( is _ frame is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return ( (
DCSP xs = np.asarray ( xs ) DCNL DCSP if ( typecode is not None ) : DCNL DCSP DCSP ys = np.r _ &#91; ( x , ys ) &#93; DCNL DCSP else : DCNL DCSP DCSP ys = np.array ( xs ) DCNL DCSP return ( xs , ys )
DCSP response = _ client _ wrapper ( &apos; create _ volume &apos; , name , driver = driver , driver _ opts = driver _ opts ) DCNL DCSP _ clear _ context ( ) DCNL DCSP return response
DCSP linter.register _ reporter ( JSONReporter )
DCSP ( i , j ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP image = ( i &gt; = 0 ) .astype ( float ) DCNL DCSP result = filters.scharr _ v ( image ) DCNL DCSP assert _ allclose ( result , 0 )
DCSP lines = &#91; &#93; DCNL DCSP for line in context _ lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP options = parser.parse _ options ( ) DCNL DCSP options = parser.parse _ args ( ) DCNL DCSP return options
DCSP version _ suffix = &apos; libxslt- % s.tar.gz &apos; DCNL DCSP return download _ library ( dest _ dir , LIBXML2 _ LOCATION , &apos; libxslt &apos; , version _ re , LIBXML2 _ LOCATION , &apos; libxslt &apos; , version _ re , filename )
DCSP if isinstance ( course _ key , basestring ) : DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP else : DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP task _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP if ( course _ key is None ) : DCNL DCSP DCSP return DCNL DCSP task _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP task _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key )
DCSP for path in paths : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.remove ( path ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) : DCNL DCSP DCSP start _ obj = None DCNL DCSP if ( start _ obj is None ) :
DCSP return send _ email _ to _ student ( student , param _ dict , language = language )
DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; profiler _ log _ dir &apos; , _ dir )
DCSP return subprocess.check _ call ( cmd , shell = True )
DCSP state = getattr ( exc , &apos; state &apos; , None ) DCNL DCSP if ( state is None ) : DCNL DCSP DCSP raise exc.UnmappedInstanceError ( state ) DCNL DCSP else : DCNL DCSP DCSP raise exc.UnmappedInstanceError ( state )
DCSP i = 0 DCNL DCSP for i in range ( i ) : DCNL DCSP DCSP if ( i &lt; i ) : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP i + = 1 DCNL DCSP return i
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP print ( f.read ( ) )
DCSP dirs = &#91; &#93; DCNL DCSP for ( dirpath , dirnames , filenames ) in os.walk ( package ) : DCNL DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP DCSP if include _ py _ files : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP dirs.remove ( subdir ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP
DCSP if ( not isinstance ( plaintext , unicode ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , unicode ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , bytes ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , bytes ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , bytes ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , bytes ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plaintext , unicode ) ) : DCNL DCSP
DCSP referrers = &#91; &#93; DCNL DCSP groups = &#91; &#93; DCNL DCSP for acl in acl _ string.split ( &apos; , &apos; ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP DCSP groups = groups &#91; : ( -1 ) &#93; DCNL DCSP
DCSP p = Popen ( * args , * * kwargs ) DCNL DCSP p = Popen ( args , stdout = PIPE , stderr = PIPE , * args , * * kwargs ) DCNL DCSP try : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP finally : DCNL DCSP DCSP os.close ( fd )
DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP if ( not f ) : DCNL DCSP DCSP return dup _ add ( f , p , K ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP else : DCNL DCSP DCSP return dup _
DCSP _ _ grab _ lock ( ) DCNL DCSP try : DCNL DCSP DCSP _ _ import _ _ ( collection.collection _ type ( ) ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP return IMPL.create _ instance ( c _ instance )
DCSP return s3 _ rest _ controller ( )
DCSP data = { &apos; hostname &apos; : hostname , &apos; service &apos; : hostname , &apos; service &apos; : hostname , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if ( not service ) : DCNL DCSP DCSP return { } DCNL DCSP ret = { &apos; hostname &apos; : hostname , &apos; service &apos; : hostname , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if ( not service ) : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Service DCSP { 0 } DCSP is DCSP not DCSP available &apos; .format ( hostname ) DCNL DCSP else : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Service DCSP { 0 } DCSP is DCSP not DCSP available &apos; .format ( hostname ) DCNL DCSP return ret
DCSP print ( ( &apos
DCSP return request.current _ route _ url ( request , * elements , * * kw )
DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % code ) ) DCNL DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % code ) ) DCNL DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % code ) ) DCNL DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % code ) ) DCNL DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % code ) ) DCNL
DCSP for ( key , val ) in metadata.items ( ) : DCNL DCSP DCSP if ( key not in metadata ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( val , dict ) : DCNL DCSP DCSP DCSP for ( k , v ) in metadata.items ( ) : DCNL DCSP DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP v &#91; k &#93; = v DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP metadata DCSP type : DCSP % s &apos; % k ) ) DCNL DCSP return metadata
DCSP try : DCNL DCSP DCSP return factory ( type ) DCNL DCSP except KeyError : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP type : DCSP % s &apos; % type ) )
DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP loc = find _ by _ loc ( loc , loc ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None DCNL DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP loc = int ( loc ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None DCNL DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP loc = int ( loc ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP loc = int ( loc ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP loc = int ( loc ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( not loc ) : DCNL DCSP DCSP return None DCNL DCSP
DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = None DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = None DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP if ( ctx is not None ) : DCNL DCSP DCSP ctx = ctx DCNL DCSP else : DCNL
DCSP errors = { } DCNL DCSP for ( key , value ) in errors : DCNL DCSP DCSP if ( key not in errors ) : DCNL DCSP DCSP DCSP errors &#91; key &#93; = errors &#91; key &#93; DCNL DCSP return errors
DCSP if ( not u ) : DCNL DCSP DCSP return dup _ exquo _ ground ( f , m , u , K ) DCNL DCSP if ( not u ) : DCNL DCSP DCSP return dup _ LC ( f , u , K ) DCNL DCSP else : DCNL DCSP DCSP return dmp _ ground _ ground ( f , m , u , K )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP stack.pop ( ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP sys.stderr.write ( ( &apos; % s : DCSP % s \ n &apos; % ( e , e ) ) )
DCSP if ( library _ id is None ) : DCNL DCSP DCSP library _ id = get _ object _ or _ 404 ( rd , library _ id = library _ id ) DCNL DCSP else : DCNL DCSP DCSP return { u &apos;library _ id &apos; : md _ id , u &apos;library _ id &apos; : library _ id }
DCSP if ( not isinstance ( network _ info , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP dictionary . &apos; % template _ info ) ) DCNL DCSP if ( not isinstance ( network _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP network DCSP template &apos; % template _ info ) ) DCNL DCSP if ( not isinstance ( network _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP network DCSP template &apos; % template _ info ) ) DCNL DCSP if ( not isinstance ( network _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP network DCSP template &apos; % template _ info ) ) DCNL DCSP if ( not isinstance ( network _ info , dict ) ) : DCNL
DCSP tmpdir = tempfile.mkdtemp ( ) DCNL DCSP os.chdir ( tmpdir ) DCNL DCSP return tmpdir
DCSP cmd = &apos; xbps-install DCSP { 0 } &apos; .format ( _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) ) DCNL DCSP _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP if settings.USE _ TZ : DCNL DCSP DCSP return timezone.make _ aware ( value , timezone.get _ current _ timezone ( ) ) DCNL DCSP return value
DCSP CONFIG.AddOption ( type _ info.String ( name = name , default = default , description = help ) )
DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP from django.conf import settings DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP from django.conf import settings DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP from django.conf import settings DCNL
DCSP @ functools.wraps ( fn ) DCNL DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP return decorated
DCSP ret = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( saltenv , saltenv = saltenv , * * kwargs ) DCNL DCSP if ( not ret ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP if ( not ret ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP return ret
DCSP data = _ get _ data ( ) DCNL DCSP return du.process _ recarray _ pandas ( data , endog _ idx = 0 , dtype = float )
DCSP for item in seq : DCNL DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP for item in seq : DCNL DCSP DCSP DCSP DCSP ( yield item ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield item )
DCSP normalizedSegment = ( pointEnd - pointBegin ) DCNL DCSP normalizedSegmentLength = abs ( normalizedSegment ) DCNL DCSP if ( normalizedSegmentLength = = 0.0 ) : DCNL DCSP DCSP return False DCNL DCSP normalizedSegment / = normalizedSegmentLength DCNL DCSP segmentYMirror = complex ( normalizedSegment.real , ( - normalizedSegment.imag ) ) DCNL DCSP pointBeginRotated = ( segmentYMirror * pointBegin ) DCNL DCSP pointEndRotated = ( segmentYMirror * pointEnd ) DCNL DCSP if euclidean.isLoopListIntersectingInsideXSegment ( loops , pointBeginRotated.real , pointEndRotated.real , segmentYMirror , pointBeginRotated.imag ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP diffs = &#91; &#93; DCNL DCSP for ( k , v ) in diffs : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP out.append ( ( &apos; % s = % s &apos; % ( k , v ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out.append ( ( &apos; % s = % s &apos; % ( k , v ) ) ) DCNL DCSP return &apos; \ n &apos; .join ( out )
DCSP tax = get _ object _ or _ 404 ( Tax , pk = tax _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( tax ) ) : DCNL DCSP DCSP return render _ to _ response ( &apos; sales / tax _ view &apos; , { &apos; tax &apos; : tax } , context _ instance = RequestContext ( request ) , response _ format = response _ format ) DCNL DCSP return render _ to _ response ( &apos; sales / tax _ view &apos; , { &apos; tax &apos; : tax } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = int ( time.time ( ) ) DCNL DCSP time _ time = time.time ( )
DCSP if ( not http _ date ) : DCNL DCSP DCSP return http _ date.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) DCNL DCSP return http _ date _ to _ dt ( http _ date , &apos; % Y- % m- % d DCSP % H : % M : % S &apos; )
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP homematic = get _ component ( &apos; homematic &apos; ) DCNL DCSP return homematic.setup _ hmdevice _ discovery _ helper ( hass , HMBinarySensor , discovery _ info , add _ devices )
DCSP if ( action = = &apos; action &apos; ) : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution ) DCNL DCSP else : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution )
DCSP if ( service is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP get _ conn DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function , DCSP or DCSP with DCSP the DCSP --list-images DCSP option &apos; ) DCNL DCSP if ( service is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP get _ conn DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( service is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP get _ conn DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( service is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP get _ conn DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( service is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP get _ conn DCSP function DCSP must DCSP be DCSP called DCSP with
DCSP if ( axis is None ) : DCNL DCSP DCSP n = np.asarray ( s ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( axis = = 0 )
DCSP course _ key = CourseKey.from _ string ( user ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from
DCSP if ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP if ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP if ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP elif ( start _ id is None ) : DCNL DCSP DCSP start _ id = None DCNL DCSP else : DCNL DCSP DCSP start _ id =
DCSP cnn = CondensedNearestNeighbour ( random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( RuntimeError , cnn.sample , X , Y )
DCSP return ( ( x = = y ) and ( y = = y ) )
DCSP if ( uid is None ) : DCNL DCSP DCSP uid = pwd.getpwuid ( uid ) .pw _ uid DCNL DCSP else : DCNL DCSP DCSP uid = pwd.getpwuid ( uid ) .pw _ uid DCNL DCSP return uid
DCSP if isinstance ( typ , ( list , tuple ) ) : DCNL DCSP DCSP typ = typ DCNL DCSP else : DCNL DCSP DCSP typ = typ DCNL DCSP return set _ to _ python _ list ( typ , payload , c )
DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( filename = = &apos; &apos; ) : DCNL DCSP DCSP return
DCSP try : DCNL DCSP DCSP del args &#91; 0 &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP del args &#91; 0 &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP del args &#91; 0 &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass
DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP if ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP elif ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP home = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP else : DCNL DCSP DCSP
DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ pool _ list DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ pool _ list DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ pool _ list DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ pool _ list DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP table = Table ( table _ name , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP return conn.delete _ table ( table )
DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( names ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( names ) = = 2 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP form = LanguageForm ( form _ data ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.get _ queue ( name , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP algebraic &apos; % p ) ) DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( p , Mul ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( p , Mul ) : DCNL DCSP DCSP
DCSP event = get _ object _ or _ 404 ( Event , pk = event _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( event ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Event &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; event &apos; : event , &apos; event &apos; : event } ) DCNL DCSP return render _ to _ response ( &apos; events / event _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return ( get _ media _ request ( request ) is not None )
DCSP return list ( vpc _ conn.get _ subnets ( vpc _ id , vpc _ id ) )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with NumpyRNGContext ( 123456789 ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP detector.detect ( image ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with NumpyRNGContext ( 123456789 ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP DCSP detector.detect ( image ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass
DCSP ( i , j ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP for i in range ( 1 , ( result.shape &#91; 1 &#93; + 1 ) ) : DCNL DCSP DCSP for i in range ( 1 , ( result.shape &#91; 1 &#93; + 1 ) ) : DCNL DCSP DCSP DCSP for j in range ( i ) : DCNL DCSP DCSP DCSP DCSP for j in range ( i ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP DCSP assert ( i = = j ) DCNL DCSP DCSP DCSP DCSP assert ( i = = j ) DCNL DCSP DCSP DCSP DCSP assert ( i = = 0 ) DCNL DCSP DCSP DCSP DCSP assert ( i = = 0 ) DCNL DCSP DCSP DCSP DCSP assert ( i = = 0 ) DCNL DCSP DCSP DCSP DCSP assert ( i = = 0 ) DCNL DCSP DCSP DCSP DCSP assert ( i
DCSP if path.startswith ( &apos; / &apos; ) : DCNL DCSP DCSP path = path &#91; : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP path = path DCNL DCSP return os.path.join ( path , path )
DCSP if zone : DCNL DCSP DCSP cmd = &apos; --zone = { 0 } DCSP --add-interface = { 1 } &apos; .format ( zone , interface ) DCNL DCSP else : DCNL DCSP DCSP cmd = &apos; --zone = { 0 } DCSP --add-interface = { 1 } &apos; .format ( zone , interface ) DCNL DCSP if permanent : DCNL DCSP DCSP cmd + = &apos; DCSP --permanent &apos; DCNL DCSP return _ _ firewall _ cmd ( cmd )
DCSP is _ dylib = _ DYLIB _ RE.match ( filename ) DCNL DCSP if ( not is _ dylib ) : DCNL DCSP DCSP return None DCNL DCSP return is _ dylib.groupdict ( )
DCSP outvec = defaultdict ( list ) DCNL DCSP for i in range ( len ( sum ) ) : DCNL DCSP DCSP for i in range ( ( len ( x ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP x &#91; i &#93; + = sum ( ( ( x &#91; i &#93; - x &#91; i &#93; ) + ( x &#91; i &#93; * * 2 ) ) ) DCNL DCSP return outvec
DCSP if ( not is _ all _ disks ( ) ) : DCNL DCSP DCSP raise exception.NovaException ( ( _ ( &apos; Unable DCSP to DCSP find DCSP disk DCSP list DCSP for DCSP device DCSP % s &apos; ) % get _ all _ disks ( ) ) ) DCNL DCSP devs = &#91; &#93; DCNL DCSP for device in get _ devices _ partitions ( ) : DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not device _ device _ only ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP try : DCNL DCSP DCSP return True DCNL DCSP except AttributeError : DCNL DCSP DCSP return False
DCSP cli.register ( &apos; building-command-table.cloudtrail &apos; , inject _ commands )
DCSP if ( seed is None ) : DCNL DCSP DCSP random.seed ( seed ) DCNL DCSP random.seed ( seed ) DCNL DCSP if seed : DCNL DCSP DCSP random.seed ( seed )
DCSP if ( not os.path.exists ( os.path.dirname ( _ _ file _ _ ) ) ) : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; r &apos; ) , &apos; r &apos; ) as f : DCNL DCSP DCSP f.write ( f.read ( ) )
DCSP if ( not isinstance ( y , basestring ) ) : DCNL DCSP DCSP raise ValueError ( u &apos; { 0 } DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; .format ( message ) ) DCNL DCSP if ( not isinstance ( y , basestring ) ) : DCNL DCSP DCSP raise ValueError ( u &apos; { 0 } DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; .format ( message ) ) DCNL DCSP if ( not isinstance ( y , basestring ) ) : DCNL DCSP DCSP raise ValueError ( u &apos; { 0 } DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; .format ( message ) ) DCNL DCSP if ( not isinstance ( y , basestring ) ) : DCNL DCSP DCSP raise ValueError ( u &apos; { 0 } DCSP is DCSP not DCSP a DCSP valid DCSP message &apos; .format ( message ) ) DCNL DCSP if ( not isinstance ( x , basestring ) ) : DCNL DCSP DCSP raise ValueError ( u &apos; { 0 } DCSP not DCSP found &apos; .format ( message ) ) DCNL DCSP try : DCNL DCSP DCSP
DCSP for ( key , value ) in dictionary.iteritems ( ) : DCNL DCSP DCSP if ( element is value ) : DCNL DCSP DCSP DCSP return key
DCSP for tag in tags : DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not tags ) : DCNL DCSP DCSP
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP DCSP DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP os.remove ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP os.remove ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; ) )
DCSP x = np.asarray ( x ) DCNL DCSP if ( n _ neighbors is not None ) : DCNL DCSP DCSP x = x &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP x = x &#91; 0 &#93; DCNL DCSP if ( n _ neighbors is not None ) : DCNL DCSP DCSP x = x &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP x = x &#91; 0 &#93; DCNL DCSP return x
DCSP if ( len ( surf &#91; &apos; rr &apos; &#93; ) &gt; 0 ) : DCNL DCSP DCSP surf &#91; &apos; rr &apos; &#93; = surf &#91; &apos; rr &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP surf &#91; &apos; rr &apos; &#93; = surf &#91; &apos; rr &apos; &#93; DCNL DCSP return surf
DCSP return block _ name _ for _ block ( block )
DCSP try : DCNL DCSP DCSP result = f ( * requireds , * * defaults ) DCNL DCSP except : DCNL DCSP DCSP result = f ( * requireds , * * defaults ) DCNL DCSP return result
DCSP kwargs &#91; &apos; session &apos; &#93; = session DCNL DCSP return login ( session , * args , * * kwargs )
DCSP if ( not isinstance ( dummies , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; polynomial DCSP division DCSP must DCSP be DCSP a DCSP list DCSP of DCSP tuple &apos; ) DCNL DCSP if ( not isinstance ( a , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; polynomial DCSP division &apos; ) DCNL DCSP if ( not isinstance ( a , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; r DCSP must DCSP be DCSP a DCSP tuple &apos; ) DCNL DCSP if ( not isinstance ( a , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; r DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; r DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; must DCSP be DCSP a DCSP
DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( status = = 0 ) : DCNL DCSP DCSP return DCNL DCSP logger.setLevel ( status )
DCSP data = Version.objects.get ( pk = version _ pk ) DCNL DCSP if html : DCNL DCSP DCSP link = ( &apos; % s : % s &apos; % ( version , version ) ) DCNL DCSP else : DCNL DCSP DCSP url = ( &apos; % s / % s / % s &apos; % ( version , version , version ) ) DCNL DCSP if html : DCNL DCSP DCSP data = ( &apos; % s : % s &apos; % ( version , version ) ) DCNL DCSP if html : DCNL DCSP DCSP data = ( &apos; % s : % s &apos; % ( version , version ) ) DCNL DCSP else : DCNL DCSP DCSP data = &apos; application / json &apos; DCNL DCSP if html : DCNL DCSP DCSP content = ( &apos; % s : % s &apos; % ( version , version ) ) DCNL DCSP if html : DCNL DCSP DCSP data = ( &apos; % s : % s &apos; % ( version , version ) ) DCNL DCSP else : DCNL DCSP DCSP data = &apos; application / json &apos; DCNL DCSP if html : DCNL DCSP
DCSP return { &apos; user &apos; : user , &apos; password &apos; : user.email , &apos; password &apos; : user.email , &apos; password &apos; : user.email }
DCSP if ( not color ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( color = = &apos; # &apos; ) : DCNL DCSP DCSP return &apos; &apos;.join ( &#91; ( &apos; % 02x &apos; % ord ( i ) ) for i in color &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x % 02x &apos; %
DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP bot.reply ( u &quot; Sorry , DCSP
DCSP subscriptions _ model = user _ models.ExplorationUserDataModel.get ( exploration _ id , exploration _ id ) DCNL DCSP if ( new _ role ! = new _ role ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unrecognized DCSP role DCSP % s &apos; % exploration _ id ) ) DCNL DCSP if ( new _ role ! = new _ role ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unrecognized DCSP role DCSP % s : DCSP % s &apos; % ( exploration _ id , new _ role ) ) ) DCNL DCSP if ( new _ role ! = new _ role ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unrecognized DCSP role DCSP % s DCSP for DCSP exploration DCSP % s &apos; % ( exploration _ id , new _ role ) ) ) DCNL DCSP if ( new _ role ! = new _ role ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP subscription DCSP id DCSP % s &apos; % exploration _ id ) ) DCNL DCSP if ( new _ role ! = new _ role ) : DCNL DCSP DCSP raise
DCSP while True : DCNL DCSP DCSP result = pending _ work _ items &#91; work _ reference &#93; DCNL DCSP DCSP if ( result is None ) : DCNL DCSP DCSP DCSP result = pending _ work _ items &#91; result _ item.work _ id &#93; DCNL DCSP DCSP DCSP if result : DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP postag ( incremental _ sort = True , sort _ keys = True , sort _ keys = True , sort _ keys = True , sort _ keys = True )
DCSP if ( not isinstance ( node.op , T.Join ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( node.inputs ) = = 1 ) :
DCSP r = s3 _ rest _ controller ( ) DCNL DCSP assert ( r &#91; &apos; status &apos; &#93; = = 200 ) DCNL DCSP assert ( r &#91; &apos; status &apos; &#93; = = 200 ) DCNL DCSP assert ( r &#91; &apos; status &apos; &#93; = = 200 )
DCSP return _ strips ( &apos; l &apos; , text , remove )
DCSP fileName = fabmetheus _ interpret.getFirstTranslatorFileNameUnmodified ( fileName ) DCNL DCSP if ( fileName ! = &apos; &apos; ) : DCNL DCSP DCSP skeinforge _ craft.writeOutput ( fileName )
DCSP try : DCNL DCSP DCSP shutil.move ( src , dst ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if ( iri is None ) : DCNL DCSP DCSP return iri DCNL DCSP return urllib.quote ( iri _ to _ uri ( iri ) )
DCSP if ( sys.version _ info &gt; = ( 3 , ) ) : DCNL DCSP DCSP return ( &#91; &#93; , &#91; &#93; ) DCNL DCSP else : DCNL DCSP DCSP return &#91; ( &apos; % s DCSP % s &apos; % ( version , _ _ version _ _ ) ) &#93;
DCSP if ( resource is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( resource , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % r &apos; % ( resource , resource ) ) ) DCNL DCSP if ( not isinstance ( resource , dict ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % r &apos; % ( resource , resource ) ) ) DCNL DCSP if ( not isinstance ( resource , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % r &apos; % ( resource , resource ) ) ) DCNL DCSP return resource
DCSP if ( not conf _ path ) : DCNL DCSP DCSP conf _ path = _ get _ conf _ file ( conf _ path ) DCNL DCSP conf = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP config DCSP { 1 } &apos; .format ( conf _ path , conf _ path ) , python _ shell = False ) DCNL DCSP if ( not data ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Unable DCSP to DCSP read DCSP file DCSP { 0 } &apos; .format ( conf _ path ) ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( scale is None ) : DCNL DCSP DCSP scale = int ( ( scale * 1000000.0 ) ) DCNL DCSP return ( ( ( ( ( ( ( ( ( delta.days * 24 ) * 3600 ) * 24 ) * 3600 ) + ( 10 * * 6 ) ) + ( 10 * * 6 ) ) * 1000000.0 )
DCSP if ( key in table ) : DCNL DCSP DCSP return table &#91; key &#93; DCNL DCSP else : DCNL DCSP DCSP return table &#91; key &#93;
DCSP _ global _ lock.acquire ( ) DCNL DCSP try : DCNL DCSP DCSP _ global _ lock.acquire ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP _ global _ lock.acquire ( ) DCNL DCSP try : DCNL DCSP DCSP _ global _ lock.acquire ( ) DCNL DCSP finally : DCNL DCSP DCSP _ global _ lock.release ( ) DCNL DCSP return _ global _ lock.release ( )
DCSP if ( not hasattr ( packageName , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % packageName ) ) DCNL DCSP if ( not hasattr ( pathLook , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % packageName ) ) DCNL DCSP if ( not hasattr ( pathLook , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % packageName ) ) DCNL DCSP if ( not hasattr ( pathLook , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % packageName ) ) DCNL DCSP if ( not hasattr ( pathLook , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not
DCSP return _ osquery _ cmd ( table = &apos; kernel _ info &apos; , attrs = attrs , where = where )
DCSP for i in range ( ( len ( geometry ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP for i in range ( ( len ( geometry ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP if ( ( cell &#91; i &#93; = = &apos; # &apos; ) and ( row &#91; i &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP return False
DCSP tax _ class = get _ tax _ class ( ) DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class ) : DCNL DCSP DCSP return None DCNL DCSP if ( not tax _ class
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; )
DCSP if isinstance ( iterable , list ) : DCNL DCSP DCSP return sum ( ( float ( x ) for x in iterable ) ) DCNL DCSP else : DCNL DCSP DCSP return sum ( ( float ( x ) for x in iterable ) )
DCSP content _ type = &apos; utf-8 &apos; DCNL DCSP try : DCNL DCSP DCSP with open ( entity _ file , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP logging.exception ( e ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP data = json.loads ( content ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP data = json.loads ( content ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP data = json.loads ( content ) DCNL DCSP DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP data = json.loads ( content ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP data = &#91; &#93; DCNL DCSP DCSP DCSP
DCSP result = IMPL.quota _ destroy _ update ( context , project _ id , resource , allocated ) DCNL DCSP return result
DCSP if ( size is None ) : DCNL DCSP DCSP size = None DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = None DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = None DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = None DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = None DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size =
DCSP return source.replace ( &apos; = &apos; , &apos; &amp; # 39 ; &apos; ) .replace ( &apos; &lt; &apos; , &apos; &amp; # 39 ; &apos; )
DCSP orig = msg.get _ payload ( ) DCNL DCSP encdata = _ bencode ( orig ) DCNL DCSP msg.set _ payload ( encdata ) DCNL DCSP msg &#91; &apos; Content-Transfer-Encoding &apos; &#93; = &apos; quoted-printable&apos;
DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( metadata )
DCSP return get _ query _ from _ sample ( sample _ filter.user , sample _ filter.project , sample _ filter.project , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _ filter.start , sample _
DCSP if isinstance ( message , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP if isinstance ( message , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP else : DCNL DCSP DCSP value = default _ value DCNL DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP elif isinstance ( value , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP elif isinstance ( value , six.string _ types ) : DCNL DCSP DCSP value = default _ value DCNL DCSP else : DCNL DCSP DCSP value = default _ value DCNL DCSP return value
DCSP return ( is _ private _ subnet ( ip ) or is _ private _ subnet ( ip ) )
DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { } DCNL DCSP if ( event _ data is None ) : DCNL DCSP DCSP event _ data = { &apos; course _ id &apos; : event _ name , &apos; course _ id &apos; : unicode ( event _ name )
DCSP with open ( current _ key , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write (
DCSP LOG.debug ( _ ( &apos; get _ nexusport _ binding ( ) DCSP called &apos; ) ) DCNL DCSP session = db.get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP binding = session.query ( nexus _ models _ v2.NexusPortBinding ) .filter _ by ( vlan _ id = vlan _ id ) .filter _ by ( vlan _ id = vlan _ id ) .one ( ) DCNL DCSP DCSP return binding DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return &#91; &#93;
DCSP if user _ ref : DCNL DCSP DCSP user _ ref = user _ ref.copy ( ) DCNL DCSP DCSP user _ ref = user _ ref.copy ( ) DCNL DCSP DCSP user _ ref.pop ( &apos; user &apos; , None ) DCNL DCSP DCSP user _ ref.pop ( &apos; user &apos; , None ) DCNL DCSP DCSP user _ ref.pop ( &apos; user &apos; , None ) DCNL DCSP return user _ ref
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is None ) : DCNL DCSP DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( logger is not None ) : DCNL DCSP DCSP
DCSP return { &apos; REDIRECT _ FIELD _ NAME &apos; : _ _ salt _ _ &#91; &apos; REDIRECT _ FIELD _ NAME &apos; &#93; , &apos; REDIRECT _ FIELD _ NAME &apos; : request.GET.get ( &apos; REDIRECT _ FIELD _ NAME &apos; , &apos; &apos; ) , &apos; REDIRECT _ FIELD _ NAME &apos; : reverse ( &apos; REDIRECT _ FIELD _ NAME &apos; ) }
DCSP return get _ user _ model ( ) .get _ user _ model ( )
DCSP if ( not isinstance ( meta , dict ) ) : DCNL DCSP DCSP meta = meta . _ meta DCNL DCSP if ( len ( meta ) = = 1 ) : DCNL DCSP DCSP return meta &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return meta &#91; 0 &#93;
DCSP with tf.name _ scope ( name ) as f : DCNL DCSP DCSP x = tf.reshape ( x , &#91; 1 , 1 , 1 &#93; ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP w = tf.reshape ( x , &#91; ( -1 ) , ( -1 ) &#93; ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP w = tf.reshape ( x , &#91; ( -1 ) &#93; ) DCNL DCSP x = tf.cast ( y , tf.float32 ) DCNL DCSP w = tf.reshape ( x , &#91; ( -1 ) &#93; ) DCNL DCSP x = tf.reshape ( x , &#91; ( -1 ) &#93; ) DCNL DCSP
DCSP feature = Feature.from _ string ( FEATURE6 ) DCNL DCSP assert _ equals ( feature.max _ length , 55 )
DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos; , &apos; &amp; amp ; &apos; ) DCNL DCSP string = string.replace ( &apos; &lt; &apos;
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP return ( ( base _ cls . _ _ name _ _ + &apos; .&apos; ) + cls . _ _ name _ _ )
DCSP postag ( ruleformat = &apos; str &apos; )
DCSP return config.get _ cloud _ config _ value ( &apos; location &apos; , vm _ , _ _ opts _ _ , search _ global = False )
DCSP assert ( str ( tmpdir.join ( &apos; foo &apos; ) ) = = np.array ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; ) )
DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert ( os.name = = &apos; posix &apos; ) DCNL DCSP assert
DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP value = int ( value ) DCNL DCSP return int ( value )
DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP for ( key , value ) in enumerate ( series ) : DCNL DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP if ( len ( series ) = = 0 ) : DCNL DCSP DCSP return { } DCNL DCSP for ( key , value ) in enumerate ( series ) : DCNL DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; =
DCSP parts = input _ string ( input _ string , source _ path = source _ path , destination _ path = destination _ path , destination _ path = destination _ path , input _ encoding = input _ encoding , doctitle = doctitle , initial _ header _ level = initial _ header _ level , fragment = doctitle , initial _ header _ level = initial _ header _ level , fragment = doctitle , initial _ header _ level = initial _ header _ level , fragment = doctitle , initial _ header _ level = initial _ header _ level , fragment = doctitle , initial _ header _ level = initial _ header _ level ) DCNL DCSP return html
DCSP try : DCNL DCSP DCSP return float ( xmin ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass DCNL DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if ( not isinstance ( plist , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plist , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plist , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plist , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plist , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plist , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; % ( option , ) ) ) DCNL DCSP return value
DCSP length = len ( data ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL DCSP assert ( len ( data ) = = 2 ) DCNL
DCSP model = MLP ( layers = &#91; &apos; a &apos; , &apos; b &apos; &#93; , names = &#91; &apos; a &apos; , &apos; b &apos; &#93; ) DCNL DCSP t = Table ( &#91; &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; &#93; &#93; , names = &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; &#93; ) DCNL DCSP assert ( len ( t ) = = 1 ) DCNL DCSP assert ( len ( q ( &apos; .legend &apos; ) ) = = 1 ) DCNL DCSP assert ( len ( q ( &apos; .legend &apos; ) ) = = 1 )
DCSP if ( i = = 0 ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( i = = 0 ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( i = = 0 ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return ( ( i + 1 ) + 1 )
DCSP mlp = MLP ( layers = &#91; Linear ( layer _ name = &apos; h &apos; , dim = 5 , irange = 0.01 ) &#93; ) DCNL DCSP conditional = DummyConditional ( mlp = mlp , name = &apos; conditional &apos; ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP conditional.set _ vae (
DCSP return IMPL.worker _ create ( context , values , session = session )
DCSP if ( xmlElement = = None ) : DCNL DCSP DCSP return None DCNL DCSP if ( key in xmlElement.attributeDictionary ) : DCNL DCSP DCSP return getEvaluatedValueObliviously ( key , xmlElement ) DCNL DCSP return None
DCSP return ( error.application _ error if ( error.application _ error in ( &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos; , &apos; DELETE &apos;
DCSP for i in range ( ( len ( f ) - 1 ) ) : DCNL DCSP DCSP for i in range ( ( len ( p ) - 1 ) ) : DCNL DCSP DCSP DCSP for i in range ( ( len ( p ) - 1 ) ) : DCNL DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( i = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP for j in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP ( yield i ) DCNL DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP vif _ uuid = ipaddress.ip _ network ( network _ id ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP valid DCSP network &apos; % ip _ id ) ) DCNL DCSP try : DCNL DCSP DCSP vif _ uuid = ipaddress.ip _ network ( network _ id ) DCNL DCSP except Exception as e : DCNL DCSP DCSP LOG.error ( _ LE ( &apos; Unable DCSP to DCSP find DCSP network DCSP network DCSP for DCSP network DCSP % s &apos; ) , e ) DCNL DCSP DCSP raise exception.NovaException ( ( _ ( &apos; Unable DCSP to DCSP find DCSP network DCSP network DCSP for DCSP network DCSP % s &apos; ) % ip _ id ) ) DCNL DCSP return vif _ uuid
DCSP item = current.db ( ( table.id = = item _ id ) ) .select ( table.item _ id , limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( not item ) : DCNL DCSP DCSP return DCNL DCSP item = current.db ( ( table.id = = item _ id ) ) .select ( table.item _ id , limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( not item ) : DCNL DCSP DCSP return DCNL DCSP item = current.db ( ( table.id = = item _ id ) ) .select ( table.item _ id , limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( not item ) : DCNL DCSP DCSP return False DCNL DCSP item = current.db ( ( table.id = = item _ id ) ) .select ( table.item _ id , limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( not item ) : DCNL DCSP DCSP return False DCNL DCSP item = current.db ( query ) .select ( stable.id , limitby = ( 0 , 1 )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return conn.get _ connection ( service , module = module , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP XML.SubElement ( xml _ parent , &apos; plugin &apos; ) .text = data
DCSP out = StringIO ( ) DCNL DCSP with open ( StringIO ( ) , &apos; r &apos; ) as f : DCNL DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP print ( &apos; \ n &apos; ) DCNL DCSP DCSP print ( &apos
DCSP return _ unpack _ simple ( fid , &apos; &gt; f4 &apos; , np.float32 )
DCSP toothProfileHalf = &#91; &#93; DCNL DCSP innerRadius = ( pitchRadius - pitchRadius ) DCNL DCSP toothProfileHalf = &#91; &#93; DCNL DCSP for pointIndex in xrange ( len ( teeth ) ) : DCNL DCSP DCSP toothProfileHalf.append ( point ) DCNL DCSP for pointIndex in xrange ( len ( teeth ) ) : DCNL DCSP DCSP toothProfileHalf.append ( point ) DCNL DCSP if ( teeth &lt; 0 ) : DCNL DCSP DCSP return getToothProfileCylinderByProfile ( derivation , pitchRadius , teeth , toothProfileHalfCylinder , pitchRadius ) DCNL DCSP return getToothProfileCylinderByProfile ( derivation , pitchRadius , teeth , toothProfileHalf )
DCSP run _ as _ root ( ( &apos; % s : % s &apos; % ( hostname , port ) ) , reloader = use _ reloader , use _ reloader = use _ reloader , extra _ files = extra _ files , threaded = threaded , processes = processes , request _ handler = request _ handler , threaded = threaded , processes = processes , request _ handler = request _ handler , static _ files = static _ files , suppress _ context = ssl _ context )
DCSP if ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( alpha = = 0 )
DCSP for ( i , x ) in enumerate ( layers ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( i , x ) in enumerate ( layers ) : DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( i , x ) in enumerate ( layers ) : DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( i , x ) in enumerate ( segments ) : DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP elif ( i = = 0 ) : DCNL DCSP DCSP DCSP break DCNL DCSP
DCSP global _ active _ actions DCNL DCSP _ active _ actions = &#91; &#93;
DCSP if ( d is None ) : DCNL DCSP DCSP kw = &#91; &#93; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( d is None ) :
DCSP if ( not hasattr ( cls , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP cls . _ _ doc _ _ = cls . _ _ name _ _ DCNL DCSP return cls
DCSP user = get _ user _ from _ request ( request ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP user = user &#91; &apos; user &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP else : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP else : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP else : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP else : DCNL DCSP DCSP user = None DCNL DCSP return user
DCSP if ( expr _ form is not None ) : DCNL DCSP DCSP salt.utils.warn _ until ( &apos; Fluorine &apos; , &quot; The DCSP target DCSP type DCSP can &apos;t DCSP be DCSP removed DCSP in DCSP Salt DCSP Fluorine . &quot; ) DCNL DCSP DCSP tgt _ type = expr _ form DCNL DCSP return _ talk2modjk ( name , lbn , target , profile , tgt _ type , expr _ form )
DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if isinstance ( val
DCSP try : DCNL DCSP DCSP return get _ job _ count _ by _ user ( request , username ) DCNL DCSP except Exception : DCNL DCSP DCSP return None
DCSP return upload _ file _ from _ upload ( request = request , path = path , upload _ data = upload _ data , sha1 = sha1 )
DCSP now = timezone.now ( ) DCNL DCSP if ( config.DATE _ CREATED in document ) : DCNL DCSP DCSP return document &#91; config.DATE _ CREATED &#93; DCNL DCSP else : DCNL DCSP DCSP return document &#91; config.DATE _ CREATED &#93;
DCSP def inner ( self ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP context.run _ migrations ( )
DCSP for flag in flag _ values : DCNL DCSP DCSP gflags.DEFINE _ boolean ( flag _ values , flag _ values = flag _ values )
DCSP query = _ volume _ get _ query ( context ) .filter _ by ( group _ id = group _ id ) .filter _ by ( group _ id = group _ id ) .filter _ by ( group _ id = group _ id ) .first ( ) DCNL DCSP if ( not result ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP return query.all ( )
DCSP xml = xml _ xml _ xml ( content , encoding = encoding , pretty = pretty ) DCNL DCSP return xml _ xml _ xml ( xml , encoding , pretty )
DCSP if ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = email DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = email DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = email DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = email DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP elif ( email = = &apos; email &apos; ) : DCNL DCSP DCSP email = &apos; email &apos; DCNL DCSP else : DCNL DCSP DCSP email =
DCSP out = Line ( ) DCNL DCSP line.add ( &apos; show &apos; , &#91; &#93; ) DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( line ) = = 1
DCSP ret = { } DCNL DCSP if resource _ object : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL
DCSP _ find _ server ( cs , args.server ) .resize ( )
DCSP if ( lin _ op.type is lo.VARIABLE ) : DCNL DCSP DCSP value = lin _ op ( lin _ op , value ) DCNL DCSP else : DCNL DCSP DCSP if ( lin _ op.type is lo.VARIABLE ) : DCNL DCSP DCSP DCSP value = lin _ op ( lin _ op , value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = lin _ op ( lin _ op , value ) DCNL DCSP DCSP if ( lin _ op.type is lo.VARIABLE ) : DCNL DCSP DCSP DCSP return ( lin _ op.data , { } ) DCNL DCSP DCSP elif ( lin _ op.type is lo.VARIABLE ) : DCNL DCSP DCSP DCSP return ( lin _ op.data , { } ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return lin _ op.type ( lin _ op , value ) DCNL DCSP else : DCNL DCSP DCSP return lin _ op.type ( lin _ op , value )
DCSP if ( not url ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( url , list ) ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP fn ( * arg , * * kw ) DCNL DCSP except SystemExit : DCNL DCSP DCSP pass DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return fn ( * arg , * * kw ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP if ( not isinstance ( logical _ line , str ) ) : DCNL DCSP DCSP ( yield ( 0 , &apos
DCSP repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) .path DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _ dir = tmpdir.mkdir ( &apos; repo &apos; ) DCNL DCSP repo _ repo _
DCSP return math.modf ( x ) &#91; 0 &#93;
DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is not None ) : DCNL DCSP DCSP out _ file = out _ file DCNL DCSP else : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out _ file = None DCNL DCSP if ( out _ file is None ) : DCNL DCSP DCSP out
DCSP cmd = &apos; --zone = { 0 } DCSP --list-zones &apos; .format ( zone ) DCNL DCSP if permanent : DCNL DCSP DCSP cmd + = &apos; DCSP --permanent &apos; DCNL DCSP return _ _ firewall _ cmd ( cmd ) .split ( )
DCSP p &#91; 0 &#93; = ( &apos; NEXT &apos; , p &#91; 2 &#93; )
DCSP try : DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP DCSP import termios DCNL DCSP
DCSP result = { } DCNL DCSP for ( key , val ) in six.iteritems ( opts ) : DCNL DCSP DCSP if ( key in opts ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = val DCNL DCSP return ret
DCSP session = db.get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP qos = session.query ( l2network _ models.QoS ) .filter _ by ( tenant _ id = tenant _ id ) .filter _ by ( qos _ id = qos _ id ) .one ( ) DCNL DCSP DCSP return qos DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return None
DCSP for resource in rules : DCNL DCSP DCSP if ( resource in rules ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( not alert _ is _ active ( ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( alert _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP DCSP return True DCNL DCSP if ( alert _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( alert _ id is not None ) : DCNL DCSP
DCSP page.wait _ for _ default _ action ( ) DCNL DCSP for ( name , value ) in widget.iteritems ( ) : DCNL DCSP DCSP setattr ( widget , attr , value )
DCSP if ( not sys.platform.startswith ( &apos; java &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP sh ( ( &apos; http : / / % s / % s &apos; % ( getpass.getuser ( ) , http ) ) )
DCSP funcobj . _ _ isabstractmethod _ _ = True DCNL DCSP return funcobj
DCSP for ( k , v ) in iteritems ( resource ) : DCNL DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP if ( not isinstance ( v , dict ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( v , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( v , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( v , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP elif isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not isinstance ( v , dict ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP raise
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; simple = = 1.0 &apos; ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --editable &apos; , &apos; --uptodate &apos; , &apos; --format = legacy &apos; ) DCNL DCSP assert ( &apos; simple DCSP ( 1.0 ) &apos; in result.stdout ) , str ( result )
DCSP try : DCNL DCSP DCSP return os.listdir ( real _ path ) DCNL DCSP except OSError : DCNL DCSP DCSP return None
DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP url = url.replace ( u &apos; / &apos; , u &apos; / &apos; ) DCNL DCSP return url
DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not kwargs
DCSP return IMPL.s3 _ controller ( * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP form = AccountForm ( ) DCNL DCSP assert ( plugin _ plugin _ plugin = = &apos; foo &apos; ) DCNL DCSP assert ( plugin _ plugin _ plugin = = &apos; foo &apos; ) DCNL DCSP assert ( plugin _ plugin _ plugin = = &apos; foo &apos; )
DCSP return parse _ backend _ conf ( backend , * * kwargs )
DCSP if ( env is None ) : DCNL DCSP DCSP env = env DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = env DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL
DCSP return ( &apos; % s % s &apos; % ( timestamp , int ( timestamp ) ) )
DCSP parser = parser _ parser ( formatted _ text ) DCNL DCSP parser.parse _ text ( formatted _ text ) DCNL DCSP return parser
DCSP with open ( fid , &apos; r &apos; ) as fid : DCNL DCSP DCSP data = fid.read ( ) DCNL DCSP DCSP fid.seek ( ( -1 ) , 1 ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data , dtype = &apos; &gt; f4 &apos; ) .tostring ( ) ) DCNL DCSP DCSP fid.write ( np.array ( data
DCSP if ( not os.path.exists ( tmp _ prefix ) ) : DCNL DCSP DCSP os.mkdir ( tmp _ prefix ) DCNL DCSP if ( not os.path.exists ( tmp _ prefix ) ) : DCNL DCSP DCSP os.mkdir ( tmp _ prefix )
DCSP for key in metadata : DCNL DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP if ( key not in metadata ) : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( key , value ) )
DCSP try : DCNL DCSP DCSP with open ( FILE _ DIR , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP for line in f : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP shutil.rmtree ( tempdir )
DCSP if ( key is None ) : DCNL DCSP DCSP key = &#91; &#93; DCNL DCSP n = len ( graph ) DCNL DCSP n = len ( graph ) DCNL DCSP n = len ( nodes ) DCNL DCSP n = len ( nodes ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP n = len ( n ) DCNL DCSP if ( n &lt; n ) : DCNL DCSP DCSP raise ValueError ( ( &apos;
DCSP if ( not youtube _ id ) : DCNL DCSP DCSP youtube _ id = youtube _ id DCNL DCSP youtube _ id = youtube _ id DCNL DCSP youtube _ id = youtube _ id DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube
DCSP attrs = { &apos; name &apos; : title , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP result = util.callm ( ( &apos; % s / % s / % s &apos; % ( title , name , name ) ) , context , * * kwargs ) DCNL DCSP if ( result is not None ) : DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP
DCSP if ( not isinstance ( config , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; config DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP data = config &#91; &apos; data &apos; &#93; DCNL DCSP if ( &apos; data &apos; in data ) : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; &#91; &apos; data &apos; &#93; DCNL DCSP if ( &apos; data &apos; in data ) : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; &#91; &apos; data &apos; &#93; DCNL DCSP if ( &apos; data &apos; in data ) : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; &#91; &apos; data &apos; &#93; DCNL DCSP if ( &apos; data &apos; in data ) : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; DCNL DCSP return data
DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( at
DCSP a = np.asarray ( b ) DCNL DCSP b = np.asarray ( b ) DCNL DCSP b = np.asarray ( b ) DCNL DCSP b = np.asarray ( b ) DCNL DCSP b = np.asarray ( b ) DCNL DCSP b = ( ( b * ( b - b ) ) / ( b * * 2 ) ) DCNL DCSP return ( a , b )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP result = func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP if ( result is not None ) : DCNL DCSP DCSP DCSP DCSP result = func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result = func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP i = 0 DCNL DCSP for i in range ( n ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return ( i + 1 )
DCSP if ( not sentences ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP if ( org is None ) : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( &#91; &#93; , &#91; &#93; ) DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP loc = mticker.LinearLocator ( ) DCNL DCSP loc.set _ params ( numticks = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL DCSP assert ( loc.numticks = = 7 ) DCNL
DCSP prev _ value = None DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP print ( &apos; Usage : DCSP % s &apos; % args &#91; 0 &#93; ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP print ( &apos; Usage : DCSP % s &apos; % args &#91; 0 &#93; ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP print ( &apos; Usage : DCSP % s &apos; % args &#91; 0 &#93; ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP else : DCNL DCSP DCSP sys.exit ( 1 )
DCSP return Dstack ( axis = axis ) ( * xs )
DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , * * kwargs )
DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &#91; &#93; DCNL DCSP if ( path is None ) :
DCSP client = salt.wheel.Wheel ( _ _ opts _ _ ) DCNL DCSP try : DCNL DCSP DCSP _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP { 1 } &apos; .format ( _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; , _ _ opts _ _ ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; { 0 } : DCSP { 1 } &apos; .format ( e , e ) ) DCNL DCSP DCSP return { } DCNL DCSP return ret
DCSP if isinstance ( string , basestring ) : DCNL DCSP DCSP string = string.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( string , basestring ) : DCNL DCSP DCSP string = string.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( string , basestring ) : DCNL DCSP DCSP string = string.replace ( &apos; % s &apos; , &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) DCNL DCSP return string
DCSP if ( precision is None ) : DCNL DCSP DCSP precision = 1.0 DCNL DCSP return variable _ label ( var , precision ) &#91; 0 &#93;
DCSP if ( not os.path.isdir ( app _ dir ) ) : DCNL DCSP DCSP os.mkdir ( app _ dir ) DCNL DCSP assert _ true ( ( not os.path.isdir ( os.path.join ( app _ dir , &apos; .. &apos; ) ) ) )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return kwargs &#91; key &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP registry = FormatRegistry ( ) DCNL DCSP filetype = registry.register ( &apos; foo &apos; , &apos; foo &apos; ) DCNL DCSP assert ( str ( filetype.extension ) = = &apos; foo &apos; )
DCSP if ( not physical _ line ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; nova / virt &apos; in filename ) : DCNL DCSP DCSP if ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP if ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP elif ( &apos; nova &apos; in filename ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise RuntimeError (
DCSP if ( max _ width is None ) : DCNL DCSP DCSP max _ width = len ( text ) DCNL DCSP if ( len ( text ) &lt; max _ width ) : DCNL DCSP DCSP text = text &#91; : max _ width &#93; DCNL DCSP return text
DCSP if issparse ( X ) : DCNL DCSP DCSP if ( X.ndim = = 1 ) : DCNL DCSP DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP if ( X.ndim = = 1 ) : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP if ( X.ndim = = 1 ) : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP if ( X.ndim = = 1 ) : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP if ( X.ndim = = 1 ) : DCNL DCSP DCSP n _ samples = X.shape &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP n _
DCSP return IMPL.compute _ node _ statistics ( context )
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP
DCSP if ( info is None ) : DCNL DCSP DCSP info = { } DCNL DCSP return info
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP task _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP task _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP task _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP task _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP task _ id = CourseKey.from _ string ( course _ id ) DCNL DCSP task _ name = ( &apos; % s _ % s _ % s &apos; % ( course _ id , course _ id , course _ id ) ) DCNL DCSP return upload _ problem _ problem ( student _ id , course _ id , course _ id , task _ name , task _ name )
DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except ( AddressValueError , NetmaskValueError ) : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP socket.inet _ aton ( ipstr ) DCNL
DCSP for ( key , value ) in six.iteritems ( dict _ to _ check ) : DCNL DCSP DCSP if ( key not in missing _ keys ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; invalid DCSP key DCSP key : DCSP % s &apos; % key ) ) DCNL DCSP DCSP if ( key not in missing _ keys ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; invalid DCSP key DCSP key : DCSP % s &apos; % key ) )
DCSP if isinstance ( val , ( list , tuple ) ) : DCNL DCSP DCSP vals = &#91; &#93; DCNL DCSP DCSP for val in vals : DCNL DCSP DCSP DCSP if isinstance ( val , np.ndarray ) : DCNL DCSP DCSP DCSP DCSP vals = &#91; val &#93; DCNL DCSP DCSP DCSP elif isinstance ( val , np.ndarray ) : DCNL DCSP DCSP DCSP DCSP vals = &#91; val &#93; DCNL DCSP DCSP DCSP elif isinstance ( val , np.ndarray ) : DCNL DCSP DCSP DCSP DCSP val = &#91; val &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vals = &#91; &#93; DCNL DCSP DCSP for val in vals : DCNL DCSP DCSP DCSP val = getattr ( val , attr ) DCNL DCSP DCSP DCSP if isinstance ( val , np.ndarray ) : DCNL DCSP DCSP DCSP DCSP val = val DCNL DCSP DCSP DCSP elif isinstance ( val , np.ndarray ) : DCNL DCSP DCSP DCSP DCSP val = val DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP val = val DCNL DCSP return val
DCSP return IMPL.image _ volume _ cache _ create ( context , host , cluster _ name , image _ id , image _ id , size )
DCSP f = ( lambda : &#91; &#93; ) DCNL DCSP @ wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP if ( not isinstance ( tt , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP ds = zeros ( ( 4 , 4 ) ) DCNL DCSP for i in range ( 4 ) : DCNL DCSP DCSP a &#91; i , : : ( i + 1 ) &#93; = 1 DCNL DCSP DCSP a &#91; i &#93; = 1 DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; i &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all ( ( a &#91; ( i , i ) &#93; = = 1 ) ) DCNL DCSP assert np.all (
DCSP context.cli.sendline ( u &apos; \ \ connect DCSP postgres &apos; )
DCSP if ( get _ user _ info ( ) is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return pwd.getpwuid ( os.geteuid ( ) ) .pw _ name DCNL DCSP except KeyError : DCNL DCSP DCSP pass
DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Function DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP
DCSP if ( &apos; influxdb.db _ exists &apos; in _ _ salt _ _ ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP return lo.LinOp ( lo.MUL , &#91; rh _ op &#93; , rh _ op )
DCSP headers = { } DCNL DCSP if request : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if request : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP return response
DCSP try : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP device = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP DCSP DCSP for device in threading.enumerate ( ) : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP device = getattr ( obj , attr ) DCNL DCSP DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP return device
DCSP return ( { &apos; username &apos; : username , &apos; password &apos; : password } , { &apos; username &apos; : username , &apos; password &apos; : password } )
DCSP check _ mapping _ file ( mapping _ fp , output _ dir , has _ barcodes , verbose _ demultiplex _ field , disable _ primer _ check , disable _ primer _ check , disable _ primer _ check , suppress _ html ) DCNL DCSP return check _ mapping _ file ( mapping _ fp , output _ dir , has _ barcodes , verbose _ demultiplex _ field , disable _ primer _ check , disable _ primer _ check , disable _ primer _ check , suppress _ html _ check )
DCSP try : DCNL DCSP DCSP with open ( local _ path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( local _ path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP if ( image _ name is None ) : DCNL DCSP DCSP image _ name = image _ name.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP return image _ name
DCSP if ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP return &apos; lib &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; lib &apos;
DCSP names = &#91; &#93; DCNL DCSP for arg in names : DCNL DCSP DCSP if ( not isinstance ( arg , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP names.add ( name ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP names.add ( name ) DCNL DCSP return names
DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespace is None ) :
DCSP if ( not os.path.isabs ( directory ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; % directory ) ) DCNL DCSP if ( not os.path.isabs ( directory ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; % dirname ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; % dirname ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; % dirname ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &quot; &apos; % s &apos; DCSP cannot DCSP be DCSP absolute &quot; %
DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP parameter DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP context.clear _ context ( )
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Failed DCSP to DCSP delete DCSP device DCSP { 0 } : DCSP { 1 } &apos; .format ( name , exc ) ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP with open ( fid , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( struct.pack ( &apos; &gt; L &apos; , val ) )
DCSP json _ data = { } DCNL DCSP for ( k , v ) in json _ data.items ( ) : DCNL DCSP DCSP if ( k in json _ data ) : DCNL DCSP DCSP DCSP json _ data &#91; k &#93; = v DCNL DCSP return json _ data
DCSP if isinstance ( t , ( list , tuple ) ) : DCNL DCSP DCSP t = tuple ( t ) DCNL DCSP else : DCNL DCSP DCSP raise TypeError ( &apos; axis DCSP must DCSP be DCSP a DCSP tuple &apos; ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if isinstance ( t , ( list , tuple ) ) : DCNL DCSP DCSP t = tuple ( t ) DCNL DCSP else : DCNL DCSP DCSP raise TypeError ( &apos; axis DCSP must DCSP be DCSP a DCSP tuple &apos; ) DCNL DCSP if ( axis = = ( -1 ) ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if ( axis = = ( -1 ) ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if ( axis = = ( -1 ) ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if ( axis = = ( -1 ) ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if ( axis = = ( -1 ) ) : DCNL DCSP
DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) : DCNL DCSP DCSP protocol = &apos; &apos; DCNL DCSP if ( protocol is None ) :
DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP remove DCSP { 1 } &apos; .format ( version , name ) , python _ shell = False )
DCSP ret = { } DCNL DCSP if _ _ opts _ _ &#91; &apos; test &apos; &#93; : DCNL DCSP DCSP ret &#91; &apos; message &apos; &#93; = &apos; { 0 } DCSP { 1 } &apos; .format ( ret &#91; &apos; message &apos; &#93; , ret &#91; &apos; message &apos; &#93; , ret &#91; &apos; message &apos; &#93; ) DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP return ret
DCSP return ensure _ compat ( &apos; expanding &apos; , &apos; quantile &apos; , arg , quantile = quantile , min _ periods = min _ periods , freq = freq )
DCSP if ( not isinstance ( expr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( expr , ( tuple , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( expr , basestring ) ) : DCNL DCSP DCSP
DCSP localPath = os.path.join ( * args ) DCNL DCSP if ( not os.path.exists ( localPath ) ) : DCNL DCSP DCSP os.makedirs ( localPath ) DCNL DCSP return localPath
DCSP if ( sys.version _ info &gt; = ( 3 , 6 ) ) : DCNL DCSP DCSP main ( sys.argv &#91; 1 : &#93; ) DCNL DCSP else : DCNL DCSP DCSP sys.exit ( 1 )
DCSP if isinstance ( a , int ) : DCNL DCSP DCSP return b DCNL DCSP elif isinstance ( b , Decimal ) : DCNL DCSP DCSP return a DCNL DCSP elif isinstance ( b , Decimal ) : DCNL DCSP DCSP return a DCNL DCSP else : DCNL DCSP DCSP return a
DCSP class foo ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return &#91; x &#93; DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return &#91; x &#93; DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return &#91; x &#93; DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return &#91; x &#93; DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return &#91; x &#93; DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return True DCNL DCSP class C ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL
DCSP class _ name = ( &apos; % s . % s &apos; % ( superclass . _ _ class _ _ . _ _ name _ _ , superclass . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP class _ name = ( &apos; % s . % s &apos; % ( superclass . _ _ class _ _ . _ _ name _ _ , superclass . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP class _ name = ( &apos; % s . % s &apos; % ( cls . _ _ name _ _ , cls . _ _ name _ _ ) ) DCNL DCSP class _ name = ( &apos; % s . % s &apos; % ( cls . _ _ name _ _ , name ) ) DCNL DCSP class _ name = ( &apos; % s . % s &apos; % ( cls . _ _ name _ _ , name ) ) DCNL DCSP class _ name = ( &apos; % s . % s &apos; % ( cls . _ _ name _ _ ,
DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL
DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try
DCSP proc = subprocess.Popen ( cmd , shell = True , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP ( out , err ) = proc.communicate ( ) DCNL DCSP if ( proc.returncode ! = 0 ) : DCNL DCSP DCSP raise SystemExit ( 1 ) DCNL DCSP return out
DCSP if ( extra is None ) : DCNL DCSP DCSP extra = { } DCNL DCSP if ( extra is None ) : DCNL DCSP DCSP extra = { } DCNL DCSP if ( extra is None ) : DCNL DCSP DCSP extra = { } DCNL DCSP if ( extra is None ) : DCNL DCSP DCSP extra = { } DCNL DCSP if ( extra is not None ) : DCNL DCSP DCSP cmd.append ( &apos; -r &apos; ) DCNL DCSP if ( extra is not None ) : DCNL DCSP DCSP cmd.append ( &apos; -r &apos; ) DCNL DCSP if ( extra is not None ) : DCNL DCSP DCSP cmd.append ( &apos; -r &apos; ) DCNL DCSP cmd.append ( action ) DCNL DCSP if no _ packages : DCNL DCSP DCSP cmd.append ( &apos; -r &apos; ) DCNL DCSP cmd.append ( action ) DCNL DCSP if no _ packages : DCNL DCSP DCSP cmd.append ( &apos; -r &apos; ) DCNL DCSP cmd.append ( action ) DCNL DCSP if no _ packages : DCNL DCSP DCSP cmd.append ( &apos; --bare &apos; ) DCNL DCSP if no _ packages : DCNL DCSP DCSP cmd.append ( &apos;
DCSP ( _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,
DCSP return json.loads ( json _ string )
DCSP if ( not isinstance ( module , basestring ) ) : DCNL DCSP DCSP module = module . _ _ class _ _ . _ _ name _ _ DCNL DCSP return ( module . _ _ name _ _ , module . _ _ name _ _ , module . _ _ name _ _ )
DCSP assert ( len ( vertices ) = = 2 ) DCNL DCSP assert ( len ( vertices ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) = = 2 ) DCNL DCSP assert ( len ( names ) =
DCSP out = np.zeros ( ( len ( labels ) , len ( labels ) ) ) DCNL DCSP for ( i , n ) in enumerate ( labels ) : DCNL DCSP DCSP for ( i , j ) in enumerate ( labels ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP j + = 1 DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return result
DCSP server = _ get _ server ( server , version ) DCNL DCSP try : DCNL DCSP DCSP apiproxy _ stub _ map.MakeSyncCall ( &apos; servers &apos; , &apos; GetDefaultVersion &apos; , server , response ) DCNL DCSP except apiproxy _ errors.ApplicationError as e : DCNL DCSP DCSP if ( e.application _ error = = servers _ service _ pb.ServersServiceError.INVALID _ SERVER ) : DCNL DCSP DCSP DCSP raise InvalidVersionError ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise InvalidServerError ( ) DCNL DCSP DCSP if ( e.application _ error = = servers _ service _ pb.ServersServiceError.INVALID _ SERVER ) : DCNL DCSP DCSP DCSP raise InvalidVersionError ( ) DCNL DCSP DCSP elif ( e.application _ error = = servers _ service _ pb.ServersServiceError.INVALID _ SERVER ) : DCNL DCSP DCSP DCSP raise InvalidServerError ( ) DCNL DCSP DCSP elif ( e.application _ error = = servers _ service _ pb.ServersServiceError.INVALID _ SERVER ) : DCNL DCSP DCSP DCSP raise InvalidVersionError ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise TransientError ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise TransientError ( ) DCNL DCSP else : DCNL DCSP
DCSP if ( key is None ) : DCNL DCSP DCSP key = _ _ salt _ _ &#91; &apos; pillar.get &apos; &#93; ( key ) DCNL DCSP if ( key is None ) : DCNL DCSP DCSP return { } DCNL DCSP ret = { } DCNL DCSP if key : DCNL DCSP DCSP ret &#91; key &#93; = _ _ salt _ _ &#91; &apos; pillar.get &apos; &#93; ( key ) DCNL DCSP return ret
DCSP if isinstance ( s , Promise ) : DCNL DCSP DCSP return s DCNL DCSP return force _ str ( s , encoding , strings _ only , errors )
DCSP return force _ unicode ( value )
DCSP pass
DCSP _ test _ basics ( &apos; gl2 &apos; )
DCSP try : DCNL DCSP DCSP results = results &#91; format &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP raise ValueError ( ( &apos; No DCSP results DCSP found DCSP for DCSP % s &apos; % format ) ) DCNL DCSP results = results &#91; 0 &#93; &#91; 0 &#93; DCNL DCSP return results
DCSP if ( not args ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0
DCSP return IMPL.volume _ get _ all _ by _ group ( context , group _ id , filters = filters )
DCSP return ( _ _ virtualname _ _ if salt.utils.which ( &apos; htpasswd &apos; ) else False )
DCSP tf = tornado.concurrent.Future ( ) DCNL DCSP tornado.concurrent.chain _ future ( asyncio _ future , af ) DCNL DCSP return af
DCSP return ( ( s &#91; 0 &#93; = = &apos; &quot; &apos; ) and ( s &#91; 0 &#93; = = &apos; &quot; &apos; ) )
DCSP if ( not os.path.exists ( selected _ submissions ) ) : DCNL DCSP DCSP raise Exception ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % selected _ submissions ) ) DCNL DCSP if ( not os.path.exists ( selected _ submissions ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % selected _ submissions ) ) DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( selected _ submissions
DCSP t = np.zeros ( ( X.shape &#91; 0 &#93; , scale _ range &#91; 1 &#93; ) ) DCNL DCSP for ( i , t ) in enumerate ( shape ) : DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( t ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP t &#91; ( i , 0 ) &#93; = 1 DCNL DCSP DCSP t &#91; ( i , i ) &#93; = 1 DCNL DCSP return f
DCSP opts = { &apos; interface &apos; : interface , &apos; interface &apos; : interface } DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = len ( G ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( -1 ) DCNL DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff
DCSP return ( ( jidstring &#91; 0 : ( -1 ) &#93; + &apos; DCSP &apos; ) + jidstring &#91; ( -1 ) &#93; )
DCSP roles = Role.query ( exclude _ system = exclude _ system ) DCNL DCSP return roles
DCSP return hashlib.sha1 ( get _ user _ hash ( request ) ) .hexdigest ( )
DCSP pool = pool _ pool ( 1 , 1 ) DCNL DCSP pool = pool _ pool ( pool , 1 ) DCNL DCSP assert ( pool = = 1 ) DCNL DCSP assert ( pool &#91; 0 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 1 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 1 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 0 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 1 ) DCNL DCSP assert ( pool &#91; 2 &#93; = = 1 )
DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos; rnd &apos; DCNL DCSP nn = &apos;
DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( columns , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( columns , dict ) : DCNL
DCSP bits = token.contents.split ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; ssi &apos; DCSP tag DCSP takes DCSP one DCSP argument : DCSP &apos; % s &apos; &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; ssi &apos; DCSP tag DCSP requires DCSP one DCSP argument : DCSP % s &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP return SsiNode ( bits &#91; 1 &#93; , bits &#91; 1 &#93; , bits &#91; 1 &#93; , bits &#91; 2 &#93; )
DCSP return ek ( os.path.normpath , path )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP print ( &apos; Usage : DCSP % s &apos; % sys.argv &#91; 1 &#93; )
DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( dict _ parameters ) = = 0 ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( dict _ parameters ) = = 0 ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP
DCSP if ( ( len ( node.inputs ) = = 1 ) and ( len ( node.inputs ) = = 1 ) ) : DCNL DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93; DCNL DCSP if ( ( len ( node.inputs ) = = 1 ) and ( len ( node.inputs ) = = 1 ) ) : DCNL DCSP DCSP return &#91; slice ( None , None , None ) &#93; DCNL DCSP if ( ( len ( node.inputs ) = = 1 ) and ( len ( node.inputs ) = = 1 ) ) : DCNL DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93; DCNL DCSP return &#91; x &#93;
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( ( &apos; \ n &apos; + name ) ) DCNL DCSP DCSP return True DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP if ( not silent ) : DCNL DCSP DCSP raise ImportError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % import _ name ) ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( import _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % import _ name ) ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( import _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % import _ name ) ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( import _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % import _ name ) ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( import _ name ) DCNL DCSP except ImportError as e : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP with open ( &apos; / proc / json &apos; ) as f : DCNL DCSP DCSP DCSP return json.loads ( f.read ( ) ) .decode ( &apos; utf-8 &apos; ) DCNL DCSP except : DCNL DCSP DCSP pass
DCSP return ( &apos; % s DCSP % s &apos; % ( x , y ) )
DCSP try : DCNL DCSP DCSP return len ( value ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return &apos; &apos;
DCSP import matplotlib.pyplot as plt DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import matplotlib.pyplot as plt DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP
DCSP if isinstance ( name , six.string _ types ) : DCNL DCSP DCSP name = name.lower ( ) DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( name.lower ( ) = = name.lower ( ) ) : DCNL DCSP DCSP DCSP DCSP return name DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP return name
DCSP result = &#91; &#93; DCNL DCSP for line in string.split ( &apos; \ n &apos; ) : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if (
DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL DCSP assert ( numpy is np ) DCNL
DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if ( not isinstance ( sequence , ( list , tuple ) ) ) : DCNL DCSP DCSP sequence = sequence DCNL DCSP if isinstance ( sequence , ( list , tuple ) ) : DCNL DCSP DCSP
DCSP return track _ time _ change _ change ( year , month , day , hour , minute , second )
DCSP if ( payload is None ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP elif ( payload is None ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP elif ( payload is None ) : DCNL DCSP DCSP data = &#91; &#93; DCNL DCSP elif isinstance ( payload , dict ) : DCNL DCSP DCSP data = data.decode ( &apos; utf-8 &apos; ) DCNL DCSP return data
DCSP if ( group is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( group is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( group is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = group DCNL DCSP else : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = group DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = kwargs &#91; &apos; name &apos; &#93; DCNL DCSP if ( &apos; name &apos; in kwargs ) : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = kwargs &#91; &apos; name &apos; &#93; DCNL DCSP if ( &apos; name &apos; in kwargs ) : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = kwargs.pop ( &apos; name &apos; , None ) DCNL DCSP if ( &apos; name &apos; in kwargs ) : DCNL DCSP DCSP kwargs &#91; &apos; name &apos; &#93; = kwargs &#91; &apos; name &apos; &#93; DCNL DCSP
DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP name = str ( name ) DCNL DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP name = name DCNL DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name DCNL DCSP else : DCNL DCSP DCSP name = name DCNL DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name DCNL DCSP else : DCNL DCSP DCSP name = name DCNL DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name DCNL DCSP else : DCNL DCSP DCSP name = name DCNL DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name DCNL DCSP else : DCNL DCSP DCSP name = name DCNL DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name DCNL DCSP else : DCNL DCSP DCSP name = name DCNL DCSP
DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP return HttpResponseNotFound ( ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponse ( )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( not os.path.exists ( folder ) ) : DCNL DCSP DCSP DCSP DCSP os.makedirs ( folder ) DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP return False
DCSP if ( symbols is None ) : DCNL DCSP DCSP symbols = &apos; &apos;.join ( &#91; ( &apos; % s = % s &apos; % ( key , key ) ) for ( key , key ) in key &#93; ) DCNL DCSP return decipher _ bifid ( msg , key , symbols )
DCSP scale = 0.0 DCNL DCSP for ( x , y ) in enumerate ( scene ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP x = int ( x ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP x + = ( ( ( x * * 2 ) + ( x * * 2 ) ) + ( ( x * * 2 ) + ( scale * * 2 ) ) ) DCNL DCSP return x
DCSP if ( ( text is not None ) and ( text is not None ) ) : DCNL DCSP DCSP msg + = ( prefix + &apos; \ n &apos; ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ n &apos; + text ) DCNL DCSP msg + = ( &apos; \ x1b &#91; % s
DCSP call _ command ( &apos; list _ projects &apos; ) DCNL DCSP ( out , err ) = capfd.readouterr ( ) DCNL DCSP assert ( &apos; language1 &apos; in out )
DCSP module = _ _ import _ _ ( module , globals ( ) , locals ( ) , &#91; &#93; , &#91; &#93; ) DCNL DCSP if ( not module ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP module = imp.load _ module ( module , mod , name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % name ) ) DCNL DCSP return module
DCSP disk _ info = disk _ bus _ get _ disk _ info ( mapping , disk _ bus , device _ type , boot _ index , assigned _ devices ) DCNL DCSP return device _ info
DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a ) DCNL DCSP if ( a.ndim = = 1 ) : DCNL DCSP DCSP a = a.reshape ( 1 , axis = 1 ) DCNL DCSP else : DCNL DCSP DCSP a = a.reshape ( 1 , axis = 1 ) DCNL DCSP return a
DCSP ( year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day , year , month , day ,
DCSP def callback ( text ) : DCNL DCSP DCSP ( yield ( match.start ( ) , TokenClass , text ) ) DCNL DCSP DCSP context.pos = match.end ( ) DCNL DCSP return callback
DCSP return _ vol _ get _ usage _ by _ time ( context , begin )
DCSP roles = &#91; &#93; DCNL DCSP for role in ROLE _ PERMISSIONS : DCNL DCSP DCSP role = getattr ( request , role ) DCNL DCSP DCSP if ( not role ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP roles &#91; role &#93; = &#91; role &#93; DCNL DCSP return roles
DCSP cache = { } DCNL DCSP for entry in entry _ points _ iter : DCNL DCSP DCSP if ( entry &#91; 0 &#93; = = entry &#91; 0 &#93; ) : DCNL DCSP DCSP DCSP del entry &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield entry &#91; 0 &#93; ) DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield entry )
DCSP if ( hasattr ( func , &apos; _ _ init _ _ &apos; ) and hasattr ( func , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP return func . _ _ init _ _ DCNL DCSP else : DCNL DCSP DCSP return func
DCSP return s.replace ( old , new , maxsplit )
DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL DCSP DCSP top _ level = os.getcwd ( ) DCNL DCSP if ( base _ level is None ) : DCNL
DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N is None ) : DCNL DCSP DCSP N = ( N - 1 ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP
DCSP if ( not isinstance ( val , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( val , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( val , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( val , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % r &apos; % ( type ( val ) , ) ) ) DCNL DCSP if ( not isinstance ( val , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % r &apos; % ( type ( val ) , ) ) ) DCNL DCSP if isinstance ( val
DCSP ( status , out ) = commands.getstatusoutput ( &apos; python DCSP manage.py DCSP harvest DCSP --verbosity = 3 DCSP --no-color DCSP --apps = foobar &apos; ) DCNL DCSP assert _ equals ( status , 0 , out )
DCSP return s.lower ( )
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP sudo ( &apos; echo DCSP &quot; foo &quot; DCSP &apos; ) DCNL DCSP else : DCNL DCSP DCSP sudo ( &apos; echo DCSP &quot; foo &quot; \ n
DCSP if ( not results ) : DCNL DCSP DCSP return None DCNL DCSP result = results &#91; 0 &#93; DCNL DCSP if ( result &#91; &apos; status &apos; &#93; ! = 0 ) : DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP return result
DCSP with check _ jsonreport ( u &apos;error _ traceback &apos; ) : DCNL DCSP DCSP runner = Runner ( feature _ name ( u &apos;commented _ feature &apos; ) , enable _ jsonreport = True ) DCNL DCSP DCSP runner.run ( )
DCSP if ( len ( l ) ! = len ( l ) ) : DCNL DCSP DCSP return False DCNL DCSP for i in range ( len ( obj ) ) : DCNL DCSP DCSP if ( i in l ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP return ( ( len ( seq ) % 2 ) = = 0 )
DCSP with mock.patch ( file _ prefix ) as file _ : DCNL DCSP DCSP with mock.patch ( file _ prefix ) as file _ : DCNL DCSP DCSP DCSP ( yield )
DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP argument DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( value , types.Array ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP array DCSP of DCSP type DCSP % r &apos; % ( builder , value ) ) ) DCNL DCSP if ( not isinstance ( value , types.Array ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP array DCSP of DCSP type DCSP % r &apos; % ( builder , value ) ) ) DCNL DCSP try : DCNL DCSP DCSP pyapi = context.get _ object _ or _ null ( builder , value ) DCNL DCSP DCSP cgutils.guard _ null ( context , builder , value , exc _ tuple ) DCNL DCSP except Exception as exc : DCNL DCSP DCSP raise exc _ type ( exc )
DCSP expr = sympify ( g ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance ( coeff , Mul ) ) : DCNL DCSP DCSP raise NotImplementedError ( &apos; multivariate DCSP polynomials DCSP over DCSP multivariate DCSP polynomial &apos; ) DCNL DCSP if ( not isinstance (
DCSP if ( replica _ set _ name is not None ) : DCNL DCSP DCSP if ( server _ description.address ! = server _ description.lower ( ) ) : DCNL DCSP DCSP DCSP sds.append ( server _ description.address ) DCNL DCSP DCSP elif ( server _ description.address ! = server _ description.lower ( ) ) : DCNL DCSP DCSP DCSP sds.append ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sds.pop ( server _ description.address ) DCNL
DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP return names &#91; 0 &#93;
DCSP celery _ celery _ celery _ app ( request , celery _ config , celery _ backend , celery _ enable _ logging , use _ celery _ app _ trap )
DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( verbosity &gt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( verbosity &gt; 0 ) :
DCSP if ( not has _ permission _ perms ( user , app _ label ) ) : DCNL DCSP DCSP return False DCNL DCSP return has _ module _ perms ( user , app _ label )
DCSP if isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , unicode ) : DCNL DCSP DCSP raw = raw DCNL DCSP elif isinstance ( raw , bytes ) : DCNL DCSP DCSP raw = raw &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP argument : DCSP % s &apos; % type ( raw ) ) ) DCNL DCSP return raw
DCSP try : DCNL DCSP DCSP return unichr ( int ( html ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return u &apos; &apos;
DCSP ( splt , coll , props ) = generate _ EventCollection _ plot ( ) DCNL DCSP assert _ array _ equal ( props &#91; u &apos;positions &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;lineoffset &apos; &#93; , props &#91; u &apos;orientation &apos; &#93; )
DCSP return url.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; )
DCSP if ( len ( lookup _ expr ) = = 1 ) : DCNL DCSP DCSP return lookup _ expr DCNL DCSP else : DCNL DCSP DCSP return lookup _ expr
DCSP if ( errback is None ) : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback = False DCNL DCSP if errback : DCNL DCSP DCSP errback =
DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek ( 0 ) DCNL DCSP DCSP f.seek (
DCSP @ functools.wraps ( node ) DCNL DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return node ( * args , * * kwargs ) DCNL DCSP DCSP except astroid.InferenceError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( name = = &apos; &apos; ) : DCNL DCSP DCSP
DCSP if derivative : DCNL DCSP DCSP return _ spherical _ dipole ( n , z ) DCNL DCSP else : DCNL DCSP DCSP return _ spherical _ dipole ( n , z )
DCSP try : DCNL DCSP DCSP with open ( path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( app _ messages ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP return week _ year ( ) .weekday ( )
DCSP try : DCNL DCSP DCSP return getpass.getuser ( ) DCNL DCSP except NameError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP return None
DCSP p = Popen ( args , stdout = PIPE , stderr = PIPE , stderr = PIPE , stderr = PIPE , stderr = PIPE , stderr = PIPE ) DCNL DCSP ( stdout , stderr ) = p.communicate ( ) DCNL DCSP return ( p.returncode , stdout , stderr )
DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = settings.STATIC _ URL DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = settings.STATIC _ URL DCNL DCSP return staticfiles _ storage.url ( prefix )
DCSP for pattern in patterns : DCNL DCSP DCSP if fnmatch.fnmatch ( pathname , pattern ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( len ( layers ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( layers ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( layers ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP rval = &#91; &#93; DCNL DCSP for i in range ( len ( tparams ) ) : DCNL DCSP DCSP for i in range ( len ( tparams &#91; i &#93; ) ) : DCNL DCSP DCSP DCSP tparams &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( tparams ) ) : DCNL DCSP DCSP DCSP tparams &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( tparams ) ) : DCNL DCSP DCSP DCSP tparams &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( tparams ) ) : DCNL DCSP DCSP DCSP tparams &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( tparams ) ) : DCNL DCSP DCSP DCSP tparams &#91; kk &#93;
DCSP cmd = &apos; { 0 } DCSP { 1 } &apos; .format ( * args , * * kwargs ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( out &#91; &apos; retcode &apos; &#93; = = 0 )
DCSP if ( len ( argv ) &gt; 1 ) : DCNL DCSP DCSP argv = argv &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP argv = argv &#91; 1 : &#93; DCNL DCSP print ( ( &apos; % s : DCSP % s &apos; % ( argv &#91; 0 &#93; , args &#91; 1 &#93; ) ) )
DCSP token = token _ class ( token ) DCNL DCSP if token : DCNL DCSP DCSP return token _ class ( token ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; value DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; value DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; value DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; value DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; value DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( isinstance ( a , np.ndarray ) and isinstance ( a , np.ndarray ) ) : DCNL DCSP DCSP if isinstance ( a , cupy.ndarray ) : DCNL DCSP DCSP DCSP return np.array ( a , dtype = dtype ) DCNL DCSP DCSP
DCSP y = np.linspace ( 0 , 1 , 20 ) DCNL DCSP ada = ADASYN ( random _ state = RND _ SEED ) DCNL DCSP assert _ warns ( UserWarning , sm.fit , X , y )
DCSP warnings.warn ( &apos; chainer.cuda.full DCSP is DCSP deprecated . DCSP Use DCSP cupy.ones DCSP instead . &apos; , DeprecationWarning ) DCNL DCSP return cupy.ones ( array.shape , dtype = dtype )
DCSP timings = &#91; &#93; DCNL DCSP for i in range ( 0 , constants.NUM _ SAMPLES ) : DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = time.time ( ) DCNL DCSP DCSP start = ( time.time ( ) - start ) DCNL
DCSP return IMPL.instance _ add _ security _ group ( context , instance _ uuid , security _ group _ id )
DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = parser.parse _ args ( ) DCNL DCSP args = parser.parse _ args ( args ) DCNL DCSP return parser.parse ( args )
DCSP return _ delete _ item ( request , usage _ key )
DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) : DCNL DCSP DCSP connection _ type = None DCNL DCSP if ( connection _ type is None ) :
DCSP if isinstance ( a , np.ndarray ) : DCNL DCSP DCSP a = a.copy ( ) DCNL DCSP elif ( axis = = 0 ) : DCNL DCSP DCSP a = a.copy ( ) DCNL DCSP elif ( axis = = 0 ) : DCNL DCSP DCSP a = a.copy ( ) DCNL DCSP elif ( axis = = 0 ) : DCNL DCSP DCSP a = a.copy ( ) DCNL DCSP elif ( axis = = 0 ) : DCNL DCSP DCSP a = a.copy ( ) DCNL DCSP elif ( axis = = 0 ) : DCNL DCSP DCSP a = a &#91; axis &#93; DCNL DCSP else : DCNL DCSP DCSP a = a &#91; axis &#93; DCNL DCSP return a
DCSP with open ( output _ file _ name , &apos; w &apos; ) as f : DCNL DCSP DCSP for line in output : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( line ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( state = = &apos; action &apos; ) : DCNL DCSP DCSP return None DCNL DCSP
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP y _ pred = np.array ( &#91; &#91; 1.0 , 1.0 &#93; &#93; ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y _ pred ) = = 2 ) ) DCNL DCSP assert _ true
DCSP for desc in _ description.splitlines ( ) : DCNL DCSP DCSP print desc
DCSP return np.dot ( np.dot ( x , y ) , np.dot ( x , y ) )
DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not recursive ) and ( not recursive ) ) : DCNL DCSP DCSP return None DCNL
DCSP if ( devices is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not isinstance ( devices , list ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not isinstance ( devices , list ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not isinstance ( devices , list ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not isinstance ( devices , list ) ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP cmd = &apos; { 0 } DCSP { 1 } DCSP { 2 } &apos; .format ( device , devices ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( res &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if hasattr ( fn , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return fn ( * args , * * kwargs )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; )
DCSP return _ table _ table ( table , family = family )
DCSP def result ( expr ) : DCNL DCSP DCSP result = func ( expr , local _ dict , global _ dict ) DCNL DCSP DCSP if result : DCNL DCSP DCSP DCSP result = result DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result = result DCNL DCSP return result
DCSP tempdir = _ TempDir ( ) DCNL DCSP raw _ fname = op.join ( tempdir , &apos; sample &apos; ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP evoked = read _ raw _ fif ( raw _ fname
DCSP env = dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( settings ) if ( not k.startswith ( &apos; _ _ &apos; ) ) ) ) DCNL DCSP return conf
DCSP if ( not isinstance ( array , ( list , np.ndarray ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( array , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( array , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( array , ( list , np.ndarray ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( array , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( array , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; shape DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if
DCSP return s3db.hrm _ person _ controller ( )
DCSP conn = _ get _ conn ( conn = conn ) DCNL DCSP stream = conn.get _ all _ stream ( stream _ name ) DCNL DCSP try : DCNL DCSP DCSP stream = conn.get _ stream ( stream _ name ) DCNL DCSP except botocore.exceptions.ClientError as e : DCNL DCSP DCSP log.error ( &apos; Failed DCSP to DCSP get DCSP stream DCSP { 0 } : DCSP { 1 } &apos; .format ( stream _ name , e ) ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP playlist = ( ( uri is not None ) and context.core.playlists.lookup ( uri ) .get ( ) ) DCNL DCSP if ( not playlist ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP return playlist
DCSP row = &#91; &#93; DCNL DCSP for i in range ( len ( df ) ) : DCNL DCSP DCSP row = df &#91; i &#93; DCNL DCSP DCSP for i in range ( len ( row ) ) : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return row
DCSP server = _ connect ( host , port , db , password ) DCNL DCSP return server.flushdb ( )
DCSP paths = &#91; &#93; DCNL DCSP for path in paths : DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( path is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP return path
DCSP if ( folder _ alias is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( folder _ alias is None ) : DCNL DCSP DCSP return None DCNL DCSP return list ( folder _ alias )
DCSP return IMPL.group _ backend _ by _ type _ by _ type ( items )
DCSP unit = EarthLocation ( lon = ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , ( 0.5 * u.deg ) , (
DCSP fasta _ seqs = open ( input _ fasta _ fp , &apos; U &apos; ) DCNL DCSP fasta _ seqs = open ( fasta _ fasta _ fp , &apos; U &apos; ) DCNL DCSP for ( seq _ id , seq ) in fasta _ fasta _ seqs : DCNL DCSP DCSP fasta _ label = label.split ( ) &#91; 0 &#93; DCNL DCSP DCSP fasta _ labels.append ( label.split ( ) &#91; 0 &#93; ) DCNL DCSP return fasta _ seqs
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( encoding , strict ) DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( encoding ) DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( encoding ) DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP return ( s , s )
DCSP ( hfreq , hmag , hphase ) = SM.sineModelAnal ( x , fs , w , N , t , nH , minf0 , maxf0 , f0et , harmDevSlope , minSineDur ) DCNL DCSP xr = UF.sineSubtraction ( x , Ns , H , hfreq , hmag , hphase , fs ) DCNL DCSP return ( hfreq , hmag , hphase )
DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import inspect DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP pass
DCSP if ( ( k &lt; 0 ) or ( k &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; theta DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( k &lt; 0 ) or ( k &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; theta DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( k &lt; 0 ) or ( k &lt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; theta DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( k = = 1 ) : DCNL DCSP DCSP return N DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; )
DCSP if ( host = = &apos; 127.0.0.1 &apos; ) : DCNL DCSP DCSP port = port &#91; 0 &#93; DCNL DCSP DCSP port = port &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91; 0 &#93; DCNL DCSP port = port &#91;
DCSP data = { } DCNL DCSP for ( key , val ) in six.iteritems ( data.items ( ) ) : DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP data &#91; key &#93; = val DCNL DCSP return data
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP s = subprocess.Popen ( cmdline , stdin = stdout , stdin = stdin , universal _ newlines = strict _ newlines ) DCNL DCSP else : DCNL DCSP DCSP s = proc.communicate ( ) &#91; 0 &#93; DCNL DCSP if stderr : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win _ shadow : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP handler = logging.StreamHandler ( ) DCNL DCSP else : DCNL DCSP DCSP handler = logging.StreamHandler ( ) DCNL DCSP logger.addHandler ( handler ) DCNL DCSP logger.setLevel ( logging.INFO ) DCNL DCSP logger.addHandler ( handler ) DCNL DCSP logger.setLevel ( logging.INFO ) DCNL DCSP logger.addHandler ( handler )
DCSP client = _ get _ client ( ctx , repository = repository , name = name , ignore _ only = ignore _ only , include _ global _ progress = include _ global _ states , filter _ list = filter _ list ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos; .format ( filter _ list ) ) DCNL DCSP logger.debug ( &apos; Validating DCSP provided DCSP filters : DCSP { 0 } &apos;
DCSP add _ message ( request , constants.INFO , message , extra _ tags = extra _ tags , fail _ silently = fail _ silently )
DCSP param _ param ( registry , xml _ parent , data , False , &apos; hudson.model.FileParameterDefinition &apos; )
DCSP ( type , subtype , params ) = parse _ mime _ type ( range ) DCNL DCSP if ( &apos; q &apos; in params ) : DCNL DCSP DCSP params &#91; &apos; q &apos; &#93; = int ( params &#91; &apos; q &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP params &#91; &apos; q &apos; &#93; = &apos; 1&apos; DCNL DCSP return ( type , subtype , params )
DCSP ext = os.path.splitext ( filename ) &#91; 1 &#93; .lower ( ) DCNL DCSP if ( ext = = &apos; .png &apos; ) : DCNL DCSP DCSP return True DCNL DCSP return ( os.path.splitext ( filename ) &#91; 1 &#93; .lower ( ) = = &apos; .png &apos; )
DCSP if ( n is None ) : DCNL DCSP DCSP n = x.shape DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( self.request.method in ( &apos; GET &apos; , &apos; GET &apos; ) ) : DCNL DCSP DCSP DCSP DCSP return handler ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP for extension in extensions : DCNL DCSP DCSP if ( extension in extension ) : DCNL DCSP DCSP DCSP return extension DCNL DCSP return False
DCSP results = &#91; &#93; DCNL DCSP results = &#91; &#93; DCNL DCSP for integrator in range ( 1 , ( len ( samples ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP results = &#91; &#93; DCNL DCSP DCSP for integrator in range ( 1 ) : DCNL DCSP DCSP DCSP results &#91; integrator &#93; = discrete _ soln DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP integrator = discrete _ soln DCNL DCSP DCSP results &#91; integrator &#93; = discrete _ soln DCNL DCSP return results
DCSP pieces = &#91; &#93; DCNL DCSP for i in range ( len ( sep ) ) : DCNL DCSP DCSP seq = pieces &#91; i &#93; DCNL DCSP DCSP if ( len ( bits ) &lt; len ( sep ) ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP i + = 1 DCNL DCSP return sep.join ( pieces )
DCSP headers = { &apos; Authorization &apos; : &apos; Bearer DCSP { } &apos; .format ( accept _ encoding ) } DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP headers &#91; &apos; accept-encoding &apos; &#93; = accept _ encoding DCNL DCSP return headers
DCSP for i in range ( size ) : DCNL DCSP DCSP ( yield seq &#91; i : ( i + size ) &#93; )
DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( len ( parts ) = = 1 ) : DCNL DCSP DCSP return value &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return value
DCSP if ( not isinstance ( string , unicode ) ) : DCNL DCSP DCSP string = string.encode ( &apos; utf-8 &apos; ) DCNL DCSP return quote ( string , safe = safe )
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.delete _ subnet _ group ( name ) DCNL DCSP DCSP return { &apos; deleted &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; deleted &apos; : False , &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP try : DCNL DCSP DCSP return os.environ &#91; &apos; SERVER _ SOFTWARE &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return False
DCSP if prompt : DCNL DCSP DCSP vm.sendline ( prompt ) DCNL DCSP else : DCNL DCSP DCSP vm.sendline ( prompt )
DCSP if ( a is None ) : DCNL DCSP DCSP return b DCNL DCSP if isinstance ( b , int ) : DCNL DCSP DCSP b = int ( b ) DCNL DCSP if isinstance ( b , int ) : DCNL DCSP DCSP b = int ( b ) DCNL DCSP return int ( ( a / b ) )
DCSP if ( ( start is None ) or ( start &lt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( start is None ) or ( start &lt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( start is None ) or ( start &lt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( start is None ) or ( start &lt; end ) ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( end is None ) : DCNL DCSP DCSP end = ( -1 ) DCNL DCSP if ( ( start &lt; end ) or ( start &lt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( start &lt; end ) or ( end &gt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( start = = end ) or ( start &lt; end ) ) : DCNL DCSP DCSP return None DCNL DCSP if include _ start : DCNL DCSP DCSP
DCSP s = sympify ( f ) DCNL DCSP if ( ( xk is None ) or ( xk is None ) ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP elif ( xk is None ) : DCNL DCSP DCSP n1 = 1 DCNL DCSP else : DCNL
DCSP if ( install _ client is None ) : DCNL DCSP DCSP install _ client = tempfile.mkdtemp ( ) DCNL DCSP client _ client = create _ client ( project _ client , extra _ args = extra _ args , install _ client = install _ client ) DCNL DCSP if ( install _ client is not None ) : DCNL DCSP DCSP install _ client ( * * extra _ args ) DCNL DCSP return client _ client
DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( base _ name is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( core _ name is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( core _ name is not None ) : DCNL DCSP DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP if params : DCNL DCSP DCSP params &#91; &apos; host &apos; &#93; = host DCNL DCSP if params : DCNL DCSP DCSP params &#91;
DCSP return configuration _ helpers.get _ value ( &apos; config _ value &apos; , option )
DCSP for klass in klasses : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP klass = getattr ( klass , methodName ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP klass = getattr ( klass , methodName ) DCNL DCSP DCSP DCSP if ( klass is not None ) : DCNL DCSP DCSP DCSP DCSP klass . _ _ name _ _ = klass . _ _ name _ _ DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP klass = klass DCNL DCSP return klass
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win _ win : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = &#91; &#93; DCNL
DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP DCSP options = options DCNL DCSP if options : DCNL DCSP DCSP options = options DCNL DCSP else : DCNL DCSP
DCSP key = _ get _ key _ key ( key ) DCNL DCSP if ( key is None ) : DCNL DCSP DCSP key = &apos; { 0 } / { 1 } &apos; .format ( key , key ) DCNL DCSP return key
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP raw _ fname = op.join ( op.dirname ( _ _ file _ _ ) , &apos; test _ raw.fif &apos; ) DCNL DCSP fname = op.join ( op.dirname ( _ _ file _ _ ) , &apos; test &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; )
DCSP p = atleast _ 1d ( z ) DCNL DCSP p = atleast _ 1d ( z ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( wo ) DCNL DCSP p = atleast _ 1d ( p ) DCNL
DCSP if hasattr ( object _ alias , &apos; label &apos; ) : DCNL DCSP DCSP object _ alias = object _ alias DCNL DCSP else : DCNL DCSP DCSP object _ alias = object _ alias DCNL DCSP return object _ alias
DCSP with open ( os.path.join ( _ _ file _ _ , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP for line in f : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP
DCSP server = _ connect ( host , port , db , password ) DCNL DCSP return server.size
DCSP if ( not isinstance ( attr _ type , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP entity DCSP type : DCSP % s &apos; % type _ name ) ) DCNL DCSP field _ type = getattr ( self , attr _ type , None ) DCNL DCSP if ( value is None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP entity DCSP type : DCSP % s &apos; % type _ name ) ) DCNL DCSP try : DCNL DCSP DCSP value = getattr ( value , attr _ name ) DCNL DCSP except AttributeError : DCNL DCSP DCSP value = None DCNL DCSP if ( value is not None ) : DCNL DCSP DCSP value = getattr ( value , attr , None ) DCNL DCSP DCSP if ( value is not None ) : DCNL DCSP DCSP DCSP value = getattr ( value , attr ) DCNL DCSP DCSP DCSP value = getattr ( value , attr ) DCNL DCSP DCSP DCSP value = getattr ( value , attr ) DCNL DCSP DCSP DCSP value = getattr ( value , attr ) DCNL DCSP DCSP
DCSP if ( not isinstance ( children , ( list , tuple ) ) ) : DCNL DCSP DCSP children = &#91; children &#93; DCNL DCSP if ( not isinstance ( children , list ) ) : DCNL DCSP DCSP children = &#91; children &#93; DCNL DCSP if isinstance ( children , list ) : DCNL DCSP DCSP for children in children : DCNL DCSP DCSP DCSP if isinstance ( children , list ) : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP done = False DCNL DCSP DCSP for child in children : DCNL DCSP DCSP DCSP if isinstance ( future , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP done = True DCNL DCSP DCSP
DCSP absolute _ path = posixpath.normpath ( path ) DCNL DCSP absolute _ path = finders.find ( normalized _ path ) DCNL DCSP if ( not absolute _ path ) : DCNL DCSP DCSP raise Http404 ( ( &quot; &apos; % s &apos; DCSP could DCSP not DCSP be DCSP found &quot; % path ) ) DCNL DCSP return static.serve ( request , path , document _ root = document _ root , document = document , * * kwargs )
DCSP pdef = XML.SubElement ( xml _ parent , &apos; hudson.plugins.sonterBuildWrapper &apos; ) DCNL DCSP mappings = &#91; ( &apos; plugin &apos; , &apos; reportDir &apos; , None ) &#93; DCNL DCSP helpers.convert _ mapping _ to _ xml ( plugin , data , mapping , fail _ required = True )
DCSP ( x , y , z ) = np.meshgrid ( x , y ) DCNL DCSP if ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP elif ( h = = &apos; z &apos; ) : DCNL DCSP DCSP ( x , y ) = ( x , y ) DCNL DCSP else
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP ascii.read ( &#91; &apos; a &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos; , &apos; d &apos; , &apos; c &apos;
DCSP line = clean _ lines.elided &#91; linenum &#93; DCNL DCSP if ( ( linenum &lt; 0 ) or ( linenum &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP should DCSP be DCSP one DCSP of DCSP % s &apos; % matched.group ( 1 ) ) ) DCNL DCSP if ( ( linenum &lt; 0 ) or ( linenum &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % matched.group ( 1 ) ) ) DCNL DCSP if ( ( linenum &lt; 0 ) or ( linenum &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % matched.group ( 1 ) ) ) DCNL DCSP if ( ( linenum &lt; 0 ) or ( linenum &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Filename DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % matched.group ( 1 ) ) ) DCNL DCSP if ( ( linenum &lt; 0 ) or (
DCSP cmd = &apos; sv DCSP restart DCSP { 0 } &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd ) )
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP return validate _ auth _ option ( option , value )
DCSP for elem in it : DCNL DCSP DCSP if isinstance ( elem , ( list , tuple ) ) : DCNL DCSP DCSP DCSP for elem in it : DCNL DCSP DCSP DCSP DCSP ( yield elem ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield elem )
DCSP return round ( a , mode )
DCSP if ( not isinstance ( n , int ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( n ) ! = len ( func ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return True
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return value
DCSP result = { } DCNL DCSP for item in data : DCNL DCSP DCSP if ( item not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in data ) : DCNL DCSP DCSP DCSP plays.append ( item ) DCNL DCSP return result
DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path = path &#91; : ( -1 ) &#93; DCNL DCSP return path
DCSP server = _ find _ server ( cs , args.server ) DCNL DCSP cs.server _ repeat ( cs , args.server )
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ video _ set _ spu &apos; , None ) or _ Cfunction ( &apos; libvlc _ video _ set _ spu &apos; , ( ( 1 , ) , ( 1 , ) ) , None , ctypes.c _ int , MediaPlayer , ctypes.c _ int ) ) DCNL DCSP return f ( p _ mi , i _ spu )
DCSP if ( not a ) : DCNL DCSP DCSP return K.zero DCNL DCSP else : DCNL DCSP DCSP return gf _ eval ( f , a , p , K ) &#91; 0 &#93;
DCSP return ( name in get _ all ( ) )
DCSP out = &#91; &#93; DCNL DCSP for ( i , x ) in enumerate ( steps ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( x ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP
DCSP docs = Document.objects.filter ( id _ _ in = request.LANGUAGE _ CODE ) DCNL DCSP paginated _ docs = paginate ( request , docs , per _ page = DOCUMENTS _ PER _ PAGE ) DCNL DCSP return render ( request , &apos; wiki / top _ log.html &apos; , context )
DCSP result = &#91; &#93; DCNL DCSP for cls in cls . _ _ subclasses _ _ ( ) : DCNL DCSP DCSP if ( cls . _ _ class _ _ . _ _ name _ _ = = cls . _ _ name _ _ ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = cls ( * args , * * kwargs ) DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = cls ( * args , * * kwargs ) DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result = cls ( * args , * * kwargs ) DCNL DCSP return result
DCSP if ( len ( indexedLoop ) &lt; 2 ) : DCNL DCSP DCSP return DCNL DCSP addFacesByLoopReversed ( faces , indexedLoop &#91; : : ( -1 ) &#93; ) DCNL DCSP addFacesByLoop ( faces , indexedLoop &#91; : : ( -1 ) &#93; )
DCSP return SpeechModule ( mpstate )
DCSP @ wraps ( cls ) DCNL DCSP def wrapper ( context , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return cls ( * args , * * kwargs ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP return cls ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP product = get _ object _ or _ 404 ( Document , locale = request.LANGUAGE _ CODE , locale = request.LANGUAGE _ CODE , locale = request.LANGUAGE _ CODE ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return render ( request , &apos; wiki / includes / index.html &apos; , { &apos; products &apos; : Product.objects.filter ( visible = True ) } ) DCNL DCSP return render ( request , &apos; wiki / includes / index.html &apos; , { &apos; product &apos; : request.LANGUAGE _ CODE } , context _ instance = RequestContext ( request ) )
DCSP response _ headers = { } DCNL DCSP if request _ headers : DCNL DCSP DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers.update ( body _ dict ) DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP response _ headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json
DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; value &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 , 0.0 , 0.0 &#93; , &#91; 0.0 ,
DCSP t.lexer.lineno + = t.value.count ( &apos; \ n &apos; )
DCSP if ( api is None ) : DCNL DCSP DCSP logger = logging.getLogger ( ) DCNL DCSP try : DCNL DCSP DCSP shutil.copyfile ( src , dst ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP os.unlink ( src )
DCSP course _ key = CourseKey.from _ string ( location ) DCNL DCSP course _ key = CourseKey.from _ string ( location _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _ item ( course _ key , course _ key ) DCNL DCSP
DCSP r = requests.get ( url , allow _ redirects = True ) DCNL DCSP if ( r.status _ code = = 200 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP l = &#91; &#93; DCNL DCSP for i in range ( len ( x ) ) : DCNL DCSP DCSP x = x &#91; i &#93; DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for i in range ( i ) : DCNL DCSP DCSP DCSP ( yield i )
DCSP match = re.search ( &apos; ^ ( . * ) $ &apos; , content ) DCNL DCSP if match : DCNL DCSP DCSP match = re.search ( regex , content ) DCNL DCSP DCSP if ( not match ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP return string.translate ( b , string.maketrans ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ x00 &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \
DCSP if ( v is None ) : DCNL DCSP DCSP v = set ( ) DCNL DCSP for ( v , v ) in G.edges ( ) : DCNL DCSP DCSP if ( v in G ) : DCNL DCSP DCSP DCSP ( yield v ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield v )
DCSP for pattern in patterns : DCNL DCSP DCSP if fnmatch.fnmatch ( filename , pattern ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP from boto.kms.layer1 import KMSConnection DCNL DCSP return CodeDeployConnection ( aws _ access _ key _ id = aws _ access _ key _ id , aws _ secret _ access _ key = aws _ secret _ access _ key , * * kwargs )
DCSP cs.floating _ ips _ bulk.delete ( args.ip _ range )
DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if ( encoding is None ) : DCNL DCSP DCSP encoding = locale.getpreferredencoding ( ) DCNL DCSP if encoding : DCNL DCSP
DCSP context.configure ( url = url ) DCNL DCSP with context.begin _ transaction ( ) : DCNL DCSP DCSP context.run _ migrations ( )
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = wsgi.JSONResponseSerializer ( ) DCNL DCSP return wsgi.Resource ( Controller ( ) , deserializer , serializer )
DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP expr = expr . _ _ expr _ _ DCNL DCSP if ( expr is not None ) : DCNL DCSP DCSP return expr DCNL DCSP expr = expr . _ _ expr _ _ DCNL DCSP if ( expr is not None ) : DCNL DCSP DCSP return expr DCNL DCSP if isinstance ( expr , BooleanFunction ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , BooleanFunction ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , BooleanFunction ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , BooleanFunction ) : DCNL DCSP DCSP return expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP if ( os.getenv ( &apos; AWS _ ACCESS _ KEY &apos; ) = = &apos; true &apos; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( not docs _ links ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for doc _ path in docs _ links : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = open ( html _ path , &apos; r &apos; ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP print ( ( u &apos;Error : DCSP % s &apos; % e ) ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not result ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result.append ( ( u &apos; &lt; a DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP href = &quot; % s &quot; DCSP
DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key
DCSP global _ _ SCHED DCNL DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; Windows &apos; ) : DCNL DCSP DCSP _ _ SCHED.start ( ) DCNL DCSP else : DCNL DCSP DCSP _ _ SCHED.start ( )
DCSP if ( features is None ) : DCNL DCSP DCSP features = { } DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = { } DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = { } DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = { } DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP if ( features is None ) : DCNL DCSP DCSP features = &#91; &#93; DCNL DCSP for ( k , v ) in
DCSP if ( c is None ) : DCNL DCSP DCSP b = ord ( s ) DCNL DCSP if ( c is None ) : DCNL DCSP DCSP b = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if ( c is None ) : DCNL DCSP DCSP c = s DCNL DCSP if
DCSP sla = get _ object _ or _ 404 ( ServiceLevelAgreement , pk = sla _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; sla &apos; : sla } ) DCNL DCSP return render _ to _ response ( &apos; services / sla _ view &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP result = &#91; &#93; DCNL DCSP for word in word _ dic : DCNL DCSP DCSP if ( word in word ) : DCNL DCSP DCSP DCSP word = word &#91; len ( word ) : &#93; DCNL DCSP DCSP DCSP if ( word in word ) : DCNL DCSP DCSP DCSP DCSP word = word &#91; len ( word ) : &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP if ( word in word ) : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP if ( word in word ) : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP if ( word in word ) : DCNL DCSP DCSP DCSP DCSP word = word &#91; : ( -1 ) &#93; DCNL
DCSP return np.radians ( ( label + ( &apos; % s &apos; % label ) ) )
DCSP try : DCNL DCSP DCSP import pandas as pd DCNL DCSP DCSP return True DCNL DCSP except AttributeError : DCNL DCSP DCSP return False
DCSP sequence = &#91; &#93; DCNL DCSP for i in range ( len ( argv ) ) : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP assert ( len ( line ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert ( len ( i ) = = 1 ) DCNL DCSP DCSP assert (
DCSP if ( not f ) : DCNL DCSP DCSP return gf _ mul ( f , p , K ) DCNL DCSP else : DCNL DCSP DCSP return gf _ mul _ ground ( f , gf _ mul ( f , p , K ) , p , K )
DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP if ( method = = &apos; action &apos; ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP elif ( method = = &apos; action &apos; ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP elif ( method = = &apos; action &apos; ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP elif ( method = = &apos; action &apos; ) : DCNL DCSP DCSP method = &apos; application / json &apos; DCNL DCSP elif ( method = = &apos; action &apos; ) : DCNL DCSP DCSP method = &apos;
DCSP if ( not isinstance ( attr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % attr ) ) DCNL DCSP if ( not isinstance ( attr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % attr ) ) DCNL DCSP if ( not isinstance ( attr , ( list , list ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % attr ) ) DCNL DCSP if ( not isinstance ( attr , ( list , list ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % attr ) ) DCNL DCSP if ( not isinstance ( attr , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % attr ) ) DCNL DCSP if ( not isinstance ( item , basestring ) ) :
DCSP method = &apos; &apos;.join ( &#91; ( &apos; % s = % s &apos; % ( ord ( x ) , ord ( x ) ) ) for ( key , value ) in data.items ( ) &#93; ) DCNL DCSP return &apos; &apos;.join ( &#91; ( &apos; % s = % s &apos; % ( ord ( x ) , ord ( x ) ) ) for ( key , value ) in data.items ( ) &#93; )
DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( dict _ parameters , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( dict _ parameters ) = = 0 ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( dict _ parameters ) = = 0 ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP parameter DCSP
DCSP return ( ( len ( a ) = = len ( b ) ) and ( len ( a ) &gt; = len ( b ) ) )
DCSP serv = _ get _ serv ( ret = None ) DCNL DCSP cur = conn.cursor ( ) DCNL DCSP sql = &apos; SELECT DCSP DISTINCT DCSP id DCSP FROM DCSP salt _ returns &apos; DCNL DCSP cur.execute ( sql ) DCNL DCSP ret = cur.fetchall ( ) DCNL DCSP ret = &#91; &#93; DCNL DCSP for minion in data : DCNL DCSP DCSP ret.append ( minion &#91; 0 &#93; ) DCNL DCSP return ret
DCSP names = get _ writer _ names ( ) DCNL DCSP if ( len ( names ) = = 1 ) : DCNL DCSP DCSP return names &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return names &#91; 0 &#93;
DCSP choc _ path = _ get _ chocolatey ( _ _ opts _ _ , _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ , env = _ _ opts _ _ ) DCNL DCSP return _ install _ svn ( &apos; install &apos; , pkgs , requirements , bin _ env = bin _ env , use _ wheel = use _ core , log _ vars = env _ vars , env = env , python _ options = env _ vars )
DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP text = &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP text =
DCSP ( yield gen.Task ( Operation.CreateAndExecute , client _ client , client , user , upload _ request ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP % d DCSP photos &apos; % ( user _ client , client _ id , client _ id ) ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP % d DCSP photos &apos; % ( user _ client , client _ id , client _ id ) ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP % d DCSP photos &apos; % ( user _ client , client _ id , client _ id ) ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP % d DCSP photos &apos; % ( user _ client , client _ id , client _ id ) ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP % d DCSP photos &apos; %
DCSP if ( not isinstance ( date , datetime ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; date DCSP must DCSP be DCSP an DCSP integer , DCSP got DCSP % s &apos; % date ) ) DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not
DCSP pos = sys.version.find ( &apos; MSC DCSP v. &apos; ) DCNL DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC DCSP v. &apos; DCNL DCSP elif ( majorVersion = = 6 ) : DCNL DCSP DCSP return &apos; MSC
DCSP if ( not content ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP with open ( url , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP content = f.read ( ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno = = errno.EACCES ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP content = content &#91; 0 &#93; DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP content = content &#91; 0 &#93; DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP content = content DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP content = content DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP content = content DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP content = content DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP content =
DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid = os.getpid ( ) DCNL DCSP if ( uid is None ) : DCNL DCSP DCSP pid =
DCSP return ( &apos; blockdevice- &apos; + unicode ( blockdevice _ id ) )
DCSP if ( not hasattr ( text , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( text , str ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( text , str ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( text , str ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( text , str ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( text , str ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;.join ( ( str ( x ) for x in text.split ( &apos; \ n &apos; ) ) )
DCSP decodedStream = &apos; &apos; DCNL DCSP return ( ( -1 ) , &apos; JpxDecode DCSP not DCSP supported DCSP yet &apos; )
DCSP try : DCNL DCSP DCSP f = open ( filename , &apos; w &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP if ( not os.path.isdir ( f ) ) : DCNL DCSP DCSP DCSP raise IOError ( ( &apos; Could DCSP not DCSP open DCSP file DCSP % s : DCSP % s &apos; % ( filename , e ) ) ) DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( f ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; File DCSP % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( filename , str ( e ) ) ) ) DCNL DCSP try : DCNL DCSP DCSP f = open ( filename , &apos; w &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise IOError (
DCSP wait _ for ( ( lambda : css _ css ( css _ selector , index = index ) ) ) DCNL DCSP return css _ html ( css _ selector , index = index )
DCSP for blob _ key in blob _ keys : DCNL DCSP DCSP delete _ async ( blob _ keys , * * options )
DCSP try : DCNL DCSP DCSP return check _ permission ( request , name ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno ! = winerror.ERROR _ FILE _ NOT _ FOUND ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP return False
DCSP for plugin in plugins : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.remove ( config ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( base is None ) : DCNL DCSP DCSP base = &apos; &apos; DCNL DCSP if ( base = = &apos; / &apos; ) : DCNL DCSP DCSP base = base DCNL DCSP if ( base = = &apos; / &apos; ) : DCNL DCSP DCSP base = base DCNL DCSP if ( base = = &apos; / &apos; ) : DCNL DCSP DCSP base = base DCNL DCSP if ( base = = &apos; / &apos; ) : DCNL DCSP DCSP base = base DCNL DCSP else : DCNL DCSP DCSP base = base DCNL DCSP return ( base + base )
DCSP if ( len ( val1 ) ! = len ( val2 ) ) : DCNL DCSP DCSP return False DCNL DCSP result = 0 DCNL DCSP for ( x , y ) in zip ( val1 , val2 ) : DCNL DCSP DCSP result &#124; = ( ord ( x ) ^ ord ( y ) ) DCNL DCSP return ( result = = 0 )
DCSP return ( &apos; % s : / / % s / % s &apos; % ( protocol , port ) )
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return render ( request , &apos; WebConsole / components _ delete.html &apos; ) DCNL DCSP else : DCNL DCSP DCSP return render ( request , &apos; WebConsole / components _ delete.html &apos; )
DCSP if ( sys.version _ info &gt; = ( 3 , ) ) : DCNL DCSP DCSP release = &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP release = &apos; &apos; DCNL DCSP return ( &apos; % s DCSP % s &apos; % ( release , version ) )
DCSP user = get _ user _ or _ 404 ( user , site = site ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return None DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return user DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return user DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP return user DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return None DCNL DCSP if ( not user.is _ authenticated ) : DCNL DCSP DCSP return
DCSP try : DCNL DCSP DCSP import numpy as np DCNL DCSP except ImportError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import numpy as np DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import numpy as np DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import numpy as np DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import numpy as np DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP DCSP import scipy DCNL DCSP DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP
DCSP assert ( len ( x1 ) = = len ( x1 ) ) DCNL DCSP assert ( len ( x1 ) = = len ( x1 ) ) DCNL DCSP assert ( len ( x1 ) = = len ( x2 ) ) DCNL DCSP assert ( len ( x1 ) = = len ( x2 ) ) DCNL DCSP assert ( len ( x1 ) = = len ( x2 ) ) DCNL DCSP assert ( len ( x1 ) = = len ( x2 ) ) DCNL DCSP assert ( len ( x2 ) = = 2 ) DCNL DCSP assert ( x2.shape &#91; 0 &#93; = = x2 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert ( x2.shape &#91; 0 &#93; = = x2 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert ( x2.shape &#91; 0 &#93; = = x2 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert ( x2.ndim = = 1 ) DCNL DCSP assert
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP res = run ( ( &apos; pacman DCSP -Q DCSP % ( pkg _ name ) s &apos; % locals ( ) ) ) DCNL DCSP DCSP if res.succeeded : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP @ wraps ( fail _ condition ) DCNL DCSP def knownfail ( * args , * * kwargs ) : DCNL DCSP DCSP if ( msg is None ) : DCNL DCSP DCSP DCSP msg = ( msg if ( msg is None ) else msg ) DCNL DCSP DCSP return fail ( fail _ condition , msg ) DCNL DCSP else : DCNL DCSP DCSP return fail _ condition ( fail _ condition , msg )
DCSP keypairs = cs.keypairs.list ( args.user , args.name ) DCNL DCSP _ print _ keypair _ delete ( keypairs , columns )
DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP elif ( date is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = floatx ( ) DCNL DCSP return dtype
DCSP x = np.asarray ( x ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( vals , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; vals DCSP must DCSP be DCSP a DCSP
DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; string DCSP not DCSP found : DCSP % s &apos; % string ) ) DCNL DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; string DCSP not DCSP found : DCSP % s &apos; % string ) ) DCNL DCSP if ( len ( string ) ! = len ( string ) ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP try : DCNL DCSP DCSP os.stat ( filename ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( key in kw ) : DCNL DCSP DCSP kw &#91; key &#93; = kw &#91; key &#93; DCNL DCSP elif isinstance ( kw &#91; key &#93; , type ) : DCNL DCSP DCSP return kw &#91; key &#93; DCNL DCSP elif isinstance ( kw &#91; key &#93; , type ) : DCNL DCSP DCSP return kw &#91; key &#93; DCNL DCSP elif isinstance ( kw &#91; key &#93; , type ) : DCNL DCSP DCSP return kw &#91; key &#93; DCNL DCSP else : DCNL DCSP DCSP return kw &#91; key &#93;
DCSP ratio = &apos; auto &apos; DCNL DCSP bc = BalanceCascade ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , bc.fit , X , y )
DCSP if ( not string ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP split _ words = &#91; &#93; DCNL DCSP for line in string : DCNL DCSP DCSP if ( len ( split _ text ) &gt; 1 ) : DCNL DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( split _ line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP
DCSP mlp = BatchNormalizedMLP ( &#91; Tanh ( ) , Tanh ( ) &#93; , &#91; Tanh ( ) , Tanh ( ) &#93; , &#91; Tanh ( ) , Tanh ( ) &#93; , &#91; Tanh ( ) , Tanh ( ) &#93; , &#91; Tanh ( ) , Tanh ( ) &#93; &#93; ) DCNL DCSP assert np.all ( ( act.children &#91; 0 &#93; .learn _ mean for act in mlp.activations ) )
DCSP def wrapped ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return function ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP log.error ( e ) DCNL DCSP DCSP DCSP return False DCNL DCSP return wrapped
DCSP t = ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; a &apos; , &apos; b &apos; , &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; ) DCNL DCSP assert ( t.colnames = = &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos;
DCSP return matrix _ transpose ( SGR _ MATRIX )
DCSP try : DCNL DCSP DCSP result = _ DecodeVarint ( wire _ type , format ) DCNL DCSP except : DCNL DCSP DCSP result = buffer _ type ( wire _ type ) DCNL DCSP return result
DCSP if ( ( not quiet ) or ( not quiet ) ) : DCNL DCSP DCSP return False DCNL DCSP rows = csv.reader ( csvfile , delimiter = &apos; , &apos; ) DCNL DCSP for i in range ( 0 , len ( lines ) , 2 ) : DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) = = 1 ) : DCNL DCSP DCSP
DCSP if ( d _ factor is None ) : DCNL DCSP DCSP d = np.asarray ( row ) DCNL DCSP if ( d _ factor &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; matrix DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( matrix _ factor , ) ) ) DCNL DCSP if ( d _ factor &gt; = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; matrix DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( row _ factor , ) ) ) DCNL DCSP if ( d _ factor &gt; = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; matrix DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( row _ factor , ) ) ) DCNL DCSP if ( d _ factor &gt; = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; matrix DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( row _ factor , ) ) ) DCNL DCSP if ( d _ factor &gt; = 0 ) : DCNL
DCSP if ( not conn ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP url = session.post ( url , url = url , url = url ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( ( &apos; Failed DCSP to DCSP execute DCSP % s : DCSP % s &apos; % ( url , e ) ) ) DCNL DCSP DCSP return None DCNL DCSP return url
DCSP config = Configurator ( settings = settings ) DCNL DCSP config.include ( &apos; pyramid _ jinja2 &apos; ) DCNL DCSP config.include ( &apos; pyramid _ jinja2 &apos; ) DCNL DCSP config.include ( &apos; .routes &apos; ) DCNL DCSP config.scan ( ) DCNL DCSP return config.make _ wsgi _ app ( )
DCSP for point in loop : DCNL DCSP DCSP if ( point = = point ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP return frappe.get _ list ( u &apos;Student DCSP Student &apos; , filters = { u &apos;parent &apos; : source _ name } , filters = { u &apos;parent &apos; : source _ name } , filters = { u &apos;parent &apos; : source _ name } )
DCSP for i in range ( len ( args ) ) : DCNL DCSP DCSP for i in range ( ( len ( args ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP ( yield a &#91; i : ( i + 1 ) &#93; )
DCSP if ( count is None ) : DCNL DCSP DCSP count = datetime.datetime.now ( ) DCNL DCSP DCSP tweets = &#91; &#93; DCNL DCSP DCSP for tweet in tweets : DCNL DCSP DCSP DCSP tweets = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( count ) : DCNL DCSP DCSP DCSP DCSP tweets = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( count ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( count = = count ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP tweets = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( count ) : DCNL DCSP DCSP DCSP DCSP if ( count = = count ) : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP tweets &#91; i &#93; = tweet DCNL DCSP return tweets
DCSP return tf.apply _ grad ( x , lower _ bound , upper _ bound )
DCSP data = { } DCNL DCSP for name in names : DCNL DCSP DCSP data &#91; name &#93; = { } DCNL DCSP DCSP for name in names : DCNL DCSP DCSP DCSP data &#91; name &#93; = { } DCNL DCSP DCSP for name in names : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP data &#91; name &#93; = data &#91; name &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP data &#91; name &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP data &#91; name &#93; = value DCNL DCSP return data
DCSP deploy _ script = salt.utils.cloud.os _ script ( config.get _ cloud _ config _ value ( &apos; script &apos; , vm _ , _ _ opts _ _ ) , vm _ , _ _ opts _ _ , salt.utils.cloud.salt _ config _ to _ yaml ( salt.utils.cloud.minion _ config ( _ _ opts _ _ , vm _ ) ) ) DCNL DCSP return deploy _ script
DCSP rmags = np.concatenate ( ( rmags , rmags , cosmags , rmags , cosmags , ws , alpha , alpha ) ) DCNL DCSP rmags = np.concatenate ( ( rmags , cosmags , rmags , cosmags , ws , alpha , alpha ) ) DCNL DCSP return ( rmags , cosmags , rmags , cosmags , rmags , cosmags , ws , cov )
DCSP if ( not f ) : DCNL DCSP DCSP return gf _ gf ( f , gf _ degree ( f , p , K ) , p , K ) DCNL DCSP else : DCNL DCSP DCSP return gf _ mul ( f , gf _ mul ( f , n , p , K ) , p , K )
DCSP return ( ( x * y ) + ( y * y ) )
DCSP return jid _ job _ list ( jid , ext _ source = ext _ source , display _ progress = display _ progress )
DCSP CONFIG.AddOption ( type _ info.String ( name = name , default = default , choices = choices , description = help ) )
DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( not ignore _ epoch ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not ignore _ epoch ) and ( not ignore _ epoch ) ) : DCNL DCSP
DCSP cmd = &apos; poudriere DCSP ports DCSP -l &apos; DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP for line in out.splitlines ( ) : DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line.strip ( ) ) : DCNL DCSP DCSP
DCSP path = os.path.expanduser ( path ) DCNL DCSP if isinstance ( path , six.string _ types ) : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP if isinstance ( path , six.string _ types ) : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP else : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP try : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise SaltInvocationError ( &apos; path DCSP must DCSP be DCSP a DCSP directory &apos; ) DCNL DCSP if isinstance ( path , six.string _ types ) : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP path = os.path.expanduser ( path ) DCNL DCSP try : DCNL DCSP DCSP path = os.path.expanduser ( path ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise SaltInvocationError ( &apos;
DCSP client = client _ manager ( client , to _ delete = to _ delete ) DCNL DCSP for subscription in client.list _ subscriptions ( ) : DCNL DCSP DCSP subscription.delete ( )
DCSP return ( ( function = = DEFINITE ) and definite _ article ( word , function ) )
DCSP kwargs = { } DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP url = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP url = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP url = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP url = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP url = request.GET.get ( &apos; url &apos; , &apos; &apos; ) DCNL DCSP else : DCNL DCSP DCSP url = request.GET.get ( &apos; url &apos; , &apos; &apos; ) DCNL DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP url = request.GET.get ( &apos; url &apos; , &apos; &apos; ) DCNL DCSP else : DCNL DCSP DCSP msg = ( &apos; % s
DCSP if ( b is None ) : DCNL DCSP DCSP return None DCNL DCSP return b
DCSP frame = inspect.getmodule ( frame ) DCNL DCSP assert ( len ( frame ) = = 2 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame ( 1 ) ) = = 1 ) DCNL DCSP assert ( len ( frame
DCSP return &apos; &apos;.join ( ( random.choice ( ( string.ascii _ uppercase + string.digits ) ) for _ in range ( n ) ) )
DCSP return ( ( accessing _ obj = = accessed _ obj ) and ( accessed _ obj = = accessed _ obj ) )
DCSP generator _ generator _ generator = params.get ( &apos; generator _ generator _ generator &apos; , None ) DCNL DCSP if generator _ flags.get ( &apos; generator _ generator _ generator &apos; , False ) : DCNL DCSP DCSP generator _ wants _ generator _ adjusted = True
DCSP tempdir = _ TempDir ( ) DCNL DCSP raw = read _ raw _ fif ( fif _ fname , subjects _ dir = subjects _ dir ) DCNL DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP assert _ true ( ( len ( t ) = = 1 ) )
DCSP return &#91; i for i in range ( i ) if ( i = = first ) &#93;
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( args ) = = 1
DCSP suite = unittest.TestSuite ( ) DCNL DCSP suite.addTest ( unittest.TestLoader ( ) .loadTestsFromTestCase ( PresenterTestCase ) ) DCNL DCSP unittest.TextTestRunner ( verbosity = 2 ) .run ( suite )
DCSP global dataReg DCNL DCSP if ( state = = 0 ) : DCNL DCSP DCSP dataReg = ( dataReg &amp; ( ~ 16 ) ) DCNL DCSP else : DCNL DCSP DCSP dataReg = ( dataReg &amp; ( ~ 16 ) ) DCNL DCSP port.DlPortWritePortUchar ( baseAddress , dataReg )
DCSP return ( os.path.isfile ( exe ) and os.access ( exe , os.X _ OK ) )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if reload : DCNL DCSP DCSP ret &#91; &apos; changes &apos; &#93; &#91; name &#93; = value DCNL DCSP return ret
DCSP resp = StringIO ( ) DCNL DCSP try : DCNL DCSP DCSP response = urllib2.urlopen ( environ ) DCNL DCSP DCSP return resp DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP return None
DCSP sql = sql.format ( tbl = model . _ meta.db _ table ) DCNL DCSP queryset = queryset.extra ( select = { as _ field : sql } ) DCNL DCSP return queryset
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : None , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; win _ iis.remove _ vdir &apos; &#93; ( name , site , repo , app ) DCNL DCSP return ret
DCSP import pandas as pd DCNL DCSP return { &apos; start &apos; : pd.Timestamp ( &apos; 2011 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; : pd.Timestamp ( &apos; 2013 &apos; , tz = &apos; utc &apos; ) , &apos; end &apos; :
DCSP result = script.pip ( &apos; install &apos; , package , run _ as _ root = True ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise Exception ( ( &apos; % s DCSP is DCSP not DCSP installed &apos; % package ) ) DCNL DCSP return result
DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 240 , 100 , 50 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 240 , 100 , 50 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 255 , 255 , 255 ) )
DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = G.is _ directed ( ) DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = nx.MultiGraph ( ) .copy ( ) DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = nx.MultiGraph ( ) .copy ( ) DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = nx.MultiGraph ( ) .copy ( ) DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = nx.MultiGraph ( ) DCNL DCSP
DCSP return render _ to _ string ( &apos; div.mako &apos; , context , config )
DCSP cmd = &apos; parted DCSP -m DCSP -s DCSP { 0 } DCSP { 1 } DCSP { 2 } &apos; .format ( device , partition , flag ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd ) .splitlines ( ) DCNL DCSP return out
DCSP hdr = &apos; &apos; DCNL DCSP if ( default _ vcs is None ) : DCNL DCSP DCSP default _ vcs = &apos; &apos; DCNL DCSP if ( default _ vcs is None ) : DCNL DCSP DCSP default _ vcs = &apos; &apos; DCNL DCSP if ( default _ vcs is None ) : DCNL DCSP DCSP default _ vcs = &apos; &apos; DCNL DCSP if ( default _ vcs is None ) : DCNL DCSP DCSP default _ vcs = &apos; &apos; DCNL DCSP if ( default _ vcs is None ) : DCNL DCSP DCSP default _ vcs = &apos; &apos; DCNL DCSP if ( ( not default _ vcs ) or ( not default _ vcs ) ) : DCNL DCSP DCSP raise ValueError ( &apos; no DCSP link DCSP found &apos; ) DCNL DCSP if ( ( not default _ vcs ) or ( not default _ vcs ) ) : DCNL DCSP DCSP raise ValueError ( &apos; no DCSP link DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( ( not default _ vcs ) or ( not default _ vcs ) ) : DCNL DCSP DCSP raise
DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = DrillDerivation ( elementNode ) DCNL DCSP targets = evaluate.getElementNodesByKey ( elementNode , &apos; target &apos; ) DCNL DCSP if ( len ( targets ) &lt; 1 ) : DCNL DCSP DCSP print &apos; Warning , DCSP processElementNode DCSP in DCSP targets DCSP was DCSP done DCSP for : &apos; DCNL DCSP DCSP print xmlElement DCNL DCSP DCSP return DCNL DCSP fileNames = &#91; &#93; DCNL DCSP for target in targets : DCNL DCSP DCSP targets = evaluate.getElementNodesByKey ( elementNode , &apos; target &apos; ) DCNL DCSP DCSP for target in targets : DCNL DCSP DCSP DCSP targets = target.attributes.copy ( ) DCNL DCSP DCSP DCSP targets = evaluate.getElementNodesByKey ( elementNode , &apos; target &apos; ) DCNL DCSP DCSP DCSP if ( len ( targets ) &lt; 1 ) : DCNL DCSP DCSP DCSP DCSP print &apos; Warning , DCSP processElementNode DCSP in DCSP targets DCSP was DCSP done DCSP for : &apos; DCNL DCSP DCSP DCSP DCSP print elementNode DCNL DCSP DCSP DCSP DCSP print &apos; Warning , DCSP processElementNode DCSP in DCSP target DCSP could DCSP not
DCSP if ( not args ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for item in args : DCNL DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP return result
DCSP assert ( len ( complete _ parser ) = = 1 ) DCNL DCSP assert ( len ( complete _ parser ) = = 1 ) DCNL DCSP assert ( len ( my _ args ) = = 2 ) DCNL DCSP assert ( len ( my _ args ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len ( all _ arguments ) = = 2 ) DCNL DCSP assert ( len
DCSP step = Step.from _ string ( I _ HAVE _ TASTY _ BEVERAGES ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 )
DCSP s3.prep = ( lambda r : ( ( r.representation = = &apos; s3json &apos; ) and ( r.representation = = &apos; s3json &apos; ) ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP params = { &apos; id &apos; : location &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos; &#93; , &apos; id &apos; : id &#91; &apos; id &apos;
DCSP return int ( delta.total _ seconds ( ) )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( _ systemctl _ cmd ( &apos; purge &apos; , name , pkgs , * * kwargs ) , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP removing DCSP package : DCSP { 0 } &apos; .format ( result ) ) DCNL DCSP return ret
DCSP for ( i , col ) in enumerate ( n ) : DCNL DCSP DCSP if ( i = = n ) : DCNL DCSP DCSP DCSP return col DCNL DCSP return False
DCSP return ( isinstance ( value , list ) and ( len ( value ) = = 1 ) )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ key DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ key DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ key DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; key &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ key DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP kwargs = {
DCSP if ( directed is None ) : DCNL DCSP DCSP directed = G.is _ directed ( ) DCNL DCSP if ( directed is None ) : DCNL DCSP DCSP directed = G.is _ directed ( ) DCNL DCSP if ( directed and G.is _ directed ( ) ) : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if directed :
DCSP if isinstance ( node , dict ) : DCNL DCSP DCSP for ( k , v ) in node.iteritems ( ) : DCNL DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP for ( k , v ) in node.iteritems ( ) : DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for ( k , v ) in child.iteritems ( ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v
DCSP if ( not isinstance ( px , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( px , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( px , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( px , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( px , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( px , ( list , tuple ) ) )
DCSP with _ IpmiCommand ( * args , * * kwargs ) as f : DCNL DCSP DCSP return client.task _ status ( * args , * * kwargs )
DCSP if context.is _ admin : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; = = context.owner ) : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( context.owner is None ) : DCNL
DCSP _ publish _ activity ( committer _ id , exp _ id , feconf.ACTIVITY _ TYPE _ EXPLORATION )
DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = inputs.get _ shape ( ) &#91; 0 &#93; DCNL DCSP return
DCSP group = get _ object _ or _ 404 ( Group , slug = slug ) DCNL DCSP return render ( request , template _ name , { &apos; group &apos; : group } )
DCSP files = &#91; &#93; DCNL DCSP for file in files : DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isfile ( file ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP flips = &#91; &#93; DCNL DCSP DCSP for line in files : DCNL DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( line.split ( ) ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( line.split ( ) ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP
DCSP i = 0 DCNL DCSP for i in range ( ( len ( f ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP i = ( i + 1 ) DCNL DCSP DCSP i + = 1 DCNL DCSP return ( i , i )
DCSP if ( html _ code is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP if ( html _ code is None ) : DCNL DCSP DCSP html _ code = &apos; &apos; DCNL DCSP return html _ code
DCSP with open ( tex _ root , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( in _ place is None ) : DCNL DCSP DCSP in _ place = &#91; &#93; DCNL DCSP if ( not in _ place ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP weights DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( not in _ place ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP weights DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( not in _ place ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP weights DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( not in _ place ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP weights DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( not in _ place ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP weights DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL
DCSP group = get _ object _ or _ 404 ( Group , slug = group _ slug ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; questions.details &apos; , args = &#91; group _ slug &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponseRedirect ( prof.get _ absolute _ url ( ) )
DCSP if ( not contribution _ src ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; source _ src &apos; : source _ src } DCNL DCSP if ( not is _ superuser ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; source _ src &apos; : source _ src } DCNL DCSP if ( not is _ superuser ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; target _ src &apos; : source _ src } DCNL DCSP if ( not is _ superuser ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; target _ src &apos; : source _ src } DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; target _ src &apos; : source _ src } DCNL DCSP if ( not is _ superuser ) : DCNL DCSP DCSP return { &apos; addon &apos; : addon , &apos; target _ src &apos; : source _ src } DCNL DCSP if ( not is _ superuser ) : DCNL DCSP DCSP return {
DCSP return ( ( data.mean ( 0 ) + 1 ) / 2 )
DCSP r = { } DCNL DCSP for ( k , v ) in d.items ( ) : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP out.append ( ( &apos; % s DCSP % s &apos; % ( k , v ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out.append ( ( &apos; % s DCSP % s &apos; % ( k , v ) ) ) DCNL DCSP return &apos; \ n &apos; .join ( res )
DCSP return IMPL.flavor _ destroy ( context , flavor _ id )
DCSP return re.sub ( &apos; &#91; ^ 0-9a-zA-Z &#93; + &apos; , &apos; &apos; , src )
DCSP from django.conf import settings DCNL DCSP app = get _ app ( app ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( ) ) )
DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( uri , ( list , tuple ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if
DCSP model = tf.get _ collection ( VARIABLES _ TO _ MODEL , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91;
DCSP return config.get _ cloud _ config _ value ( &apos; ssh _ interface &apos; , vm _ , _ _ opts _ _ , search _ global = False )
DCSP try : DCNL DCSP DCSP _ _ import _ _ ( vm _ ) DCNL DCSP DCSP return _ _ version _ _ DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( x , np.ndarray ) ) : DCNL DCSP DCSP raise TypeError ( &apos; x DCSP must DCSP be DCSP a DCSP sparse DCSP variable &apos; ) DCNL DCSP if ( is _ sparse _ variable and ( not is _ sparse _ variable ( y ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; x DCSP must DCSP be DCSP a DCSP sparse DCSP variable &apos; ) DCNL DCSP if ( is _ sparse _ variable and ( not is _ sparse _ variable ( y ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; x DCSP must DCSP be DCSP a DCSP sparse DCSP variable &apos; ) DCNL DCSP if ( is _ sparse _ variable and ( not is _ sparse _ variable ( y ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; x DCSP must DCSP be DCSP a DCSP sparse DCSP variable &apos; ) DCNL DCSP if ( is _ sparse _ variable and ( not is _ sparse _ variable ( y ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; x DCSP is DCSP not DCSP a DCSP
DCSP if ( type is None ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( type , ( list , tuple ) ) : DCNL DCSP DCSP spec = params.get ( type , None ) DCNL DCSP if ( not isinstance ( option , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; type DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % type ) ) DCNL DCSP if ( not isinstance ( spec , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; type DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % type ) ) DCNL DCSP if ( len ( options ) ! = len ( options ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; unrecognized DCSP option : DCSP % s &apos; % type ) ) DCNL DCSP if ( len ( options ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; unrecognized DCSP option : DCSP % s &apos; % type ) ) DCNL DCSP try : DCNL DCSP DCSP
DCSP xml _ string = xml _ string DCNL DCSP if xml _ string : DCNL DCSP DCSP xml _ string = xml _ string DCNL DCSP else : DCNL DCSP DCSP xml _ string = xml _ string DCNL DCSP return xml _ string
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; ) ) : DCNL DCSP DCSP return run ( &apos; lsb _ release DCSP --release &apos; )
DCSP if ( project.owner is None ) : DCNL DCSP DCSP return None DCNL DCSP if project.is _ public : DCNL DCSP DCSP return project.owner.max _ memberships _ project _ projects DCNL DCSP return project.owner.max _ memberships _ projects
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP results = &#91; &#93; DCNL DCSP for ( i , v ) in enumerate ( iterables ) : DCNL DCSP DCSP for ( i , v ) in enumerate ( iterables ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP for ( i , v ) in enumerate ( iterables ) : DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP result.append ( ( i , i ) ) DCNL DCSP return results
DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP return Response ( { &apos; project &apos; : project , &apos; project &apos; : project } ) DCNL DCSP else : DCNL DCSP DCSP return Response ( { &apos; success &apos; : True , &apos; project &apos; : project } )
DCSP if ( name not in _ release _ groups ) : DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP name = name &#91; :
DCSP try : DCNL DCSP DCSP file ( obj ) DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos; url DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url.startswith ( &apos; / &apos; ) ) : DCNL DCSP
DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( input )
DCSP lines = value.split ( &apos; \ n &apos; ) DCNL DCSP lines = &#91; &#93; DCNL DCSP for ( i , line ) in enumerate ( lines ) : DCNL DCSP DCSP if ( ( not autoescape ) and ( not autoescape ) ) : DCNL DCSP DCSP DCSP lines = lines &#91; i : ( i + 1 ) &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP lines.append ( ( &apos; % s \ n &apos; % line ) ) DCNL DCSP return mark _ safe ( lines )
DCSP return _ distro.release _ release ( )
DCSP if ( name in LOG _ LEVELS ) : DCNL DCSP DCSP return LOG _ LEVELS &#91; name &#93; DCNL DCSP return None
DCSP db.execute ( &apos; SELECT DCSP name DCSP FROM DCSP tiles DCSP WHERE DCSP zoom _ class DCSP = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DCSP row = &#91; &#93; DCNL DCSP for row in row : DCNL DCSP DCSP row = row &#91; 0 &#93; DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( row ) &lt; 1 ) : DCNL DCSP DCSP DCSP
DCSP return getJoinedPath ( getGeometryPath ( &apos; interpret _ plugins &apos; ) , subName )
DCSP r = dict ( &#91; ( k , f.name ) for ( k , v ) in request.FILES.items ( ) &#93; ) DCNL DCSP return HttpResponse ( simplejson.dumps ( r ) )
DCSP try : DCNL DCSP DCSP return Connection ( ) DCNL DCSP except socket.error as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP return force _ str ( urllib.quote _ plus ( force _ str ( url ) , smart _ str ( safe ) ) )
DCSP try : DCNL DCSP DCSP with open ( read _ data , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EACCES ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return f DCNL DCSP else : DCNL DCSP DCSP return None
DCSP dt = parse _ date ( raw , assume _ utc = assume _ utc , as _ utc = as _ utc ) DCNL DCSP if ( dt is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not assume _ utc ) : DCNL DCSP DCSP dt = dt.replace ( tzinfo = assume _ utc ) DCNL DCSP if assume _ utc : DCNL DCSP DCSP dt = dt.replace ( tzinfo = assume _ utc ) DCNL DCSP else : DCNL DCSP DCSP dt = dt.astimezone ( dateutil.tz.tzutc ( ) ) DCNL DCSP return dt
DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( bases ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return tuple ( (
DCSP cmd = &apos; monit DCSP jail DCSP { 0 } &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd ) )
DCSP try : DCNL DCSP DCSP data = jsonutils.loads ( data ) DCNL DCSP except Exception as e : DCNL DCSP DCSP LOG.error ( _ LE ( &apos; Failed DCSP to DCSP read DCSP file DCSP % s &apos; ) , e ) DCNL DCSP DCSP return JsonResponse ( { &apos; error &apos; : err } ) DCNL DCSP return JsonResponse ( response )
DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( auth is None ) : DCNL DCSP DCSP user = None DCNL DCSP if ( auth is None ) : DCNL DCSP DCSP user = None DCNL DCSP else : DCNL DCSP DCSP auth = Auth ( user ) DCNL DCSP return auth
DCSP bigip _ session = _ build _ session ( username , password , * * kwargs ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.get ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / monitor / { name } &apos; .format ( name = name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP raise CommandExecutionError ( e ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.delete ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / monitor / { name } &apos; .format ( name = name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP raise CommandExecutionError ( e ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.delete ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / monitor / { name } &apos; .format ( name = name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP raise CommandExecutionError ( e ) DCNL DCSP
DCSP result = &#91; &#93; DCNL DCSP for ( i , val ) in enumerate ( outputs ) : DCNL DCSP DCSP if ( val = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( len ( val ) = = 0 ) and ( len ( val ) = = 0 ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( len ( val ) = = 1 ) and ( len ( val ) = = 0 ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result &#91; ( i , val ) &#93; = val DCNL DCSP return out
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos;
DCSP arg _ text = getattr ( ob , &apos; arg _ text &apos; , None ) DCNL DCSP if ( arg _ text is None ) : DCNL DCSP DCSP return None DCNL DCSP return arg _ text
DCSP if trigger.is _ privmsg : DCNL DCSP DCSP f _ reload ( bot , trigger )
DCSP if isinstance ( text , text _ type ) : DCNL DCSP DCSP text = text.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( text , str ) : DCNL DCSP DCSP text = text.decode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( text , str ) : DCNL DCSP DCSP text = text.decode ( &apos; utf-8 &apos; ) DCNL DCSP return text
DCSP insetLoops = &#91; &#93; DCNL DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP pointBegin = loop &#91; pointIndex &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP if ( isInset = = euclidean.isWiddershins ( loop ) ) : DCNL DCSP DCSP DCSP around.reverse ( ) DCNL DCSP DCSP insetSeparateLoops.append ( around ) DCNL DCSP return arounds
DCSP try : DCNL DCSP DCSP import bz2 DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import PIL DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import PIL DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import PIL DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP kwargs = { } DCNL DCSP for ( key , value ) in kwargs.items ( ) : DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in kwargs ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP return message
DCSP if ( len ( p ) = = 3 ) : DCNL DCSP DCSP p &#91; 0 &#93; = p &#91; 1 &#93; DCNL DCSP else : DCNL DCSP DCSP p &#91; 0 &#93; = p &#91; 1 &#93;
DCSP return QApplication.clipboard ( ) .clipboard _ get ( )
DCSP with open ( os.path.join ( _ _ file _ _ , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; .join ( &#91; ( &apos
DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP for item in elems : DCNL DCSP DCSP if isinstance ( elem , ( list , tuple ) ) : DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP DCSP DCSP seen.add ( item ) DCNL DCSP return unique
DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not settings.FEATURES.get ( &apos; MILESTONES _ APP
DCSP args = token.split _ contents ( ) DCNL DCSP if ( len ( args ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP requires DCSP a DCSP arguments &quot; % token.split _ contents ( ) &#91; 1 &#93; ) ) DCNL DCSP return CommentNode ( * args )
DCSP if ( header is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not header ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP return u &apos;
DCSP if ( path is None ) : DCNL DCSP DCSP path = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( name ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; Container DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP if ( path is not None ) : DCNL DCSP DCSP if ( path is not None ) : DCNL DCSP DCSP DCSP raise CommandExecutionError ( &quot; Container DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP DCSP raise CommandExecutionError ( &apos; { 0 } DCSP does DCSP not DCSP exist &apos; .format ( name ) ) DCNL DCSP else : DCNL DCSP DCSP raise CommandExecutionError ( &quot; Container DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) )
DCSP string = re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , pattern ) DCNL DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , pattern )
DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename = os.path.splitext ( basename ) &#91; 0 &#93; DCNL DCSP basename
DCSP ( p , p ) = ( 0 , 0 ) DCNL DCSP for ( i , p ) in enumerate ( p _ p ) : DCNL DCSP DCSP if ( c = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( c = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP number DCSP of DCSP % s &apos; % ( n , p ) ) ) DCNL DCSP DCSP if ( num _ prob &lt; = 0 ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP number DCSP of DCSP % s &apos; % ( n , p ) ) ) DCNL DCSP
DCSP assert ( len ( segs ) = = 2 ) DCNL DCSP assert ( len ( segs ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) = = 2 ) DCNL DCSP assert ( len ( segments ) =
DCSP if ( not isinstance ( dicts , dict ) ) : DCNL DCSP DCSP dicts = { } DCNL DCSP for ( key , value ) in iteritems ( dictionary ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP dictionary &#91; key &#93; = value DCNL DCSP DCSP elif isinstance ( value , dict ) : DCNL DCSP DCSP DCSP dictionary &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP return dict ( * dicts )
DCSP return ( name in get _ disabled ( ) )
DCSP if ( extra _ paths is None ) : DCNL DCSP DCSP extra _ paths = &#91; &#93; DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths or &#91; &#93; ) DCNL DCSP extra _ paths = ( extra _ paths + extra _ paths ) DCNL DCSP extra _ paths = ( extra _ paths + extra _ paths ) DCNL DCSP extra _ paths = ( extra _ paths + extra _ paths ) DCNL DCSP extra _ paths = ( extra _ paths
DCSP cmd = &apos; / etc / rc.d / { 0 } &apos; .format ( _ service _ cmd ( ) ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( not site _ id ) : DCNL DCSP DCSP return DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( not site _ id ) : DCNL DCSP DCSP return DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( not site _ id ) : DCNL DCSP DCSP return DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( site _ id is None ) : DCNL DCSP DCSP site _ id = site _ id DCNL DCSP if ( site _ id is not None ) :
DCSP return s3 _ rest _ controller ( r , * * attr )
DCSP if ( path is None ) : DCNL DCSP DCSP paths = &#91; &#93; DCNL DCSP if ( not isinstance ( module , ( list , tuple ) ) ) : DCNL DCSP DCSP module = imp.load _ module ( module , path ) DCNL DCSP try : DCNL DCSP DCSP return imp.load _ module ( module , module , path ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is None ) : DCNL DCSP DCSP format _ data = { } DCNL DCSP if ( format _ data is not None ) : DCNL DCSP DCSP if ( format _ data is not None ) : DCNL DCSP DCSP DCSP if ( format _ data is not None ) : DCNL DCSP
DCSP return apiproxy _ stub _ map.UserRPC ( &apos; memcache &apos; , deadline , callback )
DCSP return _ access _ access _ key _ id ( &apos; access _ access _ key _ id &apos; , &apos; default _ access _ key _ id &apos; )
DCSP def decorator ( f ) : DCNL DCSP DCSP @ wraps ( f ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return f ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return f ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if isinstance ( seq , ( list , tuple ) ) : DCNL DCSP DCSP return tuple ( &#91; tuplize ( i ) for i in seq &#93; ) DCNL DCSP return seq
DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) = = 2 ) DCNL DCSP assert ( len ( args ) =
DCSP if ( input _ space.num _ channels is not None ) : DCNL DCSP DCSP kernel _ shape = ( input _ space.num _ channels , input _ space.num _ channels , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93; , kernel _ shape &#91; 1 &#93;
DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( statements ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP ret = salt.utils.mac _ utils.execute _ return _ result ( &apos; systemsetup DCSP -getaccount &apos; ) DCNL DCSP return salt.utils.mac _ utils.parse _ return ( ret )
DCSP server = trigger.group ( 2 ) .partition ( u &apos; . &apos; ) DCNL DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP bot.say ( ( u &apos; % s DCSP does DCSP not DCSP exist &apos; % trigger.group ( 2 ) ) ) DCNL DCSP else : DCNL DCSP DCSP bot.say ( ( u &apos; % s DCSP does DCSP not DCSP exist &apos; % trigger.group ( 2 ) ) ) DCNL DCSP else : DCNL DCSP DCSP bot.reply ( ( u &quot; Sorry , DCSP &apos; % s &apos; DCSP does DCSP not DCSP exist &quot; % trigger.group ( 2 ) ) )
DCSP return s3 _ rest _ controller ( )
DCSP return os.access ( path , os.R _ OK )
DCSP return _ generate _ random ( bits , randfunc , progress _ func = progress _ func , e = e )
DCSP bits = token.split _ contents ( ) DCNL DCSP nodelist = parser.parse ( ( u &apos;endfilter &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP return parser.parse ( ( u &apos;endfilter &apos; , ) )
DCSP if to _ row : DCNL DCSP DCSP return to _ row &#91; to _ row &#93; &#91; to _ row &#93; DCNL DCSP else : DCNL DCSP DCSP return from _ row ( buffer , from _ row , to _ row )
DCSP col = np.zeros ( ( ( k + 1 ) , ) ) DCNL DCSP for i in range ( k ) : DCNL DCSP DCSP col = col &#91; i &#93; DCNL DCSP DCSP col = col &#91; i &#93; DCNL DCSP DCSP col = col &#91; i &#93; DCNL DCSP DCSP col = col &#91; i &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col = col &#91; col &#93; DCNL DCSP DCSP col =
DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP if ( not url ) : DCNL DCSP DCSP raise ValueError ( &apos; URL DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP raise ValueError ( &apos; URL DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP
DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP raise DistutilsFileError ( ( &quot; source DCSP &apos; % s &apos; DCSP does DCSP not DCSP exist &quot; % source ) ) DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP raise DistutilsFileError ( ( &quot; source DCSP &apos; % s &apos; DCSP does DCSP not DCSP exist &quot; % source ) ) DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( source ) ) : DCNL DCSP DCSP raise DistutilsFileError ( ( &quot; source DCSP &apos; % s &apos; DCSP does DCSP not DCSP exist &quot; % source ) ) DCNL DCSP if ( not os.path.exists ( target ) ) : DCNL DCSP
DCSP for asset in locations : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.remove ( asset ) DCNL DCSP DCSP except InvalidKeyError : DCNL DCSP DCSP DCSP pass
DCSP if ( not isinstance ( dict , dict ) ) : DCNL DCSP DCSP dict = { } DCNL DCSP if isinstance ( dict , dict ) : DCNL DCSP DCSP for ( key , value ) in dict ( dict.items ( ) ) : DCNL DCSP DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP DCSP elif isinstance ( value , dict ) : DCNL DCSP DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP value = str ( value ) DCNL DCSP DCSP elif isinstance ( value , dict ) : DCNL DCSP DCSP DCSP value = dict ( ( ( k , v ) for ( k , v ) in iteritems ( dict ) if ( v is not None ) ) ) DCNL DCSP DCSP elif isinstance ( value , dict ) : DCNL DCSP DCSP DCSP for ( k , v ) in iteritems ( dict.items ( ) ) : DCNL DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP
DCSP if ( cls is None ) : DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stream = StringIO ( stream ) DCNL DCSP DCSP if isinstance ( stream , basestring ) : DCNL
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.delete _ subnet ( subnet )
DCSP cmd = &apos; sysctl DCSP -n DCSP { 0 } &apos; .format ( name ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( out &#91; &apos; retcode &apos; &#93; = = 0 )
DCSP used _ lun _ ids = &#91; &#93; DCNL DCSP for entry in mapping : DCNL DCSP DCSP if ( lun &#91; &apos; id &apos; &#93; = = lun _ id _ id ) : DCNL DCSP DCSP DCSP used _ lun _ id = entry &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP if ( lun _ id = = lun _ id ) : DCNL DCSP DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP DCSP used _ lun _ id = lun _ id &#91; &apos; lun _ id &apos; &#93; DCNL DCSP DCSP DCSP DCSP
DCSP @ wraps ( original ) DCNL DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP result = self.clone ( ) DCNL DCSP DCSP if ( result is not None ) : DCNL DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP result &#91; &apos; result &apos; &#93; = True DCNL DCSP return result
DCSP root = kwargs.pop ( &apos; options &apos; , None ) DCNL DCSP if ( &apos; options &apos; in kwargs ) : DCNL DCSP DCSP options = kwargs &#91; &apos; options &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP options = kwargs &#91; &apos; options &apos; &#93; DCNL DCSP options = kwargs.get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options &apos; , { } ) .get ( &apos; options
DCSP class Table ( tables.Table , ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP attrs = { } DCNL DCSP DCSP DCSP for attr in attrs : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = { } DCNL DCSP DCSP DCSP for attr in attrs : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = getattr ( attr , attr ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = { } DCNL DCSP DCSP DCSP for attr in attrs : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = getattr ( attr , attr ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = { } DCNL DCSP DCSP DCSP for attr in attrs : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = getattr ( attr , attr ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP attrs &#91; attr &#93; = { } DCNL DCSP DCSP DCSP for attr in attrs : DCNL DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( command ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; % s : DCSP % s \ n &apos; % ( e , e ) ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP p = atleast _ 1d ( z ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL DCSP p = atleast _ 1d ( p ) DCNL
DCSP try : DCNL DCSP DCSP subprocess.check _ call ( &#91; &apos; -c &apos; , &apos; -c &apos; , config &#93; ) DCNL DCSP except OSError : DCNL DCSP DCSP pass
DCSP return date.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; )
DCSP pos = 0 DCNL DCSP while True : DCNL DCSP DCSP line = line &#91; pos : &#93; DCNL DCSP DCSP if ( pos = = 0 ) : DCNL DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP if ( pos = = 0 ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP pos + = 1 DCNL DCSP return ( pos , pos )
DCSP return HttpResponseRedirect ( reverse ( &apos; admin _ login _ view &apos; , args = &#91; login _ view &#93; ) )
DCSP if ( len ( list ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return escape ( value )
DCSP if ( response _ type is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( response _ type is
DCSP out = &apos; \ n &apos; .join ( ( ( &apos; % s = % s &apos; % ( c , o ) ) for ( k , v ) in docdict.items ( ) if ( v is not None ) ) ) DCNL DCSP return &apos; \ n &apos; .join ( out )
DCSP string = dt.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) DCNL DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : % 02d : %
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return conn.create _ image ( resource _ name , instance _ id , instance _ name , tags , region , key , keyid , profile ) DCNL DCSP except BotoServerError as e : DCNL DCSP DCSP return { &apos; created &apos; : False , &apos; error &apos; : _ _ utils _ _ &#91; &apos; boto3.get _ error &apos; &#93; ( e ) }
DCSP if ( min _ len is None ) : DCNL DCSP DCSP max _ len = 0 DCNL DCSP elif ( min _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP elif ( min _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP elif ( max _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP elif ( max _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP else : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP if ( max _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP if ( max _ len is None ) : DCNL DCSP DCSP max _ len = max _ len DCNL DCSP if ( max _ len is None ) : DCNL DCSP DCSP max _ len = max ( max _ len , max _ len ) DCNL DCSP if ( max _ len is not None ) : DCNL DCSP
DCSP if ( platform.system ( ) = = &apos; Darwin &apos; ) : DCNL DCSP DCSP return True DCNL DCSP elif ( platform.system ( ) = = &apos; Darwin &apos; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP p = subprocess.Popen ( cmd , stdout = subprocess.PIPE , stderr = subprocess.PIPE ) DCNL DCSP ( stdout , stderr ) = proc.communicate ( ) DCNL DCSP if ( proc.returncode ! = 0 ) : DCNL DCSP DCSP raise SystemExit ( 1 )
DCSP CourseUserGroupPartitionGroup ( course _ key = course _ key , assignment _ type = assignment _ type )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ affinity _ group DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ affinity _ group DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ affinity _ group DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ affinity _ group DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not conn ) : DCNL DCSP DCSP conn = get _ conn ( ) DCNL DCSP if
DCSP expr = sympify ( expr ) DCNL DCSP if isinstance ( expr , Mul ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , Mul ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , Mul ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , Mul ) : DCNL DCSP DCSP return expr DCNL DCSP elif isinstance ( expr , Mul ) : DCNL DCSP DCSP return expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP if instance.id : DCNL DCSP DCSP user = instance.user DCNL DCSP DCSP if ( instance.id is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance.id is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance.id is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP user = instance.author DCNL DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP user = instance.author DCNL DCSP DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP user = instance.author DCNL DCSP DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( len ( ploc ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP between DCSP 1 DCSP or DCSP 1 &apos; % len ( t ) ) ) DCNL DCSP dlist = np.zeros ( ( 10 , 2 ) , dtype = np.float64 ) DCNL DCSP for i in range ( ( len ( ploc ) - 1 ) ) : DCNL DCSP DCSP tmp = np.zeros ( ( nobs + 1 ) ) DCNL DCSP DCSP for i in range ( len ( splitLine ) ) : DCNL DCSP DCSP DCSP tmp &#91; ( i , j ) &#93; = math.exp ( ( ( ( i - kiter ) - 1 ) , ( i + 1 ) ) ) DCNL DCSP return tmp
DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return fp.readline ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP signal.signal ( signal.SIGINT , signal.SIG _ IGN )
DCSP return tempfile.mkstemp ( suffix , prefix , parent ) &#91; 0 &#93;
DCSP backup _ dir = os.path.join ( dir , dir ) DCNL DCSP try : DCNL DCSP DCSP os.makedirs ( dir _ dir ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise
DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = int ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = 0 DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = len ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = bytes ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = bytes ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = bytes ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = int ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = 0 DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = len ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = bytes ( size ) DCNL DCSP if ( size is None ) : DCNL DCSP
DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP ys = ys DCNL DCSP else : DCNL DCSP DCSP xs = ys DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP ys = xs &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP xs = ys DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP ys = xs &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP xs = ys DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP ys = ys &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP xs = ys DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP ys = ys &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP xs = ys DCNL DCSP if ( len ( xs ) = = 1 ) : DCNL DCSP DCSP xs = ys DCNL DCSP else : DCNL DCSP DCSP ys =
DCSP if hasattr ( obj , &apos; _ _ iter _ _ &apos; ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP elif isinstance ( obj , basestring ) : DCNL DCSP DCSP obj =
DCSP return u &apos; &apos; .join ( ( ( u &apos; % s = % s &apos; % ( i , sep ) ) for ( i , v ) in enumerate ( text ) ) )
DCSP addresses = &#91; &#93; DCNL DCSP for addr in string.split ( &apos; \ n &apos; ) : DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not unique ) : DCNL DCSP DCSP DCSP continue
DCSP if isinstance ( key _ prefix , basestring ) : DCNL DCSP DCSP key _ prefix = key _ prefix DCNL DCSP if ( time _ slice is None ) : DCNL DCSP DCSP time _ slice = None DCNL DCSP else : DCNL DCSP DCSP time _ slice = key _ prefix DCNL DCSP if ( time _ slice is None ) : DCNL DCSP DCSP time _ slice = None DCNL DCSP if ( time _ slice &#91; 0 &#93; = = key _ prefix ) : DCNL DCSP DCSP start _ time = int ( time _ slice &#91; 0 &#93; ) DCNL DCSP elif ( time _ prefix = = &apos; &apos; ) : DCNL DCSP DCSP time _ slice + = 1 DCNL DCSP elif ( time _ slice &#91; 0 &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP start _ time = int ( time _ slice &#91; 0 &#93; ) DCNL DCSP elif ( time _ slice &#91; 0 &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP start _ time = int ( time _ slice &#91; 0 &#93; ) DCNL DCSP else : DCNL DCSP
DCSP host = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ HOST ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL DCSP port = config.get ( CONF _ PORT ) DCNL
DCSP forum = get _ object _ or _ 404 ( Forum , slug = forum _ slug ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP NewPostEvent.notify ( request.user , forum ) DCNL DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; forums.posts &apos; , args = &#91; forum _ slug &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; forums.posts &apos; , args = &#91; forum _ slug &#93; ) )
DCSP return getattr ( _ active , &apos; is _ disabled &apos; , False )
DCSP import ransac DCNL DCSP data = vstack ( ( tp , tp , model , maxiter ) ) DCNL DCSP return ( H , ransac _ data &#91; &apos; inliers &apos; &#93; )
DCSP if ( len ( string ) &lt; max _ width ) : DCNL DCSP DCSP return string DCNL DCSP if ( len ( string ) &lt; max _ width ) : DCNL DCSP DCSP return string &#91; : max _ width &#93; DCNL DCSP return string &#91; : max _ width &#93;
DCSP chart = Chart ( ) DCNL DCSP chart.add ( &apos; Serie &apos; , &#91; &#93; ) DCNL DCSP q = chart.render _ pyquery ( ) DCNL DCSP assert ( len ( q ( &apos; .legend &apos; ) ) = = 1 )
DCSP return Client ( * * kwargs )
DCSP with open ( request _ fp , &apos; wb &apos; ) as f : DCNL DCSP DCSP json.dump ( results , response _ fh , response _ dir = output _ dir , output _ dir = output _ dir , verbose = verbose )
DCSP a = &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; ,
DCSP if ( not isinstance ( browser , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % r &apos; % ( browser . _ _ class _ _ . _ _ name _ _ , _ _ name _ _ ) ) ) DCNL DCSP def wrap ( f ) : DCNL DCSP DCSP @ functools.wraps ( f ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return handler ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP d = Deferred ( ) DCNL DCSP reactor.callLater ( timeout , timeout , reason ) DCNL DCSP return d
DCSP if isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP elif isinstance ( row , str ) : DCNL DCSP DCSP return json.loads ( row ) DCNL DCSP else
DCSP tree = tree _ from _ tree ( cix ) DCNL DCSP tree = tree _ from _ tree ( tree ) DCNL DCSP return tree
DCSP try : DCNL DCSP DCSP return BaseComment.issue _ status _ to _ string ( status ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return u &apos; &apos;
DCSP ( yield 1 ) DCNL DCSP ( yield 2 ) DCNL DCSP ( yield ( 1 , 1 ) ) DCNL DCSP ( yield ( 1 , 1 ) ) DCNL DCSP ( yield ( 1 , 1 ) ) DCNL DCSP ( yield ( 1 , 1 ) ) DCNL DCSP ( yield ( 1 , 1 ) ) DCNL DCSP ( yield ( 1 , 1 ) )
DCSP parts = &#91; ( u &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in six.iteritems ( content ) &#93; DCNL DCSP return u &apos; \ n &apos; .join ( ( u &apos; \ n &apos; .join ( parts ) + u &apos; \ n &apos; ) )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP sys.exit ( ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sys.exit ( 1 )
DCSP if ( name _ filter is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP instance _ list = &#91; &#93; DCNL DCSP for instance _ name in name _ filter : DCNL DCSP DCSP if ( name _ filter = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name _ filter = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name _ filter = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name _ filter = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance _ type = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance _ type = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance _ type = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( instance _ type = = name _ filter ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if (
DCSP xs = np.asarray ( high ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return np.linspace ( low , high , low , n ) DCNL DCSP elif ( low = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError (
DCSP if ( not HAS _ WIN32 ) : DCNL DCSP DCSP return ( False , &apos; The DCSP python DCSP execution DCSP module DCSP cannot DCSP be DCSP loaded : DCSP { 0 } &apos; .format ( _ _ version _ _ ) ) DCNL DCSP return True
DCSP if ( not isinstance ( z , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Path DCSP must DCSP be DCSP a DCSP dictionary . &apos; ) DCNL DCSP if ( not isinstance ( z , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( z , dict ) : DCNL DCSP DCSP for ( k , v ) in six.iteritems ( z ) : DCNL DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP for ( k , v ) in six.iteritems ( fullpath ) : DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for ( k , v ) in six.iteritems ( d ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP for k in keys : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if isinstance ( v , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP word _ ids = &#91; &#93; DCNL DCSP for word in id _ to _ word : DCNL DCSP DCSP word _ id = word _ to _ word &#91; word &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word _ id &#93; DCNL DCSP DCSP word _ id = word _ to _ word &#91; word
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP assert ( ( script.site _ packages / &apos; simple-1.0-py % s.egg-info &apos; ) % pyversion ) in result.files _ created )
DCSP if ( not isinstance ( var , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( var , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( var , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( var , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( x , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( x , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; x DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( x , list )
DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = &#91; &#93; DCNL DCSP if ( not isinstance ( source , ( list , tuple ) ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Source
DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( public _ key = = &apos; &apos;
DCSP if ( &apos; xml &apos; in response &#91; 0 &#93; ) : DCNL DCSP DCSP body = response DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP body = &#91; json.loads ( response &#91; 0 &#93; ) &#93; DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP module.fail _ json ( msg = &apos; Command DCSP does DCSP not DCSP support DCSP JSON DCSP output &apos; , command = command ) DCNL DCSP return body
DCSP return _ osquery _ cmd ( table = &apos; hash &apos; , attrs = attrs , where = where )
DCSP data = _ get _ data ( ) DCNL DCSP return du.process _ recarray ( data , endog _ idx = 0 , dtype = float )
DCSP if isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP elif isinstance ( s , unicode ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP else : DCNL DCSP DCSP s = s.encode ( charset
DCSP ax = gca ( ) DCNL DCSP try : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( &apos; master &apos; in client ) : DCNL DCSP DCSP return True DCNL DCSP if ( &apos; master &apos; in client ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP config _ vars = { } DCNL DCSP for ( k , v ) in six.iteritems ( args ) : DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP config _ vars &#91; v &#93; = v DCNL DCSP return config _ vars
DCSP doc = frappe.get _ doc ( doctype , name ) DCNL DCSP for doctype in frappe.get _ doc ( doctype , name ) : DCNL DCSP DCSP frappe.get _ doc ( doctype , name )
DCSP pscmd = &#91; &#93; DCNL DCSP pscmd.append ( &quot; Application DCSP -Path DCSP &apos; { 0 } &apos; &quot; .format ( name ) ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP return ret
DCSP utils.print _ list ( cs.floating _ ips.list ( ) , &apos; interfaces &apos; )
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if as _ string : DCNL DCSP DCSP return get _ primary _ key _ value ( instance , as _ string ) DCNL DCSP else : DCNL DCSP DCSP return get _ primary _ key _ value ( instance , as _ string )
DCSP if ( lower _ bound is None ) : DCNL DCSP DCSP upper _ bound = condition.lower ( ) DCNL DCSP if ( lower _ bound is None ) : DCNL DCSP DCSP upper _ bound = condition.lower ( ) DCNL DCSP if ( upper _ bound is None ) : DCNL DCSP DCSP upper _ bound = condition.lower ( ) DCNL DCSP if ( upper _ bound is not None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP operator DCSP type : DCSP % s &apos; % lower _ bound ) ) DCNL DCSP if ( lower _ bound is None ) : DCNL DCSP DCSP upper _ bound = condition.lower ( ) DCNL DCSP elif ( upper _ bound is not None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP operator DCSP % s &apos; % lower _ bound ) ) DCNL DCSP if ( upper _ bound is not None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP operator DCSP % s &apos; % lower _ bound ) ) DCNL DCSP if ( upper _ bound is not None )
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP path = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP path = os.path.expanduser ( &apos; ~ &apos; ) DCNL DCSP DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; Symlinks DCSP are DCSP not DCSP available DCSP on DCSP Windows DCSP Vista DCSP or DCSP later &apos; ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP return path
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP r = conn.get _ all _ launch _ configurations ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP return r
DCSP for i in range ( 1 , len ( tmpdir ) ) : DCNL DCSP DCSP for i in range ( 1 , len ( tmpdir ) ) : DCNL DCSP DCSP DCSP ( yield ( &apos; % s : DCSP % s &apos; % ( i , i ) ) )
DCSP step = Step.from _ string ( I _ HAVE _ TASTY _ BEVERAGES ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( len ( steps ) = = 1 ) DCNL DCSP assert ( steps
DCSP if ( family = = &apos; darwin &apos; ) : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; poudriere.conf &apos; ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; poudriere.conf &apos; )
DCSP nonlinearity = getattr ( layer , &apos; name &apos; , None ) DCNL DCSP if ( nonlinearity is not None ) : DCNL DCSP DCSP layer.nonlinearity = nonlinearities.identity DCNL DCSP return Layer ( * * kwargs )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; , &apos; warnings &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP run _ command ( template , * args , * * kwargs )
DCSP base _ dir = os.path.dirname ( os.path.abspath ( _ _ file _ _ ) ) DCNL DCSP base _ dir = os.path.dirname ( os.path.abspath ( _ _ file _ _ ) ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join ( base _ dir , &apos; .. &apos; ) DCNL DCSP base _ dir = os.path.join
DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a ) DCNL DCSP a = np.asarray ( a , dtype = float ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP a = np.asarray ( a
DCSP p = asarray ( z ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( k ! = ( -1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; k DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP class EndPoint ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return &apos; Hello DCSP World ! &apos; DCNL DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP hug.authentication.to ( &apos; foo &apos; )
DCSP serv = _ get _ serv ( ret = None ) DCNL DCSP cur = conn.cursor ( ) DCNL DCSP sql = &apos; SELECT DCSP load DCSP FROM DCSP jids DCSP WHERE DCSP jid DCSP = DCSP % s &apos; DCNL DCSP cur.execute ( sql , ( jid , ) ) DCNL DCSP data = cur.fetchone ( ) DCNL DCSP if data : DCNL DCSP DCSP return json.loads ( data ) DCNL DCSP return None
DCSP feature _ files = &#91; &#93; DCNL DCSP for feature _ file in feature _ files : DCNL DCSP DCSP feature _ list.append ( feature _ file ( feature _ file , language ) ) DCNL DCSP return features _ list
DCSP session = db.get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP cred = session.query ( l2network _ models.Credential ) .filter _ by ( tenant _ id = tenant _ id ) .filter _ by ( credential _ id = credential _ id ) .one ( ) DCNL DCSP DCSP return cred DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return None
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if (
DCSP if ( not isinstance ( r , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; r DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( r , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; a DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( r , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; a DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( r , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; a DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( r , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; a DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( r , ( list , tuple ) ) )
DCSP try : DCNL DCSP DCSP iter ( obj ) DCNL DCSP except : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = a.shape &#91; axis &#93; DCNL DCSP return
DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = { } DCNL DCSP if ( create _ using.is _ directed ( ) and ( not create _ using.is _ directed ( ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL
DCSP serv = _ get _ serv ( ret = None ) DCNL DCSP cur = conn.cursor ( ) DCNL DCSP sql = &apos; INSERT DCSP INTO DCSP jids DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( user _ id _ or _ name is None ) : DCNL DCSP DCSP return False DCNL
DCSP if ( len ( s ) = = 1 ) : DCNL DCSP DCSP return s &#91; 0 &#93; DCNL DCSP elif ( len ( s ) = = 1 ) : DCNL DCSP DCSP return s &#91; 0 &#93; DCNL DCSP elif ( len ( s ) = = 1 ) : DCNL DCSP DCSP return s &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP if ( key _ func is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( key _ func is not None ) : DCNL DCSP DCSP return key _ func DCNL DCSP else : DCNL DCSP DCSP return key _ func
DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = 1 DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = weight DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; = graph.node &#91; dst &#93; &#91; &apos; weight &apos; &#93; DCNL DCSP return weight
DCSP if isinstance ( * args ) : DCNL DCSP DCSP return str ( * args ) DCNL DCSP else : DCNL DCSP DCSP return str ( * args )
DCSP if move _ to _ start : DCNL DCSP DCSP with open ( os.path.join ( container , name ) , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP content = f.read ( ) .decode ( &apos; utf-8 &apos; ) DCNL DCSP DCSP if move _ to _ start : DCNL DCSP DCSP DCSP content = content.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) .replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP DCSP if move _ to _ start : DCNL DCSP DCSP DCSP content = content.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP DCSP if move _ to _ start : DCNL DCSP DCSP DCSP content = content.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP DCSP if move _ to _ start : DCNL DCSP DCSP DCSP content = content.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) .replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP DCSP if move _ to _ start : DCNL DCSP DCSP DCSP content = content.replace ( &apos; \ n &apos; , &apos; DCSP &apos; )
DCSP sys.settrace ( None ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except Exception : DCNL DCSP DCSP pass
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP kwargs &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; = request.session &#91; &apos; csrf _ token &apos; &#93; DCNL DCSP request.session &#91; &apos; csrf _ token &apos; &#93; =
DCSP try : DCNL DCSP DCSP return range ( start , end ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP content DCSP range : DCSP % r &apos; % start ) )
DCSP if ( not isinstance ( css _ file , basestring ) ) : DCNL DCSP DCSP css _ file = css _ file ( css _ file ) DCNL DCSP else : DCNL DCSP DCSP css _ file = css _ file
DCSP for pointIndex in xrange ( len ( loop ) ) : DCNL DCSP DCSP pointBegin = loop &#91; pointIndex &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP if ( len ( loop ) &lt; len ( loop ) ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP return np.array ( &#91; &#91; 0 , 0 &#93; , &#91; 1 , 1 , 1 &#93; , &#91; 1 , 1 , 1 &#93; , &#91; 1 , 1 , 1 &#93; , &#91; 1 , 1 , 1 &#93; , &#91; 1 , 1 , 1 &#93; &#93; , dtype = numpy.float64 , copy = False )
DCSP tempdir = _ TempDir ( ) DCNL DCSP data = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP assert _ true ( ( len ( data ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( data ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( data ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( data ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( data ) = = 2 ) )
DCSP return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 2 * * 2 ) * * 2 ) * * 2 ) * * 2 ) * * 2 ) * * 2 ) * * 2 ) * * 2 ) ) + ( ( ( -2.0 ) * np.pi ) * * 2 ) * * 2 ) ) + ( ( ( ( -2.0 ) * np.pi ) * * 2 ) * * 2 ) ) + ( (
DCSP if ( type ( _ type ) = = type ) : DCNL DCSP DCSP return type ( _ type ) ( description ) DCNL DCSP elif isinstance ( type _ , str ) : DCNL DCSP DCSP return _ type _ to _ string ( type _ , description ) DCNL DCSP else : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP type DCSP % s &apos; % type _ ) )
DCSP yaml _ path = get _ yaml _ path ( dir _ path ) DCNL DCSP if ( not yaml _ path ) : DCNL DCSP DCSP raise ValueError ( ( &apos; No DCSP exploration DCSP found DCSP for DCSP dir DCSP % s &apos; % dir _ path ) ) DCNL DCSP return yaml _ path
DCSP sol = np.empty ( ( len ( data ) , n _ jobs ) , dtype = np.float32 , copy = True , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False , eeg = False ,
DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP copy _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs =
DCSP scenario = Scenario.from _ string ( physical _ line ) DCNL DCSP scenario = Scenario.from _ string ( scenario ) DCNL DCSP assert ( len ( scenario ) = = 0 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario ) = = 1 ) DCNL DCSP assert ( len ( scenario &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( scenario &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( scenario &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( scenario &#91; 0 &#93; ) = = 1 ) DCNL DCSP assert ( len ( scenario &#91; 0 &#93; )
DCSP return ( hasattr ( object , &apos; _ _ file _ _ &apos; ) and hasattr ( object , &apos; _ _ file _ _ &apos; ) )
DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( not kwargs ) : DCNL
DCSP with open ( jar _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP for line in ifile : DCNL DCSP DCSP DCSP ( yield entry )
DCSP if ( colors is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( colors is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; color &apos; &#93; = color DCNL DCSP if ( colors is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; color &apos; &#93; = color DCNL DCSP return color ( columns , palette , bin , * * kwargs )
DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp = importlib.import _ module DCNL DCSP if ( imp is None ) : DCNL DCSP DCSP imp =
DCSP return render _ to _ response ( template _ name , { } , context _ instance = RequestContext ( request ) )
DCSP getvalue = stream.getvalue DCNL DCSP dumper = Dumper ( stream , default _ style = default _ style , default _ flow _ style = default _ flow _ style , canonical = canonical , indent = indent , width = width , allow _ unicode = allow _ unicode , line _ break = line _ break , encoding = encoding , tags = tags , explicit _ start = explicit _ end , explicit _ end = explicit _ end ) DCNL DCSP dumper.open ( ) DCNL DCSP for stream in documents : DCNL DCSP DCSP dumper.serialize ( stream ) DCNL DCSP dumper.close ( ) DCNL DCSP if getvalue : DCNL DCSP DCSP return getvalue ( )
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( os.lstat ( path1 ) .st _ ino = = os.lstat ( path2 ) .st _ ino ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return pydot _ layout ( G , prog = prog , root = root , args = args )
DCSP return u &apos; &apos; .join ( &#91; ( u &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in _ help _ tags ( ) &#93; )
DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if ( project is None ) : DCNL DCSP DCSP project = bigquery _ client.dataset ( dataset _ name ) DCNL DCSP if
DCSP try : DCNL DCSP DCSP return iter ( seq ) .next ( ) DCNL DCSP except StopIteration : DCNL DCSP DCSP return environment.undefined ( &apos; No DCSP first DCSP item , DCSP sequence DCSP was DCSP empty . &apos; )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP text = text.strip ( ) DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return
DCSP ( scheme , netloc , path , query , fragment ) = urlsplit ( url , scheme , allow _ fragments ) DCNL DCSP ( scheme , netloc , query , query , fragment ) = urlsplit ( url , scheme , allow _ fragments ) DCNL DCSP ( scheme , netloc , query , query , fragment ) = urlsplit ( url , scheme , allow _ fragments ) DCNL DCSP ( scheme , netloc , query , query , fragment ) = urlsplit ( url , scheme , allow _ fragments ) DCNL DCSP ( scheme , netloc , query , query , fragment ) = urlsplit ( url , scheme , allow _ fragments ) DCNL DCSP ( scheme , netloc , query , query , fragment ) = match.groups ( ) DCNL DCSP return ( scheme , netloc , query , query , fragment )
DCSP groups = &#91; &#93; DCNL DCSP for arg in args : DCNL DCSP DCSP if ( not isinstance ( arg , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for arg in args : DCNL DCSP DCSP DCSP if isinstance ( item , basestring ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( item , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( item , basestring ) : DCNL DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.get _ policy ( policyName = policyName , policyVersionId = policyVersionId ) DCNL DCSP DCSP return { &apos; policy &apos; : None } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP policy _ dict = { } DCNL DCSP for ( name , value ) in six.iteritems ( from _ params ) : DCNL DCSP DCSP if isinstance ( value , six.text _ type ) : DCNL DCSP DCSP DCSP policy _ name = ( &apos; % s . % s &apos; % ( name , value ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP policy _ name = &apos; { 0 } : { 1 } &apos; .format ( name , value ) DCNL DCSP return policy _ value
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP elif ( len ( tokens ) = = 2 ) : DCNL DCSP DCSP return ( tokens &#91; 0 &#93; , options &#91; 1 : &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( tokens &#91; 0 &#93; , options &#91; 1 &#93; )
DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP DCSP del _ _ opts _ _ &#91; &apos; test &apos; &#93; DCNL DCSP DCSP DCSP del _ _ opts _ _ &#91; &apos; test &apos; &#93; DCNL DCSP DCSP DCSP del _ _ opts _ _ &#91; &apos; test &apos; &#93; DCNL DCSP DCSP DCSP del _ _ opts _ _ &#91; &apos; test &apos; &#93; DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return _ _ virtualname _ _
DCSP if ( not value ) : DCNL DCSP DCSP raise ValueError ( &apos; value DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP string &apos; ) DCNL
DCSP return { u &apos;id &apos; : job _ id , u &apos;id &apos; : job _ id , u &apos;id &apos; : job _ id , u &apos;id &apos; : job _ id , u &apos;id &apos; : job _ id }
DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP basicConfig ( ) DCNL DCSP root.debug ( msg , * args , * * kwargs )
DCSP assert ( round ( ( 10 * 1024 ) ) = = 0 ) DCNL DCSP assert ( round ( ( 10 * * 2 ) ) = = 0 ) DCNL DCSP assert ( round ( ( 10 * * 2 ) ) = = 0 ) DCNL DCSP assert ( round ( ( 10 * * 2 ) ) = = 0 )
DCSP return tf.train.FeatureList ( feature = &#91; _ int64 _ feature ( v ) for v in values &#93; )
DCSP return _ sys _ version ( ) &#91; 1 &#93;
DCSP if ( part is None ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( part , ( list , tuple ) ) : DCNL DCSP DCSP sort = query.sort ( ) DCNL DCSP else : DCNL DCSP DCSP sort = model _ cls DCNL DCSP return sort _ sort _ part ( model , part )
DCSP return _ resource ( &apos; add &apos; , zone , resource _ type , * * kwargs )
DCSP bits = &#91; &#93; DCNL DCSP for i in range ( 0 , ( len ( s ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP byte = ord ( byte &#91; i : ( i + 1 ) &#93; ) DCNL DCSP DCSP if ( ( byte &amp; 128 ) = = 0 ) : DCNL DCSP DCSP DCSP bits + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP bits + = bits DCNL DCSP DCSP bits + = 1 DCNL DCSP return &apos; &apos;.join ( ( chr ( i ) for i in range ( bits ) ) )
DCSP filename = os.path.dirname ( directory ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP filename = os.path.join ( directory , filename ) DCNL DCSP try : DCNL DCSP DCSP os.makedirs ( filename ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP fig = Gcf.get _ active ( ) DCNL DCSP if ( figManager is not None ) : DCNL DCSP DCSP figManager = Gcf.get _ active ( ) DCNL DCSP DCSP if ( figManager is not None ) : DCNL DCSP DCSP DCSP figManager.canvas.draw ( )
DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL
DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , ip _ addr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , ip _ addr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , ip _ addr ) DCNL DCSP except socket.error : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP a = asarray ( a ) DCNL DCSP a = asarray ( a ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; a DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite _ a ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP if hasattr ( obj , &apos; _ _ cuda _ ndarray _ _ &apos; ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP cuda _ ndarray _ is _ cuda _ ndarray ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP complexPath = &#91; &#93; DCNL DCSP for point in path : DCNL DCSP DCSP complexPath.append ( point.dropAxis ( ) ) DCNL DCSP return complexPath
DCSP if ( len ( dim ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( len ( dim ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( dim = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( dim = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( dim = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( dim = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; dim DCSP must DCSP be DCSP greater DCSP than DCSP 1 &apos; ) DCNL DCSP if ( dim = = 0 ) : DCNL DCSP DCSP raise ValueError (
DCSP if predicate : DCNL DCSP DCSP if predicate : DCNL DCSP DCSP DCSP text = text &#91; 0 : ( -1 ) &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP text = text &#91; 0 : ( -1 ) &#93; DCNL DCSP return text
DCSP return six.next ( six.iterkeys ( obj ) )
DCSP return ( ( not is _ ssh _ uri ( url ) ) and ( not is _ ssh _ uri ( url ) ) )
DCSP if hasattr ( cls , &apos; _ _ class _ _ &apos; ) : DCNL DCSP DCSP return cls . _ _ class _ _ ( cls ) DCNL DCSP else : DCNL DCSP DCSP return cls . _ _ class _ _ ( cls )
DCSP if ( len ( scale ) &gt; 2 ) : DCNL DCSP DCSP scale = ( scale * numpy.cos ( scale ) ) DCNL DCSP else : DCNL DCSP DCSP point = scale &#91; : , np.newaxis &#93; DCNL DCSP return scale
DCSP context = { &apos; form &apos; : form , &apos; form &apos; : form } DCNL DCSP context.update ( extra _ context ) DCNL DCSP return render _ to _ response ( template _ name , { &apos; form &apos; : form , &apos; form &apos; : form } , context _ instance = RequestContext ( request ) , response _ format = template _ name )
DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt = u &apos; { } DCSP { } &apos; .format ( fmt , fmt ) DCNL DCSP fmt
DCSP if ( position is None ) : DCNL DCSP DCSP position = None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP position = ( position + 1 ) DCNL DCSP return track _ to _ mpd _ format ( track , position , stream _ title = stream _ title )
DCSP return os.path.join ( repository.getProfileDirectory ( ) , repository )
DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element
DCSP if ( path is None ) : DCNL DCSP DCSP paths = &#91; &#93; DCNL DCSP if ( len ( repo ) &gt; max _ entries ) : DCNL DCSP DCSP print ( ( &apos
DCSP return _ osquery _ cmd ( table = table , chain = chain , rule = chain , family = family )
DCSP if isinstance ( domain _ obj _ list , list ) : DCNL DCSP DCSP domain _ obj _ list = &#91; &#93; DCNL DCSP elif isinstance ( domain _ obj _ list , list ) : DCNL DCSP DCSP domain _ obj _ list = list ( domain _ obj _ list ) DCNL DCSP elif isinstance ( domain _ obj _ list , list ) : DCNL DCSP DCSP domain _ obj _ list = list ( domain _ obj _ list ) DCNL DCSP else : DCNL DCSP DCSP names _ list = &#91; &#93; DCNL DCSP for name in domain _ obj _ list : DCNL DCSP DCSP name _ list.append ( name ) DCNL DCSP return names _ list
DCSP with open ( filename , &apos; r &apos; ) as f : DCNL DCSP DCSP return json.loads ( f.read ( ) )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP alarms = conn.list _ alarms ( ) DCNL DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP alarms = alarms &#91; 0 &#93; DCNL DCSP DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP DCSP alarms = alarms &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP alarms = &#91; &#93; DCNL DCSP DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP DCSP alarms = alarms &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP alarms = &#91; &#93; DCNL DCSP DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP DCSP alarms = alarms &#91; 1 : &#93; DCNL DCSP DCSP DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP alarms = alarms &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP if ( len ( alarms ) = = 1 ) : DCNL DCSP DCSP
DCSP if isinstance ( n , int ) : DCNL DCSP DCSP n = int ( n ) DCNL DCSP else : DCNL DCSP DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return jsonify ( { &apos; Content-Type &apos; : &apos; application / json &apos; } )
DCSP if ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( frame = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP
DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( string , str ) ) : DCNL DCSP DCSP return False DCNL DCSP if
DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( not global _ dict ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global _ dict DCNL DCSP if ( global _ dict is None ) : DCNL DCSP DCSP global
DCSP if ( not target _ dir ) : DCNL DCSP DCSP target _ dir = os.getcwd ( ) DCNL DCSP if ( not target _ dir ) : DCNL DCSP DCSP target _ dir = os.getcwd ( ) DCNL DCSP if ( not target _ dir ) : DCNL DCSP DCSP target _ dir = os.getcwd ( ) DCNL DCSP if ( not target _ dir ) : DCNL DCSP DCSP target _ dir = os.getcwd ( ) DCNL DCSP if ( not target _ dir ) : DCNL DCSP DCSP target _ dir = os.path.join ( target _ dir , * args ) DCNL DCSP if ( not os.path.exists ( target _ dir ) ) : DCNL DCSP DCSP os.makedirs ( target _ dir ) DCNL DCSP return run ( * args , * * kwargs )
DCSP ( tris , tris ) = get _ tris _ tris ( weight , verbose = verbose ) DCNL DCSP tris = np.concatenate ( ( tris , tris ) ) DCNL DCSP return tris
DCSP last _ modified = datetime.datetime.utcnow ( ) DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last _ modified = last _ modified DCNL DCSP last
DCSP ret = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = { } DCNL DCSP if ( not node ) : DCNL DCSP DCSP node = disp.SendAndWaitForResponse ( Iq ( &apos; list &apos; , NS _ PRIVACY , { &apos; name &apos; : jid } ) ) DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = disp.SendAndWaitForResponse ( Iq ( &apos; set &apos; , NS _ PRIVACY , data = { &apos; name &apos; : jid } ) ) DCNL DCSP if isResultNode ( resp ) : DCNL DCSP DCSP return
DCSP entity _ id = entity _ id ( entity _ id ) DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP if ( entity _ id is None ) : DCNL DCSP DCSP entity _ id = entity _ id DCNL DCSP
DCSP t &#91; 0 &#93; = t &#91; 1 &#93;
DCSP return _ get _ all _ plugins ( )
DCSP return isinstance ( field , ( list , tuple ) )
DCSP def decorator ( view _ func ) : DCNL DCSP DCSP @ wraps ( view _ func ) DCNL DCSP DCSP def wrapped _ view ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP DCSP return login _ login ( request , * args , * * kwargs ) DCNL DCSP DCSP DCSP return view _ func ( request , * args , * * kwargs ) DCNL DCSP DCSP return _ wrapped _ view DCNL DCSP return decorator
DCSP task = get _ object _ or _ 404 ( Task , pk = task _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( task ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Task &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; task &apos; : task } ) DCNL DCSP return render _ to _ response ( &apos; projects / task _ view &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP encodedString = &apos; &apos; DCNL DCSP if ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( string = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return ( string , &apos; &apos;.join ( string ) )
DCSP files = &#91; &#93; DCNL DCSP for path in paths : DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP add _ devices ( &#91; TcpBinarySensor ( hass , config ) &#93; )
DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 153 , 102 , 153 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 240 , 100 , 50 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 255 , 255 , 255 ) )
DCSP with open ( self , &apos; rb &apos; ) as f : DCNL DCSP DCSP data = f.read ( ) DCNL DCSP DCSP for path in paths : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield path ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass
DCSP return t
DCSP try : DCNL DCSP DCSP return eval ( a , b ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP entry _ class = _ parse _ entry _ class ( document _ file , strict = False , start _ position = end _ position , end _ position = end _ position , index _ position = end _ position , section _ end _ keywords = extra _ args ) DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( entry _ class is None ) : DCNL DCSP DCSP return None DCNL DCSP
DCSP return objects.flavor _ list ( request )
DCSP policy = POLICIES.get _ by _ index ( base _ or _ index ) DCNL DCSP if ( policy is None ) : DCNL DCSP DCSP return None DCNL DCSP policy = POLICIES.get _ by _ index ( policy _ or _ index ) DCNL DCSP if ( policy is None ) : DCNL DCSP DCSP return None DCNL DCSP policy = POLICIES.get _ by _ index ( policy _ or _ index ) DCNL DCSP if policy : DCNL DCSP DCSP return policy DCNL DCSP else : DCNL DCSP DCSP return None
DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP upgrading DCSP packages &apos; ) DCNL DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP upgrading DCSP packages &apos; , info = { &apos; result &apos; : result } ) DCNL DCSP return ret
DCSP content = ( app.config &#91; &apos; HELP _ TEXT &apos; &#93; + app.config &#91; &apos; HELP _ TEXT &apos; &#93; ) DCNL DCSP return wechat.response _ text ( content )
DCSP if mode : DCNL DCSP DCSP return mode DCNL DCSP else : DCNL DCSP DCSP return mode
DCSP if ( title is None ) : DCNL DCSP DCSP title = None DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = None DCNL DCSP if ( title is not None ) : DCNL DCSP DCSP if ( title is not None ) : DCNL DCSP DCSP DCSP root.save ( )
DCSP M = np.asarray ( M ) DCNL DCSP if ( M &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; M DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( M &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; M DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( M &#91; 1 &#93; ! = M &#91; 1 &#93; ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( M &#91; 1 &#93; ! = M &#91; 1 &#93; ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP scalars . &apos; ) DCNL DCSP if ( M &#91; 1 &#93; ! = M &#91; 1 &#93; ) : DCNL DCSP DCSP raise ValueError ( &apos; M DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( M &#91; 1 &#93; ! = M &#91; 1 &#93; ) : DCNL DCSP DCSP raise ValueError ( &apos; M DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( M &#91;
DCSP config = { } DCNL DCSP for ( key , value ) in config.iteritems ( ) : DCNL DCSP DCSP if ( key not in config ) : DCNL DCSP DCSP DCSP config &#91; key &#93; = { } DCNL DCSP DCSP config &#91; key &#93; = value DCNL DCSP return config
DCSP if ( not name ) : DCNL DCSP DCSP return None DCNL DCSP group _ obj = _ get _ group _ group ( name , match _ obj ) DCNL DCSP if ( not group _ obj ) : DCNL DCSP DCSP return None DCNL DCSP return group _ obj
DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret = settings.SECRET _ KEY DCNL DCSP if ( secret is None ) : DCNL DCSP DCSP secret =
DCSP if salt.utils.is _ darwin ( ) : DCNL DCSP DCSP return _ osquery _ cmd ( table = &apos; config _ list &apos; , attrs = attrs , where = where ) DCNL DCSP return { &apos; result &apos; : False , &apos; comment &apos; : &apos; Only DCSP available DCSP on DCSP macOS DCSP systems . &apos; }
DCSP if ( not args ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if isinstance ( X , np.ndarray ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X ) DCNL DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP matrix DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP matrix DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP matrix DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP matrix DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The
DCSP configuration = dict ( ( ( k , v ) for ( k , v ) in pkgutil.iter _ modules ( ) if ( v is not None ) ) ) DCNL DCSP return configuration
DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP if ( file is None ) : DCNL DCSP DCSP file = sys.stderr DCNL DCSP try : DCNL DCSP
DCSP ( x , y
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP return f.read ( ) DCNL DCSP except Exception : DCNL DCSP DCSP return None
DCSP instance _ ref = _ instance _ type _ get ( context , values ) DCNL DCSP if ( not instance _ ref ) : DCNL DCSP DCSP raise exception.InstanceTypeNotFound ( instance _ id = values &#91; &apos; id &apos; &#93; ) DCNL DCSP return instance _ ref
DCSP if ( not update ) : DCNL DCSP DCSP return DCNL DCSP if ( not isinstance ( update , dict ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP resource &apos; % update ) )
DCSP tokens = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( sentence ) , 1 ) : DCNL DCSP DCSP ( yield i ) DCNL DCSP DCSP for i in range ( len ( tokens ) ) : DCNL DCSP DCSP DCSP ( yield ( i , i ) )
DCSP if isinstance ( expression , dict ) : DCNL DCSP DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( expr , dict ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP
DCSP return op ( op , op , b , raise _ on _ error = raise _ on _ error , use _ numexpr = use _ numexpr , use _ numexpr = use _ numexpr , * * parse _ kwargs )
DCSP f = open ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , mode = &apos; r &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , mode = &apos; r &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL DCSP zf = zipfile.ZipFile ( archive _ path , &apos; wb &apos; ) DCNL
DCSP if ( ( X _ to _ mask is None ) or ( value _ to _ mask is None ) ) : DCNL DCSP DCSP return None DCNL DCSP mask = np.zeros ( ( X.shape &#91; 0 &#93; , ) , dtype = np.float64 ) DCNL DCSP mask &#91; mask &#93; = 0 DCNL DCSP mask &#91; mask &#93; = 0 DCNL DCSP return mask
DCSP def decorator ( x ) : DCNL DCSP DCSP if ( x = = 0 ) : DCNL DCSP DCSP DCSP return 1 DCNL DCSP DCSP x = K.placeholder ( ndim = 2 ) DCNL DCSP DCSP def f ( x ) : DCNL DCSP DCSP DCSP return ( ( x * * 2 ) + ( x * * 2 ) ) DCNL DCSP return clip.fl _ function ( ( lambda x : x ) )
DCSP with open ( package _ dirpath , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write (
DCSP if ( colx = = 0 ) : DCNL DCSP DCSP return alphabet &#91; colx &#93; DCNL DCSP elif ( colx = = 0 ) : DCNL DCSP DCSP return alphabet &#91; colx &#93; DCNL DCSP elif ( colx = = 0 ) : DCNL DCSP DCSP return alphabet &#91; colx &#93; DCNL DCSP elif ( colx = = 1 ) : DCNL DCSP DCSP return alphabet &#91; colx &#93; DCNL DCSP else : DCNL DCSP DCSP return alphabet &#91; colx &#93;
DCSP if ( b is None ) : DCNL DCSP DCSP return None DCNL DCSP return b
DCSP if hasattr ( response , &apos; seek &apos; ) : DCNL DCSP DCSP if hasattr ( response , &apos; seek &apos; ) : DCNL DCSP DCSP DCSP seek _ seek ( response ) DCNL DCSP DCSP return response DCNL DCSP else : DCNL DCSP DCSP return response
DCSP try : DCNL DCSP DCSP module = import _ module ( name ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return load _ module ( name , file , details ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP runner = unittest.TextTestRunner ( ) DCNL DCSP runner.run ( )
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( ccx
DCSP try : DCNL DCSP DCSP return int ( num ) DCNL DCSP except ValueError : DCNL DCSP DCSP return num
DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( token , string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if
DCSP try : DCNL DCSP DCSP f = open ( file _ name , &apos; rb &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if verbose : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP return ( string &#91; : ( -1 ) &#93; , string &#91; ( -1 ) &#93; )
DCSP for log in loggers : DCNL DCSP DCSP log _ log = logging.getLogger ( engine ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP log _ log = logging.getLogger ( _ _ name _ _ ) DCNL DCSP DCSP
DCSP model = getattr ( model , instance _ or _ pk ) DCNL DCSP return getattr ( model , instance _ or _ pk )
DCSP extra _ data = &#91; &#93; DCNL DCSP for ( key , value ) in iteritems ( values ) : DCNL DCSP DCSP if isinstance ( value , six.text _ type ) : DCNL DCSP DCSP DCSP value = value.encode ( charset ) DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP value = bytes _ to _ bytes ( value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = bytes _ to _ bytes ( value ) DCNL DCSP DCSP if isinstance ( value , six.text _ type ) : DCNL DCSP DCSP DCSP value = value.encode ( charset ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = bytes _ to _ bytes ( value ) DCNL DCSP DCSP if isinstance ( value , six.text _ type ) : DCNL DCSP DCSP DCSP value = value.encode ( charset ) DCNL DCSP DCSP if isinstance ( value , bytes ) : DCNL DCSP DCSP DCSP value = value.encode ( charset ) DCNL DCSP DCSP if isinstance ( value , bytes ) : DCNL DCSP DCSP DCSP value = bytes ( value ) DCNL DCSP DCSP else :
DCSP if ( not isinstance ( n _ jobs , numbers.Integral ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n _ jobs DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( n _ jobs , numbers.Integral ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n _ jobs DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( n _ jobs , numbers.Integral ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n _ jobs DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( new _ len is None ) : DCNL DCSP DCSP raise ValueError ( &apos; n _ jobs DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( new _ len is not None ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( new _ len is None ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if (
DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = FLAGS.batch _ size DCNL DCSP if ( batch _ size is None ) : DCNL
DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = os.environ &#91; &apos; SERVER _ SOFTWARE &apos; &#93; DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = os.environ &#91; &apos; SERVER _ SOFTWARE &apos; &#93; DCNL DCSP if ( target not in os.environ ) : DCNL DCSP DCSP raise ValueError ( &apos; target DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( target not in os.environ ) : DCNL DCSP DCSP raise ValueError ( &apos; target DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( target not in os.environ ) : DCNL DCSP DCSP raise ValueError ( &apos; target DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( target not in os.environ ) : DCNL DCSP DCSP raise ValueError ( &apos; target DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( target not in os.environ ) : DCNL DCSP DCSP raise ValueError ( &apos; target DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL
DCSP mod = fn.module DCNL DCSP fnty = fn.type.pointee DCNL DCSP consts = &#91; lc.MetaDataString.get ( mod , &apos; kernel _ arg _ base _ type &apos; ) &#93; DCNL DCSP base = lc.MetaDataString.get ( mod , &apos; kernel _ arg _ base _ type &apos; ) DCNL DCSP return lc.MetaData.get ( mod , &#91; base &#93; )
DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( method is not None )
DCSP if isinstance ( source , basestring ) : DCNL DCSP DCSP source = source.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP source = source.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; source DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; source DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; source DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; source DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( source , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; source DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL
DCSP if ( len ( input ) ! = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( size is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP a
DCSP if ( not hasattr ( cls , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( cls . _ _ class _ _ . _ _ name _ _ , cls . _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP if ( not hasattr ( cls , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( self . _ _ class _ _ . _ _ name _ _ , cls . _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP if ( not hasattr ( cls , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( cls . _ _ name _
DCSP session = context.session DCNL DCSP with session.begin ( subtransactions = True ) : DCNL DCSP DCSP port = session.query ( BrocadePort ) .filter _ by ( port _ id = port _ id ) .first ( ) DCNL DCSP DCSP if port : DCNL DCSP DCSP DCSP port = session.query ( BrocadePort ) .filter _ by ( port _ id = port _ id ) .first ( ) DCNL DCSP DCSP DCSP return port
DCSP length = 0 DCNL DCSP for ( i , char ) in enumerate ( tokens ) : DCNL DCSP DCSP if ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP if ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP DCSP elif ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP if ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP pos + = 1 DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( char = = &apos; DCSP &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( args ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP mlp = MLP ( layers = &#91; Linear ( layer _ name = &apos; h &apos; , dim = 5 , irange = 0.01 ) &#93; ) DCNL DCSP conditional = BernoulliVector ( mlp = mlp , name = &apos; conditional &apos; ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP input _ space = VectorSpace ( dim = 5 ) DCNL DCSP conditional.initialize _ parameters ( input _ space = input _ space , ndim = 5 ) DCNL DCSP mu = T.matrix ( &apos; mu &apos; ) DCNL DCSP mu = T.matrix ( &apos; mu &apos; ) DCNL DCSP mu = T.matrix ( &apos; mu &apos; ) DCNL DCSP mu = T.matrix ( &apos; mu &apos; ) DCNL DCSP mu = T.matrix ( &apos; mu &apos; ) DCNL DCSP conditional = BernoulliVector ( mlp = mlp , name = &apos; conditional &apos; ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP conditional.initialize _ parameters ( input _ space = input _ space ,
DCSP return _ by _ text ( text , _ edns _ by _ value , _ edns _ flags _ flags )
DCSP if isinstance ( value , datetime.date ) : DCNL DCSP DCSP value = value.date ( ) DCNL DCSP return datetime.datetime ( value.year , value.month , value.day )
DCSP all _ tasks = &#91; &#93; DCNL DCSP for draft in drafts : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP with open ( url , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP DCSP content = json.loads ( f.read ( ) ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP print ( &apos; Failed DCSP to DCSP find DCSP % s : DCSP % s &apos; % ( e , e ) ) DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( p , e ) ) )
DCSP assert _ equals ( output , path , n )
DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : False } } DCNL DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : False } } DCNL DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : False } } DCNL DCSP config _ stub.data = { &apos; general &apos; : { &apos; private-browsing &apos; : False } } DCNL DCSP config _ stub.set ( &apos; general &apos; , &apos; cookies-store &apos; , False ) DCNL DCSP with pytest.raises ( IOError ) : DCNL DCSP DCSP config _ stub.set ( &apos; general &apos; , &apos; cookies-store &apos; , False )
DCSP return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , derivation.height ) &#93; DCNL DCSP extrudeDerivation = extrude.ExtrudeDerivation ( copyShallow ) DCNL DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , derivation.height ) &#93; DCNL DCSP extrudeDerivation = extrude.ExtrudeDerivation ( copyShallow ) DCNL DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , derivation.height ) &#93; DCNL DCSP extrudeDerivation = extrude.ExtrudeDerivation ( copyShallow ) DCNL DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , derivation.height ) &#93; DCNL DCSP extrudeDerivation = extrude.ExtrudeDerivation ( copyShallow ) DCNL DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , derivation.height ) &#93; DCNL DCSP extrudeDerivation = extrude.ExtrudeDerivation ( copyShallow ) DCNL DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 ,
DCSP server _ stub = apiproxy _ stub _ map.apiproxy.GetStub ( &apos; SERVER _ SOFTWARE &apos; ) DCNL DCSP if ( server _ server is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return http _ stub
DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL DCSP context.table.require _ columns ( &#91; &apos; name &apos; , &apos; name &apos; &#93; ) DCNL DCSP assert context.table , &apos; REQUIRE : DCSP context.table &apos; DCNL
DCSP if check _ demultiplex _ field : DCNL DCSP DCSP with open ( infile , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP errors = open ( infile , &apos; w &apos; ) .read ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP if check _ demultiplex _ field : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP if check _ demultiplex _ field : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP if check _ demultiplex _ field : DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP DCSP warnings = open ( outfile , &apos; w &apos; ) DCNL DCSP DCSP DCSP
DCSP if isinstance ( name , ( list , tuple ) ) : DCNL DCSP DCSP name = name.split ( &apos; / &apos; ) &#91; ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP template = &apos; / &apos; .join ( name.split ( &apos; / &apos; ) &#91; : ( -1 ) &#93; ) DCNL DCSP return template
DCSP testdir.makepyfile ( &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP import DCSP pytest \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP \ n DCSP DCSP DCSP DCSP DCSP DCSP
DCSP region _ code = region _ code _ for _ region ( region , region _ code ) DCNL DCSP if ( region _ code in region _ codes ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP x = tensor.fmatrix ( ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x &#93; ) DCNL DCSP f = theano.function ( &#91; x &#93; , &#91; x
DCSP if ( not text ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &lt; len ( text ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &lt; len ( text ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &lt; len ( text ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt;
DCSP evoked = read _ evokeds ( evoked , ch _ type , mode = mode ) DCNL DCSP if ( len ( evoked ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return evoked
DCSP fileText = archive.getFileText ( fileName ) DCNL DCSP fileText = archive.getFileText ( fileName ) DCNL DCSP fileText = archive.getFileText ( fileName ) DCNL DCSP lines = archive.getTextLines ( fileText ) DCNL DCSP for line in lines : DCNL DCSP DCSP lineStripped = line.strip ( ) DCNL DCSP DCSP if ( len ( lineStripped ) &gt; 1 ) : DCNL DCSP DCSP DCSP lineStripped = lineStripped.find ( &apos; DCSP &apos; ) DCNL DCSP DCSP if ( len ( lineStripped ) &gt; 1 ) : DCNL DCSP DCSP DCSP bracketIndex = line.find ( &apos; ( &apos; ) DCNL DCSP DCSP DCSP if ( bracketIndex &gt; 0 ) : DCNL DCSP DCSP DCSP DCSP lineStripped = lineStripped.find ( &apos; DCSP &apos; ) DCNL DCSP DCSP DCSP if ( bracketIndex &gt; 0 ) : DCNL DCSP DCSP DCSP DCSP lineStripped = lineStripped &#91; : bracketIndex &#93; DCNL DCSP DCSP DCSP if ( bracketIndex &gt; 0 ) : DCNL DCSP DCSP DCSP DCSP lineStripped = lineStripped &#91; : bracketIndex &#93; DCNL DCSP DCSP DCSP if ( bracketIndex &gt; 0 ) : DCNL DCSP DCSP DCSP DCSP lineStripped = lineStripped &#91; : bracketIndex &#93; .strip ( ) DCNL DCSP DCSP DCSP
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ video _ get _ title _ description &apos; , None ) or _ Cfunction ( &apos; libvlc _ video _ get _ title _ description &apos; , ( ( 1 , ) , ) , None , ctypes.POINTER ( TrackDescription ) , MediaPlayer ) ) DCNL DCSP return f ( p _ mi )
DCSP if ( not value ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP try : DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP try : DCNL DCSP DCSP return socket.inet _ ntoa ( struct.pack ( &apos; &gt; H &apos; , int ( time.time ( ) ) ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93;
DCSP def decorator ( func ) : DCNL DCSP DCSP event . _ _ name _ _ = name DCNL DCSP DCSP return func DCNL DCSP return decorator
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP except Exception as exc : DCNL DCSP DCSP ret = { } DCNL DCSP return ret
DCSP if ( type ( src ) = = list ) : DCNL DCSP DCSP dst = os.path.join ( src , dst ) DCNL DCSP else : DCNL DCSP DCSP dst = os.path.join ( src , dst ) DCNL DCSP if ( not isinstance ( src , basestring ) ) : DCNL DCSP DCSP src = os.path.join ( src , dst ) DCNL DCSP if isinstance ( src , basestring ) : DCNL DCSP DCSP dst = os.path.join ( src , dst ) DCNL DCSP if ( not isinstance ( src , basestring ) ) : DCNL DCSP DCSP dst = os.path.join ( src , dst ) DCNL DCSP if ( not isinstance ( dst , ( str , str ) ) ) : DCNL DCSP DCSP dst = os.path.join ( src , dst ) DCNL DCSP dst = os.path.join ( src , dst ) DCNL DCSP if ( not os.path.exists ( dst ) ) : DCNL DCSP DCSP os.makedirs ( dst ) DCNL DCSP if ( not os.path.exists ( dst ) ) : DCNL DCSP DCSP os.makedirs ( dst ) DCNL DCSP if ( not os.path.exists ( dst ) ) : DCNL DCSP DCSP os.makedirs ( dst ) DCNL
DCSP assert _ allclose ( actual , desired , tol )
DCSP widgets = { } DCNL DCSP widgets.update ( WIDGETS ) DCNL DCSP return widgets
DCSP if ( not gfile.Exists ( data _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; vocabulary _ dir DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not gfile.Exists ( vocabulary _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP vocabulary DCSP dir DCSP must DCSP be DCSP a DCSP string DCSP or DCSP the DCSP vocabulary _ dir &apos; ) DCNL DCSP if ( not gfile.Exists ( vocabulary _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP vocabulary DCSP dir DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not gfile.Exists ( vocabulary _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; vocabulary _ dir DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not gfile.Exists ( vocabulary _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; labels DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not gfile.Exists ( vocabulary _ dir ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP vocab DCSP file DCSP
DCSP ret = { } DCNL DCSP imgadm = _ check _ imgadm ( ) DCNL DCSP if verbose : DCNL DCSP DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP DCSP if ( not out ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP tree = tree _ tree ( repo , new _ tree ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP else : DCNL DCSP DCSP tree = tree _ tree ( repo , new _ tree ) DCNL DCSP DCSP if ( sha is not None ) : DCNL DCSP DCSP DCSP outstream.write ( ( &apos
DCSP x = np.zeros ( ( 10 , 10 ) ) DCNL DCSP y = np.zeros ( ( 10 , 10 ) ) DCNL DCSP y = np.zeros ( ( 10 , 10 ) ) DCNL DCSP y = np.zeros ( ( 10 , 10 ) ) DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y &#91; ( -1 ) &#93; = x DCNL DCSP y
DCSP return strip _ words ( string , filter = filter , * * kwargs )
DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP return render _ to _ response ( template _ name , { &apos; message &apos; : message } , context _ instance = RequestContext ( request ) ) DCNL DCSP else : DCNL DCSP DCSP return render _ to _ response ( template _ name , { &apos; message &apos; : message } , context _ instance = RequestContext ( request ) )
DCSP return getattr ( prog _ id , &apos; type &apos; , None )
DCSP if ( not hostname ) : DCNL DCSP DCSP hostname = gethostname ( ) DCNL DCSP try : DCNL DCSP DCSP hostname = socket.gethostbyname ( hostname ) DCNL DCSP except AttributeError : DCNL DCSP DCSP hostname = hostname DCNL DCSP return hostname
DCSP section = modulestore ( ) .get _ item ( course _ id , section ) DCNL DCSP if ( not section ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( section is None ) : DCNL DCSP DCSP return None DCNL DCSP section
DCSP try : DCNL DCSP DCSP res = func ( x , * args , * * kw _ options ) DCNL DCSP except Exception as e : DCNL DCSP DCSP err = e DCNL DCSP else : DCNL DCSP DCSP err = None DCNL DCSP if ( err is not None ) : DCNL DCSP DCSP err _ err = err DCNL DCSP else : DCNL DCSP DCSP err _ err = None DCNL DCSP if ( err is not None ) : DCNL DCSP DCSP err _ err = err DCNL DCSP else : DCNL DCSP DCSP err _ err = err DCNL DCSP return err _ err
DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP result = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( _ systemctl _ cmd ( &apos; clear &apos; , name , pkgs , kwargs , * * kwargs ) , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP upgrading DCSP packages &apos; , result = True ) DCNL DCSP return ret
DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameObject ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameObject ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if ( frameFactory is None ) : DCNL DCSP DCSP frameFactory = FrameData ( ) DCNL DCSP if
DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = { } DCNL DCSP if ( include _ headers is None ) : DCNL DCSP DCSP include _ headers = &#91; &#93; DCNL
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP lines = f.read ( ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 2 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP DCSP DCSP assert
DCSP try : DCNL DCSP DCSP fd = os.open ( fd , ( os.O _ RDONLY &#124; os.O _ NONBLOCK ) ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( not hasattr ( cls , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( model . _ _ name _ _ , cls . _ _ name _ _ ) ) ) DCNL DCSP return cls ( * args , * * kwargs )
DCSP run ( &apos; sudo DCSP / etc / init.d / supervisord &apos; )
DCSP return ( filepath.replace ( &apos; \ \ &apos; , &apos; / &apos; ) if filepath else filepath )
DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; \ n &apos; DCNL DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; \ n &apos; DCNL DCSP if ( len ( data ) = = 1 ) : DCNL DCSP DCSP return &apos; \ n &apos; .join ( &#91; ( &apos; \ n &apos; + &apos; \ n &apos; ) for x in data.split ( &apos; \ n &apos; ) &#93; ) DCNL DCSP else : DCNL DCSP DCSP return &apos; \ n &apos; .join ( ( str ( x ) for x in data ) )
DCSP with open ( handle , &apos; rb &apos; ) as handle : DCNL DCSP DCSP with open ( handle , &apos; rb &apos; ) as handle : DCNL DCSP DCSP DCSP with open ( handle , &apos; w &apos; ) as handle : DCNL DCSP DCSP DCSP DCSP return pickle.load ( fh ) DCNL DCSP return handle
DCSP try : DCNL DCSP DCSP return rule ( expr ) DCNL DCSP except Exception : DCNL DCSP DCSP return expr
DCSP search _ text = text _ to _ text ( text , search _ term = search _ url , search _ url = search _ url , * * kwargs ) DCNL DCSP if search _ match : DCNL DCSP DCSP return search _ search ( trans , search _ term , search _ url , search _ url ) DCNL DCSP else : DCNL DCSP DCSP return search _ search ( trans , search _ term , search _ url , * * kwargs )
DCSP fh = open ( os.path.dirname ( _ _ file _ _ ) , &apos; rb &apos; ) DCNL DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP for line in fh : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP fh = open ( filename , &apos; w &apos; ) DCNL DCSP DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP fh = open ( filename , &apos; w &apos; ) DCNL DCSP DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP fh = open ( filename , &apos; w &apos; ) DCNL DCSP DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP DCSP DCSP DCSP fh.close ( ) DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( n &lt; 0 ) :
DCSP parts = &#91; &#93; DCNL DCSP parts = &#91; &#93; DCNL DCSP for part in parts : DCNL DCSP DCSP if ( part in part ) : DCNL DCSP DCSP DCSP parts.append ( part ) DCNL DCSP DCSP DCSP parts.append ( part ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parts.append ( part ) DCNL DCSP return &apos; &apos;.join ( parts )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP Table.read ( u &apos
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP if verbose : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( factory is None ) : DCNL DCSP DCSP factory = factory ( ) DCNL DCSP if ( factory is None ) : DCNL DCSP DCSP factory = factory ( ) DCNL DCSP if ( factory is None ) : DCNL DCSP DCSP factory = factory ( ) DCNL DCSP if ( factory is not None ) : DCNL DCSP DCSP if ( factory is not None ) : DCNL DCSP DCSP DCSP if ( factory is not None ) : DCNL DCSP DCSP DCSP DCSP factory = factory ( ) DCNL DCSP DCSP DCSP elif ( factory is not None ) : DCNL DCSP DCSP DCSP DCSP if ( factory is None ) : DCNL DCSP DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP key DCSP type : DCSP % s &apos; % key ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP key DCSP type : DCSP % s &apos; % type ( key _ type ) ) ) DCNL DCSP DCSP elif ( factory is not None ) : DCNL DCSP DCSP DCSP if ( factory is not None ) :
DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP path = path &#91; : ( -1 ) &#93; DCNL DCSP if path.startswith ( &apos; / &apos; ) : DCNL DCSP DCSP path = path &#91; : ( -1 ) &#93; DCNL DCSP return ( ( path &#91; : 2 &#93; = = &apos; / &apos; ) and ( path &#91; ( -1 ) &#93; = = &apos; / &apos; ) )
DCSP os.system ( ( &apos; git DCSP upload DCSP % s DCSP % s &apos; % ( _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; , _ _ opts _ _ &#91; &apos; url &apos; &#93; , _ _ opts _ _ &#91; &apos; build _ url &apos; &#93; ) ) )
DCSP if ( not isinstance ( to _ addr , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % to _ addr ) ) DCNL DCSP try : DCNL DCSP DCSP send _ mail ( to _ addr , email , mimetype = mimetype , callback = callback , * * context ) DCNL DCSP except Exception as e : DCNL DCSP DCSP msg = ( &apos; % s : DCSP % s &apos; % ( e , e ) ) DCNL DCSP DCSP log.error ( msg ) DCNL DCSP DCSP log.error ( msg ) DCNL DCSP DCSP return None
DCSP if ( src is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( src is None ) : DCNL DCSP DCSP return None DCNL DCSP return re.sub ( &apos; &#91; ^ a-zA-Z0-9 &#93; + &apos; , &apos; _ &apos; , src )
DCSP if ( len ( elementNode.attributes ) &lt; 2 ) : DCNL DCSP DCSP return DCNL DCSP loopLayer = svgReader.getLoopLayer ( ) DCNL DCSP words = getRightStripMinusSplit ( xmlElement.attributeDictionary &#91; &apos; path &apos; &#93; ) DCNL DCSP for wordIndex in xrange ( len ( words ) ) : DCNL DCSP DCSP loop.append ( euclidean.getComplexByWords ( words &#91; wordIndex : &#93; ) ) DCNL DCSP rotatedLoopLayer.loops + = getTransformedOutlineByPath ( path , xmlElement , svgReader.yAxisPointingUpward )
DCSP result = { } DCNL DCSP for key in prefix _ slices : DCNL DCSP DCSP if ( key in key _ slices ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = None DCNL DCSP return result
DCSP import lixian _ hash DCNL DCSP lixian _ hash = lixian _ hash.encode ( &apos; utf-8 &apos; ) DCNL DCSP lixian _ hash = lixian _ hash.encode ( &apos; utf-8 &apos; ) DCNL DCSP lixian _ hash = lixian _ hash.encode ( &apos; utf-8 &apos; ) DCNL DCSP with open ( lixian _ hash , &apos; rb &apos; ) as f : DCNL DCSP DCSP print ( &apos; \ n &apos; .join ( lixian _ hash.encode ( &apos; utf-8 &apos; ) ) ) DCNL DCSP DCSP print ( &apos; \ n &apos; .join ( lixian _ hash.encode ( &apos; utf-8 &apos; ) ) ) DCNL DCSP DCSP print ( &apos; \ n &apos; .join ( lixian _ hash.encode ( &apos; utf-8 &apos; ) ) )
DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP if ( environ is None ) : DCNL DCSP DCSP environ = os.environ DCNL DCSP else : DCNL DCSP
DCSP return for _ dtypes _ combination ( _ signed _ dtypes , names = names , full = full )
DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP parameter DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not query ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( query , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; query DCSP must DCSP be DCSP a DCSP
DCSP text = u &apos; \ n
DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ class _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ class _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP parent = obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP if ( parent is None ) : DCNL DCSP DCSP
DCSP value = primitives.byte _ value ( value , endian , format , signed , full _ range , fuzzable , name ) DCNL DCSP blocks.CURRENT.push ( bit )
DCSP _ publish _ collection ( committer _ id , collection _ id , feconf.ACTIVITY _ TYPE _ COLLECTION )
DCSP try : DCNL DCSP DCSP import os DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import os DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP import os DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return socket.gethostbyname ( socket.gethostname ( ) ) DCNL DCSP except OSError : DCNL DCSP DCSP return None
DCSP projects = &#91; &#93; DCNL DCSP for folder in files : DCNL DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP for folder in files : DCNL DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP for folder in files : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP for folder in files : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if os.path.isdir ( folder ) : DCNL DCSP DCSP DCSP DCSP DCSP for folder in files : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP cipher _ size = 0 DCNL DCSP for i in range ( ( len ( data ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP data = data &#91; ( i + 1 ) : ( ( i + 1 ) * BLOCK _ SIZE _ BYTES ) &#93; DCNL DCSP DCSP for i in range ( len ( data ) ) : DCNL DCSP DCSP DCSP data = data &#91; i : ( i + BLOCK _ SIZE _ BYTES ) &#93; DCNL DCSP DCSP DCSP data = data &#91; ( i + 1 ) : ( ( i + 1 ) * BLOCK _ SIZE _ BYTES ) &#93; DCNL DCSP DCSP DCSP data = data &#91; ( i + 1 ) : ( ( i + 1 ) * BLOCK _ SIZE _ BYTES ) &#93; DCNL DCSP DCSP DCSP break DCNL DCSP return data
DCSP seq = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( seq ) , size ) : DCNL DCSP DCSP seq = seq &#91; i &#93; DCNL DCSP DCSP if ( seq &#91; i &#93; ! = seq &#91; i &#93; ) : DCNL DCSP DCSP DCSP seq &#91; i &#93; = seq &#91; i &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seq &#91; i &#93; = seq &#91; i &#93; DCNL DCSP return seq
DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kw ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return ret
DCSP if os.path.exists ( filename ) : DCNL DCSP DCSP return open ( filename , &apos; w &apos; ) DCNL DCSP else : DCNL DCSP DCSP return open ( filename , &apos; w &apos; )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP pass
DCSP n = len ( x ) DCNL DCSP for i in range ( ( len ( x ) - 1 ) ) : DCNL DCSP DCSP ( yield i )
DCSP points = &#91; &#93; DCNL DCSP for i in range ( ( len ( p1 ) - 1 ) ) : DCNL DCSP DCSP points = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( points ) ) : DCNL DCSP DCSP DCSP points = &#91; &#93; DCNL DCSP DCSP DCSP for j in range ( len ( points ) ) : DCNL DCSP DCSP DCSP DCSP points &#91; ( i , j ) &#93; = ( points &#91; ( i , j ) &#93; + ( dx * dx &#91; ( i + 1 ) &#93; ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP points.append ( ( dx , dx ) ) DCNL DCSP return points
DCSP M = 0 DCNL DCSP for i in range ( N ) : DCNL DCSP DCSP M + = ( M &#91; ( i + 1 ) &#93; * M &#91; ( i + 1 ) &#93; ) DCNL DCSP return M
DCSP return IMPL.instance _ type _ access _ remove ( context , flavor _ id , project _ id )
DCSP if ( len ( text ) &lt; = maxlen ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( text ) &gt; maxlen ) : DCNL DCSP DCSP return ( text &#91; : maxlen &#93; .rsplit ( &apos; DCSP &apos; , 1 ) &#91; 0 &#93; + &apos; DCSP &apos; ) DCNL DCSP else : DCNL DCSP DCSP return ( text &#91; : maxlen &#93; .rsplit ( &apos; DCSP &apos; , 1 ) &#91; 0 &#93; + &apos; DCSP &apos; )
DCSP return IMPL.quota _ usage _ update ( context , project _ id , resource , * * kwargs )
DCSP if ( lun _ id = = lun _ id ) : DCNL DCSP DCSP return ( &apos; % s . % s &apos; % ( base _ lun _ name , lun _ id , version ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s . % s &apos; % ( base _ lun _ name , lun _ id , lun _ id ) )
DCSP if ( r is None ) : DCNL DCSP DCSP r = { } DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = { } DCNL DCSP if ( r is not None ) : DCNL DCSP DCSP setattr ( r , attr , getattr ( r , attr ) ) DCNL DCSP return r
DCSP return { &apos; id &apos; : member _ ref &#91; &apos; id &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93; , &apos; updated _ at &apos; : member _ ref &#91; &apos; deleted _ at &apos; &#93;
DCSP if ( p = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return ( p * ( p - 1 ) )
DCSP if ( not isinstance ( policy _ data , basestring ) ) : DCNL DCSP DCSP policy _ data = &#91; &#93; DCNL DCSP if append _ only : DCNL DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if append _ only : DCNL DCSP DCSP DCSP
DCSP def decorate ( fn ) : DCNL DCSP DCSP @ functools.wraps ( fn ) DCNL DCSP DCSP def decorate ( fn , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP DCSP return decorate DCNL DCSP return decorate
DCSP return DETAILS.get ( &apos; initialized &apos; , False )
DCSP if ( s is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP return s DCNL DCSP if ( not isinstance ( s , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP
DCSP if ( auth is None ) : DCNL DCSP DCSP debug = False DCNL DCSP if debug : DCNL DCSP DCSP cherrypy.log ( &apos; Auth DCSP successful &apos; , &apos; TOOLS.DIGEST _ AUTH &apos; ) DCNL DCSP if debug : DCNL DCSP DCSP cherrypy.log ( &apos; Auth DCSP successful &apos; , &apos; TOOLS.DIGEST _ AUTH &apos; ) DCNL DCSP if debug : DCNL DCSP DCSP cherrypy.log ( &apos; Auth DCSP successful &apos; , &apos; TOOLS.DIGEST _ AUTH &apos; ) DCNL DCSP if debug : DCNL DCSP DCSP cherrypy.log ( &apos; Auth DCSP successful &apos; , &apos; TOOLS.DIGEST _ AUTH &apos; ) DCNL DCSP return auth _ auth ( realm , realm , key , debug )
DCSP with open ( base _ dir , &apos; rb &apos; ) as tar _ file : DCNL DCSP DCSP with open ( base _ dir , &apos; w &apos; ) as tar _ file : DCNL DCSP DCSP DCSP with open ( base _ dir , &apos; w &apos; ) as tar _ file : DCNL DCSP DCSP DCSP DCSP tar _ file.write ( tar _ file.read ( ) ) DCNL DCSP tar _ file.close ( )
DCSP return call _ talib _ with _ ds ( ds , count , talib.X , timeperiod )
DCSP try : DCNL DCSP DCSP with open ( os.path.join ( _ _ file _ _ , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP options = { } DCNL DCSP options = { } DCNL DCSP for option in select _ browser _ query : DCNL DCSP DCSP options &#91; key &#93; = value DCNL DCSP return options
DCSP paragraphs = &#91; &#93; DCNL DCSP for sentence in text.split ( &apos; \ n &apos; ) : DCNL DCSP DCSP words = text.split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( len ( words ) &gt; 1 ) : DCNL DCSP DCSP DCSP words = text.split ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP if ( len ( words ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP sentence = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( len ( words ) ) : DCNL DCSP DCSP DCSP DCSP words = text.split ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP if ( len ( words ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP words = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( len ( words ) ) : DCNL DCSP DCSP DCSP DCSP DCSP words = text.split ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP if ( len ( words ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP paragraphs &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP os.remove ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP content _ type = content _ type.lower ( ) DCNL DCSP content _ type = content _ type.lower ( ) DCNL DCSP if ( content _ type is None ) : DCNL DCSP DCSP content _ type = &apos; text / plain &apos; DCNL DCSP return content _ type
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise template.TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP bits = token.contents.split ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise template.TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( bits &#91; ( -1 ) &#93; = = &apos; as &apos; ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( bits &#91; ( -1 ) &#93; = = &apos; as &apos; ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( bits &#91; ( -1 ) &#93; = = &apos; as &apos; ) : DCNL DCSP DCSP raise
DCSP try : DCNL DCSP DCSP entry = entry &#91; entry &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP entry = entry &#91; 0 &#93; DCNL DCSP DCSP entry &#91; entry &#93; = value
DCSP n = len ( args ) DCNL DCSP n = len ( args ) DCNL DCSP n = len ( args ) DCNL DCSP n = len ( args ) DCNL DCSP n = len ( args ) DCNL DCSP n = len ( args ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; expected DCSP arguments DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; expected DCSP arguments DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP between DCSP 0 DCSP or DCSP 1 &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; invalid DCSP arguments &apos; ) DCNL DCSP if (
DCSP for nestedRing in nestedRings : DCNL DCSP DCSP createExtraFillLoops ( radius , radius , radiusAround , shouldExtraLoopsBeAdded )
DCSP from django.utils.text import phone2numeric DCNL DCSP return phone2numeric ( region )
DCSP p &#91; 0 &#93; = t &#91; 1 &#93;
DCSP try : DCNL DCSP DCSP os.makedirs ( filename ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Inputs DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP
DCSP conn = _ get _ driver ( profile = profile ) DCNL DCSP record = conn.get _ record ( zone _ id ) DCNL DCSP return record
DCSP ret = salt.utils.mac _ utils.execute _ return _ result ( &apos; systemsetup DCSP -getrestart &apos; ) DCNL DCSP return ( salt.utils.mac _ utils.validate _ enabled ( salt.utils.mac _ utils.parse _ return ( ret ) ) = = &apos; on &apos; )
DCSP if ( &apos; color &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if ( &apos; alpha &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if ( &apos; alpha &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if ( &apos; alpha &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if ( &apos; alpha &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if ( &apos; alpha &apos; in err _ kws ) : DCNL DCSP DCSP err _ kws &#91; &apos; color &apos; &#93; = color _ kws &#91; &apos; alpha &apos; &#93; DCNL DCSP if
DCSP return rpc _ utils.prepare _ for _ serialization ( models.Test.list _ objects ( filter _ data ) )
DCSP decrypter = Decrypter ( mode , padding = padding ) DCNL DCSP return decrypter ( mode , in _ stream , out _ stream , block _ size )
DCSP result = &#91; &#93; DCNL DCSP for ( key , value ) in query : DCNL DCSP DCSP result.append ( ( &apos; % s = % s &apos; % ( key , value ) ) ) DCNL DCSP return result
DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP return path
DCSP out = { } DCNL DCSP try : DCNL DCSP DCSP out = subprocess.check _ output ( cmd ) DCNL DCSP except Exception as e : DCNL DCSP DCSP raise RuntimeError ( ( &apos; Could DCSP not DCSP find DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP return res
DCSP resources = &#91; &#93; DCNL DCSP for resource in resources : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = context &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = context &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = context &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = resources &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = resources &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = resources &#91; alias &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP import sys DCNL DCSP globals ( ) &#91; &apos; _ _ init _ _ &apos; &#93; = sys.modules &#91; _ _ name _ _ &#93;
DCSP if ( not os.path.exists ( work _ directory ) ) : DCNL DCSP DCSP os.mkdir ( work _ directory ) DCNL DCSP filepath = os.path.join ( work _ directory , filename ) DCNL DCSP filepath = os.path.join ( work _ directory , filename ) DCNL DCSP if ( not os.path.exists ( filepath ) ) : DCNL DCSP DCSP os.makedirs ( filepath ) DCNL DCSP return filepath
DCSP assert ( upper _ bound is not None ) DCNL DCSP if ( upper _ bound is not None ) : DCNL DCSP DCSP upper _ bound = builder.add ( upper _ bound , upper _ bound ) DCNL DCSP else : DCNL DCSP DCSP lower _ bound = builder.add ( upper _ bound , upper _ bound ) DCNL DCSP DCSP if ( lower _ bound ! = upper _ bound ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP bounds &apos; % upper _ bound ) ) DCNL DCSP if ( upper _ bound is None ) : DCNL DCSP DCSP upper _ bound = builder.add ( upper _ bound , upper _ bound ) DCNL DCSP else : DCNL DCSP DCSP lower _ bound = builder.add ( upper _ bound , upper _ bound ) DCNL DCSP DCSP if ( lower _ bound ! = upper _ bound ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP bounds &apos; % upper _ bound ) ) DCNL DCSP else : DCNL
DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except OSError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except OSError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except OSError : DCNL DCSP DCSP return None DCNL DCSP return pid
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP fig = plt.figure ( ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP fig = plt.figure ( ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP fig = plt.figure ( ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP fig = plt.figure ( ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP fig = plt.figure ( ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL
DCSP read _ file ( &apos; http : / / astropy.org / nonexistentfile &apos; )
DCSP try : DCNL DCSP DCSP with open ( stdout , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP lines = f.readlines ( ) DCNL DCSP except OSError : DCNL DCSP DCSP return None DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , s )
DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for i in range
DCSP cov _ cov = make _ cov ( cov _ cov ) DCNL DCSP assert _ array _ almost _ equal ( cov _ cov , cov _ cov ) DCNL DCSP assert _ array _ almost _ equal ( cov _ cov , cov _ cov )
DCSP return re.sub ( &apos; &#91; ^ A-Za-z0-9 . &#93; + &apos; , &apos; _ &apos; , extra )
DCSP shortDictionary = { } DCNL DCSP for lineIndex in xrange ( len ( splitLine ) ) : DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP for lineIndex in xrange ( len ( splitLine ) ) : DCNL DCSP DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP DCSP if ( len ( splitLine ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP shortDictionary &#91; lineIndex &#93; = &#91; &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP shortDictionary &#91; lineIndex &#93; = { } DCNL DCSP DCSP DCSP for lineIndex in xrange ( len ( splitLine ) ) : DCNL DCSP DCSP DCSP DCSP shortDictionary &#91; lineIndex &#93; = setting &#91; lineIndex &#93; DCNL DCSP return shortDictionary
DCSP ret = { } DCNL DCSP for line in _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) .splitlines ( ) : DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP ret &#91; comps &#91; 0 &#93; &#93; = comps &#91; 1 &#93; DCNL DCSP return ret
DCSP output = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP if ( num _ perms is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP if ( num _ perms is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP if ( num _ perms is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP for i in range ( num _ perms ) : DCNL DCSP DCSP sample _ ids = &#91; &#93; DCNL DCSP DCSP for i in range ( num _ perms ) : DCNL DCSP DCSP DCSP for i in range ( num _ perms ) : DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP if ( port is None ) : DCNL DCSP DCSP port = int ( port ) DCNL DCSP host
DCSP if ( not isinstance ( config , dict ) ) : DCNL DCSP DCSP return ( False , &apos; Configuration DCSP for DCSP beacon DCSP must DCSP be DCSP a DCSP dictionary . &apos; ) DCNL DCSP return ( True , &apos; Valid DCSP beacon DCSP configuration &apos; )
DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( cmap is None ) :
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP self . _ cached _ property = fun ( self , * args , * * kwargs ) DCNL DCSP DCSP return fun ( self , * args , * * kwargs ) DCNL DCSP return decorator
DCSP @ wraps ( function ) DCNL DCSP def wrapped ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return function ( * args , * * kwargs ) DCNL DCSP DCSP except NotImplementedError : DCNL DCSP DCSP DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; ) DCNL DCSP return decorator
DCSP tasks = &#91; &#93; DCNL DCSP for task in tasks : DCNL DCSP DCSP tasks = tasks &#91; task &#93; DCNL DCSP DCSP tasks = tasks &#91; task &#93; DCNL DCSP DCSP tasks = tasks &#91; task &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks = tasks &#91; : ( -1 ) &#93; DCNL DCSP DCSP tasks =
DCSP return ( value if isinstance ( value , basestring ) else value )
DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP s.bind ( ( &apos; localhost &apos; , 0 ) ) DCNL DCSP port = sock.getsockname ( ) &#91; 1 &#93; DCNL DCSP port = s.getsockname ( ) &#91; 1 &#93; DCNL DCSP s.close ( ) DCNL DCSP return ( port , port )
DCSP from bench.utils import setup _ task DCNL DCSP setup _ task ( )
DCSP result = &#91; &#93; DCNL DCSP for ( param , value ) in iteritems ( connections ) : DCNL DCSP DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if isinstance ( value , basestring ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import pickle DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try
DCSP message = ( &apos; % s DCSP % s DCSP % s DCSP % s &apos; % ( protocol , port , password , password ) ) DCNL DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s &apos; % (
DCSP if isinstance ( filter _ , list ) : DCNL DCSP DCSP for ( i , thing ) in enumerate ( filter _ ) : DCNL DCSP DCSP DCSP ( yield t ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield t )
DCSP if isinstance ( level , basestring ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = = &apos; level &apos; ) : DCNL DCSP DCSP level = level DCNL DCSP else : DCNL DCSP DCSP level = level DCNL DCSP if ( level = =
DCSP return _ _ salt _ _ &#91; &apos; probes.config &apos; &#93; ( probes )
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request , template _ name = template _ name , redirect _ field _ name = redirect _ field _ name , redirect _ field _ name = redirect _ field _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect ( request _ name ) DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return redirect
DCSP if ( not isinstance ( task _ queue , list ) ) : DCNL DCSP DCSP return DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( task _ queue is None ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP
DCSP cmd = &apos; { 0 } DCSP remove DCSP { 1 } &apos; .format ( _ ipset _ cmd ( ) , name ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP removing DCSP package : DCSP { 0 } &apos; .format ( err ) ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Problem DCSP encountered DCSP removing DCSP package : DCSP { 0 } &apos; .format ( err ) ) DCNL DCSP return ret
DCSP create _ db ( ) DCNL DCSP create _ test _ db ( ) DCNL DCSP create _ test _ db ( ) DCNL DCSP create _ test _ db ( ) DCNL DCSP create _ test _ db ( ) DCNL DCSP create _ test _ db ( ) DCNL DCSP create _ test _ db ( )
DCSP if ( source is None ) : DCNL DCSP DCSP source = { } DCNL DCSP if ( source is None ) : DCNL DCSP DCSP source = { } DCNL DCSP if ( source is None ) : DCNL DCSP DCSP source = { } DCNL DCSP if ( source is None ) : DCNL DCSP DCSP source = { } DCNL DCSP if source : DCNL DCSP DCSP for key in keys : DCNL DCSP DCSP DCSP if ( key in key ) : DCNL DCSP DCSP DCSP DCSP value &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP key &#91; key &#93; = value DCNL DCSP return key
DCSP from celery import current _ app DCNL DCSP current _ app = current _ app ( ) DCNL DCSP current _ current = current _ current _ app ( ) DCNL DCSP current _ current = current _ current _ app ( ) DCNL DCSP current _ current = current _ current _ app ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ current ( ) DCNL DCSP current _ current = current _ current _ app ( )
DCSP return ( has _ access ( user , descriptor.location , &apos; staff &apos; , False ) or has _ access ( user , descriptor.location , &apos; staff &apos; , False ) )
DCSP if ( not kargs.has _ key ( &apos; timeout &apos; ) ) : DCNL DCSP DCSP kargs &#91; &apos; timeout &apos; &#93; = kargs &#91; &apos; timeout &apos; &#93; DCNL DCSP s = conf.L3socket ( promisc = promisc , filter = filter , iface = iface , nofilter = nofilter , nofilter = nofilter ) DCNL DCSP ( a , b ) = sndrcv ( s , x , * args , * * kargs ) DCNL DCSP s.close ( ) DCNL DCSP return ( a , b )
DCSP global FS _ CACHE DCNL DCSP FS _ CACHE = None
DCSP return ( len ( value ) &lt; int ( arg ) )
DCSP return LazyLoader ( _ module _ dirs ( opts , &apos; search &apos; , whitelist = whitelist , whitelist = whitelist ) , whitelist = whitelist , whitelist = whitelist )
DCSP if six.PY3 : DCNL DCSP DCSP instr = salt.utils.to _ bytes ( instr ) DCNL DCSP DCSP return base64.urlsafe _ b64encode ( instr ) DCNL DCSP else : DCNL DCSP DCSP return base64.b64encode ( instr )
DCSP return iter ( getattr ( d , _ iteritems ) ( ) )
DCSP if isinstance ( text , unicode ) : DCNL DCSP DCSP text = text.decode ( encoding , errors ) DCNL DCSP if isinstance ( text , six.binary _ type ) : DCNL DCSP DCSP text = text.decode ( encoding , errors ) DCNL DCSP return text.encode ( encoding , errors )
DCSP if ( storage is None ) : DCNL DCSP DCSP return None DCNL DCSP return hashlib.md5 ( storage ) .hexdigest ( )
DCSP x = config.compute _ test _ value DCNL DCSP try : DCNL DCSP DCSP x = T.vector ( ) DCNL DCSP DCSP AreEqual ( x , x ) DCNL DCSP DCSP assert ( len ( x ) = = 1 ) DCNL DCSP DCSP assert ( len ( x ) = = 1 ) DCNL DCSP DCSP assert ( len ( x ) = = 1 ) DCNL DCSP DCSP assert ( x &#91; 0 &#93; is True ) DCNL DCSP except IndexError : DCNL DCSP DCSP pass
DCSP return ( is _ default _ value ( option , value ) or is _ default _ value ( option , value ) )
DCSP return _ rate _ by _ id ( context , id _ = id _ , val = val )
DCSP client = _ get _ client ( ) DCNL DCSP try : DCNL DCSP DCSP client = client.get _ client ( timeout = timeout ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Could DCSP not DCSP connect DCSP to DCSP { 0 } : DCSP { 1 } &apos; .format ( host , exc ) ) DCNL DCSP DCSP raise CommandExecutionError ( &apos; { 0 } : DCSP { 1 } &apos; .format ( e , e ) ) DCNL DCSP return client
DCSP rgb = rgb _ to _ rgb ( colors ) DCNL DCSP if ( len ( colors ) = = 2 ) : DCNL DCSP DCSP return rgb _ to _ rgb ( colors &#91; 0 &#93; ) DCNL DCSP else : DCNL DCSP DCSP return colors &#91; 0 &#93;
DCSP pass
DCSP t &#91; 0 &#93; = t &#91; 1 &#93;
DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) :
DCSP return s3 _ rest _ controller ( )
DCSP if ( ( not isscalar ( nt ) ) or ( floor ( nt ) ! = nt ) or ( nt &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; nt DCSP must DCSP be DCSP positive DCSP integer DCSP scalar . &apos; ) DCNL DCSP return specfun.klvnzo ( nt , 2 )
DCSP return ( &apos; % s % s &apos; % ( _ article ( word , article , gender , role ) , role ) )
DCSP data = json.loads ( results _ file ) DCNL DCSP data = data.get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , { } ) .get ( &apos; data &apos; , &#91; &#93; ) DCNL DCSP if ( len ( data ) = = 1 ) : DCNL DCSP DCSP
DCSP store _ revision = Revision.get ( ) DCNL DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store0.sync ( ) DCNL DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP store _ revision ( revision = revision )
DCSP return HttpResponse ( json.dumps ( data ) , content _ type = &apos; application / json &apos; , content _ type = &apos; application / json &apos; )
DCSP if ( ( len ( dist ) = = 0 ) and ( len ( dist ) = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; args DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( ( len ( dist ) = = 1 ) and ( len ( dist ) = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP function DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( len ( dist ) = = 1 ) and ( len ( dist ) = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP function DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( len ( dist ) = = 1 ) and ( len ( dist ) = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP function DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( dist ) = = 0 ) : DCNL DCSP DCSP return
DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not runningAsOSXApp ( ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not
DCSP try : DCNL DCSP DCSP return func ( * args , * * kw ) DCNL DCSP except : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kw ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP if ( not isinstance ( axes , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( input _ type , ) ) ) DCNL DCSP with tf.name _ scope ( name ) as f : DCNL DCSP DCSP x = tf.squeeze ( x , &#91; &#93; ) DCNL DCSP DCSP x = tf.squeeze ( x , &#91; &#93; ) DCNL DCSP DCSP return x
DCSP return &apos; &apos;.join ( ( random.choice ( ( string.ascii _ uppercase + string.digits ) ) for _ in range ( length ) ) )
DCSP if isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node , Node ) : DCNL DCSP DCSP return node DCNL DCSP elif isinstance ( node
DCSP emails = set ( ) DCNL DCSP for ( key , value ) in mapping.iteritems ( ) : DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( value ,
DCSP if isinstance ( iterable , ( list , tuple ) ) : DCNL DCSP DCSP return list ( iterable ) DCNL DCSP elif isinstance ( iterable , tuple ) : DCNL DCSP DCSP return sorted ( iterable , key = ( lambda x : x &#91; 0 &#93; ) , reverse = True ) DCNL DCSP else : DCNL DCSP DCSP return list ( iterable )
DCSP if ( index is not None ) : DCNL DCSP DCSP cmd = &apos; { 0 } DCSP { 1 } &apos; .format ( index , name ) DCNL DCSP else : DCNL DCSP DCSP cmd = &apos; https : / / { 0 } / { 1 } &apos; .format ( index , name ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; { 0 } DCSP does DCSP not DCSP exist &apos; .format ( name ) ) DCNL DCSP return result
DCSP return config.get _ cloud _ config _ value ( &apos; managedcloud &apos; , vm _ , _ _ opts _ _ , default = False , search _ global = False )
DCSP if ( not callable ( expected _ regexp ) ) : DCNL DCSP DCSP raise AssertionError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % type ( expected _ regexp ) ) ) DCNL DCSP if ( not callable ( expected _ regexp ) ) : DCNL DCSP DCSP raise AssertionError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % expected _ regexp ) ) DCNL DCSP if ( not callable ( expected _ regexp ) ) : DCNL DCSP DCSP raise AssertionError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % type ( expected _ regexp ) ) ) DCNL DCSP if ( not callable ( expected _ regexp ) ) : DCNL DCSP DCSP raise AssertionError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP string &apos; % expected _ regexp ) )
DCSP try : DCNL DCSP DCSP with open ( path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( result ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP module.fail _ json ( msg = ( &apos; Failed DCSP to DCSP delete DCSP file DCSP % s : DCSP % s &apos; % ( error , e ) ) )
DCSP def decorator ( f ) : DCNL DCSP DCSP @ wraps ( f ) DCNL DCSP DCSP def inner ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP return inner DCNL DCSP return decorator
DCSP if ( not state ) : DCNL DCSP DCSP return DCNL DCSP for task in state.tasks : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP task.delay ( duration ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP log.error ( u &apos;Current DCSP task DCSP failed : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP DCSP raise
DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = &#91; &#93; DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = &#91; &#93; DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP input _ shape = input _ shape DCNL DCSP if ( input _ shape is None ) : DCNL DCSP DCSP
DCSP plugin = get _ plugin _ by _ name ( plugin _ slug ) DCNL DCSP if ( not plugin ) : DCNL DCSP DCSP return DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not plugin _ slug ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP
DCSP return ( ( asn = = asn ) and ( asn = = asn ) )
DCSP if ( not isinstance ( number , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; number DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( number , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; number DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( number , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; number DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP try : DCNL DCSP DCSP return int ( number ) DCNL DCSP except ValueError : DCNL DCSP DCSP return number
DCSP if ( len ( sys.argv ) = = 1 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( branches ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP return
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP log.info ( &apos; Created DCSP access DCSP key DCSP { 0 } . &apos; .format ( user _ name ) ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP msg = &apos; Failed DCSP to DCSP create DCSP access DCSP key DCSP { 0 } . &apos; DCNL DCSP DCSP log.error ( msg.format ( user _ name ) ) DCNL DCSP DCSP return False
DCSP if hasattr ( func , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return func ( * args ) DCNL DCSP else : DCNL DCSP DCSP return func ( * args )
DCSP if ( s is None ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( &apos; utf8 &apos; ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.decode ( &apos; utf8 &apos; ) DCNL DCSP return s
DCSP if ( not exclude ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL DCSP DCSP exclude = &#91; &#93; DCNL DCSP if ( exclude is None ) : DCNL
DCSP try : DCNL DCSP DCSP with open ( storage _ path ) as f : DCNL DCSP DCSP DCSP return json.loads ( f.read ( ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP raise
DCSP if isinstance ( data , bytes ) : DCNL DCSP DCSP data = data.encode ( enc ) DCNL DCSP else : DCNL DCSP DCSP data = data.decode ( enc ) DCNL DCSP return data
DCSP try : DCNL DCSP DCSP validate _ schema ( table _ name ) DCNL DCSP except NoInspectionAvailable : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP for ( name , value ) in manager.iteritems ( ) : DCNL DCSP DCSP if isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP DCSP if isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP ( yield ( name , value ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield ( name , value ) )
DCSP line = line DCNL DCSP while line : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP
DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return r DCNL DCSP if ( r =
DCSP if isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP elif isinstance ( blob _ key , basestring ) : DCNL DCSP DCSP blob _ key = blob _ key DCNL DCSP else
DCSP return call _ talib _ with _ ohlc ( barDs , count , talib.TRIMA , timeperiod )
DCSP try : DCNL DCSP DCSP year = int ( year ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP int ( year ) DCNL DCSP DCSP return True DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP ret = { &apos; data &apos; : data , &apos; outputter &apos; : &apos; highstate &apos; } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False , * * kwargs ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP return ret
DCSP if isinstance ( a , list ) : DCNL DCSP DCSP return &#91; flatten ( el ) for el in a &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; flatten ( el ) for el in a &#93;
DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import inspect DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import inspect DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import inspect DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP import inspect DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pass
DCSP m = _ _ import _ _ ( dotted _ path ) DCNL DCSP if ( m is None ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Finder DCSP &quot; % s &quot; DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP &quot; % s &quot; &apos; % ( module _ path , e ) ) ) DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( dotted _ path ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; Module DCSP % s DCSP not DCSP found &apos; % dotted _ path ) ) DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( dotted _ path ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; Module DCSP % s DCSP not DCSP found &apos; % dotted _ path ) ) DCNL DCSP try : DCNL DCSP DCSP mod = import _ module ( dotted _ path ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % dotted _ path ) ) DCNL DCSP return
DCSP if ( not stats ) : DCNL DCSP DCSP return None DCNL DCSP if isinstance ( stats , dict ) : DCNL DCSP DCSP return stats &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return dict ( ( ( k , v ) for ( k , v ) in stats ) )
DCSP if ( conv _ mode is None ) : DCNL DCSP DCSP pad _ mode = 0 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1.0 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1.0 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1.0 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1.0 DCNL DCSP elif ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP scaling = 1.0 DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP border DCSP mode DCSP % s &apos; % border ) ) DCNL DCSP if ( border _ mode = = &apos; same &apos; ) : DCNL DCSP DCSP
DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ.copy ( ) DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; = env DCNL DCSP env &#91; &apos; env &apos; &#93; =
DCSP settingsAlterationsDirectory = archive.getSettingsPath ( &apos; alterations &apos; ) DCNL DCSP archive.makeDirectory ( settingsAlterationsDirectory ) DCNL DCSP fileInSettingsAlterationsDirectory = getFileInGivenDirectory ( settingsAlterationsDirectory , fileName ) DCNL DCSP if ( fileInSettingsAlterationsDirectory ! = &apos; &apos; ) : DCNL DCSP DCSP return fileInSettingsAlterationsDirectory DCNL DCSP alterationsDirectory = archive.getSkeinforgePath ( &apos; alterations &apos; ) DCNL DCSP return getFileInGivenDirectory ( alterationsDirectory , fileName )
DCSP lockFile = ( checkfile + &apos; .lock &apos; ) DCNL DCSP if os.path.exists ( lockFile ) : DCNL DCSP DCSP if os.path.exists ( lockFile ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP os.unlink ( lockFile ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP return get _ image _ id ( )
DCSP for ( dirpath , dirnames , files ) in os.walk ( branch ) : DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.isdir ( dir ) ) : DCNL DCSP DCSP
DCSP step _ steps = &#91; &#93; DCNL DCSP for step in steps : DCNL DCSP DCSP if isinstance ( step , ( list , tuple ) ) : DCNL DCSP DCSP DCSP step _ steps = &#91; &#93; DCNL DCSP DCSP DCSP for step in steps : DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( step in steps ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if isinstance ( step , list ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP if ( not isinstance ( message , dict ) ) : DCNL DCSP DCSP raise TypeError ( message )
DCSP for ( i , c ) in enumerate ( html ) : DCNL DCSP DCSP if ( t &#91; i &#93; = = &apos; _ &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP feature = Feature.from _ string ( FEATURE1 ) DCNL DCSP assert _ equals ( feature.max _ length , 55 )
DCSP _ driver _ register.append ( cls ) DCNL DCSP return cls
DCSP if isinstance ( elt , bytes ) : DCNL DCSP DCSP return string.encode ( &apos; utf-8 &apos; ) DCNL DCSP elif isinstance ( elt , bytes ) : DCNL DCSP DCSP return string.encode ( &apos; utf-8 &apos; ) DCNL DCSP else : DCNL DCSP DCSP return str ( x.encode ( &apos; utf-8 &apos; ) ) .decode ( &apos; utf8 &apos; )
DCSP with open ( base _ dir , &apos; w &apos; ) as tar _ file : DCNL DCSP DCSP with open ( base _ dir , &apos; w &apos; ) as tar _ file : DCNL DCSP DCSP DCSP with open ( base _ dir , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( data ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP tar _ fh.write ( ( &apos; % s : DCSP % s \ n &apos; % ( base _ dir , tar _ dir ) ) ) DCNL DCSP return tar _ file
DCSP watchers = ( timeout if ( timeout is None ) else timeout ) DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = None DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = ( -1 ) DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = ( -1 ) DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = 0 DCNL DCSP
DCSP if ( not isinstance ( url , unicode ) ) : DCNL DCSP DCSP msg = str ( url ) DCNL DCSP else : DCNL DCSP DCSP msg = str ( url ) DCNL DCSP return url
DCSP action _ name = ugettext _ noop ( &apos; generated &apos; ) DCNL DCSP task _ fn = partial ( upload _ certificates , entry _ id , xmodule _ instance _ args ) DCNL DCSP return run _ main ( entry _ id , task _ fn , xmodule _ instance _ args )
DCSP if ( not os.path.exists ( repo ) ) : DCNL DCSP DCSP return DCNL DCSP with open ( repo , &apos; wb &apos; ) as f : DCNL DCSP DCSP content = f.read ( ) DCNL DCSP return HttpResponse ( content , content _ type = &apos; application / json &apos; , content _ type = &apos; application / json &apos; )
DCSP filenames = &#91; &#93; DCNL DCSP for ( i , p ) in enumerate ( data _ dir ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for ( i , p ) in enumerate ( data _ dir ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP elif ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP elif ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP elif ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP elif ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP return int ( media _ type _ lst &#91; : ( -1 ) &#93; ) DCNL DCSP except KeyError : DCNL DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP type DCSP type : DCSP % r &apos; % type _ type ) )
DCSP return False
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kw ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kw ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP return func ( * args , * * kw ) DCNL DCSP DCSP return decorator DCNL DCSP return decorator
DCSP if ( msg is None ) : DCNL DCSP DCSP msg = &apos; { 0 } DCSP is DCSP not DCSP a DCSP valid . &apos; .format ( actual ) DCNL DCSP if msg : DCNL DCSP DCSP msg = msg DCNL DCSP if msg : DCNL DCSP DCSP msg = ( &apos; % s : DCSP % s &apos; % ( msg , msg ) ) DCNL DCSP if msg : DCNL DCSP DCSP msg + = ( &apos; DCSP &apos; + msg ) DCNL DCSP if msg : DCNL DCSP DCSP msg + = ( &apos; DCSP &apos; + msg ) DCNL DCSP assert ( msg = = expected )
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP args = parser.parse _ args ( args ) DCNL DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP f.write ( f.read ( ) )
DCSP return _ callProtocolWithDeferred ( _ EverythingGetter , executable , args , env , path , reactor , reactor )
DCSP return _ contains ( exp , Reduced )
DCSP return extra _ job _ filters ( in _ dict _ run , &apos; extra &apos; , &apos; extra &apos; )
DCSP import sys DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP if ( other _ user is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( other _ user is None ) : DCNL DCSP DCSP other _ user = user &#91; &apos; user &apos; &#93; DCNL DCSP return ( user in other _ user )
DCSP fileName = fabmetheus _ interpret.getFirstTranslatorFileNameUnmodified ( fileName ) DCNL DCSP if ( fileName ! = &apos; &apos; ) : DCNL DCSP DCSP skeinforge _ craft.writeChainTextWithNounMessage ( fileName , &apos; fillet &apos; )
DCSP parser = argparse.ArgumentParser ( description = &apos; rpm &apos; , python _ shell = False ) DCNL DCSP parser.add _ argument ( &apos; --user &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; , python _ shell = False ) DCNL DCSP parser.add _ argument ( &apos; --user &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; , python _ shell = False )
DCSP f = f ( f ) DCNL DCSP if ( not f ) : DCNL DCSP DCSP return f DCNL DCSP else : DCNL DCSP DCSP return f
DCSP for ( k , v ) in sys.modules.items ( ) : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP def decorator ( test ) : DCNL DCSP DCSP @ wraps ( test ) DCNL DCSP DCSP def wrapper ( * args , * * kw ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP return True DCNL DCSP return decorator
DCSP for token in tokens : DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith ( ( &apos; VB &apos; , &apos; MD &apos; ) ) : DCNL DCSP DCSP DCSP lemma = singularize ( word ) DCNL DCSP DCSP if pos.startswith
DCSP P = np.array ( &#91; &#91; 0.4 , 0.6 &#93; &#93; ) DCNL DCSP assert _ raises ( ValueError , MarkovChain , P ) DCNL DCSP assert _ raises ( ValueError , MarkovChain , sparse.csr _ matrix ( P ) )
DCSP try : DCNL DCSP DCSP return issubclass ( node , astroid.BoundMethod ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False
DCSP fn = os.path.join ( fn , fn ) DCNL DCSP fn = os.path.join ( fn , fn ) DCNL DCSP return fn
DCSP try : DCNL DCSP DCSP if isinstance ( parameter , six.string _ types ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP except ImportError : DCNL DCSP DCSP return False
DCSP if ( not part ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP if ( not part ) : DCNL DCSP DCSP DCSP return ( &apos; &apos; , &apos; &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( &apos; / &apos; + part ) DCNL DCSP except ( ValueError , ValueError ) : DCNL DCSP DCSP return None
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP G = nx.DiGraph ( ) DCNL DCSP for ( k , v ) in G.edges ( ) : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP d &#91; k &#93; = v DCNL DCSP return G
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP homematic = get _ component ( &apos; homematic &apos; ) DCNL DCSP return homematic.setup _ hmdevice _ discovery _ helper ( hass , HMLight , discovery _ info , add _ devices )
DCSP asset _ dir _ prefix = &apos; &apos; DCNL DCSP if ( not os.path.exists ( asset _ dir _ prefix ) ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( not os.path.exists ( asset _ dir _ prefix ) ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( not os.path.exists ( asset _ dir _ prefix ) ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( asset _ dir _ prefix = = &apos; / &apos; ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( asset _ dir _ prefix = = &apos; / &apos; ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( asset _ dir _ prefix = = &apos; / &apos; ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos; / &apos; DCNL DCSP if ( asset _ dir _ prefix = = &apos; / &apos; ) : DCNL DCSP DCSP asset _ dir _ prefix = &apos;
DCSP def wrap ( f ) : DCNL DCSP DCSP def wrap ( f ) : DCNL DCSP DCSP DCSP return f ( f ) DCNL DCSP DCSP return f DCNL DCSP return decorator
DCSP meta = meta _ meta ( prefix , dist ) DCNL DCSP if meta : DCNL DCSP DCSP return meta &#91; &apos; meta &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP meta = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP table = Table ( &apos; meta &apos; , meta , autoload = True ) DCNL DCSP table = Table ( &apos; meta &apos; , meta , autoload = True ) DCNL DCSP table = Table ( &apos; meta &apos; , meta , autoload = True ) DCNL DCSP table = Table ( &apos; meta &apos; , meta , autoload = True ) DCNL DCSP return meta
DCSP if ( not isinstance ( css , string _ types ) ) : DCNL DCSP DCSP css = css.replace ( u &apos; \ \ &apos; , u &apos; \ \ \ \ &apos; ) .replace ( u &apos; \ \ &apos; , u &apos; \ \ \ \ &apos; ) .replace ( u &apos; \ \ &apos; , u &apos; \ \ \ \ &apos; ) .replace ( u &apos; &quot; &apos; , u &apos; \ \ &quot; &apos; ) DCNL DCSP return css _ to _ string ( css )
DCSP return subproc _ check _ output ( &#91; &apos; svnlook &apos; , &apos; -t &apos; , repo _ path , &apos; -t &apos; , txn _ id &#93; )
DCSP if ( name.lower ( ) = = &apos; _ _ main _ _ &apos; ) : DCNL DCSP DCSP if ( name.lower ( ) = = &apos; _ _ main _ _ &apos; ) : DCNL DCSP DCSP DCSP name = name.lower ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name.lower ( ) DCNL DCSP else : DCNL DCSP DCSP name = name.lower ( ) DCNL DCSP return GetProperty ( name , &#91; &#93; )
DCSP ret = { } DCNL DCSP for returner _ in _ _ opts _ _ &#91; CONFIG _ KEY &#93; : DCNL DCSP DCSP cur _ jid = _ mminion ( ) .returners &#91; &apos; { 0 } .get _ load &apos; .format ( returner _ ) &#93; ( jid , clear _ load ) DCNL DCSP DCSP if ( cur _ jid is not None ) : DCNL DCSP DCSP DCSP ret.append ( minion _ id ) DCNL DCSP return ret
DCSP if ( not user _ username ) : DCNL DCSP DCSP return None DCNL DCSP if ( service _ username is None ) : DCNL DCSP DCSP service _ username = getpass.getuser ( ) DCNL DCSP user = users.get _ current _ user ( ) DCNL DCSP if user : DCNL DCSP DCSP return user DCNL DCSP else : DCNL DCSP DCSP return None
DCSP m = np.asarray ( X ) DCNL DCSP m = np.empty ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP for i in range ( n ) : DCNL DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP if m : DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m = m &#91; i &#93; DCNL DCSP DCSP DCSP m =
DCSP assert _ nD ( image , 2 ) DCNL DCSP image = img _ as _ float ( image ) DCNL DCSP result = convolve ( image , HPREWITT _ WEIGHTS ) DCNL DCSP return _ mask _ filter _ result ( result , mask )
DCSP if ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP n _ features = X.shape &#91; 1 &#93; DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( ( covariance _ type + &apos; : &apos; ) ) DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( covariance _ matrix ) DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( log _ chol ) DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( covariance _ matrix ) DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( log _ chol ) DCNL DCSP elif ( covariance _ type = = &apos; tied &apos; ) : DCNL DCSP DCSP log _ chol = linalg.cholesky ( log _ chol ) DCNL DCSP else : DCNL DCSP DCSP log
DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) : DCNL DCSP DCSP perm = { } DCNL DCSP if ( perm is None ) :
DCSP if isinstance ( f , dict ) : DCNL DCSP DCSP return frappe.db.sql ( u &apos;select DCSP name DCSP from DCSP `tab { 0 } ` DCSP where DCSP lft DCSP = DCSP { 1 } &apos; .format ( f . _ _ name _ _ , f . _ _ name _ _ ) ) DCNL DCSP else : DCNL DCSP DCSP return frappe.db.sql ( u &apos;select DCSP name DCSP from DCSP `tab { 0 } ` DCSP where DCSP lft DCSP = DCSP { 1 } &apos; .format ( doctype , f ) )
DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , text )
DCSP route = CORE _ MANAGER.get _ core _ service ( ) .table _ manager DCNL DCSP peer = core.peer _ manager.get _ by _ name ( neigh _ ip _ address ) DCNL DCSP if route _ dist : DCNL DCSP DCSP route = CORE _ MANAGER.get _ core _ service ( ) .table _ manager DCNL DCSP DCSP res = core.peer _ manager.get _ by _ name ( neigh _ ip _ address , route _ family = route _ family , route _ family = route _ family ) DCNL DCSP return res
DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( ret is None ) : DCNL DCSP DCSP ret = { } DCNL DCSP if ( &apos; error &apos; in _ _ salt _ _ ) : DCNL DCSP DCSP ret &#91; &apos; message &apos; &#93; =
DCSP try : DCNL DCSP DCSP int ( tax _ number ) DCNL DCSP DCSP return True DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP if ( not file _ path _ list ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; )
DCSP if ( query is None ) : DCNL DCSP DCSP query = query ( query ) DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not query ) : DCNL DCSP DCSP return &#91; &#93; DCNL
DCSP if ( node is None ) : DCNL DCSP DCSP node = None DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = None DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = None DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = None DCNL DCSP if ( node is None ) : DCNL DCSP DCSP node = None DCNL DCSP if ( not node ) : DCNL DCSP DCSP raise ValueError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not node ) : DCNL DCSP DCSP raise ValueError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not node ) : DCNL DCSP DCSP raise ValueError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not node ) : DCNL DCSP DCSP raise ValueError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not node ) : DCNL DCSP DCSP return DCNL DCSP if ( not node ) : DCNL DCSP
DCSP pkg _ list = &#91; pkg for pkg in pkg _ list if is _ installed ( pkg ) &#93; DCNL DCSP if pkg _ list : DCNL DCSP DCSP uninstall ( pkg _ list )
DCSP palette = &#91; &#93; DCNL DCSP for func in funcs : DCNL DCSP DCSP palette = &#91; &#93; DCNL DCSP DCSP for func in funcs : DCNL DCSP DCSP DCSP if ( len ( func ) = = 0 ) : DCNL DCSP DCSP DCSP DCSP palette = &#91; &#93; DCNL DCSP DCSP DCSP DCSP if ( len ( palette ) = = 2 ) : DCNL DCSP DCSP DCSP DCSP DCSP palette = tuple ( palette ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP palette = &#91; &#93; DCNL DCSP DCSP DCSP DCSP if ( len ( palette ) = = 2 ) : DCNL DCSP DCSP DCSP DCSP DCSP palette = tuple ( palette ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP palette = &#91; &#93; DCNL DCSP DCSP DCSP DCSP for i in range ( len ( palette ) ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( len ( palette ) = = 2 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP palette &#91; i &#93; = &#91; &#93; DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP return Locale.parse ( locale ) .format _ format ( format , locale )
DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name is
DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP def replace ( matchobj ) : DCNL DCSP DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt; &apos; % matchobj.group ( 1 ) ) DCNL DCSP return ( u &apos; &lt; ul &gt; % s &lt; / ul &gt;
DCSP pluginModule = archive.getModuleWithPath ( repository ) DCNL DCSP if ( pluginModule = = None ) : DCNL DCSP DCSP return None DCNL DCSP return getDisplayedDialogFromConstructor ( pluginModule.getNewRepository ( ) )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( args ) &gt; 1 )
DCSP if ( number = = 0 ) : DCNL DCSP DCSP return round ( number ) DCNL DCSP return round ( math.ceil ( math.log10 ( number ) ) )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP DCSP DCSP conn.create _
DCSP user = get _ user _ or _ create ( user _ pk = group _ pk , user _ pk = user _ pk , new _ status = new _ status ) DCNL DCSP if ( old _ status is not None ) : DCNL DCSP DCSP user.activate ( ) DCNL DCSP DCSP user.save ( )
DCSP if ( length is None ) : DCNL DCSP DCSP length = len ( alphabet ) DCNL DCSP if ( n is None ) : DCNL DCSP DCSP length = len ( alphabet ) DCNL DCSP if ( n is None ) : DCNL DCSP DCSP length = len ( alphabet ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; length DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; length DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; length DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; length DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; length DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n is None ) : DCNL
DCSP num _ shards = len ( images ) DCNL DCSP for i in range ( num _ shards ) : DCNL DCSP DCSP for i in range ( num _ shards ) : DCNL DCSP DCSP DCSP for i in range ( num _ shards ) : DCNL DCSP DCSP DCSP DCSP for i in range ( num _ shards ) : DCNL DCSP DCSP DCSP DCSP DCSP for i in range ( num _ shards ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP ( yield ( i , j ) ) DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( i , i ) ) DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( i , i ) ) DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( i , i ) ) DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( i , i ) ) DCNL DCSP DCSP DCSP DCSP
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.detach _ user _ policy ( policy _ name , user _ name ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP msg = &apos; Failed DCSP to DCSP detach DCSP { 0 } DCSP policy . &apos; DCNL DCSP DCSP log.error ( msg.format ( policy _ name ) ) DCNL DCSP DCSP return False
DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; bluetooth &apos; ) DCNL DCSP return out
DCSP if ( columns is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( columns is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( columns is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) : DCNL DCSP DCSP columns = &#91; &#93; DCNL DCSP if ( index is None ) :
DCSP utility = ManagementUtility ( argv ) DCNL DCSP utility.execute ( )
DCSP field _ value = field ( field ) DCNL DCSP if ( field _ value is not None ) : DCNL DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP if ( field _ value is not None ) : DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP field _ value = getattr ( field , field _ name ) DCNL DCSP DCSP DCSP if ( field _ value is not None ) : DCNL DCSP DCSP DCSP DCSP field _ value = field _
DCSP canvas = FigureCanvasGTK3Agg ( figure ) DCNL DCSP manager = FigureManagerGTK3Agg ( canvas , num ) DCNL DCSP return manager
DCSP if ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP elif ( create _ using is None ) : DCNL DCSP DCSP create _ using = create _ using DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if create _ using.is _ directed ( ) : DCNL DCSP DCSP raise ValueError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if create _ using.is _
DCSP if ( not os.path.exists ( f ) ) : DCNL DCSP DCSP os.makedirs ( f ) DCNL DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , f )
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 30 ) DCNL DCSP c = RrCause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP return translateMessage ( key , message , &apos; decrypt &apos; )
DCSP if ( sys.version _ info &lt; ( 3 , ) ) : DCNL DCSP DCSP return _ sys _ version ( ) &#91; 1 &#93; DCNL DCSP else : DCNL DCSP DCSP return _ sys _ version ( ) &#91; 1 &#93;
DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( ( &apos;
DCSP skip = ( token.NEWLINE , token.INDENT , token.DEDENT ) DCNL DCSP tokens = tokenize.generate _ tokens ( io.StringIO ( input ) .readline ) DCNL DCSP for quintuple in tokens : DCNL DCSP DCSP ( yield quintuple )
DCSP conn = boto.connect _ vpc ( u &apos;the _ key &apos; , u &apos;the _ secret &apos; ) DCNL DCSP with assert _ raises ( EC2ResponseError ) as cm : DCNL DCSP DCSP conn.create _ policy ( u &apos;foobar &apos; ) DCNL DCSP cm.exception.code.should.equal ( u &apos;Gateway.NotAttached &apos; ) DCNL DCSP cm.exception.status.should.equal ( 400 ) DCNL DCSP cm.exception.request _ id.should _ not.be.none
DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP exog _ labels = &#91; &#93; DCNL DCSP if ( not isinstance ( exog _ labels , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP of
DCSP storage _ client = storage.Client ( ) DCNL DCSP bucket = storage _ client.get _ bucket ( bucket _ name ) DCNL DCSP bucket = client.get _ bucket ( bucket _ name ) DCNL DCSP return bucket
DCSP return ( obj = = other )
DCSP disable _ site ( config ) DCNL DCSP reload _ service ( &apos; apache2 &apos; )
DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( comments , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP with open ( path , &apos; rb &apos; ) as fh : DCNL DCSP DCSP for line in fh : DCNL DCSP DCSP DCSP ( yield line )
DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 2 ) : DCNL DCSP DCSP return ( 1 - ( ( 2 * p ) * ( 2 * * 2 ) ) ) DCNL DCSP else : DCNL DCSP DCSP return ( 2 * ( ( 2 * p ) * ( 2 * * 2 ) ) )
DCSP t &#91; 0 &#93; = ( t &#91; 1 &#93; + t &#91; 3 &#93; )
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP uri = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( &apos; / &apos; + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) + &apos; / &apos; ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s DCSP % s DCSP % s &apos; % ( ( &apos; % s % s &apos; % ( x , y ) ) ) ) DCNL DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s &apos; % (
DCSP X = np.asarray ( X ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( len ( X ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP
DCSP with cd ( &apos; / usr / bin / venv &apos; ) : DCNL DCSP DCSP with cd ( &apos; / usr / bin / venv &apos; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( len ( data ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( data ) = = 4 ) : DCNL DCSP DCSP return data &#91; 0 : ( -1 ) &#93; DCNL DCSP return data
DCSP try : DCNL DCSP DCSP result = exception ( * args , * * kwargs ) DCNL DCSP except Exception as e : DCNL DCSP DCSP err _ msg = str ( e ) DCNL DCSP DCSP raise AssertionError ( err ) DCNL DCSP return result
DCSP conn = get _ conn ( ) DCNL DCSP return conn.network _ list ( )
DCSP def decorator ( func ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def wrapped ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP
DCSP try : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP docstring = &apos; &apos; DCNL DCSP docstring = &apos; &apos; DCNL DCSP docstring = None DCNL DCSP docstring = None DCNL DCSP if docstring : DCNL DCSP DCSP docstring + = &apos; \ n &apos; DCNL DCSP DCSP docstring + = docstring DCNL DCSP return docstring
DCSP class Foo ( object , ) : DCNL DCSP DCSP def _ _ repr _ _ ( self ) : DCNL DCSP DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP foo ( ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP foo ( ) DCNL DCSP DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP assert ( foo ( ) = = expected ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP assert (
DCSP product = get _ object _ or _ 404 ( Product , pk = product _ product _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( product ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Product &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; ordered &apos; : ordered } ) DCNL DCSP return render _ to _ response ( &apos; sales / ordered _ product _ delete &apos; , { &apos; ordered &apos; : ordered } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP err _ msg = &apos; \ n
DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( n % 2 ) = = 0 ) : DCNL DCSP DCSP return True DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP return _ volume _ glance _ metadata _ create ( context , volume _ id , key , value , session = session )
DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( coord = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP return ( ( (
DCSP global _ connection _ pool DCNL DCSP global _ connection _ pool DCNL DCSP global _ connection _ pool DCNL DCSP _ connection _ pool = factory
DCSP return encode ( raw _ bytes , * a , * * kw )
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ media _ list _ set _ media &apos; , None ) or _ Cfunction ( &apos; libvlc _ media _ list _ set _ media &apos; , ( ( 1 , ) , ( 1 , ) ) , None , None , MediaList , Media ) ) DCNL DCSP return f ( p _ ml , p _ md )
DCSP tmp _ dir = os.path.abspath ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; _ _ init _ _ .py &apos; ) ) DCNL DCSP tmp _ dir = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( not os.path.exists ( full _ path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( config _ name , config _ name ) ) ) DCNL DCSP if ( not os.path.exists ( full _ path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( config _ name , config _ name ) ) ) DCNL DCSP if ( not os.path.exists ( full _ path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist DCSP in DCSP % s &apos; % ( config _ name , config _ name ) ) ) DCNL DCSP if ( not os.path.exists (
DCSP return T.max ( x , axis = axis , keepdims = keepdims )
DCSP @ wraps ( view _ func ) DCNL DCSP def decorator ( request , * args , * * kwargs ) : DCNL DCSP DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP DCSP return view _ func ( request , * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return view _ func ( request , * args , * * kwargs ) DCNL DCSP return _ checklogin
DCSP return ( ( len ( coil ) = = 2 ) and ( len ( coil ) &gt; 0 ) )
DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial &apos; % ( v , ) ) ) DCNL DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial &apos; % v ) ) DCNL DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial &apos; % v ) ) DCNL DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial &apos; % v ) ) DCNL DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP polynomial DCSP of DCSP
DCSP return &apos; &apos;.join ( ( random.choice ( string _ length ) for _ in range ( total _ strings ) ) )
DCSP lines = &#91; &#93; DCNL DCSP for line in strs : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP ( yield line ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield line )
DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP try : DCNL DCSP DCSP val = int ( val ) DCNL DCSP except ValueError : DCNL DCSP DCSP return val DCNL DCSP else : DCNL DCSP DCSP return val
DCSP seen = set ( ) DCNL DCSP for item in items : DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item not in items ) :
DCSP hash _ dict = { } DCNL DCSP for ( key , value ) in six.iteritems ( hash _ dict ) : DCNL DCSP DCSP if ( key not in hash _ dict ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP hash _ dict &#91; key &#93; = hash _ dict &#91; key &#93; DCNL DCSP return hash _ dict
DCSP x = np.asarray ( x ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( sample _ size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; sample DCSP size DCSP
DCSP if ( extra _ context is None ) : DCNL DCSP DCSP extra _ context = { } DCNL DCSP if ( extra _ context is None ) : DCNL DCSP DCSP extra _ context = { } DCNL DCSP if ( extra _ context is not None ) : DCNL DCSP DCSP context.update ( extra _ context ) DCNL DCSP context.update ( extra _ context ) DCNL DCSP return TemplateResponse ( request , template _ name , context , current _ app = current _ app , extra _ context = extra _ context )
DCSP if ( title is None ) : DCNL DCSP DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP if ( title is not None ) : DCNL DCSP DCSP title = title DCNL DCSP else : DCNL DCSP DCSP title = title DCNL DCSP if title : DCNL DCSP DCSP title = title DCNL DCSP else : DCNL DCSP DCSP title = title DCNL DCSP return title
DCSP yh = SM.sineModelSynth ( hfreq , hmag , hphase , N , H , fs ) DCNL DCSP return ( ys , ys )
DCSP expr = sympify ( expr ) DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not expr ) : DCNL DCSP DCSP
DCSP if ( not isinstance ( * args , kwargs ) ) : DCNL DCSP DCSP raise TypeError ( &apos; no DCSP argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( args , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; args DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( args , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; no DCSP arguments DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( args , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; no DCSP arguments DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( args , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; no DCSP arguments DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( args , ( list , tuple ) ) ) : DCNL DCSP DCSP raise
DCSP with pytest.raises ( EmailAddress.DoesNotExist ) : DCNL DCSP DCSP client.login ( user = user , user = user ) DCNL DCSP with pytest.raises ( Http404 ) : DCNL DCSP DCSP EmailAddress.objects.get ( user = user , user = user ) DCNL DCSP with pytest.raises ( Http404 ) : DCNL DCSP DCSP EmailAddress.objects.get ( user = user , user = user )
DCSP conf = load _ registry ( services , registry _ path = registry _ path , debug = debug , config = config ) DCNL DCSP return app
DCSP matrixTetragrid = getIdentityMatrixTetragrid ( matrixTetragrid , prefix , xmlElement ) DCNL DCSP for row in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP for column in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP for column in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP for column in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP for column in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP matrixTetragrid &#91; key &#93; = &#91; &#93; DCNL DCSP DCSP DCSP DCSP DCSP for column in xrange ( ( len ( matrixTetragrid ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) : DCNL DCSP DCSP operation = { } DCNL DCSP if ( operation is None ) :
DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( pytz
DCSP if ( a = = b ) : DCNL DCSP DCSP return 1 DCNL DCSP elif ( a = = b ) : DCNL DCSP DCSP return 1 DCNL DCSP else : DCNL DCSP DCSP return cmp ( a , b )
DCSP if ( v &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; v DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( v &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP bytes &apos; % ( v , ) ) ) DCNL DCSP if ( v &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Values DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( v &gt; = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; At DCSP least DCSP one DCSP tag DCSP must DCSP be DCSP bytes , DCSP got DCSP % d &apos; % ( v , ) ) ) DCNL DCSP try : DCNL DCSP DCSP result = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP folder = get _ object _ or _ 404 ( KnowledgeFolder , pk = knowledgeType _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( folder ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Knowledge DCSP Category &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; items &apos; : items } ) DCNL DCSP return render _ to _ response ( &apos; knowledge / item _ view &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP splitLine = archive.getTextLines ( gcodeText ) DCNL DCSP splitLine = archive.getTextLines ( splitLine ) DCNL DCSP for line in lines : DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = gcodec.getSplitLineBeforeBracketSemicolon ( line ) DCNL DCSP DCSP splitLine = splitLine &#91;
DCSP try : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP msg = ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP input . &apos; % ( value , ) ) DCNL DCSP DCSP raise ValidationError ( msg ) DCNL DCSP if ( ( input _ param is not None ) and ( not isinstance ( value , six.string _ types ) ) ) : DCNL DCSP DCSP msg = ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP input . &apos; % ( input _ map , ) ) DCNL DCSP DCSP raise ValidationError ( msg ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP msg = ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP input . &apos; % ( value , ) ) DCNL DCSP DCSP raise ValidationError ( msg )
DCSP return get _ i18n ( ) .parse _ date ( string )
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; simple = = 1.0 &apos; ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP assert ( &apos; simple DCSP ( 1.0 ) &apos; in result.stdout ) , str ( result )
DCSP ret = { } DCNL DCSP for ( name , value ) in _ dict.items ( ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( name ) DCNL DCSP return result
DCSP if ( not data ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( data ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( data ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( data ) = = 2 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( data ) = = 2 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( num = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( num &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; num DCSP length DCSP must DCSP be
DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( count &lt;
DCSP if isinstance ( profile , string _ types ) : DCNL DCSP DCSP profile = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( profile ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( profile ) DCNL DCSP if ( response.status _ code &gt; = 400 ) : DCNL DCSP DCSP response.raise _ for _ status ( ) DCNL DCSP return response.json ( )
DCSP if ( app _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( app _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( app _ id is not None ) : DCNL DCSP DCSP return os.path.join ( app _ id , path ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( endpoint , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( endpoint , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( endpoint , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( endpoint , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( endpoint , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( endpoint , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; endpoint DCSP must DCSP be DCSP
DCSP tempdir = _ TempDir ( ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True , preload = True ) DCNL DCSP epochs = Epochs ( raw , events , tmin , tmax , picks = picks , preload = True , preload = True ) DCNL
DCSP try : DCNL DCSP DCSP return subprocess.check _ output ( &#91; &apos; git &apos; , &apos; rev-parse &apos; , &apos; --always &apos; &#93; , cwd = path ) DCNL DCSP except subprocess.CalledProcessError : DCNL DCSP DCSP return None
DCSP return GenericScript ( c _ instance , Live.MidiMap.MapMode.absolute , DEVICE _ CONTROLS , TRANSPORT _ CONTROLS , VOLUME _ CONTROLS , TRACKARM _ CONTROLS , BANK _ CONTROLS , CONTROLLER _ DESCRIPTION , MIXER _ OPTIONS )
DCSP req = net.urlopen ( url , headers = { &apos; Cookie &apos; : cookie.header _ output ( ) } ) DCNL DCSP if req : DCNL DCSP DCSP return json.loads ( content.decode ( ) ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) :
DCSP if ( args is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( ( len ( args ) = = 1 ) and ( len ( args ) &gt; 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Parameter DCSP parameter DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( ( len ( args ) &gt; 1 ) and ( len ( args ) &gt; 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( len ( args ) &gt; 1 ) and ( len ( args ) &gt; 1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP action = ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s : % s &apos;
DCSP if ( region is None ) : DCNL DCSP DCSP region = _ get _ domain ( region , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP if ( domain is not None ) : DCNL DCSP DCSP DCSP domain = &apos; { 0 } / { 1 } &apos; .format ( domain , domain ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP domain = &apos; { 0 } / { 1 } &apos; .format ( domain , domain ) DCNL DCSP DCSP domain = &apos; { 0 } / { 1 } &apos; .format ( domain , domain ) DCNL DCSP DCSP domain = &apos; { 0 } / { 1 } &apos; .format ( domain , domain ) DCNL DCSP DCSP domain = &apos; { 0 } / { 1 } &apos; .format ( domain , domain )
DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( name
DCSP line = line.strip ( ) DCNL DCSP if ( ( not line ) or ( not line ) ) : DCNL DCSP DCSP raise ValueError ( &apos; line DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP tokens = line.split ( ) DCNL DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP tokens = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ( yield line )
DCSP if ( len ( str1 ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( str1 ) = = len ( str2 ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( str1 ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( str1 ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( str1 ) = = 1 ) : DCNL DCSP DCSP return tuple ( ( ( ( len ( t ) = = 1 ) for ( k , v ) in zip ( str1 , str2 ) ) ) DCNL DCSP else : DCNL DCSP DCSP return tuple ( ( ( t &#91; i &#93; for i in range ( ( len ( matrix ) - 1 ) ) ) )
DCSP try : DCNL DCSP DCSP return Collection ( bus , * * kwargs ) DCNL DCSP except ItemNotFoundException : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP return Collection ( bus , * * kwargs ) DCNL DCSP except ItemNotFoundException : DCNL DCSP DCSP pass
DCSP if ( not strict ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if strict : DCNL DCSP DCSP print ( &apos;
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP parser = optparse.OptionParser ( source = source ) DCNL DCSP parser.add _ argument ( &apos; -j &apos; , &apos; --uuid &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , action = &apos; store &apos; , python _ shell = False ) DCNL DCSP return True
DCSP pass
DCSP if ( not row _ limit ) : DCNL DCSP DCSP return False DCNL DCSP if ( not row _ limit ) : DCNL DCSP DCSP return False DCNL DCSP if ( not row _ limit ) : DCNL DCSP DCSP return False DCNL DCSP if ( not row _ limit ) : DCNL DCSP DCSP return False DCNL DCSP if ( not row _ limit ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( row _ limit ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( len ( row _ limit ) &gt;
DCSP return parse _ object _ id ( &apos; certificates &apos; , id )
DCSP return m.group ( 1 ) .replace ( &apos; DCSP &apos; , &apos; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &apos; )
DCSP raise HTTPBadRequest ( * args , * * kwargs )
DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( txt is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not txt ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if (
DCSP if ( len ( blocks ) = = 1 ) : DCNL DCSP DCSP return blocks &#91; 0 &#93; DCNL DCSP elif ( len ( blocks ) = = 1 ) : DCNL DCSP DCSP return blocks &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP context = { &apos; form &apos; : form } DCNL DCSP context.update ( extra _ context ) DCNL DCSP context.update ( extra _ context ) DCNL DCSP return render ( request , template _ name , { &apos; form &apos; : form } , context _ instance = RequestContext ( request ) , response _ format = template _ name )
DCSP try : DCNL DCSP DCSP if ( user _ right is None ) : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( user is None ) : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( user is None ) : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( user is None ) : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( user is None ) : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( user is None ) : DCNL DCSP DCSP DCSP
DCSP fields = &#91; &#93; DCNL DCSP for ( key , value ) in data.items ( ) : DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if isinstance (
DCSP request &#91; &apos; user _ id &apos; &#93; = user _ id DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; RemovePhotosOperation.Execute &apos; , request ) ) DCNL DCSP logging.info ( ( &apos; REMOVE DCSP PHOTOS : DCSP user : DCSP % d , DCSP device : DCSP % d , DCSP
DCSP session = get _ session ( ) DCNL DCSP return metadef _ resource _ type _ api.create ( context , values )
DCSP if ( get _ configured _ provider ( ) is False ) : DCNL DCSP DCSP return False DCNL DCSP return _ _ virtualname _ _
DCSP pub = publish _ programmatically ( source _ name = source _ path , destination _ path = source _ path , destination _ path = destination _ path , reader = reader , reader _ name = parser _ name , parser = parser , parser _ name = parser _ name , parser = parser , parser _ name = parser _ name , settings = settings , settings _ spec = settings _ spec , settings _ overrides = settings _ overrides , config _ section = config _ section , enable _ exit _ status = enable _ exit _ status ) DCNL DCSP return output
DCSP @ functools.wraps ( f ) DCNL DCSP def wrapped ( * args , * * kw ) : DCNL DCSP DCSP return f ( self , * args , * * kw ) DCNL DCSP return wrapped
DCSP if ( cache _ minion _ id is None ) : DCNL DCSP DCSP cache _ minion _ id = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( cache _ minion _ id is None ) : DCNL DCSP DCSP cache _ id _ id = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( cache _ minion _ id is None ) : DCNL DCSP DCSP cache _ id _ id = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( cache _ minion _ id is None ) : DCNL DCSP DCSP cache _ id _ id = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( not cache _ id _ id ) : DCNL DCSP DCSP return None DCNL DCSP if ( cache _ minion _ id is None ) : DCNL DCSP DCSP cache _ id = _ _ salt _ _ &#91; &apos; cp.cache _ file &apos; &#93; ( opts , cache _ minion _ id = cache _ minion _ id ) DCNL DCSP if ( not cache _ id )
DCSP return ( ( r * sqrt ( ( r * * 2 ) ) ) / sqrt ( ( r * * 2 ) ) )
DCSP match = re.search ( &apos; ( \ \ d + ) &apos; , response ) DCNL DCSP if match : DCNL DCSP DCSP return match.group ( 1 ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP cross _ entropy = tf.nn.sparse _ softmax _ cross _ entropy _ with _ logits ( logits , target _ seqs , batch _ size , num _ steps ) DCNL DCSP return tf.reduce _ sum ( tf.nn.sparse _ softmax _ cross _ entropy _ with _ logits ( logits , target _ seqs , batch _ size ) )
DCSP try : DCNL DCSP DCSP os.remove ( f ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise
DCSP assert ( rgb _ array ( &#91; 0 , 2 , 3 &#93; ) = = np.array ( &#91; 3 , 3 , 4 &#93; ) ) DCNL DCSP assert ( rgb _ array ( &#91; 0 , 2 , 3 &#93; ) = = np.array ( &#91; 3 , 3 , 4 &#93; ) ) DCNL DCSP assert ( rgb _ array ( &#91; 0 , 2 , 3 &#93; ) = = np.array ( &#91; 3 , 3 , 4 &#93; ) )
DCSP context = SSLContext ( ( ssl _ version or ssl.PROTOCOL _ SSLv23 ) ) DCNL DCSP if ( options is not None ) : DCNL DCSP DCSP context.set _ ciphers ( ciphers ) DCNL DCSP if ( ciphers is not None ) : DCNL DCSP DCSP context.set _ ciphers ( ciphers ) DCNL DCSP if ( ciphers is not None ) : DCNL DCSP DCSP context.set _ ciphers ( ciphers ) DCNL DCSP if ( ciphers is not None ) : DCNL DCSP DCSP context.set _ ciphers ( ciphers ) DCNL DCSP if ( ciphers is not None ) : DCNL DCSP DCSP context.set _ ciphers ( ciphers ) DCNL DCSP return ciphers
DCSP info = info _ info ( info , force _ update _ to _ first = force _ update _ to _ first , verbose = verbose ) DCNL DCSP return info
DCSP block _ count = { } DCNL DCSP for item in modulestore ( ) .get _ item ( xblock _ type _ set ) : DCNL DCSP DCSP if ( item &#91; &apos; type &apos; &#93; = = &apos; block _ type &apos; ) : DCNL DCSP DCSP DCSP block _ count = block _ type _ set &#91; &apos; id &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP block _ count = &apos; &apos; DCNL DCSP DCSP block _ count + = 1 DCNL DCSP return block _ count
DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL
DCSP git _ git _ release ( )
DCSP if ( module is None ) : DCNL DCSP DCSP module = sys.modules &#91; &apos; _ _ name _ _ &apos; &#93; DCNL DCSP if ( module is None ) : DCNL DCSP DCSP module = _ _ import _ _ ( module ) DCNL DCSP if ( module is None ) : DCNL DCSP DCSP module = _ _ import _ _ ( module ) DCNL DCSP if ( module is None ) : DCNL DCSP DCSP module = _ _ import _ _ ( module ) DCNL DCSP if ( module is not None ) : DCNL DCSP DCSP for attr in module . _ _ dict _ _ : DCNL DCSP DCSP DCSP attr = getattr ( module , attr ) DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP attr = getattr ( module , attr ) DCNL DCSP DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP DCSP attr = getattr ( module , attr ) DCNL DCSP DCSP DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP attr =
DCSP segments = id _ token.split ( &apos; \ n &apos; ) DCNL DCSP if ( len ( segments ) ! = 4 ) : DCNL DCSP DCSP raise VerifyJwtTokenError ( ( &apos; Wrong DCSP token DCSP token : DCSP % s &apos; % id _ token ) ) DCNL DCSP if ( len ( segments ) ! = 4 ) : DCNL DCSP DCSP raise VerifyJwtTokenError ( ( &apos; Wrong DCSP token DCSP token : DCSP % s &apos; % id _ token ) ) DCNL DCSP if ( len ( segments ) ! = 4 ) : DCNL DCSP DCSP raise VerifyJwtTokenError ( ( &apos; Wrong DCSP token DCSP token : DCSP % s &apos; % id _ token ) ) DCNL DCSP if ( len ( segments ) = = 2 ) : DCNL DCSP DCSP return segments &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP logger = logging.getLogger ( ) DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP if ( len ( root.handlers ) = = 0 ) : DCNL DCSP DCSP logging.captureWarnings ( True )
DCSP if compress _ level : DCNL DCSP DCSP body = body _ level DCNL DCSP else : DCNL DCSP DCSP body = body DCNL DCSP body = &apos; \ n &apos; .join ( body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP body + = ( &apos; \ n &apos; + body ) DCNL DCSP return body
DCSP result = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP try : DCNL DCSP DCSP module = import _ module ( module _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( &apos; The DCSP module DCSP could DCSP not DCSP be DCSP loaded : DCSP { 0 } &apos; .format ( module ) ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( &apos; The DCSP module DCSP could DCSP not DCSP be DCSP loaded : DCSP { 0 } &apos; .format ( module ) ) DCNL DCSP try : DCNL DCSP DCSP pkg _ module = import _ module ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( &apos; The DCSP module DCSP could DCSP not DCSP be DCSP loaded : DCSP { 0 } &apos; .format ( module _ path ) ) DCNL DCSP try : DCNL DCSP DCSP pkg _ module = import _ module ( module _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( &apos; The DCSP module DCSP could DCSP not DCSP be DCSP installed . &apos; ) DCNL DCSP if
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP homematic = get _ component ( &apos; homematic &apos; ) DCNL DCSP return homematic.setup _ hmdevice _ discovery _ helper ( hass , HMCover , discovery _ info , add _ devices )
DCSP cmd = &apos; { 0 } DCSP restart DCSP { 1 } &apos; .format ( _ cmd ( jail ) , name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP data = StringIO ( ) DCNL DCSP ascii.write ( dat , out , fast _ writer = fast _ writer , fast _ writer = fast _ writer ) DCNL DCSP assert ( out.getvalue ( ) .splitlines ( ) = = &apos; \ n &apos; ) DCNL DCSP assert ( out.getvalue ( ) .splitlines ( ) = = expected )
DCSP if ( not isinstance ( value , dict ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; value DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % r &apos; % name ) ) DCNL DCSP if ( ( value is None ) or ( value is None ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % name ) ) DCNL DCSP if ( ( value is None ) or ( value is None ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % name ) ) DCNL DCSP if ( ( value is None ) or ( value is None ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % name ) ) DCNL DCSP if ( ( value is None ) or ( value ! = &apos; &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP string &apos; % name
DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = LatheDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( xmlElement ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = LatheDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( xmlElement ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = LatheDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( xmlElement ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = LatheDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( xmlElement ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = LatheDerivation ( ) DCNL DCSP DCSP derivation.setToXMLElement ( xmlElement ) DCNL DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = ShaftDerivation ( elementNode ) DCNL DCSP negatives = &#91; &#93; DCNL DCSP positives = &#91; &#93; DCNL DCSP for textComplexLoop in derivation.target : DCNL DCSP DCSP textComplexLoop.reverse ( ) DCNL DCSP DCSP textComplexLoop.reverse ( ) DCNL DCSP DCSP textComplexLoop.reverse ( ) DCNL DCSP DCSP
DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read ( ) DCNL
DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement = html.html _ parser.makeelement DCNL DCSP if ( makeelement is None ) : DCNL DCSP DCSP makeelement =
DCSP options = dict ( &#91; ( k , v ) for ( k , v ) in args.items ( ) if ( not k.startswith ( &apos; _ &apos; ) ) &#93; ) DCNL DCSP if ( len ( args ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % s &apos; % args ) ) DCNL DCSP if ( len ( args ) = = 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % s &apos; % args ) ) DCNL DCSP if ( len ( args ) = = 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP argument DCSP type : DCSP % s &apos; % args ) ) DCNL DCSP if ( len ( args ) = = 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP parameters : DCSP % s &apos; % args ) ) DCNL DCSP if ( len ( args ) = = 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP parameters : DCSP % s &apos;
DCSP if ( not jobid ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP return &#91; ( &apos; % s : % s &apos; % ( username , password ) ) &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return None
DCSP if ( fig is None ) : DCNL DCSP DCSP fig = plt.gcf ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP fig = fig.add _ subplot ( 111 ) DCNL DCSP return fig
DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is None ) : DCNL DCSP DCSP version = { } DCNL DCSP if ( version is not None ) : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % (
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP return NowNode ( format _ string )
DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; key DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % key ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; key DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % key ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; key DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % key ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; key DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % key ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; key DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % key )
DCSP y = np.linspace ( 0 , 1 , 15 ) DCNL DCSP enn = EditedNearestNeighbours ( random _ state = RND _ SEED ) DCNL DCSP assert _ warns ( UserWarning , cc.fit , X , y )
DCSP return struct.unpack ( &apos; ! I &apos; , bs ) &#91; 0 &#93;
DCSP if ( not func ) : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP if ( not func ) : DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return func ( * args , * * kwargs )
DCSP try : DCNL DCSP DCSP os.makedirs ( dataset ) DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( dataset ) ) : DCNL DCSP DCSP os.makedirs ( dataset ) DCNL DCSP return dataset
DCSP raw = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP raw = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP raw = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP raw = read _ raw _ fif ( raw _ fname , preload = True ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) = = 1 ) DCNL DCSP assert ( len ( epochs ) =
DCSP return struct.unpack ( &apos; &gt; L &apos; , file _ obj.read ( count ) ) &#91; 0 &#93;
DCSP storage _ item = get _ storage _ item ( cache , path , item ) DCNL DCSP if ( not os.path.exists ( item _ path ) ) : DCNL DCSP DCSP os.makedirs ( item _ path ) DCNL DCSP return item _ item
DCSP global _ conf _ values DCNL DCSP if ( _ conf _ values is None ) : DCNL DCSP DCSP _ conf _ values = &#91; &#93; DCNL DCSP DCSP _ conf _ values = &#91; &#93; DCNL DCSP DCSP for ( key , value ) in config _ map.items ( ) : DCNL DCSP DCSP DCSP value = os.environ.get ( key , None ) DCNL DCSP DCSP DCSP if ( value is not None ) : DCNL DCSP DCSP DCSP DCSP value = getattr ( conf , key ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP value = getattr ( conf , key ) DCNL DCSP return conf
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP elif isinstance ( s , str ) : DCNL DCSP DCSP s = str ( s ) DCNL DCSP else : DCNL DCSP DCSP s = str (
DCSP return s.rjust ( width )
DCSP if force _ ascii : DCNL DCSP DCSP return WRatio ( s1 , s2 , force _ ascii = force _ ascii ) DCNL DCSP else : DCNL DCSP DCSP return WRatio ( s1 , s2 , force _ ascii = force _ ascii )
DCSP client = _ get _ conn ( key = key , keyid = keyid , profile = profile ) DCNL DCSP response = client.create _ tags ( FileSystemId = filesystemid , Tags = tags , key = key , keyid = keyid , profile = profile ) DCNL DCSP return response
DCSP return has _ flag ( &apos; flag &apos; , atom , atom , flag )
DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; rb &apos; ) , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP url = build _ url ( job _ pk , url , data ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url is None ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( url = = &apos; &apos; ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP int ( int ( round ( ( 1024 * 1024 ) ) ) ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return int ( int ( int ( round ( ( 1024 * 1024 ) ) ) ) ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP return None
DCSP return config.get _ cloud _ config _ value ( &apos; instance &apos; , options , _ _ opts _ _ )
DCSP if ( not os.path.exists ( config ) ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP os.makedirs ( config ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL DCSP session = context &#91; &apos; model &apos; &#93; DCNL
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = &#91; &#93; DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP ndim = x.shape &#91; axis &#93; DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP out = repeat ( axis , axis = axis ) DCNL DCSP else : DCNL DCSP DCSP out = repeat ( axis , axis = axis ) DCNL DCSP return out
DCSP import numpy as np DCNL DCSP import numpy as np DCNL DCSP img = np _ conv _ inp ( img _ pair ) DCNL DCSP if ( backend _ pair is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ pair DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( backend _ pair is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ pair DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( backend _ pair is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ pair DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( backend _ pair is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ pair DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( backend _ pair is None ) : DCNL DCSP DCSP raise ValueError ( &apos; input _ pair DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( backend _ pair &#91; 0 &#93; = = &apos; .gz &apos; ) : DCNL DCSP DCSP
DCSP if ( tol is None ) : DCNL DCSP DCSP tol = 0 DCNL DCSP if ( tol is None ) : DCNL DCSP DCSP tol = 0 DCNL DCSP if ( tol is None ) : DCNL DCSP DCSP tol = 0 DCNL DCSP if ( tol is None ) : DCNL DCSP DCSP tol = 0 DCNL DCSP if ( tol is None ) : DCNL DCSP DCSP tol = 0 DCNL DCSP if ( tol &lt; 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank = 0 DCNL DCSP elif ( tol = = 0 ) : DCNL DCSP DCSP rank =
DCSP if isinstance ( x , np.ndarray ) : DCNL DCSP DCSP x = np.asarray ( x ) DCNL DCSP else : DCNL DCSP DCSP x = np.asarray ( x ) DCNL DCSP return x
DCSP if ( value is None ) : DCNL DCSP DCSP value = { } DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = { } DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = { } DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = { } DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = { } DCNL DCSP if ( value is not None ) : DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP value = os.environ &#91; name &#93; DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP value = os.environ &#91; name &#93; DCNL DCSP return value
DCSP entry = ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; ) DCNL
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.delete _ vpc _ peering _ connection ( conn = conn ) DCNL DCSP DCSP return { &apos; deleted &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; deleted &apos; : False , &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP if ( not isinstance ( arg , type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP type &apos; % arg ) ) DCNL DCSP if ( not isinstance ( arg , type ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( type ( arg ) is type ( type ( arg ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( type ( arg ) is type ( type ( arg ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( type ( arg ) is type ( type ( arg ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( type ( arg ) is type ( type ( arg ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( type ( arg ) is type ( type ( arg ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if isinstance ( arg , type ) : DCNL DCSP DCSP return
DCSP y = np.linspace ( 0 , 1 , 20 ) DCNL DCSP ada = ADASYN ( random _ state = RND _ SEED ) DCNL DCSP assert _ warns ( UserWarning , sm.fit , X , y )
DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if ( UNRAR _ TOOL = = ALT _ TOOL ) : DCNL DCSP DCSP return DCNL DCSP if
DCSP return LineDerivation ( elementNode )
DCSP try : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP attrs = { u &apos;form &apos; : form , u &apos;can _ order &apos; : can _ order , u &apos;max _ num &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num , u &apos;absolute _ max &apos; : max _ num ,
DCSP INFO _ MSG ( ( &apos; onLoggerAppReady : DCSP bootstrapGroupIndex = % s , DCSP bootstrapGlobalIndex = % s &apos; % ( os.getenv ( &apos; KBE _ BOOTIDX _ GROUP &apos; ) , os.getenv ( &apos; KBE _ BOOTIDX _ GROUP &apos; ) ) ) )
DCSP session = get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP return session.query ( BrocadeNetwork ) .filter _ by ( project _ id = project _ id ) .filter _ by ( project _ id = project _ id ) .filter _ by ( project _ id = project _ id ) .all ( ) DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return None
DCSP return cls ( * * kwargs )
DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , lang ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP return path.replace ( &apos; / &apos; , &apos; / &apos; )
DCSP if ( vm is None ) : DCNL DCSP DCSP return DCNL DCSP vm _ ref = config.get _ cloud _ config _ value ( &apos; VirtualMachine &apos; , vm _ , _ _ opts _ _ , search _ global = False ) DCNL DCSP if ( vm _ ref is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( vm _ ref is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( vm _ ref is None ) : DCNL DCSP DCSP return DCNL DCSP vm _ rec.setdefault ( &apos; virtual _ port &apos; , None ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP vm _ rec.setdefault ( &apos; resident _ on &apos; , &apos; &apos; ) DCNL DCSP virtual _
DCSP suite = unittest.TestSuite ( ) DCNL DCSP for test in tests : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP os.environ &#91; &apos; DJANGO _ SETTINGS _ MODULE &apos; &#93; = os.path.join ( os.path.dirname ( _ _ file _ _ ) , TESTS _ DIR ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP return test _ tests
DCSP try : DCNL DCSP DCSP return format _ value ( val , limit = limit , level = level ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return format _ value ( val , limit = limit , level = level )
DCSP def decorator ( f ) : DCNL DCSP DCSP @ functools.wraps ( f ) DCNL DCSP DCSP def decorated _ function ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP return _ default _ formats DCNL DCSP return _ default _ formats
DCSP return ( &apos; https : / / % s / % s &apos; % ( get _ version _ version ( ) , _ version _ version ( ) ) )
DCSP cmd = &apos; { 0 } DCSP { 1 } &apos; .format ( _ get _ cmd ( ) , protocol , service _ address , scheduler ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; stderr &apos; &#93; = out &#91; &apos; stderr &apos; &#93; DCNL DCSP return ret
DCSP keywords = { } DCNL DCSP if verbose : DCNL DCSP DCSP keywords &#91; &apos; refnames &apos; &#93; = tag _ prefix DCNL DCSP if verbose : DCNL DCSP DCSP keywords &#91; &apos; refnames &apos; &#93; = tag _ prefix DCNL DCSP if verbose : DCNL DCSP DCSP keywords &#91; &apos; refnames &apos; &#93; = tag _ prefix DCNL DCSP return keywords
DCSP return _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( name , datastore , path , config )
DCSP config _ stub.data = { &apos; storage &apos; : { &apos; cache-size &apos; : 1024 } , &apos; general &apos; : { &apos; private-browsing &apos; : True } } DCNL DCSP disk _ cache = cache.DiskCache ( str ( tmpdir ) ) DCNL DCSP assert ( disk _ cache.metaData ( QUrl ( url ) ) = = QNetworkCacheMetaData ( ) )
DCSP if ( len ( text ) &lt; = len ( text ) ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( text ) &lt; 2 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return &apos; \ n &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( word , word ) ) for word in text.split ( &apos; \ n &apos; ) &#93; ) DCNL DCSP else : DCNL DCSP DCSP return &apos; DCSP &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( word , word ) ) for word in text.split ( &apos; \ n &apos; ) &#93; )
DCSP try : DCNL DCSP DCSP open ( file , &apos; w &apos; ) .close ( ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP if ( inputs is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( inputs is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( inputs is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( inputs is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( inputs is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return Rebulk ( ) .rules ( TypeProcessor )
DCSP client = storage.Client ( ) DCNL DCSP bucket = conn.get _ bucket ( bucket _ id ) DCNL DCSP if bucket : DCNL DCSP DCSP return conn.get _ bucket ( bucket _ id ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP message _ message = str ( error _ message ) DCNL DCSP message _ message = ( message _ message + message _ message ) DCNL DCSP message _ message + = ( u &apos; DCSP &apos; + message _ message ) DCNL DCSP message _ message + = ( u &apos
DCSP return IMPL.instance _ get _ floating _ address ( context , instance _ id )
DCSP if ( sock _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( sock _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( sock _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( sock _ info is None ) : DCNL DCSP DCSP return DCNL DCSP if ( not isinstance ( sock _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; mechanism DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( sock _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; mechanism DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( sock _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( sock _ info , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Token DCSP must DCSP
DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP return expr DCNL DCSP if isinstance ( expr ,
DCSP if ( not callable ( function ) ) : DCNL DCSP DCSP raise TypeError ( &apos; function DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( function is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( function is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( function is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( function is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( function is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; timeout &apos; &#93; = kwargs.pop ( &apos; timeout &apos; , None ) DCNL DCSP if ( function is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; timeout &apos; &#93; = kwargs.pop ( &apos; timeout &apos; , None ) DCNL DCSP if ( function is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; timeout &apos; &#93; = kwargs.pop ( &apos; timeout &apos; , None ) DCNL DCSP if ( function is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; timeout
DCSP try : DCNL DCSP DCSP return getattr ( obj , &apos; _ _ call _ _ &apos; , None ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return False
DCSP return ( error _ from _ error ( error ) if error else error )
DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( position
DCSP class _ path = getattr ( class _ path , &apos; _ _ class _ _ &apos; , None ) DCNL DCSP if ( class _ path is None ) : DCNL DCSP DCSP raise ImportError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( class _ path , class _ path ) ) ) DCNL DCSP return class _ path
DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP sym = rcond DCNL DCSP if ( rcond is not None ) : DCNL DCSP DCSP if ( rcond is not None ) : DCNL DCSP DCSP DCSP
DCSP fileName = fabmetheus _ interpret.getFirstTranslatorFileNameUnmodified ( fileName ) DCNL DCSP if ( fileName ! = &apos; &apos; ) : DCNL DCSP DCSP skeinforge _ craft.writeChainTextWithNounMessage ( fileName , &apos; lift &apos; )
DCSP d = defer.Deferred ( ) DCNL DCSP def d.addErrback ( f ) : DCNL DCSP DCSP d = DeferredContext ( d ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP DCSP d.addErrback ( f ) DCNL DCSP
DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP
DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) )
DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is None ) : DCNL DCSP DCSP groupname = None DCNL DCSP if ( groupname is
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP np.array ( &#91; 0 , 1 , 1 &#93; )
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( pelican.settings &#91; &apos; OUTPUT _ PATH &apos; &#93; ) : DCNL DCSP DCSP for filename in filenames : DCNL DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP if os.path.exists ( filename ) : DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP if os.path.exists ( filename ) : DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP filename = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP DCSP DCSP f.write ( filename ) DCNL DCSP DCSP
DCSP return request ( * args , * * kwargs )
DCSP if ( min _ size is None ) : DCNL DCSP DCSP min _ size = len ( l ) DCNL DCSP i = 0 DCNL DCSP for i in range ( min _ size ) : DCNL DCSP DCSP i + = 1 DCNL DCSP DCSP i + = 1 DCNL DCSP return i
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP if ( len ( metadata ) = = 1 ) : DCNL DCSP DCSP DCSP return { &apos; exists &apos; : True } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return { &apos; exists &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; deleted &apos; : False , &apos; error &apos; : _ _ utils _ _ &#91; &apos; boto3.get _ error &apos; &#93; ( e ) }
DCSP if gcodec.isProcedureDoneOrFileIsEmpty ( gcodeText , &apos; drill &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( repository = = None ) : DCNL DCSP DCSP repository = settings.getReadRepository ( CombRepository ( ) ) DCNL DCSP if ( not repository.activateFill.value ) : DCNL DCSP DCSP return gcodeText DCNL DCSP return FlowSkein ( ) .getCraftedGcode ( gcodeText , repository )
DCSP clf = GaussianNB ( priors = np.array ( &#91; 2.0 , 2.0 &#93; ) ) DCNL DCSP assert _ raises ( ValueError , clf.fit , X , y )
DCSP key = key &#91; 0 : ( -1 ) &#93; DCNL DCSP key = key &#91; 0 : ( -1 ) &#93; DCNL DCSP key = key.lower ( ) .split ( &apos; -&apos; ) &#91; ( -1 ) &#93; DCNL DCSP key = ( &apos; % s % s &apos; % ( key , key ) ) DCNL DCSP return key
DCSP conn = boto.connect _ vpc ( u &apos;the _ key &apos; , u &apos;the _ secret &apos; ) DCNL DCSP igw = conn.create _ internet _ gateway ( ) DCNL DCSP vpc = conn.create _ vpc ( VPC _ CIDR ) DCNL DCSP conn.attach _ internet _ gateway ( igw.id , vpc.id ) DCNL DCSP with assert _ raises ( EC2ResponseError ) as cm : DCNL DCSP DCSP conn.detach _ internet _ gateway ( igw.id , vpc.id ) DCNL DCSP cm.exception.code.should.equal ( u &apos;InvalidVpcID.NotFound &apos; ) DCNL DCSP cm.exception.status.should.equal ( 400 ) DCNL DCSP cm.exception.request _ id.should _ not.be.none
DCSP ret = _ _ salt _ _ &#91; &apos; junos.rpc &apos; &#93; ( cmd , dest , format , * args , * * kwargs ) DCNL DCSP return ret
DCSP return open ( results _ file , &apos; r &apos; ) .read ( )
DCSP return render _ to _ response ( &apos; stats / export _ stats &apos; , { &apos; project &apos; : project , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : subproject , &apos; subproject &apos; : project } )
DCSP if ( not node ) : DCNL DCSP DCSP return abort ( 404 ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator = Topic.query.filter _ by ( Topic.id.desc ( ) ) .order _ by ( Topic.id.desc ( ) ) .paginate ( page ) DCNL DCSP paginator.items = fill _ nodes ( paginator.items ) DCNL DCSP return render _ template (
DCSP from django.utils.html import strip _ tags DCNL DCSP return strip _ tags ( value )
DCSP try : DCNL DCSP DCSP return _ delete _ image ( image , name ) DCNL DCSP except Exception as e : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; Failed DCSP to DCSP delete DCSP image DCSP % s : DCSP % s &apos; % ( name , e ) ) )
DCSP with open ( fid , &apos; w &apos; ) as fid : DCNL DCSP DCSP f.write ( &apos; \ n &apos; .join ( data ) )
DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; , &#91; &#93; , session = PipSession ( ) ) DCNL DCSP finder = PackageFinder ( &#91; data.find _ links &#93; ,
DCSP ret = { } DCNL DCSP for line in _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) .splitlines ( ) : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos;
DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL DCSP from Bio.SeqIO.QualityIO import phred _ quality _ from _ solexa DCNL
DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP return False DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( img.ndim ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP image DCSP size &apos; ) DCNL DCSP if ( img.ndim = = 2 )
DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not badge _ template ) : DCNL DCSP DCSP return DCNL DCSP if ( not
DCSP try : DCNL DCSP DCSP import readline DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP file = open ( exeAlias , &apos; w &apos; ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP DCSP file.close ( ) DCNL DCSP except
DCSP return json.dumps ( x , ensure _ ascii = False )
DCSP if ( len ( color ) = = 2 ) : DCNL DCSP DCSP return color &#91; 1 : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP return color &#91; 3 : ( -1 ) &#93;
DCSP if ( ( kodi _ setting = = &apos; true &apos; ) and ( kodi _ setting = = &apos; true &apos; ) ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting = &apos; true &apos; DCNL DCSP elif ( kodi _ setting = = &apos; true &apos; ) : DCNL DCSP DCSP kodi _ setting
DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( not exprs ) : DCNL DCSP DCSP raise ValueError ( &apos; arguments DCSP must DCSP
DCSP insetLoops = &#91; &#93; DCNL DCSP for loop in loops : DCNL DCSP DCSP insetLoops + = getInsetLoopsFromLoop ( radius , radius ) DCNL DCSP return insetLoops
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger.setLevel ( logging.INFO ) DCNL DCSP logger.addHandler ( logging.StreamHandler ( ) ) DCNL DCSP logging.captureWarnings ( True )
DCSP return int ( struct.unpack ( &apos; &gt; H &apos; , 16 ) &#91; 0 &#93; )
DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return val
DCSP if ( not os.path.exists ( sources _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist DCSP in DCSP % s &apos; % ( target _ dir , target _ dir ) ) ) DCNL DCSP if ( not os.path.exists ( sources _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( target _ dir , target _ dir ) ) ) DCNL DCSP if ( not os.path.exists ( sources _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( target _ dir , target _ dir ) ) ) DCNL DCSP if ( not os.path.exists ( sources _ dir ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist : DCSP % s &apos; % ( target _ dir , target _ dir ) ) ) DCNL DCSP if ( not os.path.exists ( sources _ dir ) ) : DCNL DCSP DCSP
DCSP return skeinforge _ help.HelpRepository ( )
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP else : DCNL DCSP DCSP s = str ( s ) DCNL DCSP if ( cls is not None ) : DCNL DCSP DCSP if isinstance ( s , basestring ) : DCNL DCSP DCSP DCSP s = s.encode ( charset , errors ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP s = str ( s ) DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP s = s.encode ( charset , errors ) DCNL
DCSP if ( not isinstance ( key , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( path , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; key DCSP must DCSP be DCSP
DCSP try : DCNL DCSP DCSP mod = import _ module ( name ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return import _ module ( name ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP if copy _ permission _ acl : DCNL DCSP DCSP if copy _ permission _ acl : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP if copy _ permission _ acl : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP serv = _ get _ serv ( ret = None ) DCNL DCSP cur = conn.cursor ( ) DCNL DCSP sql = &apos; SELECT DCSP load DCSP FROM DCSP jids DCSP WHERE DCSP jid DCSP = DCSP % s &apos; DCNL DCSP cur.execute ( sql , ( jid , ) ) DCNL DCSP data = cur.fetchone ( ) DCNL DCSP if data : DCNL DCSP DCSP return json.loads ( data ) DCNL DCSP return None
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return True DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return True DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return True DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return True DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return True DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return DCNL DCSP if (
DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( ( not raw ) or ( not raw ) ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not raw ) : DCNL DCSP DCSP return u &apos;
DCSP return render _ to _ response ( &apos; reports / report.html &apos; , request )
DCSP if isinstance ( value , bool ) : DCNL DCSP DCSP return value DCNL DCSP elif isinstance ( value , bool ) : DCNL DCSP DCSP return value DCNL DCSP elif isinstance ( value , bool ) : DCNL DCSP DCSP return value DCNL DCSP elif isinstance ( value , bool ) : DCNL DCSP DCSP return value DCNL DCSP else : DCNL DCSP DCSP return value
DCSP if ( call is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not call ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( not
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP result = &#91; &#93; DCNL DCSP for ( i , val ) in enumerate ( outputs ) : DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is not None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( val is not None ) : DCNL DCSP DCSP DCSP
DCSP parser.skip _ past ( &apos; endcomment &apos; ) DCNL DCSP return CommentNode ( )
DCSP ( out , err ) = capfd.readouterr ( ) DCNL DCSP assert ( &apos; \ n &apos; in out ) DCNL DCSP assert ( &apos; \ n &apos; in out ) DCNL DCSP assert ( &apos; \ n &apos; in out ) DCNL DCSP assert ( &apos; \ n &apos; in out )
DCSP points = &#91; &#93; DCNL DCSP for x in y : DCNL DCSP DCSP if ( x = = x ) : DCNL DCSP DCSP DCSP y = y DCNL DCSP DCSP DCSP break DCNL DCSP return points
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s.decode ( &apos; utf-8 &apos; ) DCNL DCSP return s
DCSP vname = &apos; SOFTWARE \ \ Microsoft \ \ Windows \ \ RebootRequired &apos; DCNL DCSP value = _ _ salt _ _ &#91; &apos; reg.read _ value &apos; &#93; ( &apos; HKLM &apos; , key , vname ) DCNL DCSP try : DCNL DCSP DCSP value = int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value ) DCNL DCSP value = int ( value )
DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP scope = None DCNL DCSP if ( scope is
DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP if ( not user ) : DCNL DCSP DCSP user = get _ user _ from _ user ( user ) DCNL DCSP if ( not user ) : DCNL DCSP DCSP return DCNL DCSP
DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = None DCNL DCSP if ( path is None ) : DCNL DCSP
DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( ( not filename ) or ( not filename ) ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not filename ) : DCNL DCSP DCSP return DCNL DCSP
DCSP with open ( obj , &apos; wb &apos; ) as f : DCNL DCSP DCSP pickle.dump ( obj , f , pickle _ protocol ) DCNL DCSP return obj
DCSP if ( len ( list1 ) &lt; len ( list2 ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for ( i , n ) in enumerate ( list2 ) : DCNL DCSP DCSP for ( i , v ) in enumerate ( list2 ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP for i in range ( ( len ( a ) - 1 ) ) : DCNL DCSP DCSP DCSP DCSP for j in range ( ( len ( x ) - 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP for j in range ( ( len ( x ) - 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP DCSP if (
DCSP if ( ok is None ) : DCNL DCSP DCSP ok = False DCNL DCSP if ( ok is None ) : DCNL DCSP DCSP ok = True DCNL DCSP if ( ok is None ) : DCNL DCSP DCSP ok = False DCNL DCSP if ( ok is None ) : DCNL DCSP DCSP ok = False DCNL DCSP if ( ok is not None ) : DCNL DCSP DCSP if ( ok is not None ) : DCNL DCSP DCSP DCSP prompt = ( &apos; % s DCSP % s &apos; % ( prompt , prompt ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP prompt = ( &apos; % s DCSP % s &apos; % ( prompt , prompt ) ) DCNL DCSP if ( ok is not None ) : DCNL DCSP DCSP prompt = ( &apos; % s DCSP % s &apos; % ( prompt , prompt ) ) DCNL DCSP if ( ok is not None ) : DCNL DCSP DCSP prompt = ( &apos; % s DCSP % s &apos; % ( prompt , prompt ) ) DCNL DCSP if ( ok is not None ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP csv.Sniffer ( ) .sniff ( stream , delimiters = &apos; \ n &apos; ) DCNL DCSP DCSP return stream DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if logical _ line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP ( yield ( 0 , msg ) )
DCSP if ( not os.path.isabs ( newpath ) ) : DCNL DCSP DCSP os.mkdir ( workdir ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( workdir ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( newpath ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( newpath ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( newpath ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( newpath ) DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP os.makedirs ( newpath ) DCNL DCSP return newpath
DCSP if isinstance ( client _ id , basestring ) : DCNL DCSP DCSP client _ id = client _ id.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( client _ id , unicode ) : DCNL DCSP DCSP client _ id = client _ id DCNL DCSP else : DCNL DCSP DCSP client _ id = client _ id DCNL DCSP return client _ id
DCSP try : DCNL DCSP DCSP import matplotlib.mlab as mlab DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import matplotlib.mlab as mlab DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP import matplotlib.mlab as mlab DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return mlab.density _ from ( X )
DCSP if ( node.op = = node.inputs &#91; 0 &#93; ) : DCNL DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93;
DCSP ( a , b ) = ( a , b ) DCNL DCSP ( a , b ) = ( b , b ) DCNL DCSP return ( a , b )
DCSP if use _ sfftools : DCNL DCSP DCSP check _ sffinfo ( ) DCNL DCSP with open ( output _ fp , &apos; w &apos; ) as f : DCNL DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP f = open ( output _ fp , &apos; w &apos; ) DCNL DCSP DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP DCSP
DCSP result = &#91; &#93; DCNL DCSP for step in input _ queue : DCNL DCSP DCSP result = input _ queue.get ( ) DCNL DCSP DCSP if ( result is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result = input _ queue.get ( ) DCNL DCSP DCSP if ( result is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL DCSP DCSP result = result &#91; 0 &#93; DCNL
DCSP if ( len ( X.shape ) = = 1 ) : DCNL DCSP DCSP y = np.asarray ( X ) DCNL DCSP else : DCNL DCSP DCSP y = np.zeros ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP else : DCNL DCSP DCSP y = y &#91; : , None &#93; DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP DCSP y = y &#91; : , np.newaxis &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP DCSP y = y &#91; : , y &#93; DCNL DCSP
DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP t = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP t = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP t = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP t = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP t = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP s = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP s = &#91; t &#93; DCNL DCSP if ( not isinstance ( t , ( list , tuple ) ) ) : DCNL DCSP DCSP s = &#91; t &#93; DCNL
DCSP return build _ job _ results ( build )
DCSP if ( len ( f ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP hash &apos; % f ) ) DCNL DCSP return hashlib.md5 ( f ) .hexdigest ( )
DCSP stop = config.get ( &apos; search &apos; , False ) DCNL DCSP assert _ true ( ( len ( raw ) = = 1 ) ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len ( includes ) = = 1 ) DCNL DCSP assert ( len
DCSP out = { } DCNL DCSP for line in output.splitlines ( ) : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP
DCSP if isinstance ( x , datetime ) : DCNL DCSP DCSP return x.timestamp ( ) DCNL DCSP else : DCNL DCSP DCSP return str ( x )
DCSP sa _ session = app.model.context.current DCNL DCSP return sa _ session.query ( app.model.RepositoryReview ) .get ( app.security.decode _ id ( id _ ) )
DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema = vol.Schema ( cv.string ) DCNL DCSP schema
DCSP ( yield gen.Task ( store , store , pattern , callback ) ) DCNL DCSP callback ( )
DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( line = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP line + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP line + = 1 DCNL DCSP DCSP line + = line DCNL DCSP DCSP line + = 1 DCNL DCSP return ( line , line )
DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( date _ time is None ) : DCNL DCSP DCSP
DCSP if ( not isinstance ( s , string _ types ) ) : DCNL DCSP DCSP s = s.decode ( &apos; utf-8 &apos; ) DCNL DCSP return s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; )
DCSP return os.path.relpath ( path , start )
DCSP pkg _ list = &#91; pkg for pkg in pkg _ list if ( not is _ installed ( pkg ) ) &#93; DCNL DCSP if pkg _ list : DCNL DCSP DCSP install ( pkg _ list , update )
DCSP return ( &apos; % s . % s &apos; % ( volume , int ( volume ) ) )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ create DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ create DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ create DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ create DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP floating _ ip _ create DCSP function DCSP must DCSP be DCSP called DCSP with DCSP
DCSP return top _ contributors _ l10n ( start , end , locale , count )
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = np.dtype ( dtype ) DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP return
DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( asset _ key _ string ) DCNL DCSP course _ key = CourseKey.from _ string ( asset _ key _ string ) DCNL DCSP course = modulestore ( ) .get _
DCSP m = np.asarray ( window _ length ) DCNL DCSP if ( pos is None ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( pos = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( pos = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( pos = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( pos &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( pos &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; window DCSP length DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP
DCSP pdef = XML.SubElement ( xml _ parent , &apos; hudson.plugins.sonterBuilder &apos; ) DCNL DCSP mapping = data.get ( &apos; names &apos; , &#91; &#93; ) DCNL DCSP mapping = &#91; ( &apos; name &apos; , &apos; Name &apos; , &apos; &apos; ) &#93; DCNL DCSP helpers.convert _ mapping _ to _ xml ( xml , data , mapping , fail _ required = True ) DCNL DCSP mapping = data.get ( &apos; names &apos; , &#91; &#93; ) DCNL DCSP mapping = &#91; ( &apos; name &apos; , &apos; Name &apos; , &apos; &apos; ) , ( &apos; name &apos; , &apos; reportDir &apos; , None ) , ( &apos; plugin &apos; , &apos; reportDir &apos; , None ) , ( &apos; plugin &apos; , &apos; reportDir &apos; , None ) &#93; DCNL DCSP helpers.convert _ mapping _ to _ xml ( xml , data , mapping , fail _ required = True )
DCSP return ( _ _ virtualname _ _ if salt.utils.which ( &apos; htpasswd &apos; ) else False )
DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( master _ tree is None
DCSP conf = global _ conf.copy ( ) DCNL DCSP conf.update ( local _ conf ) DCNL DCSP def staticweb _ filter ( app ) : DCNL DCSP DCSP return StaticWeb ( app , conf ) DCNL DCSP return staticweb _ filter
DCSP if ( not isinstance ( path , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; path DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( path , str ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; path DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( params , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unsupported DCSP parameter DCSP type : DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( params , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; Unsupported DCSP parameter DCSP type : DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( params , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unsupported DCSP parameter DCSP type : DCSP % s &apos; % path ) ) DCNL DCSP if ( not isinstance ( params
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except NotImplementedError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not os.path.isdir ( path ) ) : DCNL DCSP DCSP return None DCNL
DCSP if ( method is None ) : DCNL DCSP DCSP kwds = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP kwds = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP kwds = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP kwds = { } DCNL DCSP else : DCNL DCSP DCSP kwargs = { } DCNL DCSP for ( k , v ) in enumerate ( reps ) : DCNL DCSP DCSP if ( k is not None ) : DCNL DCSP DCSP DCSP if ( k is None ) : DCNL DCSP DCSP DCSP DCSP k = k DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP k = k DCNL DCSP DCSP DCSP if ( k is not None ) : DCNL DCSP DCSP DCSP DCSP k = k DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP k = k DCNL DCSP DCSP DCSP if ( k ! = k ) : DCNL DCSP DCSP DCSP DCSP k = k DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP k = k
DCSP return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
DCSP try : DCNL DCSP DCSP node = node.parent DCNL DCSP except AttributeError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( cls is None ) : DCNL DCSP DCSP cls = JSONDecoder DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP if ( encoding is not None ) : DCNL DCSP DCSP DCSP if ( encoding is not None ) : DCNL DCSP DCSP DCSP DCSP obj &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos; &#93; = encoding DCNL DCSP if ( encoding is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; encoding &apos;
DCSP macros _ in _ macros ( source _ module , target _ module , macros , prefix , &apos; exec &apos; ) DCNL DCSP for name in names : DCNL DCSP DCSP if name.startswith ( prefix ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( source _ module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not name.startswith ( prefix ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( source _ module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( source _ module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( source _ module ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ media _ list _ player _ get _ state &apos; , None ) or _ Cfunction ( &apos; libvlc _ media _ list _ player _ get _ state &apos; , ( ( 1 , ) , ) , None , None , MediaListPlayer ) ) DCNL DCSP return f ( p _ mlp )
DCSP if ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP elif ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP elif ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP elif ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP elif ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP elif ( c = = &apos; c &apos; ) : DCNL DCSP DCSP c = r &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP c = c &#91; 0 &#93; DCNL DCSP return c
DCSP if isinstance ( x , int ) : DCNL DCSP DCSP x = np.asarray ( x ) DCNL DCSP else : DCNL DCSP DCSP x = int ( x ) DCNL DCSP return x
DCSP headers = { &apos; Authorization &apos; : &apos; Bearer DCSP { } &apos; .format ( spec ) } DCNL DCSP response = { &apos; Authorization &apos; : &apos; Bearer DCSP { } &apos; .format ( spec ) } DCNL DCSP return response
DCSP module = sys.modules &#91; package _ module _ name &#93; DCNL DCSP if ( module _ module _ name is not None ) : DCNL DCSP DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ module _ _ = module . _ _ module _ _ DCNL DCSP module . _ _ name _ _ = module . _ _ name _ _ DCNL DCSP sys.modules &#91; module _ name &#93; = module DCNL DCSP return module
DCSP if request.user.is _ authenticated ( ) : DCNL DCSP DCSP return get _ messages ( request ) DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as fd : DCNL DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP sys.exit ( 1 )
DCSP return IMPL.fixed _ ip _ get _ by _ host ( context , host )
DCSP if ( not isinstance ( X , np.ndarray ) ) : DCNL DCSP DCSP X = np.zeros ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP if ( ( not isinstance ( X , np.ndarray ) ) and ( not isinstance ( X , np.ndarray ) ) ) : DCNL DCSP DCSP X = np.zeros ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP if ( ( not isinstance ( X , np.ndarray ) ) and ( not isinstance ( X , np.ndarray ) ) ) : DCNL DCSP DCSP X = np.zeros ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP return X
DCSP options = parser.parse _ args ( ) DCNL DCSP args = parser.parse _ args ( ) DCNL DCSP args = parser.parse _ args ( ) DCNL DCSP options = parser.parse _ args ( options ) DCNL DCSP options = parser.parse _ args ( options ) DCNL DCSP options = parser.parse _ args ( options ) DCNL DCSP options = parser.parse _ args ( options ) DCNL DCSP return parser.parse ( args )
DCSP call _ command ( &apos; update _ scores &apos; , &apos; --project = project0 &apos; ) DCNL DCSP ( out , err ) = capfd.readouterr ( ) DCNL DCSP assert ( &apos; Failing DCSP duplicate &apos; in out )
DCSP if ( title is None ) : DCNL DCSP DCSP title = time.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP else : DCNL DCSP DCSP title = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos; % ( title , fmt ) ) DCNL DCSP if title : DCNL DCSP DCSP fmt = ( &apos; % s : % s &apos;
DCSP if ( not server _ map ) : DCNL DCSP DCSP return { } DCNL DCSP server _ map = { } DCNL DCSP for ( i , v ) in enumerate ( server _ map.items ( ) ) : DCNL DCSP DCSP for ( i , v ) in enumerate ( server _ map.items ( ) ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = ( -1 ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( level and ( not elem.text ) ) : DCNL DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP if ( level = = &apos; &apos; ) : DCNL DCSP DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP if ( level = = &apos; &apos; ) : DCNL DCSP DCSP DCSP elem.text = &apos; DCSP &apos; DCNL DCSP DCSP if ( level = = &apos; &apos; ) : DCNL DCSP DCSP DCSP elem.text = &apos; DCSP &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP if ( level = = &apos; &apos; ) : DCNL DCSP DCSP DCSP elem.text = &apos; \ n &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP if ( level = = &apos; &apos; ) : DCNL DCSP DCSP DCSP elem.text = ( &apos; DCSP &apos; * level ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP if ( value is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( list ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( list ) = = 1 ) : DCNL DCSP
DCSP s3.filter = ( FS ( &apos; id &apos; ) = = &apos; person &apos; ) DCNL DCSP s3.filter = ( FS ( &apos; group _ id &apos; ) = = group _ id ) DCNL DCSP s3.prep = ( lambda r : ( r.method = = &apos; group _ group &apos; ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP if ( interface is None ) : DCNL DCSP DCSP return False DCNL DCSP if interface.upper ( ) .startswith ( &apos; VL &apos; ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP count = 0 DCNL DCSP for i in range ( len ( word ) ) : DCNL DCSP DCSP count + = 1 DCNL DCSP DCSP count + = 1 DCNL DCSP return count
DCSP def do _ call ( self , method , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = dispatcher ( transport , * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return result DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP return result
DCSP return ( &apos; % s . % s &apos; % ( _ _ version _ _ , _ _ name _ _ ) )
DCSP if hasattr ( lookup _ view , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return lookup _ view . _ _ class _ _ DCNL DCSP else : DCNL DCSP DCSP return lookup _ view
DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = None DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP if ( file _ hash is None ) : DCNL DCSP DCSP file _ hash = &#91; &#93; DCNL DCSP
DCSP cart = get _ cart _ from _ request ( request ) DCNL DCSP return render _ to _ response ( &apos; actstream / actor.html &apos; , { &apos; cart _ data &apos; : cart } , context _ instance = RequestContext ( request ) )
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ video _ set _ deinterlace &apos; , None ) or _ Cfunction ( &apos; libvlc _ video _ set _ deinterlace &apos; , ( ( 1 , ) , ( 1 , ) ) , None , None , MediaPlayer , ctypes.c _ char _ p ) ) DCNL DCSP return f ( p _ mi , psz _ mode )
DCSP if ( message is None ) : DCNL DCSP DCSP message = StringIO ( ) DCNL DCSP try : DCNL DCSP DCSP return urllib2.urlopen ( message ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None
DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP return None DCNL DCSP if ( prefix = = &apos; &apos;
DCSP addListsToRepositoryByFunction ( fileNameHelp , None , repository )
DCSP return IMPL.group _ update ( context , id , name , description , is _ public )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP return call _ command ( name , * args , * * options )
DCSP comment = get _ object _ or _ 404 ( comments.get _ model ( ) , pk = comment _ id , site _ _ pk = settings.SITE _ ID ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP perform _ delete ( request , comment ) DCNL DCSP DCSP return render _ to _ response ( &apos; comments / delete.html &apos; , { &apos; comment &apos; : comment , &apos; next &apos; : next } , template.RequestContext ( request ) ) DCNL DCSP return render _ to _ response ( &apos; comments / delete.html &apos; , { &apos; comment &apos; : comment , &apos; next &apos; : next } , template.RequestContext ( request ) )
DCSP return render _ html _ html ( request , doc , doc _ html , html _ params )
DCSP return np.array ( &#91; ( x , y ) for ( x , y ) in enumerate ( dates ) &#93; )
DCSP return call _ talib _ with _ ohlc ( barDs , count , talib.CDLMORNINGSTAR , penetration )
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; ) DCNL DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; ) DCNL DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP f.write ( f.read ( ) )
DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL DCSP if ( type _ name is None ) : DCNL DCSP DCSP key _ name = { } DCNL
DCSP if ( fd = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( fd = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( fd = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( fd = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return ( -1 )
DCSP if ( get _ user _ model ( ) is not None ) : DCNL DCSP DCSP return get _ user _ model ( ) DCNL DCSP else : DCNL DCSP DCSP return get _ user _ model ( ) .get _ user _ model ( )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP Returns : \ n DCSP DCSP DCSP DCSP DCSP DCSP
DCSP return model _ query ( context , model , * args , * * kwargs )
DCSP if ( core _ order is None ) : DCNL DCSP DCSP raise ValueError ( &apos; copy DCSP order DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( G , dict ) ) : DCNL DCSP DCSP raise ValueError ( &apos; copy DCSP order DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not sparse _ order ) : DCNL DCSP DCSP raise ValueError ( &apos; copy DCSP order DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not sparse _ order ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not sparse _ order ) : DCNL DCSP DCSP raise ValueError ( &apos; copy DCSP order DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not sparse _ order ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( G , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos;
DCSP context.dispatcher.command _ list _ ok = False DCNL DCSP context.dispatcher.command _ list _ ok = False
DCSP if ( user is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not user ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( users ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; , DCSP &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( nid , k ) ) for ( k , v ) in six.iteritems ( users ) &#93; )
DCSP offset = get _ offset ( offset ) DCNL DCSP if ( offset is not None ) : DCNL DCSP DCSP offset + = offset DCNL DCSP return offset
DCSP if ( not isinstance ( object _ , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( object _ , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( object _ , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( objects , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( objects , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( objects , ( tuple , tuple ) ) ) : DCNL DCSP DCSP raise TypeError (
DCSP return ( xblock.has _ access _ key ( xblock ) is not None )
DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is None ) : DCNL DCSP DCSP classes = &#91; &#93; DCNL DCSP if ( classes is not None ) : DCNL DCSP DCSP labels = labels DCNL DCSP else : DCNL DCSP DCSP labels = labels DCNL DCSP return labels
DCSP set _ desktop _ icons ( all _ list ) DCNL DCSP set _ desktop _ icons ( all _ list ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( ) DCNL DCSP set _ desktop _ icons ( )
DCSP n = int ( n ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must
DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL DCSP context = context &#91; &apos; request &apos; &#93; DCNL
DCSP for name in filename : DCNL DCSP DCSP if filename.endswith ( name ) : DCNL DCSP DCSP DCSP return name DCNL DCSP return None
DCSP if ( not value ) : DCNL DCSP DCSP return value DCNL DCSP if ( not value ) : DCNL DCSP DCSP return value DCNL DCSP parts = value.split ( u &apos; \ n &apos; ) DCNL DCSP if ( len ( parts ) = = 1 ) : DCNL DCSP DCSP parts.append ( value ) DCNL DCSP if ( len ( parts ) = = 1 ) : DCNL DCSP DCSP parts.append ( value ) DCNL DCSP return value
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP try : DCNL DCSP DCSP return client . _ get _ index ( client ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( str ( e ) ) DCNL DCSP DCSP raise
DCSP t = Template ( &apos; \ n
DCSP if ( os.name = = &apos; posix &apos; ) : DCNL DCSP DCSP src _ dir = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; ) DCNL DCSP DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; scripts &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP os.remove ( path )
DCSP headers = { } DCNL DCSP if headers : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP return headers
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP ret = { } DCNL DCSP modules = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; lsmod &apos; ) DCNL DCSP for line in modules : DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP ret &#91; comps &#91; 0 &#93; &#93; = comps &#91; 1 &#93; DCNL DCSP return ret
DCSP if ( not container ) : DCNL DCSP DCSP return DCNL DCSP if ( not container ) : DCNL DCSP DCSP return DCNL DCSP if ( not isinstance ( container , list ) ) : DCNL DCSP DCSP container = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP if ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP elif ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP elif ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP elif ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP elif ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos; images &apos; &#93; &#91; name &#93; DCNL DCSP elif ( name = = &apos; image &apos; ) : DCNL DCSP DCSP image = container &#91; &apos;
DCSP try : DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vbd _ ref ) DCNL DCSP DCSP vdi _ ref = session.call
DCSP if ( parent _ xblock is None ) : DCNL DCSP DCSP parent _ xblock = xblock.get _ parent ( ) DCNL DCSP if ( parent _ xblock is None ) : DCNL DCSP DCSP parent _ xblock = xblock.get _ parent ( ) DCNL DCSP DCSP if ( parent _ xblock is not None ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( ) ) )
DCSP if ( not isinstance ( data , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % origin ) ) DCNL DCSP if ( not isinstance ( data , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( path , ) ) ) DCNL DCSP if ( not isinstance ( data , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % origin ) ) DCNL DCSP if ( not isinstance ( data , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( path , ) ) ) DCNL DCSP if ( not isinstance ( data , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % origin ) ) DCNL DCSP with open ( path , &apos; r &apos; ) as f
DCSP try : DCNL DCSP DCSP page = get _ messages ( name ) DCNL DCSP except AttributeError : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP messages = &#91; &#93; DCNL DCSP DCSP for line in messages : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP page = getattr ( settings , name ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP page = getattr ( settings , name ) DCNL DCSP DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP messages.extend ( get _ messages ( line ) ) DCNL DCSP return messages
DCSP return HttpResponse ( loader.render _ to _ string ( template , * * kwargs ) , * * kwargs )
DCSP _ assert _ no _ element _ by ( context , By.ID , id _ time , wait _ time )
DCSP return _ resize ( original _ size , 0 , padding = padding )
DCSP paths = &#91; &#93; DCNL DCSP for path in dir _ build _ dir : DCNL DCSP DCSP path = os.path.join ( base _ dir , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) : DCNL DCSP DCSP src _ path = None DCNL DCSP if ( src _ path is None ) :
DCSP return &apos; \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \ n \
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP lines = f.readlines ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP f.close ( )
DCSP LOG.debug ( _ ( &apos; get _ all _ vlanids ( ) DCSP called &apos; ) ) DCNL DCSP session = db.get _ session ( ) DCNL DCSP try : DCNL DCSP DCSP vlanids = session.query ( l2network _ models.VlanID ) .all ( ) DCNL DCSP DCSP return vlanids DCNL DCSP except exc.NoResultFound : DCNL DCSP DCSP return &#91; &#93;
DCSP config _ file = os.path.join ( repo _ dir , repo _ file ) DCNL DCSP if os.path.exists ( config _ file ) : DCNL DCSP DCSP return config _ file DCNL DCSP else : DCNL DCSP DCSP return None
DCSP GlobalObject ( ) .remote _ connect ( )
DCSP length = len ( text ) DCNL DCSP length = len ( length ) DCNL DCSP length = len ( length ) DCNL DCSP length = len ( length ) DCNL DCSP if ( length &lt; length ) : DCNL DCSP DCSP length = len ( length ) DCNL DCSP DCSP length = len ( length ) DCNL DCSP else : DCNL DCSP DCSP length = len ( length ) DCNL DCSP if ( length &lt; length ) : DCNL DCSP DCSP return ( length , length ) DCNL DCSP else : DCNL DCSP DCSP return ( length , length )
DCSP copyShallow = derivation.elementNode.getCopyShallow ( ) DCNL DCSP copyShallow.attributes &#91; &apos; path &apos; &#93; = &#91; Vector3 ( 0.0 , 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) , Vector3 ( 0.0 , 0.0 , 0.0 ) &#93; DCNL DCSP
DCSP order = Object.filter _ by _ request ( request , SaleOrder.objects ) DCNL DCSP return render _ to _ response ( &apos; sales / order _ edit &apos; , { &apos; order &apos; : order , &apos; order &apos; : order } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return skeinforge _ help.HelpRepository ( )
DCSP return json.loads ( body , encoding = charset , * * kwargs )
DCSP try : DCNL DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos;
DCSP if ( index _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL DCSP if ( item _ shape is None ) : DCNL DCSP DCSP item _ shape = &#91; &#93; DCNL
DCSP kstone = auth ( profile , * * connection _ args ) DCNL DCSP if ( not role _ id ) : DCNL DCSP DCSP raise CommandExecutionError ( &quot; User DCSP &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( role _ id ) ) DCNL DCSP role = kstone.roles.create ( role _ id = role _ id , name = name , profile = profile , * * connection _ args ) DCNL DCSP return role
DCSP if ( info is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( info is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( info &#91; &apos; projs &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( info &#91; &apos; projs &apos; &#93; = = info &#91; &apos; projs &apos; &#93; ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP try : DCNL DCSP DCSP return frappe.get _ doc ( tag , dt , dn , color ) DCNL DCSP except Exception as e : DCNL DCSP DCSP logger.exception ( e )
DCSP budget _ service = client.GetService ( &apos; BudgetService &apos; , version = &apos; v201609 &apos; ) DCNL DCSP budget = { &apos; operand &apos; : { &apos; microAmount &apos; : &apos; 2000000 &apos; } , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; operand &apos; : { &apos; microAmount &apos; : &apos; 2000000 &apos; } , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; operand &apos; : { &apos; microAmount &apos; : &apos; 2000000 &apos; } , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; operand &apos; : { &apos; microAmount &apos; : &apos; 2000000 &apos; } , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; operand &apos; : { &apos; microAmount &apos; : &apos; 2000000 &apos; } , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos; , &apos; deliveryMethod &apos; : &apos; STANDARD &apos;
DCSP for ( key , value ) in class _ dict.items ( ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP for ( key , value ) in class _ dict.items ( ) : DCNL DCSP DCSP DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP DCSP DCSP ( yield ( key , value ) ) DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP ( yield ( key , value ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ( yield ( key , value ) )
DCSP network = objects.subnet.Subnet ( network = network ) .filter _ by ( network _ id = network &#91; &apos; network _ address &apos; &#93; ) DCNL DCSP network = objects.subnet.Subnet ( network = network &#91; &apos; address &apos; &#93; , network = network &#91; &apos; network _ address &apos; &#93; , network = network &#91; &apos; network _ address &apos; &#93; ) DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address &apos; &#93; DCNL DCSP network &#91; &apos; address &apos; &#93; = network &#91; &apos; address
DCSP if ( not is _ sparse _ variable ( tensor _ var ) ) : DCNL DCSP DCSP if ( max _ norm is None ) : DCNL DCSP DCSP DCSP max _ norm = tf.convert _ to _ tensor ( tensor _ var ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP var _ var = tf.convert _ to _ tensor ( tensor _ var ) DCNL DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( max _ norm is None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( max _ norm is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP else :
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; disk _ name &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP
DCSP wxapp = wx.GetApp ( ) DCNL DCSP if ( wxapp is None ) : DCNL DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( wxapp is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP wxapp = wx.GetApp ( ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( wxapp is not None ) :
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP for line in f.readlines ( ) : DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL DCSP DCSP DCSP DCSP parts = line.split ( ) DCNL
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP while True : DCNL DCSP DCSP DCSP DCSP if ( arr.size = = 0 ) : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP DCSP except Exception : DCNL DCSP DCSP DCSP DCSP DCSP pass
DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) = = 2 ) DCNL DCSP assert ( len ( roidb ) =
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP res = run ( ( &apos; % ( pkg _ name ) s DCSP % ( pkg _ name ) s &apos; % locals ( ) ) ) DCNL DCSP DCSP if res.succeeded : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP a = asarray ( b ) DCNL DCSP b = asarray ( b ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; b DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( tol
DCSP if G.is _ directed ( ) : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if G.is _ directed ( ) : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP found &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP found &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP found &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP found &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP found &apos; ) DCNL DCSP edges
DCSP script.pip ( &apos; install &apos; , &apos; simple.dist = = 0.1 &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , &apos; --no-index &apos; , ( &apos; --find-links = &apos; + data.find _ links ) , expect _ error = True ) DCNL DCSP assert ( ( script.site _ packages / &apos; simple-3.0-py % s.egg-info &apos; ) % pyversion ) in result.files _ created ) DCNL DCSP assert ( ( script.site _ packages / &apos; simple-3.0-py % s.egg-info &apos; ) % pyversion ) in result.files _ created ) DCNL DCSP assert ( ( script.site _ packages / &apos; simple-3.0-py % s.egg-info &apos; ) % pyversion ) in result.files _ created )
DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( n
DCSP return datetime.date ( * time.gmtime ( ticks ) &#91; : 6 &#93; )
DCSP return IMPL.instance _ tag _ delete _ all ( context , instance _ uuid )
DCSP try : DCNL DCSP DCSP os.remove ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP @ wraps ( fn ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return fn ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP t _ image _ members.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ members.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image _ properties.c.image _ id.alter ( sqlalchemy.Integer ( ) ) DCNL DCSP t _ image
DCSP x = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP AreEqual ( int ( x ) , int ( x ) ) DCNL DCSP AreEqual ( int ( x ) , 0 ) DCNL DCSP AreEqual ( int ( x ) , 0 ) DCNL DCSP AreEqual ( int ( x ) , 0 ) DCNL DCSP AreEqual ( int ( x ) , int ( x ) ) DCNL DCSP AreEqual ( int ( x ) , int ( x ) )
DCSP try : DCNL DCSP DCSP return datetime.datetime.strptime ( date , &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) .date ( ) DCNL DCSP except ValueError : DCNL DCSP DCSP return u &apos; &apos;
DCSP if ( module _ dict is None ) : DCNL DCSP DCSP module _ dict = sys.modules &#91; module _ dict &#93; DCNL DCSP module _ dict = module _ dict.get ( &apos; module _ name &apos; , None ) DCNL DCSP if ( module _ name not in sys.modules ) : DCNL DCSP DCSP module _ dict &#91; module _ name &#93; = module _ dict DCNL DCSP return module _ dict
DCSP with cd ( &apos; / home / vagrant / repos / sympy &apos; ) : DCNL DCSP DCSP with cd ( &apos; / home / vagrant / repos / sympy &apos; ) : DCNL DCSP DCSP DCSP with cd ( &apos; / home / vagrant / repos / sympy &apos; ) : DCNL DCSP DCSP DCSP DCSP with cd ( &apos; / home / vagrant / repos / sympy &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP with cd ( &apos; / home / vagrant / repos / sympy &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP ( yield &apos; DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP ratio = ( 1.0 / 10000.0 ) DCNL DCSP ada = ADASYN ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( RuntimeError , ada.sample , X , Y )
DCSP class Meta : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP _ _ import _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP DCSP AssertUnreachable ( ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass
DCSP if ( not string ) : DCNL DCSP DCSP return string DCNL DCSP if isinstance ( string , basestring ) : DCNL DCSP DCSP string = string.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( string , string _ types ) : DCNL DCSP DCSP string = string.replace ( &apos; DCSP &apos; , &apos; DCSP &apos; ) DCNL DCSP return string
DCSP tabs = &#91; &#93; DCNL DCSP for ( key , val ) in six.iteritems ( video ) : DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item , dict ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( item ,
DCSP cmd = &apos; sysctl DCSP -n DCSP { 0 } &apos; .format ( pid ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( out &#91; &apos; retcode &apos; &#93; = = 0 )
DCSP return text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) .replace ( u &apos; \ n &apos; , u &apos; \ n &apos; )
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ( ValueError , TypeError ) : DCNL DCSP DCSP return str ( value )
DCSP headers = { &apos; Authorization &apos; : &apos; Bearer DCSP { } &apos; .format ( api _ model ) } DCNL DCSP if check _ required : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP if check _ required : DCNL DCSP DCSP headers &#91; &apos; Content-Type &apos; &#93; = &apos; application / json &apos; DCNL DCSP return payload
DCSP _ _ grab _ lock ( ) DCNL DCSP try : DCNL DCSP DCSP _ _ import _ _ ( collection.collection _ type ( ) ) DCNL DCSP except AttributeError : DCNL DCSP DCSP pass
DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = None DCNL DCSP if ( tb is None ) : DCNL DCSP DCSP tb = sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP return ( lineno , lineno , lineno )
DCSP if ( not isinstance ( fun , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP parameter DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( fun , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP parameter DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( fun , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP parameter DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( fun , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP parameter DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( fun , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP parameter DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( (
DCSP return models.RecurringRun.query _ objects ( filter _ data )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if ( name not in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP if ( name in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP if ( name in _ _ context _ _ ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP remove DCSP { 0 } &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP if ( name in _
DCSP if ( not event ) : DCNL DCSP DCSP return DCNL DCSP if ( not event ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP os.remove ( event ) DCNL DCSP except : DCNL DCSP DCSP pass
DCSP return query ( key , profile )
DCSP if no _ float16 : DCNL DCSP DCSP return _ all _ all _ dtypes ( name , no _ float16 = no _ float16 , no _ bool = no _ bool ) DCNL DCSP else : DCNL DCSP DCSP return types
DCSP mapping _ dict = { } DCNL DCSP for ( key , value ) in mapping _ data.items ( ) : DCNL DCSP DCSP mapping _ dict &#91; key &#93; = value DCNL DCSP return mapping _ data
DCSP bits = token.split _ contents ( ) &#91; 1 : &#93; DCNL DCSP if ( len ( bits ) &lt; 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( &quot; &apos; firstof &apos; DCSP statement DCSP requires DCSP at DCSP least DCSP one DCSP argument &quot; ) DCNL DCSP return FirstOfNode ( &#91; parser.compile _ filter ( bit ) for bit in bits &#93; )
DCSP scan _ info = get _ scan _ info ( scan _ id ) DCNL DCSP if ( scan _ info is None ) : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL DCSP scan _ info = get _ scan _ info ( scan _ id ) DCNL DCSP if ( scan _ info is None ) : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL DCSP scan _ info = scan _ info.w3af _ core.exception _ handler.get _ all _ exceptions ( ) DCNL DCSP if ( scan _ info is None ) : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL DCSP if ( scan _ info is None ) : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL DCSP if ( scan _ info is None ) : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL DCSP else : DCNL DCSP DCSP abort ( 404 , &apos; Scan DCSP not DCSP found &apos; ) DCNL
DCSP return func ( arg )
DCSP if ( not jid ) : DCNL DCSP DCSP return False DCNL DCSP if ( not jid ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP cur = conn.cursor ( ) DCNL DCSP DCSP cur.execute ( sql ) DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP if ( not isinstance ( typ , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; type DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( arg , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; type DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( arg , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; type DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( arg , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; type DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( arg , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; type DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( arg , str ) ) : DCNL DCSP DCSP raise TypeError ( &apos; arg DCSP must DCSP be DCSP
DCSP if ( sys.version _ info &#91; 0 &#93; = = 2 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 240 , 100 , 50 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 240 , 100 , 50 ) ) DCNL DCSP assert ( hsl _ to _ rgb ( 60 , 50 , 50 ) = = ( 0 , 255 , 255 ) )
DCSP try : DCNL DCSP DCSP import os DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.db import connection DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.db import connection DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from django.db import connection DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP connection.close ( )
DCSP global _ default _ channel DCNL DCSP if ( _ default _ channel is None ) : DCNL DCSP DCSP _ default _ channel = None DCNL DCSP if ( _ default _ channel is None ) : DCNL DCSP DCSP _ default _ channel = None DCNL DCSP return _ default _ channel
DCSP return int ( ( value * 360000 ) )
DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import inspect DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try
DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( stream is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL
DCSP if ( ( len ( seq ) = = 1 ) and ( len ( seq ) = = 1 ) ) : DCNL DCSP DCSP return seq &#91; 0 : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP return seq &#91; 0 : ( -1 ) &#93;
DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; classpath DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Path DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( path , &apos; _ _ init _ _ &apos;
DCSP if hasattr ( func , &apos; _ _ iter _ _ &apos; ) : DCNL DCSP DCSP return func ( * args , * * opts ) DCNL DCSP else : DCNL DCSP DCSP return func ( * args , * * opts )
DCSP git = subprocess.Popen ( &#91; &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git &apos; , &apos; git
DCSP if ( inline is None ) : DCNL DCSP DCSP inline = None DCNL DCSP if ( not inline ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not inline ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not inline ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not inline ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not inline ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP else : DCNL DCSP DCSP return ( &apos; http : / / % s / % s &apos; % ( data &#91; &apos; title &apos; &#93; , data &#91; &apos; title &apos; &#93; , data &#91; &apos; title &apos; &#93; ) )
DCSP if os.path.exists ( script ) : DCNL DCSP DCSP return os.access ( script , os.X _ OK ) DCNL DCSP else : DCNL DCSP DCSP return os.path.abspath ( script )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP for template _ name in template _ name _ list : DCNL DCSP DCSP if ( name not in template _ name _ list ) : DCNL DCSP DCSP DCSP raise TemplateDoesNotExist ( &apos; , DCSP &apos; .join ( template _ name _ list ) ) DCNL DCSP return template _ name _ list
DCSP return _ update _ data _ for _ api _ data ( entity _ id , public _ key , expires _ at , expires _ at )
DCSP with open ( fname _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP f.close ( )
DCSP service _ instance = salt.utils.vmware.get _ service _ instance ( host = host , username = username , password = password , protocol = protocol , port = port ) DCNL DCSP return salt.utils.vmware.list _ hosts ( service _ instance )
DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( not isinstance ( env , dict ) ) : DCNL DCSP DCSP options = os.environ DCNL DCSP
DCSP server = WSGIServer ( host , port ) DCNL DCSP if ( server is not None ) : DCNL DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( func . _ _ name _ _ , func . _ _ name _ _ , func . _ _ name _ _ ) ) DCNL DCSP else : DCNL DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( func . _ _ name _ _ , func . _ _ name _ _ ) ) DCNL DCSP return server
DCSP form = form _ class ( request , * args , * * kwargs ) DCNL DCSP if form.is _ valid ( ) : DCNL DCSP DCSP form = form.save ( ) DCNL DCSP DCSP return view _ view _ view ( request , form , * args , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return view _ view _ view ( request , form , * args , * * kwargs )
DCSP try : DCNL DCSP DCSP return value.encode ( &apos; utf-8 &apos; ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return value
DCSP if ( not isinstance ( field , ( list , tuple ) ) ) : DCNL DCSP DCSP value = ( value , ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = ( value , ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP
DCSP name = name.strip ( ) DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP DCSP name = &apos; .exe &apos; DCNL DCSP if ( name = = &apos; .exe &apos; ) : DCNL DCSP
DCSP from pylint.lint import Run DCNL DCSP Run ( )
DCSP if isinstance ( caption , text _ type ) : DCNL DCSP DCSP caption = ( u &apos; % s : % s &apos; % ( caption , caption ) ) DCNL DCSP else : DCNL DCSP DCSP caption = ( u &apos; % s : % s &apos; % ( caption , caption ) ) DCNL DCSP return caption
DCSP if sys.platform.startswith ( &apos; win &apos; ) : DCNL DCSP DCSP return sheet DCNL DCSP else : DCNL DCSP DCSP return sheets.get ( ) &#91; 0 &#93;
DCSP return ( allclose ( x , y , rtol = rtol , atol = atol )
DCSP try : DCNL DCSP DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos;
DCSP try : DCNL DCSP DCSP boto.emr.emrobject.ClusterTimeline = _ PatchedClusterTimeline DCNL DCSP DCSP return emr _ conn.describe _ steps ( emr _ conn , * args , * * kwargs ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Error DCSP calling DCSP error : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP return None
DCSP return ( hasattr ( bound _ field , &apos; errors &apos; ) and hasattr ( bound _ field , &apos; errors &apos; ) )
DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n &apos; , &apos; \ n &apos; ) DCNL DCSP text = text.replace ( &apos; \ n
DCSP ( yield successResponse ( &apos; &apos; ) ) DCNL DCSP ( yield successResponse ( &apos; &apos; ) ) DCNL DCSP ( yield successResponse ( &apos; &apos; ) ) DCNL DCSP for i in range ( len ( msgs ) ) : DCNL DCSP DCSP ( yield successResponse ( i ) ) DCNL DCSP for i in range ( len ( msgs ) ) : DCNL DCSP DCSP ( yield successResponse ( i ) ) DCNL DCSP ( yield successResponse ( &apos; &apos; ) )
DCSP if ( query is None ) : DCNL DCSP DCSP query = &#91; &#93; DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP limit = len ( tracks ) DCNL DCSP if ( limit
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course.id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course.id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _ item ( course _
DCSP if ( isinstance ( node.op , T.Elemwise ) and ( node.inputs &#91; 0 &#93; .owner is not None ) ) : DCNL DCSP DCSP if ( node.inputs &#91; 0 &#93; .owner and isinstance ( node.inputs &#91; 0 &#93; .owner.op , T.Elemwise ) ) : DCNL DCSP DCSP DCSP return &#91; node.inputs &#91; 0 &#93; &#93;
DCSP if strict : DCNL DCSP DCSP if strict : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( attr , _ _ class _ _ . _ _ name _ _ ) ) ) DCNL DCSP DCSP if strict : DCNL DCSP DCSP DCSP if strict : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( attr , attr ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if strict : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( attr , attr ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if strict : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % s &apos; % ( attr , attr ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP return s.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; )
DCSP return dict ( ( ( v , v ) for ( k , v ) in fieldvalues ( ) if ( v is not None ) ) )
DCSP with open ( &apos; rb &apos; , &apos; r &apos; ) as f : DCNL DCSP DCSP for line in f : DCNL DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( line.split ( ) ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( len ( line ) &gt; 1 ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP for line in f : DCNL DCSP DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP if ( net _ db is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if ( net _ db is None ) : DCNL DCSP DCSP return DCNL DCSP if (
DCSP f = open ( label _ epochs , &apos; rb &apos; ) DCNL DCSP data = f.read ( ) DCNL DCSP f.close ( ) DCNL DCSP f = open ( data _ file , &apos; w &apos; ) DCNL DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP f.close ( ) DCNL DCSP f.close ( ) DCNL DCSP f.close ( )
DCSP bigip _ session = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( profile ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.get ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / node / { name } &apos; .format ( name = name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP return _ load _ error _ error ( hostname , e ) DCNL DCSP return _ load _ response ( response )
DCSP if ( not hasattr ( cls , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP cls = cls . _ _ class _ _ . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP model = cls . _ _ class _ _ . _ _ name _ _ DCNL DCSP return cls . _ _ dict _ _ &#91; cls . _ _ name _ _ &#93;
DCSP return ( int ( attr ) &lt; = 65535 )
DCSP siteconfig = SiteConfiguration.objects.get _ current ( ) DCNL DCSP if ( flag is not None ) : DCNL DCSP DCSP flag _ mode = flag DCNL DCSP DCSP if ( flag _ mode ! = flag ) : DCNL DCSP DCSP DCSP flag _ mode = flag DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP flag _ mode = flag _ mode DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP flag _ mode = flag _ mode DCNL DCSP DCSP if ( flag _ mode ! = flag _ mode ) : DCNL DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP if ( flag _ mode ! = flag _ mode ) : DCNL DCSP DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP flag _ mode = True DCNL DCSP DCSP DCSP else :
DCSP if ( msg _ type is None ) : DCNL DCSP DCSP raise TypeError ( msg _ type ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg _ type ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg _ type ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( not isinstance ( func , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL
DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( params is None ) :
DCSP if ( len ( strings ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( strings ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( strings ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( strings ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( m = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP
DCSP if ( query is None ) : DCNL DCSP DCSP query = query.partition ( &apos; / &apos; ) DCNL DCSP if ( query is None ) : DCNL DCSP DCSP query = query.filter ( ( cls.interval = = &apos; q &apos; ) ) DCNL DCSP if ( query is None ) : DCNL DCSP DCSP query = query.filter ( ( cls.interval = = &apos; q &apos; ) ) DCNL DCSP if ( query is None ) : DCNL DCSP DCSP query = query.filter ( ( cls.interval = = &apos; q &apos; ) ) DCNL DCSP DCSP query = query.filter _ by ( name = query ) DCNL DCSP return query
DCSP w = Line ( ) DCNL DCSP line.add ( &apos; _ &apos; , &#91; 1 , 2 , 3 &#93; ) DCNL DCSP q = line.render _ pyquery ( ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL DCSP assert ( len ( w ) = = 2 ) DCNL
DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = Vector3 ( ) DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix = = &apos; &apos; ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP
DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP load DCSP { 1 } &apos; .format ( jid , _ _ salt _ _ ) ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP return ret
DCSP match = time _ re.match ( value ) DCNL DCSP if match : DCNL DCSP DCSP kw = match.groupdict ( ) DCNL DCSP DCSP kw = match.groupdict ( ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = kw &#91; &apos; microsecond &apos; &#93; DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP DCSP kw &#91; &apos; microsecond &apos; &#93; = int ( kw &#91; &apos; microsecond &apos; &#93; ) DCNL DCSP
DCSP return &apos; .&apos;.join ( tup )
DCSP if ( not isinstance ( value , expected _ type ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP must DCSP be DCSP a DCSP valid DCSP type &apos; % expected _ type ) ) DCNL DCSP return value
DCSP lines = data.split ( &apos; \ n &apos; ) DCNL DCSP if ( len ( lines ) = = 1 ) : DCNL DCSP DCSP data = data &#91; : ( -1 ) &#93; DCNL DCSP return data
DCSP A = asarray ( A ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( not overwrite ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP
DCSP if ( token is None ) : DCNL DCSP DCSP token = client _ list DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( not token ) : DCNL DCSP DCSP return None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP token = None DCNL DCSP if ( token is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( token is None ) : DCNL
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL DCSP DCSP DCSP DCSP DCSP with caplog.at _ level ( logging.ERROR ) : DCNL
DCSP if ( offset is None ) : DCNL DCSP DCSP offset = pyname.get _ object ( ) DCNL DCSP if ( offset is None ) : DCNL DCSP DCSP offset = pyname.get _ object ( ) DCNL DCSP if ( offset is None ) : DCNL DCSP DCSP offset = pyname.get _ object ( ) DCNL DCSP if ( offset is None ) : DCNL DCSP DCSP offset = None DCNL DCSP if ( offset is not None ) : DCNL DCSP DCSP pyname = fixer.pyname _ at ( offset ) DCNL DCSP if ( offset is None ) : DCNL DCSP DCSP offset = None DCNL DCSP if ( offset is not None ) : DCNL DCSP DCSP pyname = fixer.pyname _ at ( offset ) DCNL DCSP if ( offset is None ) : DCNL DCSP DCSP offset = None DCNL DCSP if ( offset is not None ) : DCNL DCSP DCSP pyname = fixer.pyname _ at ( offset ) DCNL DCSP DCSP if ( pyname is None ) : DCNL DCSP DCSP DCSP offset = None DCNL DCSP DCSP if ( offset is not None ) : DCNL DCSP DCSP DCSP pyname
DCSP try : DCNL DCSP DCSP int ( x ) DCNL DCSP DCSP return True DCNL DCSP except : DCNL DCSP DCSP return False
DCSP if ( HAS _ NAPALM and ( &apos; proxy &apos; in _ _ opts _ _ ) ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP else : DCNL DCSP DCSP return ( False , &apos; The DCSP proxy DCSP execution DCSP module DCSP cannot DCSP be DCSP loaded : DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP NAPALM DCSP or DCSP proxy DCSP could DCSP not DCSP be DCSP loaded . &apos; )
DCSP parser = Parser ( ) DCNL DCSP parser.feed ( fileobj ) DCNL DCSP for line in fileobj : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line.startswith ( &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield line ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass
DCSP subs _ dict = { } DCNL DCSP for ( key , value ) in six.iteritems ( score ) : DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; id &apos; not in score ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in
DCSP if ( allowed _ keys is None ) : DCNL DCSP DCSP allowed _ keys = &#91; &#93; DCNL DCSP if ( allowed _ keys is None ) : DCNL DCSP DCSP allowed _ keys = &#91; &#93; DCNL DCSP for ( k , v ) in mapper _ spec.iteritems ( ) : DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k not in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k in allowed _ keys ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP return _ _ context _ _ &#91; &apos; fileclient &apos; &#93; .file _ list ( load )
DCSP locations = &#91; &#93; DCNL DCSP for domain in domains : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP entry = config &#91; key &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP for key in cert : DCNL DCSP DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( key not in domains ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP
DCSP for ( i , i ) in enumerate ( block ) : DCNL DCSP DCSP if ( i = = &apos; \ n &apos; ) : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return block
DCSP return LineDerivation ( elementNode )
DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP assert ( len ( color ) = = 2 ) DCNL DCSP return color
DCSP return isinstance ( exp , SharedVariable )
DCSP def decorator ( handler ) : DCNL DCSP DCSP @ functools.wraps ( handler ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP if debug _ level : DCNL DCSP DCSP DCSP DCSP return handler ( app , * args , * * kwargs ) DCNL DCSP DCSP DCSP return handler ( request , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP if ( not s ) : DCNL DCSP DCSP return 0 DCNL DCSP result = 0 DCNL DCSP for i in xrange ( 0 , ( len ( s ) - 1 ) ) : DCNL DCSP DCSP result = 0L DCNL DCSP DCSP for i in range ( 0 , ( len ( s ) - 1 ) ) : DCNL DCSP DCSP DCSP result + = ( number &#91; ( i + 1 ) &#93; + ord ( c &#91; ( i + 1 ) &#93; ) ) DCNL DCSP DCSP DCSP result + = 1 DCNL DCSP return result
DCSP canvas = FigureCanvasGTK3Agg ( figure ) DCNL DCSP manager = FigureManagerGTK3Agg ( canvas , num ) DCNL DCSP return manager
DCSP if ( bbox is None ) : DCNL DCSP DCSP return wx.BitmapFromBufferRGBA ( int ( agg.width ) , int ( agg.height ) , agg.buffer _ rgba ( ) ) DCNL DCSP else : DCNL DCSP DCSP return wx.ImageFromBitmap ( _ WX28 _ clipped _ agg _ as _ bitmap ( agg , bbox ) )
DCSP if ( backend is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( method is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( key is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; key &apos; &#93; = key DCNL DCSP if (
DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer _ id ) DCNL DCSP indexer _ id = int ( indexer
DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError ( &apos; &#124; must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError ( &apos; &#124; failed DCSP expects DCSP a DCSP string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError ( &apos; &#124; failed DCSP expects DCSP a DCSP string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError ( &apos; &#124; failed DCSP expects DCSP a DCSP string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError ( &apos; &#124; failed DCSP expects DCSP a DCSP string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( length , basestring ) ) : DCNL DCSP DCSP raise errors.AnsibleFilterError (
DCSP if ( env is None ) : DCNL DCSP DCSP runas = salt.utils.get _ user ( ) DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &#91; &apos; -c &apos; , name &#93; , cwd = cwd , bin _ env = bin _ env , log _ shell = use _ vt , python _ shell = use _ vt ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; { 0 } DCSP does DCSP not DCSP exist &apos; .format ( name ) ) DCNL DCSP return ret &#91; &apos; stdout &apos; &#93;
DCSP try : DCNL DCSP DCSP frappe.only _ for ( u &apos;System DCSP Manager &apos; ) DCNL DCSP except Exception : DCNL DCSP DCSP abort ( 404 )
DCSP settings = getattr ( options , &apos; settings &apos; , None ) DCNL DCSP if ( settings is None ) : DCNL DCSP DCSP settings = { &apos; settings &apos; : settings , &apos; settings &apos; : settings } DCNL DCSP settings = settings ( settings = settings , settings = settings , settings = settings ) DCNL DCSP if ( settings is None ) : DCNL DCSP DCSP settings = { &apos; settings &apos; : settings , &apos; settings &apos; : settings } DCNL DCSP settings = settings ( settings = settings , settings = settings , settings = settings ) DCNL DCSP if ( settings is None ) : DCNL DCSP DCSP settings = { &apos; settings &apos; : settings } DCNL DCSP if ( not settings ) : DCNL DCSP DCSP settings = { &apos; settings &apos; : settings , &apos; settings &apos; : settings } DCNL DCSP if ( options.get ( &apos; settings &apos; , None ) is not None ) : DCNL DCSP DCSP settings &#91; &apos; settings &apos; &#93; = settings DCNL DCSP settings = settings ( settings = settings , settings = settings , settings = settings ) DCNL DCSP if (
DCSP if hasattr ( obj , &apos; _ _ getitem _ _ &apos; ) : DCNL DCSP DCSP return obj . _ _ getitem _ _ ( indexer ) DCNL DCSP else : DCNL DCSP DCSP return obj . _ _ getitem _ _ ( indexer )
DCSP free _ memory _ size = memory _ memory _ memory _ size ( devmem ) DCNL DCSP free _ memory _ size = int ( ptr.size &#91; 0 &#93; ) DCNL DCSP free _ memory _ size = int ( ( free _ memory _ size - free _ memory _ size ) ) DCNL DCSP free _ memory _ size = int ( free _ memory _ size ) DCNL DCSP return ( free _ memory _ size , free _ memory _ size , free _ memory _ size , free _ memory _ size , free _ memory _ size , free _ memory _ size , free _ memory _ size )
DCSP args = token.contents.split ( ) DCNL DCSP if ( len ( args ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP nodelist = parser.parse ( ( &apos; endfilter &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP return FilterNode ( nodelist , nodelist )
DCSP if ( app _ id is None ) : DCNL DCSP DCSP app _ id = get _ app _ id ( ) DCNL DCSP if ( not app _ id ) : DCNL DCSP DCSP app _ id = app _ id DCNL DCSP if ( max _ rows is None ) : DCNL DCSP DCSP max _ rows = max _ rows DCNL DCSP if ( max _ rows is None ) : DCNL DCSP DCSP max _ rows = max _ rows DCNL DCSP if ( max _ rows is None ) : DCNL DCSP DCSP max _ rows = max _ rows DCNL DCSP return queues
DCSP ( scheme , netloc , path , query , fragment ) = urlparse.urlsplit ( url ) DCNL DCSP url = urlunparse ( ( scheme , netloc , path , query , fragment ) ) DCNL DCSP return urlparse.urlunsplit ( ( scheme , netloc , path , query , fragment ) )
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile , vpc _ id = region _ id , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP return { &apos; exists &apos; : True } DCNL DCSP except BotoServerError as e : DCNL DCSP DCSP return { &apos; error &apos; : salt.utils.boto.get _ error ( e ) }
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP sitepackages = len ( domain.split ( &apos; .&apos; ) ) DCNL DCSP if ( len ( parts ) = = 1 ) : DCNL DCSP DCSP return &#91; entry &#91; : ( -1 ) &#93; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; entry &#91; : ( -1 ) &#93; &#93;
DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s &apos; % ( start , end , end ) )
DCSP dirs = &#91; &#93; DCNL DCSP for ( root , dirs , files ) in os.walk ( start _ dir ) : DCNL DCSP DCSP for ( root , dirs , files ) in os.walk ( root _ dir ) : DCNL DCSP DCSP DCSP for ( root , dirs , files ) in os.walk ( root _ dir ) : DCNL DCSP DCSP DCSP DCSP for ( root , dirs , files ) in os.walk ( root _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP for ( root , dirs , files ) in os.walk ( root ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for ( root , dirs , files ) in os.walk ( root ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for ( root , dirs , files ) in os.walk ( root ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP ( yield os.path.join ( root , filename ) ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP files.append ( os.path.join ( root , root ) ) DCNL DCSP return
DCSP options = { } DCNL DCSP for ( key , value ) in six.iteritems ( options ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP value = getattr ( value , option ) DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP value = getattr ( value , option ) DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP value = getattr ( value , option ) DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP value = getattr ( value , option ) DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if (
DCSP def decorator ( f ) : DCNL DCSP DCSP @ wraps ( f ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( not isinstance ( v , ( tuple , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP onestop &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd ) )
DCSP try : DCNL DCSP DCSP frappe.init ( site = site ) DCNL DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP for app in context.sites : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP frappe.init ( site = site ) DCNL DCSP DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP DCSP sync ( ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP click.echo ( ( &apos; % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP click.echo ( ( &apos; % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP frappe.destroy ( )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP warnings.simplefilter ( &apos; ignore &apos; ) DCNL DCSP DCSP
DCSP f = open ( filediff , &apos; w &apos; ) DCNL DCSP try : DCNL DCSP DCSP f = open ( filediff , &apos; w &apos; ) DCNL DCSP except IOError as e : DCNL DCSP DCSP if ( e.errno = = errno.EACCES ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = open ( f , &apos; w &apos; ) DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( None , None ) DCNL DCSP return None
DCSP def prep ( r ) : DCNL DCSP DCSP if r.interactive : DCNL DCSP DCSP DCSP if r.interactive : DCNL DCSP DCSP DCSP DCSP if r.interactive : DCNL DCSP DCSP DCSP DCSP DCSP if ( r.component is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP return False DCNL DCSP s3.prep = prep DCNL DCSP return s3 _ rest _ controller ( )
DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( codon _ table is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return (
DCSP return check _ checks ( node _ address , timeout = timeout )
DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch _ size = batch _ size DCNL DCSP batch
DCSP if hasattr ( d , &apos; _ _ doc _ _ &apos; ) : DCNL DCSP DCSP if ( not isinstance ( d , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP d = &#91; &#93; DCNL DCSP DCSP for ( k , v ) in d.items ( ) : DCNL DCSP DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( d , basestring ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( not ignore _ links ) and ( not ignore _ links ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( not ignore _ links ) and ( not ignore _ links ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( not ignore _ links ) and ( not ignore _ links ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( not ignore _ links ) and ( not ignore _ links ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( not isinstance ( offset , bytes ) ) : DCNL DCSP DCSP raise TypeError ( &apos; offset DCSP must DCSP be DCSP a DCSP bytes &apos; ) DCNL DCSP if ( not isinstance ( offset , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; offset DCSP must DCSP be DCSP a DCSP bytes &apos; ) DCNL DCSP if ( not isinstance ( offset , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; offset DCSP must DCSP be DCSP a DCSP bytes &apos; ) DCNL DCSP if ( not isinstance ( offset , ( int , long ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; offset DCSP must DCSP be DCSP a DCSP bytes &apos; ) DCNL DCSP if ( length &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP bytes &apos; % ( offset , ) ) ) DCNL DCSP if ( length &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; must DCSP be DCSP a DCSP byte DCSP bytes &apos; ) DCNL DCSP if
DCSP if ( title is None ) : DCNL DCSP DCSP term = &#91; &#93; DCNL DCSP if ( title is None ) : DCNL DCSP DCSP term = &#91; &#93; DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = ( title + &apos; \ n &apos; ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = ( &apos; % s DCSP % s DCSP % s &apos; % ( title , title , term ) ) DCNL DCSP else : DCNL DCSP DCSP msg = ( &apos; % s DCSP % s DCSP % s DCSP % s &apos; % ( title , title , term ) ) DCNL DCSP if title : DCNL DCSP DCSP msg = ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s &apos; % ( title , term , term ) ) DCNL DCSP else : DCNL DCSP DCSP msg = ( &apos; % s DCSP % s DCSP % s DCSP % s &apos; % ( title , title , term ) ) DCNL DCSP if title : DCNL DCSP DCSP msg + = ( &apos;
DCSP cmd = &apos; systemsetup DCSP -setnetwork DCSP { 0 } &apos; .format ( enable ) DCNL DCSP salt.utils.mac _ utils.execute _ return _ success ( cmd ) DCNL DCSP return salt.utils.mac _ utils.parse _ return ( ret )
DCSP try : DCNL DCSP DCSP with open ( stream , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP except IOError : DCNL DCSP DCSP raise ValueError ( ( &apos; Could DCSP not DCSP read DCSP % r &apos; % stream ) ) DCNL DCSP with open ( stream , &apos; rb &apos; ) as f : DCNL DCSP DCSP data = f.read ( ) DCNL DCSP return data
DCSP gs _ deleter.Deleter ( )
DCSP if ( derivation = = None ) : DCNL DCSP DCSP derivation = ShaftDerivation ( elementNode ) DCNL DCSP negatives = &#91; &#93; DCNL DCSP teardrop.addNegativesByRadius ( elementNode , negatives , derivation.radius , derivation.start ) DCNL DCSP return lineation.getGeometryOutputByLoop ( elementNode , lineation.SideLoop ( shaftPath ) )
DCSP if ( not os.path.exists ( work _ directory ) ) : DCNL DCSP DCSP os.mkdir ( work _ directory ) DCNL DCSP filepath = os.path.join ( work _ directory , filename ) DCNL DCSP filepath = os.path.join ( work _ directory , filename ) DCNL DCSP if ( not os.path.exists ( filepath ) ) : DCNL DCSP DCSP os.makedirs ( filepath ) DCNL DCSP return filepath
DCSP return _ _ salt _ _ &#91; &apos; probes.config _ probes &apos; &#93; ( probes )
DCSP defaults = { } DCNL DCSP for section in section : DCNL DCSP DCSP if ( section not in section ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP section = section &#91; section &#93; DCNL DCSP DCSP if ( section not in section ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP section = section &#91; section &#93; DCNL DCSP DCSP if ( section in section ) : DCNL DCSP DCSP DCSP section &#91; section &#93; = section DCNL DCSP return sections
DCSP tags _ list = list ( list ( list _ of _ tags ) ) DCNL DCSP tags = list ( list ( list ( list _ of _ tags ) ) ) DCNL DCSP return tags
DCSP if ( len ( searchindex ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; No DCSP tags DCSP found &apos; ) DCNL DCSP if ( len ( filenames ) = = 0 ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( len ( filenames ) = = 0 ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP if ( len ( split ) = = 1 ) : DCNL DCSP DCSP return ( filenames &#91; 0 &#93; , filenames &#91; 0 &#93; ) DCNL DCSP if ( len ( filenames ) = = 1 ) : DCNL DCSP DCSP return ( filenames &#91; 0 &#93; , filenames &#91; 1 &#93; ) DCNL DCSP if ( len ( filenames ) = = 1 ) : DCNL DCSP DCSP return ( filenames &#91; 0 &#93; , filenames &#91; 1 &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( filenames &#91; 0 &#93; , filenames &#91; 1 &#93; )
DCSP if ( default _ value is None ) : DCNL DCSP DCSP default _ value = default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP default _ value = default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP default _ value = default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP default _ value = default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP return default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP return default _ value DCNL DCSP if ( default _ value is None ) : DCNL DCSP DCSP return default _ value DCNL DCSP else : DCNL DCSP DCSP return default _ value
DCSP if ( not isinstance ( stats _ ds , dict ) ) : DCNL DCSP DCSP return { } DCNL DCSP try : DCNL DCSP DCSP return { } DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( ( &apos; Failed DCSP to DCSP remove DCSP the DCSP image DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP return False
DCSP return run _ cmd ( cmd , * * kwargs )
DCSP items = Object.filter _ by _ request ( request , Message.objects.filter ( query ) ) DCNL DCSP filters = FilterForm ( request.user.profile , &apos; &apos; , request.GET ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; infrastructure / ajax _ object _ lookup &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) : DCNL DCSP DCSP where = &#91; &#93; DCNL DCSP if ( where is None ) :
DCSP return context &#91; &apos; context &apos; &#93; .get ( &apos; context &apos; , None )
DCSP output = pub.publish ( enable _ exit _ status = enable _ exit _ status , enable _ exit _ status = enable _ exit _ status , enable _ exit _ status = enable _ exit _ status , enable _ exit _ status = enable _ exit _ status , enable _ exit _ status = enable _ exit _ status ) DCNL DCSP return output
DCSP client = _ client ( user = user , password = password , host = host , port = port ) DCNL DCSP client.remove _ database ( name ) DCNL DCSP return True
DCSP return ( &apos; % s : % s &apos; % ( url , int ( url ) ) )
DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Path DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP directory &apos; % path ) ) DCNL DCSP if ( not os.path.isabs ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP
DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = os.getcwd ( ) DCNL DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = join ( base _ dir , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = join ( base _ dir , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = join ( base _ dir , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = join ( base _ dir , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( not isinstance ( py _ dir , basestring ) ) : DCNL DCSP DCSP base _ dir = join ( base _ dir ,
DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( timestamp
DCSP return IMPL.volume _ exists ( name , volume _ size , sparse = True , create _ parent = create _ parent , properties = properties , filter _ from = preserve _ from )
DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( scope is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if
DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not messages ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not
DCSP ret = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( config ) DCNL DCSP if ( not ret ) : DCNL DCSP DCSP return { } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP return ret
DCSP return loadopt.set _ relationship _ strategy ( attr , { &apos; lazy &apos; : &apos; no &apos; } )
DCSP GlobalObject ( ) .masterremote. _ service.mapTarget ( target )
DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = None DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = None DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = None DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = None DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = get _ random _ data ( ) DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = get _ random _ data ( ) DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = get _ random _ data ( ) DCNL DCSP if ( data _ home is None ) : DCNL DCSP DCSP data _ home = get _ random _ data ( ) DCNL DCSP if ( not data _ home ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP
DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; { 0 } DCSP master DCSP { 1 } &apos; .format ( config , config ) , python _ shell = False ) DCNL DCSP _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ret
DCSP _ test _ eog _ events ( raw _ events , preload = True ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( raw _ events ) = = 2 ) ) DCNL DCSP assert _
DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = sickbeard.NAMING _ PATTERN DCNL DCSP logger.log ( ( u &apos;Checking DCSP whether DCSP the DCSP pattern DCSP &apos; + pattern ) , logger.DEBUG ) DCNL DCSP valid = validate _ name ( pattern , multi , anime _ type ) DCNL DCSP return valid
DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( r &gt;
DCSP valid _ data = &#91; &#93; DCNL DCSP for test _ data in find _ test _ data _ str ( ) : DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( &apos; test &apos; in test _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if (
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP rules = shlex.split ( rule ) DCNL DCSP rules.pop ( 0 ) DCNL DCSP parser.add _ argument ( &apos; --name &apos; , action = &apos; store &apos; , action = &apos; store &apos; ) DCNL DCSP args = clean _ args ( vars ( parser.parse _ args ( rules ) ) ) DCNL DCSP parser = None DCNL DCSP return args
DCSP if isinstance ( field _ name , six.string _ types ) : DCNL DCSP DCSP field _ name = field _ name DCNL DCSP else : DCNL DCSP DCSP field _ name = field _ name DCNL DCSP return ( getattr ( field _ name , field _ name ) is not None )
DCSP delta = ( epoch + epoch ) DCNL DCSP return ( epoch + epoch )
DCSP pecl _ cmd = &apos; { 0 } DCSP uninstall DCSP { 1 } &apos; .format ( _ ipset _ cmd ( ) , pecls ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( not user _ course _ key ) : DCNL DCSP DCSP return DCNL DCSP course _ key = CourseKey.from _ string ( course _ course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL
DCSP if ( nlags = = 0 ) : DCNL DCSP DCSP nlags = ( 1 / ( nlags + 1 ) ) DCNL DCSP else : DCNL DCSP DCSP nlags = ( nlags + 1 ) DCNL DCSP weights = np.zeros ( ( nlags + 1 ) ) DCNL DCSP weights &#91; ( nlags + 1 ) : &#93; = weights DCNL DCSP weights = weights &#91; ( nlags + 1 ) : &#93; DCNL DCSP weights = weights &#91; ( nlags + 1 ) : &#93; DCNL DCSP weights = weights &#91; ( nlags + 1 ) : &#93; DCNL DCSP return weights
DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = statement.model. _ _ class _ _ DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = statement.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = statement.encode ( &apos; utf-8 &apos; ) DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL DCSP DCSP dialect = &apos; &apos; DCNL DCSP if ( dialect is None ) : DCNL
DCSP ret = { } DCNL DCSP for mod in _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( &apos; { 0 } DCSP --version &apos; .format ( mod ) ) .splitlines ( ) : DCNL DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP if ( len ( comps ) &gt; 1 ) : DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = line.split ( ) DCNL DCSP DCSP DCSP comps = comps
DCSP if ( not vm _ spec ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( vm _ spec is None )
DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP client.click ( jquery = &apos; \ n
DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ salt _ _ &#91; &apos; cp.cache _ file &apos; &#93; ( * args , * * kwargs ) DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile = _ _ salt _ _ &#91; &apos; cp.cache _ file &apos; &#93; ( * args , * * kwargs ) DCNL DCSP if ( logfile is None ) : DCNL DCSP DCSP logfile
DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP RemoteOrganization = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _ model ( u &apos;oauth &apos; , u &apos;RemoteOrganization &apos; ) DCNL DCSP SocialAccount = apps.get _
DCSP state = salt.utils.mac _ utils.validate _ enabled ( enabled ) DCNL DCSP cmd = &apos; systemsetup DCSP -setwakeonmodem DCSP { 0 } &apos; .format ( state ) DCNL DCSP salt.utils.mac _ utils.execute _ return _ success ( cmd ) DCNL DCSP return salt.utils.mac _ utils.confirm _ updated ( state , get _ wake _ on _ network )
DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) : DCNL DCSP DCSP pattern = &#91; &#93; DCNL DCSP if ( pattern is None ) :
DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP default _ format = &apos; default &apos; DCNL DCSP if ( default _ format is None ) : DCNL DCSP DCSP
DCSP if ( not is _ installed ( module ) ) : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; % s DCSP is DCSP not DCSP installed &apos; % module _ path ) ) DCNL DCSP if ( not is _ installed ( module ) ) : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; % s DCSP is DCSP not DCSP installed &apos; % port ) ) DCNL DCSP if ( not is _ installed ( module ) ) : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; % s DCSP is DCSP not DCSP installed &apos; % port ) ) DCNL DCSP if ( not is _ installed ( module ) ) : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; % s DCSP is DCSP not DCSP installed &apos; % port ) ) DCNL DCSP if ( not is _ installed ( module ) ) : DCNL DCSP DCSP module.fail _ json ( msg = ( &apos; % s DCSP is DCSP not DCSP installed &apos; % port ) ) DCNL DCSP if ( not is _ installed ( module ) ) : DCNL
DCSP options = salt.returners.get _ returner _ options ( _ _ virtualname _ _ , ret , attrs , _ _ salt _ _ = _ _ salt _ _ , _ _ opts _ _ = _ _ opts _ _ ) DCNL DCSP return _ options
DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = 0 DCNL DCSP if ( axis is None ) : DCNL DCSP DCSP axis = ( -1 ) DCNL DCSP if (
DCSP if ( not client ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP pools = client.list _ pools ( ) DCNL DCSP return list ( pools )
DCSP ret = &#91; &#93; DCNL DCSP for line in ip : DCNL DCSP DCSP line = line.strip ( ) .split ( &apos; \ n &apos; ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP config _ stub.data = CONFIG _ PRIVATE DCNL DCSP hist.append ( &apos; test &apos; ) DCNL DCSP assert ( len ( hist ) = = 2 ) DCNL DCSP assert ( len ( hist ) = = 2 ) DCNL DCSP assert ( len ( hist ) = = 2 ) DCNL DCSP assert ( len ( hist ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL DCSP assert ( len ( hist &#91; 0 &#93; ) = = 2 ) DCNL
DCSP try : DCNL DCSP DCSP key = RSA.importKey ( rsa _ key ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( &apos; random DCSP key DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP try : DCNL DCSP DCSP key = RSA.importKey ( rsa _ key ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( &apos; key DCSP argument DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( key ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; key DCSP argument DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( key ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; key DCSP argument DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( key ) &gt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; key DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP if ( len ( key ) ! = 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; key DCSP must DCSP be
DCSP klass = ( backend or settings.EMAIL _ BACKEND ) DCNL DCSP return klass ( fail _ silently = fail _ silently , * * kwds )
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP for line in fd.readlines ( ) : DCNL DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = { } DCNL DCSP if ( tree _ sha is None ) : DCNL DCSP DCSP tree _ store = &#91; &#93; DCNL
DCSP if ( vm _ ref is None ) : DCNL DCSP DCSP vm _ ref = _ get _ vm _ ref ( session , instance ) DCNL DCSP if ( vm _ ref is None ) : DCNL DCSP DCSP vm _ ref = _ get _ vm _ ref ( session , instance ) DCNL DCSP vm _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ ref = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ rec = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ rec = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ rec = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm _ rec = session.call _ xenapi ( &apos; VM.get _ VBDs &apos; , vm _ ref ) DCNL DCSP vm
DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.max ( weights ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.log ( np.log ( weights ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.log ( np.log ( weights ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.log ( np.log ( np.log ( weights ) ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.log ( np.abs ( weights ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.sqrt ( np.sum ( ( np.log ( weights ) * * 2 ) ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.sqrt ( np.sum ( ( np.log ( weights ) * * 2 ) ) ) DCNL DCSP if ( alpha is None ) : DCNL DCSP DCSP alpha = np.sqrt ( np.sum ( ( np.log ( weights ) * * 2 ) ) ) DCNL DCSP if ( alpha is None ) :
DCSP if ( cache is None ) : DCNL DCSP DCSP cache = { } DCNL DCSP if ( not cache ) : DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos; cache &apos; &#93; DCNL DCSP DCSP cache &#91; &apos; cache &apos; &#93; = cache &#91; &apos;
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return create _ network _ acl _ entry ( network _ acl _ id , rule _ number , * * kwargs ) DCNL DCSP except BotoServerError as e : DCNL DCSP DCSP return { &apos; created &apos; : False , &apos; error &apos; : _ _ utils _ _ &#91; &apos; boto3.get _ error &apos; &#93; ( e ) }
DCSP try : DCNL DCSP DCSP return interface _ field ( interface , field _ kwargs ) &#91; 0 &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP interface DCSP type : DCSP % s &apos; % interface ) )
DCSP _ check _ access ( &apos; resource _ delete &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ delete &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ delete &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ delete &apos; , context , data _ dict )
DCSP if ( not isinstance ( container , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; container DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not case ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( ( not before ) or ( not before ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP result = &#91; &#93; DCNL DCSP DCSP for element in elements : DCNL DCSP DCSP DCSP if ( ( not before ) or ( not before ) ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP except StopIteration : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not before )
DCSP if ( method is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP create _ pool DCSP pool DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --action . &apos; ) DCNL DCSP F5 = F5Mgmt ( lb , password , method ) DCNL DCSP return conn.create _ pool ( lb , name , method )
DCSP thread = get _ object _ or _ 404 ( Thread , pk = document _ slug , slug = document _ slug ) DCNL DCSP return HttpResponse ( reverse ( &apos; wiki.discuss.threads &apos; , args = &#91; document _ slug &#93; ) )
DCSP return struct.unpack ( &apos; &gt; H &apos; , f.read ( 8 ) ) &#91; 0 &#93;
DCSP try : DCNL DCSP DCSP return get _ plugin ( name , default , scope , tab ) DCNL DCSP except KeyError : DCNL DCSP DCSP return default
DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import lixian _ parser DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL
DCSP from rapidsms.router import Connection DCNL DCSP return MultiMessage ( text , connections = connections , * * kwargs )
DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( template _ name is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if
DCSP if isinstance ( image , np.ndarray ) : DCNL DCSP DCSP if isinstance ( image , np.ndarray ) : DCNL DCSP DCSP DCSP label = label.encode ( &apos; utf-8 &apos; ) DCNL DCSP DCSP elif isinstance ( label , np.ndarray ) : DCNL DCSP DCSP DCSP label = label.encode ( &apos; utf-8 &apos; ) DCNL DCSP DCSP elif isinstance ( label , np.ndarray ) : DCNL DCSP DCSP DCSP label = label.encode ( &apos; utf-8 &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP label = label.encode ( &apos; utf-8 &apos; ) DCNL DCSP return image
DCSP from spyder.utils.qthelpers import qapplication DCNL DCSP app = qapplication ( ) DCNL DCSP dialog = CollectionsEditor ( ) DCNL DCSP chart.add ( &apos; foo &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Firefox &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Serie1 &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Serie1 &apos; , &#91; &#93; ) DCNL DCSP chart.add ( &apos; Serie1 &apos; , &#91; &#93; ) DCNL DCSP
DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( labels ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if
DCSP opportunities = Object.filter _ by _ request ( request , Opportunity.objects ) DCNL DCSP return render _ to _ response ( &apos; sales / opportunity _ view &apos; , { &apos; opportunity &apos; : opportunity , &apos; opportunities &apos; : opportunities } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP start _ action DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP start DCSP action DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP params = { &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; , &apos; action &apos; : &apos; start &apos; } DCNL DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP start DCSP action DCSP must DCSP be DCSP called DCSP with
DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( mask is None ) : DCNL DCSP DCSP raise ValueError ( &apos; mask DCSP must DCSP be DCSP a DCSP non-negative DCSP integer
DCSP result = StringIO ( ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP result = runner.run ( ) DCNL DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( result &#91; &apos; retcode &apos; &#93; = = 0 ) DCNL DCSP assert ( result &#91; &apos; retcode &apos; &#93; = = 0 ) DCNL DCSP assert ( result &#91; &apos; retcode &apos; &#93; = = 0 ) DCNL DCSP assert ( result &#91; &apos; result &apos; &#93; &#91; 0 &#93; = = 0 ) DCNL DCSP assert ( result &#91; &apos; result &apos; &#93; &#91; 0 &#93; = = 0 ) DCNL DCSP assert ( result &#91; &apos; stdout &apos; &#93; = = &#91; &apos; 1&apos; &#93; )
DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.asarray ( x ) DCNL DCSP x = np.rollaxis ( x , axis , axis = axis , axis = axis , axis = axis , axis = axis , keepdims = cval ) DCNL DCSP return ( x , y )
DCSP assert hug.introspect.takes _ kwargs ( function _ with _ kwargs , &apos; argument1 &apos; , &apos; argument2 &apos; ) DCNL DCSP assert hug.introspect.takes _ kwargs ( function _ with _ kwargs , &apos; argument1 &apos; , &apos; argument2 &apos; ) DCNL DCSP assert hug.introspect.takes _ kwargs ( function _ with _ kwargs , &apos; argument1 &apos; , &apos; argument2 &apos; , &apos; argument3 &apos; )
DCSP if ( not hasattr ( target , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % target ) ) DCNL DCSP if ( not isinstance ( target , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % target ) ) DCNL DCSP if ( not isinstance ( target , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % target ) ) DCNL DCSP if ( not isinstance ( target , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % target ) ) DCNL DCSP if ( not isinstance ( target , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP callable &apos; % target )
DCSP recall = ( recall / T.maximum ( 1.0 , precision ) ) DCNL DCSP return recall
DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not color
DCSP return concatenate ( &#91; cupy.atleast _ 2d ( i ) for i in tup &#93; , dtype )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stdout &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; , &apos; stderr &apos; &#93; ) : DCNL DCSP DCSP out
DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = ( batch _ size * batch _ size ) DCNL DCSP else : DCNL DCSP DCSP batch _ size = int ( ( batch _ size * batch _ size ) ) DCNL DCSP if ( batch _ size is None ) : DCNL DCSP DCSP batch _ size = batch _ size DCNL DCSP if ( batch _ size &gt; batch _ size ) : DCNL DCSP DCSP batch _ size = ( batch _ size * batch _ size ) DCNL DCSP else : DCNL DCSP DCSP batch _ size = int ( ( batch _ size * batch _ size ) ) DCNL DCSP if ( batch _ size &gt; batch _ size ) : DCNL DCSP DCSP batch _ size = ( batch _ size * batch _ size ) DCNL DCSP else : DCNL DCSP DCSP batch _ size = ( batch _ size * batch _ size ) DCNL DCSP return ( batch _ size , batch _ size , batch _ size , batch _ size , batch _ size , batch _ size )
DCSP if ( not isinstance ( scope , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; scope DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if isinstance ( scope , six.string _ types ) : DCNL DCSP DCSP scope = scope DCNL DCSP elif isinstance ( scope , ( list , tuple ) ) : DCNL DCSP DCSP scope = &#91; scope &#93; DCNL DCSP else : DCNL DCSP DCSP scope = scope DCNL DCSP return scope
DCSP n = len ( iterable ) DCNL DCSP n = 0 DCNL DCSP for i in range ( n ) : DCNL DCSP DCSP n + = 1 DCNL DCSP DCSP n + = 1 DCNL DCSP return n
DCSP if ( &apos; status &apos; in status ) : DCNL DCSP DCSP if ( &apos; status &apos; in status ) : DCNL DCSP DCSP DCSP status &#91; &apos; errorDetail &apos; &#93; = &apos; { 0 } DCSP { 1 } &apos; .format ( status &#91; &apos; errorDetail &apos; &#93; &#91; &apos; message &apos; &#93; , err &#91; &apos; errorDetail &apos; &#93; &#91; &apos; message &apos; &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP err &#91; &apos; errorDetail &apos; &#93; = &apos; { 0 } DCSP { 1 } DCSP { 2 } &apos; .format ( status , err &#91; &apos; errorDetail &apos; &#93; &#91; &apos; message &apos; &#93; , err &#91; &apos; errorDetail &apos; &#93; &#91; &apos; message &apos; &#93; )
DCSP return context &#91; &apos; _ _ CACTUS _ SITE _ _ &apos; &#93; ( context , link _ url )
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP plot ( &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; , &#91; 0 , 0 , 0 &#93; &#93; ) DCNL DCSP plt.show ( )
DCSP pass
DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; name DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s &apos; % name ) ) DCNL DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; name DCSP % s DCSP not DCSP found &apos; % name ) ) DCNL DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; name DCSP % s DCSP not DCSP found &apos; % name ) ) DCNL DCSP if ( not name.startswith ( &apos; .&apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; name DCSP % s DCSP is DCSP not DCSP a DCSP registered DCSP name &apos; % name ) ) DCNL DCSP if ( not isinstance ( name , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; name DCSP % s DCSP not DCSP found &apos; % name ) ) DCNL DCSP if (
DCSP hLen = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93; &#91; 1 &#93; DCNL DCSP hFunc = _ hashFuncParams &#91; h &#93;
DCSP if ( not isinstance ( image , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; image DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( image , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; image DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( image , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; image DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( image , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; image DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( image , np.ndarray ) ) : DCNL DCSP DCSP raise ValueError ( &apos; image DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( image , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; image DCSP must DCSP be DCSP
DCSP if ( base is None ) : DCNL DCSP DCSP base = _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = os.path.join ( base , &apos; cachedir &apos; ) DCNL
DCSP extensions = &#91; &#93; DCNL DCSP for extension in extensions : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP extensions = load _ extensions ( extensions ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( extension in extensions ) : DCNL DCSP DCSP DCSP extensions.append ( extensions ) DCNL DCSP return extensions
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( osname ) : DCNL DCSP DCSP for fn in checks : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP fn = open ( fn , &apos; rb &apos; ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not check ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP fn = open ( fn , &apos; rb &apos; ) DCNL DCSP DCSP DCSP except IOError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not check ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not check ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not check ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not check ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP with open ( fn , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP return _ group _ type _ access _ remove ( context , type _ id , project _ id )
DCSP if ( not params ) : DCNL DCSP DCSP params = &#91; &#93; DCNL DCSP if isinstance ( params , dict ) : DCNL DCSP DCSP params = params DCNL DCSP else : DCNL DCSP DCSP params = &#91; &#93; DCNL DCSP if ( len ( params ) = = 1 ) : DCNL DCSP DCSP params = params &#91; : : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP fig = ax.figure DCNL DCSP if ( len ( params ) = = 1 ) : DCNL DCSP DCSP params = params &#91; : : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP fig = ax.figure DCNL DCSP return fig
DCSP if ask ( Q.unitary ( expr ) , assumptions ) : DCNL DCSP DCSP return expr.expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP if ( request.method = = &apos; GET &apos; ) : DCNL DCSP DCSP return get _ absolute _ url ( ) DCNL DCSP else : DCNL DCSP DCSP return get _ absolute _ url ( )
DCSP feature = Feature.from _ string ( FEATURE20 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len ( segments ) , 1 ) DCNL DCSP assert _ equals ( len (
DCSP from bench.utils import upload _ archive _ archive DCNL DCSP cleanup _ archive _ archive ( ) DCNL DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP cleanup _ archive ( ) DCNL DCSP DCSP return DCNL DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP cleanup _ archive ( ) DCNL DCSP DCSP return DCNL DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP cleanup _ archive ( ) DCNL DCSP DCSP return DCNL DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP frappe.destroy ( )
