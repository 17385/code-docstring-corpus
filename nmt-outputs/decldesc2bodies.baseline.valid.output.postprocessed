DCSP assert ( len ( values ) = = len ( values ) ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len ( values ) = = 1 ) DCNL DCSP assert ( len (
DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) : DCNL DCSP DCSP size = &#91; &#93; DCNL DCSP if ( size is None ) :
DCSP global _ environment DCNL DCSP _ default _ config = { }
DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &#91; &#93; DCNL DCSP if ( mapping is None ) : DCNL DCSP DCSP mapping = &apos; DCSP &apos; .join ( chars ) DCNL DCSP return &apos; &apos;.join ( chars )
DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP schema ( &apos; foo &apos; ) DCNL DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP schema ( &apos; foo &apos; ) DCNL DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP schema ( &apos; foo &apos; ) DCNL DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP schema ( &apos; foo &apos; )
DCSP t &#91; 0 &#93; = t &#91; 1 &#93;
DCSP if ( len ( arr ) ! = n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr ) &lt; n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr ) &lt; n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr ) &lt; n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr ) &lt; n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr ) &lt; n ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( len ( arr )
DCSP with open ( partition _ dir , &apos; w &apos; ) as f : DCNL DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP with open ( f , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( f.read ( ) )
DCSP headers = { &apos; uid &apos; : uid , &apos; uid &apos; : uid } DCNL DCSP result = requests.get ( url , headers = headers ) DCNL DCSP if result : DCNL DCSP DCSP return result &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return IMPL.@@ cg _ has _ volumes _ filter ( attached _ or _ with _ snapshots )
DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP if ( not url ) : DCNL DCSP DCSP return False DCNL DCSP res = urlparse.urlparse (
DCSP seq = &#91; &#93; DCNL DCSP for i in range ( ( n - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP f = dup _ mul _ ground ( dup _ lshift ( seq &#91; ( -1 ) &#93; , 1 , K ) , K ) DCNL DCSP DCSP seq.append ( dup _ mul _ ground ( dup _ lshift ( seq &#91; ( -1 ) &#93; , K ) , K ) , K ) DCNL DCSP return seq
DCSP if ( params is None ) : DCNL DCSP DCSP params = params DCNL DCSP params = params &#91; &apos; params &apos; &#93; DCNL DCSP if params : DCNL DCSP DCSP params &#91; &apos; params &apos; &#93; = params DCNL DCSP params &#91; &apos; params &apos; &#93; = params
DCSP if ( len ( output ) = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx &lt; = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx = = ( -1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx = = ( -1 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; coord _ input DCSP must DCSP be DCSP 2D &apos; ) DCNL DCSP if ( coord _ idx = = ( -1 ) ) : DCNL DCSP
DCSP return builder.sdiv ( val , val )
DCSP if ( m is None ) : DCNL DCSP DCSP if ( m is None ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP DCSP if ( m is None ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP if ( m is None ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP DCSP m = int ( m ) DCNL DCSP if ( m is not None ) : DCNL DCSP DCSP if ( m = = 1 ) : DCNL DCSP DCSP DCSP return ( -1 ) DCNL DCSP DCSP if ( m = = 1 ) : DCNL DCSP DCSP DCSP return ( -1 ) DCNL DCSP DCSP if ( m = = 1 ) : DCNL DCSP DCSP DCSP return ( -1 ) DCNL DCSP DCSP if ( m = = 1 ) : DCNL DCSP DCSP DCSP return ( -1 ) DCNL DCSP DCSP m = (
DCSP with open ( dest _ dir , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( os.path.join ( dest _ dir , &apos; rb &apos; ) , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( str ( f.read ( ) ) ) DCNL DCSP return open ( dest _ dir , &apos; rb &apos; ) .read ( )
DCSP R = nx.DiGraph ( ) DCNL DCSP G.add _ edges _ from ( pairwise ( G ) ) DCNL DCSP G.add _ edges _ from ( pairwise ( G ) ) DCNL DCSP return G
DCSP mem _ info = { } DCNL DCSP for line in get _ mem _ info ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP mem _ info &#91; key &#93; = int ( line.split ( ) &#91; 1 &#93; ) DCNL DCSP DCSP except IOError : DCNL DCSP DCSP DCSP pass DCNL DCSP return mem _ info
DCSP return Push@@ NotificationService ( config.get ( CONF _ NAME ) )
DCSP return reverse ( &apos; course _ url &apos; , kwargs = { &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos; : unicode ( course _ key ) , &apos; course _ key &apos;
DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( limits is None ) or ( limits is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( limits is None ) : DCNL DCSP
DCSP if isinstance ( data , dict ) : DCNL DCSP DCSP return data DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP if ( key in xmlElement.attributeDictionary ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( evaluatedLinkValue . _ _ class _ _ = = list ) : DCNL DCSP DCSP return getPath@@ ByList ( evaluatedLinkValue ) DCNL DCSP elementNodeObject = getElementNode@@ Object ( evaluatedLinkValue ) DCNL DCSP if ( elementNodeObject = = None ) : DCNL DCSP DCSP return None DCNL DCSP return getPath@@ ByList ( evaluatedLinkValue )
DCSP if ( value is not None ) : DCNL DCSP DCSP return value DCNL DCSP raise OptionValueError ( ( &apos; option DCSP % s DCSP must DCSP be DCSP one DCSP of DCSP % s &apos; % ( opt , value ) ) )
DCSP return all ( ( conn.@@ features.@@ supports _ transactions for conn in connections.@@ all ( ) ) )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except ImportError : DCNL DCSP DCSP pass
DCSP import re DCNL DCSP if ( not string ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not isinstance ( term , string _ types ) ) : DCNL DCSP DCSP return ( u &apos; &quot; % s &quot; &apos; % escape ( term ) ) DCNL DCSP else : DCNL DCSP DCSP return string.replace ( u &apos; \ \ &apos; , u &apos; \ \ &quot; &apos; ) .replace ( u &apos; &quot; &apos; , u &apos; \ \ &quot; &apos; ) .replace ( u &apos; &quot; &apos; , u &apos; \ \ &quot; &apos; )
DCSP match = re.search ( &apos; ^ ( &#91; 0-9 &#93; + ) &apos; , str ) DCNL DCSP if match : DCNL DCSP DCSP return match.group ( 1 ) .strip ( ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( &apos; : &apos; in auth _ url ) : DCNL DCSP DCSP return ( &apos; / &apos; + url _ url ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; / &apos; + url _ url )
DCSP with open ( data _ home , &apos; r &apos; ) as f : DCNL DCSP DCSP data = cPickle.load ( f ) DCNL DCSP DCSP for line in lines : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( len ( line ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP return _ get _ body _ region ( context ) DCNL DCSP except KeyError : DCNL DCSP DCSP return None
DCSP s3.prep = ( lambda r : ( ( r.representation = = &apos; s3json &apos; ) and ( r.representation = = &apos; s3json &apos; ) ) ) DCNL DCSP return dict ( )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP if ( not conn ) : DCNL DCSP DCSP return None DCNL DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP if ( not conn ) : DCNL DCSP DCSP return None DCNL DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP DCSP
DCSP if ( get _ configured _ provider ( ) is False ) : DCNL DCSP DCSP return False DCNL DCSP return _ _ virtualname _ _
DCSP try : DCNL DCSP DCSP return int ( value ) DCNL DCSP except ( TypeError , TypeError ) : DCNL DCSP DCSP return value
DCSP if ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP limits = _ chk _ asarray ( a , limits ) DCNL DCSP elif ( limits is None ) : DCNL DCSP DCSP if ( limits is None
DCSP if force : DCNL DCSP DCSP if force : DCNL DCSP DCSP DCSP url + = ( &apos; ? &apos; + url ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP url + = ( &apos; ? &apos; + url ) DCNL DCSP if force : DCNL DCSP DCSP url + = ( &apos; ? &apos; + url ) DCNL DCSP return url
DCSP return DatetimeIndex ( start = start , end = end , periods = periods , freq = freq , tz = tz , * * kwargs )
DCSP pass
DCSP if ( not hasattr ( instance , &apos; cache _ cache &apos; ) ) : DCNL DCSP DCSP instance . _ cached _ instance _ cache ( )
DCSP return ( value and ( value &#91; 0 &#93; .upper ( ) + value &#91; 1 : &#93; ) )
DCSP line = logical _ line DCNL DCSP while True : DCNL DCSP DCSP line = logical _ line DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP line = line &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP line = line &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP
DCSP scanner = Cis@@ co@@ DeviceScanner ( config &#91; DOMAIN &#93; ) DCNL DCSP return ( scanner if scanner.success _ init else None )
DCSP if ( len ( Z ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( Z ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( len ( Zs ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP if ( ( len ( Z ) = = 1 ) and ( Z &#91; 0 &#93; ! = Zs &#91; 0 &#93; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( len ( Z ) = = 1 ) and ( Z &#91; 0 &#93; = = 1 ) ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP trigger _ type = trigger _ type.lower ( ) DCNL DCSP if ( trigger _ type is not None ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type DCNL DCSP elif ( trigger _ type = = &apos; trigger &apos; ) : DCNL DCSP DCSP trigger _ type = trigger _ type
DCSP f = &#91; &#93; DCNL DCSP for i in range ( 0 , ( len ( f ) - 1 ) , ( -1 ) ) : DCNL DCSP DCSP f = f &#91; ( i + 1 ) : &#93; DCNL DCSP DCSP for i in range ( 1 , ( len ( f ) - 1 ) ) : DCNL DCSP DCSP DCSP f = f &#91; i : ( i + 1 ) &#93; DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP i + = 1 DCNL DCSP return f
DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( not quiet ) : DCNL
DCSP if ( extra _ filter is None ) : DCNL DCSP DCSP extra _ filter = get _ vars.get ( &apos; hrm &apos; , None ) DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = get _ vars.get ( &apos; hrm &apos; , None ) DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = get _ vars.get ( &apos; hrm &apos; , None ) DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = get _ vars.get ( &apos; hrm &apos; , None ) DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = &apos; hrm &apos; DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = &apos; hrm &apos; DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = &apos; hrm &apos; DCNL DCSP if ( not extra _ filter ) : DCNL DCSP DCSP extra _ filter = &apos; hrm &apos; DCNL DCSP if ( not extra _ filter ) : DCNL DCSP
DCSP shortestAdditionalLength = ( 0.85 * importRadius ) DCNL DCSP for corner in corners : DCNL DCSP DCSP if ( corner not in pointTable ) : DCNL DCSP DCSP DCSP add@@ WithLeastLength ( loops , corner , shortestAdditionalLength ) DCNL DCSP return euclidean.getSimplified@@ Loops ( loops , importRadius )
DCSP if ( obj is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( obj . _ _ class _ _ . _ _ name _ _ = = obj _ type ) : DCNL DCSP DCSP raise TypeError ( ( &apos; obj DCSP must DCSP be DCSP a DCSP string , DCSP but DCSP got DCSP % s &apos; % obj _ type ) )
DCSP if delete _ file : DCNL DCSP DCSP with open ( fname , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP with open ( fname , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP os.remove ( fname ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP os.remove ( fname ) DCNL DCSP else : DCNL DCSP DCSP os.remove ( fname )
DCSP if ( not isinstance ( s , unicode ) ) : DCNL DCSP DCSP s = s.decode ( &apos; utf-8 &apos; ) DCNL DCSP return s.decode ( &apos; utf-8 &apos; )
DCSP with open ( f , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( f , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( f.read ( ) )
DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list = &#91; input _ dim &#93; DCNL DCSP if ( param _ list is None ) : DCNL DCSP DCSP param _ list
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP G = nx.DiGraph ( ) DCNL DCSP T.add _ edges _ from ( G ) DCNL DCSP T.add _ edges _ from ( G ) DCNL DCSP T.add _ edges _ from ( bfs _ edges ( G , source , width , width ) ) DCNL DCSP return G
DCSP for i in range ( 0 , len ( sequence ) , 2 ) : DCNL DCSP DCSP ( yield sequence &#91; i &#93; )
DCSP with open ( file _ , &apos; w &apos; ) as file _ file : DCNL DCSP DCSP with open ( file _ path , &apos; w &apos; ) as file _ file : DCNL DCSP DCSP DCSP with open ( file _ path , &apos; w &apos; ) as file _ file : DCNL DCSP DCSP DCSP DCSP with open ( file _ path , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP DCSP DCSP f.write ( dumps ( data , * * kwargs ) )
DCSP f = open ( filename , &apos; w &apos; ) DCNL DCSP f.write ( contents ) DCNL DCSP f.close ( )
DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( len ( tokens ) =
DCSP conf = global _ conf.copy ( ) DCNL DCSP conf.update ( local _ conf ) DCNL DCSP def filter _ filter ( app ) : DCNL DCSP DCSP return Account@@ Quota@@ Middleware ( app ) DCNL DCSP return auth _ filter
DCSP if ( not isinstance ( shape , ( tuple , tuple ) ) ) : DCNL DCSP DCSP shape = ( &#91; 0 &#93; * len ( shape ) ) DCNL DCSP if ( ( len ( shape ) = = 1 ) and ( len ( shape ) = = 1 ) ) : DCNL DCSP DCSP shape = shape &#91; 1 : &#93; DCNL DCSP if ( ( len ( shape ) = = 2 ) and ( len ( shape ) = = 1 ) ) : DCNL DCSP DCSP shape = shape &#91; 1 : &#93; DCNL DCSP if ( ( len ( shape ) = = 2 ) and ( len ( shape ) = = 1 ) ) : DCNL DCSP DCSP shape = ( shape &#91; 0 &#93; , shape &#91; 1 &#93; ) DCNL DCSP if ( ( len ( shape ) = = 2 ) and ( len ( shape ) = = 1 ) ) : DCNL DCSP DCSP shape = ( shape &#91; 0 &#93; , shape &#91; 1 &#93; ) DCNL DCSP if ( ( len ( shape ) = = 2 ) and ( len (
DCSP try : DCNL DCSP DCSP return get _ ordered _ categories ( ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return &#91; &#93;
DCSP if gcodec.isProcedureDoneOrFileIsEmpty ( gcodeText , &apos; unpause &apos; ) : DCNL DCSP DCSP return gcodeText DCNL DCSP if ( repository = = None ) : DCNL DCSP DCSP repository = settings.getReadRepository ( L@@ ashRepository ( ) ) DCNL DCSP if ( not repository.activate@@ Unpau@@ se.@@ value ) : DCNL DCSP DCSP return gcodeText DCNL DCSP return Li@@ ft@@ Skein ( ) .getCraftedGcode ( gcodeText , repository )
DCSP service = get _ object _ or _ 404 ( Service , pk = service _ format ) DCNL DCSP if ( not request.user.profile.has _ permission ( service ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Service &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; services / service _ add &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP it = iter ( iterable , key = key ) DCNL DCSP if ( not result ) : DCNL DCSP DCSP return result DCNL DCSP heapify ( result ) DCNL DCSP return _ nlargest ( n , it )
DCSP if ( not _ _ opts _ _ &#91; &apos; vmadm.list &apos; &#93; ( ) ) : DCNL DCSP DCSP return False DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; tuned-adm DCSP active &apos; ) DCNL DCSP if ( ret &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Could DCSP not DCSP find DCSP the DCSP following DCSP jobs : DCSP { 0 } &apos; .format ( ret &#91; &apos; stderr &apos; &#93; ) DCNL DCSP return ret
DCSP osb = XML.SubElement ( xml _ parent , &apos; com.openshift.jenkins.plugins.pipeline.OpenShift@@ Deployment@@ Verifier &apos; ) DCNL DCSP mapping = &#91; ( &apos; api-url &apos; , &apos; apiURL &apos; , &apos; https : / / openshift.default.svc.cluster.local &apos; ) , ( &apos; dep-cfg &apos; , &apos; dep@@ Cfg &apos; , &apos; frontend &apos; ) , ( &apos; auth-token &apos; , &apos; authToken &apos; , &apos; &apos; ) , ( &apos; verbose &apos; , &apos; verbose &apos; , False ) , ( &apos; auth-token &apos; , &apos; authToken &apos; , &apos; &apos; ) , ( &apos; verbose &apos; , &apos; verbose &apos; , False ) , ( &apos; auth-token &apos; , &apos; authToken &apos; , &apos; &apos; ) , ( &apos; verbose &apos; , &apos; verbose &apos; , False ) &#93; DCNL DCSP convert _ mapping _ to _ xml ( osb , data , mapping , fail _ required = True )
DCSP f.seek ( 0 ) DCNL DCSP for i in xrange ( 0 , len ( f ) , 20 ) : DCNL DCSP DCSP f.write ( f.read ( 4096 ) )
DCSP try : DCNL DCSP DCSP return value.replace ( arg , &apos; &apos; ) DCNL DCSP except ( TypeError , TypeError ) : DCNL DCSP DCSP return value
DCSP if ( not url ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not url.isValid ( ) ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not url.isValid ( ) ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not url.startswith ( u &apos; / &apos; ) ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( u &apos; : &apos; in url ) : DCNL DCSP DCSP return u &apos; { 0 } : { 1 } &apos; .format ( url &#91; 1 : &#93; , url &#91; 1 : &#93; ) DCNL DCSP else : DCNL DCSP DCSP return u &apos; &apos;
DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return u &apos; &apos; DCNL DCSP if ( text is None ) : DCNL DCSP DCSP
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return Parser ( handle ) .parse ( * * kwargs )
DCSP result = { } DCNL DCSP for ( key , value ) in six.iteritems ( query ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP hexsha = sha1 ( ) DCNL DCSP hasher.update ( hexsha ) DCNL DCSP return hasher.hexdigest ( )
DCSP return tf.@@ sin ( x )
DCSP if ( radius@@ Complex.real = = radius@@ Complex.imag ) : DCNL DCSP DCSP return radius@@ Complex.real DCNL DCSP return math.sqrt ( ( radius@@ Complex.real * radius@@ Complex.imag ) )
DCSP for i in range ( n ) : DCNL DCSP DCSP ( yield x )
DCSP def decorator ( f ) : DCNL DCSP DCSP if hasattr ( f , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP DCSP return f ( * args , * * kw ) DCNL DCSP DCSP return f DCNL DCSP return decorator
DCSP if ( len ( ret ) = = 0 ) : DCNL DCSP DCSP return { } DCNL DCSP if ( len ( ret ) = = 1 ) : DCNL DCSP DCSP return { } DCNL DCSP if ( len ( ret ) = = 0 ) : DCNL DCSP DCSP return { } DCNL DCSP if ( len ( ret ) = = 0 ) : DCNL DCSP DCSP return { } DCNL DCSP if ( len ( ret ) = = 1 ) : DCNL DCSP DCSP return { } DCNL DCSP else : DCNL DCSP DCSP return { }
DCSP if ( len ( byte _ list ) = = 1 ) : DCNL DCSP DCSP return byte _ list DCNL DCSP else : DCNL DCSP DCSP return byte _ list
DCSP return _ group _ or _ org _ purge ( context , data _ dict , is _ org = True )
DCSP job = job _ models.Job@@ Model.get _ by _ job _ idx ( job _ idx ) DCNL DCSP if ( job is not None ) : DCNL DCSP DCSP return job DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( chunks , list )
DCSP sym = u &apos; &apos; DCNL DCSP for sym in sym : DCNL DCSP DCSP if ( sym = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP break DCNL DCSP return u &apos; &apos; .join ( ( random.choice ( sym ) for sym in sym ) )
DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; divisions DCSP must DCSP be DCSP a DCSP tuple &apos; ) DCNL DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; divisions DCSP must DCSP be DCSP a DCSP tuple &apos; ) DCNL DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; divisions DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; divisions DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; divisions DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( divisions , ( list , tuple ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if
DCSP user _ ids = &#91; &#93; DCNL DCSP for user _ id in user _ ids : DCNL DCSP DCSP if ( user _ ids is None ) : DCNL DCSP DCSP DCSP user _ ids.append ( user _ ids ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user _ ids.append ( user _ id ) DCNL DCSP return users _ users
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( uri is None ) : DCNL DCSP DCSP uri = session.query ( uri ) .get ( ) DCNL DCSP if ( not uri ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP file &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP
DCSP steps = Step.many _ from _ lines ( I _ HAVE _ TASTY _ BEVERAGES ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert
DCSP pdef = XML.SubElement ( xml _ parent , &apos; com.cloudbees.@@ jenkins.@@ Pre@@ Build@@ Builder &apos; ) DCNL DCSP mappings = &#91; ( &apos; api-url &apos; , &apos; apiURL &apos; , &apos; https : / / openshift.default.svc.cluster.local &apos; ) , ( &apos; bld-cfg &apos; , &apos; install@@ ationName &apos; , &apos; &apos; ) , ( &apos; host &apos; , &apos; tag &apos; , &apos; &apos; ) , ( &apos; host &apos; , &apos; tag &apos; , &apos; &apos; ) &#93; DCNL DCSP helpers.convert _ mapping _ to _ xml ( builder , data , mappings , fail _ required = True )
DCSP return ( t / 1000000.0 )
DCSP ret = { &apos; username &apos; : username , &apos; username &apos; : username , &apos; password &apos; : password } DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , * * kwargs )
DCSP return ( list ( items ) + list ( items ) )
DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( diff _ type is None ) : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return (
DCSP if ( opts is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP list _ servers DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP list _ servers DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP list _ servers DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP list _ servers DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP list _ servers DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL
DCSP try : DCNL DCSP DCSP return os.sysconf ( &apos; SC _ NPROCESSORS _ ONLN &apos; ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP return check _ permission ( user , model , permission _ codename = permission _ codename )
DCSP try : DCNL DCSP DCSP XML.SubElement ( xml _ parent , &apos; git@@ Builder &apos; ) .text = data &#91; &apos; tag &apos; &#93; DCNL DCSP except KeyError as e : DCNL DCSP DCSP raise MissingAttributeError ( e )
DCSP def decorator ( func ) : DCNL DCSP DCSP setattr ( namespace , name , value ) DCNL DCSP DCSP return func DCNL DCSP return decorator
DCSP if hasattr ( obj , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return obj . _ _ class _ _ . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return obj
DCSP ( w , w ) = ( x.shape &#91; col _ axis &#93; , x.shape &#91; col _ axis &#93; ) DCNL DCSP w = np.random.uniform ( ( - wrg ) , wrg ) DCNL DCSP w = np.random.uniform ( ( - wrg ) , wrg ) DCNL DCSP w = np.random.uniform ( ( - wrg ) , wrg ) DCNL DCSP return ( w , h , w )
DCSP if ( repository is None ) : DCNL DCSP DCSP repository = get _ repository _ model ( ) DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP repository = get _ repository _ repository _ by _ name ( trans , repository ) DCNL DCSP if ( not repository ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( repository is None ) : DCNL DCSP DCSP return
DCSP result = { } DCNL DCSP for row in cursor.fetchall ( ) : DCNL DCSP DCSP result &#91; row &#91; row &#93; &#93; = row &#91; row &#93; DCNL DCSP return result
DCSP return IMPL.@@ volume _ volume _ to _ compute _ host ( volume , volume _ id , host , vol _ map )
DCSP return config.check _ driver _ dependencies ( _ _ virtualname _ _ , { &apos; libcloud &apos; : HAS _ LIBS } )
DCSP if ( message _ id is None ) : DCNL DCSP DCSP message _ id = ( &apos; % s . % s &apos; % ( account _ id , message _ id ) ) DCNL DCSP message _ message = ( &apos; % s : DCSP % s &apos; % ( message _ id , message _ id ) ) DCNL DCSP message _ message + = ( &apos; \ n
DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP n = int ( n ) DCNL DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL
DCSP if isinstance ( xml _ string , string _ types ) : DCNL DCSP DCSP xml _ string = xml _ string.decode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( xml _ string , basestring ) : DCNL DCSP DCSP xml _ string = xml _ string.decode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( xml _ string , basestring ) : DCNL DCSP DCSP xml _ string = xml _ string.decode ( &apos; utf-8 &apos; ) DCNL DCSP return Xml@@ Property@@ ListParser ( ) .parse ( xml _ string )
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = config.floatX DCNL DCSP if ( dtype is
DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( len ( inputs ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP if ( app is None ) : DCNL DCSP DCSP app = get _ app ( ) DCNL DCSP if ( not server.quiet ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not server.quiet ) and ( not server.quiet ) ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP if ( not isinstance ( obj , list ) ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP except AttributeError : DCNL DCSP DCSP return False
DCSP ( t , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,
DCSP return ( h / HOURS _ PER _ DAY )
DCSP result = testdir.runpytest ( ) DCNL DCSP d.close ( ) DCNL DCSP assert ( len ( result ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( len ( collect.aborted _ keys ) = = 1 ) DCNL DCSP assert ( collect.deleted _ keys = =
DCSP factory = factory ( ) DCNL DCSP factory = factory ( ) DCNL DCSP return factory
DCSP cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , repo ) ) DCNL DCSP cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , repo ) ) DCNL DCSP cmd = ( &apos; git DCSP clone DCSP % s DCSP % s &apos; % ( git _ path , cmd ) ) DCNL DCSP if ( not branch ) : DCNL DCSP DCSP return DCNL DCSP cmd = &apos; git DCSP clone DCSP { 0 } DCSP { 1 } DCSP { 1 } DCSP { 2 } &apos; .format ( branch , branch , branch , branch , branch , branch , branch , branch , branch , branch , branch ) DCNL DCSP if remote _ commit : DCNL DCSP DCSP cmd + = &apos; DCSP { 0 } DCSP { 1 } &apos; .format ( branch , branch ) DCNL DCSP if ( branch is not None ) : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -r &apos; , branch &#93; ) DCNL DCSP cmd.extend ( cmd ) DCNL DCSP cmd + = &apos; DCSP
DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if ( subject is None ) : DCNL DCSP DCSP html = &apos; &apos; DCNL DCSP if html : DCNL DCSP DCSP subject = ( &apos; % s : DCSP % s &apos; % ( subject , html ) ) DCNL DCSP mail.send ( msg )
DCSP data = _ get _ data ( ) DCNL DCSP return du.process _ recarray _ pandas ( data , endog _ idx = 0 , dtype = float )
DCSP if ( image _ id is None ) : DCNL DCSP DCSP location = get _ object _ or _ 404 ( Image , id = image _ id ) DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP raise exception.ImageNotFound ( image _ id = image _ id ) DCNL DCSP if ( location is None ) : DCNL DCSP DCSP raise exception.ImageNotFound ( image _ id = image _ id ) DCNL DCSP return image
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def inner _ func ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP cache _ key = kwargs.pop ( &apos; cache _ key &apos; , None ) DCNL DCSP DCSP DCSP if ( cache _ key is None ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP cache _ key = kwargs.pop ( &apos; cache _ key &apos; , None ) DCNL DCSP DCSP DCSP if ( cache _ key is None ) : DCNL DCSP DCSP DCSP DCSP cache _ key = kwargs.pop ( &apos; cache _ prefix &apos; , None ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP cache _ key = kwargs.pop ( &apos; cache _ key &apos; , None ) DCNL DCSP DCSP DCSP if ( cache _ key is None ) : DCNL DCSP DCSP DCSP DCSP cache _ key = kwargs.pop ( &apos; cache _ prefix &apos; , None ) DCNL DCSP DCSP DCSP DCSP cache _ key = cache _ key ( cache _ key ) DCNL DCSP DCSP DCSP DCSP if (
DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( msg ) DCNL DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP argument &apos; % node ) ) DCNL DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP node DCSP type : DCSP % s &apos; % node ) ) DCNL DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP node DCSP type : DCSP % s &apos; % node ) ) DCNL DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP node DCSP type : DCSP % s &apos; % node ) ) DCNL DCSP if ( not isinstance ( node , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &quot; Can &apos;t DCSP find DCSP
DCSP return &apos; &apos;.join ( &#91; ( &apos; % 02x &apos; % ord ( c ) ) for c in ip.split ( &apos; .&apos; ) &#93; )
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP if ( course _ masquerade is None ) : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP else : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP if ( course _ masquerade is None ) : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP else : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP if ( course _ masquerade is None ) : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request , course _ key ) DCNL DCSP else : DCNL DCSP DCSP course _ masquerade = get _ course _ masquerade ( request ,
DCSP widgets = { } DCNL DCSP widget@@ s.update ( WIDGETS ) DCNL DCSP return widgets
DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( env is None ) : DCNL DCSP DCSP env = os.environ DCNL DCSP if ( &apos; DOCKER _ HOST &apos; in os.environ ) : DCNL DCSP DCSP os.environ &#91; &apos; SERVER _ PORT &apos; &#93; = os.environ &#91; &apos; SERVER _ PORT &apos; &#93; DCNL DCSP return env
DCSP if ( attr is None ) : DCNL DCSP DCSP attr = getattr ( obj , attr , None ) DCNL DCSP if ( attr is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( attr in UNSAFE _ ATTRIBUTES ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP if ( cutoff is None ) : DCNL DCSP DCSP cutoff = ( cutoff if ( cutoff is None ) else G ) DCNL DCSP n = len ( G ) DCNL DCSP n = len ( G ) DCNL DCSP for n in range ( n ) : DCNL DCSP DCSP ( yield ( n , ( n + 1 ) ) )
DCSP if ( ns is None ) : DCNL DCSP DCSP ns = { } DCNL DCSP if ( ns is None ) : DCNL DCSP DCSP ns = { } DCNL DCSP if ( ns is not None ) : DCNL DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( ns is not None ) : DCNL DCSP DCSP DCSP
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP if ( course _ key is None ) : DCNL DCSP DCSP return { } DCNL DCSP
DCSP return &apos; \ n &apos; .join ( &#91; ( &apos; % s DCSP % s &apos; % ( i , i ) ) for ( i , i ) in enumerate ( payload ) &#93; )
DCSP Archive ( path ) .extract ( to _ path )
DCSP field _ path = get _ field _ path ( field _ path ) DCNL DCSP if ( field _ path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( field _ path &#91; ( -1 ) &#93; = = &apos; / &apos; ) : DCNL DCSP DCSP field _ path = field _ path.split ( &apos; .&apos; ) &#91; ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP field _ path = field _ path.split ( &apos; .&apos; ) &#91; ( -1 ) &#93; DCNL DCSP return ( field _ path , extension _ path )
DCSP for host _ name in host _ name : DCNL DCSP DCSP if ( host _ name = = host _ name ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.@@ secgroup _ create ( name , description )
DCSP if ( not isinstance ( fname , ( list , tuple ) ) ) : DCNL DCSP DCSP fname = ( &apos; % s : DCSP % s &apos; % ( fname , &apos; , DCSP &apos; .join ( ( ( &apos; % s = % s &apos; % ( fname , k ) ) for ( k , v ) in enumerate ( fname ) ) ) ) ) DCNL DCSP if ( not isinstance ( fname , ( list , tuple ) ) ) : DCNL DCSP DCSP fname = ( &apos; % s : DCSP % s &apos; % ( fname , &apos; , DCSP &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( k , k ) ) for ( k , v ) in six.iteritems ( tests ) &#93; ) ) ) DCNL DCSP if isinstance ( fname , ( list , tuple ) ) : DCNL DCSP DCSP params = dict ( ( ( k , v ) for ( k , v ) in params.items ( ) if ( k in tests ) ) ) DCNL DCSP else : DCNL DCSP DCSP params = { } DCNL
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ item ( course _ key ) DCNL DCSP if (
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP username = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP else : DCNL DCSP DCSP username = request.META.get ( &apos; HTTP _ REFERER &apos; ) DCNL DCSP if ( not username ) : DCNL DCSP DCSP username = request.META.get ( &apos; HTTP _ HOST &apos; , &apos; &apos; ) DCNL DCSP if ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = request.META.get ( &apos; HTTP _ REFERER &apos; , &apos; &apos; ) DCNL DCSP elif ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = username DCNL DCSP elif ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = request.META.get ( &apos; HTTP _ HOST &apos; , &apos; &apos; ) DCNL DCSP elif ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = &apos; &apos; DCNL DCSP elif ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = &apos; &apos; DCNL DCSP elif ( username = = &apos; nonce &apos; ) : DCNL DCSP DCSP username = username DCNL DCSP
DCSP if ( y = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( y = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return x
DCSP server = _ servicegroup _ get ( sg _ name , sg _ type , * * connection _ args ) DCNL DCSP if ( sg is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP nitro = _ connect ( * * connection _ args ) DCNL DCSP if ( nitro is None ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP try : DCNL DCSP DCSP return _ is _ ipv4 _ like ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False
DCSP return datetime.datetime ( * time.strptime ( string _ , &apos; % Y- % m- % d DCSP % H : % M : % S &apos; ) )
DCSP for ( k , v ) in response : DCNL DCSP DCSP if ( k in response ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP for ( i , item ) in enumerate ( per ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP return 0 DCNL DCSP return 0
DCSP return _ find _ xpath _ with _ wait ( context , ( By.@@ ID , id _ str ) , * * kwargs )
DCSP def callback ( event ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP _ LOGGER.error ( &apos; Could DCSP not DCSP connect DCSP to DCSP MQTT : DCSP % s &apos; , e ) DCNL DCSP DCSP DCSP return DCNL DCSP return True
DCSP request = view _ func ( request , * * kwargs ) DCNL DCSP if ( request is None ) : DCNL DCSP DCSP return view _ func ( request , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return view _ func ( request , * * kwargs )
DCSP bigip _ session = _ get _ conn ( profile = profile ) DCNL DCSP try : DCNL DCSP DCSP response = bigip _ session.get ( ( BIG _ IP _ URL _ BASE.format ( host = hostname ) + &apos; / ltm / profile / { name } &apos; .format ( name = name ) ) ) DCNL DCSP except requests.exceptions.ConnectionError as e : DCNL DCSP DCSP return _ load _ connection _ error ( hostname , e ) DCNL DCSP return _ load _ response ( response )
DCSP try : DCNL DCSP DCSP string = string.encode ( &apos; ascii &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP string = string.encode ( &apos; ascii &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is None ) : DCNL DCSP DCSP method = None DCNL DCSP if ( method is not None ) : DCNL DCSP DCSP if verbose : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP bits = 0 DCNL DCSP for i in range ( N ) : DCNL DCSP DCSP if ( N &lt; = N ) : DCNL DCSP DCSP DCSP size + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP size + = 1 DCNL DCSP return bits
DCSP if ( not path _ url.endswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path _ url = ( &apos; / &apos; + path _ url ) DCNL DCSP if ( &apos; / &apos; in path _ url ) : DCNL DCSP DCSP return ( &apos; / &apos; + path _ url ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s / % s &apos; % ( path _ url , path _ url ) )
DCSP test _ json = json.dumps ( { &apos; Content-Type &apos; : &apos; application / json &apos; } ) DCNL DCSP assert ( hug.input _ format.@@ json ( json _ json.dumps ( { &apos; name &apos; : &apos; works &apos; } ) ) = = &apos; json &apos; )
DCSP for i in range ( len ( files ) ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( i &gt; 0 ) : DCNL DCSP DCSP DCSP ( yield ( i , ( i + 1 ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield ( i , ( i + 1 ) ) )
DCSP lines = &#91; &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP with open ( signature _ file , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP pubkey = binascii.a2b _ base64 ( f.read ( ) .decode ( &apos; ascii &apos; ) ) DCNL DCSP DCSP except IOError : DCNL DCSP DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return None
DCSP input _ string = input _ string.replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ \ &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ \ &apos; , &apos;
DCSP if ( process is None ) : DCNL DCSP DCSP process = &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP info = process ( ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP return info
DCSP storage _ client = storage.Client ( ) DCNL DCSP bucket = storage _ client.get _ bucket ( bucket _ name ) DCNL DCSP blob = bucket.blob ( blob _ name ) DCNL DCSP blob.@@ delete ( )
DCSP if ( not node ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not node.is _ deleted ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST )
DCSP if ( len ( cols ) = = 1 ) : DCNL DCSP DCSP if ( len ( cols ) = = 1 ) : DCNL DCSP DCSP DCSP return ( &apos; DCSP &apos; * ( colwidth * spacing ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( &apos; % s &apos; % ( colwidth * spacing ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s DCSP % s &apos; % ( ( colwidth * spacing ) , ( colwidth * spacing ) ) )
DCSP try : DCNL DCSP DCSP return import _ module ( taglib _ module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP tmp = np.asarray ( pvals ) DCNL DCSP if ( len ( pvals ) ! = len ( pvals ) ) : DCNL DCSP DCSP raise ValueError ( &apos; alpha DCSP must DCSP be DCSP positive &apos; ) DCNL DCSP if ( method = = &apos; L &apos; ) : DCNL DCSP DCSP tmp = ( &#91; 0 &#93; * len ( pvals ) ) DCNL DCSP else : DCNL DCSP DCSP tmp = &#91; &#93; DCNL DCSP for i in range ( 0 , len ( pvals ) , len ( pvals ) ) : DCNL DCSP DCSP tmp = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( pvals ) ) : DCNL DCSP DCSP DCSP tmp = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( len ( pvals ) ) : DCNL DCSP DCSP DCSP DCSP tmp &#91; i &#93; = ( ( tmp &#91; ( i + 1 ) &#93; + alpha &#91; ( i + 1 ) &#93; ) + 1 ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP tmp &#91; ( i + 1 ) &#93; = tmp &#91; i &#93; DCNL DCSP
DCSP p &#91; 0 &#93; = p &#91; 1 &#93;
DCSP ( x , y ) = ( float ( w ) , float ( w ) ) DCNL DCSP for i in range ( ( len ( w ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP for i in range ( ( len ( w ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP for i in range ( ( i + 1 ) , ( n + 1 ) ) : DCNL DCSP DCSP DCSP DCSP ( yield ( ( ( ( ( ( ( ( i * i ) * * 2 ) + ( y * * 2 ) ) + ( ( y * * 2 ) * ( y * * 2 ) ) ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; Length DCSP of DCSP % s DCSP in DCSP % s DCSP in DCSP % s &apos; % ( w , i ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Length DCSP of DCSP
DCSP parts = &#91; &#93; DCNL DCSP for i in range ( ( len ( string ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP tokens.append ( ( &apos; % % % s % s &apos; % ( ord ( s &#91; i &#93; ) , ord ( s &#91; i &#93; ) ) ) ) DCNL DCSP return &apos; &apos;.join ( parts )
DCSP selector = { &apos; batch &apos; : batch _ job _ id , &apos; batch _ job _ id &apos; : batch _ job _ id , &apos; batch _ job _ id &apos; : batch _ job _ id , &apos; batch _ job _ id &apos; : batch _ job _ id } DCNL DCSP return batch _ job _ service.get ( selector )
DCSP return reverse ( handler _ name , key _ name = key _ name , key _ value = key _ value , kwargs = kwargs )
DCSP return ( ioThread = = getThread@@ ID ( ) )
DCSP m = re.match ( &apos; ( \ \ d + ) $ &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; ( \ \ d + ) &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; \ \ d + ( \ \ d + ) &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; \ \ d + ( \ \ d + ) &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; \ \ d + &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; \ \ d + &apos; , date ) DCNL DCSP if ( not m ) : DCNL DCSP DCSP return None DCNL DCSP m = re.match ( &apos; \ \ d + ( \ \ d +
DCSP def check _ function ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except TypeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP return function ( self , * args , * * kwargs ) DCNL DCSP return test _ function
DCSP dsk = { } DCNL DCSP for ( k , v ) in dsk.items ( ) : DCNL DCSP DCSP if ( dsk &#91; key &#93; is not None ) : DCNL DCSP DCSP DCSP dsk2 &#91; key &#93; = func ( dsk &#91; key &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP dsk2 &#91; key &#93; = func ( dsk &#91; key &#93; ) DCNL DCSP return dsk2
DCSP changes = { } DCNL DCSP for state in state _ state : DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state = = desired _ state ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( state
DCSP result = script.pip ( &apos; list &apos; , &apos; --verbose &apos; ) DCNL DCSP lines = result.stdout.splitlines ( ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 1 ) DCNL DCSP assert ( len ( lines ) = = 2 )
DCSP input _ list = &#91; &#93; DCNL DCSP for i in xrange ( len ( W _ list ) ) : DCNL DCSP DCSP for i in xrange ( len ( W _ list ) ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue
DCSP pending = len ( iterables ) DCNL DCSP nexts = cycle ( ( iter ( it ) for it in iterables ) ) DCNL DCSP while pending : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield next ( it ) ) DCNL DCSP DCSP except StopIteration : DCNL DCSP DCSP DCSP break
DCSP results = { } DCNL DCSP for ( key , value ) in six.iteritems ( expected _ parameters _ objects ) : DCNL DCSP DCSP if ( key not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param not in expected _ parameter _ objects ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( param in expected _ parameter _ objects ) : DCNL DCSP DCSP
DCSP return _ instance _ type _ access _ add ( context , flavor _ id , project _ id )
DCSP if ( not string ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not string ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not string ) : DCNL DCSP DCSP raise ValueError ( &apos; string DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( ( &apos; DCSP &apos; in string ) and ( &apos; DCSP &apos; in string ) ) : DCNL DCSP DCSP cmd + = &apos; DCSP -n DCSP { 0 } &apos; .format ( string ) DCNL DCSP else : DCNL DCSP DCSP cmd + = &apos; DCSP -n DCSP { 0 } &apos; .format ( string ) DCNL DCSP if strip : DCNL DCSP DCSP cmd + = ( &apos; DCSP &#124; DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if ( not msg.@@ endswith ( &apos; \ n &apos; ) ) : DCNL DCSP DCSP msg = ( msg + u &apos; \ n &apos; ) DCNL DCSP msg = ( msg + u &apos; \ n &apos; ) DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = ( u &apos; \ n &apos; + msg ) DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + = u &apos; \ n &apos; DCNL DCSP msg + =
DCSP for ( idx , value ) in enumerate ( new ) : DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( item &#91; 0 &#93; = = &apos; DCTB &apos; ) : DCNL DCSP DCSP
DCSP p &#91; 0 &#93; = ( - p &#91; 2 &#93; )
DCSP s = s.strip ( ) DCNL DCSP if ( s &#91; ( -1 ) &#93; = = &apos; -&apos; ) : DCNL DCSP DCSP s = s &#91; : ( -1 ) &#93; DCNL DCSP return s
DCSP return normal ( state , text , i , formats , user _ data )
DCSP if ( object . _ _ class _ _ . _ _ name _ _ = = &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP else : DCNL DCSP DCSP return sys.exc _ info ( ) &#91; 1 &#93;
DCSP if ( len ( s ) ! = len ( t ) ) : DCNL DCSP DCSP return False DCNL DCSP for i in range ( len ( t ) ) : DCNL DCSP DCSP if ( s &#91; i &#93; = = t &#91; i &#93; ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP result = { } DCNL DCSP for ( key , value ) in mappings.@@ items ( ) : DCNL DCSP DCSP if ( key in mappings.@@ itervalues ( ) ) : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP for ( key , value ) in six.iteritems ( value ) : DCNL DCSP DCSP if ( key = = key ) : DCNL DCSP DCSP DCSP return key DCNL DCSP return None
DCSP review _ request = get _ review _ request ( request , local _ site _ name = local _ site _ name , repository _ id = repository _ id ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseRedirect ( local _ site _ id ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP raise Http404 DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP if ( not local _ site _ id ) : DCNL DCSP DCSP return HttpResponseBadRequest ( ) DCNL DCSP request = get _ object _ or _ 404 (
DCSP return _ group _ types _ get _ by _ name _ or _ id ( context , group _ type _ list )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP else : DCNL DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP return ( &apos; % s : % s &apos; % ( args &#91; 0 &#93; , args &#91; 1 &#93; ) )
DCSP a = dict ( ( ( x , y ) for ( a , b ) in zip ( x , y ) ) ) DCNL DCSP a = dict ( ( ( a , b ) for ( a , b ) in zip ( x , y ) ) ) DCNL DCSP if normalized : DCNL DCSP DCSP a = a DCNL DCSP else : DCNL DCSP DCSP a = a DCNL DCSP return a
DCSP name = kwargs.get ( &apos; name &apos; , None ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP return { } DCNL DCSP for ( name , value ) in kwargs.items ( ) : DCNL DCSP DCSP if ( name is not None ) : DCNL DCSP DCSP DCSP name = name &#91; : ( -1 ) &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = name DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = ( &apos; % s . % s &apos; % ( name , name ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = ( &apos; % s . % s &apos; % ( name , name ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP name = ( &apos; % s . % s &apos; % ( name , name )
DCSP pp _ options = &#91; &#93; DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL DCSP for macro in macros : DCNL DCSP DCSP pp _ opts.append ( ( &apos; -D % s &apos; % macro ) ) DCNL
DCSP try : DCNL DCSP DCSP return datetime.datetime.strptime ( timestr , &apos; % Y- % m- % dT % H : % M : % S &apos; ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP db = get _ db ( ) DCNL DCSP db = db ( db = db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db ( db ) DCNL DCSP db = db (
DCSP if ( not isinstance ( logical _ line , string _ types ) ) : DCNL DCSP DCSP ( yield ( 0 , &quot; E7@@ 22 DCSP can &apos;t DCSP have DCSP type DCSP &apos; { 0 } &apos; &quot; .format ( type ( logical _ line ) ) ) )
DCSP ports = &#91; &#93; DCNL DCSP for i in range ( len ( source ) ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ports &#91; name &#93; + = 1 DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( ports ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( ports ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( ports ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( ports ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( ports ) = = 1 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ports &#91; name &#93; + = 1 DCNL DCSP return ports
DCSP _ colorbar _ extension _ length ( u &apos;@@ proportional &apos; )
DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) : DCNL DCSP DCSP session _ id = None DCNL DCSP if ( session _ id is None ) :
DCSP if ( sys.version _ info &lt; ( 3 , ) ) : DCNL DCSP DCSP return open ( os.path.dirname ( _ _ file _ _ ) , &apos; rb &apos; ) .read ( ) DCNL DCSP else : DCNL DCSP DCSP return open ( os.path.dirname ( _ _ file _ _ ) , &apos; rb &apos; ) .read ( )
DCSP return date _ obj.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; )
DCSP a = TpPd ( pd = 6 ) DCNL DCSP b = MessageType ( mesType = 20 ) DCNL DCSP c = RrCause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP ret = { } DCNL DCSP for ( k , v ) in six.iteritems ( _ itervalues ( ) ) : DCNL DCSP DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( v , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP d &#91; k &#93; = v DCNL DCSP return res
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP return s3 _ rest _ controller ( &apos; hrm &apos; , resourcename )
DCSP return _ vzctl ( &apos; running &apos; , ctid _ or _ name )
DCSP try : DCNL DCSP DCSP return int ( int _ str ) DCNL DCSP except ValueError : DCNL DCSP DCSP return default
DCSP return ( ( c = = &apos; rgba &apos; ) or ( c = = &apos; rgba &apos; ) )
DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( value = = &apos; &apos; ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return ( &apos; &apos; , value )
DCSP if isinstance ( expr , tuple ) : DCNL DCSP DCSP return expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP assert ( len ( model ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) = = 1 ) DCNL DCSP assert ( len ( indices ) =
DCSP ret = &#91; &#93; DCNL DCSP for command in command : DCNL DCSP DCSP if ( command in command ) : DCNL DCSP DCSP DCSP ret.append ( name ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret.append ( name ) DCNL DCSP return ret
DCSP rc = u &apos; &apos; DCNL DCSP for name in ( u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; , u &apos;@@ lut &apos; &#93; : DCNL DCSP
DCSP if ( template _ name is None ) : DCNL DCSP DCSP template _ name = ( &apos; / &apos; + template _ name ) DCNL DCSP return render ( request , template _ name , { &apos; request &apos; : request } )
DCSP script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; simple = = 1.0 &apos; ) DCNL DCSP result = script.pip ( &apos; install &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; -f &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos; --no-index &apos; , &apos; --find-links = &apos; , data.find _ links , &apos;
DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError (
DCSP if six.PY3 : DCNL DCSP DCSP b = salt.utils.to _ bytes ( instr ) DCNL DCSP DCSP return salt.utils.to _ bytes ( instr ) DCNL DCSP else : DCNL DCSP DCSP return instr
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP args = &#91; args &#91; 0 &#93; , args &#91; 1 &#93; &#93; DCNL DCSP else : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP cmd = &#91; ( &apos; % s DCSP % s &apos; % ( cmd , args ) ) &#93; DCNL DCSP for cmd in args : DCNL DCSP DCSP cmd + = ( &apos; DCSP &apos; + cmd ) DCNL DCSP return cmd
DCSP try : DCNL DCSP DCSP salt.utils.mac _ utils.execute _ return _ success ( cmd ) DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return None DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return None DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP return None DCNL DCSP return course
DCSP if ( filename is None ) : DCNL DCSP DCSP cache = { } DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP cache = { } DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP cache = { } DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP cache = { } DCNL DCSP if ( filename in linecache.cache ) : DCNL DCSP DCSP checkcache ( filename ) DCNL DCSP cache.update ( cache )
DCSP if ( seed is None ) : DCNL DCSP DCSP numpy.random.seed ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP numpy.random.seed ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP numpy.random.seed ( seed ) DCNL DCSP else : DCNL DCSP DCSP numpy.random.seed ( seed )
DCSP for item in items : DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) )
DCSP if ( not hasattr ( f , &apos; _ _ main _ _ &apos; ) ) : DCNL DCSP DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP f . _ _ name _ _ = f . _ _ name _ _ DCNL DCSP return f
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; )
DCSP if ( not request.user.profile.is _ admin ( &apos; treeio.sales &apos; ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Sale DCSP Status &quot; ) DCNL DCSP if ( request.GET and ( &apos; term &apos; in request.GET ) ) : DCNL DCSP DCSP if ( &apos; cancel &apos; in request.POST ) : DCNL DCSP DCSP DCSP if ( &apos; cancel &apos; in request.POST ) : DCNL DCSP DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; sales _ location _ view &apos; , args = &#91; location.id &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; sales _ location _ view &apos; , args = &#91; location.id &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return render _ to _ response ( &apos; identities / ajax _ location _ lookup &apos; , { &apos; form &apos; : form } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP server = _ connect ( host , port , db , password ) DCNL DCSP return server.@@ ping ( )
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = ResponseSerializer ( ) DCNL DCSP controller = Controller ( ) DCNL DCSP return wsgi.Resource ( controller , deserializer , serializer )
DCSP if ( not options.@@ is _ cli ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP subprocess.call ( options ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP return DCNL DCSP if ( not options.@@ cli ) : DCNL DCSP DCSP return DCNL DCSP if options.@@ show : DCNL DCSP DCSP if ( not options.@@ commit ) : DCNL DCSP DCSP DCSP sys.exit ( 1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( ( u &apos
DCSP client = get _ client ( ) DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return SUCCESS DCNL DCSP client = get _ client ( options ) DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP if ( not options.force ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP
DCSP if ( &apos; vsphere.system _ info &apos; in _ _ salt _ _ ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return False
DCSP return binascii.hexlify ( x ) .decode ( &apos; hex &apos; )
DCSP if ( len ( text ) ! = len ( text ) ) : DCNL DCSP DCSP return text DCNL DCSP if ( len ( text ) = = 1 ) : DCNL DCSP DCSP return text DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return text DCNL DCSP if ( len ( text ) &gt; 1 ) : DCNL DCSP DCSP return text DCNL DCSP return text
DCSP return _ apply _ scalar _ per _ pixel ( generic _ cy . _ mean , image , selem , out = out , mask = mask , shift _ x = shift _ x , shift _ y = shift _ y )
DCSP if ( position = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( position = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( position = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( position = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( position = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP record = current.db ( ( table.id = = item _ id ) ) .select ( limitby = ( 0 , 1 ) ) .first ( ) DCNL DCSP if ( record is None ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not record ) : DCNL DCSP
DCSP return stub ( )
DCSP if is _ admin : DCNL DCSP DCSP return get _ repository _ file _ contents ( app , file _ path , is _ admin ) DCNL DCSP else : DCNL DCSP DCSP return get _ repository _ file _ contents ( app , file _ path , is _ admin )
DCSP with open ( target , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP try : DCNL DCSP DCSP set _ libraries ( library ) DCNL DCSP except ImportError as e : DCNL DCSP DCSP log.exception ( e ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is None ) : DCNL DCSP DCSP params = { } DCNL DCSP if ( token is not None ) : DCNL DCSP DCSP if ( token is not None ) : DCNL DCSP DCSP DCSP params &#91; &apos; expires _ at &apos; &#93; = expiration DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP params &#91; &apos; expires _ at &apos; &#93; = expiration DCNL DCSP DCSP if ( token is not None ) : DCNL DCSP DCSP DCSP params &#91; &apos; expires _ at &apos; &#93; = expiration DCNL DCSP DCSP if ( token is not None ) : DCNL DCSP DCSP DCSP params &#91; &apos; expires _ at &apos; &#93; = expiration DCNL
DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93; DCNL DCSP DCSP args = sys.argv &#91; 1 : &#93;
DCSP url = ( &apos; % s : % s &apos; % ( room _ url _ key , room _ id _ key ) ) DCNL DCSP return ( &apos; % s : % s &apos; % ( room _ url _ key , room _ id _ key ) )
DCSP _ _ grab _ lock ( ) DCNL DCSP storage _ module = _ _ import _ _ ( collection.collection _ type ( ) ) DCNL DCSP storage _ module = _ _ import _ _ ( collection _ type , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } ) DCNL DCSP
DCSP cmd = &apos; { 0 } DCSP -L &apos; .format ( _ _ detect _ os ( ) ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; = = 0 ) : DCNL DCSP DCSP return out &#91; &apos; stdout &apos; &#93; .strip ( ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return s3 _ rest _ controller ( )
DCSP return ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s \ n &apos; % ( ( mu + mu ) , mu , mu ) ) )
DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) :
DCSP ret = { } DCNL DCSP for ( key , value ) in six.iteritems ( objects ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; key &#93; = value DCNL DCSP return ret
DCSP if ( default _ hidden is None ) : DCNL DCSP DCSP default _ hidden = get _ active _ profiles ( ) DCNL DCSP if ( default _ hidden is not None ) : DCNL DCSP DCSP if ( default _ hidden is None ) : DCNL DCSP DCSP DCSP default _ hidden = False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise CommandExecutionError ( &apos; Could DCSP not DCSP find DCSP user DCSP { 0 } &apos; .format ( user ) ) DCNL DCSP else : DCNL DCSP DCSP return _ profiles _ get ( user , default _ hidden )
DCSP if ( call = = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP avail _ locations DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function , DCSP or DCSP with DCSP the DCSP --list-locations DCSP option &apos; ) DCNL DCSP conn = get _ conn ( ) DCNL DCSP return conn.list _ locations ( )
DCSP return slice ( 0 , ( shape &#91; 0 &#93; , shape &#91; 1 &#93; ) , shape &#91; 1 &#93; )
DCSP if ( format _ string is None ) : DCNL DCSP DCSP format _ string = format _ string.format ( * args , * * kwargs ) DCNL DCSP return format _ string.format ( * args , * * kwargs )
DCSP return _ get _ gecos ( name , &apos; fullname &apos; , fullname )
DCSP if ( not id _ or _ symbols ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( id _ or _ symbols , basestring ) ) : DCNL DCSP DCSP id _ or _ symbols = &#91; &#93; DCNL DCSP if ( not isinstance ( id _ or _ symbols , basestring ) ) : DCNL DCSP DCSP id _ or _ symbols = &#91; &#93; DCNL DCSP if ( not isinstance ( id _ or _ symbols , basestring ) ) : DCNL DCSP DCSP id _ or _ symbols = &#91; &#93; DCNL DCSP if ( not isinstance ( id _ or _ symbols , basestring ) ) : DCNL DCSP DCSP id _ or _ symbols = ( &#91; id _ or _ symbols &#93; + list ( ids _ or _ symbols ) ) DCNL DCSP return { &apos; id &apos; : id _ or _ symbols }
DCSP collector = NestedObjects ( ) DCNL DCSP for obj in objs : DCNL DCSP DCSP if isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP DCSP for obj in objs : DCNL DCSP DCSP DCSP DCSP ( yield obj )
DCSP picks = pick _ types ( inst.info , meg = False , exclude = &apos; bads &apos; ) DCNL DCSP picks = pick _ types ( inst.info , meg = False , eeg = True , exclude = &apos; bads &apos; ) DCNL DCSP picks = pick _ types ( inst.info , meg = False , eeg = True , exclude = &apos; bads &apos; ) DCNL DCSP picks = pick _ types ( inst.info , picks = picks ) DCNL DCSP picks = pick _ types ( inst.info , picks = picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info , picks ) DCNL DCSP picks = pick _ types ( inst.info
DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( context is None ) : DCNL DCSP DCSP context = { } DCNL DCSP if ( not context ) : DCNL DCSP DCSP context = { } DCNL DCSP ret = LazyLoader ( _ module _ dirs ( opts , &apos; serializers &apos; ) , opts , tag = &apos; tag &apos; , pack = { &apos; _ _ salt _ _ &apos; : functions } ) DCNL DCSP ret.pack &#91; &apos; _ _ salt _ _ &apos; &#93; = ret DCNL DCSP return ret
DCSP vpc = get _ vpc ( module , vpc _ id = vpc _ id , vpc _ id = vpc _ id , vpc _ id = vpc _ id , vpc _ id = vpc _ id ) DCNL DCSP if vpc : DCNL DCSP DCSP return vpc DCNL DCSP else : DCNL DCSP DCSP return None
DCSP @ wraps ( meth ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return meth ( self , * args , * * kwargs ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP return wrapper
DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return False DCNL DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return False DCNL DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return False DCNL DCSP cur = dbc.cursor ( ) DCNL DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return False DCNL DCSP cur = dbc.cursor ( ) DCNL DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return False DCNL DCSP cur = dbc.cursor ( ) DCNL DCSP dbc = _ connect ( * * connection _ args ) DCNL DCSP if ( dbc is None ) : DCNL DCSP DCSP return None DCNL DCSP if (
DCSP if isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = source DCNL DCSP elif isinstance ( source , basestring ) : DCNL DCSP DCSP source = ( &apos; % s : DCSP % s &apos; % ( source , source ) ) DCNL DCSP elif isinstance ( source , basestring ) :
DCSP if ( not isinstance ( ava , dict ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for attr in acs : DCNL DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( attr is not None )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP if ( not conn ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP return False
DCSP return unicode ( int ( time.time ( ) ) )
DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative . &apos; ) DCNL DCSP if ( n = = 1 ) : DCNL DCSP DCSP return ( 1.0 / ( ( n * * ( ( n * ( n - k ) ) * * 2 ) ) / ( ( n * * 2 ) * ( n * * 2 ) ) ) ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative . &apos; )
DCSP if copy : DCNL DCSP DCSP scale = scale.@@ lower ( ) DCNL DCSP else : DCNL DCSP DCSP scale = scale DCNL DCSP if copy : DCNL DCSP DCSP scale = ( scale * scale ) DCNL DCSP else : DCNL DCSP DCSP scale = ( scale * scale ) DCNL DCSP return scale
DCSP spec _ list = &#91; &#93; DCNL DCSP if ( not isinstance ( spec , list ) ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93; DCNL DCSP elif isinstance ( spec , list ) : DCNL DCSP DCSP spec _ list = &#91; &#93;
DCSP try : DCNL DCSP DCSP with open ( dev , &apos; r &apos; ) as fd : DCNL DCSP DCSP DCSP fd = open ( dev , &apos; r &apos; ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP return ( ( ( ( ( ( x - y ) * * 2 ) + ( y * * 2 ) ) + ( y * * 2 ) ) + ( y * * 2 ) )
DCSP canvas = FigureCanvas@@ PS ( figure ) DCNL DCSP manager = FigureManager@@ Pdf ( canvas , num ) DCNL DCSP return manager
DCSP if ( results is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( results ) = = 1 ) : DCNL DCSP DCSP return results &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return results &#91; 0 &#93;
DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP bits = token.split _ contents ( ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 2 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! =
DCSP if ( not hasattr ( klass , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; spec DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( klass , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; spec DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( klass , python.class _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; spec DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP object &apos; ) DCNL DCSP if ( not hasattr ( klass , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; spec DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP object &apos; ) DCNL DCSP if ( not hasattr ( klass , &apos; _ _ init _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; spec DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP type &apos; ) DCNL DCSP if ( type ( klass )
DCSP try : DCNL DCSP DCSP import re DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return get _ ipython ( ) DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( not isinstance ( target , basestring ) ) : DCNL DCSP DCSP raise ConfigurationError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s . &apos; % ( spec , version ) ) ) DCNL DCSP if ( version is None ) : DCNL DCSP DCSP raise ConfigurationError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s . &apos; % ( spec , version ) ) ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP % s . &apos; % ( spec , version ) ) )
DCSP host = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL
DCSP ( a , axis ) = _ chk _ asarray ( a , axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP n = a.count ( axis = axis ) DCNL DCSP if ( axis = = 0 ) : DCNL DCSP DCSP return a DCNL DCSP else : DCNL DCSP DCSP return a
DCSP vm _ = config.get _ cloud _ config _ value ( &apos; create &apos; , vm _ , _ _ opts _ _ , search _ global = False ) DCNL DCSP if ( vm _ id is None ) : DCNL DCSP DCSP raise SaltCloudNotFound ( &quot; The DCSP specified DCSP VM DCSP &apos; { 0 } &apos; DCSP could DCSP not DCSP be DCSP found . &quot; .format ( vm _ ) ) DCNL DCSP return vm _
DCSP global mem _ info DCNL DCSP mem _ info = &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP mem _ info = get _ mem _ info ( ) DCNL DCSP except : DCNL DCSP DCSP mem _ info = None DCNL DCSP return mem _ info
DCSP if ( not params ) : DCNL DCSP DCSP return None DCNL DCSP result = &#91; &#93; DCNL DCSP for ( name , value ) in params.items ( ) : DCNL DCSP DCSP if isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP DCSP result.append ( ( &apos; % s = % s &apos; % ( name , params ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( ( &apos; % s = % s &apos; % ( name , params ) ) ) DCNL DCSP return result
DCSP pass
DCSP if hasattr ( attribute , &apos; _ _ iter _ _ &apos; ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP if ( not isscalar ( DE.t ) ) : DCNL DCSP DCSP raise ValueError ( &apos; DE.t DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP derivation = Poly ( ( ( ( DE.t * * 2 ) + ( DE.t * * 2 ) ) + ( DE.t * * 2 ) ) ) DCNL DCSP derivation = Poly ( ( ( DE.t * * 2 ) + ( DE.t * * 2 ) ) , DE.t ) DCNL DCSP derivation = Poly ( ( ( ( DE.t * * 2 ) + ( DE.t * * 2 ) ) + ( DE.t * * 2 ) ) , ( DE.t * * 2 ) ) DCNL DCSP if ( derivation = = 0 ) : DCNL DCSP DCSP return ( dn.@@ lower ( ) = = DE.d.degree ( DE.t ) ) DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP poly = poly ( derivation , DE ) DCNL DCSP DCSP except StopIteration : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP if ( derivation = = None ) : DCNL DCSP DCSP DCSP return (
DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _ spontaneous _ environment@@ s.clear ( ) DCNL DCSP _
DCSP if ( repo _ name is None ) : DCNL DCSP DCSP repo _ name = _ get _ repo _ name ( profile = profile ) DCNL DCSP if ( repo _ name is None ) : DCNL DCSP DCSP repo _ name = _ get _ repo _ name ( profile _ name ) DCNL DCSP if ( not repo _ id ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return { } DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return False DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return False DCNL DCSP if ( not repo _ name ) : DCNL DCSP DCSP return False DCNL DCSP
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if G.is _ multigraph ( ) : DCNL DCSP DCSP edges = H.edges ( keys = True ) DCNL DCSP else : DCNL DCSP DCSP edges = G.edges ( ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL DCSP R.add _ edges _ from ( edges ) DCNL
DCSP if ( not uri ) : DCNL DCSP DCSP return False DCNL DCSP parsed = urlparse ( uri ) DCNL DCSP if ( parsed is None ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP parsed = urlparse ( uri ) DCNL DCSP DCSP if ( parsed is None ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP course _ info = get _ course _ info _ module ( request , course , course _ key ) DCNL DCSP return get _ course _ info _ module ( request , course _ info , course _ key , course _ key )
DCSP hosts = models.Host.query _ objects ( hosts _ to _ release ) DCNL DCSP reservations.@@ force _ release ( host _ to _ release , username = username )
DCSP print &apos; DCSP &apos; .join ( sys.argv &#91; : ( -1 ) &#93; ) DCNL DCSP print ( &apos
DCSP existing _ user = get _ object _ or _ 404 ( requesting _ user , preference _ key , username = username ) DCNL DCSP return UserPreference@@ .get _ value ( requesting _ user , preference _ key , username )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP delete _ disk DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; name &apos; not in kwargs ) : DCNL
DCSP return do _ job ( &apos; Test DCSP Test &apos; )
DCSP return time.strftime ( &apos; % Y- % m- % d DCSP % H : % M : % S &apos; , time.gmtime ( t ) )
DCSP if ( fs _ type is None ) : DCNL DCSP DCSP fs _ type = &apos; mkfs &apos; DCNL DCSP if ( fs _ type is None ) : DCNL DCSP DCSP fs _ type = &apos; mkfs &apos; DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP kwargs &#91; &apos; mkfs &apos; &#93; = { } DCNL DCSP if ( fs _ type is not None ) : DCNL DCSP DCSP
DCSP try : DCNL DCSP DCSP enqueue _ task ( event _ id ) DCNL DCSP except Exception as e : DCNL DCSP DCSP logging.error ( ( &apos; Could DCSP not DCSP connect DCSP to DCSP % s : DCSP % s &apos; % ( e , e ) ) )
DCSP return a.std ( axis = axis , out = out , keepdims = keepdims )
DCSP try : DCNL DCSP DCSP with open ( text , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP text = f.read ( ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass DCNL DCSP return text
DCSP if ( len ( table _ table _ limit ) = = 1 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP for path in path _ list : DCNL DCSP DCSP if os.path.exists ( path ) : DCNL DCSP DCSP DCSP return path DCNL DCSP return path _ list
DCSP if ( not isinstance ( record , list ) ) : DCNL DCSP DCSP record = &#91; &#93; DCNL DCSP for item in record : DCNL DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if isinstance ( item , ( int , long ) ) : DCNL DCSP DCSP DCSP DCSP val = int ( val ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP val + = ( &apos; % s &apos; % item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP val + = ( &apos; % s &apos; % item ) DCNL DCSP
DCSP if use _ sudo : DCNL DCSP DCSP install _ setuptools ( python _ cmd = python _ cmd ) DCNL DCSP else : DCNL DCSP DCSP install _ setuptools ( python _ cmd = python _ cmd , use _ sudo = use _ sudo )
DCSP result = &#91; &#93; DCNL DCSP for task in get _ all _ files ( ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = json.load ( f ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP errors.append ( e ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = json.loads ( result ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP logger.error ( ( &apos; Failed DCSP to DCSP find DCSP % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = json.loads ( result ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP logger.error ( ( &apos; Failed DCSP to DCSP find DCSP task DCSP snapshots : DCSP % s &apos; % e ) ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not result ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result = json.loads ( result ) DCNL DCSP return result
DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ call _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import sys DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP sys.stdin.@@ close ( ) DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP DCSP sys.stdin.@@ close ( ) DCNL DCSP DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP DCSP sys.stdin.@@ close ( ) DCNL DCSP DCSP DCSP DCSP DCSP
DCSP @ wraps ( func ) DCNL DCSP def inner ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP conn.close ( ) DCNL DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP return ( ( col + &apos; DCSP &apos; ) + col )
DCSP if ( not filename ) : DCNL DCSP DCSP return None DCNL DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( msg is None ) : DCNL DCSP DCSP msg = msg DCNL DCSP else : DCNL DCSP DCSP warnings.warn ( msg , stacklevel = stacklevel )
DCSP return ( ( a = = b ) and ( b = = b ) )
DCSP if ( not ports ) : DCNL DCSP DCSP return DCNL DCSP for i in range ( port ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ( int ( port ) , int ( port ) ) ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP if ( stop is None ) : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( not stop ) : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( not stop ) : DCNL DCSP DCSP DCSP
DCSP if ( not u ) : DCNL DCSP DCSP return dup _ mul _ ground ( f , c , K ) DCNL DCSP else : DCNL DCSP DCSP return dmp _ mul _ ground ( f , c , u , K )
DCSP title = title _ dict.get ( title , None ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title = title DCNL DCSP title = title.strip ( ) DCNL DCSP if ( title is None ) : DCNL DCSP DCSP title
DCSP return Semaphore ( seconds , value )
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP case.@@ run ( ( &apos; \ n
DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) : DCNL DCSP DCSP fs _ class = None DCNL DCSP if ( fs _ class is None ) :
DCSP if ( not isinstance ( model , Model ) ) : DCNL DCSP DCSP raise TypeError ( &apos; model DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP model = Model ( ) DCNL DCSP for model in model . _ meta.many _ to _ many : DCNL DCSP DCSP if isinstance ( model , Model ) : DCNL DCSP DCSP DCSP model = model ( * args , * * kwargs ) DCNL DCSP DCSP elif isinstance ( model , Model ) : DCNL DCSP DCSP DCSP model = model ( * args , * * kwargs ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP Model = None DCNL DCSP return model
DCSP scenarios = testcase.pidlockfile _ scenarios DCNL DCSP scenarios = &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP scenarios = pidlockfile _ scenario &#91; &apos; pidlockfile _ scenario &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP scenarios = pidlockfile _ scenario &#91; &apos; pidlockfile _ scenario &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP scenarios = pidlockfile _ scenario &#91; &apos; pidlockfile _ scenario &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP scenarios = pidlockfile _ scenario &#91; &apos; pidlockfile _ scenario &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP return scenarios
DCSP centerMinusBegin = ( center - begin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin ) DCNL DCSP centerMinusBeginLength = abs ( centerMinusBegin )
DCSP class Foo ( object , ) : DCNL DCSP DCSP def _ _ import _ _ ( self ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP AssertUnreachable ( ) DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP AssertUnreachable ( ) DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP AssertUnreachable ( ) DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL
DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP resp = conn.getresponse ( ) DCNL DCSP response.raise _ for _ status ( ) DCNL DCSP return resp
DCSP for ( i , v ) in enumerate ( vectors ) : DCNL DCSP DCSP for i in range ( ( len ( vectors ) - 1 ) ) : DCNL DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP DCSP DCSP DCSP for i in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( ( i + 1 ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in range ( n ) : DCNL DCSP DCSP
DCSP client = get _ client ( ) DCNL DCSP sample.@@ run ( )
DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP return args &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return args &#91; 0 &#93;
DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL DCSP kde = stats.gaussian _ kde ( data ) DCNL
DCSP bits = token.contents.split ( ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP takes DCSP one DCSP argument &quot; % bits &#91; 0 &#93; ) ) DCNL DCSP if ( len ( bits ) ! = 3 ) : DCNL DCSP DCSP raise TemplateSyntaxError ( ( &quot; &apos; % s &apos; DCSP tag DCSP requires DCSP
DCSP authenticate ( username , password ) DCNL DCSP site = Site.objects.get _ current ( ) DCNL DCSP return &#91; blog _ structure ( author ) &#93;
DCSP if ( not isinstance ( value , variable.Variable ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , variable.Variable ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , ( int , long ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( (
DCSP try : DCNL DCSP DCSP with open ( fname ) as f : DCNL DCSP DCSP DCSP content = f.read ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP content = f.read ( ) DCNL DCSP DCSP except IOError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP content = f.read ( ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP content = f.read ( ) DCNL DCSP DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP DCSP content = f.read ( ) DCNL DCSP DCSP DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not hasattr ( data , &apos;
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win _ dacl : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP with open ( fileobj , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( s )
DCSP if ( conn is None ) : DCNL DCSP DCSP conn = get _ client ( ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP raise Exception ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % pkg _ files ) ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP raise Exception ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % pkg _ files ) ) DCNL DCSP if ( not os.path.exists ( pkg _ files ) ) : DCNL DCSP DCSP raise Exception ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % pkg _ files ) )
DCSP X _ gt = np.array ( &#91; &#91; 0.92923648 , 0.76103773 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.13347175 , 0.12167502 &#93; , &#91; 0.09@@ 40@@ 35 , ( -2.5529@@ 8982 ) &#93; &#93; ) DCNL DCSP X _ gt = np.array ( &#91; &#91; 0.92923648 , 0.76103773 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.13347175 , 0.12167502 &#93; , &#91; 0.09@@ 40@@ 35 , ( -2.5529@@ 8982 ) &#93; &#93; ) DCNL DCSP X _ gt = np.array ( &#91; &#91; 0.92923648 , 0.76103773 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.13347175 , 0.12167502 &#93; , &#91; 0.09@@ 40@@ 35 , ( -2.5529@@ 8982 ) &#93; &#93; ) DCNL DCSP X _ gt = np.array ( &#91; &#91; 0.92923648 , 0.76103773 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.13347175 , 0.12167502 &#93; , &#91; 0.09@@ 40@@ 35 , ( -2.5529@@ 8982 ) &#93; &#93; ) DCNL DCSP X _ gt = np.array ( &#91; &#91; 0.92923648 , 0.76103773 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.47104475 , 0.44386323 &#93; , &#91; 0.13347175 , 0.12167502 &#93; , &#91; 1.@@ 92@@ 365@@ 863 , 0.827@@ 18@@ 767 &#93; , &#91;
DCSP return nav _ link ( text , * args , * * kwargs )
DCSP ret = { } DCNL DCSP for role in _ _ opts _ _ &#91; &apos; roles &apos; &#93; : DCNL DCSP DCSP if ( &apos; roles &apos; in attrs ) : DCNL DCSP DCSP DCSP ret &#91; role &#93; = &#91; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role &#93; = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; role
DCSP XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ timestamp@@ er.@@ Timestamp@@ er@@ BuildWrapper &apos; )
DCSP if ( not context ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP locale = context.get ( &apos; locale &apos; ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return ( &apos; % s / % s &apos; % ( locale , locale ) )
DCSP if ( operation is None ) : DCNL DCSP DCSP max _ size = ( max _ size * max _ size ) DCNL DCSP return ( operation , doc _ size , max _ size )
DCSP model = session . _ session DCNL DCSP try : DCNL DCSP DCSP model = session.query ( models ) DCNL DCSP except Exception as e : DCNL DCSP DCSP raise Exception ( ( &apos; Failed DCSP to DCSP create DCSP model DCSP % s : DCSP % s &apos; % ( model . _ _ class _ _ . _ _ name _ _ , e ) ) ) DCNL DCSP return model
DCSP if ( discovery _ info is None ) : DCNL DCSP DCSP return DCNL DCSP homematic = get _ component ( &apos; homematic &apos; ) DCNL DCSP return homematic.setup _ hmdevice _ discovery _ helper ( hass , HM@@ Cover , discovery _ info , add _ devices )
DCSP credentials = session . _ get _ credentials ( ) DCNL DCSP credentials = credentials DCNL DCSP return credentials
DCSP click.@@ edit ( )
DCSP a = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL DCSP p = rs.randn ( 20 , 20 ) DCNL
DCSP return &apos; &apos;.join ( &#91; ( &apos; % s = % s &apos; % ( ord ( x ) , ord ( c ) ) ) for ( k , v ) in value &#93; )
DCSP sol = &#91; &#93; DCNL DCSP for ( k , v ) in zip ( x , y ) : DCNL DCSP DCSP sol.append ( Eq ( x ( x ) , v ) ) DCNL DCSP DCSP sol.append ( Eq ( x ( t ) , v ) ) DCNL DCSP return sol
DCSP if show _ parent : DCNL DCSP DCSP paths = &#91; path &#93; DCNL DCSP else : DCNL DCSP DCSP paths = &#91; &#93; DCNL DCSP for path in paths : DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if os.path.exists ( path ) : DCNL DCSP DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP return path
DCSP return in6 _ or ( ( lambda x : x &#91; 0 &#93; ) , ( lambda x : ( ( x &#91; 0 &#93; = = &apos; 1&apos; ) and ( x &#91; 0 &#93; = = &apos; localhost &apos; ) ) ) )
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP warnings.simplefilter ( &apos;
DCSP if hasattr ( func , &apos; _ _ iter _ _ &apos; ) : DCNL DCSP DCSP return func . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return func . _ _ name _ _
DCSP tags = &#91; &#93; DCNL DCSP for tag in formats : DCNL DCSP DCSP if ( tag = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP if ( tag = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP if ( tag = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP if ( tag = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP if ( tag = = u &apos; &apos; ) : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tag = u &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP
DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = 0 DCNL DCSP if ( count is None ) : DCNL DCSP DCSP count = len ( new ) DCNL DCSP if ( count is not None ) : DCNL DCSP DCSP if ( count is None ) : DCNL DCSP DCSP DCSP count = 0 DCNL DCSP DCSP else : DCNL
DCSP if ( not isinstance ( s , unicode ) ) : DCNL DCSP DCSP s = s.encode ( encoding ) DCNL DCSP return s
DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( id _ or _ ins ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP order _ book _ id = assure _ order _ book _ id ( order _ book _ id ) DCNL DCSP return
DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( TypeError )
DCSP return dict ( ( ( k , v ) for ( k , v ) in G.edges ( ) if ( k in R ) ) )
DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.delete _ principal _ policy ( policyName = policyName ) DCNL DCSP DCSP return { &apos; deleted &apos; : True } DCNL DCSP except ClientError as e : DCNL DCSP DCSP return { &apos; deleted &apos; : False , &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP reload &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP if ( config &#91; DOMAIN &#93; is None ) : DCNL DCSP DCSP config &#91; DOMAIN &#93; &#91; DOMAIN &#93; = config &#91; DOMAIN &#93; DCNL DCSP else : DCNL DCSP DCSP config &#91; DOMAIN &#93; &#91; DOMAIN &#93; = config &#91; DOMAIN &#93;
DCSP if ( not hasattr ( func , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; func DCSP must DCSP be DCSP callable &apos; ) DCNL DCSP if hasattr ( func , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return func . _ _ name _ _ DCNL DCSP else : DCNL DCSP DCSP return func.func _ code.co _ varnames &#91; : : ( -1 ) &#93;
DCSP _ check _ access ( &apos; group _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; group _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; group _ create &apos; , context , data _ dict ) DCNL DCSP return _ group _ or _ org _ create ( context , data _ dict )
DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( key = = destination ) and ( destination &#91; key &#93; = = destination
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP app = open ( logfile , &apos; w &apos; ) DCNL DCSP try : DCNL DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP for line in line : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP results = &#91; &#93; DCNL DCSP for page in results : DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not perf _ data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( not perf _ data ) or ( not perf _ data ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP files = &#91; &#93; DCNL DCSP for item in get _ all _ files ( ) : DCNL DCSP DCSP if ( count = = 0 ) : DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP count + = 1 DCNL DCSP return count
DCSP cls . _ _ abstract _ _ = True DCNL DCSP return cls
DCSP def cleanup ( ) : DCNL DCSP DCSP &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP &apos; DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP request.addfinalizer ( cleanup ) DCNL DCSP return config
DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( headers is None ) :
DCSP status = client.show _ volume ( volume _ id ) DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos; &#93; DCNL DCSP status = status &#91; &apos; status &apos;
DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % expr ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % expr ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % expr ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % expr ) ) DCNL DCSP if ( not isinstance ( expr , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP string &apos; % expr ) ) DCNL
DCSP FigureClass = kwargs.pop ( &apos; FigureClass &apos; , Figure ) DCNL DCSP thisFig = FigureClass ( * args , * * kwargs ) DCNL DCSP return new _ figure _ manager _ given _ figure ( num , thisFig )
DCSP return md5 ( case.mktemp ( ) ) .hexdigest ( )
DCSP try : DCNL DCSP DCSP addon = apps.get _ model ( u &apos;wiki &apos; , u &apos;@@ Review &apos; ) DCNL DCSP except ImportError : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP apps.get _ model ( u &apos;wiki &apos; , u &apos;@@ DocumentSpam@@ Attempt &apos; ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.exception ( u &apos;Failed DCSP to DCSP set DCSP review DCSP request : DCSP % s &apos; , e ) DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP addon.@@ save ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.exception ( u &apos;Failed DCSP to DCSP set DCSP review DCSP request DCSP for DCSP addon DCSP % s : DCSP % s &apos; , review _ id , e ) DCNL DCSP DCSP return False DCNL DCSP return True
DCSP try : DCNL DCSP DCSP return eval ( expr , * * kwargs ) DCNL DCSP except KeyError : DCNL DCSP DCSP return expr
DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if ( full _ value is None ) : DCNL DCSP DCSP full _ value = &apos; &apos; DCNL DCSP if full _ match : DCNL DCSP DCSP if full _ match : DCNL DCSP DCSP DCSP if full _ match : DCNL DCSP DCSP DCSP DCSP if full _ match : DCNL DCSP DCSP DCSP DCSP DCSP if full _ match : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if full _ match : DCNL DCSP DCSP DCSP
DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP fid.write ( np.array ( &#91; &#93; ) ) DCNL DCSP DCSP DCSP fid.write ( np.array ( &#91; &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP fid.write ( np.array ( &#91; &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP fid.write ( np.array ( &#91; &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP fid.write ( np.array ( &#91; &#93; ) )
DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP _ check _ access ( &apos; resource _ create &apos; , context , data _ dict ) DCNL DCSP resource = context &#91; &apos; resource &apos; &#93; DCNL
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP G = G. _ _ class _ _ ( ) DCNL DCSP G.add _ edges _ from ( pairwise ( G ) ) DCNL DCSP G.add _ edges _ from (
DCSP if ( not isinstance ( password , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError ( &apos; Key DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( password ) &lt; 2 ) : DCNL DCSP DCSP raise ValueError (
DCSP if ( not uri ) : DCNL DCSP DCSP if ( not uri ) : DCNL DCSP DCSP DCSP url = &apos; / &apos; DCNL DCSP else : DCNL DCSP DCSP uri = ( &apos; / &apos; + uri ) DCNL DCSP url = ( &apos; % s : / / % s &apos; % ( uri , uri ) ) DCNL DCSP if ( body is not None ) : DCNL DCSP DCSP cherrypy.log ( ( &apos; Location : DCSP % s &apos; % url ) , &apos; TOOLS.@@ REFERER &apos; ) DCNL DCSP if ( body is not None ) : DCNL DCSP DCSP response.headers &#91; &apos; Location &apos; &#93; = code DCNL DCSP return url ( uri , permanent = permanent , code = code , body = body , response = body )
DCSP with open ( filename , &apos; r &apos; , encoding = &apos; utf-8 &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; .join ( ( ( &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in metadata.items ( ) ) ) ) DCNL DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , usage@@ Str ) ) ) DCNL DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , usage@@ Str ) ) )
DCSP return get _ test _ view _ sql ( )
DCSP try : DCNL DCSP DCSP utils.run ( ( &apos; % ( vg _ name ) s DCSP % ( lv _ name ) s DCSP % ( lv _ name ) s DCSP % ( lv _ name ) s &apos; % locals ( ) ) ) DCNL DCSP except error.CmdError : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return True
DCSP cmd = &apos; cron DCSP cron DCSP { 0 } &apos; .format ( user ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP global _ logger DCNL DCSP if ( _ logger is None ) : DCNL DCSP DCSP _ logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP handler.setFormatter ( formatter ) DCNL DCSP return logger
DCSP while True : DCNL DCSP DCSP for word in rels : DCNL DCSP DCSP DCSP word = elem.@@ xpath ( &apos; / &apos; ) DCNL DCSP DCSP DCSP if ( word in rels ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP if ( word in rels ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP word = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP if ( word in rels ) : DCNL DCSP DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP DCSP DCSP anchor = word &#91; 1 : &#93; DCNL DCSP
DCSP timestamp = datetime.datetime.strptime ( idx , &apos; % Y- % m- % dT % H : % M : % S &apos; ) DCNL DCSP timestamp = datetime.datetime.strptime ( timestamp , &apos; % Y- % m- % dT % H : % M : % S &apos; ) DCNL DCSP return timestamp
DCSP if auth : DCNL DCSP DCSP return get _ paged _ request ( project , num = num ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( ( text is not None ) and ( text &#91; ( -1 ) &#93; = = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP text = text &#91; 2 : &#93; DCNL DCSP return ( text &#91; : ( -1 ) &#93; + &apos; \ n &apos; )
DCSP for i in &#91; 1 , 2 , 3 &#93; : DCNL DCSP DCSP print &apos; LOOP &apos; DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return ( a * b )
DCSP print ( _ _ doc _ _ + &apos; \ n &apos; ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.stdout.flush ( ) DCNL DCSP sys.exit ( code )
DCSP if ( opts is None ) : DCNL DCSP DCSP opts = { } DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts =
DCSP if ( not config _ path ) : DCNL DCSP DCSP return DCNL DCSP config _ path = config _ path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP config _ path = config _ path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP config _ path = config _ path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP config _ path = config _ path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP config _ path = os.path.join ( config _ path , config _ path ) DCNL DCSP try : DCNL DCSP DCSP with open ( config _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( str ( e ) ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP try : DCNL DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP config = config &#91; config _ path &#93; DCNL DCSP DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP config &#91; key &#93; = config &#91; key &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP config &#91;
DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( klass , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; klass DCSP
DCSP if retries : DCNL DCSP DCSP retries = ( retries - 1 ) DCNL DCSP DCSP if ( not passed ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt; 0 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( retries &gt;
DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( unifrac _ res ) = =
DCSP return s3 _ rest _ controller ( &apos; hrm &apos; , &apos; organisation &apos; )
DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id &#91; &apos; youtube _ id &apos; &#93; DCNL DCSP youtube _ id = youtube _ id
DCSP if ( not isinstance ( addresses , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( addresses , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( not isinstance ( addresses , list ) ) : DCNL DCSP DCSP return addresses DCNL DCSP if ( not isinstance ( addresses , list ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP ret = &#91; &#93; DCNL DCSP for addr in addresses : DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( addr , list ) ) : DCNL DCSP DCSP DCSP
DCSP for handler in handler _ list : DCNL DCSP DCSP handler = handler _ list &#91; handler &#93; DCNL DCSP DCSP if handler : DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler.@@ add _ handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler.@@ add _ handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler.@@ add _ handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler.@@ add _ handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL DCSP DCSP DCSP handler = handler ( handler ) DCNL
DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; DCSP &apos; , text )
DCSP rc ( u &apos;image &apos; , cmap = u &apos;@@ pri@@ sm &apos; ) DCNL DCSP im = gci ( ) DCNL DCSP if ( im is not None ) : DCNL DCSP DCSP im.set _ cmap ( cm.@@ pri@@ sm )
DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False , ignore _ retcode = ignore _ retcode , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt )
DCSP data = np.asarray ( data ) DCNL DCSP if ( data is None ) : DCNL DCSP DCSP return np.array ( &#91; &#93; ) DCNL DCSP else : DCNL DCSP DCSP return ( ( data &#91; : , : : ( -1 ) &#93; + data &#91; : : ( -1 ) &#93; ) + data &#91; : : ( -1 ) &#93; )
DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; quot ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; quot ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; # 39 ; &apos; ) DCNL DCSP data = data.replace ( &apos; &amp; &apos; , &apos; &amp; amp ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; quot ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; # 39 ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; # 39 ; &apos; ) .replace ( &apos; &quot; &apos; , &apos; &amp; # 39 ; &apos; ) DCNL DCSP return data
DCSP return ( &apos; % s : % s &apos; % ( key _ prefix , version ) )
DCSP numa _ topology = get _ host _ numa _ info _ from _ instance ( host = host , instance = instance ) DCNL DCSP if ( numa _ topology is not None ) : DCNL DCSP DCSP numa _ topology = instance &#91; &apos; instance _ uuid &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP host _ numa _ topology = instance &#91; &apos; instance _ uuid &apos; &#93; DCNL DCSP return ( host _ numa _ topology , instance _ numa _ topology )
DCSP if ( state is None ) : DCNL DCSP DCSP state = context.core.mix@@ er.get _ mute ( ) .get ( ) DCNL DCSP if ( state is None ) : DCNL DCSP DCSP state = context.core.tracklist.@@ clear ( ) DCNL DCSP else : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP state &apos; )
DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = None DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = &apos; &apos; DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = &apos; &apos; DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = &apos; &apos; DCNL DCSP if ( sender is None ) : DCNL DCSP DCSP sender = &apos; &apos; DCNL DCSP
DCSP if ( filename in os.environ ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return os.path.join ( _ _ opts _ _ &#91; &apos; cachedir &apos; &#93; , &apos; host &apos; )
DCSP result = &#91; &#93; DCNL DCSP for bear _ dirs in bear _ dirs : DCNL DCSP DCSP bear _ bears = &#91; bear for bear in bear _ dirs if ( bear not in bear _ dirs ) &#93; DCNL DCSP DCSP bear _ bears = &#91; &#93; DCNL DCSP DCSP for bear in bear _ dirs : DCNL DCSP DCSP DCSP bear _ bears = &#91; bear for bear in bear _ dirs if ( bear not in bear _ dirs ) &#93; DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP DCSP DCSP bear _ bears &#91; bear _ name &#93; = bear _ dirs DCNL DCSP
DCSP if ( password is None ) : DCNL DCSP DCSP salt = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( password ) DCNL DCSP if isinstance ( password , six.string _ types ) : DCNL DCSP DCSP password = password.encode ( &apos; utf-8 &apos; ) DCNL DCSP return ( password + salt )
DCSP if ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( values is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if ( radius = = 1 ) : DCNL DCSP DCSP return ( 1.0 / ( 1.0 / ( 1.0 / ( 1.0 - center ) ) ) ) DCNL DCSP else : DCNL DCSP DCSP return ( 1.0 / ( 1.0 / ( 1.0 - ( 1.0 / ( 1.0 - center ) ) ) ) )
DCSP from boto.@@ red@@ shift.@@ layer1 import EC2Container@@ ServiceConnection DCNL DCSP return get _ regions ( &apos; dynamodb &apos; , connection _ cls = RDSConnection )
DCSP if ( node is None ) : DCNL DCSP DCSP var = numpy.asarray ( arr ) DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( node is None ) : DCNL DCSP DCSP return False DCNL
DCSP return re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , text )
DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP if ( args is None ) :
DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP DCSP timeout = occupied _ port _ timeout DCNL DCSP if ( timeout is None ) : DCNL DCSP
DCSP command _ parser _ parser = get _ service _ parser ( run ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( run ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( run ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( command ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( command ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( command ) DCNL DCSP command _ parser _ parser = get _ service _ parser ( command ) DCNL DCSP command _ parser _ parser = get _ service _ command _ parser ( command ) DCNL DCSP return command _ parser _ parser
DCSP qos = objects.@@ QualityOfService@@ Specs ( context , qos _ specs _ id , specs ) DCNL DCSP if ( not specs ) : DCNL DCSP DCSP raise exception.VolumeType@@ NotFound ( qos _ specs _ id = qos _ specs _ id , specs = specs ) DCNL DCSP return specs
DCSP exts = &#91; &#93; DCNL DCSP for ext in extensions : DCNL DCSP DCSP if ( ext in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext not in extensions ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ext in extensions ) : DCNL DCSP DCSP DCSP
DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 1 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 0 ) : DCNL DCSP DCSP return 1 DCNL DCSP if ( n _ objs = = 1 ) : DCNL DCSP
DCSP if ( ax is None ) : DCNL DCSP DCSP ax = gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP fig = plt.gcf ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( fig is None ) : DCNL DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP if ( ax is not None ) :
DCSP return _ connectivity _ from _ data ( src , n _ times , dist , verbose = verbose )
DCSP return IMPL.security _ group _ rule _ get _ by _ instance ( context , instance _ uuid )
DCSP font = get _ font ( section , option , font _ size _ delta ) DCNL DCSP if ( not font ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None DCNL DCSP if ( not font _ size _ delta ) : DCNL DCSP DCSP return None
DCSP with pytest.raises ( ValidationError ) : DCNL DCSP DCSP tp0 _ store _ fs.@@ save ( )
DCSP if ( boolean and ( not isinstance ( boolean , bool ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if isinstance ( boolean , bool ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return method ( request , * args , * * kwargs ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP if ( e.code = = 403 ) : DCNL DCSP DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP return None
DCSP try : DCNL DCSP DCSP os.remove ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP if isinstance ( obj , six.string _ types ) : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP else : DCNL DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP if isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP for obj in obj : DCNL DCSP DCSP DCSP if isinstance ( obj , ( list , tuple ) ) : DCNL DCSP DCSP DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP obj = obj DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj = obj . _ _ dict _ _ DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj = obj DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP obj =
DCSP if ( len ( shape ) = = 1 ) : DCNL DCSP DCSP return array ( input , index = index , dtype = dtype , out _ dtype = out _ dtype , default = default ) DCNL DCSP else : DCNL DCSP DCSP return func ( input , labels , index , func , out _ dtype , default = default )
DCSP with open ( fileName , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return IMPL.backup _ destroy ( context , backup _ id )
DCSP resource = service &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL DCSP resource = resource &#91; &apos; resource &apos; &#93; DCNL
DCSP return t
DCSP prefix = ( &apos; % s _ % s &apos; % ( user . _ _ class _ _ . _ _ name _ _ , page . _ _ class _ _ . _ _ name _ _ ) ) DCNL DCSP if ( prefix is not None ) : DCNL DCSP DCSP prefix = ( &apos; % s / % s &apos; % ( prefix , page _ size ) ) DCNL DCSP else : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP return render ( request , template , context , page _ size = page _ size , prefix = prefix )
DCSP if full : DCNL DCSP DCSP return ( ( pattern + &apos; DCSP &apos; ) + pattern ) DCNL DCSP else : DCNL DCSP DCSP return re.compile ( pattern )
DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is not None ) : DCNL DCSP DCSP fig.subplots _ adjust ( * * kwds ) DCNL DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP if ( ax is not None ) : DCNL DCSP DCSP fig.subplots _ adjust ( * * kwds ) DCNL DCSP else : DCNL DCSP
DCSP obj = get _ object _ or _ 404 ( req.user , id = id ) DCNL DCSP if form.is _ valid ( ) : DCNL DCSP DCSP form.save ( ) DCNL DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; favorite _ favorite &apos; , args = &#91; favorite@@ .pk &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; favorite _ favorite &apos; , args = &#91; favorite@@ .pk &#93; ) )
DCSP global _ task _ user DCNL DCSP _ task _ user = f
DCSP product = get _ object _ or _ 404 ( Product , pk = order _ id ) DCNL DCSP return render _ to _ response ( &apos; sales / ordered _ product _ add &apos; , { &apos; order &apos; : order } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if ( path is None ) : DCNL DCSP DCSP path = open ( path , &apos; rb &apos; ) DCNL DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if ( namespaces is None ) : DCNL DCSP DCSP namespaces = { } DCNL DCSP if namespaces : DCNL DCSP DCSP if namespaces : DCNL DCSP DCSP DCSP builder = Expat@@ BuilderNS ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP builder = Expat@@ Builder ( ) DCNL DCSP else : DCNL
DCSP lines = &#91; line.strip ( ) for line in lines &#93; DCNL DCSP lines = &#91; line.strip ( ) for line in lines &#93; DCNL DCSP return lines
DCSP for i in range ( len ( val ) ) : DCNL DCSP DCSP if ( i = = i ) : DCNL DCSP DCSP DCSP ( yield i )
DCSP return IMPL.worker _ destroy ( context , * * filters )
DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( &apos; cmd.run _ stdout &apos; , output _ loglevel = &apos; trace &apos; , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP raise CommandExecutionError ( &apos; Unable DCSP to DCSP get DCSP volume DCSP volume : DCSP { 0 } &apos; .format ( out &#91; &apos; stderr &apos; &#93; ) ) DCNL DCSP return info &#91; &apos; stdout &apos; &#93;
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP for i in range ( 0 , len ( sequence ) , size ) : DCNL DCSP DCSP ( yield sequence &#91; i : ( i + size ) &#93; )
DCSP if isinstance ( action , ( list , tuple ) ) : DCNL DCSP DCSP filters.insert ( 0 , item ) DCNL DCSP else : DCNL DCSP DCSP filters.insert ( 0 , item )
DCSP if ( &apos; tempest / lib / &apos; not in filename ) : DCNL DCSP DCSP ( yield ( 0 , &apos; Unable DCSP to DCSP find DCSP local DCSP library DCSP from DCSP tempest / lib / &apos; ) )
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if _ _ opts _ _ &#91; &apos; test &apos; &#93; : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP return ret
DCSP if ( not is _ centos _ or _ rhel ( distribution ) ) : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution ) DCNL DCSP if ( distribution is None ) : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution ) DCNL DCSP if ( distribution is None ) : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution ) DCNL DCSP if ( distribution is None ) : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution ) DCNL DCSP else : DCNL DCSP DCSP raise DistributionNotSupported ( distribution = distribution )
DCSP return jsonify ( { &apos; delay &apos; : delay , &apos; delay &apos; : delay } )
DCSP return ( ( unit _ 1 &lt; = unit _ 2 ) and ( unit _ 2 &lt; = unit _ 2 &lt; = unit _ 2 ) )
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP return True
DCSP for ( i , v ) in enumerate ( p ) : DCNL DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP return v DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return v
DCSP if ( not no _ flow ) : DCNL DCSP DCSP raise ValueError ( &apos; IP DCSP address DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first = None DCNL DCSP if ( first is None ) : DCNL DCSP DCSP first =
DCSP if ( use _ datetime is None ) : DCNL DCSP DCSP parser = Expat@@ Parser ( ) DCNL DCSP else : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = FastParser ( target ) DCNL DCSP else : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = FastParser ( target ) DCNL DCSP if FastParser : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = FastParser ( target ) DCNL DCSP else : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = FastParser ( target ) DCNL DCSP if FastParser : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = FastParser ( target ) DCNL DCSP else : DCNL DCSP DCSP mkdatetime = _ datetime DCNL DCSP DCSP parser = Expat@@ Parser ( target ) DCNL DCSP return target
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 3 ) DCNL DCSP packet = ( a / b ) DCNL DCSP return packet
DCSP return Response ( &apos; h1 &apos; )
DCSP parsed = parse _ json ( full _ handle ) DCNL DCSP if ( parsed is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP parsed = parse _ http _ response ( json _ handle , http _ method = http _ method ) DCNL DCSP return parsed
DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val &lt; 0 ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP integer &apos; % val ) ) DCNL DCSP if ( val &lt; 0 ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP integer &apos; % val ) ) DCNL DCSP if ( val &lt; 0 ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP integer &apos; % val ) ) DCNL DCSP return ( ( val &gt; &gt; 8 ) &#124; ( val &lt; &lt; 8 ) )
DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False , python _ shell = python _ shell , env = env , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell = python _ shell , python _ shell =
DCSP resource = datapreview.get _ view _ plugin ( resource &#91; &apos; url &apos; &#93; ) DCNL DCSP return template.render ( context )
DCSP return _ _ proxy _ _ &#91; attr &#93;
DCSP RemoteOrganization = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;Group &apos; ) DCNL DCSP Social@@ Account = apps.get _ model ( u &apos;auth &apos; , u &apos;@@ Social@@ Account &apos; ) DCNL DCSP for account in Social@@ Account.@@ objects.all ( ) : DCNL DCSP
DCSP if settings.USE _ TZ : DCNL DCSP DCSP return pytz.timezone ( settings.TIME _ ZONE ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP except AttributeError : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos; , &apos; dev &apos;
DCSP registry = XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ template@@ -name &apos; ) DCNL DCSP if ( not data ) : DCNL DCSP DCSP raise MissingAttributeError ( &apos; password &apos; ) DCNL DCSP try : DCNL DCSP DCSP XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ template@@ s.delete _ _ &apos; ) .text = data DCNL DCSP except Exception as e : DCNL DCSP DCSP raise MissingAttributeError ( e.args &#91; 0 &#93; )
DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if ( libraries is None ) : DCNL DCSP DCSP extra _ args = &#91; &#93; DCNL DCSP if
DCSP try : DCNL DCSP DCSP a = &#91; c &#93; DCNL DCSP except : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP assert False
DCSP send _ notification ( user = user , message = NOTIFS &#91; NOTIF _ TICKET _ PURCHASED _ ORGANIZER &#93; &#91; &apos; message &apos; &#93; .format ( invoice _ id = invoice _ id , order _ url = order _ url ) )
DCSP if ( ( image.shape &#91; 0 &#93; = = shape &#91; 1 &#93; ) and ( image.shape &#91; 1 &#93; = = 1 ) ) : DCNL DCSP DCSP return np.zeros ( shape ) DCNL DCSP else : DCNL DCSP DCSP return np.zeros ( ( shape &#91; 0 &#93; , shape &#91; 1 &#93; , shape &#91; 1 &#93; ) )
DCSP ( min _ iter , max _ iter ) = histogram ( image , nbins , max _ iter = max _ iter , max _ iter = max _ iter , max _ iter = max _ iter , max _ iter = max _ iter ) DCNL DCSP return ( min _ min , max _ iter )
DCSP if ( count &gt; 0 ) : DCNL DCSP DCSP return ( count + 1 ) DCNL DCSP else : DCNL DCSP DCSP return ( count + 1 )
DCSP if request.GET : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP else : DCNL DCSP DCSP query = ( query &amp; _ get _ filter _ query ( request.GET ) ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; identities / index _ index &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP ip _ addresses = &#91; &#93; DCNL DCSP for ip in ec2 _ ips : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ip _ address = ip _ address &#91; 0 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ip _ address = ip _ address &#91; 1 &#93; DCNL DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ip _ address = = ip _ address ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ip _ address = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ address = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ address = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ address = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ ip = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ ip = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ ip = ip _ address &#91; 1 &#93; DCNL DCSP DCSP ip _ ip = ip _ address &#91; 1 &#93;
DCSP while True : DCNL DCSP DCSP t = np.asarray ( t ) DCNL DCSP DCSP if ( t = = t ) : DCNL DCSP DCSP DCSP return t DCNL DCSP DCSP elif ( t = = t ) : DCNL DCSP DCSP DCSP return t DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return t
DCSP api _ key = os.environ.get ( &apos; GALAXY _ TEST _ APP &apos; , None ) DCNL DCSP if ( user _ key is None ) : DCNL DCSP DCSP api _ key = get _ user _ api _ key ( ) DCNL DCSP return api _ key
DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if ( maxlen is None ) : DCNL DCSP DCSP maxlen = len ( sequences ) DCNL DCSP if
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return tokens &#91; 0 &#93;
DCSP if ( not isinstance ( indexer _ idx , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP asset DCSP date : DCSP % s &apos; % date _ idx ) ) DCNL DCSP if ( not isinstance ( value _ idx , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP date _ dates : DCSP % s &apos; % date _ idx ) ) DCNL DCSP if ( not isinstance ( value _ idx , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( value _ idx , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( not isinstance ( value _ idx , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; Invalid DCSP date _ idx DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if (
DCSP return item _ create ( item = item , item _ id = item _ id , item _ type = item _ type , extra _ args = extra _ args , cibfile = cibfile )
DCSP circuit = ( circuit if ( seed is None ) else seed ) DCNL DCSP circuit = ( ( circuit if ( seed is None ) else seed ) for circuit in circuit ) DCNL DCSP if ( seed is not None ) : DCNL DCSP DCSP circuit = ( circuit if ( seed is None ) else seed ) DCNL DCSP circuit = ( circuit if ( seed is not None ) else circuit ) DCNL DCSP circuit = ( circuit if ( seed is not None ) else circuit ) DCNL DCSP circuit = ( circuit if ( seed is not None ) else circuit ) DCNL DCSP circuit = ( circuit if ( seed is not None ) else circuit ) DCNL DCSP if ( seed is not None ) : DCNL DCSP DCSP circuit = ( circuit if ( seed is not None ) else circuit ) DCNL DCSP if ( seed is not None ) : DCNL DCSP DCSP circuit = ( circuit if ( seed is None ) else seed ) DCNL DCSP return circuit
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( not overwrite ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP raise PermissionDenied DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP user = request.user DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP user = request.user DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = request.user DCNL DCSP DCSP if ( not overwrite ) : DCNL DCSP DCSP DCSP user = request.user DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( not overwrite ) : DCNL DCSP DCSP DCSP user = request.user DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP user = None DCNL DCSP DCSP if ( not overwrite ) : DCNL DCSP
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP return path
DCSP if os.path.exists ( path ) : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( _ get _ cron _ cmdstr ( path ) , runas = user , python _ shell = False )
DCSP img = Image.open ( image _ path ) DCNL DCSP img = Image.open ( image ) DCNL DCSP return img
DCSP from django.conf import settings DCNL DCSP year _ date _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP month _ day _ format = ugettext ( &apos; MONTH _ DAY _ FORMAT &apos; ) DCNL DCSP if ( month _ day _ format = = &apos; YEAR _ MONTH _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP if ( month _ day _ format = = &apos; MONTH _ DAY _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP if ( month _ day _ format = = &apos; MONTH _ DAY _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP if ( month _ day _ format = = &apos; MONTH _ DAY _ FORMAT &apos; ) : DCNL DCSP DCSP month _ day _ format = ugettext ( &apos; YEAR _ MONTH _ FORMAT &apos; ) DCNL DCSP return
DCSP if isinstance ( value , six.string _ types ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP elif isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , list ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , list ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , ( list , tuple ) ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value , list ) : DCNL DCSP DCSP value = str ( value ) DCNL DCSP elif isinstance ( value
DCSP return { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; }
DCSP if os.path.exists ( drive ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( not config _ file ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return ret &#91; &apos; stdout &apos; &#93;
DCSP if ( state = = 0 ) : DCNL DCSP DCSP return ( state.marked = = 1 ) DCNL DCSP elif ( state = = 0 ) : DCNL DCSP DCSP return ( state.marked = = 1 ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if ( &apos; hook &apos; in kwargs ) : DCNL DCSP DCSP kwargs &#91; &apos; hook &apos; &#93; = repo DCNL DCSP else : DCNL DCSP DCSP kwargs &#91; &apos; hook &apos; &#93; = repo DCNL DCSP return hook ( ui , repo , * * kwargs )
DCSP return isinstance ( function , types.GeneratorType )
DCSP if hasattr ( fileobj , &apos; read &apos; ) : DCNL DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP return f.read ( ) DCNL DCSP else : DCNL DCSP DCSP return fileobj
DCSP ( i , i ) = line.split ( &apos; : &apos; , 1 ) DCNL DCSP return ( ( i + 1 ) , ( i + 1 ) )
DCSP if os.path.isfile ( path ) : DCNL DCSP DCSP return path DCNL DCSP else : DCNL DCSP DCSP return None
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( f.read ( ) )
DCSP if hasattr ( obj , &apos; _ _ call _ _ &apos; ) : DCNL DCSP DCSP return obj . _ _ signature _ _ DCNL DCSP else : DCNL DCSP DCSP return obj . _ _ signature _ _
DCSP if ( setting is None ) : DCNL DCSP DCSP setting = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( &apos; IIsSmtpServerSetting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; , &apos; setting &apos; ,
DCSP if ( netaddr.IPNetwork ( network ) .version = = 4 ) : DCNL DCSP DCSP return &apos; IPv@@ 4&apos;
DCSP total _ count = 0 DCNL DCSP for i in range ( max _ active _ count ) : DCNL DCSP DCSP total _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if ( max _ active _ count &gt; 0 ) : DCNL DCSP DCSP max _ active _ count + = 1 DCNL DCSP if
DCSP try : DCNL DCSP DCSP return unicode ( value , hint _ encoding ) DCNL DCSP except UnicodeEncodeError : DCNL DCSP DCSP return unicode ( value )
DCSP secret _ key = &apos; &apos;.join ( ( random.choice ( ( string.ascii _ uppercase + string.digits ) ) for _ in range ( project _ directory ) ) ) DCNL DCSP secret _ key = ( &apos; % s . % s &apos; % ( project _ directory , uuid.uuid4 ( ) .hex ) ) DCNL DCSP return secret _ key
DCSP if ( module is None ) : DCNL DCSP DCSP module = _ _ import _ _ ( module ) DCNL DCSP if ( module is None ) : DCNL DCSP DCSP module = _ _ import _ _ ( module , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , {
DCSP assert ( len ( tokens ) = = 1 ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; . &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; . &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; . &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; = = u &apos; DCSP &apos; ) DCNL DCSP assert ( tokens &#91; 0 &#93; =
DCSP items = &#91; &#93; DCNL DCSP for item in gc.get _ objects ( ) : DCNL DCSP DCSP if ( not hasattr ( item , &apos; items &apos; ) ) : DCNL DCSP DCSP DCSP ret.append ( item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret.append ( item ) DCNL DCSP return result
DCSP if ( method = = &apos; smaller &apos; ) : DCNL DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = = &apos; normal &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( method = =
DCSP if ( sys.version _ info &lt; ( 2 , 6 ) ) : DCNL DCSP DCSP pass DCNL DCSP elif ( sys.version _ info &gt; = ( 3 , 6 ) ) : DCNL DCSP DCSP assert ( sys.version _ info &gt; = ( 3 , 6 ) ) DCNL DCSP else : DCNL DCSP DCSP assert ( sys.version _ info &gt; = ( 3 , 6 ) )
DCSP account = get _ object _ or _ 404 ( Account , pk = account _ id ) DCNL DCSP if ( not request.user.profile.has _ permission ( account ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Account &quot; ) DCNL DCSP return render _ to _ response ( &apos; account / account _ view &apos; , { &apos; account &apos; : account } , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return ( ( not hasattr ( exc , &apos; error &apos; ) ) and ( not hasattr ( exc , &apos; _ _ html _ _ &apos; ) ) )
DCSP if isinstance ( ptr _ func , ctypes _ void _ p ) : DCNL DCSP DCSP return ctypes _ void _ p DCNL DCSP else : DCNL DCSP DCSP pointer _ func = ctypes.c _ void _ p DCNL DCSP return ptr _ ptr
DCSP if ( len ( args ) = = 2 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return None
DCSP header = &apos; \ n
DCSP if verbose : DCNL DCSP DCSP err _ msg = ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP array DCSP of DCSP % s &apos; % ( err _ msg , err _ msg ) ) DCNL DCSP DCSP raise ValueError ( msg ) DCNL DCSP if verbose : DCNL DCSP DCSP err _ msg = ( &apos; % s DCSP = DCSP % s &apos; % ( err _ msg , err _ msg ) ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( msg ) DCNL DCSP if verbose : DCNL DCSP DCSP raise ValueError ( msg ) DCNL DCSP if verbose : DCNL DCSP DCSP raise AssertionError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP array DCSP of DCSP % s &apos; % ( err _ msg , err _ msg ) ) )
DCSP for i in range ( 2 ) : DCNL DCSP DCSP ( yield ( 0 , ( i + 1 ) ) )
DCSP return os.path.join ( dataset _ dir , ( &apos; % s / % s &apos; % ( dataset _ dir , split _ name ) ) )
DCSP if form.validate _ on _ submit ( ) : DCNL DCSP DCSP flash ( _ ( &apos; Logged DCSP out &apos; ) , &apos; form &apos; ) DCNL DCSP DCSP return redirect ( url _ for ( &apos; forum.index &apos; ) ) DCNL DCSP return redirect ( url _ for ( &apos; forum.index &apos; ) )
DCSP kwargs &#91; &apos; result &apos; &#93; = False DCNL DCSP return request ( * args , * * kwargs )
DCSP if isinstance ( leaves , ( list , tuple ) ) : DCNL DCSP DCSP leaves = leaves ( leaves ) DCNL DCSP DCSP if ( len ( leaves ) = = 1 ) : DCNL DCSP DCSP DCSP return expr DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return expr DCNL DCSP else : DCNL DCSP DCSP return expr
DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ decode , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape
DCSP line = clean _ lines.elided &#91; linenum &#93; DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP line = line &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP if ( line and ( line &#91; ( -1 ) &#93; = = &apos; # &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP line = line &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( line and ( line &#91; 0 &#93; = = &apos; \ \ &apos; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP line =
DCSP if ( not path.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; \ \ &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path = path.replace ( &apos; / &apos; , &apos; / &apos; ) DCNL DCSP path =
DCSP data = { &apos; plugin &apos; : plugin , &apos; changes &apos; : { } , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP data = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( data &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP run DCSP plugin DCSP { 0 } : DCSP { 1 } &apos; .format ( plugin , data &#91; &apos; stderr &apos; &#93; ) DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP to DCSP run DCSP plugin DCSP { 0 } &apos; .format ( plugin ) DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Failed DCSP
DCSP next = urlresolvers.reverse ( default , default = default ) DCNL DCSP next = urlresolvers.reverse ( default , default = default ) DCNL DCSP joiner = ( &apos; ? &apos; + joiner ) DCNL DCSP return HttpResponseRedirect ( next )
DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( ( M &lt; 0 ) or ( M &lt; 0 ) ) : DCNL DCSP DCSP return 0 DCNL DCSP return
DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; parent DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( parent , basestring ) ) : DCNL DCSP
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP value = value.replace ( &apos; \ \ &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; &quot; &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; &quot; &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; &quot; &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; &quot; &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; &quot; &apos; , &apos; \ \ &quot; &apos; ) DCNL DCSP return value
DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if ( word _ size is None ) : DCNL DCSP DCSP word _ size = len ( data ) DCNL DCSP if
DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape &#91; 1 &#93; DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = X.shape DCNL DCSP if ( shape is None ) : DCNL DCSP DCSP shape = Y.shape DCNL DCSP DCSP
DCSP return ( len ( label1.@@ union ( label2 ) ) - len ( label1.@@ union ( label2 ) ) )
DCSP c = _ FFI.from _ handle ( context _ handle ) DCNL DCSP return c.key _ to _ value ( msg _ type )
DCSP if ( replacement is None ) : DCNL DCSP DCSP replacement = { } DCNL DCSP warningString = getDeprecationWarningString ( version , version , replacement ) DCNL DCSP if replacement : DCNL DCSP DCSP warningString = ( &apos; % s : DCSP % s &apos; % ( warningString , _ getReplacementString ( replacement ) ) ) DCNL DCSP return warningString
DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP if ( volume _ service _ api is None ) : DCNL DCSP DCSP volume _ config = { } DCNL DCSP flow
DCSP def wrapper ( f ) : DCNL DCSP DCSP @ functools.wraps ( f ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP if force : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP for func in funcs : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP func ( self , func ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass
DCSP conn.commit ( ) DCNL DCSP conn.close ( )
DCSP if cond : DCNL DCSP DCSP a = &#91; &#93; DCNL DCSP return a
DCSP try : DCNL DCSP DCSP run _ command ( command ) DCNL DCSP except Exception : DCNL DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP run ( command ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( ( &apos; Error : DCSP % s &apos; % command ) ) DCNL DCSP DCSP DCSP sys.exit ( 1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( &apos; Error : DCSP % s &apos; % command ) DCNL DCSP DCSP DCSP sys.exit ( 1 )
DCSP if ( len ( nt _ barcode ) = = 1 ) : DCNL DCSP DCSP return nt _ barcode DCNL DCSP else : DCNL DCSP DCSP return nt _ barcode
DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.getcwd ( ) DCNL DCSP if ( path is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP os.makedirs ( path ) DCNL DCSP return path
DCSP try : DCNL DCSP DCSP socket.inet _ pton ( socket.AF _ INET6 , ip ) DCNL DCSP except : DCNL DCSP DCSP return None DCNL DCSP return socket.inet _ ntop ( socket.AF _ INET6 , ip )
DCSP try : DCNL DCSP DCSP ( yield x ) DCNL DCSP except Exception : DCNL DCSP DCSP pass
DCSP @ wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP return f ( request , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP class MyFilter ( Filter , ) : DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP with pytest.raises ( vol.MultipleInvalid ) : DCNL DCSP DCSP
DCSP if ( not branch ) : DCNL DCSP DCSP return DCNL DCSP for i in range ( len ( branch ) ) : DCNL DCSP DCSP if ( branch = = branch ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) :
DCSP if ( len ( surfs ) ! = 3 ) : DCNL DCSP DCSP raise RuntimeError ( ( &apos; Cannot DCSP find DCSP surface DCSP % s &apos; % surfs ) ) DCNL DCSP assert _ equal ( len ( surfs ) , len ( surfs ) ) DCNL DCSP assert _ equal ( len ( surfs ) , len ( surfs ) ) DCNL DCSP assert _ equal ( len ( surfs ) , len ( surfs ) ) DCNL DCSP assert _ equal ( len ( surfs ) , len ( surfs ) ) DCNL DCSP assert _ equal ( len ( verts ) , len ( surfs ) ) DCNL DCSP assert _ equal ( verts , verts )
DCSP try : DCNL DCSP DCSP pidfile = open ( pidfile , &apos; r &apos; ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP result = { } DCNL DCSP for ( key , value ) in six.iteritems ( config ) : DCNL DCSP DCSP if ( not key.startswith ( &apos; _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP result &#91; key &#93; = value DCNL DCSP return result
DCSP sys.stdout.write ( ( &apos
DCSP context = { &apos; comment &apos; : comment _ data , &apos; comment &apos; : comment _ data , &apos; comment &apos; : comment _ data } DCNL DCSP return render _ to _ response ( &apos; comments / confirm _ comment _ delete.html &apos; , { &apos; comment &apos; : comment , &apos; comment &apos; : comment , &apos; comment &apos; : comment , &apos; comment &apos; : comment } , context _ instance = RequestContext ( request ) )
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return web.try _ shorten ( text )
DCSP emLen = len ( emBits ) DCNL DCSP lmask = password &#91; : ( -1 ) &#93; DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = ( bchr ( bord ( maskedDB &#91; 0 &#93; ) ) + bchr ( 188 ) ) DCNL DCSP dbMask = mgf ( maskedDB , dbMask ) DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = ( bchr ( ( bord ( maskedDB &#91; 0 &#93; ) &amp; bord ( maskedDB &#91; 0 &#93; ) ) ) + bchr ( 188 ) ) DCNL DCSP dbMask = mgf ( maskedDB , dbMask ) DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = ( bchr ( ( bord ( maskedDB &#91; 0 &#93; ) &amp; bord ( maskedDB &#91; 0 &#93; ) ) ) + bchr ( 188 ) ) DCNL DCSP dbMask = mgf ( maskedDB , dbMask ) DCNL DCSP maskedDB = strxor ( maskedDB , dbMask ) DCNL DCSP maskedDB = ( bchr ( ( bord
DCSP _ check _ picks ( data , info , tmin , tmin , tmin , tmax , picks = picks , picks = picks , pick _ ori = pick _ ori , verbose = verbose ) DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP data = data &#91; picks &#93; DCNL DCSP
DCSP ( a , b ) = _ chk _ asarray ( a , b ) DCNL DCSP ( a , b ) = _ chk _ asarray ( a , b ) DCNL DCSP ( a , b ) = _ chk _ asarray ( a , b ) DCNL DCSP ( a , b ) = _ chk _ asarray ( a , b , axis = axis ) DCNL DCSP ( a , b ) = _ chk _ asarray ( a , b ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP return ( a , b ) DCNL DCSP else : DCNL DCSP DCSP return ( a , b )
DCSP return apiproxy _ stub _ map.apiproxy.GetStub ( &apos; blobstore &apos; ) .storage
DCSP def callback ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP ( yield e )
DCSP if ( app _ info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( app _ info is None ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP handler = yaml _ builder.BuilderHandler ( builder ) DCNL DCSP except apiproxy _ errors.ApplicationError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP getUserName ( ) DCNL DCSP except : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP if retVal : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP if retVal : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP if retVal : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP retVal = &apos; &apos; DCNL DCSP return retVal
DCSP pb.set _ document ( document ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP else : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP if document.doc _ id : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL DCSP else : DCNL DCSP DCSP pb.set _ document ( document.doc _ id ) DCNL
DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( N &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; You DCSP must DCSP be
DCSP return request.GET &#91; &apos; limit &apos; &#93;
DCSP snap _ id = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name = _ sdecode ( snap _ name ) DCNL DCSP snap _ name =
DCSP if ( not isinstance ( data , compat.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , ( int , float ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , int ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , ( int , long ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise ValueError ( &apos; data DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL
DCSP try : DCNL DCSP DCSP version = subprocess.check _ output ( &#91; &apos; git &apos; , &apos; --version &apos; &#93; , stdout = subprocess.PIPE ) .communicate ( ) &#91; 0 &#93; DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( version = = &apos; version &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP else : DCNL DCSP DCSP version = &apos; PiB &apos; DCNL DCSP if ( version = = &apos; version &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP else : DCNL DCSP DCSP version = &apos; PiB &apos; DCNL DCSP if ( version = = &apos; version &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP else : DCNL DCSP DCSP version = &apos; PiB &apos; DCNL DCSP if ( version = = &apos; version &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP return ( version , version )
DCSP user _ profile = get _ user _ data ( user _ profile , user _ data , check _ string = check _ string , check _ string = check _ string , check _ string = check _ string ) DCNL DCSP return { &apos; success &apos; : False , &apos; success &apos; : False , &apos; success &apos; : False , &apos; success &apos; : False , &apos; success &apos; : False , &apos; error &apos; : &apos; Success &apos; }
DCSP if ( parser is None ) : DCNL DCSP DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP parser.add _ option ( &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose &apos; , &apos; --verbose
DCSP if ( row is None ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not thisdate ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not thisdate ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( not thisdate ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP if ( thisdate = = &apos; &apos; ) : DCNL DCSP DCSP return current.messages &#91; &apos; NONE &apos; &#93; DCNL DCSP
DCSP try : DCNL DCSP DCSP os.kill ( pid , signal.SIGTERM ) DCNL DCSP except OSError as exc : DCNL DCSP DCSP if ( e.errno = = psutil.@@ STATUS _ RUNNING ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP return None
DCSP return G@@ im@@ bal@@ Module ( mpstate )
DCSP if ( not isinstance ( allowed _ types , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP distribution DCSP type : DCSP % s &apos; % type ( state2 _ types ) ) ) DCNL DCSP if ( not isinstance ( state2 _ types , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP distribution DCSP type : DCSP % s &apos; % type ( state2 _ types ) ) ) DCNL DCSP if ( not isinstance ( state2 _ types , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP distribution DCSP type : DCSP % s &apos; % type ( state2 _ types ) ) ) DCNL DCSP if ( not isinstance ( state2 _ types , list ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP distribution DCSP type : DCSP % s &apos; % type ( state2 _ types ) ) ) DCNL DCSP if ( len ( state2 _ types ) &gt; 1 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP distribution DCSP type : DCSP % s &apos; %
DCSP project = get _ object _ or _ 404 ( Project , pk = project _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; project &apos; : project , &apos; project &apos; : project } ) DCNL DCSP return render _ to _ response ( &apos; projects / project _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP if isinstance ( collection _ id , basestring ) : DCNL DCSP DCSP collection _ id = collection _ id.split ( &apos; .&apos; ) &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP collection _ id = collection _ id.split ( &apos; .&apos; ) &#91; 0 &#93; DCNL DCSP return rank
DCSP signals.initialized.connect ( pelican _ init ) DCNL DCSP signals.@@ all _ generators _ finalized.connect ( get _ plugins )
DCSP if ( not isabs ( path ) ) : DCNL DCSP DCSP if ( not isabs ( path ) ) : DCNL DCSP DCSP DCSP cwd = os.getcwdu ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP cwd = os.getcwd ( ) DCNL DCSP return normpath ( path )
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return DCNL DCSP path = os.path.join ( path , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; .. &apos; , &apos; ..
DCSP try : DCNL DCSP DCSP return inet _ pton ( socket.AF _ INET6 , addr ) DCNL DCSP except : DCNL DCSP DCSP return None
DCSP if ( len ( inList ) = = 1 ) : DCNL DCSP DCSP return len ( inList ) DCNL DCSP else : DCNL DCSP DCSP return len ( inList )
DCSP try : DCNL DCSP DCSP copystat ( src , dst ) DCNL DCSP except OSError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP copystat ( src , dst ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP np.random.seed ( 0 ) DCNL DCSP result = reconstruction ( np.ones ( ( 10 , 10 ) ) , np.ones ( ( 10 , 10 ) ) ) DCNL DCSP assert _ array _ equal ( result , 0 )
DCSP if ( code is None ) : DCNL DCSP DCSP code = environ.get ( &apos; QUERY _ STRING &apos; , &apos; &apos; ) DCNL DCSP if ( code is not None ) : DCNL DCSP DCSP environ &#91; &apos; PATH _ INFO &apos; &#93; = code DCNL DCSP return environ
DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) : DCNL DCSP DCSP packages = &#91; &#93; DCNL DCSP if ( packages is None ) :
DCSP return serialize ( node , stream , Dumper = Dumper , * * kwds )
DCSP return dict ( ( ( k , v ) for ( k , v ) in enumerate ( array ) ) )
DCSP sys.stderr.write ( s )
DCSP for ( k , v ) in six.iteritems ( resources ) : DCNL DCSP DCSP if ( k not in resources ) : DCNL DCSP DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP % r &apos; % ( k , v ) ) )
DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos; , &apos; --pretty = format &apos; &#93; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos; , &apos; --pretty = format &apos; &#93; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos; , &apos; --pretty = format &apos; &#93; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP with open ( CHANGELOG ) as f : DCNL DCSP DCSP DCSP DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos;
DCSP ( i , j ) = np.mgrid &#91; ( -5 ) : 6 , ( -5 ) : 6 &#93; DCNL DCSP image = ( j &gt; = 0 ) .astype ( float ) DCNL DCSP result = filters.sobel _ h ( image ) DCNL DCSP assert _ allclose ( result , 0 )
DCSP if ( typ . _ _ class _ _ . _ _ name _ _ = = &apos; F &apos; ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ , int ) : DCNL DCSP DCSP return typ DCNL DCSP elif isinstance ( typ ,
DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP if ( dtype is None ) : DCNL DCSP DCSP dtype = a.dtype DCNL DCSP return ptr
DCSP out = &#91; &#93; DCNL DCSP for line in context : DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not
DCSP ( v1 , v2 ) = ( v1 , v2 ) DCNL DCSP ( v1 , v2 ) = ( v1 , v2 ) DCNL DCSP return ( v1 , v2 )
DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( rseed ) DCNL DCSP if ( n _ jobs is None ) : DCNL DCSP DCSP n _ jobs = n _ jobs DCNL DCSP if ( n _ jobs is None ) : DCNL DCSP DCSP n _ jobs = n _ jobs DCNL DCSP if ( n _ jobs is None ) : DCNL DCSP DCSP n _ jobs = n _ jobs DCNL DCSP if ( n _ jobs is None )
DCSP data = BytesIO ( ) DCNL DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP data = f.read ( ) DCNL DCSP return data
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP secgroup _ info DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP secgroup _ info DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP secgroup _ info DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP secgroup _ info DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP secgroup _ info DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP
DCSP if ( not isinstance ( w , np.ndarray ) ) : DCNL DCSP DCSP w = np.array ( w , dtype = dtype ) DCNL DCSP if ( not isinstance ( w , np.ndarray ) ) : DCNL DCSP DCSP w = np.array ( w , dtype = dtype ) DCNL DCSP else : DCNL DCSP DCSP if ( not isinstance ( w , np.ndarray ) ) : DCNL DCSP DCSP DCSP w = w DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( not isinstance ( w , np.ndarray ) ) : DCNL DCSP DCSP DCSP DCSP return w DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP return w DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return w DCNL DCSP else : DCNL DCSP DCSP return w
DCSP if ( n is None ) : DCNL DCSP DCSP n = len ( s ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP i = 0 DCNL DCSP for i in range ( n ) : DCNL DCSP DCSP i + = 1 DCNL DCSP DCSP i + = 1 DCNL DCSP return i
DCSP try : DCNL DCSP DCSP _ _ import _ _ ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( n _ samples is None ) : DCNL DCSP DCSP n _ samples = n _ samples DCNL DCSP else : DCNL DCSP DCSP n _ samples = n _ samples DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL DCSP n _ samples = ( n _ samples - n _ samples ) DCNL
DCSP model _ list = &#91; &#93; DCNL DCSP for app in app _ list : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP model = apps.get _ model ( app _ name ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP model = apps.get _ model ( app _ name ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP ( yield app )
DCSP return ( ( key + ( &apos; % s . % s &apos; % ( key , timestamp ) ) ) + ( &apos; % s : % s &apos; % ( key , timestamp ) ) )
DCSP if ( not isinstance ( parameters , six.string _ types ) ) : DCNL DCSP DCSP parameters = { } DCNL DCSP for ( key , value ) in six.iteritems ( parameters ) : DCNL DCSP DCSP if ( key not in parameters ) : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP parameters : DCSP % s &apos; % key ) ) DCNL DCSP return parameters
DCSP conn = boto.connect _ ec2 ( u &apos;the _ key &apos; , u &apos;the _ secret &apos; ) DCNL DCSP with raises ( EC2ResponseError ) as cm : DCNL DCSP DCSP conn.disassociate _ address ( ) DCNL DCSP cm.exception.code.should.equal ( u &apos;Invalid@@ ParameterValue &apos; ) DCNL DCSP cm.exception.status.should.equal ( 400 ) DCNL DCSP cm.exception.request _ id.should _ not.be.none
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP return validate _ int _ or _ none ( option , value )
DCSP with open ( html _ xml _ css , &apos; r &apos; ) as f : DCNL DCSP DCSP css = f.read ( ) DCNL DCSP return css _ to _ css ( css )
DCSP return _ track _ distance _ plugins ( item , info )
DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP pid = int ( pid ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP proc = subprocess.Popen ( &#91; &apos; ps &apos; , &apos; -c &apos; , pid &#93; , stdin = PIPE , stderr = subprocess.STDOUT ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return None
DCSP evoked = read _ evokeds ( fname _ fname , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP assert _ raises ( ValueError , stc.@@ read , op.join ( tempdir , &apos; sample &apos; ) )
DCSP return ( &apos; % s / % s &apos; % ( name , _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( name ) ) )
DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( secret , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; userid DCSP must DCSP be DCSP a DCSP
DCSP tempdir = _ TempDir ( ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP data = read _ raw _ fif ( fif _ fname
DCSP with open ( name , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP if ( resp &#91; 0 &#93; = = &apos; 229 &apos; ) : DCNL DCSP DCSP return ( resp &#91; 0 &#93; , resp &#91; 1 : &#93; ) DCNL DCSP else : DCNL DCSP DCSP raise error _ proto ( resp )
DCSP client = _ _ utils _ _ &#91; &apos; etcd _ util.get _ conn &apos; &#93; ( _ _ opts _ _ , profile , directory ) DCNL DCSP return client.@@ set ( key , value , ttl )
DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.GET.get ( &apos; comment &apos; , &apos; &apos; ) DCNL DCSP comment = request.POST.get (
DCSP if ( len ( paths ) &lt; 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP for i in xrange ( len ( paths ) ) : DCNL DCSP DCSP for i in xrange ( len ( paths ) ) : DCNL DCSP DCSP DCSP for i in xrange ( len ( path ) ) : DCNL DCSP DCSP DCSP DCSP for i in xrange ( len ( path ) ) : DCNL DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len ( x ) ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for i in xrange ( len
DCSP output _ dir = os.path.join ( expt _ dir , best _ val ) DCNL DCSP with open ( output _ dir , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( &apos; \ n &apos; .join ( output _ out ) )
DCSP if search _ artist : DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ id = search _ title DCNL DCSP DCSP if ( search _ title is None ) : DCNL DCSP DCSP DCSP search _ title = search _ title DCNL DCSP if search _ title : DCNL DCSP DCSP
DCSP import sys DCNL DCSP site = get _ site ( ctx ) DCNL DCSP frappe.init ( site = site ) DCNL DCSP for site in context.sites : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP frappe.init ( site = site ) DCNL DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP frappe.init ( site = site ) DCNL DCSP DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP DCSP frappe.init ( site = site ) DCNL DCSP DCSP DCSP DCSP DCSP frappe.connect ( ) DCNL DCSP DCSP DCSP DCSP DCSP f.write ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP DCSP frappe.destroy ( )
DCSP if ( len ( sys.argv ) &gt; 1 ) : DCNL DCSP DCSP writeOutput ( &apos; DCSP &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP settings.startMainLoopFromConstructor ( getNewRepository ( ) )
DCSP global _ ENGINE DCNL DCSP if ( _ ENGINE is None ) : DCNL DCSP DCSP _ ENGINE = CONF.sql _ connection DCNL DCSP return _ ENGINE
DCSP return dict ( ( ( k , v ) for ( k , v ) in iteritems ( mapping ) ) )
DCSP y _ true = ( y _ true * y _ true ) DCNL DCSP y _ true = ( y _ true * y _ true ) DCNL DCSP y _ true = ( y _ true * y _ true ) DCNL DCSP return ( y _ true , y _ true )
DCSP new _ pos = _ Decode@@ Varint ( field _ number , is _ packed , key , new _ default ) DCNL DCSP return ( new _ pos , new _ pos )
DCSP return host _ reference.@@ config.network.@@ vnic
DCSP if ( platform.system ( ) = = &apos; Windows &apos; ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( use _ datetime is None ) : DCNL DCSP DCSP use _ datetime = use _ datetime DCNL DCSP if ( use _ datetime is None ) : DCNL DCSP DCSP use _ datetime = use _ datetime DCNL DCSP if ( use _ datetime is None ) : DCNL DCSP DCSP use _ datetime = use _ datetime DCNL DCSP if ( use _ datetime is None ) : DCNL DCSP DCSP use _ datetime = use _ datetime DCNL DCSP if ( use _ datetime is not None ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP data = pickle.loads ( data ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; Unsupported DCSP data : DCSP % s &apos; % data ) ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; Unsupported DCSP data DCSP type : DCSP % s &apos; % data ) ) DCNL DCSP return pickle.loads ( data )
DCSP if ( number is None ) : DCNL DCSP DCSP number = &apos; &apos; DCNL DCSP if ( number is None ) : DCNL DCSP DCSP number = &apos; &apos; DCNL DCSP return ( &apos; % s _ % s &apos; % ( code , number ) )
DCSP ( scheme , netloc , path , query , fragment ) = urlparse.urlsplit ( url ) DCNL DCSP uri = urlparse.urlunsplit ( ( scheme , netloc , path , query , fragment ) ) DCNL DCSP return urlparse.urlunsplit ( ( scheme , netloc , path , query , fragment ) )
DCSP bits = &#91; &#93; DCNL DCSP for i in range ( bits ) : DCNL DCSP DCSP bits + = 1 DCNL DCSP DCSP bits + = 1 DCNL DCSP return bits
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( top ) : DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if ( not topdown ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if
DCSP try : DCNL DCSP DCSP return getattr ( namespace , namespace ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP if isinstance ( codes , ( list , tuple ) ) : DCNL DCSP DCSP return tuple ( map ( str , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( str , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , codes ) ) DCNL DCSP elif isinstance ( codes , tuple ) : DCNL DCSP DCSP return tuple ( map ( int , map ( int , codes ) ) ) DCNL DCSP else : DCNL DCSP DCSP return
DCSP return _ timer ( * args , * * kwargs )
DCSP if isinstance ( x , str ) : DCNL DCSP DCSP return x DCNL DCSP elif isinstance ( x , str ) : DCNL DCSP DCSP return x DCNL DCSP else : DCNL DCSP DCSP return x
DCSP pass
DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , cwd = cwd , runas = runas , python _ shell = python _ shell , env = env , output _ loglevel = output _ loglevel , python _ shell = python _ shell , output _ loglevel = output _ loglevel , python _ shell = python _ shell , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode = ignore _ retcode , ignore _ retcode
DCSP @ functools.wraps ( action _ name ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return function ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP raise SkipTest ( ( &apos; Failed DCSP to DCSP create DCSP action DCSP % s : DCSP % s &apos; % ( action _ name , e ) ) ) DCNL DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( db _ host is None ) : DCNL DCSP DCSP db _ host = _ connect ( user = user , user = user , db _ password = db _ password , db _ password = db _ password ) DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return isinstance ( entry , six.string _ types )
DCSP return &apos; &apos;.join ( ( random.choice ( ( string.letters + string.digits ) ) for _ in range ( N ) ) )
DCSP def list _ list ( value ) : DCNL DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP value = &#91; &#93; DCNL DCSP DCSP for item in value : DCNL DCSP DCSP DCSP if ( value is None ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP DCSP DCSP raise TypeError ( ( &apos; Invalid DCSP string DCSP string : DCSP % s &apos; % type ( value ) ) ) DCNL DCSP DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not isinstance ( value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP
DCSP try : DCNL DCSP DCSP return get _ ipython _ key ( ) DCNL DCSP except KeyError : DCNL DCSP DCSP pass DCNL DCSP return None
DCSP return self.meta.client.@@ upload _ fileobj ( Fileobj = Fileobj , Bucket = self.bucket _ name , Key = self.key , ExtraArgs = ExtraArgs , Callback = Callback , Config = Config )
DCSP if ( not _ active ) : DCNL DCSP DCSP _ instances &#91; currentThread ( ) &#93; = None DCNL DCSP else : DCNL DCSP DCSP _ thread _ manager.@@ reset ( )
DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return value
DCSP if ( path is None ) : DCNL DCSP DCSP path = os.environ &#91; &apos; PATH _ INFO &apos; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = os.environ &#91; &apos; PATH _ INFO &apos; &#93; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path = &apos; &apos; DCNL DCSP if ( path is None ) : DCNL DCSP DCSP path
DCSP if ( not paths ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP ret = { } DCNL DCSP for path in paths : DCNL DCSP DCSP ret &#91; path &#93; = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ret
DCSP redis = XML.SubElement ( xml _ parent , &apos; com.@@ mi@@ chel@@ in.@@ db@@ BuildWrapper &apos; ) DCNL DCSP XML.SubElement ( top , &apos; projectName &apos; ) .text = data.get ( &apos; plugin &apos; , &apos; &apos; ) DCNL DCSP XML.SubElement ( top , &apos; projectName &apos; ) .text = data
DCSP try : DCNL DCSP DCSP return unichr ( int ( ent ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None
DCSP if isinstance ( x , tan ) : DCNL DCSP DCSP x = sympify ( x ) DCNL DCSP else : DCNL DCSP DCSP x = sympify ( x ) DCNL DCSP if ( not e.has ( x ) ) : DCNL DCSP DCSP return DCNL DCSP if isinstance ( x , tan ) : DCNL DCSP DCSP x = sympify ( x ) DCNL DCSP else : DCNL DCSP DCSP return sympify ( x )
DCSP print &apos; You DCSP have DCSP been DCSP done . &apos; DCNL DCSP return perspective.@@ call@@ Remote ( &apos; foo &apos; , perspective = perspective )
DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = None DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP start _ date = datetime.timedelta ( days = 1 ) DCNL DCSP if ( start _ date is None ) : DCNL DCSP DCSP
DCSP global _ default _ etree DCNL DCSP _ default _ etree = etree
DCSP queues = { } DCNL DCSP for ( key , value ) in session.@@ items ( ) : DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in states ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if (
DCSP result = &#91; &#93; DCNL DCSP for item in find _ all ( ) : DCNL DCSP DCSP if match : DCNL DCSP DCSP DCSP result.append ( item ) DCNL DCSP return results
DCSP return ( os.path.isdir ( prefix ) and os.access ( prefix , os.W _ OK ) )
DCSP if include _ tables : DCNL DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP include = False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP include = False DCNL DCSP if include _ tables : DCNL DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP if include _ tables : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP t &#91; 0 &#93; = ( t &#91; 1 &#93; + t &#91; 3 &#93; )
DCSP @ functools.wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP DCSP except TypeError : DCNL DCSP DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP try : DCNL DCSP DCSP module = import _ module ( path ) DCNL DCSP except ImportError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import imp DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP module = import _ module ( path ) DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP import imp DCNL DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP import imp DCNL DCSP DCSP DCSP except ImportError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % path ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ImportError
DCSP return timedelta ( start _ date = start _ date , end _ date = end _ date )
DCSP if ( ( N &lt; 0 ) or ( N &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( N &lt; 0 ) or ( N &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( N &lt; 0 ) or ( N &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( N &lt; 0 ) or ( N &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( N &lt; 0 ) or ( N &lt; = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( ( N &lt; 0 ) or (
DCSP if ( hypervisor _ version is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( CONF.libvirt _ type = = &apos; xen &apos; ) : DCNL DCSP DCSP return &apos; qemu &apos; DCNL DCSP elif ( hypervisor _ version = = &apos; xen &apos; ) : DCNL DCSP DCSP return &apos; qemu &apos; DCNL DCSP else : DCNL DCSP DCSP return &apos; unknown&apos;
DCSP with pytest.raises ( exception.UserCritical ) : DCNL DCSP DCSP group.join ( ) DCNL DCSP assert ( len ( e ) = = 1 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 2 ) DCNL DCSP assert ( len ( e ) = = 1 ) DCNL DCSP assert ( len ( e ) = = 1 ) DCNL DCSP assert ( len ( e ) = = 1 ) DCNL DCSP assert ( len ( e ) = = 1 ) DCNL DCSP assert ( len ( e
DCSP for key in keys : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP dictionary &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP dictionary &#91; key &#93; = value
DCSP return IMPL.instance _ type _ create ( context , values )
DCSP out = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP assert _ true ( ( len ( y ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( y ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( y ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( y ) = = 2 ) ) DCNL DCSP assert _ true ( ( len ( y ) &gt; 0 ) ) DCNL DCSP assert _ equal ( len ( y ) , 1 ) DCNL DCSP assert _ equal ( len ( y ) , 1 ) DCNL DCSP assert _ equal ( len ( y ) , 1 ) DCNL DCSP assert _ equal ( len ( y ) , len ( y ) )
DCSP output = subprocess.check _ output ( cmd , cwd = cwd ) DCNL DCSP if output : DCNL DCSP DCSP return output DCNL DCSP else : DCNL DCSP DCSP return output
DCSP if context.is _ admin : DCNL DCSP DCSP return DCNL DCSP opt _ options = search _ options ( context , search _ options , allowed _ search _ options ) DCNL DCSP for opt in opt _ options : DCNL DCSP DCSP if ( opt in opt _ options ) : DCNL DCSP DCSP DCSP opt = opt &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( opt not in allowed _ options ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP opt = opt &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( opt not in allowed _ options ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP opt = opt &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( opt not in allowed _ options ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP opt = opt &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( opt not in allowed _ options ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP opt = opt &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( opt not in allowed _ options ) : DCNL DCSP DCSP
DCSP cmd = &apos; systemsetup DCSP -set@@ date DCSP { 0 } &apos; .format ( date ) DCNL DCSP _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) )
DCSP try : DCNL DCSP DCSP return os.uname ( ) &#91; 1 &#93; .lower ( ) DCNL DCSP except : DCNL DCSP DCSP return &apos; unknown&apos;
DCSP return value.@@ ljust ( int ( arg ) )
DCSP if ( name is None ) : DCNL DCSP DCSP return default DCNL DCSP img = osp.abspath ( osp.join ( img , name ) ) DCNL DCSP if ( icon is not None ) : DCNL DCSP DCSP return img DCNL DCSP else : DCNL DCSP DCSP return default
DCSP if isinstance ( relpath , compat.text _ type ) : DCNL DCSP DCSP relpath = path.replace ( os.sep , u &apos; / &apos; ) DCNL DCSP return ( u &apos; / &apos; + path.strip ( u &apos; / &apos; ) )
DCSP result = &#91; &#93; DCNL DCSP for node in node _ list : DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP result.append ( node ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( node ) DCNL DCSP return result
DCSP if ( scope is not None ) : DCNL DCSP DCSP ( yield subsystem _ type ) DCNL DCSP else : DCNL DCSP DCSP ( yield subsystem _ type )
DCSP return _ apply ( s.find , args )
DCSP if ( name not in g.userpl ) : DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name ) DCNL DCSP DCSP g.userpl &#91; name &#93; = Playlist ( name
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; SunOS &apos; ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos; Set DCSP { 0 } DCSP already DCSP exists &apos; .format ( name ) DCNL DCSP DCSP return ret DCNL DCSP cmd = &apos; { 0 } DCSP set DCSP { 1 } DCSP { 2 } &apos; .format ( _ ipset _ cmd ( ) , name , set _ type , family ) DCNL DCSP _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell =
DCSP if ( not node.is _ deleted ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP try : DCNL DCSP DCSP node = node.parent _ node DCNL DCSP except NodeStateError as e : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST , data = { &apos; message _ short &apos; : &apos; Invalid DCSP node &apos; } ) DCNL DCSP node.save ( )
DCSP controller = Controller ( ) DCNL DCSP if controller : DCNL DCSP DCSP return controller DCNL DCSP else : DCNL DCSP DCSP return None
DCSP cmd = &apos; ovs-vsctl DCSP { 0 } DCSP { 1 } &apos; .format ( br , port , port ) DCNL DCSP cmd = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP retcode = res &#91; &apos; retcode &apos; &#93; DCNL DCSP retcode = int ( res &#91; &apos; retcode &apos; &#93; ) DCNL DCSP return _ retcode _ to _ str ( res &#91; &apos; stdout &apos; &#93; )
DCSP global _ threadlocal DCNL DCSP if ( _ connection is None ) : DCNL DCSP DCSP _ connect = get _ redis _ conn ( ) DCNL DCSP if ( _ connection is None ) : DCNL DCSP DCSP _ connect = get _ conn ( ) DCNL DCSP if ( _ connection is None ) : DCNL DCSP DCSP _ redis = _ connect ( ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ connect ( ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ _ opts _ _ .get ( &apos; redis &apos; ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ _ opts _ _ .get ( &apos; redis &apos; ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ _ opts _ _ .get ( &apos; redis &apos; ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ _ opts _ _ .get ( &apos; redis &apos; ) DCNL DCSP if ( not redis ) : DCNL DCSP DCSP redis = _ connect ( ) DCNL DCSP
DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = None DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = None DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = None DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = None DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix = &apos; &apos; DCNL DCSP if ( prefix is None ) : DCNL DCSP DCSP prefix
DCSP parts = text.split ( &apos; : &apos; ) DCNL DCSP if ( len ( parts ) = = 2 ) : DCNL DCSP DCSP return parts &#91; 0 &#93; DCNL DCSP elif ( len ( parts ) = = 2 ) : DCNL DCSP DCSP return &apos; DCSP &apos; .join ( parts &#91; : ( -1 ) &#93; ) DCNL DCSP else : DCNL DCSP DCSP return &apos; &apos;
DCSP ret = { } DCNL DCSP cmd = &apos; { 0 } DCSP { 1 } DCSP { 2 } &apos; .format ( cmd , start _ cmd , start _ cmd , port _ vars ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( out &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP msg = &apos; Failed DCSP to DCSP create DCSP config DCSP file : DCSP { 0 } &apos; .format ( cmd ) DCNL DCSP DCSP raise CommandExecutionError ( msg ) DCNL DCSP return ret
DCSP configuration.set ( shop , SAMPLE _ PRODUCTS _ KEY , None )
DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP scheme = &apos; http &apos; DCNL DCSP if ( base is None ) : DCNL DCSP DCSP base = &apos; &apos; DCNL DCSP if debug : DCNL DCSP DCSP if debug : DCNL DCSP DCSP DCSP cherrypy.log ( &apos; http : / / % s : % s &apos; % ( base , url ) ) DCNL DCSP DCSP if debug : DCNL DCSP DCSP DCSP cherrypy.log ( ( &apos;
DCSP return re.escape ( direction ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &apos; ) .replace (
DCSP for ( key , value ) in arguments : DCNL DCSP DCSP elementNode.attributes &#91; key &#93; = value
DCSP if ( not metadata ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if isinstance ( metadata , dict ) : DCNL DCSP DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP DCSP if ( key in metadata ) : DCNL DCSP DCSP DCSP DCSP return key DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP elif isinstance ( metadata , dict ) : DCNL DCSP DCSP for ( key , value ) in metadata : DCNL DCSP DCSP DCSP if ( key in metadata ) : DCNL DCSP DCSP DCSP DCSP return &#91; key &#93; DCNL DCSP DCSP elif isinstance ( metadata , dict ) : DCNL DCSP DCSP DCSP return &#91; ( key , value ) for ( key , value ) in metadata &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; &#93; DCNL DCSP elif isinstance ( metadata , dict ) : DCNL DCSP DCSP for ( key , value ) in metadata.items ( ) : DCNL DCSP DCSP DCSP if ( key in metadata ) : DCNL DCSP DCSP DCSP DCSP return key DCNL DCSP DCSP else : DCNL
DCSP if ( not context ) : DCNL DCSP DCSP return { } DCNL DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP context = context &#91; u &apos;request &apos; &#93; DCNL DCSP context &#91; u &apos;request &apos; &#93; = context DCNL DCSP context &#91; u &apos;request &apos; &#93; = context DCNL DCSP context &#91; u &apos;request &apos; &#93; = context DCNL DCSP context &#91; u &apos;request &apos; &#93; = context DCNL DCSP return context
DCSP if ( not isinstance ( arg , basestring ) ) : DCNL DCSP DCSP return arg DCNL DCSP if isinstance ( arg , basestring ) : DCNL DCSP DCSP return value DCNL DCSP elif isinstance ( arg , basestring ) : DCNL DCSP DCSP return value DCNL DCSP else : DCNL DCSP DCSP return value
DCSP try : DCNL DCSP DCSP fun ( * args ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is None ) : DCNL DCSP DCSP start = None DCNL DCSP if ( query is not None ) : DCNL DCSP DCSP if ( query is None ) : DCNL
DCSP if ( f _ exp is None ) : DCNL DCSP DCSP f = f ( f ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( f _ exp is None ) : DCNL DCSP DCSP f = f ( f ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( f = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( f = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP square DCSP matrix &apos; ) DCNL DCSP else : DCNL DCSP DCSP n _ obs = np.sum ( ( f * * 2 ) , ddof = ddof ) DCNL DCSP DCSP if ( n _ obs = = 0 ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP
DCSP return &apos; .&apos;.join ( map ( str , sys.version _ info &#91; : 3 &#93; ) )
DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) : DCNL DCSP DCSP key _ function = None DCNL DCSP if ( key _ function is None ) :
DCSP if ( accept _ lang is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return True DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos; language &apos; DCNL DCSP elif ( accept _ lang = = &apos; language &apos; ) : DCNL DCSP DCSP return &apos;
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP if ( not isinstance ( paths , six.string _ types ) ) : DCNL DCSP DCSP paths = &#91; path &#93; DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( result &#91; &apos; retcode &apos; &#93; = = 0 ) : DCNL DCSP DCSP return ret &#91; &apos; stdout &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP assert ( errors = = &apos; strict &apos; ) DCNL DCSP output = binascii.a2b _ base64 ( input ) DCNL DCSP return ( output , len ( input ) )
DCSP pass
DCSP context = { &apos; title &apos; : &apos; About &apos; } DCNL DCSP return render ( request , template , context )
DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; Error : DCSP % s \ n &apos; % e ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( s &#91; 0 &#93; = = &apos; &quot; &apos; ) : DCNL DCSP DCSP s = shlex.split ( s ) DCNL DCSP else : DCNL DCSP DCSP s = shlex.split ( s ) DCNL DCSP return shlex.split ( s )
DCSP if ( ( min _ threshold is None ) or ( min _ percent is None ) ) : DCNL DCSP DCSP min _ threshold = min ( ( max _ percent - min _ percent ) , min _ percent , min _ percent , min _ percent , min _ percent , min _ percent , min _ percent , percent ) DCNL DCSP if ( min _ threshold is None ) : DCNL DCSP DCSP min _ threshold = min ( min _ percent , min _ percent ) DCNL DCSP if ( min _ percent is None ) : DCNL DCSP DCSP min _ percent = min ( min _ percent , min _ percent ) DCNL DCSP if ( min _ percent is None ) : DCNL DCSP DCSP min _ percent = min ( min _ percent , min _ percent ) DCNL DCSP if ( min _ percent is None ) : DCNL DCSP DCSP min _ percent = min ( min _ percent , min _ percent ) DCNL DCSP if ( min _ percent is None ) : DCNL DCSP DCSP min _ percent = min ( min _ percent
DCSP if ( user is None ) : DCNL DCSP DCSP user = get _ user _ permissions ( ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = get _ user _ permissions ( ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = get _ user _ permissions ( ) DCNL DCSP if ( user is None ) : DCNL DCSP DCSP user = frappe.session.user DCNL DCSP if ( not user ) : DCNL DCSP DCSP permissions = &#91; &#93; DCNL DCSP DCSP permissions = &#91; &#93; DCNL DCSP DCSP for role in roles : DCNL DCSP DCSP DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP DCSP permissions = { } DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP permissions = { } DCNL DCSP DCSP DCSP for role in roles : DCNL DCSP DCSP DCSP DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP DCSP DCSP permissions = { } DCNL DCSP DCSP DCSP DCSP DCSP permissions = { } DCNL DCSP DCSP DCSP DCSP DCSP for role in permissions :
DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = n _ classes DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = n _ classes DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = n _ classes DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = len ( y _ classes ) DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = len ( y _ classes ) DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = len ( y _ classes ) DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = len ( y _ classes ) DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes = len ( y _ classes ) DCNL DCSP if ( n _ classes is None ) : DCNL DCSP DCSP n _ classes =
DCSP if ( resource is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( app.config &#91; &apos; DELETED &apos; &#93; ! = app.config &#91; &apos; DELETED &apos; &#93; ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( not version ) : DCNL DCSP DCSP download _ base = ( &apos; setuptools- % s.tar.gz &apos; % version ) DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP from urllib2 import urlopen DCNL DCSP try : DCNL DCSP DCSP from setuptools import setuptools DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from urllib.request import urlopen DCNL DCSP except ImportError : DCNL DCSP DCSP
DCSP def decorator ( func ) : DCNL DCSP DCSP @ functools.wraps ( func ) DCNL DCSP DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return getattr ( * args , * * kwargs ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP return True
DCSP if hasattr ( request , &apos; messages &apos; ) : DCNL DCSP DCSP return request . _ messages DCNL DCSP else : DCNL DCSP DCSP return getattr ( request , &apos; messages &apos; , { } )
DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; Gentoo &apos; ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; The DCSP heat DCSP execution DCSP module DCSP cannot DCSP be DCSP loaded : DCSP only DCSP available DCSP on DCSP FreeBSD DCSP systems . &apos; )
DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP if include _ signature : DCNL DCSP DCSP operation _ model.name = ( &apos; % s . % s &apos; % ( operation _ model.name , operation _ model.name ) ) DCNL DCSP operation
DCSP if ( len ( token _ token ) ! = len ( token _ token ) ) : DCNL DCSP DCSP return ( &apos; % s DCSP % s &apos; % ( token _ token , sep ) ) DCNL DCSP if ( len ( token _ token ) = = 1 ) : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( token _ token &#91; 1 : &#93; , token _ token &#91; 1 : &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s % s &apos; % ( token _ token , sep ) )
DCSP if ( len ( candidates ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( clusters ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( clusters ) &lt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( clusters ) &lt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( clusters ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( clusters ) &gt; 1 ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP try : DCNL DCSP DCSP return User.objects.get ( email = email ) DCNL DCSP except Exception : DCNL DCSP DCSP return None
DCSP return get _ cache ( ) .get _ cache ( )
DCSP app = ( app or webapp2.get _ app ( ) ) DCNL DCSP app.registry &#91; key &#93; = store
DCSP return get _ server _ info ( request )
DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) = = 1 ) DCNL DCSP assert ( len ( data ) =
DCSP x = sympify ( x ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ) DCNL DCSP else : DCNL DCSP DCSP dims = ( ( -1 ) , ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ( -1 ) ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ( -1 ) ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ( -1 ) ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP DCSP dims = ( ( -1 ) , ( -1 ) ) DCNL DCSP else : DCNL DCSP DCSP dims = ( ( -1 ) , ) DCNL DCSP if ( outdim &gt; 1 ) : DCNL DCSP
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( filename ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( filename ) : DCNL DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( filename ) : DCNL DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( filename ) : DCNL DCSP DCSP DCSP DCSP DCSP ( yield Distribu@@ tion.from _ filename ( filename , metadata ) )
DCSP return ( ( int ( port ) , int ( port ) ) , factory )
DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( call ! = &apos; function &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; snapshot &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ snapshot DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs
DCSP try : DCNL DCSP DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP DCSP if ( result &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP DCSP return ret &#91; &apos; result &apos; &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return result &#91; &apos; result &apos; &#93; DCNL DCSP except Exception as e : DCNL DCSP DCSP return { &apos; result &apos; : False , &apos; comment &apos; : &apos; Success &apos; }
DCSP return bool ( _ get _ host _ full _ full ( client , host ) )
DCSP static _ path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; , &apos; static &apos; ,
DCSP return dict ( &#91; ( k , d &#91; k &#93; ) for k in keys &#93; )
DCSP return ( &apos
DCSP if ( name is None ) : DCNL DCSP DCSP profile = _ _ salt _ _ &#91; &apos; config.option &apos; &#93; ( profile ) DCNL DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; pagerduty _ util.resource _ absent &apos; &#93; ( name , profile = profile , * * kwargs ) DCNL DCSP if ( ret &#91; &apos; result &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; comment &apos; &#93; = &apos;
DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP DCSP objects = gc.get _ objects ( ) DCNL DCSP if ( objects is None ) : DCNL DCSP
DCSP if ( len ( df.index ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( df.index ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( df.index ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( df.index ) = = 0 ) : DCNL DCSP DCSP return None DCNL DCSP if ( len ( df.index ) = = 1 ) : DCNL DCSP DCSP return ( None , None ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP existing = destination.@@ settings.get ( setting , { } ) DCNL DCSP if ( value is not None ) : DCNL DCSP DCSP existing.@@ update ( value ) DCNL DCSP DCSP destination.settings &#91; setting &#93; = value
DCSP if ( dist is None ) : DCNL DCSP DCSP dist = str ( dist ) DCNL DCSP return &apos; .&apos;.join ( ( str ( x ) for x in dist ) )
DCSP TOPIC _ NAME = ( &apos; topic _ topic _ % s &apos; % ( _ millis ( ) , ) ) DCNL DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP topic.create ( ) DCNL DCSP to _ delete.append ( topic ) DCNL DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP topic.create ( ) DCNL DCSP to _ delete.append ( topic ) DCNL DCSP topic = client.topic ( TOPIC _ NAME ) DCNL DCSP topic.create ( ) DCNL DCSP assert topic.exists ( )
DCSP kwargs = { } DCNL DCSP for ( key , value ) in kwargs.items ( ) : DCNL DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP kwargs &#91; key &#93; = value DCNL DCSP return kwargs
DCSP result = &#91; &#93; DCNL DCSP while True : DCNL DCSP DCSP line = line.rstrip ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP line = line.strip ( ) DCNL DCSP DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP
DCSP finder = PackageFinderassert ( len ( completions ) = = 1 ) DCNL DCSP assert ( len ( entry ) = = 1 ) DCNL DCSP assert ( len ( entry ) = = 1 ) DCNL DCSP assert ( len ( entry ) = = 1 ) DCNL DCSP assert ( len ( entry ) = = 1 ) DCNL DCSP assert ( len ( entry ) = = 1 ) DCNL DCSP assert ( entry &#91; 0
DCSP try : DCNL DCSP DCSP os.remove ( source ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP return ( ( element is None ) or ( element is None ) )
DCSP if ( html is None ) : DCNL DCSP DCSP html = { } DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = { } DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is None ) : DCNL DCSP DCSP html = &#91; &#93; DCNL DCSP if ( html is not None ) : DCNL DCSP DCSP if ( html is not None ) : DCNL DCSP DCSP DCSP if ( html is not None ) : DCNL DCSP DCSP DCSP DCSP if ( html is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( html is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( html is not None
DCSP table = read _ basic ( &apos; A DCSP B DCSP C &apos; , parallel = parallel ) DCNL DCSP table = read _ csv ( table , parallel = parallel ) DCNL DCSP assert _ table _ equal ( table , expected )
DCSP if ( name is None ) : DCNL DCSP DCSP name = name DCNL DCSP if ( name in namespace ) : DCNL DCSP DCSP return name DCNL DCSP else : DCNL DCSP DCSP return name
DCSP return a.max ( axis = axis , axis = axis )
DCSP if stop : DCNL DCSP DCSP cmd = &apos; volume DCSP { 0 } DCSP deleted &apos; .format ( target ) DCNL DCSP else : DCNL DCSP DCSP cmd = &apos; volume DCSP { 0 } DCSP deleted &apos; .format ( target ) DCNL DCSP if stop : DCNL DCSP DCSP cmd + = &apos; DCSP --permanent &apos; DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP return sorted ( seq , key = ( lambda x : x &#91; 0 &#93; ) )
DCSP return &#91; node for node in node.get@@ children ( ) if ( node.type = = syms.suite ) &#93;
DCSP with ContextManager ( &apos; value &apos; ) as f : DCNL DCSP DCSP f.write ( &apos
DCSP @ wraps ( function ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP except Exception as exc : DCNL DCSP DCSP DCSP if ( &apos; error &apos; in exc ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm = DEFAULT _ PASSWORD DCNL DCSP if ( algorithm is None ) : DCNL DCSP DCSP algorithm =
DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; ) or ( question = = &apos; yes &apos; ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( question = = &apos; yes &apos; )
DCSP text = &apos; \ n &apos; .join ( &#91; ( &apos; % s % s &apos; % ( i , separator ) ) for i in range ( ( len ( w ) - 1 ) ) &#93; ) DCNL DCSP return &apos; \ n &apos; .join ( &#91; ( &apos; % s % s % s &apos; % ( i , w &#91; i &#93; ) for i in range ( len ( w ) ) &#93; )
DCSP result = &#91; &#93; DCNL DCSP for package in packages : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP pkg _ to _ install = os.path.join ( packages _ to _ install , package.name ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( d ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP
DCSP if ( not is _ valid _ file ( archive ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( targetDir ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not
DCSP return load _ module ( config _ string , default _ name )
DCSP if ( cov _ cov is not None ) : DCNL DCSP DCSP noise _ cov = pick _ types ( evoked , noise _ cov , alpha = noise _ cov , depth = depth ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( ( &apos; illegal DCSP data DCSP in DCSP % s &apos; % noise _ cov ) ) DCNL DCSP return evoked
DCSP ret = { &apos; name &apos; : hostname , &apos; changes &apos; : { } , &apos; result &apos; : False , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret &#91; &apos; changes &apos; &#93; = _ _ salt _ _ &#91; &apos; junos.@@ set _ hostname &apos; &#93; ( hostname , commit _ state ) DCNL DCSP return ret
DCSP @ wraps ( method ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return method ( self , * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return method ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( ( name is None ) or ( name is None ) ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL DCSP if ( name is None ) : DCNL DCSP DCSP defaults = { } DCNL
DCSP return js _ string.replace ( &apos; \ \ &apos; , &apos; \ \ \ \ &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &quot; &apos; ) .replace ( &apos; \ n &apos; , &apos; \ \ &quot; &apos; )
DCSP languages = &#91; &#93; DCNL DCSP for lang in apps : DCNL DCSP DCSP if ( not ( &apos; -&apos; in lang ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not lang ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP if ( default is None ) : DCNL DCSP DCSP default = DEFAULT _ SERVER DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = DEFAULT _ SERVER DCNL DCSP if ( default is None ) : DCNL DCSP DCSP default = default DCNL DCSP if ( default is not None ) : DCNL DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( default is not None ) : DCNL
DCSP ratio = &apos; auto &apos; DCNL DCSP ros = RandomOverSampler ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , ros.fit _ sample , X , Y )
DCSP if ( current _ release is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( current _ release = = current _ release ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP parser = argparse.ArgumentParser ( ) DCNL DCSP parser.add _ argument ( &apos; --@@ help &apos; , help = &apos; Run DCSP usage DCSP of DCSP the DCSP usage DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module . &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ help &apos; , help = &apos; The DCSP usage DCSP of DCSP the DCSP usage DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module . &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ help &apos; , help = &apos; The DCSP usage DCSP usage DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module . &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ help &apos; , help = &apos; The DCSP usage DCSP of DCSP the DCSP usage DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module DCSP of DCSP the DCSP module . &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ help &apos; , help = &apos; The DCSP usage DCSP of DCSP the DCSP usage DCSP of DCSP the DCSP
DCSP deriv = { } DCNL DCSP for i in range ( len ( expr ) ) : DCNL DCSP DCSP for i in range ( len ( basis ) ) : DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = j ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if (
DCSP if ( method = = &apos; polys &apos; ) : DCNL DCSP DCSP return _ generic _ factor _ list ( expr , gens , args , method ) DCNL DCSP else : DCNL DCSP DCSP return _ generic _ factor _ list ( expr , gens , args , method = method )
DCSP if ( event.arg is None ) : DCNL DCSP DCSP cursor = event.current _ buffer DCNL DCSP else : DCNL DCSP DCSP cursor = event.current _ buffer DCNL DCSP if ( cursor = = 0 ) : DCNL DCSP DCSP cursor = event.current _ buffer DCNL DCSP else : DCNL DCSP DCSP cursor = event.current _ buffer DCNL DCSP if ( cursor = = 0 ) : DCNL DCSP DCSP cursor = event.current _ buffer.@@ cursor DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor &#91; 0 &#93; DCNL DCSP DCSP cursor = cursor
DCSP ( y _ true , y _ prob ) = check _ pairwise _ arrays ( y _ true , y _ prob ) DCNL DCSP return ( ( - np.sum ( ( y _ true * y _ prob ) ) ) - np.log ( ( y _ prob - y _ prob ) ) ) )
DCSP hass = config.get ( CONF _ HOST ) DCNL DCSP server = config.get ( CONF _ HOST ) DCNL DCSP if ( not server ) : DCNL DCSP DCSP _ LOGGER.error ( &apos; Could DCSP not DCSP connect DCSP to DCSP server DCSP % s &apos; , server ) DCNL DCSP DCSP return DCNL DCSP server = _ connect ( hass , server _ config ) DCNL DCSP server.@@ start ( ) DCNL DCSP return True
DCSP return { &apos; exploration _ id &apos; : exploration _ id , &apos; version &apos; : version , &apos; version &apos; : version , &apos; version &apos; : version , &apos; version &apos; : version }
DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad = ( -1 ) DCNL DCSP if ( pad is None ) : DCNL DCSP DCSP pad =
DCSP return os.path.normcase ( os.path.realpath ( path ) )
DCSP if ( start &lt; end ) : DCNL DCSP DCSP start = end DCNL DCSP else : DCNL DCSP DCSP start = start DCNL DCSP start = end DCNL DCSP while ( start &lt; end ) : DCNL DCSP DCSP start + = start DCNL DCSP DCSP start + = end
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP return _ compile ( pattern , flags ) .search ( string )
DCSP with tf.name _ scope ( name ) as scope : DCNL DCSP DCSP weight = tf.nn.l2 _ loss ( name , shape , tf.truncated _ normal _ initializer ( stddev = stddev ) ) DCNL DCSP return weight
DCSP return getResolver ( ) .lookup@@ Signer ( name , timeout )
DCSP client = _ client ( * * client _ args ) DCNL DCSP client.create _ database ( name ) DCNL DCSP return True
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXError ( &apos; Directed DCSP Graph DCSP not DCSP supported &apos; ) DCNL DCSP if ( not
DCSP result = { } DCNL DCSP for ( root _ dir , client _ dir ) in zip ( git _ dir , roles _ dir ) : DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( api _ url is None ) : DCNL DCSP DCSP return DCNL DCSP if ( ( api
DCSP from django.conf import settings DCNL DCSP if ( not is _ or _ data ) : DCNL DCSP DCSP raise ImportError ( &apos; This DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not supports _ as _ data ) : DCNL DCSP DCSP raise ImportError ( &apos; This DCSP function DCSP requires DCSP a DCSP Python DCSP module . &apos; ) DCNL DCSP if ( not supports _ as _ data ) : DCNL DCSP DCSP raise ImportError ( &apos; This DCSP function DCSP requires DCSP a DCSP Python DCSP module . &apos; ) DCNL DCSP if ( not supports _ as _ data ) : DCNL DCSP DCSP raise ImportError ( &apos; This DCSP function DCSP is DCSP not DCSP installed . &apos; )
DCSP return get _ page _ page _ page ( status , * * kwargs )
DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( output _ dir ) : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP with open ( local _ file , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( chunk )
DCSP return get _ var ( &apos; SYNC &apos; )
DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP title = &apos; &apos; DCNL DCSP if ( origin is None ) : DCNL DCSP DCSP if ( origin is None ) : DCNL DCSP DCSP DCSP vmin = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vmin = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vmin = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vmin = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vmin = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP vmin = ( -1 ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP return np.ones ( ( width , width , width ) , dtype = dtype )
DCSP tokens = doc.split ( &apos; \ n &apos; ) DCNL DCSP tokens = tokens &#91; : ( -1 ) &#93; DCNL DCSP tokens = tokens &#91; : ( -1 ) &#93; DCNL DCSP tokens = tokens &#91; 1 : &#93; DCNL DCSP tokens = tokens &#91; : tokens &#93; DCNL DCSP tokens = tokens &#91; : ( -1 ) &#93; DCNL DCSP tokens = tokens &#91; 1 : &#93; DCNL DCSP tokens = tokens &#91; : tokens &#93; DCNL DCSP return tokens
DCSP if isinstance ( x , ( list , tuple ) ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP else : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _ DCNL DCSP else : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = opts DCNL DCSP if ( opts is None ) : DCNL DCSP DCSP opts = _ _ opts _ _
DCSP if ( not isinstance ( column , ( list , tuple ) ) ) : DCNL DCSP DCSP column = len ( column ) DCNL DCSP if ( len ( column ) = = 0 ) : DCNL DCSP DCSP return ( -1 ) DCNL DCSP if ( len ( column ) = = 1 ) : DCNL DCSP DCSP return column DCNL DCSP elif ( len ( column ) = = 1 ) : DCNL DCSP DCSP return column DCNL DCSP elif ( len ( column ) = = 2 ) : DCNL DCSP DCSP return ( column + &apos; DCSP &apos; ) DCNL DCSP else : DCNL DCSP DCSP return column
DCSP return execute ( cmd , * * kwargs )
DCSP return dup _ random ( n , a , K ) &#91; 0 &#93;
DCSP if _ is _ real ( idx ) : DCNL DCSP DCSP return backend.idd _ reconid ( idx , proj ) DCNL DCSP else : DCNL DCSP DCSP return backend.idz _ reconid ( idx , proj )
DCSP return &#91; ( u &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in six.iteritems ( f ) &#93;
DCSP return IP@@ Device ( device _ name , ip _ address , mac , namespace = namespace ) .exists ( )
DCSP s3 _ redirect _ default ( URL ( f = &apos; summary &apos; ) )
DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; expr DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( expr , list ) ) : DCNL DCSP
DCSP try : DCNL DCSP DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( content ) DCNL DCSP DCSP f.close ( ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP if ( not isinstance ( filters _ dict , dict ) ) : DCNL DCSP DCSP filters _ dict = &#91; &#93; DCNL DCSP if ( not isinstance ( filters _ dict , dict ) ) : DCNL DCSP DCSP filters _ dict = { } DCNL DCSP if ( not isinstance ( filters _ dict , dict ) ) : DCNL DCSP DCSP filters _ dict = { } DCNL DCSP if ( not isinstance ( filters _ dict , list ) ) : DCNL DCSP DCSP filters _ dict = { } DCNL DCSP for ( k , v ) in filters _ dict.items ( ) : DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( v is None ) : DCNL DCSP DCSP DCSP continue
DCSP if ( ax is None ) : DCNL DCSP DCSP ax = plt.gca ( ) DCNL DCSP return ax
DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) : DCNL DCSP DCSP domains = &#91; &#93; DCNL DCSP if ( domains is None ) :
DCSP if ( logbase ! = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP is DCSP not DCSP a DCSP proper DCSP probability DCSP distribution &apos; ) DCNL DCSP if ( ( abs ( ( px * * 2 ) ) &gt; 0 ) or ( abs ( ( px * * 2 ) ) &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP is DCSP not DCSP a DCSP proper DCSP probability DCSP distribution &apos; ) DCNL DCSP if ( ( abs ( ( px * * 2 ) ) = = 0 ) or ( abs ( ( px * * 2 ) ) = = 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP is DCSP not DCSP a DCSP proper DCSP probability DCSP distribution &apos; ) DCNL DCSP if ( ( abs ( ( px * * 2 ) ) &gt; 0 ) or ( abs ( ( px * * 2 ) ) &gt; 0 ) ) : DCNL DCSP DCSP raise ValueError ( &apos; px DCSP is DCSP not DCSP a DCSP proper DCSP probability DCSP distribution &apos; ) DCNL DCSP
DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( len ( s ) = = 1 ) DCNL DCSP assert ( s.@@ n _ inputs = = 1 ) DCNL DCSP assert ( s.@@ n _ outputs =
DCSP try : DCNL DCSP DCSP os.makedirs ( os.path.dirname ( _ _ file _ _ ) ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( not chain ) : DCNL DCSP DCSP return &apos; Error : DCSP Chain DCSP needs DCSP to DCSP be DCSP specified &apos; DCNL DCSP nft _ family = _ NFTABLES _ FAMILIES &#91; family &#93; DCNL DCSP cmd = &apos; { 0 } DCSP chain DCSP { 1 } DCSP { 2 } &apos; .format ( _ nftables _ cmd ( ) , nft _ family , table , table ) DCNL DCSP out = _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if out : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP args = { } DCNL DCSP if ( format _ string is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( format _ string is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( format _ string is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( format _ string is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( format _ string is None ) : DCNL DCSP DCSP return { } DCNL DCSP if ( ( format _ string is None ) or ( format _ string is None ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP format DCSP string : DCSP % s &apos; % format _ string ) ) DCNL DCSP try : DCNL DCSP DCSP ( key , num _ args ) = parse _ string _ string ( format _ string ) DCNL DCSP except ValueError : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP format DCSP string : DCSP % s &apos; % format _ string ) ) DCNL DCSP if ( num _ args is not None )
DCSP context.status = &apos; 500 DCSP Internal DCSP Server DCSP Error &apos; DCNL DCSP context.headers = &#91; ( &apos; Content-Type &apos; , &apos; text / html &apos; ) &#93; DCNL DCSP context.output = out
DCSP for ( key , value ) in params.items ( ) : DCNL DCSP DCSP if ( not key.startswith ( &apos; _ &apos; ) ) : DCNL DCSP DCSP DCSP return None DCNL DCSP return None
DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP value = int ( value ) DCNL DCSP if
DCSP from boto.@@ cloudh@@ sm.@@ layer1 import CloudHSM@@ Connection DCNL DCSP return get _ regions ( &apos; dynamodb &apos; , connection _ cls = boto.@@ sw@@ f.@@ layer1.@@ Layer1 )
DCSP with tf.name _ scope ( name ) as scope : DCNL DCSP DCSP inference = tf.nn.avg _ pool3d ( incoming , kernel _ size , name ) DCNL DCSP DCSP tf.add _ to _ collection ( tf.GraphKeys.ACTIVATIONS , inference ) DCNL DCSP inference.scope = scope DCNL DCSP tf.add _ to _ collection ( ( ( tf.GraphKeys.LAYER _ TENSOR + &apos; / &apos; ) + name ) , inference ) DCNL DCSP return inference
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP files = &#91; &#93; DCNL DCSP for ( root , dirs , files ) in os.walk ( path ) : DCNL DCSP DCSP for filename in files : DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( not os.path.exists ( os.path.join ( directory , filename ) ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP
DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP ax = fig.add _ subplot ( y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2 , y2
DCSP try : DCNL DCSP DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP fd.write ( f.read ( ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; Error : DCSP % s \ n &apos; % e ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP text = text.strip ( ) DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP text = text.strip ( ) DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP text = text.strip ( ) DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP text = text.strip ( ) DCNL DCSP if ( not text ) : DCNL DCSP DCSP return &apos; Could DCSP not DCSP find DCSP
DCSP group _ list = request.GET.get ( &apos; group &apos; , &apos; &apos; ) DCNL DCSP group _ list = &#91; &#93; DCNL DCSP for group in group _ list : DCNL DCSP DCSP group _ list.append ( group ) DCNL DCSP return render ( request , &apos; wiki / group _ list _ list.html &apos; , { &apos; group _ list &apos; : group _ list , &apos; group _ list &apos; : group _ list } )
DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( f.read ( ) )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP conn.create _ subnet _ group ( name = name , description = description , subnet _ ids = subnet _ ids , tags = tags , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP msg = &apos; Failed DCSP to DCSP create DCSP subnet DCSP group DCSP { 0 } . &apos; DCNL DCSP DCSP log.error ( msg.format ( name ) ) DCNL DCSP DCSP return False
DCSP manager = MANAGER DCNL DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP run _ as _ root ( ( &apos; % ( manager ) s DCSP update &apos; % locals ( ) ) )
DCSP if ( category is None ) : DCNL DCSP DCSP locale = DEFAULT _ LOCALE _ MAP DCNL DCSP locale = Locale.parse ( locale ) DCNL DCSP if ( not locale ) : DCNL DCSP DCSP return None DCNL DCSP if ( category is None ) : DCNL DCSP DCSP locale = get _ locale ( ) DCNL DCSP if ( category is None ) : DCNL DCSP DCSP locale = DEFAULT _ LOCALE _ MAP &#91; category &#93; DCNL DCSP return locale
DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key
DCSP if ( outfile is None ) : DCNL DCSP DCSP outfile = StringIO ( ) DCNL DCSP if ( outfile is None ) : DCNL DCSP DCSP outfile = StringIO ( ) DCNL DCSP if ( outfile is None ) : DCNL DCSP DCSP outfile = open ( code , &apos; wb &apos; ) DCNL DCSP if ( outfile is None ) : DCNL DCSP DCSP outfile = open ( code , &apos; wb &apos; ) DCNL DCSP if ( outfile is None ) : DCNL DCSP DCSP outfile = StringIO ( ) DCNL DCSP DCSP if ( outfile is None ) : DCNL DCSP DCSP DCSP encoding = None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP formatter.format ( code , encoding , outfile ) DCNL DCSP else : DCNL DCSP DCSP if ( outfile is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if ( outfile is None ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise TypeError ( ( &apos; Unknown DCSP encoding DCSP % s &apos; % type ( code ) ) ) DCNL DCSP if
DCSP rels = &#91; &#93; DCNL DCSP for child in worksheet . _ traverse ( ) : DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( media _ id is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( child , Element ) ) :
DCSP assert ( os.name = = &apos; nt &apos; )
DCSP ax = hist.@@ twinx ( ) DCNL DCSP ax = hist.@@ twinx ( ) DCNL DCSP ax = hist.@@ twinx ( ) DCNL DCSP return ax
DCSP with open ( file _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP data = f.read ( ) DCNL DCSP return data
DCSP existing _ user = get _ object _ or _ 404 ( requesting _ user , preference _ key , username , password ) DCNL DCSP return UserPreference@@ .get _ value ( requesting _ user , preference _ key , preference _ value )
DCSP while node : DCNL DCSP DCSP node = node.parent DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP node = node.parent DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( node is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP arg = ugettext ( &apos; yes &apos; ) DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( arg is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( arg is None ) : DCNL DCSP
DCSP res = session.query ( BrocadePort ) .filter _ by ( cluster = cluster ) .first ( ) DCNL DCSP if ( res is None ) : DCNL DCSP DCSP return None DCNL DCSP return res &#91; 0 &#93;
DCSP return ( ( password = = &apos; &apos; ) or ( password = = &apos; &apos; ) )
DCSP if ( encrypt is None ) : DCNL DCSP DCSP if debug : DCNL DCSP DCSP DCSP cherrypy.log ( &apos; Auth DCSP successful &apos; , &apos; TOOLS.@@ BASIC _ AUTH &apos; ) DCNL DCSP DCSP return DCNL DCSP cherrypy.serving.response.headers &#91; &apos; www-authenticate &apos; &#93; = httpauth.@@ basicAuth ( realm ) DCNL DCSP raise cherrypy.HTTPError ( 401 , &apos; You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP a DCSP password &apos; )
DCSP ( scheme , netloc , path , query , fragment ) = urlparse.urlsplit ( url ) DCNL DCSP url = urljoin ( url , url ) DCNL DCSP return urlparse.urlunsplit ( ( scheme , netloc , path , query , fragment ) )
DCSP if ( not isinstance ( exp , cls ) ) : DCNL DCSP DCSP return False DCNL DCSP if isinstance ( exp , cls ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ version _ version &apos; , None ) or _ Cfunction ( &apos; libvlc _ version _ version &apos; , ( ( 1 , ) , ) , None , ctypes.c _ int , ctypes.c _ char _ p ) ) DCNL DCSP return f ( )
DCSP s3 _ redirect _ default ( URL ( f = &apos; summary &apos; ) )
DCSP if ( openid _ request is None ) : DCNL DCSP DCSP openid _ root = request.META.get ( &apos; HTTP _ REFERER &apos; ) DCNL DCSP if ( openid _ root is None ) : DCNL DCSP DCSP openid _ root = openid _ request ( ) DCNL DCSP if ( openid _ root is not None ) : DCNL DCSP DCSP openid _ request = openid _ request ( request , openid _ request ) DCNL DCSP else : DCNL DCSP DCSP openid _ request = openid _ request ( request , openid _ request ) DCNL DCSP return render _ to _ response ( &apos; openid _ openid _ request &apos; , { &apos; openid _ request &apos; : openid _ request } )
DCSP if ( ( uri is None ) or ( uri is None ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not uri.startswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP uri + = &apos; / &apos; DCNL DCSP return ( uri , timeout )
DCSP return _ unpack _ data ( fid , tag.size , dtype = &apos; &gt; i4 &apos; , shape = shape , rlims = rlims )
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return render ( request , &apos; wiki / confirm _ delete.html &apos; , { &apos; form &apos; : form } ) DCNL DCSP else : DCNL DCSP DCSP return render ( request , &apos; wiki / confirm _ delete.html &apos; , { &apos; form &apos; : form } )
DCSP try : DCNL DCSP DCSP import load DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import load DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import load DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import load DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import load DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP return { }
DCSP redirects = &#91; &#93; DCNL DCSP for p in redirects : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = open ( p _ filename , &apos; r &apos; ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP break DCNL DCSP return resp
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not enable _ beta _ formats ) or ( not enable _ beta _ formats ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not enable _ beta _ formats ) : DCNL DCSP DCSP return False DCNL DCSP if ( not enable _ beta _ formats ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not enable _ beta _ formats ) or ( not enable _ beta _ formats ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not enable _ beta _ formats ) or ( not enable _ beta _ formats ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( ( not enable _ beta _ formats ) or ( not enable _ beta _ formats ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( check _ beta _ formats is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( not enable _ beta _ formats ) : DCNL DCSP DCSP return False DCNL DCSP if (
DCSP func.argtypes = argtypes DCNL DCSP func.restype = c _ uchar _ p DCNL DCSP return func
DCSP if ( not trigger.group ( 2 ) ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP return DCNL DCSP url = trigger.group ( 2 ) DCNL DCSP if ( not url ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such
DCSP results = &#91; &#93; DCNL DCSP for ( _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _
DCSP vpcs = _ find _ vpcs ( vpc _ id = vpc _ id , vpc _ name = vpc _ name , cidr = cidr , tags = tags , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP if vpcs : DCNL DCSP DCSP return &#91; vpc _ id for vpc in vpcs &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP return ( ( degree _ sequence is not None ) and ( len ( deg _ sequence ) = = 0 ) )
DCSP if is _ training : DCNL DCSP DCSP return slim.conv2d ( inputs , num _ classes , is _ training = is _ training , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP return slim.conv2d ( inputs , num _ classes , is _ training = is _ training , * * kwargs )
DCSP a = TpPd ( pd = 6 ) DCNL DCSP b = MessageType ( mesType = 5 ) DCNL DCSP c = RrCause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP if ( method is None ) : DCNL DCSP DCSP how = None DCNL DCSP if ( limit is None ) : DCNL DCSP DCSP how = None DCNL DCSP if ( ( limit is not None ) and ( limit is not None ) ) : DCNL DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( limit is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP keyword DCSP arguments . &apos; % key ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP keyword DCSP arguments . &apos; % key ) ) DCNL DCSP if ( ( limit is not None ) and ( limit is not None ) ) : DCNL DCSP DCSP if (
DCSP if ( not isinstance ( model , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP model DCSP name DCSP % s &apos; % type ( model ) ) ) DCNL DCSP if ( not isinstance ( model , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP model DCSP name DCSP % s &apos; % type ( model ) ) ) DCNL DCSP if ( not isinstance ( model , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP model DCSP name : DCSP % s &apos; % type ( model ) ) ) DCNL DCSP if ( not isinstance ( model , basestring ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP model DCSP name DCSP % s &apos; % type ( model ) ) ) DCNL DCSP if ( not isinstance ( model , six.string _ types ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP model DCSP name DCSP % s &apos; % type ( model ) ) ) DCNL DCSP if ( not isinstance ( model ,
DCSP if ( config _ file is None ) : DCNL DCSP DCSP config _ file = config _ file DCNL DCSP try : DCNL DCSP DCSP with open ( config _ file , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP ( a , b ) = ( &#91; &#93; , &#91; &#93; ) DCNL DCSP while ( apath and ( c ! = &apos; &apos; ) ) : DCNL DCSP DCSP ( a , b ) = ( &#91; &#93; , &#91; &#93; ) DCNL DCSP DCSP if ( c = = &apos; &apos; ) : DCNL DCSP DCSP DCSP return ( a , b ) DCNL DCSP DCSP elif ( c = = &apos; / &apos; ) : DCNL DCSP DCSP DCSP return ( a , b ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( a , b ) DCNL DCSP return ( &apos; &apos; , &apos; &apos; )
DCSP if ( not prefix ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not re.match ( &apos; ^ \ \ d + $ &apos; , prefix ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( &apos; @ &apos; in prefix ) : DCNL DCSP DCSP return &apos; https : / / { } &apos; .format ( prefix ) DCNL DCSP if ( &apos; @ &apos; in prefix ) : DCNL DCSP DCSP return &apos; https : / / { } &apos; .format ( prefix ) DCNL DCSP else : DCNL DCSP DCSP return &apos; https : / / { } &apos; .format ( prefix )
DCSP if ( user = = user ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP if ( ignore _ errors is None ) : DCNL DCSP DCSP ignore _ errors = &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP st = os.lstat ( path ) DCNL DCSP except os.error : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP st = os.lstat ( path ) DCNL DCSP except os.error : DCNL DCSP DCSP onerror ( os.rmdir , path , sys.exc _ info ( ) ) DCNL DCSP try : DCNL DCSP DCSP os.rmdir ( path ) DCNL DCSP except os.error : DCNL DCSP DCSP onerror ( os.rmdir , path , sys.exc _ info ( ) )
DCSP if ( &apos; debug &apos; in kwargs ) : DCNL DCSP DCSP kwargs &#91; &apos; debug &apos; &#93; = True DCNL DCSP return debug ( * args , * * kwargs )
DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if ( header is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP if raw _ body : DCNL DCSP DCSP body + = ( &apos; \ n &apos; + headers ) DCNL DCSP if raw _ body : DCNL DCSP DCSP body + = ( &apos; \ n &apos; + headers ) DCNL DCSP return body
DCSP url = &apos; { 0 } / api / v1 / { 1 } &apos; .format ( apiserver _ url , name ) DCNL DCSP data = http.query ( url ) DCNL DCSP if ( &apos; data &apos; in data ) : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP data &#91; &apos; data &apos; &#93; = data &#91; &apos; data &apos; &#93; DCNL DCSP return data
DCSP return max ( argmax ( x ) )
DCSP mode = session.s3.hrm.mode DCNL DCSP def prep ( r ) : DCNL DCSP DCSP if ( mode is not None ) : DCNL DCSP DCSP DCSP auth.permission.fail ( ) DCNL DCSP DCSP return True DCNL DCSP s3.prep = prep DCNL DCSP output = s3 _ rest _ controller ( ) DCNL DCSP return output
DCSP if ( args is None ) : DCNL DCSP DCSP args = args DCNL DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP num = len ( args &#91; 0 &#93; ) DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP num = 0 DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP num = 1 DCNL DCSP elif ( len ( args ) = = 1 ) : DCNL DCSP DCSP num = 1 DCNL DCSP else : DCNL DCSP DCSP num = 1 DCNL DCSP if ( len ( args ) ! = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Number DCSP must DCSP be DCSP square &apos; ) DCNL DCSP if ( len ( args ) ! = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Number DCSP must DCSP be DCSP square &apos; ) DCNL DCSP if ( len ( args ) ! = 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; At DCSP least DCSP one DCSP argument DCSP must DCSP be DCSP square &apos; ) DCNL
DCSP results = &#91; &#93; DCNL DCSP for results in results : DCNL DCSP DCSP results + = list ( results ) DCNL DCSP return results
DCSP if ( not isinstance ( json _ data , six.string _ types ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not isinstance ( json _ data , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not isinstance ( json _ data , dict ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not isinstance ( json _ data , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP if ( not isinstance ( json _ data , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Pillar DCSP data DCSP must DCSP be DCSP a
DCSP ret = { } DCNL DCSP try : DCNL DCSP DCSP ret = cql _ query ( query , contact _ points , port , cql _ user , cql _ pass ) DCNL DCSP except BaseException as e : DCNL DCSP DCSP log.critical ( &apos; Unexpected DCSP error DCSP while DCSP listing DCSP Cassandra : DCSP { 0 } &apos; .format ( str ( e ) ) ) DCNL DCSP DCSP raise DCNL DCSP return ret
DCSP ( start , end ) = ( ( start + end ) , ( start + end ) ) DCNL DCSP ( start , end ) = ( ( start + end ) , ( start + end ) ) DCNL DCSP ( start , end ) = ( ( start + end ) , ( start + end ) ) DCNL DCSP return ( start , end )
DCSP class A ( object , ) : DCNL DCSP DCSP def _ _ init _ _ ( self ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP def _ _ init _ _ ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP _ _ init _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP _ _ init _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP _ _ init _ _ ( self ) DCNL DCSP DCSP DCSP _ _ init _ _ ( self , * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP _ _ init _ _ ( self ) DCNL
DCSP if ( language _ sequence is None ) : DCNL DCSP DCSP global _ vars = { } DCNL DCSP if ( language is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP DCSP global _ vars DCNL DCSP if ( global _ vars is None ) : DCNL DCSP
DCSP temp _ dir = tempfile.mkdtemp ( ) DCNL DCSP temp _ dir = tempfile.mkdtemp ( ) DCNL DCSP temp _ dir = tempfile.mkdtemp ( ) DCNL DCSP temp _ dir = tempfile.mkdtemp ( dir = temp _ dir ) DCNL DCSP temp _ dir = tempfile.mkdtemp ( dir = temp _ dir ) DCNL DCSP os.chdir ( temp _ dir ) DCNL DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP os.chdir ( temp _ dir )
DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP if ( not options ) : DCNL DCSP DCSP return None DCNL DCSP return ( datetime.strptime ( options &#91; 0 &#93; , &apos; % Y- % m- % dT % H : % M : % S. % fZ &apos; )
DCSP if ( len ( page _ size ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( page _ size ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( page _ size ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP for node in domhelpers.findElementsWithAttribute ( document , &apos; notes &apos; , &apos; html &apos; ) : DCNL DCSP DCSP if ( node.getAttribute ( &apos; href &apos; ) = = document ) : DCNL DCSP DCSP DCSP return node DCNL DCSP return None
DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP DCSP argv = sys.argv &#91; 1 : &#93; DCNL DCSP if ( argv is None ) : DCNL DCSP
DCSP return _ group ( groupname , user = user , host = host , port = port , maintenance _ db = maintenance _ db , password = password , runas = runas )
DCSP ( a , axis ) = _ chk _ asarray ( a , axis ) DCNL DCSP s = a.std ( axis = axis , ddof = ddof , nan _ policy = nan _ policy ) DCNL DCSP return s
DCSP try : DCNL DCSP DCSP os.unlink ( path ) DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP sizes = avail _ locations ( ) DCNL DCSP vm _ size = config.get _ cloud _ config _ value ( &apos; volume _ size &apos; , vm _ , _ _ opts _ _ , search _ global = False ) DCNL DCSP if ( not vm _ size ) : DCNL DCSP DCSP raise SaltCloudNotFound ( &quot; The DCSP specified DCSP image DCSP &apos; { 0 } &apos; DCSP could DCSP not DCSP be DCSP found . &quot; .format ( vm _ size ) ) DCNL DCSP if ( vm _ size is None ) : DCNL DCSP DCSP raise SaltCloudNotFound ( &quot; The DCSP specified DCSP image DCSP &apos; { 0 } &apos; DCSP could DCSP not DCSP be DCSP found . &quot; .format ( vm _ ) ) DCNL DCSP if ( vm _ size is None ) : DCNL DCSP DCSP raise SaltCloudNotFound ( &quot; The DCSP specified DCSP image DCSP &apos; { 0 } &apos; DCSP could DCSP not DCSP be DCSP found . &quot; .format ( vm _ ) ) DCNL DCSP if ( vm _ size is None ) : DCNL DCSP DCSP raise SaltCloudNotFound ( &quot; The DCSP specified DCSP
DCSP if ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( len ( tokens ) = = 1 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP _ easy _ install ( python _ cmd , use _ sudo = use _ sudo , use _ sudo = use _ sudo )
DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath is None ) : DCNL DCSP DCSP newpath = os.getcwd ( ) DCNL DCSP if ( newpath and ( not os.path.exists ( newpath ) ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( newpath ) ) : DCNL DCSP DCSP
DCSP course = get _ course _ or _ 404 ( course.id , course = course ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return redirect ( request.POST.get ( &apos; ccx &apos; , None ) ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return HttpResponseForbidden ( ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return HttpResponseForbidden ( ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return redirect ( request.POST.get ( &apos; ccx &apos; , None ) ) DCNL DCSP if ( not ccx ) : DCNL DCSP DCSP return HttpResponseForbidden ( ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return JsonResponse ( { &apos; success &apos; : True } ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponse ( json.dumps ( { &apos; course &apos; : course , &apos; ccx &apos; : ccx } ) , content _ type = &apos; application / json &apos; )
DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if kwargs : DCNL DCSP DCSP kwargs &#91; &apos; title &apos; &#93; = title DCNL DCSP if kwargs : DCNL DCSP DCSP kwargs &#91; &apos; title &apos; &#93; = title DCNL DCSP return kwargs
DCSP if isinstance ( url , str ) : DCNL DCSP DCSP return url DCNL DCSP else : DCNL DCSP DCSP return str ( url )
DCSP try : DCNL DCSP DCSP return adm ( ) DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP if ( fd = = fd ) : DCNL DCSP DCSP DCSP DCSP return True DCNL DCSP DCSP except IOError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EINTR ) : DCNL DCSP DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP if ( num _ threads is None ) : DCNL DCSP DCSP num _ threads = num _ threads DCNL DCSP else : DCNL DCSP DCSP num _ threads = num _ threads DCNL DCSP if ( num _ threads &gt; 0 ) : DCNL DCSP DCSP num _ threads = num _ threads DCNL DCSP else : DCNL DCSP DCSP num _ threads = num _ threads DCNL DCSP return ( num _ threads , num _ threads )
DCSP get _ urls ( ) DCNL DCSP urls = BeautifulSoup ( get _ data _ urls ( ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _ true ( ( len ( urls ) = = 1 ) ) DCNL DCSP assert _
DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = { } DCNL DCSP if ( pillar is None ) : DCNL DCSP DCSP pillar = pillar _ client.get _ pillar ( ) DCNL DCSP return salt.utils.@@ etcd _ util.get _ pillar ( opts , opts , minion _ id , saltenv , opts , pillar = pillar , pillarenv = pillarenv )
DCSP if salt.utils.is _ windows ( ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; Module DCSP win _ module : DCSP module DCSP only DCSP works DCSP on DCSP Windows DCSP systems &apos; )
DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP if ( names is None ) : DCNL DCSP DCSP names = &#91; &#93; DCNL DCSP for name in names : DCNL DCSP
DCSP spec = &#91; &#93; DCNL DCSP for spec in spec : DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( not spec ) or ( not spec ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not spec ) : DCNL DCSP DCSP DCSP
DCSP return &apos; &apos;.join ( ( str ( i ) for i in value ) )
DCSP return STORAGE@@ .create _ index ( &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; , &#91; &#93; )
DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; error &apos; in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; status &apos; not in kwargs ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos;
DCSP val = &#91; &#93; DCNL DCSP for item in s : DCNL DCSP DCSP val = ord ( val ) DCNL DCSP DCSP if ( val is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP val = ord ( val ) DCNL DCSP DCSP if ( val is not None ) : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP DCSP if ( val is not None ) : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP DCSP if ( val is not None ) : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP val = ord ( val ) DCNL DCSP return val
DCSP if isinstance ( context , six.string _ types ) : DCNL DCSP DCSP context = context &#91; &apos; context &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP context = context &#91; &apos; context &apos; &#93; DCNL DCSP return context
DCSP stepKey = getStepKey ( x , y ) DCNL DCSP addElementTo@@ ListTable ( element , stepKey , pixelDictionary )
DCSP try : DCNL DCSP DCSP return socket.inet _ pton ( socket.AF _ INET6 , address ) DCNL DCSP except ( AddressValueError , NetmaskValueError ) : DCNL DCSP DCSP pass DCNL DCSP return None
DCSP return ( iface in get _ disabled ( ) )
DCSP data = { } DCNL DCSP for ( key , value ) in six.iteritems ( attrs ) : DCNL DCSP DCSP if isinstance ( value , dict ) : DCNL DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP return data
DCSP return IMPL.network _ delete _ safe ( context , network _ id )
DCSP cmd = &apos; { 0 } DCSP { 1 } DCSP { 2 } &apos; .format ( user , path , cmd ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False )
DCSP warnings.simplefilter ( &apos; ignore &apos; , DeprecationWarning ) DCNL DCSP try : DCNL DCSP DCSP os.remove ( * args ) DCNL DCSP except Exception : DCNL DCSP DCSP pass
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP abuse _ formset = acl.action _ allowed ( request , &apos; Apps &apos; , &apos; View &apos; ) DCNL DCSP DCSP if ( ( request.method = = &apos; POST &apos; ) and acl.action _ allowed ( request , &apos; Apps &apos; , &apos; ModerateReview &apos; ) ) : DCNL DCSP DCSP DCSP return render ( request , &apos; Apps &apos; , &apos; View &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return render ( request , &apos; Apps &apos; , &apos; View &apos; ) DCNL DCSP elif ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP abuse _ formset = acl.action _ allowed ( request , &apos; Apps &apos; , &apos; View &apos; ) DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP abuse _ formset = acl.action _ allowed ( request , &apos; Apps &apos; , &apos; View &apos; ) DCNL DCSP DCSP DCSP return render ( request , template , context ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return render ( request , &apos; Apps &apos; ,
DCSP volume _ id = kwargs.pop ( &apos; volume _ id &apos; , None ) DCNL DCSP volume _ id = kwargs.get ( &apos; volume _ id &apos; , None ) DCNL DCSP if kwargs.get ( &apos; volume _ id &apos; ) : DCNL DCSP DCSP volume _ id = kwargs.get ( &apos; volume _ id &apos; ) DCNL DCSP else : DCNL DCSP DCSP volume _ id = kwargs.get ( &apos; volume _ id &apos; ) DCNL DCSP return fake _ volume _ volume ( * args , * * kwargs )
DCSP def check _ func ( x , y ) : DCNL DCSP DCSP array.assert _ array _ almost _ equal ( x , y , y , verbose , type _ check , accept _ error ) DCNL DCSP return make _ decorator ( x , y , name , type _ check , accept _ error )
DCSP http _ request = HttpRequest ( ) DCNL DCSP if ( &apos; HTTP _ COOKIE &apos; in os.environ ) : DCNL DCSP DCSP if ( &apos; HTTP _ COOKIE &apos; in os.environ ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 58 ) DCNL DCSP c = Facility ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP if ( UserUser _ presence is 1 ) : DCNL DCSP DCSP e = UserUserHdr ( ieiUU = 126 , eightBitUU = 0 ) DCNL DCSP DCSP packet = ( packet / e ) DCNL DCSP if ( UserUser _ presence is 1 ) : DCNL DCSP DCSP e = UserUserHdr ( ieiUU = 126 , eightBitUU = 0 ) DCNL DCSP DCSP packet = ( packet / e ) DCNL DCSP if ( SsVersionIndicator _ presence is 1 ) : DCNL DCSP DCSP e = SsVersionIndicatorHdr ( ieiSVI = 127 , eightBitSVI = 0 ) DCNL DCSP DCSP packet = ( packet / e ) DCNL DCSP return packet
DCSP sys.stderr.write ( ( ( &apos; \ n &apos; + msg ) + &apos; \ n &apos; ) ) DCNL DCSP print ( ( &apos; \ n &apos; + ( &apos
DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( unique _ idx _ names ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( unique _ idx _ names ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = 0 DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = 0 DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = 0 DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = len ( unique _ idx _ names ) DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx _ names = 0 DCNL DCSP if ( n _ idx _ names is None ) : DCNL DCSP DCSP n _ idx
DCSP if os.path.exists ( file _ ) : DCNL DCSP DCSP return file _ DCNL DCSP else : DCNL DCSP DCSP return None
DCSP _ create _ pip _ install ( data ) DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = data &#91; u &apos;@@ dev _ version &apos; &#93; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = u &apos; &apos; DCNL DCSP data &#91; u &apos;new _ version &apos; &#93; = ( ( ( ( (
DCSP if ( priority is None ) : DCNL DCSP DCSP priority = ( -1 ) DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP elif ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP elif ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP elif ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP elif ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority is None ) : DCNL DCSP DCSP priority = priority DCNL DCSP elif ( priority = = 0 ) : DCNL DCSP DCSP return DCNL DCSP if ( priority is None ) : DCNL
DCSP srs = Subreddit . _ by _ name ( sr _ names ) DCNL DCSP uploader = Solr@@ Subreddit@@ Uploader ( things = srs ) DCNL DCSP return uploader.inject ( )
DCSP return ( method _ name + method . _ _ name _ _ )
DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP rng = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed = np.random.RandomState ( seed ) DCNL DCSP if ( seed is None ) : DCNL DCSP DCSP seed
DCSP for ( key , value ) in d.items ( ) : DCNL DCSP DCSP if ( key in d ) : DCNL DCSP DCSP DCSP return key DCNL DCSP return None
DCSP for pattern in patterns : DCNL DCSP DCSP ( yield pattern )
DCSP if ( instance is None ) : DCNL DCSP DCSP instance = get _ object _ or _ 404 ( cls , * * extra _ filters ) DCNL DCSP if ( instance is None ) : DCNL DCSP DCSP instance = get _ object _ or _ 404 ( cls , * * extra _ filters ) DCNL DCSP return cls ( * * extra _ filters )
DCSP return get _ default _ project ( app )
DCSP if ( mode = = &apos; C &apos; ) : DCNL DCSP DCSP return &apos; mode &apos; DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s . % s &apos; % ( mode , ( &apos; % s &apos; % mode ) ) )
DCSP if ( not isinstance ( types , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Only DCSP cupy DCSP types DCSP are DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( not isinstance ( types , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Only DCSP cupy DCSP types DCSP are DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( not isinstance ( types , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Only DCSP cupy DCSP types DCSP are DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( not isinstance ( types , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Only DCSP cupy DCSP types DCSP are DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( not isinstance ( types , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Only DCSP cupy DCSP types DCSP are DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( not isinstance
DCSP return render _ javascript _ catalog ( )
DCSP if isinstance ( path , six.text _ type ) : DCNL DCSP DCSP path = path.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( path , six.text _ type ) : DCNL DCSP DCSP path = path.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( path , six.text _ type ) : DCNL DCSP DCSP path = path.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( path , unicode ) : DCNL DCSP DCSP path = path.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( path , unicode ) : DCNL DCSP DCSP path = path.encode ( &apos; utf-8 &apos; ) DCNL DCSP return path
DCSP ratio = &apos; auto &apos; DCNL DCSP ada = ADASYN ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , ada.fit , X , Y )
DCSP monitor = _ find _ monitor ( cs , args.monitor _ id ) DCNL DCSP _ find _ monitor _ snapshot ( cs , args.monitor )
DCSP if isinstance ( key , six.string _ types ) : DCNL DCSP DCSP return salt.utils.traverse _ dict _ and _ list ( _ _ grains _ _ , key , default , delimiter ) DCNL DCSP else : DCNL DCSP DCSP return salt.utils.traverse _ dict _ and _ dict ( _ _ grains _ _ , key , default , delimiter )
DCSP if ( sys.version _ info &lt; ( 3 , ) ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP nodelist = parser.parse ( ( &apos; end@@ comment &apos; , ) ) DCNL DCSP parser.delete _ first _ token ( ) DCNL DCSP return Comment@@ Node ( )
DCSP if ( len ( data ) = = 1 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP elif ( len ( data ) = = 1 ) : DCNL DCSP DCSP return ( None , None , None ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None , None )
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP elif ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP else : DCNL DCSP DCSP version = &apos; version &apos; DCNL DCSP return version
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( name ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s : DCSP % ( name ) s &apos; ) DCNL DCSP formatter = logging.Formatter ( &apos; % ( asctime ) s DCSP % ( asctime ) s DCSP % ( levelname ) s : DCSP % ( name ) s &apos; , locals ( ) ) DCNL DCSP
DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP if isinstance ( s , six.string _ types ) : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP errors = { } DCNL DCSP for ( key , value ) in six.iteritems ( errors ) : DCNL DCSP DCSP if ( value is not None ) : DCNL DCSP DCSP DCSP errors.append ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP errors.append ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP return errors
DCSP if ( args is None ) : DCNL DCSP DCSP args = &#91; &#93; DCNL DCSP try : DCNL DCSP DCSP options.parseOptions ( args ) DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; % s : DCSP % s \ n &apos; % ( e , e ) ) ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP except Exception as e : DCNL DCSP DCSP sys.stderr.write ( ( &apos; % s : DCSP % s &apos; % ( e , e ) ) ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP if ( not dry _ run ) : DCNL DCSP DCSP zipoptions = &apos; { 0 } / { 1 } &apos; .format ( base _ dir , base _ dir ) DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP zipoptions = &apos; { 0 } / { 1 } &apos; .format ( base _ dir , base _ dir ) DCNL DCSP if ( not dry _ run ) : DCNL DCSP DCSP zipoptions = &apos; { 0 } / { 1 } &apos; .format ( base _ dir , base _ dir ) DCNL DCSP zip = zipfile.ZipFile ( zip _ filename , &apos; w &apos; ) DCNL DCSP for ( dirpath , dirnames , filenames ) in os.walk ( base _ dir ) : DCNL DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( base _ dir ) : DCNL DCSP DCSP DCSP for ( dirpath , dirnames , filenames ) in os.walk ( base _ dir ) : DCNL DCSP DCSP DCSP DCSP for filename in filenames : DCNL DCSP DCSP DCSP DCSP DCSP path = os.path.join ( dirpath , filename ) DCNL DCSP DCSP DCSP
DCSP if ( not isinstance ( algo , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP argument DCSP to DCSP % s &apos; % ( _ _ name _ _ , &apos; DCSP &apos; .join ( ( ( &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in enumerate ( data ) ) ) ) ) ) DCNL DCSP if ( not isinstance ( data , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP method &apos; % name ) ) DCNL DCSP if ( not isinstance ( data , dict ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP method &apos; % name ) ) DCNL DCSP if ( not isinstance ( data , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a
DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP json.dump ( data , f )
DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP roles &#91; &apos; roles &apos; &#93; = &#91; &#93; DCNL DCSP for role in roles : DCNL DCSP DCSP roles &#91; &apos; roles &apos; &#93; .append ( role ) DCNL DCSP return roles
DCSP out = { } DCNL DCSP for ( i , col ) in enumerate ( right ) : DCNL DCSP DCSP if ( i = = col _ name ) : DCNL DCSP DCSP DCSP out &#91; col &#93; = col DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out &#91; col &#93; = col DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out &#91; col &#93; = col DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out &#91; col &#93; = col DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP out &#91; col &#93; = col DCNL DCSP return out
DCSP if ( isinstance ( node.op , DimShuffle ) and isinstance ( node.op , IncSubtensor ) ) : DCNL DCSP DCSP op = node.op. _ _ class _ _ ( * node.inputs ) DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not inplace ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP
DCSP if ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP elif ( len ( entry ) = = 1 ) : DCNL DCSP DCSP return list ( entry ) DCNL DCSP else : DCNL DCSP DCSP return &#91; &#93;
DCSP blocks = &#91; resnet _ utils.Block ( &apos; block1 &apos; , bottleneck , ( ( &#91; ( 512 , 128 , 1 ) &#93; * 2 ) + &#91; ( 512 , 128 , 1 ) &#93; ) ) , resnet _ utils.Block ( &apos; block2 &apos; , bottleneck , ( ( &#91; ( 2048 , 512 , 1 ) &#93; * 2 ) + &#91; ( 512 , 128 , 1 ) &#93; ) ) , resnet _ utils.Block ( &apos; block3 &apos; , bottleneck , ( ( &#91; ( 512 , 128 , 1 ) &#93; * 2 ) + &#91; ( 512 , 128 , 1 ) &#93; ) ) , resnet _ utils.Block ( &apos; block3 &apos; , bottleneck , ( ( &#91; ( 512 , 128 , 1 ) &#93; * 2 ) + &#91; ( 512 , 128 , 1 ) &#93; ) ) , resnet _ utils.Block ( &apos; block3 &apos; , bottleneck , ( ( &#91; ( 512 , 128 , 1 ) &#93; * 2 ) + &#91; ( 512 , 128 , 1 ) &#93; ) ) , resnet _ utils.Block ( &apos; block3 &apos; , bottleneck , (
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value
DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP if ( language is None ) : DCNL DCSP DCSP language = get _ language ( ) DCNL DCSP return ( language in settings.LANGUAGES )
DCSP if isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , list ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , list ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , list ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , ( list , tuple ) ) : DCNL DCSP DCSP values = &#91; values &#93; DCNL DCSP elif isinstance ( values , basestring ) : DCNL DCSP DCSP values =
DCSP host = request.get _ full _ path ( ) DCNL DCSP host = request.get _ full _ path ( ) DCNL DCSP host = request.get _ full _ path ( ) DCNL DCSP host = request.get _ full _ path ( ) DCNL DCSP host = host.lower ( ) DCNL DCSP return host
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP return ret
DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert ( context.text is not None ) , &apos; REQUIRE : DCSP multi-line DCSP text &apos; DCNL DCSP assert
DCSP if ( not os.path.exists ( sdk _ path ) ) : DCNL DCSP DCSP os.makedirs ( sdk _ path ) DCNL DCSP if ( not os.path.exists ( sdk _ path ) ) : DCNL DCSP DCSP os.makedirs ( sdk _ path ) DCNL DCSP if ( not os.path.exists ( sdk _ path ) ) : DCNL DCSP DCSP os.makedirs ( sdk _ path ) DCNL DCSP if ( not os.path.exists ( sdk _ path ) ) : DCNL DCSP DCSP os.makedirs ( egg _ path ) DCNL DCSP return deploy _ path
DCSP return ( &apos; % s : % s &apos; % ( start , keyword ) )
DCSP try : DCNL DCSP DCSP return getattr ( module , name ) DCNL DCSP except AttributeError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return getattr ( sys.modules &#91; name &#93; . _ _ name _ _ , name ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return getattr ( module , name ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return name
DCSP for ( name , seq _ rate ) in zip ( seq _ rate , fp _ rate ) : DCNL DCSP DCSP if ( seq _ rate is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( file _ rate , f _ rate ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( file _ rate , f _ rate ) ) DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( file _ rate ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( file _ rate ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( file _ rate ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( file _ rate ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( file _ rate ) ) : DCNL DCSP DCSP DCSP print
DCSP ring = f.ring DCNL DCSP try : DCNL DCSP DCSP f = gf _ rem ( f , p , ring.domain ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; quo &apos; , f , e ) DCNL DCSP ring = f.ring DCNL DCSP try : DCNL DCSP DCSP f = gf _ rem ( f , p , ring.domain ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; quo &apos; , f , e ) DCNL DCSP ring = f.ring DCNL DCSP try : DCNL DCSP DCSP f = gf _ rem ( f , p , ring.domain ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; quo &apos; , f , e ) DCNL DCSP ring = f.ring DCNL DCSP try : DCNL DCSP DCSP f = gf _ rem ( f , p , ring.domain ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; quo &apos; , ( f , ) ) DCNL DCSP if ( ring.domain is None ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL
DCSP try : DCNL DCSP DCSP with open ( txt , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( txt ) DCNL DCSP finally : DCNL DCSP DCSP f.close ( )
DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ax = fig.add _ subplot ( 111 ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist &apos; % epoch _ idx ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; Only DCSP axes DCSP are DCSP not DCSP supported &apos; ) DCNL DCSP else : DCNL DCSP DCSP for i in range ( len ( epochs _ idx ) ) : DCNL DCSP DCSP DCSP if ( ch _ idx is not None ) : DCNL DCSP DCSP DCSP DCSP epochs _ idx + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ch _ idx + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ch _ idx + = 1 DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ch _ idx + = 1 DCNL DCSP DCSP
DCSP check _ cuda _ available ( feature _ name ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( ) DCNL DCSP check _ cuda _ available ( )
DCSP manager = MANAGER DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if ( options is None ) : DCNL DCSP DCSP options = &#91; &#93; DCNL DCSP if (
DCSP conn = _ auth ( profile ) DCNL DCSP return conn.@@ token _ get ( * * connection _ args )
DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP for newhe@@ ader in newheaders : DCNL DCSP DCSP if ( newhe@@ ader.@@ lower ( ) = = &apos;
DCSP rpc = horizontal _ flip _ async ( image _ data , output _ encoding = output _ encoding , quality = quality , correct _ orientation = correct _ orientation , rpc = rpc , transparent _ substitution _ rgb = transparent _ substitution _ rgb ) DCNL DCSP return rpc.get _ result ( )
DCSP user = kwargs &#91; &apos; instance &apos; &#93; DCNL DCSP try : DCNL DCSP DCSP user = User.objects.get ( pk = instance.pk ) DCNL DCSP except ObjectDoesNotExist : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP user = User.objects.get ( pk = instance.pk ) DCNL DCSP except ObjectDoesNotExist : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP user = User.objects.get ( pk = instance.pk ) DCNL DCSP except ObjectDoesNotExist : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP user = User.objects.get ( pk = instance.pk ) DCNL DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP pass DCNL DCSP else : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP user = User.objects.get ( pk = instance.pk ) DCNL DCSP DCSP except ObjectDoesNotExist : DCNL DCSP DCSP DCSP pass
DCSP with open ( src _ filename , &apos; w &apos; ) as f : DCNL DCSP DCSP with open ( src _ filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( f.read ( ) )
DCSP plot _ options = { &apos; plot _ options &apos; : plot _ options _ options } DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = options DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos; plot _ options &apos; &#93; = plot _ options &#91; &apos; plot _ options &apos; &#93; DCNL DCSP plot _ options &#91; &apos;
DCSP try : DCNL DCSP DCSP value = int ( dim ) DCNL DCSP except ValueError : DCNL DCSP DCSP return None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return None DCNL DCSP return ( value , value )
DCSP if upload : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP else : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP if upload : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP else : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP if ( not upload ) : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP else : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP if ( not upload ) : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP else : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP if ( not upload ) : DCNL DCSP DCSP upload = Addon.@@ objects.create ( upload = upload , upload = upload ) DCNL DCSP else : DCNL DCSP DCSP
DCSP ret = &#91; &#93; DCNL DCSP for item in old : DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( old not in old ) : DCNL
DCSP for workspace in segment _ info : DCNL DCSP DCSP if ( segment &#91; u &apos;name &apos; &#93; = = segment _ info &#91; u &apos;name &apos; &#93; ) : DCNL DCSP DCSP DCSP return name DCNL DCSP return None
DCSP with open ( file _ obj , &apos; w &apos; ) as file _ obj : DCNL DCSP DCSP file _ obj.@@ write ( file _ obj )
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be
DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP num _ bc _ errors = len ( mapping _ file ) DCNL DCSP if added _ demultiplex _ field : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP if added _ demultiplex _ field : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP if added _ demultiplex _ field : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP if added _ demultiplex _ field : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP if added _ demultiplex _ field : DCNL DCSP DCSP added _ demultiplex _ field = &apos; BarcodeSequence &apos; DCNL DCSP else : DCNL DCSP
DCSP ( username , password ) = args DCNL DCSP if ( password is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( password is None ) : DCNL DCSP DCSP return None DCNL DCSP password = getpass.getpass ( ) DCNL DCSP if ( password is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( password is None ) : DCNL DCSP DCSP return None DCNL DCSP password = getpass ( ) DCNL DCSP if ( password is None ) : DCNL DCSP DCSP return None DCNL DCSP password = getpass ( ) DCNL DCSP if ( password is None ) : DCNL DCSP DCSP password = None DCNL DCSP return password
DCSP ip = ipaddress.ip _ address ( network ) DCNL DCSP network = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP network = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP network = netaddr.IPNetwork ( network ) DCNL DCSP return ( ip , network )
DCSP if ( not isinstance ( text , unicode ) ) : DCNL DCSP DCSP text = text DCNL DCSP if isinstance ( text , unicode ) : DCNL DCSP DCSP text = text DCNL DCSP elif isinstance ( text , unicode ) : DCNL DCSP DCSP text = text DCNL DCSP elif isinstance ( text , unicode ) : DCNL DCSP DCSP text = text.decode ( &apos; utf-8 &apos; ) DCNL DCSP return text
DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; pillar.get &apos; &#93; ( config ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; pillar.get &apos; &#93; ( config ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = { } DCNL DCSP ret = { } DCNL DCSP for ( key , value ) in six.iteritems ( config ) : DCNL DCSP DCSP if ( data &#91; key &#93; is not None ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = data &#91; key &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ret &#91; key &#93; = value DCNL DCSP return ret
DCSP click.@@ launch ( url )
DCSP return _ wait _ for _ login ( client , host , port , username , password , prompt , log _ filename , timeout )
DCSP from pprint import StringIO DCNL DCSP with open ( result _ file , &apos; w &apos; ) as f : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP json.dump ( data , f )
DCSP return Demo@@ NotificationService ( hass , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ PASSWORD ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ USERNAME ) , config.get ( CONF _ PASSWORD ) , config.get ( CONF _
DCSP return pkg _ list ( pkg _ list , root _ list )
DCSP while True : DCNL DCSP DCSP buf = fsrc.read ( length ) DCNL DCSP DCSP if ( not buf ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP fdst.write ( buf )
DCSP s3.filter = ( FS ( &apos; person _ id $ human _ resource.type &apos; ) = = 1 ) DCNL DCSP return s3db.hrm _ training _ controller ( )
DCSP if ( ( not request.user.is _ authenticated ( ) ) or ( not request.user.is _ authenticated ( ) ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not request.user.is _ authenticated ( ) ) and ( not request.user.is _ authenticated ( ) ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not request.user.is _ authenticated ( ) ) and ( not request.user.is _ authenticated ( ) ) ) : DCNL DCSP DCSP return DCNL DCSP for ( key , value ) in settings.@@ iteritems ( ) : DCNL DCSP DCSP for ( key , value ) in enumerate ( map _ map ) : DCNL DCSP DCSP DCSP if ( id = = id ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( key , value ) ) ) DCNL DCSP DCSP
DCSP if ( cmd is None ) : DCNL DCSP DCSP cmd = &apos; DCSP &apos; .join ( cmd ) DCNL DCSP else : DCNL DCSP DCSP cmd = ( &apos; % s DCSP % s &apos; % ( cmd , cmd ) ) DCNL DCSP return cmd
DCSP with pytest.raises ( ValueError ) : DCNL DCSP DCSP Table.read ( &apos
DCSP try : DCNL DCSP DCSP with open ( url , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP data = response.read ( ) DCNL DCSP DCSP response.close ( ) DCNL DCSP DCSP return data DCNL DCSP except urllib2.HTTPError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return ( None , None ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP X = np.asarray ( X ) DCNL DCSP if issparse ( X ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP if issparse ( X ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP if issparse ( X ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP if issparse ( X ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP if issparse ( X ) : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP else : DCNL DCSP DCSP X = np.asarray ( X , dtype = np.float64 ) DCNL DCSP DCSP
DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text = text.replace ( u &apos; \ n &apos; , u &apos; \ n &apos; ) DCNL DCSP text
DCSP return ( &apos; % s DCSP % s &apos; % ( barDs , count ) )
DCSP return datetime.datetime.strptime ( timestamp , &apos; % Y- % m- % dT % H : % M : % S &apos; )
DCSP ret = { } DCNL DCSP for ( key , value ) in six.iteritems ( kwargs ) : DCNL DCSP DCSP if ( key in kwargs ) : DCNL DCSP DCSP DCSP ret &#91; key &#93; = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , * args , * * kwargs ) DCNL DCSP return ret
DCSP data = { } DCNL DCSP for f in file _ data : DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not data ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP sock = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.setsockopt ( socket.SOL _ SOCKET , socket.SO _ BROADCAST , 1 ) DCNL DCSP sock.sendto ( &apos;
DCSP if ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP elif ( command = = &apos; win32 &apos; ) : DCNL DCSP DCSP return command DCNL DCSP else : DCNL DCSP DCSP return command
DCSP try : DCNL DCSP DCSP return int ( s ) DCNL DCSP except ValueError : DCNL DCSP DCSP return s
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP if ( ( os.name = = &apos; nt &apos; ) and ( os.name = = &apos; nt &apos; ) ) : DCNL DCSP DCSP DCSP path = &apos; / &apos; DCNL DCSP DCSP elif ( ( os.name = = &apos; nt &apos; ) and ( os.name = = &apos; nt &apos; ) ) : DCNL DCSP DCSP DCSP path = &apos; / &apos; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( ( os.name = = &apos; nt &apos; ) and ( os.name = = &apos; nt &apos; ) ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( ( os.name = = &apos; nt &apos; ) and ( os.name = = &apos; nt &apos; ) ) : DCNL DCSP DCSP path = &apos; / &apos; DCNL DCSP elif ( ( os.name = = &apos; nt &apos; ) and ( os.name = = &apos; nt &apos; ) ) : DCNL DCSP DCSP path + = &apos; / &apos; DCNL DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP
DCSP if ( image _ id is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image _ id is None
DCSP tempdir = _ TempDir ( ) DCNL DCSP raw = read _ raw _ fif ( fif _ fname , preload = True ) DCNL DCSP raw = read _ raw _ fif ( raw _ fname , preload = True , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP raw = read _ raw _ fif ( raw _ fname , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir , subjects _ dir = subjects _ dir ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as w : DCNL DCSP DCSP DCSP DCSP
DCSP info = { u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id , u &apos;@@ track _ id &apos; : track _ id } DCNL DCSP return info
DCSP if ( not u ) : DCNL DCSP DCSP return dup _ trunc ( f , i , u , K ) DCNL DCSP else : DCNL DCSP DCSP return &#91; dmp _ mul ( f , i , j , K ) for cf in f &#93;
DCSP scriptDir = &#91; &#93; DCNL DCSP for i in range ( numSequences ) : DCNL DCSP DCSP sequences.append ( seq ) DCNL DCSP seqIdxs = &#91; &#93; DCNL DCSP for i in range ( numSequences ) : DCNL DCSP DCSP sequences.append ( seq ) DCNL DCSP seqIdxs = &#91; &#93; DCNL DCSP for i in range ( numSequences ) : DCNL DCSP DCSP sequences.append ( seq ) DCNL DCSP seqIdxs = &#91; &#93; DCNL DCSP for i in range ( numRepeats ) : DCNL DCSP DCSP seqIdxs + = range ( numSequences ) DCNL DCSP random.shuffle ( seqIdxs ) DCNL DCSP for seqIdx in seqIdxs : DCNL DCSP DCSP for seqIdx in seqIdxs : DCNL DCSP DCSP DCSP outFile.appendRecord ( &#91; reset , seqIdx &#93; ) DCNL DCSP outFile.close ( )
DCSP with open ( os.path.join ( package , &apos; _ _ init _ _ .py &apos; ) ) as f : DCNL DCSP DCSP return f.read ( )
DCSP for region in regions ( ) : DCNL DCSP DCSP if ( region.name = = region _ name ) : DCNL DCSP DCSP DCSP return region.connect ( * * kw _ params ) DCNL DCSP return None
DCSP indices = &#91; &#93; DCNL DCSP for i in range ( len ( table ) ) : DCNL DCSP DCSP indices = &#91; &#93; DCNL DCSP DCSP for i in range ( len ( table ) ) : DCNL DCSP DCSP DCSP indices = &#91; &#93; DCNL DCSP DCSP DCSP for i in range ( len ( indices ) ) : DCNL DCSP DCSP DCSP DCSP if ( len ( indices &#91; i &#93; ) = = len ( indices &#91; i &#93; ) ) : DCNL DCSP DCSP DCSP DCSP DCSP indices.append ( indices &#91; i &#93; ) DCNL DCSP DCSP DCSP DCSP indices &#91; indices &#91; i &#93; &#93; = indices &#91; i &#93; DCNL DCSP return indices
DCSP return create _ resource ( prefix , creation _ func , * args , * * kwargs )
DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as fid : DCNL DCSP
DCSP images = get _ images ( ) DCNL DCSP images = &#91; &#93; DCNL DCSP for image in images : DCNL DCSP DCSP for image in images : DCNL DCSP DCSP DCSP images &#91; image &#93; = image &#91; image &#93; DCNL DCSP return images
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP non-negative DCSP integer &apos; ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP
DCSP service = get _ object _ or _ 404 ( Service , pk = service _ id ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; service &apos; : service , &apos; service &apos; : service } ) DCNL DCSP return render _ to _ response ( &apos; services / service _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP taskqueue _ services.@@ enqueue _ task ( feconf.@@ TASK _ STATUS _ FEEDBACK _ MESSAGE _ EMAILS , { &apos; user _ id &apos; : user _ id , &apos; new _ status &apos; : new _ status } )
DCSP from multiprocessing import Pool DCNL DCSP try : DCNL DCSP DCSP from multiprocessing import Pool DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP with warnings.catch _ warnings ( record = True ) as conn : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP manager.@@ close ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP pass
DCSP if ( expression is None ) : DCNL DCSP DCSP return False DCNL DCSP if isinstance ( expression , pytree.Leaf ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP return _ Resolve ( hostname , &#91; &#93; )
DCSP try : DCNL DCSP DCSP ( yield size ) DCNL DCSP finally : DCNL DCSP DCSP if reverse : DCNL DCSP DCSP DCSP ( yield address )
DCSP path = os.path.normpath ( path ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Path DCSP % s DCSP does DCSP not DCSP exist &apos; % path ) ) DCNL DCSP return path
DCSP for loop in loops : DCNL DCSP DCSP pointBegin = loop &#91; pointIndex &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( pointIndex + 1 ) % len ( loop ) ) &#93; DCNL DCSP DCSP if ( pointBegin.imag &gt; pointEnd.imag ) : DCNL DCSP DCSP DCSP pointOriginal = pointBegin DCNL DCSP DCSP DCSP pointBegin = pointEnd DCNL DCSP DCSP DCSP pointEnd = pointOriginal DCNL DCSP DCSP fillBegin = int ( math.ceil ( ( pointBegin.imag / width ) ) ) DCNL DCSP DCSP fillEnd = int ( math.ceil ( ( pointBegin.imag / width ) ) ) DCNL DCSP DCSP if ( fillEnd &gt; fillBegin ) : DCNL DCSP DCSP DCSP pointOriginal = pointBegin DCNL DCSP DCSP DCSP pointBegin = pointEnd DCNL DCSP DCSP DCSP pointEnd = pointOriginal DCNL DCSP DCSP fillBegin = int ( math.ceil ( ( pointBegin.imag / width ) ) ) DCNL DCSP DCSP fillEnd = int ( math.ceil ( ( pointBegin.imag / width ) ) ) DCNL DCSP DCSP if ( fillEnd &gt; fillBegin ) : DCNL DCSP DCSP DCSP secondMinusFirst@@ Complex = ( pointEnd - pointBegin ) DCNL DCSP DCSP DCSP beginRealMinusImaginary = ( pointBegin.real - ( pointBegin.imag * secondMinusFirstImaginaryOverReal ) ) DCNL DCSP
DCSP global cache _ key DCNL DCSP if ( cache _ key is None ) : DCNL DCSP DCSP cache _ key = get _ cache _ key ( cache _ key ) DCNL DCSP return cache _ key
DCSP return joinedload ( * args , * * kwargs )
DCSP return _ _ salt _ _ &#91; &apos; fileclient &apos; &#93; .file _ list ( saltenv , saltenv )
DCSP if ( not isinstance ( f , ( list , tuple ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( f . _ _ name _ _ , ) ) ) DCNL DCSP if ( not isinstance ( f , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( f . _ _ name _ _ , ) ) ) DCNL DCSP if ( not isinstance ( f , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( f . _ _ name _ _ , ) ) ) DCNL DCSP if ( not isinstance ( obj , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % ( f . _ _ name _ _ , ) ) ) DCNL DCSP if ( not isinstance ( value , basestring ) ) : DCNL DCSP DCSP raise
DCSP try : DCNL DCSP DCSP ( yield ( 0 , msg ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP ( yield ( 0 , msg ) )
DCSP if ( not seq ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP bs = &#91; &#93; DCNL DCSP for bs in seq : DCNL DCSP DCSP if bs : DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = &#91; &#93; DCNL DCSP DCSP DCSP bs = &#91; &#93; DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs = bs DCNL DCSP DCSP DCSP bs
DCSP logger = logging.getLogger ( _ _ name _ _ ) DCNL DCSP handler = logging.StreamHandler ( ) DCNL DCSP handler.setFormatter ( logging.Formatter ( &apos; % ( asctime ) s DCSP % ( levelname ) s DCSP % ( levelname ) s : DCSP % ( message ) s &apos; ) ) DCNL DCSP logger.addHandler ( handler ) DCNL DCSP logger.addHandler ( handler )
DCSP return ( ( url2 = = urlparse ( url2 ) ) = = ( urlparse ( url2 ) - urlparse ( url2 ) ) )
DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) = = 3 ) DCNL DCSP assert ( len ( sys.argv ) =
DCSP if ( not isinstance ( plugin , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Plugin DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( plugin , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Plugin DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = ( &apos; % s . % s &apos; % ( type , name ) ) DCNL DCSP else : DCNL DCSP DCSP name = ( &apos; % s . % s &apos; % ( type , name ) ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = ( &apos; % s . % s &apos; % ( type , name ) ) DCNL DCSP else : DCNL DCSP DCSP name = ( &apos; % s . % s &apos; % ( name , name ) ) DCNL DCSP if ( name is None ) : DCNL DCSP DCSP name = ( &apos; % s . % s &apos; % ( name , name ) ) DCNL DCSP if (
DCSP f = Feature.from _ string ( FEATURE1 ) DCNL DCSP runner.run ( ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _ equals ( len ( lines ) , 1 ) DCNL DCSP assert _
DCSP pass
DCSP return get@@ statusoutput ( cmd ) &#91; 1 &#93;
DCSP response = Response ( { &apos; Content-Type &apos; : &apos; application / json &apos; } ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 ) DCNL DCSP assert ( response.status _ code = = 200 )
DCSP kwargs = { &apos; name &apos; : name , &apos; result &apos; : True , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP try : DCNL DCSP DCSP ret = run ( * args , * * kwargs ) DCNL DCSP finally : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; =
DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; default &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; &apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; .&apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; .&apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; .&apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; .&apos; DCNL DCSP if ( option is None ) : DCNL DCSP DCSP option = &apos; .&apos; DCNL DCSP if ( option is not None
DCSP return base64.b64encode ( s )
DCSP if ( fk _ col _ name is None ) : DCNL DCSP DCSP fk _ col _ name = None DCNL DCSP if ( fk _ col _ name is None ) : DCNL DCSP DCSP fk _ col _ name = ( &apos; % s . % s &apos; % ( fk _ col _ name , fk _ col _ name ) ) DCNL DCSP if ( fk _ col _ name is not None ) : DCNL DCSP DCSP if ( fk _ col _ name is not None ) : DCNL DCSP DCSP DCSP if ( fk _ col _ name is not None ) : DCNL DCSP DCSP DCSP DCSP return ( &apos; % s . % s &apos; % ( fk _ col _ name , fk _ col _ name ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( &apos; % s . % s &apos; % ( fk _ col _ name , fk _ col _ name ) ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP return _ Cdf ( cdf , complement , transform , * * options )
DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import schema DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sqlalchemy DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try
DCSP result = { } DCNL DCSP for ( k , v ) in parse _ qsl ( qs , keep _ blank _ values , strict _ parsing ) : DCNL DCSP DCSP if ( not isinstance ( v , list ) ) : DCNL DCSP DCSP DCSP v = unquote ( nv &#91; 1 &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP d &#91; k &#93; = v DCNL DCSP return result
DCSP response = requests.get ( url _ path , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } , headers = { &apos; Content-Type &apos; : &apos; application / json &apos; } ) DCNL DCSP response = request.execute ( ) DCNL DCSP return response
DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP if ( barcode _ type is None ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( barcode _ type is not None ) : DCNL DCSP DCSP DCSP added _ demultiplex _ field = fasta _ seqs &#91; 0 &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP added _ demultiplex _ field = fasta _ demultiplex _ field DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = None DCNL DCSP if ( barcode _ type is not None ) : DCNL DCSP DCSP added _ demultiplex _ field = fasta _ seqs &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP added _ demultiplex _ field = &#91; &#93; DCNL DCSP for curr _ seq in fasta _ files : DCNL DCSP DCSP if ( curr _ barcode is not None ) : DCNL DCSP DCSP DCSP curr _ qual = curr _ bc DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP curr _ qual = barcode _ type DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP added _ demultiplex _ field = curr _
DCSP with pytest.raises ( OSError ) : DCNL DCSP DCSP node.run ( ) DCNL DCSP with pytest.raises ( OSError ) : DCNL DCSP DCSP node.run ( )
DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP for item in list _ : DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( item , &apos; _ _ iter _ _ &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP seen.add ( item ) DCNL DCSP DCSP result.append ( item ) DCNL DCSP return result
DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP return HttpResponseRedirect ( &apos; / cobbler _ web / machines &apos; ) DCNL DCSP else : DCNL DCSP DCSP return HttpResponseRedirect ( &apos; / cobbler _ web / machines &apos; )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP django.setup ( ) DCNL DCSP try : DCNL DCSP DCSP logging.basicConfig ( ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP sys.exit ( 1 ) DCNL DCSP try : DCNL DCSP DCSP print ( &apos; \ n &apos; .join ( sys.argv &#91; 1 : &#93; ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print &apos; Error : DCSP { } &apos; .format ( e ) DCNL DCSP DCSP sys.exit ( 1 )
DCSP mod = _ _ import _ _ ( path , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , { } , &#91; &apos; &apos; &#93; ) ) DCNL DCSP return
DCSP if ( price is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( price is None ) : DCNL DCSP DCSP return price DCNL DCSP return price _ from _ price ( price , 1 )
DCSP try : DCNL DCSP DCSP course = modulestore ( ) .get _ course ( course ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return getattr ( course , course _ key ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP return ( text if ( attrib is None ) else attrib )
DCSP group = get _ object _ or _ 404 ( Group , slug = slug ) DCNL DCSP topic = get _ object _ or _ 404 ( GroupTopic , pk = topic _ id , topic = topic ) DCNL DCSP return render ( request , template _ name , { &apos; topic &apos; : topic , &apos; topic &apos; : topic } )
DCSP if dry _ run : DCNL DCSP DCSP update _ tasks ( ctx , dry _ run = dry _ run )
DCSP if ( not hasattr ( response , &apos; headers &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( response , &apos; headers &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( response , &apos; headers &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP return Response ( headers , headers = headers )
DCSP filename = request.@@ filename DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP raise PopupException ( _ ( &apos; File DCSP not DCSP found &apos; ) ) DCNL DCSP filename = request.@@ filename DCNL DCSP if ( filename is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( not os.path.exists ( filename ) ) : DCNL DCSP DCSP raise PopupException ( _ ( &apos; File DCSP not DCSP found &apos; ) ) DCNL DCSP return HttpResponse ( filename , content _ type = &apos; application / octet-stream &apos; )
DCSP if ( ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) or ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) or ( not isinstance ( test _ plugin , basestring ) ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP does DCSP not DCSP exist &apos; % name ) ) DCNL DCSP if ( ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) and ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) ) : DCNL DCSP DCSP return DCNL DCSP if ( ( not hasattr ( test _ plugin , &apos; _ _ call _ _ &apos; ) ) and ( not isinstance ( test _ plugin , basestring ) ) ) : DCNL DCSP DCSP
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP return _ compile _ function ( name , code , globs )
DCSP ( x1 , y1 ) = ( p1 , p2 ) DCNL DCSP ( x1 , y1 ) = ( p1 , p2 ) DCNL DCSP ( x1 , y1 ) = ( p1 , p2 ) DCNL DCSP ( x1 , y1 ) = ( p1 , p2 ) DCNL DCSP ( x1 , y1 ) = ( x1 , y1 ) DCNL DCSP ( x1 , y1 ) = ( ( x1 - y1 ) , ( y1 - y1 ) ) DCNL DCSP ( x1 , y1 ) = ( ( x1 - y1 ) , ( x2 - y1 ) ) DCNL DCSP return ( x1 , y1 )
DCSP scanner = U@@ bus@@ DeviceScanner ( config &#91; DOMAIN &#93; ) DCNL DCSP return ( scanner if scanner.success _ init else None )
DCSP global _ conf DCNL DCSP if ( family = = socket.AF _ INET ) : DCNL DCSP DCSP return _ conf &#91; family &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported &apos; ) DCNL DCSP if ( not F.is _ Piecewise ) : DCNL DCSP DCSP raise Integral@@ TransformError ( name , &apos; expr DCSP is DCSP not DCSP supported
DCSP encoder = { } DCNL DCSP for ( key , value ) in six.iteritems ( properties ) : DCNL DCSP DCSP if ( key in encoder ) : DCNL DCSP DCSP DCSP encoder &#91; key &#93; .append ( value ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP encoder &#91; key &#93; .append ( value ) DCNL DCSP return &apos; , DCSP &apos; .join ( ( ( &apos; % s = % s &apos; % ( key , value ) ) for ( key , value ) in enumerate ( value ) ) )
DCSP return _ os _ dispatch ( &apos; br@@ br &apos; , br , iface )
DCSP wordvecs = OrderedDict ( ) DCNL DCSP for i in range ( 0 , len ( options ) ) : DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( not use _ norm ) and ( not use _ norm ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( ( not use _ norm ) and ( not use _ norm ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not use _ norm ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP count = 0 DCNL DCSP while ( bcd &gt; 0 ) : DCNL DCSP DCSP bcd &gt; &gt; = 1 DCNL DCSP DCSP bcd &gt; &gt; = 1 DCNL DCSP return decimal
DCSP @ functools.wraps ( func ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP finally : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP finally : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( src _ mac is None ) : DCNL DCSP DCSP src _ mac = None DCNL DCSP if ( src _ mac is None ) : DCNL DCSP DCSP src _ mac = tempfile.mktemp ( ) DCNL DCSP if ( src _ mac is None ) : DCNL DCSP DCSP src _ mac = os.path.dirname ( src _ mac ) DCNL DCSP if ( src _ mac is not None ) : DCNL DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( src _ mac is not None ) : DCNL DCSP DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP if ( src _ mac is None ) : DCNL DCSP DCSP DCSP DCSP src
DCSP def a ( a ) : DCNL DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP if ( a is None ) : DCNL DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( a is None ) : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( a is None ) : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( a is None ) : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP if ( a is None ) : DCNL DCSP DCSP DCSP DCSP a = rv.args &#91; 0 &#93; DCNL DCSP DCSP DCSP else : DCNL DCSP
DCSP if isinstance ( node , dict ) : DCNL DCSP DCSP return node DCNL DCSP else : DCNL DCSP DCSP return node
DCSP if request.POST : DCNL DCSP DCSP if ( &apos; cancel &apos; not in request.POST ) : DCNL DCSP DCSP DCSP form = CategoryForm ( request.user.profile , request.POST , instance = category ) DCNL DCSP DCSP DCSP if form.is _ valid ( ) : DCNL DCSP DCSP DCSP DCSP category = form.save ( ) DCNL DCSP DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; finance _ index _ view &apos; , args = &#91; category.id &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; finance _ index _ view &apos; , args = &#91; category.id &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP form = CategoryForm ( request.user.profile ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; knowledge / category _ add &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return crypto _ command ( &apos; do@@ ge &apos; )
DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( abs _ ref is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( fraction _ ref is None
DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( agg _ col is not None ) : DCNL DCSP DCSP if ( agg _ col is None ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP valid DCSP dimensions &apos;
DCSP raise NotImplementedError ( &apos; TODO : DCSP implement DCSP this DCSP function . &apos; )
DCSP if ( not isinstance ( sub _ pb , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; sub _ entity _ id DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % sub _ pb ) ) DCNL DCSP if ( not isinstance ( sub _ pb , db.Model ) ) : DCNL DCSP DCSP raise TypeError ( &apos; sub _ pb DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( sub _ pb , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; sub _ entity _ id DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % sub _ pb ) ) DCNL DCSP if ( not isinstance ( sub _ pb , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; sub _ entity _ id DCSP must DCSP be DCSP a DCSP string , DCSP got DCSP % s &apos; % sub _ pb ) ) DCNL DCSP if ( not isinstance ( sub _ pb , list ) ) : DCNL DCSP DCSP raise
DCSP if ( app _ or _ role is None ) : DCNL DCSP DCSP app _ data = get _ current _ app ( ) DCNL DCSP if ( not isinstance ( instance _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; instance _ type DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( cls _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; instance _ type DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( not isinstance ( cls _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; model DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( cls _ or _ dict , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; model DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not hasattr ( instance _ or _ role , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( &apos;
DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP tpot _ obj = TPOTClassifier ( ) DCNL DCSP assert ( tpot _ obj.@@ score ( ) = = expected _ score )
DCSP if ( node.op = = node.op ) : DCNL DCSP DCSP b = node.inputs &#91; 0 &#93; DCNL DCSP DCSP if ( node.op = = node.outputs &#91; 0 &#93; .type ) : DCNL DCSP DCSP DCSP return &#91; a &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return &#91; a &#93; DCNL DCSP return False
DCSP help _ texts = &#91; &#93; DCNL DCSP for help _ text in password _ validators : DCNL DCSP DCSP help _ text + = ( &apos
DCSP forumsread = ForumsRead.query.filter ( ( ForumsRead.user _ id = = user.id ) , ( ForumsRead.forum _ id = = topic.forum _ id ) ) .first ( ) DCNL DCSP forum = Forum.query.filter _ by ( id = topic.forum _ id ) .first ( ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert ( forum is None ) DCNL DCSP assert
DCSP flavor = _ find _ flavor ( cs , args.flavor ) DCNL DCSP _ print _ flavor _ list ( cs.@@ flavor )
DCSP return ( &apos; server % d &apos; % ( word , ) )
DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = { } DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = set ( nodes ) DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = set ( nodes ) DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = set ( nodes ) DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = list ( nodes ) DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = &#91; &#93; DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = &#91; &#93; DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = list ( nodes ) DCNL DCSP if ( nodes is None ) : DCNL DCSP DCSP nodes = &#91; v &#93; DCNL DCSP if ( nodes is not None ) : DCNL DCSP DCSP if ( nodes is not None ) : DCNL DCSP DCSP DCSP if ( nodes is not None ) : DCNL DCSP DCSP DCSP DCSP data &#91; u &#93; = v DCNL DCSP
DCSP for ( key , value ) in six.iteritems ( headers ) : DCNL DCSP DCSP if ( key not in headers ) : DCNL DCSP DCSP DCSP del headers &#91; key &#93;
DCSP warnings.warnpy3k ( &apos; In DCSP 3.x , DCSP os.path.walk DCSP is DCSP removed DCSP in DCSP favor DCSP of DCSP os.walk. &apos; , stacklevel = 2 ) DCNL DCSP try : DCNL DCSP DCSP names = os.listdir ( top ) DCNL DCSP except os.error : DCNL DCSP DCSP return DCNL DCSP func ( arg , top , arg )
DCSP t = QTable ( MIXIN _ COLS ) DCNL DCSP t &#91; &apos; a &apos; &#93; = &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; DCNL DCSP t = ascii.read ( &#91; &apos; a &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; , &apos; b &apos; &#93; , names = &#91; &apos; a &apos; , &apos; b &apos; &#93; , names = &#91; &apos; a &apos; , &apos; b &apos; &#93; , names = &#91; &apos; a &apos; , &apos; b &apos; &#93; ) DCNL DCSP assert ( dat &#91; &apos; a &apos; &#93; &#91; 0 &#93; = = &#91; &apos; a &apos; , &apos; b &apos; &#93; )
DCSP if ( not hasattr ( keystr , &apos; _ _ getitem _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( keystr , &apos; _ _ getitem _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( keystr , &apos; _ _ getitem _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return True
DCSP if ( not isinstance ( symbols , ( list , tuple ) ) ) : DCNL DCSP DCSP symbols = &#91; symbols &#93; DCNL DCSP seen = set ( ) DCNL DCSP for name in symbols : DCNL DCSP DCSP if ( not isinstance ( symbol , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( symbols , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( symbols , list ) ) : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP seen = set (
DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( script ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( not keep ) : DCNL DCSP DCSP
DCSP return ( ( &apos; dependencies &apos; in _ _ context _ _ ) and ( &apos; dependencies &apos; in os.environ ) )
DCSP sensorRegion = network.regions &#91; &apos; sensor &apos; &#93; DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; sensor &apos; , &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos; identity@@ Region &apos; , &apos; UniformLink &apos; , &apos; &apos; ) DCNL DCSP network.addRegion ( &apos;
DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , basestring ) : DCNL DCSP DCSP return values DCNL DCSP if isinstance ( values , ( tuple , tuple ) ) : DCNL DCSP DCSP return values DCNL DCSP
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP reload &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP for filename in filenames : DCNL DCSP DCSP if verbose : DCNL DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP if verbose : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( filename , filename ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP
DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( r &#91; &apos; id &apos; &#93; = = &apos; id &apos; ) : DCNL DCSP DCSP DCSP return
DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP else : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter _ shape ) DCNL DCSP if filter _ flip : DCNL DCSP DCSP filter _ shape = filter ( filter _ shape , filter
DCSP for sitedir in known _ paths : DCNL DCSP DCSP if os.path.isdir ( sitedir ) : DCNL DCSP DCSP DCSP addsitedir ( sitedir , known _ paths ) DCNL DCSP return known _ paths
DCSP T = current.T DCNL DCSP record = r.record DCNL DCSP if ( not record ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP record = r.record DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP record = r.record DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP record = r.record DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( not record ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP
DCSP return Count@@ Errors ( oc@@ r _ text.split ( ) , truth _ text.split ( ) )
DCSP if ( num _ bits is None ) : DCNL DCSP DCSP num _ bits = 0 DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num ) ) DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num ) ) DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num ) ) DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num ) ) DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Invalid DCSP byte DCSP string : DCSP % s &apos; % num ) ) DCNL DCSP if ( num &lt; num _ bits ) : DCNL DCSP DCSP raise ValueError (
DCSP return _ run ( name , source = source , saltenv = saltenv , env = env , python _ driver = exec _ driver , stdin = stdin , python _ shell = python _ shell , output _ loglevel = output _ loglevel , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , use _ vt = use _ vt , ignore _ retcode = ignore _ retcode , keep _ env = keep _ env )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP os.close ( fd )
DCSP if default : DCNL DCSP DCSP return default DCNL DCSP elif ( default = = &apos; yes &apos; ) : DCNL DCSP DCSP return default DCNL DCSP elif ( default = = &apos; yes &apos; ) : DCNL DCSP DCSP return default DCNL DCSP elif ( default = = &apos; yes &apos; ) : DCNL DCSP DCSP return default DCNL DCSP elif ( default = = &apos; yes &apos; ) : DCNL DCSP DCSP return default DCNL DCSP elif ( default = = &apos; yes &apos; ) : DCNL DCSP DCSP return default DCNL DCSP else : DCNL DCSP DCSP return default
DCSP with pytest.raises ( TypeError ) : DCNL DCSP DCSP AssertError ( TypeError , codecs.unicode _ conv _ type , &apos; abc &apos; )
DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP else : DCNL DCSP DCSP nin = options &#91; &apos; dim _ proj &apos; &#93; DCNL DCSP if ( nout = = None ) : DCNL DCSP DCSP nin = options &#91; &apos;
DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.get _ random _ bytes DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc = Random.new ( ) .read DCNL DCSP if ( randfunc is None ) : DCNL DCSP DCSP randfunc =
DCSP if ( request _ or _ response is None ) : DCNL DCSP DCSP return None DCNL DCSP elif isinstance ( request _ or _ response , string _ types ) : DCNL DCSP DCSP return _ urlparse ( request _ or _ response ) DCNL DCSP else : DCNL DCSP DCSP return _ SSL _ CACHE _ CACHE &#91; request _ or _ response &#93;
DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = np.asarray ( d2 ) DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP r = 0.0 DCNL DCSP if ( r is None ) : DCNL DCSP DCSP
DCSP retVal = { } DCNL DCSP for ( k , v ) in scope : DCNL DCSP DCSP if ( v is not None ) : DCNL DCSP DCSP DCSP params.append ( ( &apos; % s = % s &apos; % ( k , v ) ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP params.append ( ( &apos; % s = % s &apos; % ( k , v ) ) ) DCNL DCSP return retVal
DCSP with open ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; r &apos; ) , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) = = 1 ) DCNL DCSP assert ( len ( args ) =
DCSP import twill DCNL DCSP twill.@@ set _ output ( &apos
DCSP try : DCNL DCSP DCSP subprocess.check _ call ( &#91; &apos; git &apos; , &apos; --version &apos; &#93; , stdout = subprocess.PIPE ) .communicate ( ) &#91; 0 &#93; DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.EEXIST ) : DCNL DCSP DCSP DCSP raise
DCSP with pytest.raises ( CommandError ) as e : DCNL DCSP DCSP ip.run _ cell ( &apos; = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is None ) : DCNL DCSP DCSP target = { } DCNL DCSP if ( target is not None ) : DCNL DCSP DCSP actions.@@ setdefault ( action , { } ) DCNL DCSP if ( target is not None ) : DCNL DCSP DCSP actions.@@ setdefault ( action , &#91; &#93; ) .append ( action ) DCNL DCSP return action
DCSP def match ( match ) : DCNL DCSP DCSP if predicate ( match ) : DCNL DCSP DCSP DCSP return True DCNL DCSP return False
DCSP if ( device is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( device = = &apos; ide &apos; ) : DCNL DCSP DCSP return &apos; ide &apos; DCNL DCSP elif ( device = = &apos; ide &apos; ) : DCNL DCSP DCSP return &apos; ide &apos; DCNL DCSP elif ( device = = &apos; ide &apos; ) : DCNL DCSP DCSP return &apos; ide &apos; DCNL DCSP elif ( device = = &apos; ide &apos; ) : DCNL DCSP DCSP return &apos; ide &apos; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( xyz _ ref is None ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( xyz _ ref is None ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; Input DCSP must DCSP be DCSP a DCSP non-negative DCSP integer . &apos; ) DCNL DCSP if ( a.size = = 0 ) : DCNL DCSP DCSP
DCSP u = _ validate _ vector ( u ) DCNL DCSP v = _ validate _ vector ( v ) DCNL DCSP v = _ validate _ vector ( v ) DCNL DCSP v = _ validate _ vector ( v ) DCNL DCSP return _ validate _ vector ( v )
DCSP if ( call ! = &apos; action &apos; ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ vm _ action DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; action &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ vm _ action DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( &apos; action &apos; not in kwargs ) : DCNL DCSP DCSP raise SaltCloudSystemExit ( &apos; The DCSP show _ vm _ action DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -a DCSP or DCSP --action . &apos; ) DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP
DCSP parent = parent _ parent ( parent ) DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP else : DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP parent = parent DCNL DCSP DCSP parent = parent DCNL DCSP if ( parent is not None ) : DCNL DCSP DCSP
DCSP return re.sub ( &apos; &#91; ^ \ \ w &#93; + &apos; , &apos; &apos; , filepath )
DCSP if isinstance ( s , str ) : DCNL DCSP DCSP return s DCNL DCSP else : DCNL DCSP DCSP return s
DCSP if ( not request.user.profile.is _ admin ( &apos; treeio.sales &apos; ) ) : DCNL DCSP DCSP return user _ denied ( request , message = &quot; You DCSP don &apos;t DCSP have DCSP access DCSP to DCSP this DCSP Ticket &quot; ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; messaging / index &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return None
DCSP if ( not value ) : DCNL DCSP DCSP return value DCNL DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP if isinstance ( value , unicode ) : DCNL DCSP DCSP value = value.encode ( &apos; utf-8 &apos; ) DCNL DCSP return value
DCSP if ( profile is None ) : DCNL DCSP DCSP profile = _ get _ client ( ) DCNL DCSP return _ service _ list ( profile = profile )
DCSP if ( ( left is not None ) and ( left.@@ ndim = = 0 ) ) : DCNL DCSP DCSP return left DCNL DCSP else : DCNL DCSP DCSP return ( left , right )
DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( divisions is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( df is not None ) : DCNL DCSP DCSP return df DCNL DCSP else : DCNL DCSP DCSP return ( df , df )
DCSP return dict ( ( ( k , v ) for ( k , v ) in data.items ( ) ) )
DCSP import sys DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import sys DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP import threading DCNL DCSP except ImportError : DCNL DCSP DCSP
DCSP if diff _ filter : DCNL DCSP DCSP return ( &apos; % s DCSP % s &apos; % ( left , right _ filter ) ) DCNL DCSP else : DCNL DCSP DCSP return ( &apos; % s DCSP % s DCSP % s &apos; % ( left , right , diff _ filter ) )
DCSP if ( not os.path.exists ( dest _ dir ) ) : DCNL DCSP DCSP os.makedirs ( dest _ dir ) DCNL DCSP with open ( fname _ func , &apos; w &apos; ) as f : DCNL DCSP DCSP file _ func ( fname )
DCSP return s3 _ rest _ controller ( )
DCSP if ( n is None ) : DCNL DCSP DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP n = int ( n ) DCNL DCSP else : DCNL DCSP DCSP n = int ( n ) DCNL DCSP if ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP elif ( n = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL
DCSP from django.utils.html import urlize DCNL DCSP return urlize ( text , trim _ url _ limit = trim _ url _ limit , nofollow = nofollow )
DCSP return ( &apos; DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject , basestring ) : DCNL DCSP DCSP return subject DCNL DCSP if isinstance ( subject
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.delete _ policy _ policy ( name , policy _ name ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP global _ path DCNL DCSP if ( _ os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP path = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; .. &apos; , &apos; .. &apos; , &apos; .cache &apos; ) DCNL DCSP return path
DCSP with open ( filename , &apos; r &apos; , encoding = &apos; utf-8 &apos; ) as f : DCNL DCSP DCSP lines = f.readlines ( ) DCNL DCSP for line in lines : DCNL DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP if line : DCNL DCSP DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP line = line.rstrip ( &apos; \ r \ n &apos; ) DCNL DCSP DCSP DCSP DCSP if line : DCNL DCSP DCSP DCSP DCSP DCSP line = line.rstrip ( &apos; \ n &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP continue DCNL
DCSP attr = getattr ( attr , attr ) DCNL DCSP if ( attr is not None ) : DCNL DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP if ( attr is None ) : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP DCSP if ( attr is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP attr = getattr ( attr , attr ) DCNL DCSP DCSP DCSP DCSP DCSP DCSP
DCSP if ( table is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( table ) = = 0 ) : DCNL DCSP DCSP return False DCNL DCSP if ( len ( table ) = = 1 ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield )
DCSP privilege@@ d.delete _ neigh _ entry ( ip _ address , mac _ address , mac _ address , device , namespace , * * kwargs )
DCSP table = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP table = Table ( table , table , columns = table ) DCNL DCSP return table
DCSP status = request.GET.get ( &apos; page &apos; , None ) DCNL DCSP if ( status is None ) : DCNL DCSP DCSP return DCNL DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP status = request.GET.get ( &apos; page &apos; , &apos; &apos; ) DCNL DCSP DCSP if ( status ! = 200 ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( &apos; status &apos; in request.GET ) : DCNL
DCSP if ( geometryOutput = = None ) : DCNL DCSP DCSP return None DCNL DCSP geometryOutput@@ Vertexes = geometryOutput &#91; : &#93; DCNL DCSP if ( geometryOutput@@ Vertexes is not None ) : DCNL DCSP DCSP geometryOutput@@ Vertexes ( geometryOutput@@ Vertexes ) DCNL DCSP return geometryOutput
DCSP def inner ( * args , * * kwargs ) : DCNL DCSP DCSP bits = func ( * args , * * kwargs ) DCNL DCSP DCSP if ( not bits ) : DCNL DCSP DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP DCSP return func ( * args , * * kwargs ) DCNL DCSP return inner
DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP host = config.get ( CONF _ HOST ) DCNL DCSP username = config.get ( CONF _ HOST ) DCNL DCSP username = config.get ( CONF _ HOST ) DCNL DCSP username = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ HOST ) DCNL
DCSP if ( not port ) : DCNL DCSP DCSP return DCNL DCSP port = int ( interface ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP port = int ( port ) DCNL DCSP if ( port
DCSP output = numpy.asarray ( input , dtype = numpy.float64 , copy = False ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP an DCSP integer &apos; ) DCNL DCSP output = numpy.asarray ( input , dtype = numpy.float64 , copy = False ) DCNL DCSP if numpy.iscomplexobj ( input ) : DCNL DCSP DCSP raise ValueError ( &apos; input DCSP must DCSP be DCSP positive &apos; ) DCNL DCSP if ( mode is None ) : DCNL DCSP DCSP output = numpy.asarray ( input , dtype = numpy.float64 , copy = False ) DCNL DCSP else : DCNL DCSP DCSP output = numpy.asarray ( input , dtype = numpy.float64 , copy = False ) DCNL DCSP output = numpy.asarray ( input , dtype = numpy.float64 , copy = True ) DCNL DCSP output = numpy.asarray ( output , dtype = numpy.float64 , copy = True ) DCNL DCSP output = numpy.asarray ( output , dtype = numpy.float64 , copy = True ) DCNL DCSP output = numpy.asarray ( output , dtype = numpy.float64 , copy = True ) DCNL DCSP output = numpy.asarray ( output ,
DCSP tags = &#91; &#93; DCNL DCSP for tag in html : DCNL DCSP DCSP if ( tag in html ) : DCNL DCSP DCSP DCSP tags + = ( &apos; &lt; % s &gt; &apos; % tag ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP tags + = ( &apos; &lt; % s &gt; &apos; % tag ) DCNL DCSP return &apos; \ n &apos; .join ( tags )
DCSP ( tfreq , tmag , tphase ) = SM.sine@@ ModelAnal ( x , fs , w , N , H , fs , maxnSines , minSineDur , freqDevOffset , freqDevSlope ) DCNL DCSP Ns = 512 DCNL DCSP xr = UF.@@ sineSubtraction ( x , Ns , H , tfreq , tmag , tphase ) DCNL DCSP return ( tfreq , tmag , tphase )
DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) : DCNL DCSP DCSP constr _ id = None DCNL DCSP if ( constr _ id is None ) :
DCSP return os.environ &#91; &apos; CURRENT _ VERSION _ ID &apos; &#93; .split ( &apos; .&apos; ) &#91; ( -1 ) &#93;
DCSP shutil.copyfile ( src , dst ) DCNL DCSP try : DCNL DCSP DCSP copytimes ( src , dst ) DCNL DCSP except shutil.@@ Error : DCNL DCSP DCSP pass
DCSP if ( output _ unit is None ) : DCNL DCSP DCSP output _ units = &#91; &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP elif isinstance ( input _ units , tuple ) : DCNL DCSP DCSP out _ units = &#91; output _ units &#93; DCNL DCSP else : DCNL DCSP DCSP out _ units = &#91; &#93; DCNL DCSP if ( output _ units = = &apos; total &apos; ) : DCNL DCSP DCSP total _ total = 0 DCNL DCSP
DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP elif ( window _ start = = 0 ) : DCNL DCSP DCSP window _ start = ( window _ start - window _ start ) DCNL DCSP else : DCNL DCSP DCSP window _ start = ( window _ start + window _ start ) DCNL DCSP if ( window _ start is None ) : DCNL DCSP DCSP window _ start = window _ start DCNL DCSP else : DCNL DCSP
DCSP return Locale.parse ( locale ) .number _ format ( format , locale )
DCSP return base64.b64encode ( hashlib.sha1 ( data ) .digest ( ) )
DCSP def func ( * args ) : DCNL DCSP DCSP return func ( * args ) DCNL DCSP return func ( * args )
DCSP if ( len ( lst ) = = 1 ) : DCNL DCSP DCSP return 0 DCNL DCSP return ( sum ( lst ) - 1 )
DCSP for ( key , value ) in args : DCNL DCSP DCSP if ( value is not None ) : DCNL DCSP DCSP DCSP args &#91; key &#93; = value
DCSP conn = get _ conn ( ) DCNL DCSP if ( not os.path.exists ( tmp ) ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP meta = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = MetaData ( ) DCNL DCSP meta.bind = migrate _ engine DCNL DCSP metadata = Table ( &apos; volume _ metadata &apos; , meta , autoload = True ) DCNL
DCSP seen = set ( ) DCNL DCSP seen = set ( ) DCNL DCSP for element in iterable : DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not seen ) : DCNL DCSP DCSP
DCSP if isinstance ( data , dict ) : DCNL DCSP DCSP data = { } DCNL DCSP DCSP for ( key , value ) in data.items ( ) : DCNL DCSP DCSP DCSP if ( key in data ) : DCNL DCSP DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP data &#91; key &#93; = value DCNL DCSP return data
DCSP if ( not isinstance ( file _ in , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP valid DCSP file &apos; % file _ in ) ) DCNL DCSP with open ( file _ in , &apos; r &apos; ) as f : DCNL DCSP DCSP data = pickle.load ( f ) DCNL DCSP return data
DCSP return ( np.eye ( nm ) / nm ( nm ) )
DCSP output _ root = re.sub ( &apos; \ \ s + &apos; , &apos; &apos; , output _ root ) DCNL DCSP output _ root = output _ root &#91; : ( -1 ) &#93; DCNL DCSP output _ root = output _ root &#91; : ( -1 ) &#93; DCNL DCSP output _ root + = ( &apos; \ n &apos; + output _ root ) DCNL DCSP output _ root + = ( &apos; \ n &apos; + output _ root ) DCNL DCSP return output _ root
DCSP text = text _ text ( text _ text ) DCNL DCSP assert ( text = = expected )
DCSP if ( obj is None ) : DCNL DCSP DCSP return DCNL DCSP if ( not hasattr ( obj , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP obj . _ _ doc _ _ = obj . _ _ doc _ _
DCSP ( &apos; \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP DCSP pass \ n
DCSP blocks = &#91; &#93; DCNL DCSP blocks = &#91; &#93; DCNL DCSP for block in blocks : DCNL DCSP DCSP blocks.append ( block ) DCNL DCSP for block in blocks : DCNL DCSP DCSP blocks.append ( block ) DCNL DCSP return blocks
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP except TypeError : DCNL DCSP DCSP pass
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP f.write ( str ( f.read ( ) ) ) DCNL DCSP DCSP return True DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno = = errno.ENOENT ) : DCNL DCSP DCSP DCSP return DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise
DCSP if ( ch _ type is not None ) : DCNL DCSP DCSP if ( ch _ type is not None ) : DCNL DCSP DCSP DCSP if ( ch _ type = = ch _ type ) : DCNL DCSP DCSP DCSP DCSP if ( ch _ type = = ch _ type ) : DCNL DCSP DCSP DCSP DCSP DCSP return DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise ValueError ( ( &apos; % s DCSP does DCSP not DCSP exist DCSP in DCSP % s &apos; % ( ch _ type , ch _ type ) ) )
DCSP feature = Feature.from _ string ( FEATURE1 ) DCNL DCSP assert _ equals ( feature.described _ at.file , core.fs.relpath ( _ _ file _ _ ) ) DCNL DCSP assert _ equals ( description.@@ find ( &apos; \ n &apos; ) , &apos
DCSP return _ check _ range _ and _ return ( &apos; vertical DCSP shift &apos; , label , ( -1 ) , ( -1 ) )
DCSP hdr = open ( hdr , &apos; rb &apos; ) .read ( ) DCNL DCSP assert ( len ( hdr ) = = 2 ) DCNL DCSP assert ( len ( hdr ) = = 2 ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP assert ( diff &#91; 0 &#93; = = hdr &#91; ( -1 ) &#93; ) DCNL DCSP return result
DCSP if ( data _ dict is None ) : DCNL DCSP DCSP data _ dict = { } DCNL DCSP context = { &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; : data _ dict &#91; &apos; user _ id &apos; &#93; , &apos; user _ id &apos; :
DCSP if ( len ( input ) = = 1 ) : DCNL DCSP DCSP return input ( input , size , footprint , structure , structure , mode , cval , origin ) DCNL DCSP else : DCNL DCSP DCSP return _ dilation ( input , size , footprint , structure , structure , mode , cval , origin )
DCSP try : DCNL DCSP DCSP return _ _ import _ _ ( module _ name ) DCNL DCSP except ImportError : DCNL DCSP DCSP raise ImportError ( ( &apos; No DCSP module DCSP named DCSP % s &apos; % module _ name ) )
DCSP return wait _ for _ server ( server , port )
DCSP deserializer = wsgi.JSONRequestDeserializer ( ) DCNL DCSP serializer = wsgi.JSON@@ ResponseSerializer ( ) DCNL DCSP return wsgi.Resource ( controller , deserializer , serializer )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return conn.list _ security _ groups ( ) DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.error ( e ) DCNL DCSP DCSP return { }
DCSP if ( not isinstance ( args , list ) ) : DCNL DCSP DCSP args = &#91; args &#93; DCNL DCSP if isinstance ( args , list ) : DCNL DCSP DCSP kwargs = kwargs DCNL DCSP else : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if ( kwargs is None ) : DCNL DCSP DCSP kwargs = { } DCNL DCSP if kwargs : DCNL DCSP DCSP kwargs
DCSP word = word.lower ( ) DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( word is None ) : DCNL DCSP DCSP return &apos;
DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( element
DCSP return render ( request , template _ name , { } , context _ instance = RequestContext ( request ) )
DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP f = open ( f , &apos; rb &apos; ) DCNL DCSP DCSP except OSError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP os.unlink ( f ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP os.unlink ( f )
DCSP pos = logical _ line.find ( &apos; `&apos; ) DCNL DCSP if ( pos &gt; ( -1 ) ) : DCNL DCSP DCSP ( yield ( pos , &quot; W604 DCSP backticks DCSP are DCSP deprecated , DCSP use DCSP &apos; { 0 } &apos; &quot; .format ( logical _ line ) ) )
DCSP data = { &apos; data &apos; : data , &apos; data &apos; : data , &apos; data &apos; : data } DCNL DCSP return data
DCSP if isinstance ( item , dict ) : DCNL DCSP DCSP return item &#91; key &#93; DCNL DCSP else : DCNL DCSP DCSP return item
DCSP return &#91; ( int ( x ) , int ( v ) ) for ( x , y ) in obj.items ( ) &#93;
DCSP try : DCNL DCSP DCSP httpd.serve _ forever ( ) DCNL DCSP except KeyboardInterrupt : DCNL DCSP DCSP pass
DCSP ol = &#91; &#93; DCNL DCSP for i in range ( n ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP d &#91; i &#93; + = 1 DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; coord _ frame &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not hasattr ( t , &apos; symbol &apos; ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if hasattr ( t , &apos;
DCSP if ( not url.endswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP base = &apos; / &apos; DCNL DCSP if ( not url.endswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP base = &apos; / &apos; DCNL DCSP if ( not url.endswith ( &apos; / &apos; ) ) : DCNL DCSP DCSP base = &apos; / &apos; DCNL DCSP else : DCNL DCSP DCSP base = &apos; / &apos; DCNL DCSP return ( &apos; % s / % s &apos; % ( base , base ) )
DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ index = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP if ( channel _ index is None ) : DCNL DCSP DCSP channel _ size = x.shape &#91; 0 &#93; DCNL DCSP DCSP
DCSP np.random.seed ( 0 ) DCNL DCSP with TestingCanvas ( ) as w : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with TestingCanvas ( ) as f : DCNL DCSP DCSP DCSP ellipse = visuals.Ellipse ( center = ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) DCNL DCSP DCSP assert _ array _ almost _ equal ( c.render ( ) , &apos; visuals / reactive _ polygon@@ 1.png &apos; ) DCNL DCSP
DCSP if ( dt _ str is not None ) : DCNL DCSP DCSP dt _ str = ( dt _ str + &apos; Z &apos; ) DCNL DCSP return dt _ str
DCSP if ( not resource ) : DCNL DCSP DCSP return DCNL DCSP if ( not resource ) : DCNL DCSP DCSP return DCNL DCSP if ( not resource ) : DCNL DCSP DCSP return DCNL DCSP for ( key , value ) in resource.@@ items ( ) : DCNL DCSP DCSP setattr ( resource , key , value )
DCSP with open ( path , &apos; rb &apos; ) as f : DCNL DCSP DCSP return yaml.load ( f , Loader = yaml.@@ Loader )
DCSP smote = SMOTE ( random _ state = RND _ SEED ) DCNL DCSP assert _ raises ( ValueError , smote.fit _ sample , X , Y )
DCSP server = _ find _ server ( cs , args.server ) DCNL DCSP _ find _ server ( cs , args.server )
DCSP ( var , coeff , diop _ type ) = classify _ diop ( var , coeff ) DCNL DCSP if ( diop _ type = = &apos; normal &apos; ) : DCNL DCSP DCSP return ( coeff , coeff ) DCNL DCSP else : DCNL DCSP DCSP return ( coeff , coeff )
DCSP shutil.copy2 ( src , dest ) DCNL DCSP return True
DCSP assert ( rgb _ to _ hsl ( 153 , 102 , 153 ) = = ( 60 , 50 , 50 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 153 , 102 , 153 ) = = ( 60 , 50 , 50 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 51 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 51 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 51 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 204 ) = = ( 204 , 51 , 204 ) ) DCNL DCSP assert ( rgb _ to _ hsl ( 51 , 204 , 204 ) = = (
DCSP commands = &#91; &#93; DCNL DCSP for i in range ( ( len ( name ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP commands.append ( ( &apos; % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s DCSP % s \ n &apos; % (
DCSP options.allowed _ flags ( args , &#91; &apos; polys &apos; &#93; ) DCNL DCSP try : DCNL DCSP DCSP ( F , opt ) = poly _ from _ expr ( f , * gens , * * args ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; polys &apos; , 1 , exc ) DCNL DCSP options.allowed _ flags ( args , &#91; &apos; polys &apos; &#93; ) DCNL DCSP try : DCNL DCSP DCSP ( F , opt ) = poly _ from _ expr ( f , * gens , * * args ) DCNL DCSP except PolificationFailed as exc : DCNL DCSP DCSP raise ComputationFailed ( &apos; polys &apos; , 1 , exc ) DCNL DCSP if ( not opt.polys ) : DCNL DCSP DCSP return r.as _ expr ( ) DCNL DCSP else : DCNL DCSP DCSP return result
DCSP @ wraps ( f ) DCNL DCSP def wrapper ( * args , * * kwargs ) : DCNL DCSP DCSP return f ( * args , * * kwargs ) DCNL DCSP return wrapper
DCSP if ( not HAS _ LIBS ) : DCNL DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return _ _ version _ _
DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; node DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP is DCSP not DCSP a DCSP string &apos; % node . _ _ name _ _ ) ) DCNL DCSP if (
DCSP if use _ trap : DCNL DCSP DCSP ( yield app ) DCNL DCSP else : DCNL DCSP DCSP ( yield app )
DCSP if ( not isinstance ( string , ( list , tuple ) ) ) : DCNL DCSP DCSP string = str ( string ) DCNL DCSP if ( not isinstance ( string , list ) ) : DCNL DCSP DCSP string = str ( string ) DCNL DCSP return bits &#91; 0 : ( -1 ) &#93;
DCSP if ( sys.platform = = &apos; win32 &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP elif ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP check _ all _ all ( ) DCNL DCSP else
DCSP scalePoints ( elementNode , loop , prefix ) DCNL DCSP return &#91; loop &#93;
DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course _ key = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ key ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ key ) DCNL DCSP course = modulestore ( ) .get _ course ( course _ key ,
DCSP statements = &#91; &#93; DCNL DCSP for app in models.get _ sql _ tables ( app ) : DCNL DCSP DCSP output.extend ( sql _ sql _ for _ db ( app ) ) DCNL DCSP return statements
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP return os.path.join ( get _ lib _ dir ( ) , &apos; Makefile &apos; ) DCNL DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP inc _ dir = get _ python _ lib ( plat _ specific = 1 , standard _ lib = 1 ) DCNL DCSP else : DCNL DCSP DCSP lib _ dir = get _ python _ lib ( plat _ specific = 1 , standard _ lib = 1 ) DCNL DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; Makefile &apos; )
DCSP text = &apos; &apos;.join ( &#91; str ( c ) for c in input _ map.items ( ) &#93; ) DCNL DCSP if debug : DCNL DCSP DCSP text = ( &apos; % s : DCSP % s &apos; % ( input _ map &#91; 0 &#93; , input _ map &#91; 1 &#93; ) ) DCNL DCSP return text
DCSP for ( i , child ) in enumerate ( stmt _ node.children ) : DCNL DCSP DCSP if ( node.type = = i ) : DCNL DCSP DCSP DCSP ( yield child ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP parent _ node.remove
DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( handle , basestring ) ) : DCNL DCSP DCSP raise ValueError ( &apos; format DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP try : DCNL DCSP DCSP iterator = iter ( handle ) DCNL DCSP except StopIteration : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP iterator = iter ( handle ) DCNL DCSP except StopIteration : DCNL DCSP DCSP raise ValueError
DCSP room = get _ room _ by _ room ( room _ id , message , from _ name , api _ key , api _ version , api _ version , api _ url , api _ url , api _ url , api _ url , api _ url , api _ url , api _ url , api _ url , api _ url , api _ url ) DCNL DCSP if room : DCNL DCSP DCSP room = room &#91; &apos; room &apos; &#93; DCNL DCSP if room : DCNL DCSP DCSP room = room &#91; &apos; room &apos; &#93; DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; = room DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; = room DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; = room DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; = room DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; = room DCNL DCSP if room : DCNL DCSP DCSP room &#91; &apos; room &apos; &#93; =
DCSP try : DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP from django.conf import settings DCNL DCSP DCSP return get _ language _ from _ request ( request ) DCNL DCSP else : DCNL DCSP DCSP return settings.LANGUAGE _ CODE
DCSP session = get _ session ( ) DCNL DCSP with session.begin ( subtransactions = True ) : DCNL DCSP DCSP query = session.query ( traversal _ id ) .filter _ by ( id = entity _ id ) .filter _ by ( id = entity _ id ) .first ( ) DCNL DCSP DCSP if ( not result ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP session.delete ( db )
DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL DCSP if ( worN is None ) : DCNL DCSP DCSP h = atleast _ 1d ( p ) DCNL
DCSP if ( value is None ) : DCNL DCSP DCSP return DCNL DCSP try : DCNL DCSP DCSP validate _ title ( value ) DCNL DCSP except ValidationError as e : DCNL DCSP DCSP raise ValidationError ( e )
DCSP if ( sort is None ) : DCNL DCSP DCSP limit = len ( query ) DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( sort is None ) : DCNL DCSP DCSP return None DCNL
DCSP return captured _ output ( &apos; stdout &apos; )
DCSP global _ mimetype _ handler DCNL DCSP _ mimetype _ handler = handler
DCSP return IMPL.@@ purge _ deleted _ rows ( context , age _ in _ days , max _ rows = max _ rows , session = session )
DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; )
DCSP containers.refresh ( ) DCNL DCSP manager.stop _ containers ( containers.running ) DCNL DCSP containers.notice _ changed ( manager.get _ inspect _ containers ( containers.running ) )
DCSP try : DCNL DCSP DCSP pool = create _ pool ( test _ case ) DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP return pool
DCSP modulestore ( ) .update _ item ( course _ id , student , block _ state _ key )
DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course _ key = CourseKey.from _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _ item ( course _ key ) DCNL DCSP if (
DCSP caps = { } DCNL DCSP for ( key , val ) in fp : DCNL DCSP DCSP if ( key in caps ) : DCNL DCSP DCSP DCSP caps &#91; key &#93; = val DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP caps &#91; key &#93; = val DCNL DCSP return caps
DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.datetime.now ( ) DCNL DCSP return timesince ( now , d )
DCSP if ( len ( queues ) = = 1 ) : DCNL DCSP DCSP for i in range ( ( len ( tasks ) - 1 ) , ( -1 ) , ( -1 ) ) : DCNL DCSP DCSP DCSP logger.info ( ( &apos
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except : DCNL DCSP DCSP DCSP pass
DCSP return HttpResponseRedirect ( &apos; / permanent _ redirect _ view / &apos; )
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return False DCNL DCSP try : DCNL DCSP DCSP if request.is _ ajax ( ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP except Exception as e : DCNL DCSP DCSP if ( e.errno = = 404 ) : DCNL DCSP DCSP DCSP return False DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP return True
DCSP for filename in exclude : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield filename ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP try : DCNL DCSP DCSP if ( not isinstance ( lineno , datetime.datetime ) ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP if ( len ( source ) = = 1 ) : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return None DCNL DCSP except IndexError : DCNL DCSP DCSP return None
DCSP return Demo@@ NotificationService ( hass , config &#91; CONF _ API _ KEY &#93; )
DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( ( &apos; % s \ n &apos; % filename ) ) DCNL DCSP os.rename ( ( filename + &apos; .bak &apos; ) , &apos; w &apos; )
DCSP ( width , height ) = img.size DCNL DCSP ( width , height ) = ( ( ( height - width ) / / 2 ) , ( ( height - width ) / / 2 ) ) DCNL DCSP image = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( shape &#91; 0 &#93; * ( height - 1 ) ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + ( ( 2 * width ) * * 2 ) ) + (
DCSP if ( not isinstance ( path , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; path DCSP must DCSP be DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( path , list ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % r DCSP does DCSP not DCSP exist &apos; % path ) ) DCNL DCSP result = run ( path ) DCNL DCSP if ( result is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return result
DCSP try : DCNL DCSP DCSP parts = parts &#91; 0 &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; : ( -1 ) &#93; DCNL DCSP DCSP parts = parts &#91; :
DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert ( len ( sys.argv ) &gt; 1 ) DCNL DCSP assert
DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = { } DCNL DCSP if ( hdict is None ) : DCNL DCSP DCSP hdict = &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP if ( hdict is None ) : DCNL DCSP DCSP DCSP hdict = { } DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP hdict = { } DCNL DCSP DCSP for ( k , v ) in six.iteritems ( hdict ) : DCNL DCSP DCSP DCSP if ( k not in hdict ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( k not in hdict ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( k not in hdict ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( k not in hdict ) : DCNL DCSP DCSP DCSP DCSP
DCSP host = config.get ( CONF _ USERNAME ) DCNL DCSP port = config.get ( CONF _ USERNAME ) DCNL DCSP port = config.get ( CONF _ USERNAME ) DCNL DCSP port = config.get ( CONF _ USERNAME ) DCNL DCSP port = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL DCSP password = config.get ( CONF _ USERNAME ) DCNL
DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP square DCSP matrix &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP square DCSP matrix &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP square DCSP matrix &apos; ) DCNL DCSP if ( method = = &apos; median &apos; ) : DCNL DCSP DCSP
DCSP if request.POST : DCNL DCSP DCSP if ( &apos; cancel &apos; not in request.POST ) : DCNL DCSP DCSP DCSP form = Account@@ Form ( request.user.profile , request.POST , instance = account ) DCNL DCSP DCSP DCSP if form.is _ valid ( ) : DCNL DCSP DCSP DCSP DCSP account = form.save ( ) DCNL DCSP DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; finance _ account _ view &apos; , args = &#91; account.id &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; finance _ account _ view &apos; , args = &#91; account.id &#93; ) ) DCNL DCSP else : DCNL DCSP DCSP form = Account@@ Form ( request.user.profile ) DCNL DCSP context = _ get _ default _ context ( request ) DCNL DCSP context.update ( { &apos; form &apos; : form } ) DCNL DCSP return render _ to _ response ( &apos; services / account _ edit &apos; , context , context _ instance = RequestContext ( request ) , response _ format = response _ format )
DCSP return s3 _ rest _ controller ( )
DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP return sys.stdout DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP return sys.stdout DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP return sys.stdout DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP DCSP pass DCNL DCSP try : DCNL DCSP DCSP from cStringIO import StringIO DCNL DCSP except ImportError : DCNL DCSP
DCSP session = Session ( bind = engine ) DCNL DCSP session.bulk _ flush _ objects ( &#91; Customer ( name = ( &apos; customer DCSP name DCSP % d &apos; % i ) ) for i in range ( n ) &#93; ) DCNL DCSP session.commit ( )
DCSP try : DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP DCSP export = module.params &#91; &apos; export &apos; &#93; DCNL DCSP DCSP DCSP if ( not module.check _ mode ) : DCNL DCSP DCSP DCSP DCSP
DCSP if ( content _ type is None ) : DCNL DCSP DCSP content _ type = get _ object _ or _ 404 ( comments.get _ model ( ) , pk = content _ type ) DCNL DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; questions.details &apos; , args = &#91; content _ type &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; questions.details &apos; , args = &#91; content _ type &#93; ) ) DCNL DCSP elif ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP if ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; questions.details &apos; , args = &#91; content _ type &#93; ) ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return HttpResponseRedirect ( reverse ( &apos; questions.details &apos; , args = &#91; content _ type &#93; ) ) DCNL DCSP elif ( request.method = = &apos; POST &apos; ) : DCNL DCSP DCSP
DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course _ id = SlashSeparatedCourseKey.from _ deprecated _ string ( course _ id ) DCNL DCSP course = modulestore ( ) .get _
DCSP if ( not feature ) : DCNL DCSP DCSP return None DCNL DCSP if ( ( not hasattr ( connection.features , feature ) ) and ( not hasattr ( connection.features , feature ) ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP try : DCNL DCSP DCSP unittest.main ( sys _ argv = sys _ argv ) DCNL DCSP except Exception as e : DCNL DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( e , e ) )
DCSP return dict ( ( ( k , v ) for ( k , v ) in settings ) )
DCSP if ( val is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if isinstance ( val , unicode ) : DCNL DCSP DCSP val = str ( val ) DCNL DCSP return force _ text ( val )
DCSP return _ psplatform.@@ disk _ usage ( path )
DCSP print ( sql _ table ( &apos; sql &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _ table &apos; , &apos; table _
DCSP return get _ partitions ( root _ part , job = job , min _ blocks = min _ blocks , filter _ func = filter _ func , open _ func = open _ func , open _ func = open _ func , open _ func = open _ func , open _ func = open _ func )
DCSP slug = os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; slug &apos; , &apos; slug &apos; ) DCNL DCSP return slug
DCSP action _ name = ugettext _ noop ( &apos; generated &apos; ) DCNL DCSP task _ fn = partial ( upload _ ora2 _ data , xmodule _ instance _ args ) DCNL DCSP return run _ main _ task ( entry _ id , task _ fn , action _ name )
DCSP with open ( os.devnull , &apos; w &apos; ) as f : DCNL DCSP DCSP for line in f.readlines ( ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP f.write ( line ) DCNL DCSP DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP DCSP print ( ( &apos; Failed DCSP to DCSP open DCSP % s : DCSP % s &apos; % ( line , e ) ) ) DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( &apos
DCSP matchingPlugins = &#91; &#93; DCNL DCSP xmlProcessor = xmlElement.getXMLProcessor ( ) DCNL DCSP matchingPlugins = &#91; &#93; DCNL DCSP for matching@@ Plugin in geometryOutput : DCNL DCSP DCSP if ( geometryOutput &#91; ( -1 ) &#93; = = &apos; &apos; ) : DCNL DCSP DCSP DCSP matching@@ Plugins.append ( geometryOutput &#91; ( -1 ) &#93; ) DCNL DCSP return geometryOutput
DCSP verts = &#91; &#93; DCNL DCSP for path in path : DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP path = os.path.join ( path , path ) DCNL DCSP DCSP
DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) : DCNL DCSP DCSP options = { } DCNL DCSP if ( option is None ) :
DCSP if ( ( name in desired ) and ( desired &#91; name &#93; ! = desired &#91; name &#93; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Version DCSP % s DCSP is DCSP not DCSP installed &apos; % name ) )
DCSP if ( not context ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return context &#91; u &apos;request &apos; &#93; DCNL DCSP except KeyError : DCNL DCSP DCSP return u &apos; &apos;
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def inner ( * args , * * kwargs ) : DCNL DCSP DCSP DCSP if ( not user.is _ authenticated ( ) ) : DCNL DCSP DCSP DCSP DCSP raise PermissionDenied DCNL DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP return s3 _ rest _ controller ( )
DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( val is not None ) : DCNL DCSP DCSP return ( ( val + &apos; \ n &apos; ) + val ) DCNL DCSP return val
DCSP ( scheme , netloc , path , query , fragment ) = urlparse.urlsplit ( url ) DCNL DCSP return ( scheme.lower ( ) , url )
DCSP ratio = &apos; auto &apos; DCNL DCSP cc = ClusterCentroids ( ratio = ratio , random _ state = RND _ SEED ) DCNL DCSP y _ single _ class = np.zeros ( ( X.shape &#91; 0 &#93; , ) ) DCNL DCSP assert _ warns ( UserWarning , cc.fit , X , y _ single _ class )
DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now = datetime.now ( ) DCNL DCSP if ( now is None ) : DCNL DCSP DCSP now =
DCSP if ( y _ score is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( y _ score is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( y _ score is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( y _ score is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( y _ score is None ) : DCNL DCSP DCSP return None DCNL DCSP else : DCNL DCSP DCSP return ( y _ score , y _ score )
DCSP if is _ interactive ( ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) : DCNL DCSP DCSP DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP DCSP DCSP
DCSP fig = plt.figure ( ) DCNL DCSP fig = plt.figure ( ) DCNL DCSP image = fig.add _ subplot ( 111 ) DCNL DCSP for ( i , v ) in enumerate ( fig ) : DCNL DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP DCSP else : DCNL DCSP
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; w &apos; ) as f : DCNL DCSP DCSP DCSP with open ( os.path.join ( path , filename ) , &apos; wb &apos; ) as f : DCNL DCSP DCSP DCSP DCSP f.write ( ( &apos
DCSP if ( not node.is _ draft ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST , data = { &apos; message _ type &apos; : &apos; application / json &apos; } ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( not auth ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if
DCSP if isinstance ( items , list ) : DCNL DCSP DCSP items = list ( items ) DCNL DCSP else : DCNL DCSP DCSP items = list ( items ) DCNL DCSP for child in items : DCNL DCSP DCSP if ( parent is not None ) : DCNL DCSP DCSP DCSP ( yield item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield item )
DCSP if ( first _ date is None ) : DCNL DCSP DCSP last _ date = datetime.datetime.utcnow ( ) DCNL DCSP elif ( first _ date is None ) : DCNL DCSP DCSP last _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP last _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP last _ date = last _ date DCNL DCSP if ( first _ date is None ) : DCNL DCSP DCSP last _ date = last _ date DCNL DCSP else : DCNL DCSP DCSP first _ date = last _ date DCNL DCSP return ( last _ date , last _ date )
DCSP if ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map is None ) : DCNL DCSP DCSP sample _ id _ map = &#91; &#93; DCNL DCSP elif ( sample _ id _ map
DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Value DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP raise ValueError ( &apos; Value DCSP must DCSP be DCSP a DCSP dictionary &apos; ) DCNL DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP return DCNL DCSP if ( len ( vertexes ) &lt; 1 ) : DCNL DCSP DCSP return DCNL DCSP for i in xrange ( len ( vertexes ) ) : DCNL DCSP DCSP pointBegin = loop &#91; ( i + 1 ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( index + 1 ) % len ( z ) ) &#93; DCNL DCSP DCSP pointEnd = loop &#91; ( ( index + 1 ) % len ( z ) ) &#93; DCNL DCSP DCSP evaluatorIndex = ( index + 1 ) DCNL
DCSP locale = Locale.parse ( locale ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP pattern = Locale.parse ( locale ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _ formats.get ( format ) DCNL DCSP if ( format is None ) : DCNL DCSP DCSP format = locale.@@ decimal _
DCSP num = 0 DCNL DCSP for i in range ( num ) : DCNL DCSP DCSP if ( num &lt; = 0 ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP num + = 1 DCNL DCSP return num
DCSP return IMPL.compute _ node _ disk _ set ( context , host , free _ ram _ mb , free _ disk _ mb , free _ disk _ gb , free _ disk _ gb = free _ disk _ gb , progress = progress )
DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP if ( vmin is None ) : DCNL DCSP DCSP return DCNL DCSP else : DCNL DCSP
DCSP if ( ctxt is None ) : DCNL DCSP DCSP ctxt = context.get _ admin _ context ( ) DCNL DCSP return db.instance _ type _ access _ get _ by _ flavor _ id ( ctxt , flavorid )
DCSP a = TpPd ( pd = 3 ) DCNL DCSP b = MessageType ( mesType = 55 ) DCNL DCSP c = Cause ( ) DCNL DCSP packet = ( ( a / b ) / c ) DCNL DCSP return packet
DCSP config _ vars = { } DCNL DCSP for config _ vars in config _ vars : DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( config _ vars is None ) :
DCSP dist = np.array ( &#91; 1.0 , 1.0 , 0.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 &#93; ) DCNL DCSP assert ( len ( dist ) = = 1 ) DCNL DCSP assert ( len ( dist ) = = 1 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len ( dist ) = = 2 ) DCNL DCSP assert ( len
DCSP try : DCNL DCSP DCSP os.stat ( path ) .st _ mode DCNL DCSP except OSError as e : DCNL DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP raise
DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) : DCNL DCSP DCSP deps = { } DCNL DCSP if ( deps is None ) :
DCSP if ( filter is None ) : DCNL DCSP DCSP filter = gettempdir ( ) DCNL DCSP if ( filter is not None ) : DCNL DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL DCSP DCSP DCSP DCSP DCSP DCSP DCSP if ( filter is not None ) : DCNL
DCSP with open ( path , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP return Pmf ( ( ( k , n ) for ( k , p ) in zip ( k , n ) ) )
DCSP return dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( args ) if ( v is not None ) ) )
DCSP @ wraps ( func ) DCNL DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP result = func ( * args , * * kwargs ) DCNL DCSP DCSP DCSP if result : DCNL DCSP DCSP DCSP DCSP return result DCNL DCSP DCSP except Exception as e : DCNL DCSP DCSP DCSP if ( e.errno ! = errno.ENOENT ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP return wrapper
DCSP ( ( v1 , v2 ) , ( v1 , v2 ) ) = ( v1 , v2 ) DCNL DCSP ( ( v1 , v2 ) , ( v1 , v2 ) ) = ( v1 , v2 ) DCNL DCSP ( ( v1 , v2 ) , ( v3 , v2 ) )
DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; FreeBSD &apos; ) : DCNL DCSP DCSP return _ _ virtualname _ _ DCNL DCSP return ( False , &apos; The DCSP freebsd@@ jail DCSP execution DCSP module DCSP cannot DCSP be DCSP loaded : DCSP only DCSP available DCSP on DCSP FreeBSD DCSP systems . &apos; )
DCSP return search _ by _ name ( service , name , * * kwargs )
DCSP for line in logical _ lines : DCNL DCSP DCSP if line.startswith ( &apos; # &apos; ) : DCNL DCSP DCSP DCSP ( yield ( 0 , line ) )
DCSP return ( lambda x : ( ( x = = ( -1 ) ) and ( ( g ! = 0 ) and ( ( g ! = 0 ) and ( ( g ! = 0 ) and ( g ! = 0 ) ) ) ) )
DCSP request &#91; &apos; user _ id &apos; &#93; = user _ id DCNL DCSP ( yield Activity.VerifyActivityId ( client , user _ id , device _ id , request &#91; &apos; viewpoint _ id &apos; &#93; ) ) DCNL DCSP ( yield Activity.VerifyActivityId ( client , user _ id , device _ id , request &#91; &apos; viewpoint _ id &apos; &#93; ) ) DCNL DCSP ( yield Activity.VerifyActivityId ( client , user _ id , device _ id , request &#91; &apos; activity &apos; &#93; &#91; &apos; activity _ id &apos; &#93; ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; photos &apos; ) ) DCNL DCSP ( yield gen.Task ( Operation.CreateAndExecute , client , user _ id , device _ id , &apos; Hide@@ Photo@@ sOperation.Execute &apos; , request ) ) DCNL DCSP raise gen.Return ( { } )
DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = os.environ &#91; &apos; service _ path &apos; &#93; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = os.environ &#91; &apos; APPLICATION _ ID &apos; &#93; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None ) : DCNL DCSP DCSP registry _ path = &apos; &apos; DCNL DCSP if ( registry _ path is None
DCSP try : DCNL DCSP DCSP return Relationship.objects.get _ followers _ for _ user ( member ) DCNL DCSP except AttributeError : DCNL DCSP DCSP return None
DCSP try : DCNL DCSP DCSP ast.parse ( sub ) DCNL DCSP except Exception as e : DCNL DCSP DCSP e = sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP DCSP raise e DCNL DCSP except Exception as e : DCNL DCSP DCSP e = sys.exc _ info ( ) &#91; 1 &#93; DCNL DCSP DCSP raise e DCNL DCSP return e
DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) : DCNL DCSP DCSP old _ shell = None DCNL DCSP if ( old _ shell is None ) :
DCSP sol = &#91; &#93; DCNL DCSP for i in range ( len ( syms ) ) : DCNL DCSP DCSP for i in range ( i ) : DCNL DCSP DCSP DCSP if ( i = = i ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = 0 ) : DCNL DCSP DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP if isinstance ( e , unicode ) : DCNL DCSP DCSP return unicode ( e ) DCNL DCSP elif isinstance ( e , unicode ) : DCNL DCSP DCSP return unicode ( e ) DCNL DCSP else : DCNL DCSP DCSP return str ( e )
DCSP return _ parse _ from _ tree _ tree ( root _ node , * a , * * kw )
DCSP if salt.utils.is _ darwin ( ) : DCNL DCSP DCSP return _ osquery _ cmd ( table = &apos; rpm _ packages &apos; , attrs = attrs , where = where ) DCNL DCSP return { &apos; result &apos; : False , &apos; comment &apos; : &apos; Only DCSP available DCSP on DCSP Red DCSP Hat DCSP or DCSP Debian DCSP based DCSP systems . &apos; }
DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; config.get &apos; &#93; ( &apos; VM &apos; , vm _ , _ _ opts _ _ ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; config.get &apos; &#93; ( &apos; VM &apos; , vm _ , _ _ opts _ _ ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; config.get &apos; &#93; ( &apos; VM &apos; , vm _ , _ _ opts _ _ ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; config.get &apos; &#93; ( &apos; VM &apos; , vm _ , _ _ opts _ _ ) DCNL DCSP if ( config is None ) : DCNL DCSP DCSP config = _ _ salt _ _ &#91; &apos; config.get &apos; &#93; ( &apos; VM &apos; , vm _ , _ _ opts _ _ ) DCNL DCSP else : DCNL DCSP DCSP vm = _ get
DCSP ret = { &apos; name &apos; : name , &apos; changes &apos; : { } , &apos; result &apos; : True , &apos; comment &apos; : &apos; &apos; } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP ret &#91; &apos; result &apos; &#93; = True DCNL DCSP return ret
DCSP if ( len ( word ) = = 1 ) : DCNL DCSP DCSP return ( word + &apos; s &apos; ) DCNL DCSP else : DCNL DCSP DCSP return ( word + &apos; s &apos; )
DCSP lines = obj . _ _ doc _ _ .split ( &apos; \ n &apos; ) DCNL DCSP if ( len ( lines ) = = 1 ) : DCNL DCSP DCSP return lines &#91; 0 &#93; .strip ( ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry , list ) : DCNL DCSP DCSP return entry DCNL DCSP elif isinstance ( entry
DCSP ifaces = _ get _ interface ( iface ) DCNL DCSP if ( not ifaces ) : DCNL DCSP DCSP return None DCNL DCSP return ifac@@ es.get ( iface )
DCSP mlp = MLP ( layers = &#91; Linear ( layer _ name = &apos; h &apos; , dim = 5 , irange = 0.01 ) &#93; ) DCNL DCSP conditional = DiagonalGaussian ( mlp = mlp , name = &apos; conditional &apos; ) DCNL DCSP vae = DummyVAE ( ) DCNL DCSP conditional.set _ vae ( vae ) DCNL DCSP input _ space = VectorSpace ( dim = 5 ) DCNL DCSP conditional.initialize _ parameters ( input _ space = input _ space , ndim = 5 ) DCNL DCSP conditional.initialize _ parameters ( input _ space = input _ space , ndim = 5 )
DCSP f = ( _ Cfunctions.get ( &apos; libvlc _ media _ set _ user _ data &apos; , None ) or _ Cfunction ( &apos; libvlc _ media _ set _ user _ data &apos; , ( ( 1 , ) , ( 1 , ) ) , None , ctypes.c _ int , Media , ctypes.c _ char _ p ) ) DCNL DCSP return f ( p _ md , p _ new _ data )
DCSP modnames = loaded _ vispy _ modules ( &apos; vispy.app &apos; , 2 , False ) DCNL DCSP assert _ equal ( modnames , set ( ) )
DCSP try : DCNL DCSP DCSP return float ( ( float ( error _ count ) / float ( batch _ count ) ) ) DCNL DCSP except ValueError : DCNL DCSP DCSP return 0.0
DCSP with open ( os.path.join ( key , &apos; w &apos; ) , &apos; w &apos; ) as f : DCNL DCSP DCSP f.write ( ( &apos; % s \ n &apos; % key ) )
DCSP if ( not isinstance ( code , ( list , tuple ) ) ) : DCNL DCSP DCSP code = &#91; code &#93; DCNL DCSP if isinstance ( code , ( list , tuple ) ) : DCNL DCSP DCSP for ( key , value ) in code.co _ varnames : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return globals ( ) &#91; name &#93; DCNL DCSP DCSP DCSP except KeyError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP return None
DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not G.is _ directed ( ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not nx.is _ connected ( G ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not nx.is _ connected ( G ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not nx.is _ connected ( G ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not nx.is _ connected ( G ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is DCSP not DCSP connected . &apos; ) DCNL DCSP if ( not nx.is _ connected ( G ) ) : DCNL DCSP DCSP raise nx.NetworkXPointlessConcept ( &apos; Connectivity DCSP is
DCSP if ( method is None ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method = = &apos; omit &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method = = &apos; omit &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method = = &apos; omit &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method = = &apos; omit &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method = = &apos; omit &apos; ) : DCNL DCSP DCSP raise ValueError ( &apos; method DCSP must DCSP be DCSP a DCSP nonnegative DCSP integer &apos; ) DCNL DCSP if ( method is None ) : DCNL DCSP DCSP
DCSP if ( log _ level is None ) : DCNL DCSP DCSP log _ level = logging.INFO DCNL DCSP else : DCNL DCSP DCSP log _ level = ( &apos; % s DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP log _ level = ( &apos; % s : DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP if ( not os.path.exists ( log _ level ) ) : DCNL DCSP DCSP log _ level = ( &apos; % s DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP else : DCNL DCSP DCSP log _ level = ( &apos; % s : DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP log _ level = ( &apos; % s : DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP log _ level = ( &apos; % s : DCSP % s &apos; % ( log _ level , log _ level ) ) DCNL DCSP log _
DCSP if ( not hasattr ( cls , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP raise ValueError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP class &apos; % classname ) ) DCNL DCSP return cls ( )
DCSP if ( path is None ) : DCNL DCSP DCSP path = _ get _ private _ key ( ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( path ) ) DCNL DCSP try : DCNL DCSP DCSP with salt.utils.fopen ( path , &apos; w &apos; ) as fp _ : DCNL DCSP DCSP DCSP data = f.read ( ) DCNL DCSP except IOError as e : DCNL DCSP DCSP
DCSP tokens = _ tokenize ( * args , * * kwargs ) DCNL DCSP if tokens : DCNL DCSP DCSP return tokens &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP return IMPL.compute _ node _ get ( context , compute _ id )
DCSP from twisted.internet import reactor DCNL DCSP factory = factoryFactory ( url , contextFactory = contextFactory , * args , * * kwargs ) DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP DCSP contextFactory = contextFactory DCNL DCSP if ( contextFactory is None ) : DCNL DCSP
DCSP if ( module is None ) : DCNL DCSP DCSP modulefile = ( &apos; .&apos; + module ) DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP module = import _ module ( module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP return getattr ( module , module ) DCNL DCSP except ImportError : DCNL DCSP DCSP return None
DCSP if ( _ _ grains _ _ &#91; &apos; os &apos; &#93; = = &apos; Windows &apos; ) : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP else : DCNL DCSP DCSP return _ _ salt _ _ &#91; &apos; cmd.run &apos; &#93; ( cmd , python _ shell = False )
DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir = gettempdir ( ) DCNL DCSP if ( dir is None ) : DCNL DCSP DCSP dir =
DCSP counter = _ Delta@@ Counter ( name , description , unit _ seconds ) DCNL DCSP manager.register ( counter ) DCNL DCSP return counter
DCSP if ( user is None ) : DCNL DCSP DCSP return DCNL DCSP user = User.objects.get ( username = user ) DCNL DCSP user.save ( )
DCSP siteconfig = SiteConfiguration.objects.get _ current ( ) DCNL DCSP if ( not review _ request ) : DCNL DCSP DCSP review _ request = review _ request _ request ( user , review _ request , type , * * kwargs ) DCNL DCSP else : DCNL DCSP DCSP review _ request = review _ request _ review _ request ( user , review _ request , type , * * kwargs ) DCNL DCSP if ( not review _ request ) : DCNL DCSP DCSP return DCNL DCSP siteconfig = SiteConfiguration.objects.get _ current ( ) DCNL DCSP if ( siteconfig.get ( u &apos;mail _ send _ review _ mail &apos; ) and ( not review _ request ) ) : DCNL DCSP DCSP return DCNL DCSP mail _ review _ request ( user , review _ request , type , * * kwargs )
DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Must DCSP specify DCSP a DCSP list DCSP or DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Must DCSP specify DCSP a DCSP list DCSP or DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP raise TypeError ( &apos; Must DCSP specify DCSP a DCSP list DCSP or DCSP a DCSP list &apos; ) DCNL DCSP if ( not isinstance ( ds , list ) ) : DCNL DCSP DCSP raise ValueError ( &apos; The DCSP list _ list DCSP function DCSP must DCSP be DCSP called DCSP with DCSP -f DCSP or DCSP --function . &apos; ) DCNL DCSP result = &#91; &#93; DCNL DCSP for role in ds : DCNL DCSP DCSP if ( not isinstance ( role , list ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not isinstance ( role , list ) ) : DCNL DCSP DCSP DCSP continue DCNL
DCSP rng = np.random.RandomState ( ) DCNL DCSP rng = np.random.RandomState ( ) DCNL DCSP rng = np.random.RandomState ( ) DCNL DCSP rng = np.random.RandomState ( ) DCNL DCSP rng = np.random.RandomState ( rseed ) DCNL DCSP y = np.arange ( n ) DCNL DCSP y = np.arange ( n ) DCNL DCSP y = np.arange ( n ) DCNL DCSP y = np.arange ( n ) DCNL DCSP assert _ array _ almost _ equal ( y , y )
DCSP if ( sys.platform = = &apos; darwin &apos; ) : DCNL DCSP DCSP if ( os.getenv ( &apos; XDG _ CONFIG _ HOME &apos; ) is None ) : DCNL DCSP DCSP DCSP return True DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return False DCNL DCSP else : DCNL DCSP DCSP return False
DCSP for f in flowgrams : DCNL DCSP DCSP f = open ( f , &apos; r &apos; ) DCNL DCSP DCSP for f in flowgrams : DCNL DCSP DCSP DCSP f = open ( f , &apos; r &apos; ) DCNL DCSP DCSP DCSP f = open ( f , &apos; r &apos; ) DCNL DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP f.close ( ) DCNL DCSP DCSP DCSP f.close ( )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP return conn.get _ resource _ id ( resource , name , region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP except BotoServerError as e : DCNL DCSP DCSP return { &apos; error &apos; : salt.utils.boto3.get _ error ( e ) }
DCSP return dict ( ( ( k , v ) for ( k , v ) in six.iteritems ( r ) if ( v is not None ) ) )
DCSP if ( alphabet is None ) : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP else : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP if ( alphabet is None ) : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP elif ( alphabet is None ) : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP else : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP if ( alphabet is None ) : DCNL DCSP DCSP alphabet = alphabet DCNL DCSP else : DCNL DCSP DCSP num = 0 DCNL DCSP for i in range ( 0 , len ( handle ) , 1 ) : DCNL DCSP DCSP line = handle.readline ( ) DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( not line ) : DCNL DCSP DCSP DCSP break DCNL DCSP
DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ format _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not hasattr ( request , &apos; _ _ html _ _ &apos; ) ) : DCNL DCSP DCSP return None DCNL DCSP try : DCNL DCSP DCSP response =
DCSP s = s.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP s = s.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP s = s.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP s = s.replace ( &apos; \ n &apos; , &apos; DCSP &apos; ) DCNL DCSP return s
DCSP try : DCNL DCSP DCSP return _ Strict@@ ParseLogEntry ( entry , parse _ message ) DCNL DCSP except ValueError : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return _ Strict@@ ParseLogEntry ( entry ) DCNL DCSP DCSP except ValueError : DCNL DCSP DCSP DCSP return None
DCSP if ( not code ) : DCNL DCSP DCSP return DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( count = = 0 ) : DCNL DCSP DCSP return DCNL DCSP for i in range ( count ) : DCNL DCSP DCSP for i in range ( count ) : DCNL DCSP DCSP DCSP if ( i = = count ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = count ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = count ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( i = = count ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP
DCSP if ( sys.version _ info &lt; ( 3 , ) ) : DCNL DCSP DCSP return _ do@@ CSS@@ to@@ DOM@@ name2 ( CSSname ) DCNL DCSP else : DCNL DCSP DCSP return _ do@@ CSS@@ to@@ DOM@@ name2 ( CSSname )
DCSP if ( len ( features ) = = 0 ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP if ( len ( features ) = = 1 ) : DCNL DCSP DCSP if ( len ( features ) = = 1 ) : DCNL DCSP DCSP DCSP if ( len ( labels ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP ys = np.array ( &#91; &#93; ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP ys = np.array ( labels ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP with open ( os.devnull , &apos; w &apos; ) as devnull : DCNL DCSP DCSP for command in commands : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP subprocess.check _ call ( command , * args , * * kwargs ) DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP print ( &apos; % s : DCSP % s &apos; % ( command , err ) ) DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise
DCSP while True : DCNL DCSP DCSP prev _ token = None DCNL DCSP DCSP prev _ token = None DCNL DCSP DCSP prev _ token = None DCNL DCSP DCSP prev _ token = None DCNL DCSP DCSP prev _ token = None DCNL DCSP DCSP prev _ token = prev _ token DCNL DCSP DCSP prev _ token = prev _ token DCNL DCSP DCSP prev _ token = prev _ token DCNL DCSP DCSP if ( prev _ token is None ) : DCNL DCSP DCSP DCSP prev _ token = prev _ token.@@ value.count ( u &apos; \ n &apos; ) DCNL DCSP DCSP if ( prev _ token is None ) : DCNL DCSP DCSP DCSP prev _ token = prev _ token.@@ value.count ( u &apos; \ n &apos; ) DCNL DCSP DCSP prev _ end = prev _ token.@@ end DCNL DCSP DCSP prev _ end = prev _ token DCNL DCSP DCSP prev _ end = prev _ token DCNL DCSP DCSP prev _ end = prev _ token DCNL DCSP DCSP prev _ end = prev _ token DCNL DCSP DCSP prev _ end = prev _ token DCNL DCSP DCSP
DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if ( len ( pkt ) = = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( len ( pkt ) &gt; 0 ) :
DCSP return ( &apos; % % ( % s ) &apos; % ( time _ string , ) )
DCSP if ( not text ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP result = &#91; &#93; DCNL DCSP for char in text _ per _ string : DCNL DCSP DCSP if ( char in chars ) : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP result.append ( char ) DCNL DCSP return result
DCSP extension = os.path.splitext ( os.path.basename ( view ) ) &#91; 0 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93; DCNL DCSP filename = os.path.splitext ( filename ) &#91; 1 &#93;
DCSP if ( value is None ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &lt; 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &gt; = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &gt; = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &gt; = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &gt; = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP if ( value &gt; = 0 ) : DCNL DCSP DCSP return 0 DCNL DCSP else : DCNL DCSP DCSP return 0
DCSP with open ( data _ file _ name , &apos; rb &apos; ) as fid : DCNL DCSP DCSP data = pickle.load ( fid ) DCNL DCSP return data
DCSP try : DCNL DCSP DCSP return getattr ( ec2 , &apos; version _ address &apos; , None ) DCNL DCSP except ImportError : DCNL DCSP DCSP return False
DCSP with open ( option , &apos; r &apos; , encoding = &apos; utf-8 &apos; ) as f : DCNL DCSP DCSP contents = f.read ( ) DCNL DCSP if ( len ( lines ) = = 1 ) : DCNL DCSP DCSP if ( len ( lines ) = = 1 ) : DCNL DCSP DCSP DCSP value = value &#91; 1 : &#93; DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP value = value DCNL DCSP else : DCNL DCSP DCSP value = value DCNL DCSP return value
DCSP return _ SUFFIXES
DCSP if ( value is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP elif isinstance ( value , unicode ) : DCNL DCSP DCSP return str ( value ) DCNL DCSP elif isinstance ( value , unicode ) : DCNL DCSP DCSP return str ( value ) DCNL DCSP else : DCNL DCSP DCSP return str ( value )
DCSP return config.is _ provider _ configured ( _ _ opts _ _ , ( _ _ active _ provider _ name _ _ or _ _ virtualname _ _ ) , ( &apos; user &apos; , &apos; password &apos; , &apos; password &apos; ) )
DCSP conn = _ get _ conn ( region = region , key = key , keyid = keyid , profile = profile ) DCNL DCSP try : DCNL DCSP DCSP conn.delete _ instance _ profile ( name ) DCNL DCSP DCSP return True DCNL DCSP except boto.exception.BotoServerError as e : DCNL DCSP DCSP log.debug ( e ) DCNL DCSP DCSP return False
DCSP if ( not versions ) : DCNL DCSP DCSP return None DCNL DCSP if ( not version ) : DCNL DCSP DCSP return None DCNL DCSP if ( not version ) : DCNL DCSP DCSP return None DCNL DCSP if ( not version ) : DCNL DCSP DCSP return None DCNL DCSP if ( not version ) : DCNL DCSP DCSP return None DCNL DCSP if ( not version ) : DCNL DCSP DCSP return None DCNL DCSP return _ version _ version ( version )
DCSP return get _ pymodule _ path ( get _ pymodule _ path ( * joins ) , * joins )
DCSP for item in sequence : DCNL DCSP DCSP if isinstance ( item , ( list , tuple ) ) : DCNL DCSP DCSP DCSP ( yield item ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP ( yield item )
DCSP while True : DCNL DCSP DCSP if ( first _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( last _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( previous _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( last _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP if ( last _ token is None ) : DCNL DCSP DCSP DCSP break DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP
DCSP ret = fun ( * args , * * kw ) DCNL DCSP return ret
DCSP if ( not is _ darwin _ dir ( ) ) : DCNL DCSP DCSP return ( False , &apos; Could DCSP not DCSP find DCSP a DCSP release DCSP dir &apos; ) DCNL DCSP if ( not is _ darwin _ dir ( ) ) : DCNL DCSP DCSP return ( False , &apos; This DCSP function DCSP is DCSP not DCSP a DCSP valid DCSP binary DCSP dir &apos; ) DCNL DCSP if ( not is _ darwin _ dir ( ) ) : DCNL DCSP DCSP return ( False , &apos; This DCSP function DCSP is DCSP not DCSP a DCSP valid DCSP binary DCSP dir &apos; ) DCNL DCSP if ( not is _ darwin _ dir ( ) ) : DCNL DCSP DCSP return ( False , &apos; This DCSP function DCSP is DCSP not DCSP a DCSP valid DCSP binary DCSP dir &apos; ) DCNL DCSP if ( not is _ configured _ dir ( ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not is _ configured _ dir ( ) ) : DCNL DCSP DCSP return None DCNL DCSP if ( not is _ binary _ dir (
DCSP if ( match is None ) : DCNL DCSP DCSP return string DCNL DCSP if isinstance ( match , string _ types ) : DCNL DCSP DCSP match = match.group ( 2 ) DCNL DCSP DCSP if ( len ( string ) = = 2 ) : DCNL DCSP DCSP DCSP return ( match.group ( 1 ) , string &#91; 1 : &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP return ( string , string ) DCNL DCSP else : DCNL DCSP DCSP return ( string , string )
DCSP try : DCNL DCSP DCSP sr = session.query ( sr _ uuid ) .filter _ by ( sr _ uuid = sr _ uuid ) .one ( ) DCNL DCSP DCSP return sr DCNL DCSP except session.XenAPI.Failure as exc : DCNL DCSP DCSP LOG.exception ( _ LE ( &apos; Failed DCSP to DCSP find DCSP SR DCSP from DCSP % s &apos; ) , sr _ uuid ) DCNL DCSP DCSP return None
DCSP root = open ( xml _ config _ file , &apos; r &apos; ) DCNL DCSP try : DCNL DCSP DCSP with open ( xml _ config _ file , &apos; r &apos; ) as f : DCNL DCSP DCSP DCSP return json.loads ( f.read ( ) ) DCNL DCSP except Exception as e : DCNL DCSP DCSP log.error ( &apos; Unable DCSP to DCSP read DCSP XML DCSP config DCSP file : DCSP { 0 } &apos; .format ( e ) ) DCNL DCSP DCSP return None
DCSP if ( &apos; noreset &apos; not in opts ) : DCNL DCSP DCSP text = ( &apos; \ x1b &#91; % sm &apos; % RESET ) DCNL DCSP if ( &apos; noreset &apos; not in opts ) : DCNL DCSP DCSP text = ( &apos; \ x1b &#91; % sm &apos; % RESET ) DCNL DCSP if ( &apos; noreset &apos; not in opts ) : DCNL DCSP DCSP text = ( &apos; \ x1b &#91; % sm &apos; % RESET ) DCNL DCSP if ( &apos; noreset &apos; not in opts ) : DCNL DCSP DCSP text = ( &apos; \ x1b &#91; % sm &apos; % RESET ) DCNL DCSP if ( &apos; noreset &apos; not in opts ) : DCNL DCSP DCSP text = ( &apos; \ x1b &#91; % sm &apos; % RESET ) DCNL DCSP return ( &apos; \ x1b &#91; % sm &apos; % RESET )
DCSP if context.is _ admin : DCNL DCSP DCSP return True DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( image &#91; &apos; owner &apos; &#93; is None ) : DCNL DCSP DCSP return
DCSP assert ( first is not None ) , ( msg or ( &apos; % r DCSP does DCSP not DCSP exist &apos; % ( first , second ) ) )
DCSP if isinstance ( item , list ) : DCNL DCSP DCSP item = list ( list ( list _ ) ) DCNL DCSP else : DCNL DCSP DCSP item = list ( list ( list _ ) ) DCNL DCSP return jinja2.Markup ( ( u &apos; % s = % s &apos; % ( item , item ) ) )
DCSP pdef = base _ param ( registry , xml _ parent , data , True , &apos; hudson.model.@@ Password@@ ParameterDefinition &apos; ) DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93; DCNL DCSP XML.SubElement ( pdef , &apos; name &apos; ) .text = data &#91; &apos; name &apos; &#93;
DCSP logging.debug ( &apos; Sending DCSP request : DCSP % s &apos; , url ) DCNL DCSP try : DCNL DCSP DCSP apiproxy _ stub _ map.MakeSyncCall ( &apos; POST &apos; , &apos; POST &apos; , url , headers = body ) DCNL DCSP except apiproxy _ errors.ApplicationError as e : DCNL DCSP DCSP if ( not error ) : DCNL DCSP DCSP DCSP raise DCNL DCSP DCSP raise DCNL DCSP except Exception as e : DCNL DCSP DCSP logging.error ( ( &apos; Error DCSP trying DCSP to DCSP create DCSP request : DCSP % s &apos; % e ) ) DCNL DCSP DCSP return None DCNL DCSP return urlfetch ( request )
DCSP if ( ( cmd is None ) or ( cmd is None ) ) : DCNL DCSP DCSP cmd = &#91; u &apos;@@ osascript &apos; , u &apos; &apos; &#93; DCNL DCSP if strip : DCNL DCSP DCSP cmd + = ( u &apos; DCSP &apos; + u &apos; DCSP &apos; .join ( cmd ) ) DCNL DCSP if strip : DCNL DCSP DCSP cmd + = ( u &apos; DCSP &apos; + u &apos; DCSP &apos; .join ( cmd ) ) DCNL DCSP if strip : DCNL DCSP DCSP cmd + = ( u &apos; DCSP &apos; + u &apos; DCSP &apos; .join ( cmd ) ) DCNL DCSP if strip : DCNL DCSP DCSP cmd + = ( u &apos; DCSP &apos; + cmd ) DCNL DCSP return ( cmd , cmd )
DCSP if ( not isinstance ( node , basestring ) ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( ( not isinstance ( node , basestring ) ) or ( not isinstance ( node , basestring ) ) ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST ) DCNL DCSP if ( ( not key ) or ( not isinstance ( node , basestring ) ) ) : DCNL DCSP DCSP raise HTTPError ( http.BAD _ REQUEST , data = { &apos; id &apos; : node _ id } ) DCNL DCSP if ( key in url ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP ret = { } DCNL DCSP ret = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP if ( res &#91; &apos; retcode &apos; &#93; ! = 0 ) : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP return ret DCNL DCSP return ret &#91; &apos; stdout &apos; &#93;
DCSP if ( not physical _ line ) : DCNL DCSP DCSP return False DCNL DCSP physical _ line = physical _ line.find ( &apos; DCSP &apos; ) DCNL DCSP if ( ( len ( physical _ line ) = = len ( physical _ line ) ) and ( len ( physical _ line ) = = len ( physical _ line ) ) ) : DCNL DCSP DCSP return True DCNL DCSP else : DCNL DCSP DCSP return False
DCSP path = os.path.join ( dirname , &apos; _ _ init _ _ .py &apos; ) DCNL DCSP if ( os.path.isfile ( os.path.join ( dirname , &apos; _ _ init _ _ .py &apos; ) ) and os.path.isfile ( os.path.join ( dirname , &apos; _ _ init _ _ .py &apos; ) ) ) : DCNL DCSP DCSP return True DCNL DCSP return False
DCSP cache _ key = ( &apos; views.decorators.cache.cache _ header . % s . % s . % s &apos; % ( key _ prefix , path.hexdigest ( ) , ctx.hexdigest ( ) ) ) DCNL DCSP return _ i18n _ cache _ key _ suffix ( request , cache _ key )
DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( local _ tag is None
DCSP if ( http _ info is None ) : DCNL DCSP DCSP http _ info = http _ info.get ( &apos; location &apos; , None ) DCNL DCSP if ( http _ info is None ) : DCNL DCSP DCSP return None DCNL DCSP if ( http _ info &#91; 0 &#93; = = &apos; http &apos; ) : DCNL DCSP DCSP return http _ info &#91; 0 &#93; DCNL DCSP else : DCNL DCSP DCSP return None
DCSP ( s1 , s2 ) = ( ( -1 ) , ( -1 ) ) DCNL DCSP for i in range ( 1 , ( len ( x ) - 1 ) ) : DCNL DCSP DCSP for i in range ( 1 , ( m + 1 ) ) : DCNL DCSP DCSP DCSP if ( ( m &#91; ( -1 ) &#93; = = u ) and ( m &#91; ( i + 1 ) &#93; = = u ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( m &#91; ( -1 ) &#93; = = u ) and ( m &#91; ( i + 1 ) &#93; = = u ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( m &#91; ( -1 ) &#93; = = u ) and ( m &#91; ( i + 1 ) &#93; = = u ) ) : DCNL DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP if ( ( m &#91; ( -1 ) &#93; = = u ) and ( m &#91; ( -1 ) &#93; = = u ) ) :
DCSP if ( values is None ) : DCNL DCSP DCSP values = &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = &#91; &#93; DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = np.array ( values ) DCNL DCSP if ( values is None ) : DCNL DCSP DCSP values = np.array ( values ) DCNL DCSP return out
DCSP with open ( file _ path , &apos; r &apos; ) as f : DCNL DCSP DCSP return f.read ( )
DCSP postag ( )
DCSP ( k , tck , ier ) = _ fitpack . _ sproot ( x , tck , ier ) DCNL DCSP if ( ier ! = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP method : DCSP % s &apos; % k ) ) DCNL DCSP if ( ier ! = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP method : DCSP % s &apos; % k ) ) DCNL DCSP if ( ier ! = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP method : DCSP % s &apos; % k ) ) DCNL DCSP if ( ier ! = 0 ) : DCNL DCSP DCSP raise ValueError ( ( &apos; Unknown DCSP method : DCSP % s &apos; % k ) ) DCNL DCSP if ( ier = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; matrix DCSP is DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP if ( ier = = 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; matrix DCSP is DCSP not DCSP supported DCSP yet &apos; ) DCNL DCSP return
DCSP s = &apos; &apos; DCNL DCSP while True : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( interval ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP s = f.read ( ) DCNL DCSP DCSP except Exception : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP
DCSP if ( not os.path.exists ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; test &apos; ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; test &apos; ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not os.path.exists ( os.path.join ( os.path.dirname ( _ _ file _ _ ) , &apos; test &apos; ) ) ) : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP if ( not request.user.is _ authenticated ( ) ) : DCNL DCSP DCSP return &#91; &#93; DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL DCSP locale = request.GET.get ( &apos; locale &apos; , &apos; &apos; ) DCNL
DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP if response.has _ header ( &apos; Vary &apos; ) : DCNL DCSP DCSP vary _ headers = cc _ delim _ re.split ( response &#91; &apos; Vary &apos; &#93; ) DCNL DCSP else : DCNL DCSP DCSP vary _ headers = &#91; &#93; DCNL DCSP for newhe@@ ader in newheaders : DCNL DCSP DCSP if ( newhe@@ ader.@@ lower ( ) = = &apos;
DCSP return unencoded _ ampersands _ re.sub ( &apos; &amp; amp ; &apos; , value )
DCSP global priority _ priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority , priority ,
DCSP if ( tok is None ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP if isinstance ( tok , str ) : DCNL DCSP DCSP tok = tok DCNL DCSP return ( &apos; % s : % s &apos; % ( toknum , tokval ) )
DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ STREAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( ( &apos; 127.0.0.1 &apos; , 80 ) ) DCNL DCSP s = socket.socket ( socket.AF _ INET , socket.SOCK _ DGRAM ) DCNL DCSP s.connect ( (
DCSP if isinstance ( lst , list ) : DCNL DCSP DCSP return lst DCNL DCSP else : DCNL DCSP DCSP return lst
DCSP if ( not hasattr ( seq , &apos; _ _ dict _ _ &apos; ) ) : DCNL DCSP DCSP return dict ( &#91; ( key , seq ) for ( key , value ) in seq &#93; ) DCNL DCSP return _ groupby ( key , seq )
DCSP client = _ get _ splunk ( profile ) DCNL DCSP client = _ get _ splunk ( profile ) DCNL DCSP return client.@@ create ( name , profile = profile , * * kwargs )
DCSP return re.compile ( pattern ) .search ( pattern )
DCSP np.random.seed ( 0 ) DCNL DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP warnings.simplefilter ( &apos; always &apos; ) DCNL DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP with warnings.catch _ warnings ( record = True ) as f : DCNL DCSP DCSP DCSP DCSP DCSP
DCSP return get _ object _ or _ 404 ( product , size = size , method = method )
DCSP stack = &#91; &#93; DCNL DCSP for tag in sentence : DCNL DCSP DCSP if ( tag = = &apos; * &apos; ) : DCNL DCSP DCSP DCSP stack.pop ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stack.pop ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stack.pop ( ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP stack.pop ( )
DCSP if ( headers is None ) : DCNL DCSP DCSP headers = { } DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; % s : % s &apos; % ( ipaddr , port ) ) ) DCNL DCSP conn = BufferedHTTPConnection ( ( &apos; %
DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None ) : DCNL DCSP DCSP random _ state = np.random.RandomState ( random _ state ) DCNL DCSP if ( random _ state is None
DCSP if ( namespace is None ) : DCNL DCSP DCSP namespace = get _ vlan _ id ( ) DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP return False DCNL DCSP if ( namespace is None ) : DCNL DCSP DCSP
DCSP return dict ( ( ( k , v ) for ( k , v ) in context if ( v is not None ) ) )
DCSP if isinstance ( a , basestring ) : DCNL DCSP DCSP return str ( a ) DCNL DCSP if isinstance ( a , basestring ) : DCNL DCSP DCSP return str ( a ) DCNL DCSP else : DCNL DCSP DCSP return str ( a )
DCSP if remove : DCNL DCSP DCSP for ( root , dirnames , filenames ) in os.walk ( testdir ) : DCNL DCSP DCSP DCSP for filename in files : DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP if remove : DCNL DCSP DCSP DCSP DCSP DCSP continue DCNL DCSP DCSP DCSP DCSP
DCSP out = &#91; &#93; DCNL DCSP for a in list : DCNL DCSP DCSP if isinstance ( x , ( list , tuple ) ) : DCNL DCSP DCSP DCSP a = ( a + b ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( a ) &gt; = k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( a ) &gt; = k ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( len ( a ) &gt; = k ) : DCNL DCSP DCSP DCSP ( a , b ) = ( &#91; &#93; , &#91; &#93; ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP a = ( a + b ) DCNL DCSP return ( a , b )
DCSP try : DCNL DCSP DCSP with open ( filename , &apos; rb &apos; ) as f : DCNL DCSP DCSP DCSP return f.read ( ) DCNL DCSP except : DCNL DCSP DCSP return False
DCSP if context.is _ admin : DCNL DCSP DCSP return True DCNL DCSP if ( context.owner is None ) : DCNL DCSP DCSP return False DCNL DCSP return ( namespace.owner = = context.owner )
DCSP if ( not sys.platform.startswith ( &apos; win &apos; ) ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP fd = os.open ( pidfile , os.O _ RDWR ) DCNL DCSP DCSP DCSP os.close ( fd ) DCNL DCSP DCSP except OSError as e : DCNL DCSP DCSP DCSP if ( e.errno = = errno.EEXIST ) : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP DCSP else : DCNL DCSP DCSP DCSP DCSP raise DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise DCNL DCSP finally : DCNL DCSP DCSP os.close ( fd )
DCSP if ( uri is None ) : DCNL DCSP DCSP uri = &#91; &#93; DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = &#91; &#93; DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP uri = context.lookup _ playlist _ uri _ from _ uri ( uri ) DCNL DCSP DCSP if ( uri is None ) : DCNL DCSP DCSP DCSP uri = ( u &apos; / &apos; + uri ) DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP if ( uri is None ) : DCNL DCSP DCSP raise exceptions.MpdNoExistError ( u &apos;No DCSP such DCSP playlist &apos; ) DCNL DCSP if ( uri is None
DCSP with np.errstate ( divide = &apos; ignore &apos; ) : DCNL DCSP DCSP if ( eps is None ) : DCNL DCSP DCSP DCSP tol = 0.0 DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP raise ValueError ( &apos; not DCSP implemented DCSP for DCSP Windows &apos; ) DCNL DCSP else : DCNL DCSP DCSP raise ValueError ( &apos; Must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( gamma is None ) : DCNL DCSP DCSP tol = 0.0 DCNL DCSP else : DCNL DCSP DCSP tol = 0.0 DCNL DCSP tol = 0.0 DCNL DCSP for ( k , v ) in enumerate ( order ) : DCNL DCSP DCSP if ( k = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( k = = 0 ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if
DCSP global _ global _ options DCNL DCSP if ( _ global _ options is None ) : DCNL DCSP DCSP _ global _ options = { } DCNL DCSP return _ global _ options
DCSP return ( ( ( a _ start + b _ end ) - 1 ) , ( b _ start + b _ end ) )
DCSP if ( not os.path.exists ( path ) ) : DCNL DCSP DCSP raise SaltInvocationError ( &quot; &apos; { 0 } &apos; DCSP does DCSP not DCSP exist &quot; .format ( name ) ) DCNL DCSP try : DCNL DCSP DCSP out = _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , python _ shell = False ) DCNL DCSP except OSError : DCNL DCSP DCSP return False DCNL DCSP return True
DCSP models = ( Image , ImageProperty , ImageMember ) DCNL DCSP for model in models : DCNL DCSP DCSP model.@@ metadata.drop _ all ( engine )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP ( yield ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass
DCSP parser = get _ parser ( ) DCNL DCSP if ( not isinstance ( node.template.value , ( list , tuple ) ) ) : DCNL DCSP DCSP raise ValueError ( &apos; This DCSP function DCSP must DCSP be DCSP a DCSP string DCSP or DCSP a DCSP string &apos; ) DCNL DCSP try : DCNL DCSP DCSP if ( not isinstance ( node.template.value , ( list , tuple ) ) ) : DCNL DCSP DCSP DCSP raise TypeError ( &apos; This DCSP function DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( node , list ) ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; This DCSP function DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( node , list ) ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; This DCSP function DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP DCSP if ( not isinstance ( node , list ) ) : DCNL DCSP DCSP DCSP raise ValueError ( &apos; This DCSP function DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL
DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP if ( value is None ) : DCNL DCSP DCSP return value DCNL DCSP return value
DCSP if isinstance ( instr , unicode ) : DCNL DCSP DCSP return instr DCNL DCSP else : DCNL DCSP DCSP return instr
DCSP return &apos; DCSP &apos; .join ( &#91; ( &apos; % s = % s &apos; % ( k , v ) ) for ( k , v ) in enumerate ( get _ order _ list ( ) ) &#93; )
DCSP s3.prep = ( lambda r : ( ( r.method = = &apos; options &apos; ) and ( r.representation = = &apos; s3json &apos; ) ) ) DCNL DCSP return s3 _ rest _ controller ( )
DCSP return IMPL.service _ get ( context , service _ id , backend _ match _ level , * * filters )
DCSP return os.path.join ( os.path.dirname ( _ _ file _ _ ) , name )
DCSP content _ type = ( &apos; % s / % s / % s &apos; % ( mime _ type , location , location ) ) DCNL DCSP with open ( content _ type , &apos; wb &apos; ) as f : DCNL DCSP DCSP pickle.dump ( content , content _ type , content _ type = content _ type )
DCSP if ( not args ) : DCNL DCSP DCSP return &apos; &apos; DCNL DCSP return Object ( * args , * * kwds )
DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from django.conf import settings DCNL DCSP from
DCSP if ( os.name = = &apos; nt &apos; ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP args = watcher.@@ args DCNL DCSP DCSP DCSP if ( len ( args ) = = 1 ) : DCNL DCSP DCSP DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP DCSP DCSP DCSP args = args &#91; 1 : &#93; DCNL DCSP DCSP DCSP except : DCNL DCSP DCSP DCSP DCSP args = &#91; &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args = args &#91; : ( -1 ) &#93; DCNL DCSP DCSP DCSP args
DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP return DCNL DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP os.remove ( os.path.join ( target _ dir , fname ) ) DCNL DCSP else : DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( not os.path.exists ( os.path.join ( target _ dir , fname ) ) ) : DCNL DCSP DCSP DCSP
DCSP if ( not text ) : DCNL DCSP DCSP return None DCNL DCSP if ( text &#91; 0 &#93; = = &apos; # &apos; ) : DCNL DCSP DCSP return text DCNL DCSP elif ( text &#91; 0 &#93; = = &apos; # &apos; ) : DCNL DCSP DCSP return text &#91; 1 : ( -1 ) &#93; DCNL DCSP else : DCNL DCSP DCSP return text
DCSP try : DCNL DCSP DCSP os.remove ( _ _ file _ _ ) DCNL DCSP DCSP return True DCNL DCSP except Exception : DCNL DCSP DCSP return False
DCSP keywords = { } DCNL DCSP for ( key , value ) in LEXERS.itervalues ( ) : DCNL DCSP DCSP if ( key in keywords ) : DCNL DCSP DCSP DCSP keywords &#91; key &#93; = keywords &#91; key &#93; DCNL DCSP return keywords
DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer &apos; ) DCNL DCSP if ( n &lt; 0 ) : DCNL DCSP DCSP raise ValueError ( &apos; n DCSP must DCSP be DCSP a DCSP positive DCSP integer
DCSP if ( default _ app is None ) : DCNL DCSP DCSP default _ app = get _ app _ class ( ) DCNL DCSP try : DCNL DCSP DCSP return apps.get _ model ( model _ string , default _ app ) DCNL DCSP except ValueError : DCNL DCSP DCSP return default _ app
DCSP cmd = &apos; / etc / rc.d / { 0 } DCSP restart &apos; .format ( name ) DCNL DCSP return ( not _ _ salt _ _ &#91; &apos; cmd.retcode &apos; &#93; ( cmd , python _ shell = False ) )
DCSP try : DCNL DCSP DCSP ( yield ) DCNL DCSP finally : DCNL DCSP DCSP ( yield request )
DCSP if ( len ( loop ) &lt; 1 ) : DCNL DCSP DCSP return &#91; loop &#93; DCNL DCSP loopComplex = euclidean.getComplexPath ( loop ) DCNL DCSP return euclidean.getVector3Paths ( loopComplexes , loop &#91; 0 &#93; .z )
DCSP def decorator ( func ) : DCNL DCSP DCSP @ wraps ( func ) DCNL DCSP DCSP def wrapper ( self , * args , * * kwargs ) : DCNL DCSP DCSP DCSP try : DCNL DCSP DCSP DCSP DCSP return func ( self , * args , * * kwargs ) DCNL DCSP DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP DCSP pass DCNL DCSP DCSP return wrapper DCNL DCSP return decorator
DCSP plugin = XML.SubElement ( xml _ parent , &apos; hudson.plugins.@@ env@@ trigger.@@ Build@@ Builder &apos; ) DCNL DCSP XML.SubElement ( plugin , &apos; plugin &apos; ) .text = data &#91; &apos; plugin &apos; &#93; DCNL DCSP XML.SubElement ( plugin , &apos; script &apos; ) .text = data &#91; &apos; plugin &apos; &#93;
DCSP options = { } DCNL DCSP for arg in arglist : DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key not in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( key in options ) : DCNL DCSP DCSP DCSP options &#91; key &#93; = value DCNL DCSP DCSP else : DCNL DCSP DCSP DCSP options &#91; key &#93; = value DCNL DCSP return config
DCSP assert ( _ tk _ type is not None ) DCNL DCSP return ( _ tk _ type = = &apos; carbon &apos; )
DCSP if result : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return result
DCSP with settings ( hide ( &apos; running &apos; , &apos; stdout &apos; , &apos; warnings &apos; ) , warn _ only = True ) : DCNL DCSP DCSP return run ( &#91; &apos; apt-get &apos; , &apos; -y &apos; , &apos; -y &apos; , &apos; -y &apos; , &apos; clusterhq-@@ python-@@ flocker &apos; &#93; )
DCSP if ( action = = &apos; action &apos; ) : DCNL DCSP DCSP return _ get _ resource _ action ( action ) DCNL DCSP elif ( action = = &apos; action &apos; ) : DCNL DCSP DCSP return action DCNL DCSP elif ( action = = &apos; action &apos; ) : DCNL DCSP DCSP return _ get _ resource _ action ( action ) DCNL DCSP else : DCNL DCSP DCSP return action
DCSP if bin _ env : DCNL DCSP DCSP cmd.extend ( &#91; &apos; -r &apos; , bin _ env &#93; ) DCNL DCSP return _ _ salt _ _ &#91; &apos; cmd.run _ all &apos; &#93; ( cmd , runas = user , python _ shell = use _ vt , python _ shell = use _ vt )
DCSP query = query _ class ( part , query _ class = query _ class , prefixes = prefixes , default _ class = default _ class ) DCNL DCSP if query : DCNL DCSP DCSP return ( query , query ) DCNL DCSP else : DCNL DCSP DCSP return ( None , None )
DCSP global _ logger@@ Class DCNL DCSP _ logger@@ Class = klass
DCSP server = _ find _ server ( cs , args.server ) DCNL DCSP utils.print _ list ( cs.floating _ ip@@ s.list ( ) )
DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP dataset.create ( ) DCNL DCSP for dataset in client.list _ datasets ( ) : DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset = client.dataset ( DATASET _ NAME ) DCNL DCSP DCSP dataset.create ( ) DCNL DCSP DCSP dataset =
DCSP pdef = base _ xml ( registry , xml _ parent , data , fail _ required = True ) DCNL DCSP XML.SubElement ( pdef , &apos; trigger@@ Label &apos; ) .text = str ( data.get ( &apos; fail-on-error &apos; , False ) ) .lower ( )
DCSP task _ statuses = &#91; &#93; DCNL DCSP for task in task _ ids : DCNL DCSP DCSP if ( task &#91; &apos; id &apos; &#93; = = task _ id ) : DCNL DCSP DCSP DCSP task = task &#91; &apos; task _ id &apos; &#93; DCNL DCSP DCSP DCSP task = task &#91; &apos; task _ id &apos; &#93; DCNL DCSP DCSP DCSP task = task &#91; &apos; task _ id &apos; &#93; DCNL DCSP DCSP DCSP task = task &#91; &apos; task _ id &apos; &#93; DCNL DCSP DCSP DCSP if ( task &#91; &apos; id &apos; &#93; = = task _ id ) : DCNL DCSP DCSP DCSP DCSP task &#91; &apos; task _ id &apos; &#93; = task &#91; &apos; id &apos; &#93; DCNL DCSP return task
DCSP key _ config _ stub.set ( &apos; normal &apos; , &apos; cmd-aa &apos; ) DCNL DCSP keyhint.update _ keyhint ( &apos; normal &apos; , &apos; a &apos; ) DCNL DCSP assert ( keyhint.text ( ) = = key _ config _ stub.set ( &apos; normal &apos; , &apos; cmd-aa &apos; ) )
DCSP if ( not hasattr ( object , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; object DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( object , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; object DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( object , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; object DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( object , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; object DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not hasattr ( object , &apos; _ _ file _ _ &apos; ) ) : DCNL DCSP DCSP raise TypeError ( &apos; object DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP if ( not isinstance ( object , Carbon.File.FSRef ) ) : DCNL DCSP DCSP
DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = &apos; &apos; DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP version _ string = version _ string DCNL DCSP if ( version _ string is None ) : DCNL DCSP DCSP
DCSP def decorator ( func ) : DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP return klass ( * args , * * kwds ) DCNL DCSP DCSP except AttributeError : DCNL DCSP DCSP DCSP pass DCNL DCSP DCSP return func DCNL DCSP return decorator
DCSP result = script.pip ( &apos; download &apos; , &apos; INITools = = 0.1 &apos; , expect _ error = True ) DCNL DCSP assert ( ( Path ( &apos; scratch &apos; ) / &apos; INITools-0.@@ 1.tar.gz &apos; ) in result.files _ created ) , str ( result )
DCSP result = function ( * args , * * dargs ) DCNL DCSP if result : DCNL DCSP DCSP return result DCNL DCSP else : DCNL DCSP DCSP return None
DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname _ fname , preload = True ) DCNL DCSP evoked = read _ evokeds ( fname
DCSP if ( not rule ) : DCNL DCSP DCSP return FalseCheck ( ) DCNL DCSP if ( len ( rule ) = = 1 ) : DCNL DCSP DCSP return FalseCheck ( ) DCNL DCSP else : DCNL DCSP DCSP return FalseCheck ( )
DCSP UserModel = auth.get _ user _ model ( ) DCNL DCSP db.reset _ queries ( ) DCNL DCSP try : DCNL DCSP DCSP db.reset _ queries ( ) DCNL DCSP DCSP try : DCNL DCSP DCSP DCSP user = UserModel . _ default _ manager.get _ by _ natural _ key ( username ) DCNL DCSP DCSP except UserModel.DoesNotExist : DCNL DCSP DCSP DCSP return None DCNL DCSP DCSP return user.check _ password ( password ) DCNL DCSP finally : DCNL DCSP DCSP db.close _ connection ( )
DCSP if ( not isinstance ( sys.argv &#91; 0 &#93; , basestring ) ) : DCNL DCSP DCSP raise TypeError ( &apos; argument DCSP must DCSP be DCSP a DCSP string &apos; ) DCNL DCSP parser = optparse.OptionParser ( ) DCNL DCSP parser.add _ argument ( &apos; --@@ name &apos; , required = True , action = &apos; store _ true &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ name &apos; , default = &apos; store _ true &apos; ) DCNL DCSP parser = optparse.OptionParser ( ) DCNL DCSP parser.add _ argument ( &apos; --@@ name &apos; , default = &apos; store _ true &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ name &apos; , default = &apos; store _ true &apos; , help = &apos; If DCSP you DCSP want DCSP to DCSP install DCSP the DCSP first DCSP package . &apos; ) DCNL DCSP parser.add _ argument ( &apos; --@@ name &apos; , default = &apos; store _ true &apos; ) DCNL DCSP parser.add _ argument ( &apos; --list &apos; , action = &apos; store _ true &apos; , action = &apos; store _ true &apos; ) DCNL DCSP parser.add _ argument ( &apos;
DCSP if ( isinstance ( d , dict ) and isinstance ( d , dict ) ) : DCNL DCSP DCSP return set ( ) DCNL DCSP elif isinstance ( d , dict ) : DCNL DCSP DCSP return set ( ) DCNL DCSP elif isinstance ( d , dict ) : DCNL DCSP DCSP return set ( ) DCNL DCSP else : DCNL DCSP DCSP return None
DCSP if ( family = = socket.AF _ INET ) : DCNL DCSP DCSP return ip DCNL DCSP else : DCNL DCSP DCSP return ( int ( raw &#91; 0 &#93; ) , int ( raw &#91; 4 &#93; ) )
DCSP if numsamples : DCNL DCSP DCSP return reduce ( ( lambda a , b : ( ( a * * 2 ) + ( a * * 2 ) ) ) , ( lambda a , b : ( a * * 2 ) ) ) DCNL DCSP else : DCNL DCSP DCSP return reduce ( ( lambda a , b : ( a * b ) ) , resiters )
DCSP return get _ random _ time ( start = start , end = end , periods = periods , time _ rule = time _ rule )
DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = _ get _ http _ request _ url ( ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is None ) : DCNL DCSP DCSP file _ url = ( file _ url or &apos; &apos; ) DCNL DCSP if ( file _ url is not None ) : DCNL DCSP DCSP response =
DCSP try : DCNL DCSP DCSP return ( proc.status ( ) if PSUT@@ IL@@ 2 else proc.status ) DCNL DCSP except ( psutil.NoSuchProcess , psutil.AccessDenied ) : DCNL DCSP DCSP return None
DCSP out = &#91; &#93; DCNL DCSP out = &#91; &#93; DCNL DCSP for line in out.splitlines ( ) : DCNL DCSP DCSP if line.startswith ( &apos; / &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if line.startswith ( &apos; / &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name = = &apos; python &apos; ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) : DCNL DCSP DCSP DCSP continue DCNL DCSP DCSP if ( name in packages ) :
DCSP disk _ bus = get _ disk _ bus ( virt _ type , device _ type , device _ type ) DCNL DCSP if ( disk _ bus = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = = &apos; ide &apos; ) : DCNL DCSP DCSP return disk _ bus DCNL DCSP elif ( disk _ type = =
DCSP if ( proxy is None ) : DCNL DCSP DCSP return { } DCNL DCSP ret = { } DCNL DCSP if proxy : DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; = False DCNL DCSP DCSP ret &#91; &apos; result &apos; &#93; =
DCSP vif _ ref = _ virtual _ interface _ query ( context ) .filter _ by ( uuid = vif _ uuid ) .first ( ) DCNL DCSP return vif _ ref
DCSP if ( not isinstance ( coro , types.GeneratorType ) ) : DCNL DCSP DCSP raise TypeError ( ( &apos; % s DCSP is DCSP not DCSP a DCSP coroutine &apos; % coro ) ) DCNL DCSP return Dele@@ gation@@ Event ( coro )
DCSP assert _ equals ( strings.escape _ if _ necessary ( &apos; abc &apos; ) , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ escape , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ escape , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ escape , &apos; abc &apos; ) DCNL DCSP AssertError ( TypeError , codecs.unicode _ escape _ escape , &apos; abc &apos; )
DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( hasattr ( obj , &apos; _ _ call _ _ &apos; ) and ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) ) : DCNL DCSP DCSP return False DCNL DCSP if ( not hasattr ( obj , &apos; _ _ call _ _ &apos; ) )
DCSP runner = Runn