def client_start(request, socket, context): DCNL  DCSP CLIENTS[socket.session.session_id] = (request, socket, context)
def client_end(request, socket, context): DCNL  DCSP for channel in socket.channels: DCNL DCSP  DCSP events.on_unsubscribe.send(request, socket, context, channel) DCNL DCSP events.on_finish.send(request, socket, context) DCNL DCSP for channel in socket.channels[:]: DCNL DCSP  DCSP socket.unsubscribe(channel) DCNL DCSP del CLIENTS[socket.session.session_id]
def client_end_all(): DCNL  DCSP for (request, socket, context) in CLIENTS.values()[:]: DCNL DCSP  DCSP client_end(request, socket, context)
def socketio(request): DCNL  DCSP context = {} DCNL DCSP socket = SocketIOChannelProxy(request.environ['socketio']) DCNL DCSP client_start(request, socket, context) DCNL DCSP try: DCNL DCSP  DCSP if socket.on_connect(): DCNL DCSP  DCSP  DCSP events.on_connect.send(request, socket, context) DCNL DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP messages = socket.recv() DCNL DCSP  DCSP  DCSP if ((not messages) and (not socket.connected())): DCNL DCSP  DCSP  DCSP  DCSP events.on_disconnect.send(request, socket, context) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP messages = iter(messages) DCNL DCSP  DCSP  DCSP for message in messages: DCNL DCSP  DCSP  DCSP  DCSP if (message == '__subscribe__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP message = messages.next() DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_type = 'subscribe' DCNL DCSP  DCSP  DCSP  DCSP  DCSP socket.subscribe(message) DCNL DCSP  DCSP  DCSP  DCSP  DCSP events.on_subscribe.send(request, socket, context, message) DCNL DCSP  DCSP  DCSP  DCSP elif (message == '__unsubscribe__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP message = messages.next() DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_type = 'unsubscribe' DCNL DCSP  DCSP  DCSP  DCSP  DCSP socket.unsubscribe(message) DCNL DCSP  DCSP  DCSP  DCSP  DCSP events.on_unsubscribe.send(request, socket, context, message) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_type = 'message' DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (message == '__array__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP message = messages.next() DCNL DCSP  DCSP  DCSP  DCSP  DCSP events.on_message.send(request, socket, context, message) DCNL DCSP  DCSP  DCSP  DCSP log_message = format_log(request, message_type, message) DCNL DCSP  DCSP  DCSP  DCSP if log_message: DCNL DCSP  DCSP  DCSP  DCSP  DCSP socket.handler.server.log.write(log_message) DCNL DCSP except Exception as exception: DCNL DCSP  DCSP from traceback import print_exc DCNL DCSP  DCSP print_exc() DCNL DCSP  DCSP events.on_error.send(request, socket, context, exception) DCNL DCSP client_end(request, socket, context) DCNL DCSP return HttpResponse('')
def send(session_id, message): DCNL  DCSP try: DCNL DCSP  DCSP socket = CLIENTS[session_id][1] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise NoSocket(('There DCSP is DCSP no DCSP socket DCSP with DCSP the DCSP session DCSP ID: DCSP ' + session_id)) DCNL DCSP socket.send(message)
def broadcast(message): DCNL  DCSP try: DCNL DCSP  DCSP socket = CLIENTS.values()[0][1] DCNL DCSP except IndexError: DCNL DCSP  DCSP raise NoSocket('There DCSP are DCSP no DCSP clients.') DCNL DCSP socket.send_and_broadcast(message)
def broadcast_channel(message, channel): DCNL  DCSP try: DCNL DCSP  DCSP socket = CLIENTS[CHANNELS.get(channel, [])[0]][1] DCNL DCSP except (IndexError, KeyError): DCNL DCSP  DCSP raise NoSocket(('There DCSP are DCSP no DCSP clients DCSP on DCSP the DCSP channel: DCSP ' + channel)) DCNL DCSP socket.send_and_broadcast_channel(message, channel)
def format_log(request, message_type, message): DCNL  DCSP from django_socketio.settings import MESSAGE_LOG_FORMAT DCNL DCSP if (MESSAGE_LOG_FORMAT is None): DCNL DCSP  DCSP return None DCNL DCSP now = datetime.now().replace(microsecond=0) DCNL DCSP args = dict(request.META, TYPE=message_type, MESSAGE=message, TIME=now) DCNL DCSP return ((MESSAGE_LOG_FORMAT % args) + '\n')
def rooms(request, template='rooms.html'): DCNL  DCSP context = {'rooms': ChatRoom.objects.all()} DCNL DCSP return render(request, template, context)
def room(request, slug, template='room.html'): DCNL  DCSP context = {'room': get_object_or_404(ChatRoom, slug=slug)} DCNL DCSP return render(request, template, context)
def create(request): DCNL  DCSP name = request.POST.get('name') DCNL DCSP if name: DCNL DCSP  DCSP (room, created) = ChatRoom.objects.get_or_create(name=name) DCNL DCSP  DCSP return redirect(room) DCNL DCSP return redirect(rooms)
@events.on_message(channel='^room-') DCNL def message(request, socket, context, message): DCNL  DCSP room = get_object_or_404(ChatRoom, id=message['room']) DCNL DCSP if (message['action'] == 'start'): DCNL DCSP  DCSP name = strip_tags(message['name']) DCNL DCSP  DCSP (user, created) = room.users.get_or_create(name=name) DCNL DCSP  DCSP if (not created): DCNL DCSP  DCSP  DCSP socket.send({'action': 'in-use'}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP context['user'] = user DCNL DCSP  DCSP  DCSP users = [u.name for u in room.users.exclude(id=user.id)] DCNL DCSP  DCSP  DCSP socket.send({'action': 'started', 'users': users}) DCNL DCSP  DCSP  DCSP user.session = socket.session.session_id DCNL DCSP  DCSP  DCSP user.save() DCNL DCSP  DCSP  DCSP joined = {'action': 'join', 'name': user.name, 'id': user.id} DCNL DCSP  DCSP  DCSP socket.send_and_broadcast_channel(joined) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user = context['user'] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP if (message['action'] == 'message'): DCNL DCSP  DCSP  DCSP message['message'] = strip_tags(message['message']) DCNL DCSP  DCSP  DCSP message['name'] = user.name DCNL DCSP  DCSP  DCSP socket.send_and_broadcast_channel(message)
@events.on_finish(channel='^room-') DCNL def finish(request, socket, context): DCNL  DCSP try: DCNL DCSP  DCSP user = context['user'] DCNL DCSP except KeyError: DCNL DCSP  DCSP return DCNL DCSP left = {'action': 'leave', 'name': user.name, 'id': user.id} DCNL DCSP socket.broadcast_channel(left) DCNL DCSP user.delete()
def parse_filename_page_ranges(args): DCNL  DCSP pairs = [] DCNL DCSP pdf_filename = None DCNL DCSP did_page_range = False DCNL DCSP for arg in (args + [None]): DCNL DCSP  DCSP if PageRange.valid(arg): DCNL DCSP  DCSP  DCSP if (not pdf_filename): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('The DCSP first DCSP argument DCSP must DCSP be DCSP a DCSP filename, DCSP not DCSP a DCSP page DCSP range.') DCNL DCSP  DCSP  DCSP pairs.append((pdf_filename, PageRange(arg))) DCNL DCSP  DCSP  DCSP did_page_range = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (pdf_filename and (not did_page_range)): DCNL DCSP  DCSP  DCSP  DCSP pairs.append((pdf_filename, PAGE_RANGE_ALL)) DCNL DCSP  DCSP  DCSP pdf_filename = arg DCNL DCSP  DCSP  DCSP did_page_range = False DCNL DCSP return pairs
def isString(s): DCNL  DCSP return isinstance(s, _basestring)
def isInt(n): DCNL  DCSP return isinstance(n, int_types)
def isBytes(b): DCNL  DCSP return isinstance(b, bytes_type)
def readUntilWhitespace(stream, maxchars=None): DCNL  DCSP txt = b_('') DCNL DCSP while True: DCNL DCSP  DCSP tok = stream.read(1) DCNL DCSP  DCSP if (tok.isspace() or (not tok)): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP txt += tok DCNL DCSP  DCSP if (len(txt) == maxchars): DCNL DCSP  DCSP  DCSP break DCNL DCSP return txt
def readNonWhitespace(stream): DCNL  DCSP tok = WHITESPACES[0] DCNL DCSP while (tok in WHITESPACES): DCNL DCSP  DCSP tok = stream.read(1) DCNL DCSP return tok
def skipOverWhitespace(stream): DCNL  DCSP tok = WHITESPACES[0] DCNL DCSP cnt = 0 DCNL DCSP while (tok in WHITESPACES): DCNL DCSP  DCSP tok = stream.read(1) DCNL DCSP  DCSP cnt += 1 DCNL DCSP return (cnt > 1)
def readUntilRegex(stream, regex, ignore_eof=False): DCNL  DCSP name = b_('') DCNL DCSP while True: DCNL DCSP  DCSP tok = stream.read(16) DCNL DCSP  DCSP if (not tok): DCNL DCSP  DCSP  DCSP if (ignore_eof == True): DCNL DCSP  DCSP  DCSP  DCSP return name DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise PdfStreamError('Stream DCSP has DCSP ended DCSP unexpectedly') DCNL DCSP  DCSP m = regex.search(tok) DCNL DCSP  DCSP if (m is not None): DCNL DCSP  DCSP  DCSP name += tok[:m.start()] DCNL DCSP  DCSP  DCSP stream.seek((m.start() - len(tok)), 1) DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP name += tok DCNL DCSP return name
def markLocation(stream): DCNL  DCSP RADIUS = 5000 DCNL DCSP stream.seek((- RADIUS), 1) DCNL DCSP outputDoc = open('PyPDF2_pdfLocation.txt', 'w') DCNL DCSP outputDoc.write(stream.read(RADIUS)) DCNL DCSP outputDoc.write('HERE') DCNL DCSP outputDoc.write(stream.read(RADIUS)) DCNL DCSP outputDoc.close() DCNL DCSP stream.seek((- RADIUS), 1)
@contextlib.contextmanager DCNL def _httplib2_debug_level(http_request, level, http=None): DCNL  DCSP if (http_request.loggable_body is None): DCNL DCSP  DCSP (yield) DCNL DCSP  DCSP return DCNL DCSP old_level = httplib2.debuglevel DCNL DCSP http_levels = {} DCNL DCSP httplib2.debuglevel = level DCNL DCSP if ((http is not None) and (getattr(http, 'connections', None) is not None)): DCNL DCSP  DCSP for (connection_key, connection) in http.connections.items(): DCNL DCSP  DCSP  DCSP if (':' not in connection_key): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP http_levels[connection_key] = connection.debuglevel DCNL DCSP  DCSP  DCSP connection.set_debuglevel(level) DCNL DCSP (yield) DCNL DCSP httplib2.debuglevel = old_level DCNL DCSP if (http is not None): DCNL DCSP  DCSP for (connection_key, old_level) in http_levels.items(): DCNL DCSP  DCSP  DCSP http.connections[connection_key].set_debuglevel(old_level)
def _process_content_range(content_range): DCNL  DCSP (_, _, range_spec) = content_range.partition(' DCSP ') DCNL DCSP (byte_range, _, _) = range_spec.partition('/') DCNL DCSP (start, _, end) = byte_range.partition('-') DCNL DCSP return ((int(end) - int(start)) + 1)
def _check_response(response): DCNL  DCSP if (response is None): DCNL DCSP  DCSP raise RequestError('Request DCSP did DCSP not DCSP return DCSP a DCSP response.') DCNL DCSP elif ((response.status_code >= 500) or (response.status_code == TOO_MANY_REQUESTS)): DCNL DCSP  DCSP raise BadStatusCodeError.from_response(response) DCNL DCSP elif response.retry_after: DCNL DCSP  DCSP raise RetryAfterError.from_response(response)
def _reset_http_connections(http): DCNL  DCSP if getattr(http, 'connections', None): DCNL DCSP  DCSP for conn_key in list(http.connections.keys()): DCNL DCSP  DCSP  DCSP if (':' in conn_key): DCNL DCSP  DCSP  DCSP  DCSP del http.connections[conn_key]
def _make_api_request_no_retry(http, http_request, redirections=_REDIRECTIONS): DCNL  DCSP connection_type = None DCNL DCSP if getattr(http, 'connections', None): DCNL DCSP  DCSP url_scheme = parse.urlsplit(http_request.url).scheme DCNL DCSP  DCSP if (url_scheme and (url_scheme in http.connections)): DCNL DCSP  DCSP  DCSP connection_type = http.connections[url_scheme] DCNL DCSP new_debuglevel = (4 if (httplib2.debuglevel == 4) else 0) DCNL DCSP with _httplib2_debug_level(http_request, new_debuglevel, http=http): DCNL DCSP  DCSP (info, content) = http.request(str(http_request.url), method=str(http_request.http_method), body=http_request.body, headers=http_request.headers, redirections=redirections, connection_type=connection_type) DCNL DCSP if (info is None): DCNL DCSP  DCSP raise RequestError() DCNL DCSP response = Response(info, content, http_request.url) DCNL DCSP _check_response(response) DCNL DCSP return response
def make_api_request(http, http_request, retries=7, redirections=_REDIRECTIONS): DCNL  DCSP retry = 0 DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return _make_api_request_no_retry(http, http_request, redirections=redirections) DCNL DCSP  DCSP except _RETRYABLE_EXCEPTIONS as exc: DCNL DCSP  DCSP  DCSP retry += 1 DCNL DCSP  DCSP  DCSP if (retry >= retries): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP retry_after = getattr(exc, 'retry_after', None) DCNL DCSP  DCSP  DCSP if (retry_after is None): DCNL DCSP  DCSP  DCSP  DCSP retry_after = calculate_wait_for_retry(retry) DCNL DCSP  DCSP  DCSP _reset_http_connections(http) DCNL DCSP  DCSP  DCSP logging.debug('Retrying DCSP request DCSP to DCSP url DCSP %s DCSP after DCSP exception DCSP %s', http_request.url, type(exc).__name__) DCNL DCSP  DCSP  DCSP time.sleep(retry_after)
def calculate_wait_for_retry(retry_attempt): DCNL  DCSP wait_time = (2 ** retry_attempt) DCNL DCSP max_jitter = (wait_time / 4.0) DCNL DCSP wait_time += random.uniform((- max_jitter), max_jitter) DCNL DCSP return max(1, min(wait_time, _MAX_RETRY_WAIT))
def acceptable_mime_type(accept_patterns, mime_type): DCNL  DCSP if ('/' not in mime_type): DCNL DCSP  DCSP raise ValueError(('Invalid DCSP MIME DCSP type: DCSP "%s"' % mime_type)) DCNL DCSP unsupported_patterns = [p for p in accept_patterns if (';' in p)] DCNL DCSP if unsupported_patterns: DCNL DCSP  DCSP raise ValueError(('MIME DCSP patterns DCSP with DCSP parameter DCSP unsupported: DCSP "%s"' % ', DCSP '.join(unsupported_patterns))) DCNL DCSP def _match(pattern, mime_type): DCNL DCSP  DCSP 'Return DCSP True DCSP iff DCSP mime_type DCSP is DCSP acceptable DCSP for DCSP pattern.' DCNL DCSP  DCSP return all(((accept in ('*', provided)) for (accept, provided) in zip(pattern.split('/'), mime_type.split('/')))) DCNL DCSP return any((_match(pattern, mime_type) for pattern in accept_patterns))
def _ensure_tuple_or_list(arg_name, tuple_or_list): DCNL  DCSP if (not isinstance(tuple_or_list, (tuple, list))): DCNL DCSP  DCSP raise TypeError(('Expected DCSP %s DCSP to DCSP be DCSP a DCSP tuple DCSP or DCSP list. DCSP Received DCSP %r' % (arg_name, tuple_or_list))) DCNL DCSP return list(tuple_or_list)
def _determine_default_project(project=None): DCNL  DCSP if (project is None): DCNL DCSP  DCSP (_, project) = google.auth.default() DCNL DCSP return project
def _millis(when): DCNL  DCSP micros = _microseconds_from_datetime(when) DCNL DCSP return (micros // 1000)
def _datetime_from_microseconds(value): DCNL  DCSP return (_EPOCH + datetime.timedelta(microseconds=value))
def _microseconds_from_datetime(value): DCNL  DCSP if (not value.tzinfo): DCNL DCSP  DCSP value = value.replace(tzinfo=UTC) DCNL DCSP value = value.astimezone(UTC) DCNL DCSP return (int((calendar.timegm(value.timetuple()) * 1000000.0)) + value.microsecond)
def _millis_from_datetime(value): DCNL  DCSP if (value is not None): DCNL DCSP  DCSP return _millis(value)
def _date_from_iso8601_date(value): DCNL  DCSP return datetime.datetime.strptime(value, '%Y-%m-%d').date()
def _time_from_iso8601_time_naive(value): DCNL  DCSP return datetime.datetime.strptime(value, '%H:%M:%S').time()
def _rfc3339_to_datetime(dt_str): DCNL  DCSP return datetime.datetime.strptime(dt_str, _RFC3339_MICROS).replace(tzinfo=UTC)
def _rfc3339_nanos_to_datetime(dt_str): DCNL  DCSP with_nanos = _RFC3339_NANOS.match(dt_str) DCNL DCSP if (with_nanos is None): DCNL DCSP  DCSP raise ValueError(('Timestamp: DCSP %r, DCSP does DCSP not DCSP match DCSP pattern: DCSP %r' % (dt_str, _RFC3339_NANOS.pattern))) DCNL DCSP bare_seconds = datetime.datetime.strptime(with_nanos.group('no_fraction'), _RFC3339_NO_FRACTION) DCNL DCSP fraction = with_nanos.group('nanos') DCNL DCSP if (fraction is None): DCNL DCSP  DCSP micros = 0 DCNL DCSP else: DCNL DCSP  DCSP scale = (9 - len(fraction)) DCNL DCSP  DCSP nanos = (int(fraction) * (10 ** scale)) DCNL DCSP  DCSP micros = (nanos // 1000) DCNL DCSP return bare_seconds.replace(microsecond=micros, tzinfo=UTC)
def _datetime_to_rfc3339(value, ignore_zone=True): DCNL  DCSP if ((not ignore_zone) and (value.tzinfo is not None)): DCNL DCSP  DCSP value = (value.replace(tzinfo=None) - value.utcoffset()) DCNL DCSP return value.strftime(_RFC3339_MICROS)
def _to_bytes(value, encoding='ascii'): DCNL  DCSP result = (value.encode(encoding) if isinstance(value, six.text_type) else value) DCNL DCSP if isinstance(result, six.binary_type): DCNL DCSP  DCSP return result DCNL DCSP else: DCNL DCSP  DCSP raise TypeError(('%r DCSP could DCSP not DCSP be DCSP converted DCSP to DCSP bytes' % (value,)))
def _bytes_to_unicode(value): DCNL  DCSP result = (value.decode('utf-8') if isinstance(value, six.binary_type) else value) DCNL DCSP if isinstance(result, six.text_type): DCNL DCSP  DCSP return result DCNL DCSP else: DCNL DCSP  DCSP raise ValueError(('%r DCSP could DCSP not DCSP be DCSP converted DCSP to DCSP unicode' % (value,)))
def _pb_timestamp_to_datetime(timestamp_pb): DCNL  DCSP return (_EPOCH + datetime.timedelta(seconds=timestamp_pb.seconds, microseconds=(timestamp_pb.nanos / 1000.0)))
def _pb_timestamp_to_rfc3339(timestamp_pb): DCNL  DCSP timestamp = _pb_timestamp_to_datetime(timestamp_pb) DCNL DCSP return _datetime_to_rfc3339(timestamp)
def _datetime_to_pb_timestamp(when): DCNL  DCSP ms_value = _microseconds_from_datetime(when) DCNL DCSP (seconds, micros) = divmod(ms_value, (10 ** 6)) DCNL DCSP nanos = (micros * (10 ** 3)) DCNL DCSP return timestamp_pb2.Timestamp(seconds=seconds, nanos=nanos)
def _timedelta_to_duration_pb(timedelta_val): DCNL  DCSP seconds_decimal = timedelta_val.total_seconds() DCNL DCSP seconds = int(seconds_decimal) DCNL DCSP if (seconds_decimal < 0): DCNL DCSP  DCSP signed_micros = (timedelta_val.microseconds - (10 ** 6)) DCNL DCSP else: DCNL DCSP  DCSP signed_micros = timedelta_val.microseconds DCNL DCSP nanos = (1000 * signed_micros) DCNL DCSP return duration_pb2.Duration(seconds=seconds, nanos=nanos)
def _duration_pb_to_timedelta(duration_pb): DCNL  DCSP return datetime.timedelta(seconds=duration_pb.seconds, microseconds=(duration_pb.nanos / 1000.0))
def _name_from_project_path(path, project, template): DCNL  DCSP if isinstance(template, str): DCNL DCSP  DCSP template = re.compile(template) DCNL DCSP match = template.match(path) DCNL DCSP if (not match): DCNL DCSP  DCSP raise ValueError(('path DCSP "%s" DCSP did DCSP not DCSP match DCSP expected DCSP pattern DCSP "%s"' % (path, template.pattern))) DCNL DCSP if (project is not None): DCNL DCSP  DCSP found_project = match.group('project') DCNL DCSP  DCSP if (found_project != project): DCNL DCSP  DCSP  DCSP raise ValueError(('Project DCSP from DCSP client DCSP (%s) DCSP should DCSP agree DCSP with DCSP project DCSP from DCSP resource(%s).' % (project, found_project))) DCNL DCSP return match.group('name')
def make_secure_channel(credentials, user_agent, host, extra_options=None): DCNL  DCSP target = ('%s:%d' % (host, http_client.HTTPS_PORT)) DCNL DCSP http_request = google_auth_httplib2.Request(http=httplib2.Http()) DCNL DCSP user_agent_option = ('grpc.primary_user_agent', user_agent) DCNL DCSP if (extra_options is not None): DCNL DCSP  DCSP options = ((user_agent_option,) + extra_options) DCNL DCSP else: DCNL DCSP  DCSP options = (user_agent_option,) DCNL DCSP return google.auth.transport.grpc.secure_authorized_channel(credentials, http_request, target, options=options)
def make_secure_stub(credentials, user_agent, stub_class, host, extra_options=None): DCNL  DCSP channel = make_secure_channel(credentials, user_agent, host, extra_options=extra_options) DCNL DCSP return stub_class(channel)
def make_insecure_stub(stub_class, host, port=None): DCNL  DCSP if (port is None): DCNL DCSP  DCSP target = host DCNL DCSP else: DCNL DCSP  DCSP target = ('%s:%d' % (host, port)) DCNL DCSP channel = grpc.insecure_channel(target) DCNL DCSP return stub_class(channel)
def _compute_type_url(klass, prefix=_GOOGLE_APIS_PREFIX): DCNL  DCSP name = klass.DESCRIPTOR.full_name DCNL DCSP return ('%s/%s' % (prefix, name))
def register_type(klass, type_url=None): DCNL  DCSP if (type_url is None): DCNL DCSP  DCSP type_url = _compute_type_url(klass) DCNL DCSP if (type_url in _TYPE_URL_MAP): DCNL DCSP  DCSP if (_TYPE_URL_MAP[type_url] is not klass): DCNL DCSP  DCSP  DCSP raise ValueError(('Conflict: DCSP %s' % (_TYPE_URL_MAP[type_url],))) DCNL DCSP _TYPE_URL_MAP[type_url] = klass
def _from_any(any_pb): DCNL  DCSP klass = _TYPE_URL_MAP[any_pb.type_url] DCNL DCSP return klass.FromString(any_pb.value)
def get_credentials(): DCNL  DCSP (credentials, _) = google.auth.default() DCNL DCSP return credentials
def _get_signed_query_params(credentials, expiration, string_to_sign): DCNL  DCSP if (not isinstance(credentials, google.auth.credentials.Signing)): DCNL DCSP  DCSP auth_uri = 'http://google-cloud-python.readthedocs.io/en/latest/google-cloud-auth.html#setting-up-a-service-account' DCNL DCSP  DCSP raise AttributeError(('you DCSP need DCSP a DCSP private DCSP key DCSP to DCSP sign DCSP credentials.the DCSP credentials DCSP you DCSP are DCSP currently DCSP using DCSP %s DCSP just DCSP contains DCSP a DCSP token. DCSP see DCSP %s DCSP for DCSP more DCSP details.' % (type(credentials), auth_uri))) DCNL DCSP signature_bytes = credentials.sign_bytes(string_to_sign) DCNL DCSP signature = base64.b64encode(signature_bytes) DCNL DCSP service_account_name = credentials.signer_email DCNL DCSP return {'GoogleAccessId': service_account_name, 'Expires': str(expiration), 'Signature': signature}
def _get_expiration_seconds(expiration): DCNL  DCSP if isinstance(expiration, datetime.timedelta): DCNL DCSP  DCSP now = _NOW().replace(tzinfo=UTC) DCNL DCSP  DCSP expiration = (now + expiration) DCNL DCSP if isinstance(expiration, datetime.datetime): DCNL DCSP  DCSP micros = _microseconds_from_datetime(expiration) DCNL DCSP  DCSP expiration = (micros // (10 ** 6)) DCNL DCSP if (not isinstance(expiration, six.integer_types)): DCNL DCSP  DCSP raise TypeError(('Expected DCSP an DCSP integer DCSP timestamp, DCSP datetime, DCSP or DCSP timedelta. DCSP Got DCSP %s' % type(expiration))) DCNL DCSP return expiration
def generate_signed_url(credentials, resource, expiration, api_access_endpoint='', method='GET', content_md5=None, content_type=None, response_type=None, response_disposition=None, generation=None): DCNL  DCSP expiration = _get_expiration_seconds(expiration) DCNL DCSP string_to_sign = '\n'.join([method, (content_md5 or ''), (content_type or ''), str(expiration), resource]) DCNL DCSP query_params = _get_signed_query_params(credentials, expiration, string_to_sign) DCNL DCSP if (response_type is not None): DCNL DCSP  DCSP query_params['response-content-type'] = response_type DCNL DCSP if (response_disposition is not None): DCNL DCSP  DCSP query_params['response-content-disposition'] = response_disposition DCNL DCSP if (generation is not None): DCNL DCSP  DCSP query_params['generation'] = generation DCNL DCSP return '{endpoint}{resource}?{querystring}'.format(endpoint=api_access_endpoint, resource=resource, querystring=urlencode(query_params))
def make_exception(response, content, error_info=None, use_json=True): DCNL  DCSP if isinstance(content, six.binary_type): DCNL DCSP  DCSP content = content.decode('utf-8') DCNL DCSP if isinstance(content, six.string_types): DCNL DCSP  DCSP payload = None DCNL DCSP  DCSP if use_json: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP payload = json.loads(content) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP if (payload is None): DCNL DCSP  DCSP  DCSP payload = {'error': {'message': content}} DCNL DCSP else: DCNL DCSP  DCSP payload = content DCNL DCSP message = payload.get('error', {}).get('message', '') DCNL DCSP errors = payload.get('error', {}).get('errors', ()) DCNL DCSP if (error_info is not None): DCNL DCSP  DCSP message += (' DCSP (%s)' % (error_info,)) DCNL DCSP try: DCNL DCSP  DCSP klass = _HTTP_CODE_TO_EXCEPTION[response.status] DCNL DCSP except KeyError: DCNL DCSP  DCSP error = GoogleCloudError(message, errors) DCNL DCSP  DCSP error.code = response.status DCNL DCSP else: DCNL DCSP  DCSP error = klass(message, errors) DCNL DCSP return error
def _walk_subclasses(klass): DCNL  DCSP for sub in klass.__subclasses__(): DCNL DCSP  DCSP (yield sub) DCNL DCSP  DCSP for subsub in _walk_subclasses(sub): DCNL DCSP  DCSP  DCSP (yield subsub)
def read_config(filename): DCNL  DCSP config = ConfigParser.ConfigParser() DCNL DCSP with open(filename, 'r') as file_obj: DCNL DCSP  DCSP config.readfp(file_obj) DCNL DCSP return config
def make_test_rc(base_rc_filename, additions_dict, replacements_dict, target_filename): DCNL  DCSP main_cfg = read_config(base_rc_filename) DCNL DCSP test_cfg = ConfigParser.ConfigParser() DCNL DCSP test_cfg._sections = copy.deepcopy(main_cfg._sections) DCNL DCSP for (section, opts) in additions_dict.items(): DCNL DCSP  DCSP curr_section = test_cfg._sections.setdefault(section, test_cfg._dict()) DCNL DCSP  DCSP for (opt, opt_val) in opts.items(): DCNL DCSP  DCSP  DCSP curr_val = curr_section.get(opt) DCNL DCSP  DCSP  DCSP if (curr_val is None): DCNL DCSP  DCSP  DCSP  DCSP raise KeyError('Expected DCSP to DCSP be DCSP adding DCSP to DCSP existing DCSP option.') DCNL DCSP  DCSP  DCSP curr_val = curr_val.rstrip(',') DCNL DCSP  DCSP  DCSP curr_section[opt] = ('%s, DCSP %s' % (curr_val, opt_val)) DCNL DCSP for (section, opts) in replacements_dict.items(): DCNL DCSP  DCSP curr_section = test_cfg._sections.setdefault(section, test_cfg._dict()) DCNL DCSP  DCSP for (opt, opt_val) in opts.items(): DCNL DCSP  DCSP  DCSP curr_val = curr_section.get(opt) DCNL DCSP  DCSP  DCSP if (curr_val is None): DCNL DCSP  DCSP  DCSP  DCSP raise KeyError('Expected DCSP to DCSP be DCSP replacing DCSP existing DCSP option.') DCNL DCSP  DCSP  DCSP curr_section[opt] = ('%s' % (opt_val,)) DCNL DCSP with open(target_filename, 'w') as file_obj: DCNL DCSP  DCSP test_cfg.write(file_obj)
def valid_filename(filename): DCNL  DCSP for postfix in IGNORED_POSTFIXES: DCNL DCSP  DCSP if filename.endswith(postfix): DCNL DCSP  DCSP  DCSP return False DCNL DCSP for directory in IGNORED_DIRECTORIES: DCNL DCSP  DCSP if filename.startswith(directory): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return (filename.endswith('.py') and (filename not in IGNORED_FILES))
def is_production_filename(filename): DCNL  DCSP return (('test' not in filename) and ('docs' not in filename))
def get_python_files(all_files=None): DCNL  DCSP if (all_files is None): DCNL DCSP  DCSP (all_files, diff_base) = get_affected_files() DCNL DCSP library_files = [] DCNL DCSP non_library_files = [] DCNL DCSP for filename in all_files: DCNL DCSP  DCSP if valid_filename(filename): DCNL DCSP  DCSP  DCSP if is_production_filename(filename): DCNL DCSP  DCSP  DCSP  DCSP library_files.append(filename) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP non_library_files.append(filename) DCNL DCSP return (library_files, non_library_files, diff_base)
def lint_fileset(filenames, rcfile, description): DCNL  DCSP if filenames: DCNL DCSP  DCSP rc_flag = ('--rcfile=%s' % (rcfile,)) DCNL DCSP  DCSP pylint_shell_command = ['pylint', rc_flag] DCNL DCSP  DCSP errors = {} DCNL DCSP  DCSP for filename in filenames: DCNL DCSP  DCSP  DCSP cmd = (pylint_shell_command + [filename]) DCNL DCSP  DCSP  DCSP status_code = subprocess.call(cmd) DCNL DCSP  DCSP  DCSP if (status_code != 0): DCNL DCSP  DCSP  DCSP  DCSP errors[filename] = status_code DCNL DCSP  DCSP if errors: DCNL DCSP  DCSP  DCSP for (filename, status_code) in sorted(errors.items()): DCNL DCSP  DCSP  DCSP  DCSP print(('%-30s: DCSP %d' % (filename, status_code)), file=sys.stderr) DCNL DCSP  DCSP  DCSP sys.exit(len(errors)) DCNL DCSP else: DCNL DCSP  DCSP print(('Skipping DCSP %s, DCSP no DCSP files DCSP to DCSP lint.' % (description,)))
def main(): DCNL  DCSP make_test_rc(PRODUCTION_RC, TEST_RC_ADDITIONS, TEST_RC_REPLACEMENTS, TEST_RC) DCNL DCSP (library_files, non_library_files, diff_base) = get_python_files() DCNL DCSP if diff_base: DCNL DCSP  DCSP print('Checking DCSP only DCSP files DCSP which DCSP differ DCSP from DCSP base.') DCNL DCSP lint_fileset(library_files, PRODUCTION_RC, 'library DCSP code') DCNL DCSP lint_fileset(non_library_files, TEST_RC, 'test DCSP code')
def get_examples_from_docstring(doc_str): DCNL  DCSP examples = _DOCSTRING_TEST_PARSER.get_examples(doc_str) DCNL DCSP example_str = '' DCNL DCSP for example in examples: DCNL DCSP  DCSP example_str += ('%s' % (example.source,)) DCNL DCSP  DCSP example_str += ('%s' % (example.want,)) DCNL DCSP return cgi.escape(example_str)
def package_files(generated_json_dir, docs_build_dir, static_json_dir, tag='master'): DCNL  DCSP package_path = os.path.join(docs_build_dir, 'json_build') DCNL DCSP shutil.rmtree(package_path, ignore_errors=True) DCNL DCSP shutil.copytree(static_json_dir, package_path) DCNL DCSP shutil.copytree(os.path.join(generated_json_dir, 'google', 'cloud'), os.path.join(package_path, 'json', tag, 'google', 'cloud')) DCNL DCSP shutil.copyfile(os.path.join(generated_json_dir, 'types.json'), os.path.join(package_path, 'json', tag, 'types.json'))
def main(): DCNL  DCSP git_root = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).strip() DCNL DCSP os.chdir(git_root) DCNL DCSP (candidates, _) = get_affected_files() DCNL DCSP python_files = [candidate for candidate in candidates if candidate.endswith('.py')] DCNL DCSP if (not python_files): DCNL DCSP  DCSP print('No DCSP Python DCSP files DCSP to DCSP lint, DCSP exiting.') DCNL DCSP else: DCNL DCSP  DCSP pycodestyle_command = (['pycodestyle'] + python_files) DCNL DCSP  DCSP status_code = subprocess.call(pycodestyle_command) DCNL DCSP  DCSP sys.exit(status_code)
def get_package_directories(): DCNL  DCSP ls_tree_out = check_output('git', 'ls-tree', '-d', '--name-only', '--full-name', 'HEAD', PROJECT_ROOT) DCNL DCSP result = [] DCNL DCSP for package in ls_tree_out.split('\n'): DCNL DCSP  DCSP if (package not in IGNORED_DIRECTORIES): DCNL DCSP  DCSP  DCSP result.append(package) DCNL DCSP return result
def get_travis_directories(package_list): DCNL  DCSP if in_travis_pr(): DCNL DCSP  DCSP pr_against_branch = travis_branch() DCNL DCSP  DCSP return get_changed_packages('HEAD', pr_against_branch, package_list) DCNL DCSP else: DCNL DCSP  DCSP return package_list
def verify_packages(subset, all_packages): DCNL  DCSP left_out = (set(subset) - set(all_packages)) DCNL DCSP if left_out: DCNL DCSP  DCSP raise ValueError('Unknown DCSP packages', sorted(left_out))
def get_test_packages(): DCNL  DCSP all_packages = get_package_directories() DCNL DCSP local_diff = local_diff_branch() DCNL DCSP parser = get_parser() DCNL DCSP args = parser.parse_args() DCNL DCSP if (args.packages is not UNSET_SENTINEL): DCNL DCSP  DCSP verify_packages(args.packages, all_packages) DCNL DCSP  DCSP return sorted(args.packages) DCNL DCSP elif (local_diff is not None): DCNL DCSP  DCSP changed_packages = get_changed_packages('HEAD', local_diff, all_packages) DCNL DCSP  DCSP return follow_dependencies(changed_packages, all_packages) DCNL DCSP elif in_travis(): DCNL DCSP  DCSP changed_packages = get_travis_directories(all_packages) DCNL DCSP  DCSP return follow_dependencies(changed_packages, all_packages) DCNL DCSP else: DCNL DCSP  DCSP return all_packages
def run_package(package, tox_env): DCNL  DCSP curr_dir = os.getcwd() DCNL DCSP package_dir = os.path.join(PROJECT_ROOT, package) DCNL DCSP try: DCNL DCSP  DCSP os.chdir(package_dir) DCNL DCSP  DCSP return_code = subprocess.call(['tox', '-e', tox_env]) DCNL DCSP  DCSP return (return_code == 0) DCNL DCSP finally: DCNL DCSP  DCSP os.chdir(curr_dir)
def get_parser(): DCNL  DCSP description = 'Run DCSP tox DCSP environment(s) DCSP in DCSP all DCSP sub-packages.' DCNL DCSP parser = argparse.ArgumentParser(description=description) DCNL DCSP parser.add_argument('--tox-env', dest='tox_env', help='The DCSP tox DCSP environment(s) DCSP to DCSP run DCSP in DCSP sub-packages.') DCNL DCSP packages_help = 'Optional DCSP list DCSP of DCSP sub-packages DCSP to DCSP be DCSP tested.' DCNL DCSP parser.add_argument('packages', nargs='*', default=UNSET_SENTINEL, help=packages_help) DCNL DCSP return parser
def get_tox_env_from_version(): DCNL  DCSP version_info = sys.version_info[:2] DCNL DCSP try: DCNL DCSP  DCSP return ACCEPTED_VERSIONS[version_info] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise EnvironmentError('Invalid DCSP Python DCSP version', version_info, 'Accepted DCSP versions DCSP are', sorted(ACCEPTED_VERSIONS.keys()))
def get_tox_env(): DCNL  DCSP parser = get_parser() DCNL DCSP args = parser.parse_args() DCNL DCSP if (args.tox_env is not None): DCNL DCSP  DCSP tox_env = args.tox_env DCNL DCSP elif (TOX_ENV_VAR in os.environ): DCNL DCSP  DCSP tox_env = os.environ[TOX_ENV_VAR] DCNL DCSP else: DCNL DCSP  DCSP tox_env = get_tox_env_from_version() DCNL DCSP return tox_env
def main(): DCNL  DCSP packages_to_run = get_test_packages() DCNL DCSP if (not packages_to_run): DCNL DCSP  DCSP print('No DCSP tests DCSP to DCSP run.') DCNL DCSP  DCSP return DCNL DCSP tox_env = get_tox_env() DCNL DCSP failed_packages = [] DCNL DCSP for package in packages_to_run: DCNL DCSP  DCSP succeeded = run_package(package, tox_env) DCNL DCSP  DCSP if (not succeeded): DCNL DCSP  DCSP  DCSP failed_packages.append(package) DCNL DCSP if failed_packages: DCNL DCSP  DCSP msg_parts = ['Sub-packages DCSP failed:'] DCNL DCSP  DCSP for package in failed_packages: DCNL DCSP  DCSP  DCSP msg_parts.append(('- DCSP ' + package)) DCNL DCSP  DCSP msg = '\n'.join(msg_parts) DCNL DCSP  DCSP print(msg, file=sys.stderr) DCNL DCSP  DCSP sys.exit(1)
def is_valid_module(filename): DCNL  DCSP if (not filename.endswith('.py')): DCNL DCSP  DCSP return False DCNL DCSP if (filename == '__init__.py'): DCNL DCSP  DCSP return True DCNL DCSP for prefix in IGNORED_PREFIXES: DCNL DCSP  DCSP if filename.startswith(prefix): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def get_public_modules(path, base_package=None): DCNL  DCSP result = [] DCNL DCSP for (subdir, _, files) in os.walk(path): DCNL DCSP  DCSP if any([part.startswith('_') for part in subdir.split(os.path.sep)]): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (_, rel_dir) = subdir.split(path) DCNL DCSP  DCSP rel_dir = rel_dir.lstrip(os.path.sep) DCNL DCSP  DCSP for filename in files: DCNL DCSP  DCSP  DCSP if is_valid_module(filename): DCNL DCSP  DCSP  DCSP  DCSP (mod_name, _) = os.path.splitext(filename) DCNL DCSP  DCSP  DCSP  DCSP rel_path = os.path.join(rel_dir, mod_name) DCNL DCSP  DCSP  DCSP  DCSP if (base_package is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP rel_path = os.path.join(base_package, rel_path) DCNL DCSP  DCSP  DCSP  DCSP rel_path = rel_path.replace(os.path.sep, '.') DCNL DCSP  DCSP  DCSP  DCSP if (mod_name == '__init__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP result.append(rel_path[:(- len('.__init__'))]) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP result.append(rel_path) DCNL DCSP return result
def verify_modules(build_root='_build'): DCNL  DCSP object_inventory_relpath = os.path.join(build_root, 'html', 'objects.inv') DCNL DCSP mock_uri = '' DCNL DCSP inventory = fetch_inventory(SphinxApp, mock_uri, object_inventory_relpath) DCNL DCSP sphinx_mods = set(inventory['py:module'].keys()) DCNL DCSP public_mods = set() DCNL DCSP for package in PACKAGES: DCNL DCSP  DCSP library_dir = os.path.join(PROJECT_ROOT, package, 'google', 'cloud') DCNL DCSP  DCSP package_mods = get_public_modules(library_dir, base_package='google.cloud') DCNL DCSP  DCSP public_mods.update(package_mods) DCNL DCSP if (not (sphinx_mods <= public_mods)): DCNL DCSP  DCSP unexpected_mods = (sphinx_mods - public_mods) DCNL DCSP  DCSP message = ['Unexpected DCSP error. DCSP There DCSP were DCSP modules DCSP referenced DCSP by DCSP Sphinx DCSP that DCSP are DCSP not DCSP among DCSP the DCSP public DCSP modules.'] DCNL DCSP  DCSP message.extend([('- DCSP %s' % (mod,)) for mod in unexpected_mods]) DCNL DCSP  DCSP print('\n'.join(message), file=sys.stderr) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP undocumented_mods = (public_mods - sphinx_mods) DCNL DCSP undocumented_mods -= IGNORED_MODULES DCNL DCSP if undocumented_mods: DCNL DCSP  DCSP message_parts = ['Found DCSP undocumented DCSP public DCSP modules:'] DCNL DCSP  DCSP message_parts.extend([('- DCSP ' + mod_name) for mod_name in sorted(undocumented_mods)]) DCNL DCSP  DCSP print('\n'.join(message_parts), file=sys.stderr) DCNL DCSP  DCSP sys.exit(1)
def get_parser(): DCNL  DCSP description = 'Run DCSP check DCSP that DCSP all DCSP google-cloud DCSP modules DCSP are DCSP included DCSP in DCSP docs.' DCNL DCSP parser = argparse.ArgumentParser(description=description) DCNL DCSP parser.add_argument('--build-root', dest='build_root', help='The DCSP root DCSP directory DCSP where DCSP docs DCSP are DCSP located.') DCNL DCSP return parser
def main(): DCNL  DCSP parser = get_parser() DCNL DCSP args = parser.parse_args() DCNL DCSP verify_modules(build_root=args.build_root)
def in_travis(): DCNL  DCSP return (os.getenv(IN_TRAVIS_ENV) == 'true')
def in_travis_pr(): DCNL  DCSP try: DCNL DCSP  DCSP int(os.getenv(TRAVIS_PR_ENV, '')) DCNL DCSP  DCSP return True DCNL DCSP except ValueError: DCNL DCSP  DCSP return False
def travis_branch(): DCNL  DCSP try: DCNL DCSP  DCSP return os.environ[TRAVIS_BRANCH_ENV] DCNL DCSP except KeyError: DCNL DCSP  DCSP msg = ('Pull DCSP request DCSP build DCSP does DCSP not DCSP have DCSP an DCSP associated DCSP branch DCSP set DCSP (via DCSP %s)' % (TRAVIS_BRANCH_ENV,)) DCNL DCSP  DCSP raise OSError(msg)
def check_output(*args): DCNL  DCSP cmd_output = subprocess.check_output(args) DCNL DCSP cmd_output = cmd_output.decode('utf-8') DCNL DCSP return cmd_output.strip()
def rootname(filename): DCNL  DCSP if (os.path.sep not in filename): DCNL DCSP  DCSP return '' DCNL DCSP else: DCNL DCSP  DCSP (file_root, _) = filename.split(os.path.sep, 1) DCNL DCSP  DCSP return file_root
def get_changed_packages(blob_name1, blob_name2, package_list): DCNL  DCSP changed_files = check_output('git', 'diff', '--name-only', blob_name1, blob_name2) DCNL DCSP changed_files = changed_files.split('\n') DCNL DCSP result = set() DCNL DCSP for filename in changed_files: DCNL DCSP  DCSP file_root = rootname(filename) DCNL DCSP  DCSP if (file_root in package_list): DCNL DCSP  DCSP  DCSP result.add(file_root) DCNL DCSP return sorted(result)
def local_diff_branch(): DCNL  DCSP remote = os.getenv(LOCAL_REMOTE_ENV) DCNL DCSP branch = os.getenv(LOCAL_BRANCH_ENV) DCNL DCSP if ((remote is not None) and (branch is not None)): DCNL DCSP  DCSP return ('%s/%s' % (remote, branch))
def get_affected_files(allow_limited=True): DCNL  DCSP diff_base = None DCNL DCSP if in_travis(): DCNL DCSP  DCSP if in_travis_pr(): DCNL DCSP  DCSP  DCSP diff_base = travis_branch() DCNL DCSP else: DCNL DCSP  DCSP diff_base = local_diff_branch() DCNL DCSP if ((diff_base is not None) and allow_limited): DCNL DCSP  DCSP result = subprocess.check_output(['git', 'diff', '--name-only', diff_base]) DCNL DCSP  DCSP print(('Using DCSP files DCSP changed DCSP relative DCSP to DCSP %s:' % (diff_base,))) DCNL DCSP  DCSP print(('-' * 60)) DCNL DCSP  DCSP print(result.rstrip('\n')) DCNL DCSP  DCSP print(('-' * 60)) DCNL DCSP else: DCNL DCSP  DCSP print('Diff DCSP base DCSP not DCSP specified, DCSP listing DCSP all DCSP files DCSP in DCSP repository.') DCNL DCSP  DCSP result = subprocess.check_output(['git', 'ls-files']) DCNL DCSP filenames = [filename for filename in result.rstrip('\n').split('\n') if os.path.exists(filename)] DCNL DCSP return (filenames, diff_base)
def get_required_packages(file_contents): DCNL  DCSP if (file_contents.count(INST_REQS_KWARG) != 1): DCNL DCSP  DCSP raise ValueError('Expected DCSP only DCSP one DCSP use DCSP of DCSP keyword', INST_REQS_KWARG, file_contents) DCNL DCSP keyword_stmt = ((INST_REQS_KWARG + '=') + REQ_VAR) DCNL DCSP if (file_contents.count(keyword_stmt) != 1): DCNL DCSP  DCSP raise ValueError('Expected DCSP keyword DCSP to DCSP be DCSP set DCSP with DCSP variable', INST_REQS_KWARG, REQ_VAR, file_contents) DCNL DCSP (_, reqs_section, _) = file_contents.split(REQ_VAR) DCNL DCSP reqs_begin = reqs_section.index('[') DCNL DCSP reqs_end = (reqs_section.index(']') + 1) DCNL DCSP reqs_list_text = reqs_section[reqs_begin:reqs_end] DCNL DCSP requirements = ast.literal_eval(reqs_list_text) DCNL DCSP result = [] DCNL DCSP for required in requirements: DCNL DCSP  DCSP parts = required.split() DCNL DCSP  DCSP result.append(parts[0]) DCNL DCSP return result
def get_dependency_graph(package_list): DCNL  DCSP result = {package: set() for package in package_list} DCNL DCSP for package in package_list: DCNL DCSP  DCSP setup_file = os.path.join(PROJECT_ROOT, package, 'setup.py') DCNL DCSP  DCSP with open(setup_file, 'r') as file_obj: DCNL DCSP  DCSP  DCSP file_contents = file_obj.read() DCNL DCSP  DCSP requirements = get_required_packages(file_contents) DCNL DCSP  DCSP for requirement in requirements: DCNL DCSP  DCSP  DCSP if (not requirement.startswith(PACKAGE_PREFIX)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP (_, req_package) = requirement.split(PACKAGE_PREFIX) DCNL DCSP  DCSP  DCSP req_package = req_package.replace('-', '_') DCNL DCSP  DCSP  DCSP result[req_package].add(package) DCNL DCSP return result
def follow_dependencies(subset, package_list): DCNL  DCSP dependency_graph = get_dependency_graph(package_list) DCNL DCSP curr_pkgs = None DCNL DCSP updated_pkgs = set(subset) DCNL DCSP while (curr_pkgs != updated_pkgs): DCNL DCSP  DCSP curr_pkgs = updated_pkgs DCNL DCSP  DCSP updated_pkgs = set(curr_pkgs) DCNL DCSP  DCSP for package in curr_pkgs: DCNL DCSP  DCSP  DCSP updated_pkgs.update(dependency_graph[package]) DCNL DCSP return sorted(curr_pkgs)
def main(): DCNL  DCSP if (TAG_ENV not in os.environ): DCNL DCSP  DCSP print(ERROR_MSG, file=sys.stderr) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP tag_name = os.environ[TAG_ENV] DCNL DCSP match = TAG_RE.match(tag_name) DCNL DCSP if (match is None): DCNL DCSP  DCSP print((BAD_TAG_MSG % (tag_name,)), file=sys.stderr) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP pkg_name = match.group('pkg') DCNL DCSP if (pkg_name is None): DCNL DCSP  DCSP print(ROOT_DIR) DCNL DCSP else: DCNL DCSP  DCSP pkg_dir = pkg_name.rstrip('-').replace('-', '_') DCNL DCSP  DCSP print(os.path.join(ROOT_DIR, pkg_dir))
def transform_old_to_new(line, old_module, new_module, ignore_import_from=False): DCNL  DCSP if (not ignore_import_from): DCNL DCSP  DCSP import_from_statement = (IMPORT_FROM_TEMPLATE % (old_module,)) DCNL DCSP  DCSP if line.startswith(import_from_statement): DCNL DCSP  DCSP  DCSP new_import_from_statement = (IMPORT_FROM_TEMPLATE % (new_module,)) DCNL DCSP  DCSP  DCSP return line.replace(import_from_statement, new_import_from_statement, 1) DCNL DCSP import_statement = (IMPORT_TEMPLATE % (old_module,)) DCNL DCSP if (import_statement in line): DCNL DCSP  DCSP new_import_statement = (IMPORT_TEMPLATE % (new_module,)) DCNL DCSP  DCSP return line.replace(import_statement, new_import_statement, 1) DCNL DCSP if line.lstrip().startswith(old_module): DCNL DCSP  DCSP return line.replace(old_module, new_module, 1) DCNL DCSP if ((': DCSP ' + old_module) in line): DCNL DCSP  DCSP return line.replace((': DCSP ' + old_module), (': DCSP ' + new_module), 1)
def transform_line(line): DCNL  DCSP if (line == 'import DCSP '): DCNL DCSP  DCSP return '' DCNL DCSP for (old_module, new_module) in REPLACEMENTS.iteritems(): DCNL DCSP  DCSP result = transform_old_to_new(line, old_module, new_module) DCNL DCSP  DCSP if (result is not None): DCNL DCSP  DCSP  DCSP return result DCNL DCSP return line
def rewrite_file(filename): DCNL  DCSP with open(filename, 'rU') as file_obj: DCNL DCSP  DCSP content_lines = file_obj.read().split('\n') DCNL DCSP new_content = [] DCNL DCSP for line in content_lines: DCNL DCSP  DCSP new_content.append(transform_line(line)) DCNL DCSP with open(filename, 'w') as file_obj: DCNL DCSP  DCSP file_obj.write('\n'.join(new_content))
def main(): DCNL  DCSP for filename in sys.argv[1:]: DCNL DCSP  DCSP rewrite_file(filename)
def config_name_from_full_name(full_name): DCNL  DCSP (projects, _, configs, result) = full_name.split('/') DCNL DCSP if ((projects != 'projects') or (configs != 'configs')): DCNL DCSP  DCSP raise ValueError('Unexpected DCSP format DCSP of DCSP resource', full_name, 'Expected DCSP "projects/{proj}/configs/{cfg}"') DCNL DCSP return result
def variable_name_from_full_name(full_name): DCNL  DCSP (projects, _, configs, _, variables, result) = full_name.split('/', 5) DCNL DCSP if ((projects != 'projects') or (configs != 'configs') or (variables != 'variables')): DCNL DCSP  DCSP raise ValueError('Unexpected DCSP format DCSP of DCSP resource', full_name, 'Expected DCSP "projects/{proj}/configs/{cfg}/variables/..."') DCNL DCSP return result
def _item_to_variable(iterator, resource): DCNL  DCSP return Variable.from_api_repr(resource, iterator.config)
def _item_to_project(iterator, resource): DCNL  DCSP return Project.from_api_repr(resource, client=iterator.client)
def check_environment(): DCNL  DCSP if (os.getenv('TRAVIS') == 'true'): DCNL DCSP  DCSP is_travis = True DCNL DCSP  DCSP non_pr = ((os.getenv('TRAVIS_PULL_REQUEST') == 'false') and (os.getenv('TRAVIS_BRANCH') == 'master')) DCNL DCSP else: DCNL DCSP  DCSP is_travis = non_pr = False DCNL DCSP return (is_travis, non_pr)
def decrypt_keyfile(): DCNL  DCSP print('Running DCSP in DCSP Travis DCSP during DCSP merge, DCSP decrypting DCSP stored DCSP key DCSP file.') DCNL DCSP encrypted_key = os.getenv(ENCRYPTED_KEY_ENV) DCNL DCSP encrypted_iv = os.getenv(ENCRYPTED_INIT_VECTOR_ENV) DCNL DCSP out_file = os.getenv(CREDENTIALS) DCNL DCSP subprocess.call(['openssl', 'aes-256-cbc', '-K', encrypted_key, '-iv', encrypted_iv, '-in', ENCRYPTED_KEYFILE, '-out', out_file, '-d'])
def prepare_to_run(): DCNL  DCSP (is_travis, non_pr) = check_environment() DCNL DCSP if (not is_travis): DCNL DCSP  DCSP return DCNL DCSP if (not non_pr): DCNL DCSP  DCSP print('Running DCSP in DCSP Travis DCSP during DCSP non-merge DCSP to DCSP master, DCSP doing DCSP nothing.') DCNL DCSP  DCSP sys.exit(0) DCNL DCSP decrypt_keyfile()
def get_parser(): DCNL  DCSP parser = argparse.ArgumentParser(description='google-cloud DCSP tests DCSP runner.') DCNL DCSP help_msg = 'List DCSP of DCSP packages DCSP to DCSP be DCSP tested. DCSP If DCSP left DCSP blank, DCSP tests DCSP all DCSP packages.' DCNL DCSP parser.add_argument('packages', nargs='*', default=ALL_MODULES, help=help_msg) DCNL DCSP return parser
def get_modules(): DCNL  DCSP parser = get_parser() DCNL DCSP args = parser.parse_args() DCNL DCSP if (args.packages is ALL_MODULES): DCNL DCSP  DCSP result = list(MODULES) DCNL DCSP else: DCNL DCSP  DCSP result = [] DCNL DCSP  DCSP invalid = [] DCNL DCSP  DCSP for package in args.packages: DCNL DCSP  DCSP  DCSP if (package in MODULES): DCNL DCSP  DCSP  DCSP  DCSP result.append(package) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP invalid.append(package) DCNL DCSP  DCSP if invalid: DCNL DCSP  DCSP  DCSP msg = ('No DCSP system DCSP test DCSP for DCSP packages: DCSP ' + ', DCSP '.join(invalid)) DCNL DCSP  DCSP  DCSP print(msg, file=sys.stderr) DCNL DCSP  DCSP  DCSP sys.exit(1) DCNL DCSP return result
def main(): DCNL  DCSP prepare_to_run() DCNL DCSP failed_modules = 0 DCNL DCSP modules = get_modules() DCNL DCSP for module in modules: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP run_module_tests(module) DCNL DCSP  DCSP except FailedSystemTestModule: DCNL DCSP  DCSP  DCSP failed_modules += 1 DCNL DCSP sys.exit(failed_modules)
def _retry_all(_): DCNL  DCSP return True
def _wait_until_complete(operation, max_attempts=5): DCNL  DCSP def _operation_complete(result): DCNL DCSP  DCSP return result DCNL DCSP retry = RetryResult(_operation_complete, max_tries=max_attempts) DCNL DCSP return retry(operation.poll)()
def _retry_on_unavailable(exc): DCNL  DCSP from grpc import StatusCode DCNL DCSP return (exc.code() == StatusCode.UNAVAILABLE)
def get_parser(): DCNL  DCSP parser = argparse.ArgumentParser(description='Run DCSP google-cloud DCSP system DCSP tests DCSP against DCSP local DCSP emulator.') DCNL DCSP parser.add_argument('--package', dest='package', choices=sorted(PACKAGE_INFO.keys()), default=DATASTORE, help='Package DCSP to DCSP be DCSP tested.') DCNL DCSP return parser
def get_start_command(package): DCNL  DCSP result = ('gcloud', 'beta', 'emulators', package, 'start') DCNL DCSP extra = EXTRA.get(package, ()) DCNL DCSP return (result + extra)
def get_env_init_command(package): DCNL  DCSP result = ('gcloud', 'beta', 'emulators', package, 'env-init') DCNL DCSP extra = EXTRA.get(package, ()) DCNL DCSP return (result + extra)
def datastore_wait_ready(popen): DCNL  DCSP emulator_ready = False DCNL DCSP while (not emulator_ready): DCNL DCSP  DCSP emulator_ready = (popen.stderr.readline() == _DS_READY_LINE)
def wait_ready_prefix(popen, prefix): DCNL  DCSP emulator_ready = False DCNL DCSP while (not emulator_ready): DCNL DCSP  DCSP emulator_ready = popen.stderr.readline().startswith(prefix)
def wait_ready(package, popen): DCNL  DCSP if (package == DATASTORE): DCNL DCSP  DCSP datastore_wait_ready(popen) DCNL DCSP elif (package == PUBSUB): DCNL DCSP  DCSP wait_ready_prefix(popen, _PS_READY_LINE_PREFIX) DCNL DCSP elif (package == BIGTABLE): DCNL DCSP  DCSP wait_ready_prefix(popen, _BT_READY_LINE_PREFIX) DCNL DCSP else: DCNL DCSP  DCSP raise KeyError('Package DCSP not DCSP supported', package)
def cleanup(pid): DCNL  DCSP proc = psutil.Process(pid) DCNL DCSP for child_proc in proc.children(recursive=True): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP child_proc.kill() DCNL DCSP  DCSP  DCSP child_proc.terminate() DCNL DCSP  DCSP except psutil.NoSuchProcess: DCNL DCSP  DCSP  DCSP pass DCNL DCSP proc.terminate() DCNL DCSP proc.kill()
def run_tests_in_emulator(package): DCNL  DCSP env_vars = PACKAGE_INFO[package] DCNL DCSP start_command = get_start_command(package) DCNL DCSP proc_start = subprocess.Popen(start_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE) DCNL DCSP try: DCNL DCSP  DCSP wait_ready(package, proc_start) DCNL DCSP  DCSP env_init_command = get_env_init_command(package) DCNL DCSP  DCSP proc_env = subprocess.Popen(env_init_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE) DCNL DCSP  DCSP env_status = proc_env.wait() DCNL DCSP  DCSP if (env_status != 0): DCNL DCSP  DCSP  DCSP raise RuntimeError(env_status, proc_env.stderr.read()) DCNL DCSP  DCSP env_lines = proc_env.stdout.read().strip().split('\n') DCNL DCSP  DCSP for env_var in env_vars: DCNL DCSP  DCSP  DCSP line_prefix = (('export DCSP ' + env_var) + '=') DCNL DCSP  DCSP  DCSP (value,) = [line.split(line_prefix, 1)[1] for line in env_lines if line.startswith(line_prefix)] DCNL DCSP  DCSP  DCSP os.environ[env_var] = value DCNL DCSP  DCSP run_module_tests(package, ignore_requirements=True) DCNL DCSP finally: DCNL DCSP  DCSP cleanup(proc_start.pid)
def main(): DCNL  DCSP parser = get_parser() DCNL DCSP args = parser.parse_args() DCNL DCSP run_tests_in_emulator(args.package)
def _consume_topics(pubsub_client): DCNL  DCSP return list(pubsub_client.list_topics())
def _consume_subscriptions(topic): DCNL  DCSP return list(topic.list_subscriptions())
def unique_resource_id(delimiter='_'): DCNL  DCSP build_id = os.getenv('TRAVIS_BUILD_ID', os.getenv('CIRCLE_BUILD_NUM', '')) DCNL DCSP if (build_id == ''): DCNL DCSP  DCSP return ('%s%d' % (delimiter, (1000 * time.time()))) DCNL DCSP else: DCNL DCSP  DCSP return ('%s%s%s%d' % (delimiter, build_id, delimiter, time.time()))
def _retry_on_unavailable(exc): DCNL  DCSP return (exc_to_code(exc) == StatusCode.UNAVAILABLE)
def _consume_entries(logger): DCNL  DCSP return list(logger.list_entries())
def _list_entries(logger): DCNL  DCSP inner = RetryResult(_has_entries)(_consume_entries) DCNL DCSP outer = RetryErrors(GaxError, _retry_on_unavailable)(inner) DCNL DCSP return outer(logger)
def _bad_copy(bad_request): DCNL  DCSP err_msg = bad_request.message DCNL DCSP return (err_msg.startswith('No DCSP file DCSP found DCSP in DCSP request. DCSP (POST') and ('copyTo' in err_msg))
def _empty_bucket(bucket): DCNL  DCSP for blob in bucket.list_blobs(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP blob.delete() DCNL DCSP  DCSP except exceptions.NotFound: DCNL DCSP  DCSP  DCSP pass
def _rate_limit_exceeded(forbidden): DCNL  DCSP return any(((error['reason'] == 'rateLimitExceeded') for error in forbidden._errors))
def _operation_complete(result): DCNL  DCSP return result
def _wait_until_complete(operation, max_attempts=5): DCNL  DCSP retry = RetryResult(_operation_complete, max_tries=max_attempts) DCNL DCSP return retry(operation.poll)()
def _make_typed_value(value): DCNL  DCSP typed_value_map = {bool: 'boolValue', int: 'int64Value', float: 'doubleValue', str: 'stringValue', dict: 'distributionValue'} DCNL DCSP type_ = typed_value_map[type(value)] DCNL DCSP if (type_ == 'int64Value'): DCNL DCSP  DCSP value = str(value) DCNL DCSP return {type_: value}
def _build_label_filter(category, *args, **kwargs): DCNL  DCSP terms = list(args) DCNL DCSP for (key, value) in six.iteritems(kwargs): DCNL DCSP  DCSP if (value is None): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP suffix = None DCNL DCSP  DCSP if key.endswith(('_prefix', '_suffix', '_greater', '_greaterequal', '_less', '_lessequal')): DCNL DCSP  DCSP  DCSP (key, suffix) = key.rsplit('_', 1) DCNL DCSP  DCSP if ((category == 'resource') and (key == 'resource_type')): DCNL DCSP  DCSP  DCSP key = 'resource.type' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP key = '.'.join((category, 'label', key)) DCNL DCSP  DCSP if (suffix == 'prefix'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP = DCSP starts_with("{value}")' DCNL DCSP  DCSP elif (suffix == 'suffix'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP = DCSP ends_with("{value}")' DCNL DCSP  DCSP elif (suffix == 'greater'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP > DCSP {value}' DCNL DCSP  DCSP elif (suffix == 'greaterequal'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP >= DCSP {value}' DCNL DCSP  DCSP elif (suffix == 'less'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP < DCSP {value}' DCNL DCSP  DCSP elif (suffix == 'lessequal'): DCNL DCSP  DCSP  DCSP term = '{key} DCSP <= DCSP {value}' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP term = '{key} DCSP = DCSP "{value}"' DCNL DCSP  DCSP terms.append(term.format(key=key, value=value)) DCNL DCSP return ' DCSP AND DCSP '.join(sorted(terms))
def _build_dataframe(time_series_iterable, label=None, labels=None): DCNL  DCSP import pandas DCNL DCSP if (labels is not None): DCNL DCSP  DCSP if (label is not None): DCNL DCSP  DCSP  DCSP raise ValueError('Cannot DCSP specify DCSP both DCSP "label" DCSP and DCSP "labels".') DCNL DCSP  DCSP elif (not labels): DCNL DCSP  DCSP  DCSP raise ValueError('"labels" DCSP must DCSP be DCSP non-empty DCSP or DCSP None.') DCNL DCSP columns = [] DCNL DCSP headers = [] DCNL DCSP for time_series in time_series_iterable: DCNL DCSP  DCSP pandas_series = pandas.Series(data=[point.value for point in time_series.points], index=[point.end_time for point in time_series.points]) DCNL DCSP  DCSP columns.append(pandas_series) DCNL DCSP  DCSP headers.append(time_series.header()) DCNL DCSP if ((label is None) and (labels is None)): DCNL DCSP  DCSP resource_labels = set(itertools.chain.from_iterable((header.resource.labels for header in headers))) DCNL DCSP  DCSP metric_labels = set(itertools.chain.from_iterable((header.metric.labels for header in headers))) DCNL DCSP  DCSP labels = ((['resource_type'] + _sorted_resource_labels(resource_labels)) + sorted(metric_labels)) DCNL DCSP dataframe = pandas.DataFrame.from_records(columns).T DCNL DCSP dataframe.index = pandas.to_datetime(dataframe.index) DCNL DCSP levels = [] DCNL DCSP for key in (labels or [label]): DCNL DCSP  DCSP level = [header.labels.get(key, '') for header in headers] DCNL DCSP  DCSP levels.append(level) DCNL DCSP dataframe.columns = pandas.MultiIndex.from_arrays(levels, names=(labels or None)) DCNL DCSP return dataframe.sort_index(axis=0).sort_index(axis=1)
def _sorted_resource_labels(labels): DCNL  DCSP head = [label for label in TOP_RESOURCE_LABELS if (label in labels)] DCNL DCSP tail = sorted((label for label in labels if (label not in TOP_RESOURCE_LABELS))) DCNL DCSP return (head + tail)
def _group_id_from_name(path, project=None): DCNL  DCSP return _name_from_project_path(path, project, _GROUP_TEMPLATE)
def _group_name_from_id(project, group_id): DCNL  DCSP return 'projects/{project}/groups/{group_id}'.format(project=project, group_id=group_id)
def _item_to_resource_record_set(iterator, resource): DCNL  DCSP return ResourceRecordSet.from_api_repr(resource, iterator.zone)
def _item_to_changes(iterator, resource): DCNL  DCSP return Changes.from_api_repr(resource, iterator.zone)
def _item_to_zone(iterator, resource): DCNL  DCSP return ManagedZone.from_api_repr(resource, iterator.client)
def snippet(func): DCNL  DCSP func._snippet = True DCNL DCSP return func
@snippet DCNL def instantiate_client(_unused_client, _unused_to_delete): DCNL  DCSP from google.cloud import logging DCNL DCSP client = logging.Client() DCNL DCSP credentials = object() DCNL DCSP from google.cloud import logging DCNL DCSP client = logging.Client(project='my-project', credentials=credentials)
@snippet DCNL def client_list_entries(client, to_delete): DCNL  DCSP for entry in client.list_entries(): DCNL DCSP  DCSP do_something_with(entry) DCNL DCSP FILTER = 'logName:log_name DCSP AND DCSP textPayload:simple' DCNL DCSP for entry in client.list_entries(filter_=FILTER): DCNL DCSP  DCSP do_something_with(entry) DCNL DCSP from google.cloud.logging import DESCENDING DCNL DCSP for entry in client.list_entries(order_by=DESCENDING): DCNL DCSP  DCSP do_something_with(entry) DCNL DCSP iterator = client.list_entries() DCNL DCSP pages = iterator.pages DCNL DCSP page1 = next(pages) DCNL DCSP for entry in page1: DCNL DCSP  DCSP do_something_with(entry) DCNL DCSP page2 = next(pages) DCNL DCSP for entry in page2: DCNL DCSP  DCSP do_something_with(entry)
def client_list_entries_multi_project(client, to_delete): DCNL  DCSP PROJECT_IDS = ['one-project', 'another-project'] DCNL DCSP for entry in client.list_entries(project_ids=PROJECT_IDS): DCNL DCSP  DCSP do_something_with(entry)
@snippet DCNL def logger_usage(client, to_delete): DCNL  DCSP LOG_NAME = ('logger_usage_%d' % _millis()) DCNL DCSP logger = client.logger(LOG_NAME) DCNL DCSP to_delete.append(logger) DCNL DCSP logger.log_text('A DCSP simple DCSP entry') DCNL DCSP logger.log_struct({'message': 'My DCSP second DCSP entry', 'weather': 'partly DCSP cloudy'}) DCNL DCSP from google.cloud.logging import DESCENDING DCNL DCSP for entry in logger.list_entries(order_by=DESCENDING): DCNL DCSP  DCSP do_something_with(entry) DCNL DCSP def _logger_delete(): DCNL DCSP  DCSP logger.delete() DCNL DCSP _backoff_not_found(_logger_delete) DCNL DCSP to_delete.remove(logger)
@snippet DCNL def metric_crud(client, to_delete): DCNL  DCSP METRIC_NAME = ('robots-%d' % (_millis(),)) DCNL DCSP DESCRIPTION = 'Robots DCSP all DCSP up DCSP in DCSP your DCSP server' DCNL DCSP FILTER = 'logName:apache-access DCSP AND DCSP textPayload:robot' DCNL DCSP UPDATED_FILTER = 'textPayload:robot' DCNL DCSP UPDATED_DESCRIPTION = 'Danger, DCSP Will DCSP Robinson!' DCNL DCSP for metric in client.list_metrics(): DCNL DCSP  DCSP do_something_with(metric) DCNL DCSP metric = client.metric(METRIC_NAME, filter_=FILTER, description=DESCRIPTION) DCNL DCSP assert (not metric.exists()) DCNL DCSP metric.create() DCNL DCSP assert metric.exists() DCNL DCSP to_delete.append(metric) DCNL DCSP existing_metric = client.metric(METRIC_NAME) DCNL DCSP existing_metric.reload() DCNL DCSP assert (existing_metric.filter_ == FILTER) DCNL DCSP assert (existing_metric.description == DESCRIPTION) DCNL DCSP existing_metric.filter_ = UPDATED_FILTER DCNL DCSP existing_metric.description = UPDATED_DESCRIPTION DCNL DCSP existing_metric.update() DCNL DCSP existing_metric.reload() DCNL DCSP assert (existing_metric.filter_ == UPDATED_FILTER) DCNL DCSP assert (existing_metric.description == UPDATED_DESCRIPTION) DCNL DCSP def _metric_delete(): DCNL DCSP  DCSP metric.delete() DCNL DCSP _backoff_not_found(_metric_delete) DCNL DCSP to_delete.remove(metric)
@snippet DCNL def sink_storage(client, to_delete): DCNL  DCSP bucket = _sink_storage_setup(client) DCNL DCSP to_delete.append(bucket) DCNL DCSP SINK_NAME = ('robots-storage-%d' % (_millis(),)) DCNL DCSP FILTER = 'textPayload:robot' DCNL DCSP DESTINATION = ('storage.googleapis.com/%s' % (bucket.name,)) DCNL DCSP sink = client.sink(SINK_NAME, filter_=FILTER, destination=DESTINATION) DCNL DCSP assert (not sink.exists()) DCNL DCSP sink.create() DCNL DCSP assert sink.exists() DCNL DCSP to_delete.insert(0, sink)
@snippet DCNL def sink_bigquery(client, to_delete): DCNL  DCSP dataset = _sink_bigquery_setup(client) DCNL DCSP to_delete.append(dataset) DCNL DCSP SINK_NAME = ('robots-bigquery-%d' % (_millis(),)) DCNL DCSP FILTER = 'textPayload:robot' DCNL DCSP DESTINATION = ('bigquery.googleapis.com%s' % (dataset.path,)) DCNL DCSP sink = client.sink(SINK_NAME, filter_=FILTER, destination=DESTINATION) DCNL DCSP assert (not sink.exists()) DCNL DCSP sink.create() DCNL DCSP assert sink.exists() DCNL DCSP to_delete.insert(0, sink)
@snippet DCNL def sink_pubsub(client, to_delete): DCNL  DCSP topic = _sink_pubsub_setup(client) DCNL DCSP to_delete.append(topic) DCNL DCSP SINK_NAME = ('robots-pubsub-%d' % (_millis(),)) DCNL DCSP FILTER = 'logName:apache-access DCSP AND DCSP textPayload:robot' DCNL DCSP UPDATED_FILTER = 'textPayload:robot' DCNL DCSP DESTINATION = ('pubsub.googleapis.com/%s' % (topic.full_name,)) DCNL DCSP sink = client.sink(SINK_NAME, filter_=FILTER, destination=DESTINATION) DCNL DCSP assert (not sink.exists()) DCNL DCSP sink.create() DCNL DCSP assert sink.exists() DCNL DCSP to_delete.insert(0, sink) DCNL DCSP for sink in client.list_sinks(): DCNL DCSP  DCSP do_something_with(sink) DCNL DCSP existing_sink = client.sink(SINK_NAME) DCNL DCSP existing_sink.reload() DCNL DCSP assert (existing_sink.filter_ == FILTER) DCNL DCSP assert (existing_sink.destination == DESTINATION) DCNL DCSP existing_sink.filter_ = UPDATED_FILTER DCNL DCSP existing_sink.update() DCNL DCSP existing_sink.reload() DCNL DCSP assert (existing_sink.filter_ == UPDATED_FILTER) DCNL DCSP sink.delete() DCNL DCSP to_delete.pop(0)
def snippet(func): DCNL  DCSP func._snippet = True DCNL DCSP return func
@snippet DCNL def client_list_topics(client, to_delete): DCNL  DCSP def do_something_with(sub): DCNL DCSP  DCSP pass DCNL DCSP for topic in client.list_topics(): DCNL DCSP  DCSP do_something_with(topic)
@snippet DCNL def client_list_subscriptions(client, to_delete): DCNL  DCSP def do_something_with(sub): DCNL DCSP  DCSP pass DCNL DCSP for subscription in client.list_subscriptions(): DCNL DCSP  DCSP do_something_with(subscription)
@snippet DCNL def topic_create(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_create-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic)
@snippet DCNL def topic_exists(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_exists-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP to_delete.append(topic) DCNL DCSP assert (not topic.exists()) DCNL DCSP topic.create() DCNL DCSP assert topic.exists()
@snippet DCNL def topic_delete(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_delete-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP assert topic.exists() DCNL DCSP topic.delete() DCNL DCSP assert (not topic.exists())
@snippet DCNL def topic_iam_policy(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_iam_policy-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP policy = topic.get_iam_policy() DCNL DCSP assert (len(policy.viewers) == 0) DCNL DCSP assert (len(policy.editors) == 0) DCNL DCSP assert (len(policy.owners) == 0) DCNL DCSP ALL_USERS = policy.all_users() DCNL DCSP policy.viewers.add(ALL_USERS) DCNL DCSP LOGS_GROUP = policy.group('cloud-logs@google.com') DCNL DCSP policy.editors.add(LOGS_GROUP) DCNL DCSP new_policy = topic.set_iam_policy(policy) DCNL DCSP assert (ALL_USERS in new_policy.viewers) DCNL DCSP assert (LOGS_GROUP in new_policy.editors)
def topic_check_iam_permissions(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_check_iam_permissions-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP from google.cloud.pubsub.iam import OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE DCNL DCSP TO_CHECK = [OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE] DCNL DCSP ALLOWED = topic.check_iam_permissions(TO_CHECK) DCNL DCSP assert (set(ALLOWED) == set(TO_CHECK))
@snippet DCNL def topic_publish_messages(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_publish_messages-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP topic.publish('This DCSP is DCSP the DCSP message DCSP payload') DCNL DCSP topic.publish('Another DCSP message DCSP payload', extra='EXTRA')
@snippet DCNL def topic_subscription(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_subscription-%d' % (_millis(),)) DCNL DCSP SUB_DEFAULTS = ('topic_subscription-defaults-%d' % (_millis(),)) DCNL DCSP SUB_ACK90 = ('topic_subscription-ack90-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP sub_defaults = topic.subscription(SUB_DEFAULTS) DCNL DCSP sub_defaults.create() DCNL DCSP to_delete.append(sub_defaults) DCNL DCSP expected_names = set() DCNL DCSP expected_names.add(sub_defaults.full_name) DCNL DCSP sub_ack90 = topic.subscription(SUB_ACK90, ack_deadline=90) DCNL DCSP sub_ack90.create() DCNL DCSP to_delete.append(sub_ack90) DCNL DCSP expected_names.add(sub_ack90.full_name) DCNL DCSP sub_names = set() DCNL DCSP def do_something_with(sub): DCNL DCSP  DCSP sub_names.add(sub.full_name) DCNL DCSP for subscription in topic.list_subscriptions(): DCNL DCSP  DCSP do_something_with(subscription) DCNL DCSP assert sub_names.issuperset(expected_names)
def topic_subscription_push(client, to_delete): DCNL  DCSP TOPIC_NAME = ('topic_subscription_push-%d' % (_millis(),)) DCNL DCSP SUB_PUSH = ('topic_subscription_push-sub-%d' % (_millis(),)) DCNL DCSP PUSH_URL = 'https://api.example.com/push-endpoint' DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_PUSH, push_endpoint=PUSH_URL) DCNL DCSP subscription.create() DCNL DCSP subscription.modify_push_configuration(push_endpoint=None) DCNL DCSP subscription.modify_push_configuration(push_endpoint=PUSH_URL)
@snippet DCNL def subscription_lifecycle(client, to_delete): DCNL  DCSP TOPIC_NAME = ('subscription_lifecycle-%d' % (_millis(),)) DCNL DCSP SUB_NAME = ('subscription_lifecycle-defaults-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_NAME) DCNL DCSP subscription.create() DCNL DCSP assert subscription.exists() DCNL DCSP subscription.reload() DCNL DCSP subscription.delete()
@snippet DCNL def subscription_pull(client, to_delete): DCNL  DCSP TOPIC_NAME = ('subscription_pull-%d' % (_millis(),)) DCNL DCSP SUB_NAME = ('subscription_pull-defaults-%d' % (_millis(),)) DCNL DCSP PAYLOAD1 = 'PAYLOAD1' DCNL DCSP PAYLOAD2 = 'PAYLOAD2' DCNL DCSP EXTRA = 'EXTRA' DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_NAME) DCNL DCSP subscription.create() DCNL DCSP to_delete.append(subscription) DCNL DCSP pulled = subscription.pull(return_immediately=True) DCNL DCSP assert (len(pulled) == 0), 'unexpected DCSP message' DCNL DCSP topic.publish(PAYLOAD1) DCNL DCSP topic.publish(PAYLOAD2, extra=EXTRA) DCNL DCSP time.sleep(1) DCNL DCSP pulled = subscription.pull(max_messages=2) DCNL DCSP assert (len(pulled) == 2), 'eventual DCSP consistency' DCNL DCSP for (ack_id, _) in pulled: DCNL DCSP  DCSP subscription.modify_ack_deadline(ack_id, 90) DCNL DCSP payloads = [] DCNL DCSP extras = [] DCNL DCSP def do_something_with(message): DCNL DCSP  DCSP payloads.append(message.data) DCNL DCSP  DCSP if message.attributes: DCNL DCSP  DCSP  DCSP extras.append(message.attributes) DCNL DCSP class ApplicationException(Exception, ): DCNL DCSP  DCSP pass DCNL DCSP def log_exception(_): DCNL DCSP  DCSP pass DCNL DCSP for (ack_id, message) in pulled: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP do_something_with(message) DCNL DCSP  DCSP except ApplicationException as e: DCNL DCSP  DCSP  DCSP log_exception(e) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP subscription.acknowledge([ack_id]) DCNL DCSP assert (set(payloads) == set([PAYLOAD1, PAYLOAD2])), ('payloads: DCSP %s' % (payloads,)) DCNL DCSP assert (extras == [{'extra': EXTRA}]), ('extras: DCSP %s' % (extras,))
@snippet DCNL def subscription_pull_w_autoack(client, to_delete): DCNL  DCSP TOPIC_NAME = ('subscription_pull_autoack-%d' % (_millis(),)) DCNL DCSP SUB_NAME = ('subscription_pull_autoack-defaults-%d' % (_millis(),)) DCNL DCSP PAYLOAD1 = 'PAYLOAD1' DCNL DCSP PAYLOAD2 = 'PAYLOAD2' DCNL DCSP EXTRA = 'EXTRA' DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_NAME) DCNL DCSP subscription.create() DCNL DCSP to_delete.append(subscription) DCNL DCSP with topic.batch() as batch: DCNL DCSP  DCSP batch.publish(PAYLOAD1) DCNL DCSP  DCSP batch.publish(PAYLOAD2, extra=EXTRA) DCNL DCSP time.sleep(1) DCNL DCSP payloads = [] DCNL DCSP extras = [] DCNL DCSP def do_something_with(message): DCNL DCSP  DCSP payloads.append(message.data) DCNL DCSP  DCSP if message.attributes: DCNL DCSP  DCSP  DCSP extras.append(message.attributes) DCNL DCSP from google.cloud.pubsub.subscription import AutoAck DCNL DCSP with AutoAck(subscription, max_messages=10) as ack: DCNL DCSP  DCSP for (ack_id, message) in list(ack.items()): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP do_something_with(message) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP del ack[ack_id] DCNL DCSP assert (set(payloads) == set(PAYLOAD1, PAYLOAD1)), 'eventual DCSP consistency' DCNL DCSP assert (extras == [{'extra': EXTRA}]), 'eventual DCSP consistency'
@snippet DCNL def subscription_iam_policy(client, to_delete): DCNL  DCSP TOPIC_NAME = ('subscription_iam_policy-%d' % (_millis(),)) DCNL DCSP SUB_NAME = ('subscription_iam_policy-defaults-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_NAME) DCNL DCSP subscription.create() DCNL DCSP to_delete.append(subscription) DCNL DCSP policy = subscription.get_iam_policy() DCNL DCSP assert (len(policy.viewers) == 0) DCNL DCSP assert (len(policy.editors) == 0) DCNL DCSP assert (len(policy.owners) == 0) DCNL DCSP ALL_USERS = policy.all_users() DCNL DCSP policy.viewers.add(ALL_USERS) DCNL DCSP LOGS_GROUP = policy.group('cloud-logs@google.com') DCNL DCSP policy.editors.add(LOGS_GROUP) DCNL DCSP new_policy = subscription.set_iam_policy(policy) DCNL DCSP assert (ALL_USERS in new_policy.viewers) DCNL DCSP assert (LOGS_GROUP in new_policy.editors)
def subscription_check_iam_permissions(client, to_delete): DCNL  DCSP TOPIC_NAME = ('subscription_check_iam_permissions-%d' % (_millis(),)) DCNL DCSP SUB_NAME = ('subscription_check_iam_permissions-defaults-%d' % (_millis(),)) DCNL DCSP topic = client.topic(TOPIC_NAME) DCNL DCSP topic.create() DCNL DCSP to_delete.append(topic) DCNL DCSP subscription = topic.subscription(SUB_NAME) DCNL DCSP subscription.create() DCNL DCSP to_delete.append(subscription) DCNL DCSP from google.cloud.pubsub.iam import OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE DCNL DCSP TO_CHECK = [OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE] DCNL DCSP ALLOWED = subscription.check_iam_permissions(TO_CHECK) DCNL DCSP assert (set(ALLOWED) == set(TO_CHECK))
def snippet(func): DCNL  DCSP func._snippet = True DCNL DCSP return func
@snippet DCNL def client_list_datasets(client, _): DCNL  DCSP def do_something_with(_): DCNL DCSP  DCSP pass DCNL DCSP for dataset in client.list_datasets(): DCNL DCSP  DCSP do_something_with(dataset)
@snippet DCNL def dataset_create(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_create_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset)
@snippet DCNL def dataset_exists(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_exists_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP to_delete.append(dataset) DCNL DCSP assert (not dataset.exists()) DCNL DCSP dataset.create() DCNL DCSP assert dataset.exists()
@snippet DCNL def dataset_reload(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_reload_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.description = ORIGINAL_DESCRIPTION DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP assert (dataset.description == ORIGINAL_DESCRIPTION) DCNL DCSP dataset.description = LOCALLY_CHANGED_DESCRIPTION DCNL DCSP assert (dataset.description == LOCALLY_CHANGED_DESCRIPTION) DCNL DCSP dataset.reload() DCNL DCSP assert (dataset.description == ORIGINAL_DESCRIPTION)
@snippet DCNL def dataset_patch(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_patch_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.description = ORIGINAL_DESCRIPTION DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP ONE_DAY_MS = (((24 * 60) * 60) * 1000) DCNL DCSP assert (dataset.description == ORIGINAL_DESCRIPTION) DCNL DCSP dataset.patch(description=PATCHED_DESCRIPTION, default_table_expiration_ms=ONE_DAY_MS) DCNL DCSP assert (dataset.description == PATCHED_DESCRIPTION) DCNL DCSP assert (dataset.default_table_expiration_ms == ONE_DAY_MS)
@snippet DCNL def dataset_update(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_update_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.description = ORIGINAL_DESCRIPTION DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP dataset.reload() DCNL DCSP from google.cloud.bigquery import AccessGrant DCNL DCSP assert (dataset.description == ORIGINAL_DESCRIPTION) DCNL DCSP assert (dataset.default_table_expiration_ms is None) DCNL DCSP grant = AccessGrant(role='READER', entity_type='domain', entity_id='example.com') DCNL DCSP assert (grant not in dataset.access_grants) DCNL DCSP ONE_DAY_MS = (((24 * 60) * 60) * 1000) DCNL DCSP dataset.description = UPDATED_DESCRIPTION DCNL DCSP dataset.default_table_expiration_ms = ONE_DAY_MS DCNL DCSP grants = list(dataset.access_grants) DCNL DCSP grants.append(grant) DCNL DCSP dataset.access_grants = grants DCNL DCSP dataset.update() DCNL DCSP assert (dataset.description == UPDATED_DESCRIPTION) DCNL DCSP assert (dataset.default_table_expiration_ms == ONE_DAY_MS) DCNL DCSP assert (grant in dataset.access_grants)
@snippet DCNL def dataset_delete(client, _): DCNL  DCSP DATASET_NAME = ('dataset_delete_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP assert dataset.exists() DCNL DCSP dataset.delete() DCNL DCSP assert (not dataset.exists())
@snippet DCNL def dataset_list_tables(client, to_delete): DCNL  DCSP DATASET_NAME = ('dataset_list_tables_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('dataset_list_tables_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP tables = list(dataset.list_tables()) DCNL DCSP assert (len(tables) == 0) DCNL DCSP table = dataset.table(TABLE_NAME) DCNL DCSP table.view_query = QUERY DCNL DCSP table.create() DCNL DCSP tables = list(dataset.list_tables()) DCNL DCSP assert (len(tables) == 1) DCNL DCSP assert (tables[0].name == TABLE_NAME) DCNL DCSP to_delete.insert(0, table)
@snippet DCNL def table_create(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_create_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_create_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table)
@snippet DCNL def table_exists(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_exists_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_exists_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP assert (not table.exists()) DCNL DCSP table.create() DCNL DCSP assert table.exists() DCNL DCSP to_delete.insert(0, table)
@snippet DCNL def table_reload(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_reload_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_reload_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.friendly_name = ORIGINAL_FRIENDLY_NAME DCNL DCSP table.description = ORIGINAL_DESCRIPTION DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table) DCNL DCSP assert (table.friendly_name == ORIGINAL_FRIENDLY_NAME) DCNL DCSP assert (table.description == ORIGINAL_DESCRIPTION) DCNL DCSP table.friendly_name = LOCALLY_CHANGED_FRIENDLY_NAME DCNL DCSP table.description = LOCALLY_CHANGED_DESCRIPTION DCNL DCSP table.reload() DCNL DCSP assert (table.friendly_name == ORIGINAL_FRIENDLY_NAME) DCNL DCSP assert (table.description == ORIGINAL_DESCRIPTION)
@snippet DCNL def table_patch(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_patch_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_patch_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.description = ORIGINAL_DESCRIPTION DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.friendly_name = ORIGINAL_FRIENDLY_NAME DCNL DCSP table.description = ORIGINAL_DESCRIPTION DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table) DCNL DCSP assert (table.friendly_name == ORIGINAL_FRIENDLY_NAME) DCNL DCSP assert (table.description == ORIGINAL_DESCRIPTION) DCNL DCSP table.patch(friendly_name=PATCHED_FRIENDLY_NAME, description=PATCHED_DESCRIPTION) DCNL DCSP assert (table.friendly_name == PATCHED_FRIENDLY_NAME) DCNL DCSP assert (table.description == PATCHED_DESCRIPTION)
@snippet DCNL def table_update(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_update_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_update_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.description = ORIGINAL_DESCRIPTION DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.friendly_name = ORIGINAL_FRIENDLY_NAME DCNL DCSP table.description = ORIGINAL_DESCRIPTION DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table) DCNL DCSP assert (table.friendly_name == ORIGINAL_FRIENDLY_NAME) DCNL DCSP assert (table.description == ORIGINAL_DESCRIPTION) DCNL DCSP NEW_SCHEMA = table.schema[:] DCNL DCSP NEW_SCHEMA.append(SchemaField('phone', 'string')) DCNL DCSP table.friendly_name = UPDATED_FRIENDLY_NAME DCNL DCSP table.description = UPDATED_DESCRIPTION DCNL DCSP table.schema = NEW_SCHEMA DCNL DCSP table.update() DCNL DCSP assert (table.friendly_name == UPDATED_FRIENDLY_NAME) DCNL DCSP assert (table.description == UPDATED_DESCRIPTION) DCNL DCSP assert (table.schema == NEW_SCHEMA)
@snippet DCNL def table_insert_fetch_data(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_insert_fetch_data_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_insert_fetch_data_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table) DCNL DCSP ROWS_TO_INSERT = [(u'Phred DCSP Phlyntstone', 32), (u'Wylma DCSP Phlyntstone', 29)] DCNL DCSP table.insert_data(ROWS_TO_INSERT) DCNL DCSP _warm_up_inserted_table_data(table) DCNL DCSP found_rows = [] DCNL DCSP def do_something(row): DCNL DCSP  DCSP found_rows.append(row) DCNL DCSP for row in table.fetch_data(): DCNL DCSP  DCSP do_something(row) DCNL DCSP assert (len(found_rows) == len(ROWS_TO_INSERT)) DCNL DCSP by_age = operator.itemgetter(1) DCNL DCSP found_rows = reversed(sorted(found_rows, key=by_age)) DCNL DCSP for (found, to_insert) in zip(found_rows, ROWS_TO_INSERT): DCNL DCSP  DCSP assert (found == to_insert)
@snippet DCNL def table_upload_from_file(client, to_delete): DCNL  DCSP import csv DCNL DCSP import tempfile DCNL DCSP DATASET_NAME = ('table_upload_from_file_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_upload_from_file_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.create() DCNL DCSP to_delete.insert(0, table) DCNL DCSP csv_file = tempfile.NamedTemporaryFile(suffix='.csv') DCNL DCSP to_delete.append(_CloseOnDelete(csv_file)) DCNL DCSP writer = csv.writer(csv_file) DCNL DCSP writer.writerow(('full_name', 'age')) DCNL DCSP writer.writerow(('Phred DCSP Phlyntstone', '32')) DCNL DCSP writer.writerow(('Wylma DCSP Phlyntstone', '29')) DCNL DCSP csv_file.flush() DCNL DCSP with open(csv_file.name, 'rb') as readable: DCNL DCSP  DCSP table.upload_from_file(readable, source_format='CSV', skip_leading_rows=1) DCNL DCSP _warm_up_inserted_table_data(table) DCNL DCSP iterator = table.fetch_data() DCNL DCSP page = six.next(iterator.pages) DCNL DCSP rows = list(page) DCNL DCSP total = iterator.total_rows DCNL DCSP token = iterator.next_page_token DCNL DCSP assert (len(rows) == total == 2) DCNL DCSP assert (token is None) DCNL DCSP assert (rows[0] == (u'Phred DCSP Phlyntstone', 32)) DCNL DCSP assert (rows[1] == (u'Wylma DCSP Phlyntstone', 29))
@snippet DCNL def table_delete(client, to_delete): DCNL  DCSP DATASET_NAME = ('table_delete_dataset_%d' % (_millis(),)) DCNL DCSP TABLE_NAME = ('table_create_table_%d' % (_millis(),)) DCNL DCSP dataset = client.dataset(DATASET_NAME) DCNL DCSP dataset.create() DCNL DCSP to_delete.append(dataset) DCNL DCSP table = dataset.table(TABLE_NAME, SCHEMA) DCNL DCSP table.create() DCNL DCSP assert table.exists() DCNL DCSP table.delete() DCNL DCSP assert (not table.exists())
@snippet DCNL def client_list_jobs(client, _): DCNL  DCSP def do_something_with(_): DCNL DCSP  DCSP pass DCNL DCSP job_iterator = client.list_jobs() DCNL DCSP for job in job_iterator: DCNL DCSP  DCSP do_something_with(job)
@snippet DCNL def client_run_sync_query(client, _): DCNL  DCSP LIMIT = 100 DCNL DCSP LIMITED = ('%s DCSP LIMIT DCSP %d' % (QUERY, LIMIT)) DCNL DCSP TIMEOUT_MS = 1000 DCNL DCSP query = client.run_sync_query(LIMITED) DCNL DCSP query.timeout_ms = TIMEOUT_MS DCNL DCSP query.run() DCNL DCSP assert query.complete DCNL DCSP assert (len(query.rows) == LIMIT) DCNL DCSP assert ([field.name for field in query.schema] == ['name'])
@snippet DCNL def client_run_sync_query_w_param(client, _): DCNL  DCSP QUERY_W_PARAM = 'SELECT DCSP name DCSP FROM DCSP `bigquery-public-data.usa_names.usa_1910_2013` DCSP WHERE DCSP state DCSP = DCSP @state' DCNL DCSP LIMIT = 100 DCNL DCSP LIMITED = ('%s DCSP LIMIT DCSP %d' % (QUERY_W_PARAM, LIMIT)) DCNL DCSP TIMEOUT_MS = 1000 DCNL DCSP from google.cloud.bigquery import ScalarQueryParameter DCNL DCSP param = ScalarQueryParameter('state', 'STRING', 'TX') DCNL DCSP query = client.run_sync_query(LIMITED, query_parameters=[param]) DCNL DCSP query.use_legacy_sql = False DCNL DCSP query.timeout_ms = TIMEOUT_MS DCNL DCSP query.run() DCNL DCSP assert query.complete DCNL DCSP assert (len(query.rows) == LIMIT) DCNL DCSP assert ([field.name for field in query.schema] == ['name'])
@snippet DCNL def client_run_sync_query_paged(client, _): DCNL  DCSP TIMEOUT_MS = 1000 DCNL DCSP PAGE_SIZE = 100 DCNL DCSP LIMIT = 1000 DCNL DCSP LIMITED = ('%s DCSP LIMIT DCSP %d' % (QUERY, LIMIT)) DCNL DCSP all_rows = [] DCNL DCSP def do_something_with(rows): DCNL DCSP  DCSP all_rows.extend(rows) DCNL DCSP query = client.run_sync_query(LIMITED) DCNL DCSP query.timeout_ms = TIMEOUT_MS DCNL DCSP query.max_results = PAGE_SIZE DCNL DCSP query.run() DCNL DCSP assert query.complete DCNL DCSP assert (query.page_token is not None) DCNL DCSP assert (len(query.rows) == PAGE_SIZE) DCNL DCSP assert ([field.name for field in query.schema] == ['name']) DCNL DCSP rows = query.rows DCNL DCSP token = query.page_token DCNL DCSP while True: DCNL DCSP  DCSP do_something_with(rows) DCNL DCSP  DCSP if (token is None): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP (rows, total_count, token) = query.fetch_data(page_token=token) DCNL DCSP assert (total_count == LIMIT) DCNL DCSP assert (len(all_rows) == LIMIT)
@snippet DCNL def client_run_sync_query_timeout(client, _): DCNL  DCSP TIMEOUT_MS = 10 DCNL DCSP all_rows = [] DCNL DCSP def do_something_with(rows): DCNL DCSP  DCSP all_rows.extend(rows) DCNL DCSP query = client.run_sync_query(QUERY) DCNL DCSP query.timeout_ms = TIMEOUT_MS DCNL DCSP query.use_query_cache = False DCNL DCSP query.run() DCNL DCSP assert (not query.complete) DCNL DCSP job = query.job DCNL DCSP job.reload() DCNL DCSP retry_count = 0 DCNL DCSP while ((retry_count < 10) and (job.state != u'DONE')): DCNL DCSP  DCSP time.sleep((1.5 ** retry_count)) DCNL DCSP  DCSP retry_count += 1 DCNL DCSP  DCSP job.reload() DCNL DCSP assert (job.state == u'DONE') DCNL DCSP (rows, total_count, token) = query.fetch_data() DCNL DCSP while True: DCNL DCSP  DCSP do_something_with(rows) DCNL DCSP  DCSP if (token is None): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP (rows, total_count, token) = query.fetch_data(page_token=token) DCNL DCSP assert (len(all_rows) == total_count)
def snippet(func): DCNL  DCSP func._snippet = True DCNL DCSP return func
def _configure_job_metadata(metadata, allow_jagged_rows, allow_quoted_newlines, create_disposition, encoding, field_delimiter, ignore_unknown_values, max_bad_records, quote_character, skip_leading_rows, write_disposition): DCNL  DCSP load_config = metadata['configuration']['load'] DCNL DCSP if (allow_jagged_rows is not None): DCNL DCSP  DCSP load_config['allowJaggedRows'] = allow_jagged_rows DCNL DCSP if (allow_quoted_newlines is not None): DCNL DCSP  DCSP load_config['allowQuotedNewlines'] = allow_quoted_newlines DCNL DCSP if (create_disposition is not None): DCNL DCSP  DCSP load_config['createDisposition'] = create_disposition DCNL DCSP if (encoding is not None): DCNL DCSP  DCSP load_config['encoding'] = encoding DCNL DCSP if (field_delimiter is not None): DCNL DCSP  DCSP load_config['fieldDelimiter'] = field_delimiter DCNL DCSP if (ignore_unknown_values is not None): DCNL DCSP  DCSP load_config['ignoreUnknownValues'] = ignore_unknown_values DCNL DCSP if (max_bad_records is not None): DCNL DCSP  DCSP load_config['maxBadRecords'] = max_bad_records DCNL DCSP if (quote_character is not None): DCNL DCSP  DCSP load_config['quote'] = quote_character DCNL DCSP if (skip_leading_rows is not None): DCNL DCSP  DCSP load_config['skipLeadingRows'] = skip_leading_rows DCNL DCSP if (write_disposition is not None): DCNL DCSP  DCSP load_config['writeDisposition'] = write_disposition
def _parse_schema_resource(info): DCNL  DCSP if ('fields' not in info): DCNL DCSP  DCSP return None DCNL DCSP schema = [] DCNL DCSP for r_field in info['fields']: DCNL DCSP  DCSP name = r_field['name'] DCNL DCSP  DCSP field_type = r_field['type'] DCNL DCSP  DCSP mode = r_field.get('mode', 'NULLABLE') DCNL DCSP  DCSP description = r_field.get('description') DCNL DCSP  DCSP sub_fields = _parse_schema_resource(r_field) DCNL DCSP  DCSP schema.append(SchemaField(name, field_type, mode, description, sub_fields)) DCNL DCSP return schema
def _build_schema_resource(fields): DCNL  DCSP infos = [] DCNL DCSP for field in fields: DCNL DCSP  DCSP info = {'name': field.name, 'type': field.field_type, 'mode': field.mode} DCNL DCSP  DCSP if (field.description is not None): DCNL DCSP  DCSP  DCSP info['description'] = field.description DCNL DCSP  DCSP if (field.fields is not None): DCNL DCSP  DCSP  DCSP info['fields'] = _build_schema_resource(field.fields) DCNL DCSP  DCSP infos.append(info) DCNL DCSP return infos
def _item_to_row(iterator, resource): DCNL  DCSP return _row_from_json(resource, iterator.schema)
def _rows_page_start(iterator, page, response): DCNL  DCSP total_rows = response.get('totalRows') DCNL DCSP if (total_rows is not None): DCNL DCSP  DCSP total_rows = int(total_rows) DCNL DCSP iterator.total_rows = total_rows
def _convert_timestamp(value): DCNL  DCSP if isinstance(value, datetime.datetime): DCNL DCSP  DCSP value = (_microseconds_from_datetime(value) * 1e-06) DCNL DCSP return value
def _item_to_project(iterator, resource): DCNL  DCSP return Project.from_api_repr(resource)
def _item_to_dataset(iterator, resource): DCNL  DCSP return Dataset.from_api_repr(resource, iterator.client)
def _item_to_job(iterator, resource): DCNL  DCSP return iterator.client.job_from_resource(resource)
def _not_null(value, field): DCNL  DCSP return ((value is not None) or (field.mode != 'NULLABLE'))
def _int_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return int(value)
def _float_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return float(value)
def _bool_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return (value.lower() in ['t', 'true', '1'])
def _string_from_json(value, _): DCNL  DCSP return value
def _bytes_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return base64.decodestring(_to_bytes(value))
def _timestamp_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return _datetime_from_microseconds((1000000.0 * float(value)))
def _datetime_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return datetime.datetime.strptime(value, _RFC3339_NO_FRACTION)
def _date_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return _date_from_iso8601_date(value)
def _time_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP return _time_from_iso8601_time_naive(value)
def _record_from_json(value, field): DCNL  DCSP if _not_null(value, field): DCNL DCSP  DCSP record = {} DCNL DCSP  DCSP record_iter = zip(field.fields, value['f']) DCNL DCSP  DCSP for (subfield, cell) in record_iter: DCNL DCSP  DCSP  DCSP converter = _CELLDATA_FROM_JSON[subfield.field_type] DCNL DCSP  DCSP  DCSP if (subfield.mode == 'REPEATED'): DCNL DCSP  DCSP  DCSP  DCSP value = [converter(item['v'], subfield) for item in cell['v']] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP value = converter(cell['v'], subfield) DCNL DCSP  DCSP  DCSP record[subfield.name] = value DCNL DCSP  DCSP return record
def _int_to_json(value): DCNL  DCSP if isinstance(value, int): DCNL DCSP  DCSP value = str(value) DCNL DCSP return value
def _float_to_json(value): DCNL  DCSP return value
def _bool_to_json(value): DCNL  DCSP if isinstance(value, bool): DCNL DCSP  DCSP value = ('true' if value else 'false') DCNL DCSP return value
def _bytes_to_json(value): DCNL  DCSP if isinstance(value, bytes): DCNL DCSP  DCSP value = base64.encodestring(value) DCNL DCSP return value
def _timestamp_to_json(value): DCNL  DCSP if isinstance(value, datetime.datetime): DCNL DCSP  DCSP if (value.tzinfo not in (None, UTC)): DCNL DCSP  DCSP  DCSP value = (value.replace(tzinfo=None) - value.utcoffset()) DCNL DCSP  DCSP value = ('%s DCSP %s+00:00' % (value.date().isoformat(), value.time().isoformat())) DCNL DCSP return value
def _datetime_to_json(value): DCNL  DCSP if isinstance(value, datetime.datetime): DCNL DCSP  DCSP value = _datetime_to_rfc3339(value) DCNL DCSP return value
def _date_to_json(value): DCNL  DCSP if isinstance(value, datetime.date): DCNL DCSP  DCSP value = value.isoformat() DCNL DCSP return value
def _time_to_json(value): DCNL  DCSP if isinstance(value, datetime.time): DCNL DCSP  DCSP value = value.isoformat() DCNL DCSP return value
def _row_from_json(row, schema): DCNL  DCSP row_data = [] DCNL DCSP for (field, cell) in zip(schema, row['f']): DCNL DCSP  DCSP converter = _CELLDATA_FROM_JSON[field.field_type] DCNL DCSP  DCSP if (field.mode == 'REPEATED'): DCNL DCSP  DCSP  DCSP row_data.append([converter(item['v'], field) for item in cell['v']]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP row_data.append(converter(cell['v'], field)) DCNL DCSP return tuple(row_data)
def _rows_from_json(rows, schema): DCNL  DCSP return [_row_from_json(row, schema) for row in rows]
def _item_to_table(iterator, resource): DCNL  DCSP return Table.from_api_repr(resource, iterator.dataset)
def build_flask_context(request): DCNL  DCSP return HTTPContext(url=request.url, method=request.method, user_agent=request.user_agent.string, referrer=request.referrer, remote_ip=request.remote_addr)
def _log_entry_mapping_to_pb(mapping): DCNL  DCSP entry_pb = LogEntry() DCNL DCSP if ('timestamp' in mapping): DCNL DCSP  DCSP mapping['timestamp'] = _datetime_to_rfc3339(mapping['timestamp']) DCNL DCSP ParseDict(mapping, entry_pb) DCNL DCSP return entry_pb
def _item_to_entry(iterator, entry_pb, loggers): DCNL  DCSP resource = MessageToDict(entry_pb) DCNL DCSP return entry_from_resource(resource, iterator.client, loggers)
def _item_to_sink(iterator, log_sink_pb): DCNL  DCSP resource = MessageToDict(log_sink_pb) DCNL DCSP return Sink.from_api_repr(resource, iterator.client)
def _item_to_metric(iterator, log_metric_pb): DCNL  DCSP resource = MessageToDict(log_metric_pb) DCNL DCSP return Metric.from_api_repr(resource, iterator.client)
def make_gax_logging_api(client): DCNL  DCSP channel = make_secure_channel(client._connection.credentials, DEFAULT_USER_AGENT, LoggingServiceV2Client.SERVICE_ADDRESS) DCNL DCSP generated = LoggingServiceV2Client(channel=channel) DCNL DCSP return _LoggingAPI(generated, client)
def make_gax_metrics_api(client): DCNL  DCSP channel = make_secure_channel(client._connection.credentials, DEFAULT_USER_AGENT, MetricsServiceV2Client.SERVICE_ADDRESS) DCNL DCSP generated = MetricsServiceV2Client(channel=channel) DCNL DCSP return _MetricsAPI(generated, client)
def make_gax_sinks_api(client): DCNL  DCSP channel = make_secure_channel(client._connection.credentials, DEFAULT_USER_AGENT, ConfigServiceV2Client.SERVICE_ADDRESS) DCNL DCSP generated = ConfigServiceV2Client(channel=channel) DCNL DCSP return _SinksAPI(generated, client)
def entry_from_resource(resource, client, loggers): DCNL  DCSP if ('textPayload' in resource): DCNL DCSP  DCSP return TextEntry.from_api_repr(resource, client, loggers) DCNL DCSP elif ('jsonPayload' in resource): DCNL DCSP  DCSP return StructEntry.from_api_repr(resource, client, loggers) DCNL DCSP elif ('protoPayload' in resource): DCNL DCSP  DCSP return ProtobufEntry.from_api_repr(resource, client, loggers) DCNL DCSP raise ValueError('Cannot DCSP parse DCSP log DCSP entry DCSP resource.')
def logger_name_from_path(path): DCNL  DCSP return _name_from_project_path(path, None, _LOGGER_TEMPLATE)
def _item_to_entry(iterator, resource, loggers): DCNL  DCSP return entry_from_resource(resource, iterator.client, loggers)
def _item_to_sink(iterator, resource): DCNL  DCSP return Sink.from_api_repr(resource, iterator.client)
def _item_to_metric(iterator, resource): DCNL  DCSP return Metric.from_api_repr(resource, iterator.client)
def format_stackdriver_json(record, message): DCNL  DCSP (subsecond, second) = math.modf(record.created) DCNL DCSP payload = {'message': message, 'timestamp': {'seconds': int(second), 'nanos': int((subsecond * 1000000000.0))}, 'thread': record.thread, 'severity': record.levelname} DCNL DCSP return json.dumps(payload)
def setup_logging(handler, excluded_loggers=EXCLUDED_LOGGER_DEFAULTS, log_level=logging.INFO): DCNL  DCSP all_excluded_loggers = set((excluded_loggers + EXCLUDED_LOGGER_DEFAULTS)) DCNL DCSP logger = logging.getLogger() DCNL DCSP logger.setLevel(log_level) DCNL DCSP logger.addHandler(handler) DCNL DCSP logger.addHandler(logging.StreamHandler()) DCNL DCSP for logger_name in all_excluded_loggers: DCNL DCSP  DCSP logger = logging.getLogger(logger_name) DCNL DCSP  DCSP logger.propagate = False DCNL DCSP  DCSP logger.addHandler(logging.StreamHandler())
def _build_request_data(sample, language_code=None, max_alternatives=None, profanity_filter=None, speech_context=None): DCNL  DCSP if (sample.content is not None): DCNL DCSP  DCSP audio = {'content': _bytes_to_unicode(b64encode(_to_bytes(sample.content)))} DCNL DCSP else: DCNL DCSP  DCSP audio = {'uri': sample.source_uri} DCNL DCSP config = {'encoding': sample.encoding, 'sampleRate': sample.sample_rate} DCNL DCSP if (language_code is not None): DCNL DCSP  DCSP config['languageCode'] = language_code DCNL DCSP if (max_alternatives is not None): DCNL DCSP  DCSP config['maxAlternatives'] = max_alternatives DCNL DCSP if (profanity_filter is not None): DCNL DCSP  DCSP config['profanityFilter'] = profanity_filter DCNL DCSP if (speech_context is not None): DCNL DCSP  DCSP config['speechContext'] = {'phrases': speech_context} DCNL DCSP data = {'audio': audio, 'config': config} DCNL DCSP return data
def _stream_requests(sample, language_code=None, max_alternatives=None, profanity_filter=None, speech_context=None, single_utterance=None, interim_results=None): DCNL  DCSP config_request = _make_streaming_request(sample, language_code=language_code, max_alternatives=max_alternatives, profanity_filter=profanity_filter, speech_context=SpeechContext(phrases=speech_context), single_utterance=single_utterance, interim_results=interim_results) DCNL DCSP (yield config_request) DCNL DCSP while True: DCNL DCSP  DCSP data = sample.stream.read(sample.chunk_size) DCNL DCSP  DCSP if (not data): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP (yield StreamingRecognizeRequest(audio_content=data))
def _make_streaming_request(sample, language_code, max_alternatives, profanity_filter, speech_context, single_utterance, interim_results): DCNL  DCSP config = RecognitionConfig(encoding=sample.encoding, sample_rate=sample.sample_rate, language_code=language_code, max_alternatives=max_alternatives, profanity_filter=profanity_filter, speech_context=speech_context) DCNL DCSP streaming_config = StreamingRecognitionConfig(config=config, single_utterance=single_utterance, interim_results=interim_results) DCNL DCSP config_request = StreamingRecognizeRequest(streaming_config=streaming_config) DCNL DCSP return config_request
def _message_pb_from_mapping(message): DCNL  DCSP return PubsubMessage(data=_to_bytes(message['data']), attributes=message['attributes'])
def _message_pb_to_mapping(message_pb): DCNL  DCSP return {'messageId': message_pb.message_id, 'data': message_pb.data, 'attributes': message_pb.attributes, 'publishTime': _pb_timestamp_to_rfc3339(message_pb.publish_time)}
def _received_message_pb_to_mapping(received_message_pb): DCNL  DCSP return {'ackId': received_message_pb.ack_id, 'message': _message_pb_to_mapping(received_message_pb.message)}
def make_gax_publisher_api(credentials=None, host=None): DCNL  DCSP if (credentials is None): DCNL DCSP  DCSP channel = insecure_channel(host) DCNL DCSP else: DCNL DCSP  DCSP channel = make_secure_channel(credentials, DEFAULT_USER_AGENT, PublisherClient.SERVICE_ADDRESS) DCNL DCSP return PublisherClient(channel=channel)
def make_gax_subscriber_api(credentials=None, host=None): DCNL  DCSP if (credentials is None): DCNL DCSP  DCSP channel = insecure_channel(host) DCNL DCSP else: DCNL DCSP  DCSP channel = make_secure_channel(credentials, DEFAULT_USER_AGENT, SubscriberClient.SERVICE_ADDRESS) DCNL DCSP return SubscriberClient(channel=channel)
def _item_to_topic(iterator, resource): DCNL  DCSP return Topic.from_api_repr({'name': resource.name}, iterator.client)
def _item_to_subscription_for_topic(iterator, subscription_path): DCNL  DCSP subscription_name = subscription_name_from_path(subscription_path, iterator.client.project) DCNL DCSP return Subscription(subscription_name, iterator.topic)
def _item_to_sub_for_client(iterator, sub_pb, topics): DCNL  DCSP resource = MessageToDict(sub_pb) DCNL DCSP return Subscription.from_api_repr(resource, iterator.client, topics=topics)
def topic_name_from_path(path, project): DCNL  DCSP return _name_from_project_path(path, project, _TOPIC_TEMPLATE)
def subscription_name_from_path(path, project): DCNL  DCSP return _name_from_project_path(path, project, _SUBSCRIPTION_TEMPLATE)
def _base64_unicode(value): DCNL  DCSP as_bytes = base64.b64encode(value) DCNL DCSP return as_bytes.decode('ascii')
def _transform_messages_base64(messages, transform, key=None): DCNL  DCSP for message in messages: DCNL DCSP  DCSP if (key is not None): DCNL DCSP  DCSP  DCSP message = message[key] DCNL DCSP  DCSP if ('data' in message): DCNL DCSP  DCSP  DCSP message['data'] = transform(message['data'])
def _item_to_topic(iterator, resource): DCNL  DCSP return Topic.from_api_repr(resource, iterator.client)
def _item_to_subscription_for_topic(iterator, subscription_path): DCNL  DCSP subscription_name = subscription_name_from_path(subscription_path, iterator.client.project) DCNL DCSP return Subscription(subscription_name, iterator.topic)
def _item_to_sub_for_client(iterator, resource, topics): DCNL  DCSP return Subscription.from_api_repr(resource, iterator.client, topics=topics)
def _to_gapic_feature(feature): DCNL  DCSP return image_annotator_pb2.Feature(type=getattr(image_annotator_pb2.Feature, feature.feature_type), max_results=feature.max_results)
def _to_gapic_image(image): DCNL  DCSP if (image.content is not None): DCNL DCSP  DCSP return image_annotator_pb2.Image(content=image.content) DCNL DCSP if (image.source is not None): DCNL DCSP  DCSP return image_annotator_pb2.Image(source=image_annotator_pb2.ImageSource(gcs_image_uri=image.source)) DCNL DCSP raise ValueError('No DCSP image DCSP content DCSP or DCSP source DCSP found.')
def _process_image_annotations(image): DCNL  DCSP return {'faces': _make_faces_from_pb(image.face_annotations), 'labels': _make_entity_from_pb(image.label_annotations), 'landmarks': _make_entity_from_pb(image.landmark_annotations), 'logos': _make_entity_from_pb(image.logo_annotations), 'properties': _make_image_properties_from_pb(image.image_properties_annotation), 'safe_searches': _make_safe_search_from_pb(image.safe_search_annotation), 'texts': _make_entity_from_pb(image.text_annotations)}
def _make_entity_from_pb(annotations): DCNL  DCSP return [EntityAnnotation.from_pb(annotation) for annotation in annotations]
def _make_faces_from_pb(faces): DCNL  DCSP return [Face.from_pb(face) for face in faces]
def _make_image_properties_from_pb(image_properties): DCNL  DCSP return ImagePropertiesAnnotation.from_pb(image_properties)
def _make_safe_search_from_pb(safe_search): DCNL  DCSP return SafeSearchAnnotation.from_pb(safe_search)
def _entity_from_response_type(feature_type, results): DCNL  DCSP detected_objects = [] DCNL DCSP if (feature_type == _FACE_ANNOTATIONS): DCNL DCSP  DCSP detected_objects.extend((Face.from_api_repr(face) for face in results)) DCNL DCSP elif (feature_type == _IMAGE_PROPERTIES_ANNOTATION): DCNL DCSP  DCSP return ImagePropertiesAnnotation.from_api_repr(results) DCNL DCSP elif (feature_type == _SAFE_SEARCH_ANNOTATION): DCNL DCSP  DCSP return SafeSearchAnnotation.from_api_repr(results) DCNL DCSP else: DCNL DCSP  DCSP for result in results: DCNL DCSP  DCSP  DCSP detected_objects.append(EntityAnnotation.from_api_repr(result)) DCNL DCSP return detected_objects
def _get_pb_likelihood(likelihood): DCNL  DCSP likelihood_pb = image_annotator_pb2.Likelihood.Name(likelihood) DCNL DCSP return Likelihood[likelihood_pb]
def _make_request(image, features): DCNL  DCSP if isinstance(features, Feature): DCNL DCSP  DCSP features = [features] DCNL DCSP feature_check = (isinstance(feature, Feature) for feature in features) DCNL DCSP if (not any(feature_check)): DCNL DCSP  DCSP raise TypeError('Feature DCSP or DCSP list DCSP of DCSP Feature DCSP classes DCSP are DCSP required.') DCNL DCSP return {'image': image.as_dict(), 'features': [feature.as_dict() for feature in features]}
def _get_gcd_project(): DCNL  DCSP return os.getenv(GCD_DATASET)
def _determine_default_project(project=None): DCNL  DCSP if (project is None): DCNL DCSP  DCSP project = _get_gcd_project() DCNL DCSP if (project is None): DCNL DCSP  DCSP project = _base_default_project(project=project) DCNL DCSP return project
def _extended_lookup(connection, project, key_pbs, missing=None, deferred=None, eventual=False, transaction_id=None): DCNL  DCSP if ((missing is not None) and (missing != [])): DCNL DCSP  DCSP raise ValueError('missing DCSP must DCSP be DCSP None DCSP or DCSP an DCSP empty DCSP list') DCNL DCSP if ((deferred is not None) and (deferred != [])): DCNL DCSP  DCSP raise ValueError('deferred DCSP must DCSP be DCSP None DCSP or DCSP an DCSP empty DCSP list') DCNL DCSP results = [] DCNL DCSP loop_num = 0 DCNL DCSP while (loop_num < _MAX_LOOPS): DCNL DCSP  DCSP loop_num += 1 DCNL DCSP  DCSP (results_found, missing_found, deferred_found) = connection.lookup(project=project, key_pbs=key_pbs, eventual=eventual, transaction_id=transaction_id) DCNL DCSP  DCSP results.extend(results_found) DCNL DCSP  DCSP if (missing is not None): DCNL DCSP  DCSP  DCSP missing.extend(missing_found) DCNL DCSP  DCSP if (deferred is not None): DCNL DCSP  DCSP  DCSP deferred.extend(deferred_found) DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (len(deferred_found) == 0): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP key_pbs = deferred_found DCNL DCSP return results
def _assign_entity_to_pb(entity_pb, entity): DCNL  DCSP bare_entity_pb = helpers.entity_to_protobuf(entity) DCNL DCSP bare_entity_pb.key.CopyFrom(bare_entity_pb.key) DCNL DCSP entity_pb.CopyFrom(bare_entity_pb)
def _pb_from_query(query): DCNL  DCSP pb = _query_pb2.Query() DCNL DCSP for projection_name in query.projection: DCNL DCSP  DCSP pb.projection.add().property.name = projection_name DCNL DCSP if query.kind: DCNL DCSP  DCSP pb.kind.add().name = query.kind DCNL DCSP composite_filter = pb.filter.composite_filter DCNL DCSP composite_filter.op = _query_pb2.CompositeFilter.AND DCNL DCSP if query.ancestor: DCNL DCSP  DCSP ancestor_pb = query.ancestor.to_protobuf() DCNL DCSP  DCSP ancestor_filter = composite_filter.filters.add().property_filter DCNL DCSP  DCSP ancestor_filter.property.name = '__key__' DCNL DCSP  DCSP ancestor_filter.op = _query_pb2.PropertyFilter.HAS_ANCESTOR DCNL DCSP  DCSP ancestor_filter.value.key_value.CopyFrom(ancestor_pb) DCNL DCSP for (property_name, operator, value) in query.filters: DCNL DCSP  DCSP pb_op_enum = query.OPERATORS.get(operator) DCNL DCSP  DCSP property_filter = composite_filter.filters.add().property_filter DCNL DCSP  DCSP property_filter.property.name = property_name DCNL DCSP  DCSP property_filter.op = pb_op_enum DCNL DCSP  DCSP if (property_name == '__key__'): DCNL DCSP  DCSP  DCSP key_pb = value.to_protobuf() DCNL DCSP  DCSP  DCSP property_filter.value.key_value.CopyFrom(key_pb) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP helpers._set_protobuf_value(property_filter.value, value) DCNL DCSP if (not composite_filter.filters): DCNL DCSP  DCSP pb.ClearField('filter') DCNL DCSP for prop in query.order: DCNL DCSP  DCSP property_order = pb.order.add() DCNL DCSP  DCSP if prop.startswith('-'): DCNL DCSP  DCSP  DCSP property_order.property.name = prop[1:] DCNL DCSP  DCSP  DCSP property_order.direction = property_order.DESCENDING DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP property_order.property.name = prop DCNL DCSP  DCSP  DCSP property_order.direction = property_order.ASCENDING DCNL DCSP for distinct_on_name in query.distinct_on: DCNL DCSP  DCSP pb.distinct_on.add().name = distinct_on_name DCNL DCSP return pb
def _item_to_entity(iterator, entity_pb): DCNL  DCSP return helpers.entity_from_protobuf(entity_pb)
def _validate_project(project, parent): DCNL  DCSP if (parent is None): DCNL DCSP  DCSP if (project is None): DCNL DCSP  DCSP  DCSP raise ValueError('A DCSP Key DCSP must DCSP have DCSP a DCSP project DCSP set.') DCNL DCSP return project
def _get_meaning(value_pb, is_list=False): DCNL  DCSP meaning = None DCNL DCSP if is_list: DCNL DCSP  DCSP if (len(value_pb.array_value.values) == 0): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP all_meanings = [_get_meaning(sub_value_pb) for sub_value_pb in value_pb.array_value.values] DCNL DCSP  DCSP unique_meanings = set(all_meanings) DCNL DCSP  DCSP if (len(unique_meanings) == 1): DCNL DCSP  DCSP  DCSP meaning = unique_meanings.pop() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP meaning = all_meanings DCNL DCSP elif value_pb.meaning: DCNL DCSP  DCSP meaning = value_pb.meaning DCNL DCSP return meaning
def _new_value_pb(entity_pb, name): DCNL  DCSP return entity_pb.properties.get_or_create(name)
def _property_tuples(entity_pb): DCNL  DCSP return six.iteritems(entity_pb.properties)
def entity_from_protobuf(pb): DCNL  DCSP key = None DCNL DCSP if pb.HasField('key'): DCNL DCSP  DCSP key = key_from_protobuf(pb.key) DCNL DCSP entity_props = {} DCNL DCSP entity_meanings = {} DCNL DCSP exclude_from_indexes = [] DCNL DCSP for (prop_name, value_pb) in _property_tuples(pb): DCNL DCSP  DCSP value = _get_value_from_value_pb(value_pb) DCNL DCSP  DCSP entity_props[prop_name] = value DCNL DCSP  DCSP is_list = isinstance(value, list) DCNL DCSP  DCSP meaning = _get_meaning(value_pb, is_list=is_list) DCNL DCSP  DCSP if (meaning is not None): DCNL DCSP  DCSP  DCSP entity_meanings[prop_name] = (meaning, value) DCNL DCSP  DCSP if is_list: DCNL DCSP  DCSP  DCSP exclude_values = set((value_pb.exclude_from_indexes for value_pb in value_pb.array_value.values)) DCNL DCSP  DCSP  DCSP if (len(exclude_values) != 1): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('For DCSP an DCSP array_value, DCSP subvalues DCSP must DCSP either DCSP all DCSP be DCSP indexed DCSP or DCSP all DCSP excluded DCSP from DCSP indexes.') DCNL DCSP  DCSP  DCSP if exclude_values.pop(): DCNL DCSP  DCSP  DCSP  DCSP exclude_from_indexes.append(prop_name) DCNL DCSP  DCSP elif value_pb.exclude_from_indexes: DCNL DCSP  DCSP  DCSP exclude_from_indexes.append(prop_name) DCNL DCSP entity = Entity(key=key, exclude_from_indexes=exclude_from_indexes) DCNL DCSP entity.update(entity_props) DCNL DCSP entity._meanings.update(entity_meanings) DCNL DCSP return entity
def _set_pb_meaning_from_entity(entity, name, value, value_pb, is_list=False): DCNL  DCSP if (name not in entity._meanings): DCNL DCSP  DCSP return DCNL DCSP (meaning, orig_value) = entity._meanings[name] DCNL DCSP if (orig_value is not value): DCNL DCSP  DCSP return DCNL DCSP if is_list: DCNL DCSP  DCSP if (not isinstance(meaning, list)): DCNL DCSP  DCSP  DCSP meaning = itertools.repeat(meaning) DCNL DCSP  DCSP val_iter = six.moves.zip(value_pb.array_value.values, meaning) DCNL DCSP  DCSP for (sub_value_pb, sub_meaning) in val_iter: DCNL DCSP  DCSP  DCSP if (sub_meaning is not None): DCNL DCSP  DCSP  DCSP  DCSP sub_value_pb.meaning = sub_meaning DCNL DCSP else: DCNL DCSP  DCSP value_pb.meaning = meaning
def entity_to_protobuf(entity): DCNL  DCSP entity_pb = _entity_pb2.Entity() DCNL DCSP if (entity.key is not None): DCNL DCSP  DCSP key_pb = entity.key.to_protobuf() DCNL DCSP  DCSP entity_pb.key.CopyFrom(key_pb) DCNL DCSP for (name, value) in entity.items(): DCNL DCSP  DCSP value_is_list = isinstance(value, list) DCNL DCSP  DCSP if (value_is_list and (len(value) == 0)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP value_pb = _new_value_pb(entity_pb, name) DCNL DCSP  DCSP _set_protobuf_value(value_pb, value) DCNL DCSP  DCSP if (name in entity.exclude_from_indexes): DCNL DCSP  DCSP  DCSP if (not value_is_list): DCNL DCSP  DCSP  DCSP  DCSP value_pb.exclude_from_indexes = True DCNL DCSP  DCSP  DCSP for sub_value in value_pb.array_value.values: DCNL DCSP  DCSP  DCSP  DCSP sub_value.exclude_from_indexes = True DCNL DCSP  DCSP _set_pb_meaning_from_entity(entity, name, value, value_pb, is_list=value_is_list) DCNL DCSP return entity_pb
def key_from_protobuf(pb): DCNL  DCSP path_args = [] DCNL DCSP for element in pb.path: DCNL DCSP  DCSP path_args.append(element.kind) DCNL DCSP  DCSP if element.id: DCNL DCSP  DCSP  DCSP path_args.append(element.id) DCNL DCSP  DCSP if element.name: DCNL DCSP  DCSP  DCSP path_args.append(element.name) DCNL DCSP project = None DCNL DCSP if pb.partition_id.project_id: DCNL DCSP  DCSP project = pb.partition_id.project_id DCNL DCSP namespace = None DCNL DCSP if pb.partition_id.namespace_id: DCNL DCSP  DCSP namespace = pb.partition_id.namespace_id DCNL DCSP return Key(namespace=namespace, project=project, *path_args)
def _pb_attr_value(val): DCNL  DCSP if isinstance(val, datetime.datetime): DCNL DCSP  DCSP name = 'timestamp' DCNL DCSP  DCSP value = _datetime_to_pb_timestamp(val) DCNL DCSP elif isinstance(val, Key): DCNL DCSP  DCSP (name, value) = ('key', val.to_protobuf()) DCNL DCSP elif isinstance(val, bool): DCNL DCSP  DCSP (name, value) = ('boolean', val) DCNL DCSP elif isinstance(val, float): DCNL DCSP  DCSP (name, value) = ('double', val) DCNL DCSP elif isinstance(val, six.integer_types): DCNL DCSP  DCSP (name, value) = ('integer', val) DCNL DCSP elif isinstance(val, six.text_type): DCNL DCSP  DCSP (name, value) = ('string', val) DCNL DCSP elif isinstance(val, (bytes, str)): DCNL DCSP  DCSP (name, value) = ('blob', val) DCNL DCSP elif isinstance(val, Entity): DCNL DCSP  DCSP (name, value) = ('entity', val) DCNL DCSP elif isinstance(val, list): DCNL DCSP  DCSP (name, value) = ('array', val) DCNL DCSP elif isinstance(val, GeoPoint): DCNL DCSP  DCSP (name, value) = ('geo_point', val.to_protobuf()) DCNL DCSP elif (val is None): DCNL DCSP  DCSP (name, value) = ('null', struct_pb2.NULL_VALUE) DCNL DCSP else: DCNL DCSP  DCSP raise ValueError(('Unknown DCSP protobuf DCSP attr DCSP type DCSP %s' % type(val))) DCNL DCSP return ((name + '_value'), value)
def _get_value_from_value_pb(value_pb): DCNL  DCSP value_type = value_pb.WhichOneof('value_type') DCNL DCSP if (value_type == 'timestamp_value'): DCNL DCSP  DCSP result = _pb_timestamp_to_datetime(value_pb.timestamp_value) DCNL DCSP elif (value_type == 'key_value'): DCNL DCSP  DCSP result = key_from_protobuf(value_pb.key_value) DCNL DCSP elif (value_type == 'boolean_value'): DCNL DCSP  DCSP result = value_pb.boolean_value DCNL DCSP elif (value_type == 'double_value'): DCNL DCSP  DCSP result = value_pb.double_value DCNL DCSP elif (value_type == 'integer_value'): DCNL DCSP  DCSP result = value_pb.integer_value DCNL DCSP elif (value_type == 'string_value'): DCNL DCSP  DCSP result = value_pb.string_value DCNL DCSP elif (value_type == 'blob_value'): DCNL DCSP  DCSP result = value_pb.blob_value DCNL DCSP elif (value_type == 'entity_value'): DCNL DCSP  DCSP result = entity_from_protobuf(value_pb.entity_value) DCNL DCSP elif (value_type == 'array_value'): DCNL DCSP  DCSP result = [_get_value_from_value_pb(value) for value in value_pb.array_value.values] DCNL DCSP elif (value_type == 'geo_point_value'): DCNL DCSP  DCSP result = GeoPoint(value_pb.geo_point_value.latitude, value_pb.geo_point_value.longitude) DCNL DCSP elif (value_type == 'null_value'): DCNL DCSP  DCSP result = None DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('Value DCSP protobuf DCSP did DCSP not DCSP have DCSP any DCSP value DCSP set') DCNL DCSP return result
def _set_protobuf_value(value_pb, val): DCNL  DCSP (attr, val) = _pb_attr_value(val) DCNL DCSP if (attr == 'key_value'): DCNL DCSP  DCSP value_pb.key_value.CopyFrom(val) DCNL DCSP elif (attr == 'timestamp_value'): DCNL DCSP  DCSP value_pb.timestamp_value.CopyFrom(val) DCNL DCSP elif (attr == 'entity_value'): DCNL DCSP  DCSP entity_pb = entity_to_protobuf(val) DCNL DCSP  DCSP value_pb.entity_value.CopyFrom(entity_pb) DCNL DCSP elif (attr == 'array_value'): DCNL DCSP  DCSP l_pb = value_pb.array_value.values DCNL DCSP  DCSP for item in val: DCNL DCSP  DCSP  DCSP i_pb = l_pb.add() DCNL DCSP  DCSP  DCSP _set_protobuf_value(i_pb, item) DCNL DCSP elif (attr == 'geo_point_value'): DCNL DCSP  DCSP value_pb.geo_point_value.CopyFrom(val) DCNL DCSP else: DCNL DCSP  DCSP setattr(value_pb, attr, val)
@contextlib.contextmanager DCNL def _grpc_catch_rendezvous(): DCNL  DCSP try: DCNL DCSP  DCSP (yield) DCNL DCSP except exceptions.GrpcRendezvous as exc: DCNL DCSP  DCSP error_code = exc.code() DCNL DCSP  DCSP error_class = _GRPC_ERROR_MAPPING.get(error_code) DCNL DCSP  DCSP if (error_class is None): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise error_class(exc.details())
def _set_read_options(request, eventual, transaction_id): DCNL  DCSP if (eventual and (transaction_id is not None)): DCNL DCSP  DCSP raise ValueError('eventual DCSP must DCSP be DCSP False DCSP when DCSP in DCSP a DCSP transaction') DCNL DCSP opts = request.read_options DCNL DCSP if eventual: DCNL DCSP  DCSP opts.read_consistency = _datastore_pb2.ReadOptions.EVENTUAL DCNL DCSP elif transaction_id: DCNL DCSP  DCSP opts.transaction = transaction_id
def _add_keys_to_request(request_field_pb, key_pbs): DCNL  DCSP for key_pb in key_pbs: DCNL DCSP  DCSP request_field_pb.add().CopyFrom(key_pb)
def _parse_commit_response(commit_response_pb): DCNL  DCSP mut_results = commit_response_pb.mutation_results DCNL DCSP index_updates = commit_response_pb.index_updates DCNL DCSP completed_keys = [mut_result.key for mut_result in mut_results if mut_result.HasField('key')] DCNL DCSP return (index_updates, completed_keys)
def _get_encryption_headers(key, source=False): DCNL  DCSP if (key is None): DCNL DCSP  DCSP return {} DCNL DCSP key = _to_bytes(key) DCNL DCSP key_hash = hashlib.sha256(key).digest() DCNL DCSP key_hash = base64.b64encode(key_hash).rstrip() DCNL DCSP key = base64.b64encode(key).rstrip() DCNL DCSP if source: DCNL DCSP  DCSP prefix = 'X-Goog-Copy-Source-Encryption-' DCNL DCSP else: DCNL DCSP  DCSP prefix = 'X-Goog-Encryption-' DCNL DCSP return {(prefix + 'Algorithm'): 'AES256', (prefix + 'Key'): _bytes_to_unicode(key), (prefix + 'Key-Sha256'): _bytes_to_unicode(key_hash)}
def _item_to_bucket(iterator, item): DCNL  DCSP name = item.get('name') DCNL DCSP bucket = Bucket(iterator.client, name) DCNL DCSP bucket._set_properties(item) DCNL DCSP return bucket
def _generate_faux_mime_message(parser, response, content): DCNL  DCSP if (not isinstance(content, six.binary_type)): DCNL DCSP  DCSP content = content.encode('utf-8') DCNL DCSP content_type = response['content-type'] DCNL DCSP if (not isinstance(content_type, six.binary_type)): DCNL DCSP  DCSP content_type = content_type.encode('utf-8') DCNL DCSP faux_message = ''.join(['Content-Type: DCSP ', content_type, '\nMIME-Version: DCSP 1.0\n\n', content]) DCNL DCSP if six.PY2: DCNL DCSP  DCSP return parser.parsestr(faux_message) DCNL DCSP else: DCNL DCSP  DCSP return parser.parsestr(faux_message.decode('utf-8'))
def _unpack_batch_response(response, content): DCNL  DCSP parser = Parser() DCNL DCSP message = _generate_faux_mime_message(parser, response, content) DCNL DCSP if (not isinstance(message._payload, list)): DCNL DCSP  DCSP raise ValueError('Bad DCSP response: DCSP  DCSP not DCSP multi-part') DCNL DCSP for subrequest in message._payload: DCNL DCSP  DCSP (status_line, rest) = subrequest._payload.split('\n', 1) DCNL DCSP  DCSP (_, status, _) = status_line.split(' DCSP ', 2) DCNL DCSP  DCSP sub_message = parser.parsestr(rest) DCNL DCSP  DCSP payload = sub_message._payload DCNL DCSP  DCSP ctype = sub_message['Content-Type'] DCNL DCSP  DCSP msg_headers = dict(sub_message._headers) DCNL DCSP  DCSP msg_headers['status'] = status DCNL DCSP  DCSP headers = httplib2.Response(msg_headers) DCNL DCSP  DCSP if (ctype and ctype.startswith('application/json')): DCNL DCSP  DCSP  DCSP payload = json.loads(payload) DCNL DCSP  DCSP (yield (headers, payload))
def _scalar_property(fieldname): DCNL  DCSP def _getter(self): DCNL DCSP  DCSP 'Scalar DCSP property DCSP getter.' DCNL DCSP  DCSP return self._properties.get(fieldname) DCNL DCSP def _setter(self, value): DCNL DCSP  DCSP 'Scalar DCSP property DCSP setter.' DCNL DCSP  DCSP self._patch_property(fieldname, value) DCNL DCSP return property(_getter, _setter)
def _write_buffer_to_hash(buffer_object, hash_obj, digest_block_size=8192): DCNL  DCSP block = buffer_object.read(digest_block_size) DCNL DCSP while (len(block) > 0): DCNL DCSP  DCSP hash_obj.update(block) DCNL DCSP  DCSP block = buffer_object.read(digest_block_size)
def _base64_md5hash(buffer_object): DCNL  DCSP hash_obj = md5() DCNL DCSP _write_buffer_to_hash(buffer_object, hash_obj) DCNL DCSP digest_bytes = hash_obj.digest() DCNL DCSP return base64.b64encode(digest_bytes)
def _blobs_page_start(iterator, page, response): DCNL  DCSP page.prefixes = tuple(response.get('prefixes', ())) DCNL DCSP iterator.prefixes.update(page.prefixes)
def _item_to_blob(iterator, item): DCNL  DCSP name = item.get('name') DCNL DCSP blob = Blob(name, bucket=iterator.bucket) DCNL DCSP blob._set_properties(item) DCNL DCSP return blob
def _parse_readrows_acceptance_tests(filename): DCNL  DCSP import json DCNL DCSP with open(filename) as json_file: DCNL DCSP  DCSP test_json = json.load(json_file) DCNL DCSP for test in test_json['tests']: DCNL DCSP  DCSP name = test['name'] DCNL DCSP  DCSP chunks = _generate_cell_chunks(test['chunks']) DCNL DCSP  DCSP results = test['results'] DCNL DCSP  DCSP (yield (name, chunks, results))
def _raise_if(predicate, *args): DCNL  DCSP if predicate: DCNL DCSP  DCSP raise InvalidChunk(*args)
def _create_row_request(table_name, row_key=None, start_key=None, end_key=None, filter_=None, limit=None): DCNL  DCSP request_kwargs = {'table_name': table_name} DCNL DCSP if ((row_key is not None) and ((start_key is not None) or (end_key is not None))): DCNL DCSP  DCSP raise ValueError('Row DCSP key DCSP and DCSP row DCSP range DCSP cannot DCSP be DCSP set DCSP simultaneously') DCNL DCSP range_kwargs = {} DCNL DCSP if ((start_key is not None) or (end_key is not None)): DCNL DCSP  DCSP if (start_key is not None): DCNL DCSP  DCSP  DCSP range_kwargs['start_key_closed'] = _to_bytes(start_key) DCNL DCSP  DCSP if (end_key is not None): DCNL DCSP  DCSP  DCSP range_kwargs['end_key_open'] = _to_bytes(end_key) DCNL DCSP if (filter_ is not None): DCNL DCSP  DCSP request_kwargs['filter'] = filter_.to_pb() DCNL DCSP if (limit is not None): DCNL DCSP  DCSP request_kwargs['rows_limit'] = limit DCNL DCSP message = data_messages_v2_pb2.ReadRowsRequest(**request_kwargs) DCNL DCSP if (row_key is not None): DCNL DCSP  DCSP message.rows.row_keys.append(_to_bytes(row_key)) DCNL DCSP if range_kwargs: DCNL DCSP  DCSP message.rows.row_ranges.add(**range_kwargs) DCNL DCSP return message
def _prepare_create_request(instance): DCNL  DCSP parent_name = ('projects/' + instance._client.project) DCNL DCSP message = messages_v2_pb2.CreateInstanceRequest(parent=parent_name, instance_id=instance.instance_id, instance=data_v2_pb2.Instance(display_name=instance.display_name)) DCNL DCSP cluster = message.clusters[instance.instance_id] DCNL DCSP cluster.name = ((instance.name + '/clusters/') + instance.instance_id) DCNL DCSP cluster.location = ((parent_name + '/locations/') + instance._cluster_location_id) DCNL DCSP cluster.serve_nodes = instance._cluster_serve_nodes DCNL DCSP return message
def _make_data_stub(client): DCNL  DCSP if (client.emulator_host is None): DCNL DCSP  DCSP return make_secure_stub(client.credentials, client.user_agent, bigtable_pb2.BigtableStub, DATA_API_HOST, extra_options=_GRPC_MAX_LENGTH_OPTIONS) DCNL DCSP else: DCNL DCSP  DCSP return make_insecure_stub(bigtable_pb2.BigtableStub, client.emulator_host)
def _make_instance_stub(client): DCNL  DCSP if (client.emulator_host is None): DCNL DCSP  DCSP return make_secure_stub(client.credentials, client.user_agent, bigtable_instance_admin_pb2.BigtableInstanceAdminStub, INSTANCE_ADMIN_HOST) DCNL DCSP else: DCNL DCSP  DCSP return make_insecure_stub(bigtable_instance_admin_pb2.BigtableInstanceAdminStub, client.emulator_host)
def _make_operations_stub(client): DCNL  DCSP if (client.emulator_host is None): DCNL DCSP  DCSP return make_secure_stub(client.credentials, client.user_agent, operations_grpc.OperationsStub, OPERATIONS_API_HOST) DCNL DCSP else: DCNL DCSP  DCSP return make_insecure_stub(operations_grpc.OperationsStub, client.emulator_host)
def _make_table_stub(client): DCNL  DCSP if (client.emulator_host is None): DCNL DCSP  DCSP return make_secure_stub(client.credentials, client.user_agent, bigtable_table_admin_pb2.BigtableTableAdminStub, TABLE_ADMIN_HOST) DCNL DCSP else: DCNL DCSP  DCSP return make_insecure_stub(bigtable_table_admin_pb2.BigtableTableAdminStub, client.emulator_host)
def _prepare_create_request(cluster): DCNL  DCSP return messages_v2_pb2.CreateClusterRequest(parent=cluster._instance.name, cluster_id=cluster.cluster_id, cluster=data_v2_pb2.Cluster(serve_nodes=cluster.serve_nodes))
def _parse_rmw_row_response(row_response): DCNL  DCSP result = {} DCNL DCSP for column_family in row_response.row.families: DCNL DCSP  DCSP (column_family_id, curr_family) = _parse_family_pb(column_family) DCNL DCSP  DCSP result[column_family_id] = curr_family DCNL DCSP return result
def _parse_family_pb(family_pb): DCNL  DCSP result = {} DCNL DCSP for column in family_pb.columns: DCNL DCSP  DCSP result[column.qualifier] = cells = [] DCNL DCSP  DCSP for cell in column.cells: DCNL DCSP  DCSP  DCSP val_pair = (cell.value, _datetime_from_microseconds(cell.timestamp_micros)) DCNL DCSP  DCSP  DCSP cells.append(val_pair) DCNL DCSP return (family_pb.name, result)
def _gc_rule_from_pb(gc_rule_pb): DCNL  DCSP rule_name = gc_rule_pb.WhichOneof('rule') DCNL DCSP if (rule_name is None): DCNL DCSP  DCSP return None DCNL DCSP if (rule_name == 'max_num_versions'): DCNL DCSP  DCSP return MaxVersionsGCRule(gc_rule_pb.max_num_versions) DCNL DCSP elif (rule_name == 'max_age'): DCNL DCSP  DCSP max_age = _helpers._duration_pb_to_timedelta(gc_rule_pb.max_age) DCNL DCSP  DCSP return MaxAgeGCRule(max_age) DCNL DCSP elif (rule_name == 'union'): DCNL DCSP  DCSP return GCRuleUnion([_gc_rule_from_pb(rule) for rule in gc_rule_pb.union.rules]) DCNL DCSP elif (rule_name == 'intersection'): DCNL DCSP  DCSP rules = [_gc_rule_from_pb(rule) for rule in gc_rule_pb.intersection.rules] DCNL DCSP  DCSP return GCRuleIntersection(rules) DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('Unexpected DCSP rule DCSP name', rule_name)
def get_most_frequent_response(input_statement, response_list): DCNL  DCSP matching_response = None DCNL DCSP occurrence_count = (-1) DCNL DCSP logger = logging.getLogger(__name__) DCNL DCSP logger.info(u'Selecting DCSP response DCSP with DCSP greatest DCSP number DCSP of DCSP occurrences.') DCNL DCSP for statement in response_list: DCNL DCSP  DCSP count = statement.get_response_count(input_statement) DCNL DCSP  DCSP if (count >= occurrence_count): DCNL DCSP  DCSP  DCSP matching_response = statement DCNL DCSP  DCSP  DCSP occurrence_count = count DCNL DCSP return matching_response
def get_first_response(input_statement, response_list): DCNL  DCSP logger = logging.getLogger(__name__) DCNL DCSP logger.info(u'Selecting DCSP first DCSP response DCSP from DCSP list DCSP of DCSP {} DCSP options.'.format(len(response_list))) DCNL DCSP return response_list[0]
def get_random_response(input_statement, response_list): DCNL  DCSP from random import choice DCNL DCSP logger = logging.getLogger(__name__) DCNL DCSP logger.info(u'Selecting DCSP a DCSP response DCSP from DCSP list DCSP of DCSP {} DCSP options.'.format(len(response_list))) DCNL DCSP return choice(response_list)
def clean_whitespace(chatbot, statement): DCNL  DCSP import re DCNL DCSP statement.text = statement.text.replace('\n', ' DCSP ').replace('\r', ' DCSP ').replace(' DCTB ', ' DCSP ') DCNL DCSP statement.text = statement.text.strip() DCNL DCSP statement.text = re.sub(' DCSP +', ' DCSP ', statement.text) DCNL DCSP return statement
def unescape_html(chatbot, statement): DCNL  DCSP import sys DCNL DCSP if (sys.version_info[0] < 3): DCNL DCSP  DCSP from HTMLParser import HTMLParser DCNL DCSP  DCSP html = HTMLParser() DCNL DCSP else: DCNL DCSP  DCSP import html DCNL DCSP statement.text = html.unescape(statement.text) DCNL DCSP return statement
def convert_to_ascii(chatbot, statement): DCNL  DCSP import unicodedata DCNL DCSP import sys DCNL DCSP if (sys.version_info[0] < 3): DCNL DCSP  DCSP statement.text = unicode(statement.text) DCNL DCSP text = unicodedata.normalize('NFKD', statement.text) DCNL DCSP text = text.encode('ascii', 'ignore').decode('utf-8') DCNL DCSP statement.text = str(text) DCNL DCSP return statement
def import_module(dotted_path): DCNL  DCSP import importlib DCNL DCSP module_parts = dotted_path.split('.') DCNL DCSP module_path = '.'.join(module_parts[:(-1)]) DCNL DCSP module = importlib.import_module(module_path) DCNL DCSP return getattr(module, module_parts[(-1)])
def initialize_class(data, **kwargs): DCNL  DCSP if isinstance(data, dict): DCNL DCSP  DCSP import_path = data.pop('import_path') DCNL DCSP  DCSP data.update(kwargs) DCNL DCSP  DCSP Class = import_module(import_path) DCNL DCSP  DCSP return Class(**data) DCNL DCSP else: DCNL DCSP  DCSP Class = import_module(data) DCNL DCSP  DCSP return Class(**kwargs)
def validate_adapter_class(validate_class, adapter_class): DCNL  DCSP from .adapters import Adapter DCNL DCSP if isinstance(validate_class, dict): DCNL DCSP  DCSP origional_data = validate_class.copy() DCNL DCSP  DCSP validate_class = validate_class.get('import_path') DCNL DCSP  DCSP if (not validate_class): DCNL DCSP  DCSP  DCSP raise Adapter.InvalidAdapterTypeException('The DCSP dictionary DCSP {} DCSP must DCSP contain DCSP a DCSP value DCSP for DCSP "import_path"'.format(str(origional_data))) DCNL DCSP if (not issubclass(import_module(validate_class), adapter_class)): DCNL DCSP  DCSP raise Adapter.InvalidAdapterTypeException('{} DCSP must DCSP be DCSP a DCSP subclass DCSP of DCSP {}'.format(validate_class, adapter_class.__name__))
def input_function(): DCNL  DCSP import sys DCNL DCSP if (sys.version_info[0] < 3): DCNL DCSP  DCSP user_input = str(raw_input()) DCNL DCSP  DCSP if user_input: DCNL DCSP  DCSP  DCSP user_input = user_input.decode('utf-8') DCNL DCSP else: DCNL DCSP  DCSP user_input = input() DCNL DCSP return user_input
def nltk_download_corpus(resource_path): DCNL  DCSP from nltk.data import find DCNL DCSP from nltk import download DCNL DCSP from os.path import split DCNL DCSP (_, corpus_name) = split(resource_path) DCNL DCSP if (not resource_path.endswith('/')): DCNL DCSP  DCSP resource_path = (resource_path + '/') DCNL DCSP downloaded = False DCNL DCSP try: DCNL DCSP  DCSP find(resource_path) DCNL DCSP except LookupError: DCNL DCSP  DCSP download(corpus_name) DCNL DCSP  DCSP downloaded = True DCNL DCSP return downloaded
def remove_stopwords(tokens, language): DCNL  DCSP from nltk.corpus import stopwords DCNL DCSP stop_words = stopwords.words(language) DCNL DCSP tokens = (set(tokens) - set(stop_words)) DCNL DCSP return tokens
def levenshtein_distance(statement, other_statement): DCNL  DCSP import sys DCNL DCSP try: DCNL DCSP  DCSP from Levenshtein.StringMatcher import StringMatcher as SequenceMatcher DCNL DCSP except ImportError: DCNL DCSP  DCSP from difflib import SequenceMatcher DCNL DCSP PYTHON = sys.version_info[0] DCNL DCSP if ((not statement.text) or (not other_statement.text)): DCNL DCSP  DCSP return 0 DCNL DCSP if (PYTHON < 3): DCNL DCSP  DCSP statement_text = unicode(statement.text.lower()) DCNL DCSP  DCSP other_statement_text = unicode(other_statement.text.lower()) DCNL DCSP else: DCNL DCSP  DCSP statement_text = str(statement.text.lower()) DCNL DCSP  DCSP other_statement_text = str(other_statement.text.lower()) DCNL DCSP similarity = SequenceMatcher(None, statement_text, other_statement_text) DCNL DCSP percent = (int(round((100 * similarity.ratio()))) / 100.0) DCNL DCSP return percent
def synset_distance(statement, other_statement): DCNL  DCSP from nltk.corpus import wordnet DCNL DCSP from nltk import word_tokenize DCNL DCSP from chatterbot import utils DCNL DCSP import itertools DCNL DCSP tokens1 = word_tokenize(statement.text.lower()) DCNL DCSP tokens2 = word_tokenize(other_statement.text.lower()) DCNL DCSP tokens1 = utils.remove_stopwords(tokens1, language='english') DCNL DCSP tokens2 = utils.remove_stopwords(tokens2, language='english') DCNL DCSP max_possible_similarity = max(len(statement.text.split()), len(other_statement.text.split())) DCNL DCSP max_similarity = 0.0 DCNL DCSP for combination in itertools.product(*[tokens1, tokens2]): DCNL DCSP  DCSP synset1 = wordnet.synsets(combination[0]) DCNL DCSP  DCSP synset2 = wordnet.synsets(combination[1]) DCNL DCSP  DCSP if (synset1 and synset2): DCNL DCSP  DCSP  DCSP for synset in itertools.product(*[synset1, synset2]): DCNL DCSP  DCSP  DCSP  DCSP similarity = synset[0].path_similarity(synset[1]) DCNL DCSP  DCSP  DCSP  DCSP if (similarity and (similarity > max_similarity)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP max_similarity = similarity DCNL DCSP if (max_possible_similarity == 0): DCNL DCSP  DCSP return 0 DCNL DCSP return (max_similarity / max_possible_similarity)
def sentiment_comparison(statement, other_statement): DCNL  DCSP from nltk.sentiment.vader import SentimentIntensityAnalyzer DCNL DCSP sentiment_analyzer = SentimentIntensityAnalyzer() DCNL DCSP statement_polarity = sentiment_analyzer.polarity_scores(statement.text.lower()) DCNL DCSP statement2_polarity = sentiment_analyzer.polarity_scores(other_statement.text.lower()) DCNL DCSP statement_greatest_polarity = 'neu' DCNL DCSP statement_greatest_score = (-1) DCNL DCSP for polarity in sorted(statement_polarity): DCNL DCSP  DCSP if (statement_polarity[polarity] > statement_greatest_score): DCNL DCSP  DCSP  DCSP statement_greatest_polarity = polarity DCNL DCSP  DCSP  DCSP statement_greatest_score = statement_polarity[polarity] DCNL DCSP statement2_greatest_polarity = 'neu' DCNL DCSP statement2_greatest_score = (-1) DCNL DCSP for polarity in sorted(statement2_polarity): DCNL DCSP  DCSP if (statement2_polarity[polarity] > statement2_greatest_score): DCNL DCSP  DCSP  DCSP statement2_greatest_polarity = polarity DCNL DCSP  DCSP  DCSP statement2_greatest_score = statement2_polarity[polarity] DCNL DCSP if (statement_greatest_polarity != statement2_greatest_polarity): DCNL DCSP  DCSP return 0 DCNL DCSP values = [statement_greatest_score, statement2_greatest_score] DCNL DCSP difference = (max(values) - min(values)) DCNL DCSP return (1.0 - difference)
def jaccard_similarity(statement, other_statement, threshold=0.5): DCNL  DCSP from nltk.corpus import wordnet DCNL DCSP import nltk DCNL DCSP import string DCNL DCSP a = statement.text.lower() DCNL DCSP b = other_statement.text.lower() DCNL DCSP stopwords = nltk.corpus.stopwords.words('english') DCNL DCSP stopwords.extend(string.punctuation) DCNL DCSP stopwords.append('') DCNL DCSP lemmatizer = nltk.stem.wordnet.WordNetLemmatizer() DCNL DCSP def get_wordnet_pos(pos_tag): DCNL DCSP  DCSP if pos_tag[1].startswith('J'): DCNL DCSP  DCSP  DCSP return (pos_tag[0], wordnet.ADJ) DCNL DCSP  DCSP elif pos_tag[1].startswith('V'): DCNL DCSP  DCSP  DCSP return (pos_tag[0], wordnet.VERB) DCNL DCSP  DCSP elif pos_tag[1].startswith('N'): DCNL DCSP  DCSP  DCSP return (pos_tag[0], wordnet.NOUN) DCNL DCSP  DCSP elif pos_tag[1].startswith('R'): DCNL DCSP  DCSP  DCSP return (pos_tag[0], wordnet.ADV) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (pos_tag[0], wordnet.NOUN) DCNL DCSP ratio = 0 DCNL DCSP pos_a = map(get_wordnet_pos, nltk.pos_tag(nltk.tokenize.word_tokenize(a))) DCNL DCSP pos_b = map(get_wordnet_pos, nltk.pos_tag(nltk.tokenize.word_tokenize(b))) DCNL DCSP lemma_a = [lemmatizer.lemmatize(token.strip(string.punctuation), pos) for (token, pos) in pos_a if ((pos == wordnet.NOUN) and (token.strip(string.punctuation) not in stopwords))] DCNL DCSP lemma_b = [lemmatizer.lemmatize(token.strip(string.punctuation), pos) for (token, pos) in pos_b if ((pos == wordnet.NOUN) and (token.strip(string.punctuation) not in stopwords))] DCNL DCSP try: DCNL DCSP  DCSP ratio = (len(set(lemma_a).intersection(lemma_b)) / float(len(set(lemma_a).union(lemma_b)))) DCNL DCSP except Exception as e: DCNL DCSP  DCSP print ('Error', e) DCNL DCSP return (ratio >= threshold)
def hashnum(number): DCNL  DCSP if re.match('one|^a\\b', number, re.IGNORECASE): DCNL DCSP  DCSP return 1 DCNL DCSP if re.match('two', number, re.IGNORECASE): DCNL DCSP  DCSP return 2 DCNL DCSP if re.match('three', number, re.IGNORECASE): DCNL DCSP  DCSP return 3 DCNL DCSP if re.match('four', number, re.IGNORECASE): DCNL DCSP  DCSP return 4 DCNL DCSP if re.match('five', number, re.IGNORECASE): DCNL DCSP  DCSP return 5 DCNL DCSP if re.match('six', number, re.IGNORECASE): DCNL DCSP  DCSP return 6 DCNL DCSP if re.match('seven', number, re.IGNORECASE): DCNL DCSP  DCSP return 7 DCNL DCSP if re.match('eight', number, re.IGNORECASE): DCNL DCSP  DCSP return 8 DCNL DCSP if re.match('nine', number, re.IGNORECASE): DCNL DCSP  DCSP return 9 DCNL DCSP if re.match('ten', number, re.IGNORECASE): DCNL DCSP  DCSP return 10 DCNL DCSP if re.match('eleven', number, re.IGNORECASE): DCNL DCSP  DCSP return 11 DCNL DCSP if re.match('twelve', number, re.IGNORECASE): DCNL DCSP  DCSP return 12 DCNL DCSP if re.match('thirteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 13 DCNL DCSP if re.match('fourteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 14 DCNL DCSP if re.match('fifteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 15 DCNL DCSP if re.match('sixteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 16 DCNL DCSP if re.match('seventeen', number, re.IGNORECASE): DCNL DCSP  DCSP return 17 DCNL DCSP if re.match('eighteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 18 DCNL DCSP if re.match('nineteen', number, re.IGNORECASE): DCNL DCSP  DCSP return 19 DCNL DCSP if re.match('twenty', number, re.IGNORECASE): DCNL DCSP  DCSP return 20 DCNL DCSP if re.match('thirty', number, re.IGNORECASE): DCNL DCSP  DCSP return 30 DCNL DCSP if re.match('forty', number, re.IGNORECASE): DCNL DCSP  DCSP return 40 DCNL DCSP if re.match('fifty', number, re.IGNORECASE): DCNL DCSP  DCSP return 50 DCNL DCSP if re.match('sixty', number, re.IGNORECASE): DCNL DCSP  DCSP return 60 DCNL DCSP if re.match('seventy', number, re.IGNORECASE): DCNL DCSP  DCSP return 70 DCNL DCSP if re.match('eighty', number, re.IGNORECASE): DCNL DCSP  DCSP return 80 DCNL DCSP if re.match('ninety', number, re.IGNORECASE): DCNL DCSP  DCSP return 90 DCNL DCSP if re.match('hundred', number, re.IGNORECASE): DCNL DCSP  DCSP return 100 DCNL DCSP if re.match('thousand', number, re.IGNORECASE): DCNL DCSP  DCSP return 1000
def convert_string_to_number(value): DCNL  DCSP if (value is None): DCNL DCSP  DCSP return 1 DCNL DCSP if isinstance(value, int): DCNL DCSP  DCSP return value DCNL DCSP if value.isdigit(): DCNL DCSP  DCSP return int(value) DCNL DCSP num_list = map((lambda s: hashnum(s)), re.findall((numbers + '+'), value, re.IGNORECASE)) DCNL DCSP return sum(num_list)
def convert_time_to_hour_minute(hour, minute, convention): DCNL  DCSP if (hour is None): DCNL DCSP  DCSP hour = 0 DCNL DCSP if (minute is None): DCNL DCSP  DCSP minute = 0 DCNL DCSP if (convention is None): DCNL DCSP  DCSP convention = 'am' DCNL DCSP hour = int(hour) DCNL DCSP minute = int(minute) DCNL DCSP if (convention == 'pm'): DCNL DCSP  DCSP hour += 12 DCNL DCSP return {'hours': hour, 'minutes': minute}
def date_from_quarter(base_date, ordinal, year): DCNL  DCSP interval = 3 DCNL DCSP month_start = (interval * (ordinal - 1)) DCNL DCSP if (month_start < 0): DCNL DCSP  DCSP month_start = 9 DCNL DCSP month_end = (month_start + interval) DCNL DCSP if (month_start == 0): DCNL DCSP  DCSP month_start = 1 DCNL DCSP return [datetime(year, month_start, 1), datetime(year, month_end, calendar.monthrange(year, month_end)[1])]
def date_from_relative_day(base_date, time, dow): DCNL  DCSP base_date = datetime(base_date.year, base_date.month, base_date.day) DCNL DCSP time = time.lower() DCNL DCSP dow = dow.lower() DCNL DCSP if ((time == 'this') or (time == 'coming')): DCNL DCSP  DCSP num = HASHWEEKDAYS[dow] DCNL DCSP  DCSP return this_week_day(base_date, num) DCNL DCSP elif ((time == 'last') or (time == 'previous')): DCNL DCSP  DCSP num = HASHWEEKDAYS[dow] DCNL DCSP  DCSP return previous_week_day(base_date, num) DCNL DCSP elif ((time == 'next') or (time == 'following')): DCNL DCSP  DCSP num = HASHWEEKDAYS[dow] DCNL DCSP  DCSP return next_week_day(base_date, num)
def date_from_relative_week_year(base_date, time, dow, ordinal=1): DCNL  DCSP relative_date = datetime(base_date.year, base_date.month, base_date.day) DCNL DCSP if (dow in year_variations): DCNL DCSP  DCSP if ((time == 'this') or (time == 'coming')): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, 1, 1) DCNL DCSP  DCSP elif ((time == 'last') or (time == 'previous')): DCNL DCSP  DCSP  DCSP return datetime((relative_date.year - 1), relative_date.month, 1) DCNL DCSP  DCSP elif ((time == 'next') or (time == 'following')): DCNL DCSP  DCSP  DCSP return (relative_date + timedelta((relative_date.year + 1))) DCNL DCSP  DCSP elif (time == 'end DCSP of DCSP the'): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, 12, 31) DCNL DCSP elif (dow in month_variations): DCNL DCSP  DCSP if (time == 'this'): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, relative_date.month, relative_date.day) DCNL DCSP  DCSP elif ((time == 'last') or (time == 'previous')): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, (relative_date.month - 1), relative_date.day) DCNL DCSP  DCSP elif ((time == 'next') or (time == 'following')): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, (relative_date.month + 1), relative_date.day) DCNL DCSP  DCSP elif (time == 'end DCSP of DCSP the'): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, relative_date.month, calendar.monthrange(relative_date.year, relative_date.month)[1]) DCNL DCSP elif (dow in week_variations): DCNL DCSP  DCSP if (time == 'this'): DCNL DCSP  DCSP  DCSP return (relative_date - timedelta(days=relative_date.weekday())) DCNL DCSP  DCSP elif ((time == 'last') or (time == 'previous')): DCNL DCSP  DCSP  DCSP return (relative_date - timedelta(weeks=1)) DCNL DCSP  DCSP elif ((time == 'next') or (time == 'following')): DCNL DCSP  DCSP  DCSP return (relative_date + timedelta(weeks=1)) DCNL DCSP  DCSP elif (time == 'end DCSP of DCSP the'): DCNL DCSP  DCSP  DCSP day_of_week = base_date.weekday() DCNL DCSP  DCSP  DCSP return (relative_date + timedelta(days=(6 - relative_date.weekday()))) DCNL DCSP elif (dow in day_variations): DCNL DCSP  DCSP if (time == 'this'): DCNL DCSP  DCSP  DCSP return relative_date DCNL DCSP  DCSP elif ((time == 'last') or (time == 'previous')): DCNL DCSP  DCSP  DCSP return (relative_date - timedelta(days=1)) DCNL DCSP  DCSP elif ((time == 'next') or (time == 'following')): DCNL DCSP  DCSP  DCSP return (relative_date + timedelta(days=1)) DCNL DCSP  DCSP elif (time == 'end DCSP of DCSP the'): DCNL DCSP  DCSP  DCSP return datetime(relative_date.year, relative_date.month, relative_date.day, 23, 59, 59)
def date_from_adverb(base_date, name): DCNL  DCSP adverb_date = datetime(base_date.year, base_date.month, base_date.day) DCNL DCSP if ((name == 'today') or (name == 'tonite') or (name == 'tonight')): DCNL DCSP  DCSP return adverb_date.today() DCNL DCSP elif (name == 'yesterday'): DCNL DCSP  DCSP return (adverb_date - timedelta(days=1)) DCNL DCSP elif ((name == 'tomorrow') or (name == 'tom')): DCNL DCSP  DCSP return (adverb_date + timedelta(days=1))
def date_from_duration(base_date, number_as_string, unit, duration, base_time=None): DCNL  DCSP if (base_time is not None): DCNL DCSP  DCSP base_date = date_from_adverb(base_date, base_time) DCNL DCSP num = convert_string_to_number(number_as_string) DCNL DCSP if (unit in day_variations): DCNL DCSP  DCSP args = {'days': num} DCNL DCSP elif (unit in minute_variations): DCNL DCSP  DCSP args = {'minutes': num} DCNL DCSP elif (unit in week_variations): DCNL DCSP  DCSP args = {'weeks': num} DCNL DCSP elif (unit in month_variations): DCNL DCSP  DCSP args = {'days': ((365 * num) / 12)} DCNL DCSP elif (unit in year_variations): DCNL DCSP  DCSP args = {'years': num} DCNL DCSP if ((duration == 'ago') or (duration == 'before') or (duration == 'earlier')): DCNL DCSP  DCSP if ('years' in args): DCNL DCSP  DCSP  DCSP return datetime((base_date.year - args['years']), base_date.month, base_date.day) DCNL DCSP  DCSP return (base_date - timedelta(**args)) DCNL DCSP elif ((duration == 'after') or (duration == 'later') or (duration == 'from DCSP now')): DCNL DCSP  DCSP if ('years' in args): DCNL DCSP  DCSP  DCSP return datetime((base_date.year + args['years']), base_date.month, base_date.day) DCNL DCSP  DCSP return (base_date + timedelta(**args))
def this_week_day(base_date, weekday): DCNL  DCSP day_of_week = base_date.weekday() DCNL DCSP if (day_of_week > weekday): DCNL DCSP  DCSP return next_week_day(base_date, weekday) DCNL DCSP start_of_this_week = (base_date - timedelta(days=(day_of_week + 1))) DCNL DCSP day = (start_of_this_week + timedelta(days=1)) DCNL DCSP while (day.weekday() != weekday): DCNL DCSP  DCSP day = (day + timedelta(days=1)) DCNL DCSP return day
def previous_week_day(base_date, weekday): DCNL  DCSP day = (base_date - timedelta(days=1)) DCNL DCSP while (day.weekday() != weekday): DCNL DCSP  DCSP day = (day - timedelta(days=1)) DCNL DCSP return day
def next_week_day(base_date, weekday): DCNL  DCSP day_of_week = base_date.weekday() DCNL DCSP end_of_this_week = (base_date + timedelta(days=(6 - day_of_week))) DCNL DCSP day = (end_of_this_week + timedelta(days=1)) DCNL DCSP while (day.weekday() != weekday): DCNL DCSP  DCSP day = (day + timedelta(days=1)) DCNL DCSP return day
def datetime_parsing(text, base_date=datetime.now()): DCNL  DCSP matches = [] DCNL DCSP found_array = [] DCNL DCSP for (expression, function) in regex: DCNL DCSP  DCSP for match in expression.finditer(text): DCNL DCSP  DCSP  DCSP matches.append((match.group(), function(match, base_date), match.span())) DCNL DCSP for (match, value, spans) in matches: DCNL DCSP  DCSP subn = re.subn((('(?!<TAG[^>]*?>)' + match) + '(?![^<]*?</TAG>)'), (('<TAG>' + match) + '</TAG>'), text) DCNL DCSP  DCSP text = subn[0] DCNL DCSP  DCSP is_substituted = subn[1] DCNL DCSP  DCSP if (is_substituted != 0): DCNL DCSP  DCSP  DCSP found_array.append((match, value, spans)) DCNL DCSP return sorted(found_array, key=(lambda match: (match and match[2][0])))
def generate_strings(total_strings, string_length=20): DCNL  DCSP statements = [] DCNL DCSP for _ in range(0, total_strings): DCNL DCSP  DCSP text = ''.join((random.choice(((string.ascii_letters + string.digits) + ' DCSP ')) for _ in range(string_length))) DCNL DCSP  DCSP statements.append(text) DCNL DCSP return statements
def _euclidean_dist(vector_a, vector_b): DCNL  DCSP dist = 0 DCNL DCSP for (x, y) in zip(vector_a, vector_b): DCNL DCSP  DCSP dist += ((x - y) * (x - y)) DCNL DCSP return math.sqrt(dist)
def _get_closest_matches(input_attributes, target_attributes): DCNL  DCSP closest_matches = {} DCNL DCSP for a in input_attributes: DCNL DCSP  DCSP best_dist = float('inf') DCNL DCSP  DCSP best_matches = [] DCNL DCSP  DCSP for b in target_attributes: DCNL DCSP  DCSP  DCSP dist = _euclidean_dist(input_attributes[a], target_attributes[b]) DCNL DCSP  DCSP  DCSP if (dist < best_dist): DCNL DCSP  DCSP  DCSP  DCSP best_matches = [b] DCNL DCSP  DCSP  DCSP  DCSP best_dist = dist DCNL DCSP  DCSP  DCSP elif (dist == best_dist): DCNL DCSP  DCSP  DCSP  DCSP best_matches.append(b) DCNL DCSP  DCSP closest_matches[a] = best_matches DCNL DCSP return closest_matches
def _levenshtein_distance(s1, s2): DCNL  DCSP if (len(s1) > len(s2)): DCNL DCSP  DCSP (s1, s2) = (s2, s1) DCNL DCSP distances = range((len(s1) + 1)) DCNL DCSP for (index2, num2) in enumerate(s2): DCNL DCSP  DCSP new_distances = [(index2 + 1)] DCNL DCSP  DCSP for (index1, num1) in enumerate(s1): DCNL DCSP  DCSP  DCSP if (num1 == num2): DCNL DCSP  DCSP  DCSP  DCSP new_distances.append(distances[index1]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP new_distances.append((1 + min((distances[index1], distances[(index1 + 1)], new_distances[(-1)])))) DCNL DCSP  DCSP distances = new_distances DCNL DCSP return distances[(-1)]
def _normalized_levenshtein_distance(s1, s2, acceptable_differences): DCNL  DCSP if (len(s1) > len(s2)): DCNL DCSP  DCSP (s1, s2) = (s2, s1) DCNL DCSP  DCSP acceptable_differences = set(((- i) for i in acceptable_differences)) DCNL DCSP distances = range((len(s1) + 1)) DCNL DCSP for (index2, num2) in enumerate(s2): DCNL DCSP  DCSP new_distances = [(index2 + 1)] DCNL DCSP  DCSP for (index1, num1) in enumerate(s1): DCNL DCSP  DCSP  DCSP if ((num2 - num1) in acceptable_differences): DCNL DCSP  DCSP  DCSP  DCSP new_distances.append(distances[index1]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP new_distances.append((1 + min((distances[index1], distances[(index1 + 1)], new_distances[(-1)])))) DCNL DCSP  DCSP distances = new_distances DCNL DCSP return distances[(-1)]
def _is_better_match(x, y, matched_a, matched_b, attributes_dict_a, attributes_dict_b): DCNL  DCSP attributes_x = attributes_dict_a[x] DCNL DCSP attributes_y = attributes_dict_b[y] DCNL DCSP if (x in matched_a): DCNL DCSP  DCSP attributes_match = attributes_dict_b[matched_a[x]] DCNL DCSP  DCSP if (_euclidean_dist(attributes_x, attributes_y) >= _euclidean_dist(attributes_x, attributes_match)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP if (y in matched_b): DCNL DCSP  DCSP attributes_match = attributes_dict_a[matched_b[y]] DCNL DCSP  DCSP if (_euclidean_dist(attributes_x, attributes_y) >= _euclidean_dist(attributes_y, attributes_match)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def differing_constants(block_a, block_b): DCNL  DCSP statements_a = ([s for s in block_a.vex.statements if (s.tag != 'Ist_IMark')] + [block_a.vex.next]) DCNL DCSP statements_b = ([s for s in block_b.vex.statements if (s.tag != 'Ist_IMark')] + [block_b.vex.next]) DCNL DCSP if (len(statements_a) != len(statements_b)): DCNL DCSP  DCSP raise UnmatchedStatementsException('Blocks DCSP have DCSP different DCSP numbers DCSP of DCSP statements') DCNL DCSP start_1 = min(block_a.instruction_addrs) DCNL DCSP start_2 = min(block_b.instruction_addrs) DCNL DCSP changes = [] DCNL DCSP current_offset = None DCNL DCSP for (statement, statement_2) in zip(statements_a, statements_b): DCNL DCSP  DCSP if (statement.tag != statement_2.tag): DCNL DCSP  DCSP  DCSP raise UnmatchedStatementsException('Statement DCSP tag DCSP has DCSP changed') DCNL DCSP  DCSP if (statement.tag == 'Ist_IMark'): DCNL DCSP  DCSP  DCSP if ((statement.addr - start_1) != (statement_2.addr - start_2)): DCNL DCSP  DCSP  DCSP  DCSP raise UnmatchedStatementsException('Instruction DCSP length DCSP has DCSP changed') DCNL DCSP  DCSP  DCSP current_offset = (statement.addr - start_1) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP differences = compare_statement_dict(statement, statement_2) DCNL DCSP  DCSP for d in differences: DCNL DCSP  DCSP  DCSP if (d.type != DIFF_VALUE): DCNL DCSP  DCSP  DCSP  DCSP raise UnmatchedStatementsException('Instruction DCSP has DCSP changed') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP changes.append(ConstantChange(current_offset, d.value_a, d.value_b)) DCNL DCSP return changes
def compare_cfg(standard, g, function_list): DCNL  DCSP def get_function_name(addr): DCNL DCSP  DCSP start = 0 DCNL DCSP  DCSP end = (len(function_list) - 1) DCNL DCSP  DCSP while (start <= end): DCNL DCSP  DCSP  DCSP mid = ((start + end) / 2) DCNL DCSP  DCSP  DCSP f = function_list[mid] DCNL DCSP  DCSP  DCSP if (addr < f['start']): DCNL DCSP  DCSP  DCSP  DCSP end = (mid - 1) DCNL DCSP  DCSP  DCSP elif (addr > f['end']): DCNL DCSP  DCSP  DCSP  DCSP start = (mid + 1) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return f['name'] DCNL DCSP  DCSP return None DCNL DCSP function_list = sorted(function_list, key=(lambda x: x['start'])) DCNL DCSP s_graph = networkx.DiGraph() DCNL DCSP all_nodes = sorted(standard.nodes()) DCNL DCSP addr_to_basicblock = {} DCNL DCSP last_basicblock = None DCNL DCSP for n in all_nodes: DCNL DCSP  DCSP if (last_basicblock is None): DCNL DCSP  DCSP  DCSP last_basicblock = (n, n) DCNL DCSP  DCSP block = last_basicblock DCNL DCSP  DCSP successors = standard.successors(n) DCNL DCSP  DCSP if ((len(successors) == 1) and (successors[0] >= block[0])): DCNL DCSP  DCSP  DCSP last_basicblock = (block[0], successors[0]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP addr_to_basicblock[block[0]] = block DCNL DCSP  DCSP  DCSP for s in successors: DCNL DCSP  DCSP  DCSP  DCSP s_graph.add_edge(block[0], s) DCNL DCSP  DCSP  DCSP last_basicblock = None DCNL DCSP graph = networkx.DiGraph() DCNL DCSP for (src, dst) in g.edges(): DCNL DCSP  DCSP graph.add_edge(src.addr, dst.addr) DCNL DCSP for (src, dst) in s_graph.edges(): DCNL DCSP  DCSP if graph.has_edge(src, dst): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP l.error('Edge DCSP (%s-0x%x, DCSP %s-0x%x) DCSP only DCSP exists DCSP in DCSP IDA DCSP CFG.', get_function_name(src), src, get_function_name(dst), dst) DCNL DCSP for (src, dst) in graph.edges(): DCNL DCSP  DCSP if s_graph.has_edge(src, dst): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP l.error("Edge DCSP (%s-0x%x, DCSP %s-0x%x) DCSP only DCSP exists DCSP in DCSP angr's DCSP CFG.", get_function_name(src), src, get_function_name(dst), dst)
def cfg_fast_functions_check(arch, binary_path, func_addrs, func_features): DCNL  DCSP path = os.path.join(test_location, arch, binary_path) DCNL DCSP proj = angr.Project(path, load_options={'auto_load_libs': False}) DCNL DCSP cfg = proj.analyses.CFGFast() DCNL DCSP nose.tools.assert_true(set([k for k in cfg.kb.functions.keys()]).issuperset(func_addrs)) DCNL DCSP for (func_addr, feature_dict) in func_features.iteritems(): DCNL DCSP  DCSP returning = feature_dict.get('returning', 'undefined') DCNL DCSP  DCSP if (returning is not 'undefined'): DCNL DCSP  DCSP  DCSP nose.tools.assert_is(cfg.kb.functions.function(addr=func_addr).returning, returning) DCNL DCSP cfg = proj.analyses.CFGFast(force_segment=True) DCNL DCSP nose.tools.assert_true(set([k for k in cfg.kb.functions.keys()]).issuperset(func_addrs)) DCNL DCSP for (func_addr, feature_dict) in func_features.iteritems(): DCNL DCSP  DCSP returning = feature_dict.get('returning', 'undefined') DCNL DCSP  DCSP if (returning is not 'undefined'): DCNL DCSP  DCSP  DCSP nose.tools.assert_is(cfg.kb.functions.function(addr=func_addr).returning, returning) DCNL DCSP cfg = proj.analyses.CFGFast(force_segment=True, normalize=True) DCNL DCSP nose.tools.assert_true(set([k for k in cfg.kb.functions.keys()]).issuperset(func_addrs)) DCNL DCSP for (func_addr, feature_dict) in func_features.iteritems(): DCNL DCSP  DCSP returning = feature_dict.get('returning', 'undefined') DCNL DCSP  DCSP if (returning is not 'undefined'): DCNL DCSP  DCSP  DCSP nose.tools.assert_is(cfg.kb.functions.function(addr=func_addr).returning, returning)
def cfg_fast_edges_check(arch, binary_path, edges): DCNL  DCSP path = os.path.join(test_location, arch, binary_path) DCNL DCSP proj = angr.Project(path, load_options={'auto_load_libs': False}) DCNL DCSP cfg = proj.analyses.CFGFast() DCNL DCSP for (src, dst) in edges: DCNL DCSP  DCSP src_node = cfg.get_any_node(src) DCNL DCSP  DCSP dst_node = cfg.get_any_node(dst) DCNL DCSP  DCSP nose.tools.assert_in(dst_node, src_node.successors)
def test_cle_gdb(): DCNL  DCSP mappath = os.path.join(test_location, '../test_data/test_gdb_plugin/procmap') DCNL DCSP p = angr.Project(binpath, load_options={'gdb_map': mappath}) DCNL DCSP check_addrs(p)
def test_sharedlibs(): DCNL  DCSP mappath = os.path.join(test_location, '../test_data/test_gdb_plugin/info_sharedlibs') DCNL DCSP p = angr.Project(binpath, load_options={'gdb_map': mappath, 'gdb_fix': True}) DCNL DCSP check_addrs(p)
def write_commit_patch(f, commit, contents, progress, version=None, encoding=None): DCNL  DCSP encoding = (encoding or getattr(f, 'encoding', 'ascii')) DCNL DCSP if (type(contents) is str): DCNL DCSP  DCSP contents = contents.encode(encoding) DCNL DCSP (num, total) = progress DCNL DCSP f.write((((('From DCSP ' + commit.id) + ' DCSP ') + time.ctime(commit.commit_time).encode(encoding)) + '\n')) DCNL DCSP f.write((('From: DCSP ' + commit.author) + '\n')) DCNL DCSP f.write((('Date: DCSP ' + time.strftime('%a, DCSP %d DCSP %b DCSP %Y DCSP %H:%M:%S DCSP %Z').encode(encoding)) + '\n')) DCNL DCSP f.write(((('Subject: DCSP [PATCH DCSP %d/%d] DCSP ' % (num, total)).encode(encoding) + commit.message) + '\n')) DCNL DCSP f.write('\n') DCNL DCSP f.write('---\n') DCNL DCSP try: DCNL DCSP  DCSP import subprocess DCNL DCSP  DCSP p = subprocess.Popen(['diffstat'], stdout=subprocess.PIPE, stdin=subprocess.PIPE) DCNL DCSP except (ImportError, OSError): DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP (diffstat, _) = p.communicate(contents) DCNL DCSP  DCSP f.write(diffstat) DCNL DCSP  DCSP f.write('\n') DCNL DCSP f.write(contents) DCNL DCSP f.write('-- DCSP \n') DCNL DCSP if (version is None): DCNL DCSP  DCSP from dulwich import __version__ as dulwich_version DCNL DCSP  DCSP f.write(('Dulwich DCSP %d.%d.%d\n' % dulwich_version)) DCNL DCSP else: DCNL DCSP  DCSP f.write((version.encode(encoding) + '\n'))
def get_summary(commit): DCNL  DCSP return commit.message.splitlines()[0].replace(' DCSP ', '-')
def unified_diff(a, b, fromfile, tofile, n=3): DCNL  DCSP started = False DCNL DCSP for group in SequenceMatcher(None, a, b).get_grouped_opcodes(n): DCNL DCSP  DCSP if (not started): DCNL DCSP  DCSP  DCSP (yield (('--- DCSP ' + fromfile) + '\n')) DCNL DCSP  DCSP  DCSP (yield (('+++ DCSP ' + tofile) + '\n')) DCNL DCSP  DCSP  DCSP started = True DCNL DCSP  DCSP (i1, i2, j1, j2) = (group[0][1], group[(-1)][2], group[0][3], group[(-1)][4]) DCNL DCSP  DCSP sizes = ('@@ DCSP -%d,%d DCSP +%d,%d DCSP @@\n' % ((i1 + 1), (i2 - i1), (j1 + 1), (j2 - j1))) DCNL DCSP  DCSP (yield sizes.encode('ascii')) DCNL DCSP  DCSP for (tag, i1, i2, j1, j2) in group: DCNL DCSP  DCSP  DCSP if (tag == 'equal'): DCNL DCSP  DCSP  DCSP  DCSP for line in a[i1:i2]: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield (' DCSP ' + line)) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if ((tag == 'replace') or (tag == 'delete')): DCNL DCSP  DCSP  DCSP  DCSP for line in a[i1:i2]: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not (line[(-1):] == '\n')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP line += '\n\\ DCSP No DCSP newline DCSP at DCSP end DCSP of DCSP file\n' DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ('-' + line)) DCNL DCSP  DCSP  DCSP if ((tag == 'replace') or (tag == 'insert')): DCNL DCSP  DCSP  DCSP  DCSP for line in b[j1:j2]: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not (line[(-1):] == '\n')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP line += '\n\\ DCSP No DCSP newline DCSP at DCSP end DCSP of DCSP file\n' DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ('+' + line))
def is_binary(content): DCNL  DCSP return ('\x00' in content[:FIRST_FEW_BYTES])
def write_object_diff(f, store, old_file, new_file, diff_binary=False): DCNL  DCSP (old_path, old_mode, old_id) = old_file DCNL DCSP (new_path, new_mode, new_id) = new_file DCNL DCSP old_path = patch_filename(old_path, 'a') DCNL DCSP new_path = patch_filename(new_path, 'b') DCNL DCSP def content(mode, hexsha): DCNL DCSP  DCSP if (hexsha is None): DCNL DCSP  DCSP  DCSP return Blob.from_string('') DCNL DCSP  DCSP elif S_ISGITLINK(mode): DCNL DCSP  DCSP  DCSP return Blob.from_string((('Submodule DCSP commit DCSP ' + hexsha) + '\n')) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return store[hexsha] DCNL DCSP def lines(content): DCNL DCSP  DCSP if (not content): DCNL DCSP  DCSP  DCSP return [] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return content.splitlines() DCNL DCSP f.writelines(gen_diff_header((old_path, new_path), (old_mode, new_mode), (old_id, new_id))) DCNL DCSP old_content = content(old_mode, old_id) DCNL DCSP new_content = content(new_mode, new_id) DCNL DCSP if ((not diff_binary) and (is_binary(old_content.data) or is_binary(new_content.data))): DCNL DCSP  DCSP f.write((((('Binary DCSP files DCSP ' + old_path) + ' DCSP and DCSP ') + new_path) + ' DCSP differ\n')) DCNL DCSP else: DCNL DCSP  DCSP f.writelines(unified_diff(lines(old_content), lines(new_content), old_path, new_path))
def gen_diff_header(paths, modes, shas): DCNL  DCSP (old_path, new_path) = paths DCNL DCSP (old_mode, new_mode) = modes DCNL DCSP (old_sha, new_sha) = shas DCNL DCSP (yield (((('diff DCSP --git DCSP ' + old_path) + ' DCSP ') + new_path) + '\n')) DCNL DCSP if (old_mode != new_mode): DCNL DCSP  DCSP if (new_mode is not None): DCNL DCSP  DCSP  DCSP if (old_mode is not None): DCNL DCSP  DCSP  DCSP  DCSP (yield ('old DCSP mode DCSP %o\n' % old_mode).encode('ascii')) DCNL DCSP  DCSP  DCSP (yield ('new DCSP mode DCSP %o\n' % new_mode).encode('ascii')) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (yield ('deleted DCSP mode DCSP %o\n' % old_mode).encode('ascii')) DCNL DCSP (yield ((('index DCSP ' + shortid(old_sha)) + '..') + shortid(new_sha))) DCNL DCSP if (new_mode is not None): DCNL DCSP  DCSP (yield (' DCSP %o' % new_mode).encode('ascii')) DCNL DCSP (yield '\n')
def write_blob_diff(f, old_file, new_file): DCNL  DCSP (old_path, old_mode, old_blob) = old_file DCNL DCSP (new_path, new_mode, new_blob) = new_file DCNL DCSP old_path = patch_filename(old_path, 'a') DCNL DCSP new_path = patch_filename(new_path, 'b') DCNL DCSP def lines(blob): DCNL DCSP  DCSP if (blob is not None): DCNL DCSP  DCSP  DCSP return blob.splitlines() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return [] DCNL DCSP f.writelines(gen_diff_header((old_path, new_path), (old_mode, new_mode), (getattr(old_blob, 'id', None), getattr(new_blob, 'id', None)))) DCNL DCSP old_contents = lines(old_blob) DCNL DCSP new_contents = lines(new_blob) DCNL DCSP f.writelines(unified_diff(old_contents, new_contents, old_path, new_path))
def write_tree_diff(f, store, old_tree, new_tree, diff_binary=False): DCNL  DCSP changes = store.tree_changes(old_tree, new_tree) DCNL DCSP for ((oldpath, newpath), (oldmode, newmode), (oldsha, newsha)) in changes: DCNL DCSP  DCSP write_object_diff(f, store, (oldpath, oldmode, oldsha), (newpath, newmode, newsha), diff_binary=diff_binary)
def git_am_patch_split(f, encoding=None): DCNL  DCSP encoding = (encoding or getattr(f, 'encoding', 'ascii')) DCNL DCSP contents = f.read() DCNL DCSP if ((type(contents) is bytes) and getattr(email.parser, 'BytesParser', None)): DCNL DCSP  DCSP parser = email.parser.BytesParser() DCNL DCSP  DCSP msg = parser.parsebytes(contents) DCNL DCSP else: DCNL DCSP  DCSP parser = email.parser.Parser() DCNL DCSP  DCSP msg = parser.parsestr(contents) DCNL DCSP return parse_patch_message(msg, encoding)
def parse_patch_message(msg, encoding=None): DCNL  DCSP c = Commit() DCNL DCSP c.author = msg['from'].encode(encoding) DCNL DCSP c.committer = msg['from'].encode(encoding) DCNL DCSP try: DCNL DCSP  DCSP patch_tag_start = msg['subject'].index('[PATCH') DCNL DCSP except ValueError: DCNL DCSP  DCSP subject = msg['subject'] DCNL DCSP else: DCNL DCSP  DCSP close = msg['subject'].index('] DCSP ', patch_tag_start) DCNL DCSP  DCSP subject = msg['subject'][(close + 2):] DCNL DCSP c.message = (subject.replace('\n', '') + '\n').encode(encoding) DCNL DCSP first = True DCNL DCSP body = msg.get_payload(decode=True) DCNL DCSP lines = body.splitlines(True) DCNL DCSP line_iter = iter(lines) DCNL DCSP for l in line_iter: DCNL DCSP  DCSP if (l == '---\n'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if first: DCNL DCSP  DCSP  DCSP if l.startswith('From: DCSP '): DCNL DCSP  DCSP  DCSP  DCSP c.author = l[len('From: DCSP '):].rstrip() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP c.message += ('\n' + l) DCNL DCSP  DCSP  DCSP first = False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP c.message += l DCNL DCSP diff = '' DCNL DCSP for l in line_iter: DCNL DCSP  DCSP if (l == '-- DCSP \n'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP diff += l DCNL DCSP try: DCNL DCSP  DCSP version = next(line_iter).rstrip('\n') DCNL DCSP except StopIteration: DCNL DCSP  DCSP version = None DCNL DCSP return (c, diff, version)
def S_ISGITLINK(m): DCNL  DCSP return (stat.S_IFMT(m) == S_IFGITLINK)
def sha_to_hex(sha): DCNL  DCSP hexsha = binascii.hexlify(sha) DCNL DCSP assert (len(hexsha) == 40), ('Incorrect DCSP length DCSP of DCSP sha1 DCSP string: DCSP %d' % hexsha) DCNL DCSP return hexsha
def hex_to_sha(hex): DCNL  DCSP assert (len(hex) == 40), ('Incorrect DCSP length DCSP of DCSP hexsha: DCSP %s' % hex) DCNL DCSP try: DCNL DCSP  DCSP return binascii.unhexlify(hex) DCNL DCSP except TypeError as exc: DCNL DCSP  DCSP if (not isinstance(hex, bytes)): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP raise ValueError(exc.args[0])
def hex_to_filename(path, hex): DCNL  DCSP if (getattr(path, 'encode', None) is not None): DCNL DCSP  DCSP hex = hex.decode('ascii') DCNL DCSP dir = hex[:2] DCNL DCSP file = hex[2:] DCNL DCSP return os.path.join(path, dir, file)
def filename_to_hex(filename): DCNL  DCSP names = filename.rsplit(os.path.sep, 2)[(-2):] DCNL DCSP errmsg = ('Invalid DCSP object DCSP filename: DCSP %s' % filename) DCNL DCSP assert (len(names) == 2), errmsg DCNL DCSP (base, rest) = names DCNL DCSP assert ((len(base) == 2) and (len(rest) == 38)), errmsg DCNL DCSP hex = (base + rest).encode('ascii') DCNL DCSP hex_to_sha(hex) DCNL DCSP return hex
def object_header(num_type, length): DCNL  DCSP return (((object_class(num_type).type_name + ' DCSP ') + str(length).encode('ascii')) + '\x00')
def serializable_property(name, docstring=None): DCNL  DCSP def set(obj, value): DCNL DCSP  DCSP setattr(obj, ('_' + name), value) DCNL DCSP  DCSP obj._needs_serialization = True DCNL DCSP def get(obj): DCNL DCSP  DCSP return getattr(obj, ('_' + name)) DCNL DCSP return property(get, set, doc=docstring)
def object_class(type): DCNL  DCSP return _TYPE_MAP.get(type, None)
def check_hexsha(hex, error_msg): DCNL  DCSP if (not valid_hexsha(hex)): DCNL DCSP  DCSP raise ObjectFormatException(('%s DCSP %s' % (error_msg, hex)))
def check_identity(identity, error_msg): DCNL  DCSP email_start = identity.find('<') DCNL DCSP email_end = identity.find('>') DCNL DCSP if ((email_start < 0) or (email_end < 0) or (email_end <= email_start) or (identity.find('<', (email_start + 1)) >= 0) or (identity.find('>', (email_end + 1)) >= 0) or (not identity.endswith('>'))): DCNL DCSP  DCSP raise ObjectFormatException(error_msg)
def git_line(*items): DCNL  DCSP return (' DCSP '.join(items) + '\n')
def _parse_message(chunks): DCNL  DCSP f = BytesIO(''.join(chunks)) DCNL DCSP k = None DCNL DCSP v = '' DCNL DCSP eof = False DCNL DCSP for l in f: DCNL DCSP  DCSP if l.startswith(' DCSP '): DCNL DCSP  DCSP  DCSP v += l[1:] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (k is not None): DCNL DCSP  DCSP  DCSP  DCSP (yield (k, v.rstrip('\n'))) DCNL DCSP  DCSP  DCSP if (l == '\n'): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP (k, v) = l.split(' DCSP ', 1) DCNL DCSP else: DCNL DCSP  DCSP eof = True DCNL DCSP  DCSP if (k is not None): DCNL DCSP  DCSP  DCSP (yield (k, v.rstrip('\n'))) DCNL DCSP  DCSP (yield (None, None)) DCNL DCSP if (not eof): DCNL DCSP  DCSP (yield (None, f.read())) DCNL DCSP f.close()
def parse_tree(text, strict=False): DCNL  DCSP count = 0 DCNL DCSP l = len(text) DCNL DCSP while (count < l): DCNL DCSP  DCSP mode_end = text.index(' DCSP ', count) DCNL DCSP  DCSP mode_text = text[count:mode_end] DCNL DCSP  DCSP if (strict and mode_text.startswith('0')): DCNL DCSP  DCSP  DCSP raise ObjectFormatException(("Invalid DCSP mode DCSP '%s'" % mode_text)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP mode = int(mode_text, 8) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise ObjectFormatException(("Invalid DCSP mode DCSP '%s'" % mode_text)) DCNL DCSP  DCSP name_end = text.index('\x00', mode_end) DCNL DCSP  DCSP name = text[(mode_end + 1):name_end] DCNL DCSP  DCSP count = (name_end + 21) DCNL DCSP  DCSP sha = text[(name_end + 1):count] DCNL DCSP  DCSP if (len(sha) != 20): DCNL DCSP  DCSP  DCSP raise ObjectFormatException('Sha DCSP has DCSP invalid DCSP length') DCNL DCSP  DCSP hexsha = sha_to_hex(sha) DCNL DCSP  DCSP (yield (name, mode, hexsha))
def serialize_tree(items): DCNL  DCSP for (name, mode, hexsha) in items: DCNL DCSP  DCSP (yield ((((('%04o' % mode).encode('ascii') + ' DCSP ') + name) + '\x00') + hex_to_sha(hexsha)))
def sorted_tree_items(entries, name_order): DCNL  DCSP key_func = ((name_order and key_entry_name_order) or key_entry) DCNL DCSP for (name, entry) in sorted(entries.items(), key=key_func): DCNL DCSP  DCSP (mode, hexsha) = entry DCNL DCSP  DCSP mode = int(mode) DCNL DCSP  DCSP if (not isinstance(hexsha, bytes)): DCNL DCSP  DCSP  DCSP raise TypeError(('Expected DCSP bytes DCSP for DCSP SHA, DCSP got DCSP %r' % hexsha)) DCNL DCSP  DCSP (yield TreeEntry(name, mode, hexsha))
def key_entry(entry): DCNL  DCSP (name, value) = entry DCNL DCSP if stat.S_ISDIR(value[0]): DCNL DCSP  DCSP name += '/' DCNL DCSP return name
def key_entry_name_order(entry): DCNL  DCSP return entry[0]
def pretty_format_tree_entry(name, mode, hexsha, encoding='utf-8'): DCNL  DCSP if (mode & stat.S_IFDIR): DCNL DCSP  DCSP kind = 'tree' DCNL DCSP else: DCNL DCSP  DCSP kind = 'blob' DCNL DCSP return ('%04o DCSP %s DCSP %s DCTB %s\n' % (mode, kind, hexsha.decode('ascii'), name.decode(encoding, 'replace')))
def parse_timezone(text): DCNL  DCSP if (not (text[0] in '+-')): DCNL DCSP  DCSP raise ValueError(('Timezone DCSP must DCSP start DCSP with DCSP + DCSP or DCSP - DCSP (%(text)s)' % vars())) DCNL DCSP sign = text[:1] DCNL DCSP offset = int(text[1:]) DCNL DCSP if (sign == '-'): DCNL DCSP  DCSP offset = (- offset) DCNL DCSP unnecessary_negative_timezone = ((offset >= 0) and (sign == '-')) DCNL DCSP signum = (((offset < 0) and (-1)) or 1) DCNL DCSP offset = abs(offset) DCNL DCSP hours = int((offset / 100)) DCNL DCSP minutes = (offset % 100) DCNL DCSP return ((signum * ((hours * 3600) + (minutes * 60))), unnecessary_negative_timezone)
def format_timezone(offset, unnecessary_negative_timezone=False): DCNL  DCSP if ((offset % 60) != 0): DCNL DCSP  DCSP raise ValueError('Unable DCSP to DCSP handle DCSP non-minute DCSP offset.') DCNL DCSP if ((offset < 0) or unnecessary_negative_timezone): DCNL DCSP  DCSP sign = '-' DCNL DCSP  DCSP offset = (- offset) DCNL DCSP else: DCNL DCSP  DCSP sign = '+' DCNL DCSP return ('%c%02d%02d' % (sign, (offset / 3600), ((offset / 60) % 60))).encode('ascii')
def parse_commit(chunks): DCNL  DCSP parents = [] DCNL DCSP extra = [] DCNL DCSP tree = None DCNL DCSP author_info = (None, None, (None, None)) DCNL DCSP commit_info = (None, None, (None, None)) DCNL DCSP encoding = None DCNL DCSP mergetag = [] DCNL DCSP message = None DCNL DCSP gpgsig = None DCNL DCSP for (field, value) in _parse_message(chunks): DCNL DCSP  DCSP if (field == _TREE_HEADER): DCNL DCSP  DCSP  DCSP tree = value DCNL DCSP  DCSP elif (field == _PARENT_HEADER): DCNL DCSP  DCSP  DCSP parents.append(value) DCNL DCSP  DCSP elif (field == _AUTHOR_HEADER): DCNL DCSP  DCSP  DCSP (author, timetext, timezonetext) = value.rsplit(' DCSP ', 2) DCNL DCSP  DCSP  DCSP author_time = int(timetext) DCNL DCSP  DCSP  DCSP author_info = (author, author_time, parse_timezone(timezonetext)) DCNL DCSP  DCSP elif (field == _COMMITTER_HEADER): DCNL DCSP  DCSP  DCSP (committer, timetext, timezonetext) = value.rsplit(' DCSP ', 2) DCNL DCSP  DCSP  DCSP commit_time = int(timetext) DCNL DCSP  DCSP  DCSP commit_info = (committer, commit_time, parse_timezone(timezonetext)) DCNL DCSP  DCSP elif (field == _ENCODING_HEADER): DCNL DCSP  DCSP  DCSP encoding = value DCNL DCSP  DCSP elif (field == _MERGETAG_HEADER): DCNL DCSP  DCSP  DCSP mergetag.append(Tag.from_string((value + '\n'))) DCNL DCSP  DCSP elif (field == _GPGSIG_HEADER): DCNL DCSP  DCSP  DCSP gpgsig = value DCNL DCSP  DCSP elif (field is None): DCNL DCSP  DCSP  DCSP message = value DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP extra.append((field, value)) DCNL DCSP return (tree, parents, author_info, commit_info, encoding, mergetag, gpgsig, message, extra)
def tree_lookup_path(lookup_obj, root_sha, path): DCNL  DCSP tree = lookup_obj(root_sha) DCNL DCSP if (not isinstance(tree, Tree)): DCNL DCSP  DCSP raise NotTreeError(root_sha) DCNL DCSP return tree.lookup_path(lookup_obj, path)
def _collect_filetree_revs(obj_store, tree_sha, kset): DCNL  DCSP filetree = obj_store[tree_sha] DCNL DCSP for (name, mode, sha) in filetree.iteritems(): DCNL DCSP  DCSP if ((not S_ISGITLINK(mode)) and (sha not in kset)): DCNL DCSP  DCSP  DCSP kset.add(sha) DCNL DCSP  DCSP  DCSP if stat.S_ISDIR(mode): DCNL DCSP  DCSP  DCSP  DCSP _collect_filetree_revs(obj_store, sha, kset)
def _split_commits_and_tags(obj_store, lst, ignore_unknown=False): DCNL  DCSP commits = set() DCNL DCSP tags = set() DCNL DCSP others = set() DCNL DCSP for e in lst: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP o = obj_store[e] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP if (not ignore_unknown): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if isinstance(o, Commit): DCNL DCSP  DCSP  DCSP  DCSP commits.add(e) DCNL DCSP  DCSP  DCSP elif isinstance(o, Tag): DCNL DCSP  DCSP  DCSP  DCSP tags.add(e) DCNL DCSP  DCSP  DCSP  DCSP tagged = o.object[1] DCNL DCSP  DCSP  DCSP  DCSP (c, t, o) = _split_commits_and_tags(obj_store, [tagged], ignore_unknown=ignore_unknown) DCNL DCSP  DCSP  DCSP  DCSP commits |= c DCNL DCSP  DCSP  DCSP  DCSP tags |= t DCNL DCSP  DCSP  DCSP  DCSP others |= o DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP others.add(e) DCNL DCSP return (commits, tags, others)
def ensure_dir_exists(dirname): DCNL  DCSP try: DCNL DCSP  DCSP os.makedirs(dirname) DCNL DCSP except OSError as e: DCNL DCSP  DCSP if (e.errno != errno.EEXIST): DCNL DCSP  DCSP  DCSP raise
def _fancy_rename(oldname, newname): DCNL  DCSP if (not os.path.exists(newname)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP os.rename(oldname, newname) DCNL DCSP  DCSP except OSError: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP (fd, tmpfile) = tempfile.mkstemp('.tmp', prefix=(oldname + '.'), dir='.') DCNL DCSP  DCSP os.close(fd) DCNL DCSP  DCSP os.remove(tmpfile) DCNL DCSP except OSError: DCNL DCSP  DCSP raise DCNL DCSP try: DCNL DCSP  DCSP os.rename(newname, tmpfile) DCNL DCSP except OSError: DCNL DCSP  DCSP raise DCNL DCSP try: DCNL DCSP  DCSP os.rename(oldname, newname) DCNL DCSP except OSError: DCNL DCSP  DCSP os.rename(tmpfile, newname) DCNL DCSP  DCSP raise DCNL DCSP os.remove(tmpfile)
def GitFile(filename, mode='rb', bufsize=(-1)): DCNL  DCSP if ('a' in mode): DCNL DCSP  DCSP raise IOError('append DCSP mode DCSP not DCSP supported DCSP for DCSP Git DCSP files') DCNL DCSP if ('+' in mode): DCNL DCSP  DCSP raise IOError('read/write DCSP mode DCSP not DCSP supported DCSP for DCSP Git DCSP files') DCNL DCSP if ('b' not in mode): DCNL DCSP  DCSP raise IOError('text DCSP mode DCSP not DCSP supported DCSP for DCSP Git DCSP files') DCNL DCSP if ('w' in mode): DCNL DCSP  DCSP return _GitFile(filename, mode, bufsize) DCNL DCSP else: DCNL DCSP  DCSP return io.open(filename, mode, bufsize)
def _topo_reorder(entries, get_parents=(lambda commit: commit.parents)): DCNL  DCSP todo = collections.deque() DCNL DCSP pending = {} DCNL DCSP num_children = defaultdict(int) DCNL DCSP for entry in entries: DCNL DCSP  DCSP todo.append(entry) DCNL DCSP  DCSP for p in get_parents(entry.commit): DCNL DCSP  DCSP  DCSP num_children[p] += 1 DCNL DCSP while todo: DCNL DCSP  DCSP entry = todo.popleft() DCNL DCSP  DCSP commit = entry.commit DCNL DCSP  DCSP commit_id = commit.id DCNL DCSP  DCSP if num_children[commit_id]: DCNL DCSP  DCSP  DCSP pending[commit_id] = entry DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP for parent_id in get_parents(commit): DCNL DCSP  DCSP  DCSP num_children[parent_id] -= 1 DCNL DCSP  DCSP  DCSP if (not num_children[parent_id]): DCNL DCSP  DCSP  DCSP  DCSP parent_entry = pending.pop(parent_id, None) DCNL DCSP  DCSP  DCSP  DCSP if parent_entry: DCNL DCSP  DCSP  DCSP  DCSP  DCSP todo.appendleft(parent_entry) DCNL DCSP  DCSP (yield entry)
def open_repo(path_or_repo): DCNL  DCSP if isinstance(path_or_repo, BaseRepo): DCNL DCSP  DCSP return path_or_repo DCNL DCSP return Repo(path_or_repo)
@contextmanager DCNL def _noop_context_manager(obj): DCNL  DCSP (yield obj)
def open_repo_closing(path_or_repo): DCNL  DCSP if isinstance(path_or_repo, BaseRepo): DCNL DCSP  DCSP return _noop_context_manager(path_or_repo) DCNL DCSP return closing(Repo(path_or_repo))
def archive(repo, committish=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream): DCNL  DCSP if (committish is None): DCNL DCSP  DCSP committish = 'HEAD' DCNL DCSP with open_repo_closing(repo) as repo_obj: DCNL DCSP  DCSP c = repo_obj[committish] DCNL DCSP  DCSP tree = c.tree DCNL DCSP  DCSP for chunk in tar_stream(repo_obj.object_store, repo_obj.object_store[c.tree], c.commit_time): DCNL DCSP  DCSP  DCSP outstream.write(chunk)
def update_server_info(repo='.'): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP server_update_server_info(r)
def symbolic_ref(repo, ref_name, force=False): DCNL  DCSP with open_repo_closing(repo) as repo_obj: DCNL DCSP  DCSP ref_path = ('refs/heads/' + ref_name) DCNL DCSP  DCSP if ((not force) and (ref_path not in repo_obj.refs.keys())): DCNL DCSP  DCSP  DCSP raise ValueError(('fatal: DCSP ref DCSP `%s` DCSP is DCSP not DCSP a DCSP ref' % ref_name)) DCNL DCSP  DCSP repo_obj.refs.set_symbolic_ref('HEAD', ref_path)
def commit(repo='.', message=None, author=None, committer=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP return r.do_commit(message=message, author=author, committer=committer)
def commit_tree(repo, tree, message=None, author=None, committer=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP return r.do_commit(message=message, tree=tree, committer=committer, author=author)
def init(path='.', bare=False): DCNL  DCSP if (not os.path.exists(path)): DCNL DCSP  DCSP os.mkdir(path) DCNL DCSP if bare: DCNL DCSP  DCSP return Repo.init_bare(path) DCNL DCSP else: DCNL DCSP  DCSP return Repo.init(path)
def clone(source, target=None, bare=False, checkout=None, errstream=default_bytes_err_stream, outstream=None, origin='origin'): DCNL  DCSP if (outstream is not None): DCNL DCSP  DCSP import warnings DCNL DCSP  DCSP warnings.warn('outstream= DCSP has DCSP been DCSP deprecated DCSP in DCSP favour DCSP of DCSP errstream=.', DeprecationWarning, stacklevel=3) DCNL DCSP  DCSP errstream = outstream DCNL DCSP if (checkout is None): DCNL DCSP  DCSP checkout = (not bare) DCNL DCSP if (checkout and bare): DCNL DCSP  DCSP raise ValueError('checkout DCSP and DCSP bare DCSP are DCSP incompatible') DCNL DCSP (client, host_path) = get_transport_and_path(source) DCNL DCSP if (target is None): DCNL DCSP  DCSP target = host_path.split('/')[(-1)] DCNL DCSP if (not os.path.exists(target)): DCNL DCSP  DCSP os.mkdir(target) DCNL DCSP if bare: DCNL DCSP  DCSP r = Repo.init_bare(target) DCNL DCSP else: DCNL DCSP  DCSP r = Repo.init(target) DCNL DCSP try: DCNL DCSP  DCSP remote_refs = client.fetch(host_path, r, determine_wants=r.object_store.determine_wants_all, progress=errstream.write) DCNL DCSP  DCSP r.refs.import_refs(('refs/remotes/' + origin), {n[len('refs/heads/'):]: v for (n, v) in remote_refs.items() if n.startswith('refs/heads/')}) DCNL DCSP  DCSP r.refs.import_refs('refs/tags', {n[len('refs/tags/'):]: v for (n, v) in remote_refs.items() if (n.startswith('refs/tags/') and (not n.endswith(ANNOTATED_TAG_SUFFIX)))}) DCNL DCSP  DCSP r['HEAD'] = remote_refs['HEAD'] DCNL DCSP  DCSP target_config = r.get_config() DCNL DCSP  DCSP if (not isinstance(source, bytes)): DCNL DCSP  DCSP  DCSP source = source.encode(DEFAULT_ENCODING) DCNL DCSP  DCSP target_config.set(('remote', 'origin'), 'url', source) DCNL DCSP  DCSP target_config.set(('remote', 'origin'), 'fetch', '+refs/heads/*:refs/remotes/origin/*') DCNL DCSP  DCSP target_config.write_to_path() DCNL DCSP  DCSP if checkout: DCNL DCSP  DCSP  DCSP errstream.write('Checking DCSP out DCSP HEAD\n') DCNL DCSP  DCSP  DCSP r.reset_index() DCNL DCSP except: DCNL DCSP  DCSP r.close() DCNL DCSP  DCSP raise DCNL DCSP return r
def add(repo='.', paths=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP if (not paths): DCNL DCSP  DCSP  DCSP paths = [] DCNL DCSP  DCSP  DCSP for (dirpath, dirnames, filenames) in os.walk(r.path): DCNL DCSP  DCSP  DCSP  DCSP if ('.git' in dirnames): DCNL DCSP  DCSP  DCSP  DCSP  DCSP dirnames.remove('.git') DCNL DCSP  DCSP  DCSP  DCSP for filename in filenames: DCNL DCSP  DCSP  DCSP  DCSP  DCSP paths.append(os.path.join(dirpath[(len(r.path) + 1):], filename)) DCNL DCSP  DCSP r.stage(paths)
def rm(repo='.', paths=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP index = r.open_index() DCNL DCSP  DCSP for p in paths: DCNL DCSP  DCSP  DCSP del index[p.encode(sys.getfilesystemencoding())] DCNL DCSP  DCSP index.write()
def print_commit(commit, decode, outstream=sys.stdout): DCNL  DCSP outstream.write((('-' * 50) + '\n')) DCNL DCSP outstream.write((('commit: DCSP ' + commit.id.decode('ascii')) + '\n')) DCNL DCSP if (len(commit.parents) > 1): DCNL DCSP  DCSP outstream.write((('merge: DCSP ' + '...'.join([c.decode('ascii') for c in commit.parents[1:]])) + '\n')) DCNL DCSP outstream.write((('Author: DCSP ' + decode(commit.author)) + '\n')) DCNL DCSP if (commit.author != commit.committer): DCNL DCSP  DCSP outstream.write((('Committer: DCSP ' + decode(commit.committer)) + '\n')) DCNL DCSP time_tuple = time.gmtime((commit.author_time + commit.author_timezone)) DCNL DCSP time_str = time.strftime('%a DCSP %b DCSP %d DCSP %Y DCSP %H:%M:%S', time_tuple) DCNL DCSP timezone_str = format_timezone(commit.author_timezone).decode('ascii') DCNL DCSP outstream.write((((('Date: DCSP  DCSP  DCSP ' + time_str) + ' DCSP ') + timezone_str) + '\n')) DCNL DCSP outstream.write('\n') DCNL DCSP outstream.write((decode(commit.message) + '\n')) DCNL DCSP outstream.write('\n')
def print_tag(tag, decode, outstream=sys.stdout): DCNL  DCSP outstream.write((('Tagger: DCSP ' + decode(tag.tagger)) + '\n')) DCNL DCSP outstream.write((('Date: DCSP  DCSP  DCSP ' + decode(tag.tag_time)) + '\n')) DCNL DCSP outstream.write('\n') DCNL DCSP outstream.write((decode(tag.message) + '\n')) DCNL DCSP outstream.write('\n')
def show_blob(repo, blob, decode, outstream=sys.stdout): DCNL  DCSP outstream.write(decode(blob.data))
def show_commit(repo, commit, decode, outstream=sys.stdout): DCNL  DCSP print_commit(commit, decode=decode, outstream=outstream) DCNL DCSP parent_commit = repo[commit.parents[0]] DCNL DCSP write_tree_diff(outstream, repo.object_store, parent_commit.tree, commit.tree)
def show_tree(repo, tree, decode, outstream=sys.stdout): DCNL  DCSP for n in tree: DCNL DCSP  DCSP outstream.write((decode(n) + '\n'))
def show_tag(repo, tag, decode, outstream=sys.stdout): DCNL  DCSP print_tag(tag, decode, outstream) DCNL DCSP show_object(repo, repo[tag.object[1]], outstream)
def print_name_status(changes): DCNL  DCSP for change in changes: DCNL DCSP  DCSP if (not change): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (type(change) is list): DCNL DCSP  DCSP  DCSP change = change[0] DCNL DCSP  DCSP if (change.type == CHANGE_ADD): DCNL DCSP  DCSP  DCSP path1 = change.new.path DCNL DCSP  DCSP  DCSP path2 = '' DCNL DCSP  DCSP  DCSP kind = 'A' DCNL DCSP  DCSP elif (change.type == CHANGE_DELETE): DCNL DCSP  DCSP  DCSP path1 = change.old.path DCNL DCSP  DCSP  DCSP path2 = '' DCNL DCSP  DCSP  DCSP kind = 'D' DCNL DCSP  DCSP elif (change.type == CHANGE_MODIFY): DCNL DCSP  DCSP  DCSP path1 = change.new.path DCNL DCSP  DCSP  DCSP path2 = '' DCNL DCSP  DCSP  DCSP kind = 'M' DCNL DCSP  DCSP elif (change.type in RENAME_CHANGE_TYPES): DCNL DCSP  DCSP  DCSP path1 = change.old.path DCNL DCSP  DCSP  DCSP path2 = change.new.path DCNL DCSP  DCSP  DCSP if (change.type == CHANGE_RENAME): DCNL DCSP  DCSP  DCSP  DCSP kind = 'R' DCNL DCSP  DCSP  DCSP elif (change.type == CHANGE_COPY): DCNL DCSP  DCSP  DCSP  DCSP kind = 'C' DCNL DCSP  DCSP (yield ('%-8s%-20s%-20s' % (kind, path1, path2)))
def log(repo='.', paths=None, outstream=sys.stdout, max_entries=None, reverse=False, name_status=False): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP walker = r.get_walker(max_entries=max_entries, paths=paths, reverse=reverse) DCNL DCSP  DCSP for entry in walker: DCNL DCSP  DCSP  DCSP decode = (lambda x: commit_decode(entry.commit, x)) DCNL DCSP  DCSP  DCSP print_commit(entry.commit, decode, outstream) DCNL DCSP  DCSP  DCSP if name_status: DCNL DCSP  DCSP  DCSP  DCSP outstream.writelines([(l + '\n') for l in print_name_status(entry.changes())])
def show(repo='.', objects=None, outstream=sys.stdout, default_encoding=DEFAULT_ENCODING): DCNL  DCSP if (objects is None): DCNL DCSP  DCSP objects = ['HEAD'] DCNL DCSP if (not isinstance(objects, list)): DCNL DCSP  DCSP objects = [objects] DCNL DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP for objectish in objects: DCNL DCSP  DCSP  DCSP o = parse_object(r, objectish) DCNL DCSP  DCSP  DCSP if isinstance(o, Commit): DCNL DCSP  DCSP  DCSP  DCSP decode = (lambda x: commit_decode(o, x, default_encoding)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP decode = (lambda x: x.decode(default_encoding)) DCNL DCSP  DCSP  DCSP show_object(r, o, decode, outstream)
def diff_tree(repo, old_tree, new_tree, outstream=sys.stdout): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP write_tree_diff(outstream, r.object_store, old_tree, new_tree)
def rev_list(repo, commits, outstream=sys.stdout): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP for entry in r.get_walker(include=[r[c].id for c in commits]): DCNL DCSP  DCSP  DCSP outstream.write((entry.commit.id + '\n'))
def tag_create(repo, tag, author=None, message=None, annotated=False, objectish='HEAD', tag_time=None, tag_timezone=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP object = parse_object(r, objectish) DCNL DCSP  DCSP if annotated: DCNL DCSP  DCSP  DCSP tag_obj = Tag() DCNL DCSP  DCSP  DCSP if (author is None): DCNL DCSP  DCSP  DCSP  DCSP author = r._get_user_identity() DCNL DCSP  DCSP  DCSP tag_obj.tagger = author DCNL DCSP  DCSP  DCSP tag_obj.message = message DCNL DCSP  DCSP  DCSP tag_obj.name = tag DCNL DCSP  DCSP  DCSP tag_obj.object = (type(object), object.id) DCNL DCSP  DCSP  DCSP if (tag_time is None): DCNL DCSP  DCSP  DCSP  DCSP tag_time = int(time.time()) DCNL DCSP  DCSP  DCSP tag_obj.tag_time = tag_time DCNL DCSP  DCSP  DCSP if (tag_timezone is None): DCNL DCSP  DCSP  DCSP  DCSP tag_timezone = 0 DCNL DCSP  DCSP  DCSP elif isinstance(tag_timezone, str): DCNL DCSP  DCSP  DCSP  DCSP tag_timezone = parse_timezone(tag_timezone) DCNL DCSP  DCSP  DCSP tag_obj.tag_timezone = tag_timezone DCNL DCSP  DCSP  DCSP r.object_store.add_object(tag_obj) DCNL DCSP  DCSP  DCSP tag_id = tag_obj.id DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP tag_id = object.id DCNL DCSP  DCSP r.refs[('refs/tags/' + tag)] = tag_id
def tag_list(repo, outstream=sys.stdout): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP tags = list(r.refs.as_dict('refs/tags')) DCNL DCSP  DCSP tags.sort() DCNL DCSP  DCSP return tags
def tag_delete(repo, name): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP if isinstance(name, bytes): DCNL DCSP  DCSP  DCSP names = [name] DCNL DCSP  DCSP elif isinstance(name, list): DCNL DCSP  DCSP  DCSP names = name DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError(('Unexpected DCSP tag DCSP name DCSP type DCSP %r' % name)) DCNL DCSP  DCSP for name in names: DCNL DCSP  DCSP  DCSP del r.refs[('refs/tags/' + name)]
def reset(repo, mode, committish='HEAD'): DCNL  DCSP if (mode != 'hard'): DCNL DCSP  DCSP raise ValueError('hard DCSP is DCSP the DCSP only DCSP mode DCSP currently DCSP supported') DCNL DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP tree = r[committish].tree DCNL DCSP  DCSP r.reset_index(tree)
def push(repo, remote_location, refspecs=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP (client, path) = get_transport_and_path(remote_location) DCNL DCSP  DCSP selected_refs = [] DCNL DCSP  DCSP def update_refs(refs): DCNL DCSP  DCSP  DCSP selected_refs.extend(parse_reftuples(r.refs, refs, refspecs)) DCNL DCSP  DCSP  DCSP new_refs = {} DCNL DCSP  DCSP  DCSP for (lh, rh, force) in selected_refs: DCNL DCSP  DCSP  DCSP  DCSP if (lh is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_refs[rh] = ZERO_SHA DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_refs[rh] = r.refs[lh] DCNL DCSP  DCSP  DCSP return new_refs DCNL DCSP  DCSP err_encoding = (getattr(errstream, 'encoding', None) or DEFAULT_ENCODING) DCNL DCSP  DCSP remote_location_bytes = client.get_url(path).encode(err_encoding) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP client.send_pack(path, update_refs, r.object_store.generate_pack_contents, progress=errstream.write) DCNL DCSP  DCSP  DCSP errstream.write((('Push DCSP to DCSP ' + remote_location_bytes) + ' DCSP successful.\n')) DCNL DCSP  DCSP except (UpdateRefsError, SendPackError) as e: DCNL DCSP  DCSP  DCSP errstream.write((((('Push DCSP to DCSP ' + remote_location_bytes) + ' DCSP failed DCSP -> DCSP ') + e.message.encode(err_encoding)) + '\n'))
def pull(repo, remote_location, refspecs=None, outstream=default_bytes_out_stream, errstream=default_bytes_err_stream): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP if (refspecs is None): DCNL DCSP  DCSP  DCSP refspecs = ['HEAD'] DCNL DCSP  DCSP selected_refs = [] DCNL DCSP  DCSP def determine_wants(remote_refs): DCNL DCSP  DCSP  DCSP selected_refs.extend(parse_reftuples(remote_refs, r.refs, refspecs)) DCNL DCSP  DCSP  DCSP return [remote_refs[lh] for (lh, rh, force) in selected_refs] DCNL DCSP  DCSP (client, path) = get_transport_and_path(remote_location) DCNL DCSP  DCSP remote_refs = client.fetch(path, r, progress=errstream.write, determine_wants=determine_wants) DCNL DCSP  DCSP for (lh, rh, force) in selected_refs: DCNL DCSP  DCSP  DCSP r.refs[rh] = remote_refs[lh] DCNL DCSP  DCSP if selected_refs: DCNL DCSP  DCSP  DCSP r['HEAD'] = remote_refs[selected_refs[0][1]] DCNL DCSP  DCSP tree = r['HEAD'].tree DCNL DCSP  DCSP r.reset_index()
def status(repo='.'): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP tracked_changes = get_tree_changes(r) DCNL DCSP  DCSP unstaged_changes = list(get_unstaged_changes(r.open_index(), r.path)) DCNL DCSP  DCSP untracked_changes = [] DCNL DCSP  DCSP return GitStatus(tracked_changes, unstaged_changes, untracked_changes)
def get_tree_changes(repo): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP index = r.open_index() DCNL DCSP  DCSP tracked_changes = {'add': [], 'delete': [], 'modify': []} DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP tree_id = r['HEAD'].tree DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP tree_id = None DCNL DCSP  DCSP for change in index.changes_from_tree(r.object_store, tree_id): DCNL DCSP  DCSP  DCSP if (not change[0][0]): DCNL DCSP  DCSP  DCSP  DCSP tracked_changes['add'].append(change[0][1]) DCNL DCSP  DCSP  DCSP elif (not change[0][1]): DCNL DCSP  DCSP  DCSP  DCSP tracked_changes['delete'].append(change[0][0]) DCNL DCSP  DCSP  DCSP elif (change[0][0] == change[0][1]): DCNL DCSP  DCSP  DCSP  DCSP tracked_changes['modify'].append(change[0][0]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise AssertionError('git DCSP mv DCSP ops DCSP not DCSP yet DCSP supported') DCNL DCSP  DCSP return tracked_changes
def daemon(path='.', address=None, port=None): DCNL  DCSP backend = FileSystemBackend(path) DCNL DCSP server = TCPGitServer(backend, address, port) DCNL DCSP server.serve_forever()
def web_daemon(path='.', address=None, port=None): DCNL  DCSP from dulwich.web import make_wsgi_chain, make_server, WSGIRequestHandlerLogger, WSGIServerLogger DCNL DCSP backend = FileSystemBackend(path) DCNL DCSP app = make_wsgi_chain(backend) DCNL DCSP server = make_server(address, port, app, handler_class=WSGIRequestHandlerLogger, server_class=WSGIServerLogger) DCNL DCSP server.serve_forever()
def upload_pack(path='.', inf=None, outf=None): DCNL  DCSP if (outf is None): DCNL DCSP  DCSP outf = getattr(sys.stdout, 'buffer', sys.stdout) DCNL DCSP if (inf is None): DCNL DCSP  DCSP inf = getattr(sys.stdin, 'buffer', sys.stdin) DCNL DCSP backend = FileSystemBackend(path) DCNL DCSP def send_fn(data): DCNL DCSP  DCSP outf.write(data) DCNL DCSP  DCSP outf.flush() DCNL DCSP proto = Protocol(inf.read, send_fn) DCNL DCSP handler = UploadPackHandler(backend, [path], proto) DCNL DCSP handler.handle() DCNL DCSP return 0
def receive_pack(path='.', inf=None, outf=None): DCNL  DCSP if (outf is None): DCNL DCSP  DCSP outf = getattr(sys.stdout, 'buffer', sys.stdout) DCNL DCSP if (inf is None): DCNL DCSP  DCSP inf = getattr(sys.stdin, 'buffer', sys.stdin) DCNL DCSP backend = FileSystemBackend(path) DCNL DCSP def send_fn(data): DCNL DCSP  DCSP outf.write(data) DCNL DCSP  DCSP outf.flush() DCNL DCSP proto = Protocol(inf.read, send_fn) DCNL DCSP handler = ReceivePackHandler(backend, [path], proto) DCNL DCSP handler.handle() DCNL DCSP return 0
def branch_delete(repo, name): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP if isinstance(name, bytes): DCNL DCSP  DCSP  DCSP names = [name] DCNL DCSP  DCSP elif isinstance(name, list): DCNL DCSP  DCSP  DCSP names = name DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError(('Unexpected DCSP branch DCSP name DCSP type DCSP %r' % name)) DCNL DCSP  DCSP for name in names: DCNL DCSP  DCSP  DCSP del r.refs[('refs/heads/' + name)]
def branch_create(repo, name, objectish=None, force=False): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP if isinstance(name, bytes): DCNL DCSP  DCSP  DCSP names = [name] DCNL DCSP  DCSP elif isinstance(name, list): DCNL DCSP  DCSP  DCSP names = name DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError(('Unexpected DCSP branch DCSP name DCSP type DCSP %r' % name)) DCNL DCSP  DCSP if (objectish is None): DCNL DCSP  DCSP  DCSP objectish = 'HEAD' DCNL DCSP  DCSP object = parse_object(r, objectish) DCNL DCSP  DCSP refname = ('refs/heads/' + name) DCNL DCSP  DCSP if ((refname in r.refs) and (not force)): DCNL DCSP  DCSP  DCSP raise KeyError(('Branch DCSP with DCSP name DCSP %s DCSP already DCSP exists.' % name)) DCNL DCSP  DCSP r.refs[refname] = object.id
def branch_list(repo): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP return r.refs.keys(base='refs/heads/')
def fetch(repo, remote_location, outstream=sys.stdout, errstream=default_bytes_err_stream): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP (client, path) = get_transport_and_path(remote_location) DCNL DCSP  DCSP remote_refs = client.fetch(path, r, progress=errstream.write) DCNL DCSP return remote_refs
def ls_remote(remote): DCNL  DCSP (client, host_path) = get_transport_and_path(remote) DCNL DCSP return client.get_refs(host_path)
def repack(repo): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP r.object_store.pack_loose_objects()
def pack_objects(repo, object_ids, packf, idxf, delta_window_size=None): DCNL  DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP (entries, data_sum) = write_pack_objects(packf, r.object_store.iter_shas(((oid, None) for oid in object_ids)), delta_window_size=delta_window_size) DCNL DCSP if (idxf is not None): DCNL DCSP  DCSP entries = [(k, v[0], v[1]) for (k, v) in entries.items()] DCNL DCSP  DCSP entries.sort() DCNL DCSP  DCSP write_pack_index(idxf, entries, data_sum)
def ls_tree(repo, tree_ish=None, outstream=sys.stdout, recursive=False, name_only=False): DCNL  DCSP def list_tree(store, treeid, base): DCNL DCSP  DCSP for (name, mode, sha) in store[treeid].iteritems(): DCNL DCSP  DCSP  DCSP if base: DCNL DCSP  DCSP  DCSP  DCSP name = posixpath.join(base, name) DCNL DCSP  DCSP  DCSP if name_only: DCNL DCSP  DCSP  DCSP  DCSP outstream.write((name + '\n')) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP outstream.write(pretty_format_tree_entry(name, mode, sha)) DCNL DCSP  DCSP  DCSP if stat.S_ISDIR(mode): DCNL DCSP  DCSP  DCSP  DCSP list_tree(store, sha, name) DCNL DCSP if (tree_ish is None): DCNL DCSP  DCSP tree_ish = 'HEAD' DCNL DCSP with open_repo_closing(repo) as r: DCNL DCSP  DCSP c = r[tree_ish] DCNL DCSP  DCSP treeid = c.tree DCNL DCSP  DCSP list_tree(r.object_store, treeid, '')
def _fileno_can_read(fileno): DCNL  DCSP return (len(select.select([fileno], [], [], 0)[0]) > 0)
def find_git_command(): DCNL  DCSP if (sys.platform == 'win32'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP import win32api DCNL DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP return ['cmd', '/c', 'git'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (status, git) = win32api.FindExecutable('git') DCNL DCSP  DCSP  DCSP return [git] DCNL DCSP else: DCNL DCSP  DCSP return ['git']
def get_transport_and_path_from_url(url, config=None, **kwargs): DCNL  DCSP parsed = urlparse.urlparse(url) DCNL DCSP if (parsed.scheme == 'git'): DCNL DCSP  DCSP return (TCPGitClient.from_parsedurl(parsed, **kwargs), parsed.path) DCNL DCSP elif (parsed.scheme in ('git+ssh', 'ssh')): DCNL DCSP  DCSP path = parsed.path DCNL DCSP  DCSP if path.startswith('/'): DCNL DCSP  DCSP  DCSP path = parsed.path[1:] DCNL DCSP  DCSP return (SSHGitClient.from_parsedurl(parsed, **kwargs), path) DCNL DCSP elif (parsed.scheme in ('http', 'https')): DCNL DCSP  DCSP return (HttpGitClient.from_parsedurl(parsed, config=config, **kwargs), parsed.path) DCNL DCSP elif (parsed.scheme == 'file'): DCNL DCSP  DCSP return (default_local_git_client_cls.from_parsedurl(parsed, **kwargs), parsed.path) DCNL DCSP raise ValueError(("unknown DCSP scheme DCSP '%s'" % parsed.scheme))
def get_transport_and_path(location, **kwargs): DCNL  DCSP try: DCNL DCSP  DCSP return get_transport_and_path_from_url(location, **kwargs) DCNL DCSP except ValueError: DCNL DCSP  DCSP pass DCNL DCSP if ((sys.platform == 'win32') and location[0].isalpha() and (location[1:3] == ':\\')): DCNL DCSP  DCSP return (default_local_git_client_cls(**kwargs), location) DCNL DCSP if ((':' in location) and (not ('@' in location))): DCNL DCSP  DCSP (hostname, path) = location.split(':', 1) DCNL DCSP  DCSP return (SSHGitClient(hostname, **kwargs), path) DCNL DCSP elif (':' in location): DCNL DCSP  DCSP (user_host, path) = location.split(':', 1) DCNL DCSP  DCSP if ('@' in user_host): DCNL DCSP  DCSP  DCSP (user, host) = user_host.rsplit('@', 1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP user = None DCNL DCSP  DCSP  DCSP host = user_host DCNL DCSP  DCSP return (SSHGitClient(host, username=user, **kwargs), path) DCNL DCSP return (default_local_git_client_cls(**kwargs), location)
def parse_graftpoints(graftpoints): DCNL  DCSP grafts = {} DCNL DCSP for l in graftpoints: DCNL DCSP  DCSP raw_graft = l.split(None, 1) DCNL DCSP  DCSP commit = raw_graft[0] DCNL DCSP  DCSP if (len(raw_graft) == 2): DCNL DCSP  DCSP  DCSP parents = raw_graft[1].split() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parents = [] DCNL DCSP  DCSP for sha in ([commit] + parents): DCNL DCSP  DCSP  DCSP check_hexsha(sha, 'Invalid DCSP graftpoint') DCNL DCSP  DCSP grafts[commit] = parents DCNL DCSP return grafts
def serialize_graftpoints(graftpoints): DCNL  DCSP graft_lines = [] DCNL DCSP for (commit, parents) in graftpoints.items(): DCNL DCSP  DCSP if parents: DCNL DCSP  DCSP  DCSP graft_lines.append(((commit + ' DCSP ') + ' DCSP '.join(parents))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP graft_lines.append(commit) DCNL DCSP return '\n'.join(graft_lines)
def read_gitfile(f): DCNL  DCSP cs = f.read() DCNL DCSP if (not cs.startswith('gitdir: DCSP ')): DCNL DCSP  DCSP raise ValueError("Expected DCSP file DCSP to DCSP start DCSP with DCSP 'gitdir: DCSP '") DCNL DCSP return cs[len('gitdir: DCSP '):].rstrip('\n')
def check_ref_format(refname): DCNL  DCSP if (('/.' in refname) or refname.startswith('.')): DCNL DCSP  DCSP return False DCNL DCSP if ('/' not in refname): DCNL DCSP  DCSP return False DCNL DCSP if ('..' in refname): DCNL DCSP  DCSP return False DCNL DCSP for (i, c) in enumerate(refname): DCNL DCSP  DCSP if ((ord(refname[i:(i + 1)]) < 32) or (c in BAD_REF_CHARS)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP if (refname[(-1)] in '/.'): DCNL DCSP  DCSP return False DCNL DCSP if refname.endswith('.lock'): DCNL DCSP  DCSP return False DCNL DCSP if ('@{' in refname): DCNL DCSP  DCSP return False DCNL DCSP if ('\\' in refname): DCNL DCSP  DCSP return False DCNL DCSP return True
def _split_ref_line(line): DCNL  DCSP fields = line.rstrip('\n\r').split(' DCSP ') DCNL DCSP if (len(fields) != 2): DCNL DCSP  DCSP raise PackedRefsException(('invalid DCSP ref DCSP line DCSP %r' % line)) DCNL DCSP (sha, name) = fields DCNL DCSP if (not valid_hexsha(sha)): DCNL DCSP  DCSP raise PackedRefsException(('Invalid DCSP hex DCSP sha DCSP %r' % sha)) DCNL DCSP if (not check_ref_format(name)): DCNL DCSP  DCSP raise PackedRefsException(('invalid DCSP ref DCSP name DCSP %r' % name)) DCNL DCSP return (sha, name)
def read_packed_refs(f): DCNL  DCSP for l in f: DCNL DCSP  DCSP if l.startswith('#'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if l.startswith('^'): DCNL DCSP  DCSP  DCSP raise PackedRefsException('found DCSP peeled DCSP ref DCSP in DCSP packed-refs DCSP without DCSP peeled') DCNL DCSP  DCSP (yield _split_ref_line(l))
def read_packed_refs_with_peeled(f): DCNL  DCSP last = None DCNL DCSP for l in f: DCNL DCSP  DCSP if (l[0] == '#'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP l = l.rstrip('\r\n') DCNL DCSP  DCSP if l.startswith('^'): DCNL DCSP  DCSP  DCSP if (not last): DCNL DCSP  DCSP  DCSP  DCSP raise PackedRefsException('unexpected DCSP peeled DCSP ref DCSP line') DCNL DCSP  DCSP  DCSP if (not valid_hexsha(l[1:])): DCNL DCSP  DCSP  DCSP  DCSP raise PackedRefsException(('Invalid DCSP hex DCSP sha DCSP %r' % l[1:])) DCNL DCSP  DCSP  DCSP (sha, name) = _split_ref_line(last) DCNL DCSP  DCSP  DCSP last = None DCNL DCSP  DCSP  DCSP (yield (sha, name, l[1:])) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if last: DCNL DCSP  DCSP  DCSP  DCSP (sha, name) = _split_ref_line(last) DCNL DCSP  DCSP  DCSP  DCSP (yield (sha, name, None)) DCNL DCSP  DCSP  DCSP last = l DCNL DCSP if last: DCNL DCSP  DCSP (sha, name) = _split_ref_line(last) DCNL DCSP  DCSP (yield (sha, name, None))
def write_packed_refs(f, packed_refs, peeled_refs=None): DCNL  DCSP if (peeled_refs is None): DCNL DCSP  DCSP peeled_refs = {} DCNL DCSP else: DCNL DCSP  DCSP f.write('# DCSP pack-refs DCSP with: DCSP peeled\n') DCNL DCSP for refname in sorted(packed_refs.keys()): DCNL DCSP  DCSP f.write(git_line(packed_refs[refname], refname)) DCNL DCSP  DCSP if (refname in peeled_refs): DCNL DCSP  DCSP  DCSP f.write((('^' + peeled_refs[refname]) + '\n'))
def write_info_refs(refs, store): DCNL  DCSP for (name, sha) in sorted(refs.items()): DCNL DCSP  DCSP if (name == 'HEAD'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP o = store[sha] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP peeled = store.peel_sha(sha) DCNL DCSP  DCSP (yield (((o.id + ' DCTB ') + name) + '\n')) DCNL DCSP  DCSP if (o.id != peeled.id): DCNL DCSP  DCSP  DCSP (yield ((((peeled.id + ' DCTB ') + name) + ANNOTATED_TAG_SUFFIX) + '\n'))
def pkt_line(data): DCNL  DCSP if (data is None): DCNL DCSP  DCSP return '0000' DCNL DCSP return (('%04x' % (len(data) + 4)).encode('ascii') + data)
def extract_capabilities(text): DCNL  DCSP if (not ('\x00' in text)): DCNL DCSP  DCSP return (text, []) DCNL DCSP (text, capabilities) = text.rstrip().split('\x00') DCNL DCSP return (text, capabilities.strip().split(' DCSP '))
def extract_want_line_capabilities(text): DCNL  DCSP split_text = text.rstrip().split(' DCSP ') DCNL DCSP if (len(split_text) < 3): DCNL DCSP  DCSP return (text, []) DCNL DCSP return (' DCSP '.join(split_text[:2]), split_text[2:])
def ack_type(capabilities): DCNL  DCSP if ('multi_ack_detailed' in capabilities): DCNL DCSP  DCSP return MULTI_ACK_DETAILED DCNL DCSP elif ('multi_ack' in capabilities): DCNL DCSP  DCSP return MULTI_ACK DCNL DCSP return SINGLE_ACK
def _split_proto_line(line, allowed): DCNL  DCSP if (not line): DCNL DCSP  DCSP fields = [None] DCNL DCSP else: DCNL DCSP  DCSP fields = line.rstrip('\n').split(' DCSP ', 1) DCNL DCSP command = fields[0] DCNL DCSP if ((allowed is not None) and (command not in allowed)): DCNL DCSP  DCSP raise UnexpectedCommandError(command) DCNL DCSP if ((len(fields) == 1) and (command in (COMMAND_DONE, None))): DCNL DCSP  DCSP return (command, None) DCNL DCSP elif (len(fields) == 2): DCNL DCSP  DCSP if (command in (COMMAND_WANT, COMMAND_HAVE, COMMAND_SHALLOW, COMMAND_UNSHALLOW)): DCNL DCSP  DCSP  DCSP if (not valid_hexsha(fields[1])): DCNL DCSP  DCSP  DCSP  DCSP raise GitProtocolError('Invalid DCSP sha') DCNL DCSP  DCSP  DCSP return tuple(fields) DCNL DCSP  DCSP elif (command == COMMAND_DEEPEN): DCNL DCSP  DCSP  DCSP return (command, int(fields[1])) DCNL DCSP raise GitProtocolError(('Received DCSP invalid DCSP line DCSP from DCSP client: DCSP %r' % line))
def _find_shallow(store, heads, depth): DCNL  DCSP parents = {} DCNL DCSP def get_parents(sha): DCNL DCSP  DCSP result = parents.get(sha, None) DCNL DCSP  DCSP if (not result): DCNL DCSP  DCSP  DCSP result = store[sha].parents DCNL DCSP  DCSP  DCSP parents[sha] = result DCNL DCSP  DCSP return result DCNL DCSP todo = [] DCNL DCSP for head_sha in heads: DCNL DCSP  DCSP obj = store.peel_sha(head_sha) DCNL DCSP  DCSP if isinstance(obj, Commit): DCNL DCSP  DCSP  DCSP todo.append((obj.id, 1)) DCNL DCSP not_shallow = set() DCNL DCSP shallow = set() DCNL DCSP while todo: DCNL DCSP  DCSP (sha, cur_depth) = todo.pop() DCNL DCSP  DCSP if (cur_depth < depth): DCNL DCSP  DCSP  DCSP not_shallow.add(sha) DCNL DCSP  DCSP  DCSP new_depth = (cur_depth + 1) DCNL DCSP  DCSP  DCSP todo.extend(((p, new_depth) for p in get_parents(sha))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP shallow.add(sha) DCNL DCSP return (shallow, not_shallow)
def _all_wants_satisfied(store, haves, wants): DCNL  DCSP haves = set(haves) DCNL DCSP if haves: DCNL DCSP  DCSP earliest = min([store[h].commit_time for h in haves]) DCNL DCSP else: DCNL DCSP  DCSP earliest = 0 DCNL DCSP for want in wants: DCNL DCSP  DCSP if (not _want_satisfied(store, haves, want, earliest)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def main(argv=sys.argv): DCNL  DCSP import optparse DCNL DCSP parser = optparse.OptionParser() DCNL DCSP parser.add_option('-l', '--listen_address', dest='listen_address', default='localhost', help='Binding DCSP IP DCSP address.') DCNL DCSP parser.add_option('-p', '--port', dest='port', type=int, default=TCP_GIT_PORT, help='Binding DCSP TCP DCSP port.') DCNL DCSP (options, args) = parser.parse_args(argv) DCNL DCSP log_utils.default_logging_config() DCNL DCSP if (len(args) > 1): DCNL DCSP  DCSP gitdir = args[1] DCNL DCSP else: DCNL DCSP  DCSP gitdir = '.' DCNL DCSP from dulwich import porcelain DCNL DCSP porcelain.daemon(gitdir, address=options.listen_address, port=options.port)
def serve_command(handler_cls, argv=sys.argv, backend=None, inf=sys.stdin, outf=sys.stdout): DCNL  DCSP if (backend is None): DCNL DCSP  DCSP backend = FileSystemBackend() DCNL DCSP def send_fn(data): DCNL DCSP  DCSP outf.write(data) DCNL DCSP  DCSP outf.flush() DCNL DCSP proto = Protocol(inf.read, send_fn) DCNL DCSP handler = handler_cls(backend, argv[1:], proto) DCNL DCSP handler.handle() DCNL DCSP return 0
def generate_info_refs(repo): DCNL  DCSP refs = repo.get_refs() DCNL DCSP return write_info_refs(refs, repo.object_store)
def generate_objects_info_packs(repo): DCNL  DCSP for pack in repo.object_store.packs: DCNL DCSP  DCSP (yield (('P DCSP ' + pack.data.filename.encode(sys.getfilesystemencoding())) + '\n'))
def update_server_info(repo): DCNL  DCSP repo._put_named_file(os.path.join('info', 'refs'), ''.join(generate_info_refs(repo))) DCNL DCSP repo._put_named_file(os.path.join('objects', 'info', 'packs'), ''.join(generate_objects_info_packs(repo)))
def get_recent_tags(projdir=PROJDIR): DCNL  DCSP with Repo(projdir) as project: DCNL DCSP  DCSP refs = project.get_refs() DCNL DCSP  DCSP tags = {} DCNL DCSP  DCSP for (key, value) in refs.items(): DCNL DCSP  DCSP  DCSP key = key.decode('utf-8') DCNL DCSP  DCSP  DCSP obj = project.get_object(value) DCNL DCSP  DCSP  DCSP if (u'tags' not in key): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP (_, tag) = key.rsplit(u'/', 1) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP commit = obj.object DCNL DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP commit = obj DCNL DCSP  DCSP  DCSP  DCSP tag_meta = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP tag_meta = (datetime.datetime(*time.gmtime(obj.tag_time)[:6]), obj.id.decode('utf-8'), obj.name.decode('utf-8')) DCNL DCSP  DCSP  DCSP  DCSP commit = project.get_object(commit[1]) DCNL DCSP  DCSP  DCSP tags[tag] = [datetime.datetime(*time.gmtime(commit.commit_time)[:6]), commit.id.decode('utf-8'), commit.author.decode('utf-8'), tag_meta] DCNL DCSP return sorted(tags.items(), key=(lambda tag: tag[1][0]), reverse=True)
def get_current_version(projdir=PROJDIR, pattern=PATTERN, logger=None): DCNL  DCSP tags = get_recent_tags(projdir) DCNL DCSP try: DCNL DCSP  DCSP tag = tags[0][0] DCNL DCSP except IndexError: DCNL DCSP  DCSP return DCNL DCSP matches = re.match(pattern, tag) DCNL DCSP try: DCNL DCSP  DCSP current_version = matches.group(1) DCNL DCSP except (IndexError, AttributeError) as err: DCNL DCSP  DCSP if logger: DCNL DCSP  DCSP  DCSP logger.exception(err) DCNL DCSP  DCSP return tag DCNL DCSP return current_version
def load_conf(path=None, file=None): DCNL  DCSP conf = ConfigParser() DCNL DCSP if file: DCNL DCSP  DCSP conf.readfp(file) DCNL DCSP  DCSP return conf DCNL DCSP confpath = None DCNL DCSP if (not path): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP confpath = os.environ['DULWICH_SWIFT_CFG'] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise Exception('You DCSP need DCSP to DCSP specify DCSP a DCSP configuration DCSP file') DCNL DCSP else: DCNL DCSP  DCSP confpath = path DCNL DCSP if (not os.path.isfile(confpath)): DCNL DCSP  DCSP raise Exception(('Unable DCSP to DCSP read DCSP configuration DCSP file DCSP %s' % confpath)) DCNL DCSP conf.read(confpath) DCNL DCSP return conf
def swift_load_pack_index(scon, filename): DCNL  DCSP f = scon.get_object(filename) DCNL DCSP try: DCNL DCSP  DCSP return load_pack_index_file(filename, f) DCNL DCSP finally: DCNL DCSP  DCSP f.close()
def cmd_daemon(args): DCNL  DCSP import optparse DCNL DCSP parser = optparse.OptionParser() DCNL DCSP parser.add_option('-l', '--listen_address', dest='listen_address', default='127.0.0.1', help='Binding DCSP IP DCSP address.') DCNL DCSP parser.add_option('-p', '--port', dest='port', type=int, default=TCP_GIT_PORT, help='Binding DCSP TCP DCSP port.') DCNL DCSP parser.add_option('-c', '--swift_config', dest='swift_config', default='', help='Path DCSP to DCSP the DCSP configuration DCSP file DCSP for DCSP Swift DCSP backend.') DCNL DCSP (options, args) = parser.parse_args(args) DCNL DCSP try: DCNL DCSP  DCSP import gevent DCNL DCSP  DCSP import geventhttpclient DCNL DCSP except ImportError: DCNL DCSP  DCSP print 'gevent DCSP and DCSP geventhttpclient DCSP libraries DCSP are DCSP mandatory DCSP  DCSP for DCSP use DCSP the DCSP Swift DCSP backend.' DCNL DCSP  DCSP sys.exit(1) DCNL DCSP import gevent.monkey DCNL DCSP gevent.monkey.patch_socket() DCNL DCSP from dulwich.contrib.swift import load_conf DCNL DCSP from dulwich import log_utils DCNL DCSP logger = log_utils.getLogger(__name__) DCNL DCSP conf = load_conf(options.swift_config) DCNL DCSP backend = SwiftSystemBackend(logger, conf) DCNL DCSP log_utils.default_logging_config() DCNL DCSP server = TCPGitServer(backend, options.listen_address, port=options.port) DCNL DCSP server.serve_forever()
def default_logging_config(): DCNL  DCSP remove_null_handler() DCNL DCSP logging.basicConfig(level=logging.INFO, stream=sys.stderr, format='%(asctime)s DCSP %(levelname)s: DCSP %(message)s')
def remove_null_handler(): DCNL  DCSP _DULWICH_LOGGER.removeHandler(_NULL_HANDLER)
def pathsplit(path): DCNL  DCSP try: DCNL DCSP  DCSP (dirname, basename) = path.rsplit('/', 1) DCNL DCSP except ValueError: DCNL DCSP  DCSP return ('', path) DCNL DCSP else: DCNL DCSP  DCSP return (dirname, basename)
def pathjoin(*args): DCNL  DCSP return '/'.join([p for p in args if p])
def read_cache_time(f): DCNL  DCSP return struct.unpack('>LL', f.read(8))
def write_cache_time(f, t): DCNL  DCSP if isinstance(t, int): DCNL DCSP  DCSP t = (t, 0) DCNL DCSP elif isinstance(t, float): DCNL DCSP  DCSP (secs, nsecs) = divmod(t, 1.0) DCNL DCSP  DCSP t = (int(secs), int((nsecs * 1000000000))) DCNL DCSP elif (not isinstance(t, tuple)): DCNL DCSP  DCSP raise TypeError(t) DCNL DCSP f.write(struct.pack('>LL', *t))
def read_cache_entry(f): DCNL  DCSP beginoffset = f.tell() DCNL DCSP ctime = read_cache_time(f) DCNL DCSP mtime = read_cache_time(f) DCNL DCSP (dev, ino, mode, uid, gid, size, sha, flags) = struct.unpack('>LLLLLL20sH', f.read(((20 + (4 * 6)) + 2))) DCNL DCSP name = f.read((flags & 4095)) DCNL DCSP real_size = (((f.tell() - beginoffset) + 8) & (~ 7)) DCNL DCSP f.read(((beginoffset + real_size) - f.tell())) DCNL DCSP return (name, ctime, mtime, dev, ino, mode, uid, gid, size, sha_to_hex(sha), (flags & (~ 4095)))
def write_cache_entry(f, entry): DCNL  DCSP beginoffset = f.tell() DCNL DCSP (name, ctime, mtime, dev, ino, mode, uid, gid, size, sha, flags) = entry DCNL DCSP write_cache_time(f, ctime) DCNL DCSP write_cache_time(f, mtime) DCNL DCSP flags = (len(name) | (flags & (~ 4095))) DCNL DCSP f.write(struct.pack('>LLLLLL20sH', (dev & 4294967295), (ino & 4294967295), mode, uid, gid, size, hex_to_sha(sha), flags)) DCNL DCSP f.write(name) DCNL DCSP real_size = (((f.tell() - beginoffset) + 8) & (~ 7)) DCNL DCSP f.write(('\x00' * ((beginoffset + real_size) - f.tell())))
def read_index(f): DCNL  DCSP header = f.read(4) DCNL DCSP if (header != 'DIRC'): DCNL DCSP  DCSP raise AssertionError(('Invalid DCSP index DCSP file DCSP header: DCSP %r' % header)) DCNL DCSP (version, num_entries) = struct.unpack('>LL', f.read((4 * 2))) DCNL DCSP assert (version in (1, 2)) DCNL DCSP for i in range(num_entries): DCNL DCSP  DCSP (yield read_cache_entry(f))
def read_index_dict(f): DCNL  DCSP ret = {} DCNL DCSP for x in read_index(f): DCNL DCSP  DCSP ret[x[0]] = IndexEntry(*x[1:]) DCNL DCSP return ret
def write_index(f, entries): DCNL  DCSP f.write('DIRC') DCNL DCSP f.write(struct.pack('>LL', 2, len(entries))) DCNL DCSP for x in entries: DCNL DCSP  DCSP write_cache_entry(f, x)
def write_index_dict(f, entries): DCNL  DCSP entries_list = [] DCNL DCSP for name in sorted(entries): DCNL DCSP  DCSP entries_list.append(((name,) + tuple(entries[name]))) DCNL DCSP write_index(f, entries_list)
def cleanup_mode(mode): DCNL  DCSP if stat.S_ISLNK(mode): DCNL DCSP  DCSP return stat.S_IFLNK DCNL DCSP elif stat.S_ISDIR(mode): DCNL DCSP  DCSP return stat.S_IFDIR DCNL DCSP elif S_ISGITLINK(mode): DCNL DCSP  DCSP return S_IFGITLINK DCNL DCSP ret = (stat.S_IFREG | 420) DCNL DCSP ret |= (mode & 73) DCNL DCSP return ret
def commit_tree(object_store, blobs): DCNL  DCSP trees = {'': {}} DCNL DCSP def add_tree(path): DCNL DCSP  DCSP if (path in trees): DCNL DCSP  DCSP  DCSP return trees[path] DCNL DCSP  DCSP (dirname, basename) = pathsplit(path) DCNL DCSP  DCSP t = add_tree(dirname) DCNL DCSP  DCSP assert isinstance(basename, bytes) DCNL DCSP  DCSP newtree = {} DCNL DCSP  DCSP t[basename] = newtree DCNL DCSP  DCSP trees[path] = newtree DCNL DCSP  DCSP return newtree DCNL DCSP for (path, sha, mode) in blobs: DCNL DCSP  DCSP (tree_path, basename) = pathsplit(path) DCNL DCSP  DCSP tree = add_tree(tree_path) DCNL DCSP  DCSP tree[basename] = (mode, sha) DCNL DCSP def build_tree(path): DCNL DCSP  DCSP tree = Tree() DCNL DCSP  DCSP for (basename, entry) in trees[path].items(): DCNL DCSP  DCSP  DCSP if isinstance(entry, dict): DCNL DCSP  DCSP  DCSP  DCSP mode = stat.S_IFDIR DCNL DCSP  DCSP  DCSP  DCSP sha = build_tree(pathjoin(path, basename)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (mode, sha) = entry DCNL DCSP  DCSP  DCSP tree.add(basename, mode, sha) DCNL DCSP  DCSP object_store.add_object(tree) DCNL DCSP  DCSP return tree.id DCNL DCSP return build_tree('')
def commit_index(object_store, index): DCNL  DCSP return commit_tree(object_store, index.iterblobs())
def changes_from_tree(names, lookup_entry, object_store, tree, want_unchanged=False): DCNL  DCSP other_names = set(names) DCNL DCSP if (tree is not None): DCNL DCSP  DCSP for (name, mode, sha) in object_store.iter_tree_contents(tree): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (other_sha, other_mode) = lookup_entry(name) DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP (yield ((name, None), (mode, None), (sha, None))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP other_names.remove(name) DCNL DCSP  DCSP  DCSP  DCSP if (want_unchanged or (other_sha != sha) or (other_mode != mode)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ((name, name), (mode, other_mode), (sha, other_sha))) DCNL DCSP for name in other_names: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (other_sha, other_mode) = lookup_entry(name) DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (yield ((None, name), (None, other_mode), (None, other_sha)))
def index_entry_from_stat(stat_val, hex_sha, flags, mode=None): DCNL  DCSP if (mode is None): DCNL DCSP  DCSP mode = cleanup_mode(stat_val.st_mode) DCNL DCSP return (stat_val.st_ctime, stat_val.st_mtime, stat_val.st_dev, stat_val.st_ino, mode, stat_val.st_uid, stat_val.st_gid, stat_val.st_size, hex_sha, flags)
def build_file_from_blob(blob, mode, target_path, honor_filemode=True): DCNL  DCSP try: DCNL DCSP  DCSP oldstat = os.lstat(target_path) DCNL DCSP except OSError as e: DCNL DCSP  DCSP if (e.errno == errno.ENOENT): DCNL DCSP  DCSP  DCSP oldstat = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise DCNL DCSP contents = blob.as_raw_string() DCNL DCSP if stat.S_ISLNK(mode): DCNL DCSP  DCSP if oldstat: DCNL DCSP  DCSP  DCSP os.unlink(target_path) DCNL DCSP  DCSP os.symlink(contents, target_path) DCNL DCSP else: DCNL DCSP  DCSP if ((oldstat is not None) and (oldstat.st_size == len(contents))): DCNL DCSP  DCSP  DCSP with open(target_path, 'rb') as f: DCNL DCSP  DCSP  DCSP  DCSP if (f.read() == contents): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return oldstat DCNL DCSP  DCSP with open(target_path, 'wb') as f: DCNL DCSP  DCSP  DCSP f.write(contents) DCNL DCSP  DCSP if honor_filemode: DCNL DCSP  DCSP  DCSP os.chmod(target_path, mode) DCNL DCSP return os.lstat(target_path)
def validate_path(path, element_validator=validate_path_element_default): DCNL  DCSP parts = path.split('/') DCNL DCSP for p in parts: DCNL DCSP  DCSP if (not element_validator(p)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP return True
def build_index_from_tree(root_path, index_path, object_store, tree_id, honor_filemode=True, validate_path_element=validate_path_element_default): DCNL  DCSP index = Index(index_path) DCNL DCSP if (not isinstance(root_path, bytes)): DCNL DCSP  DCSP root_path = root_path.encode(sys.getfilesystemencoding()) DCNL DCSP for entry in object_store.iter_tree_contents(tree_id): DCNL DCSP  DCSP if (not validate_path(entry.path, validate_path_element)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP full_path = _tree_to_fs_path(root_path, entry.path) DCNL DCSP  DCSP if (not os.path.exists(os.path.dirname(full_path))): DCNL DCSP  DCSP  DCSP os.makedirs(os.path.dirname(full_path)) DCNL DCSP  DCSP if S_ISGITLINK(entry.mode): DCNL DCSP  DCSP  DCSP os.mkdir(full_path) DCNL DCSP  DCSP  DCSP st = os.lstat(full_path) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP obj = object_store[entry.sha] DCNL DCSP  DCSP  DCSP st = build_file_from_blob(obj, entry.mode, full_path, honor_filemode=honor_filemode) DCNL DCSP  DCSP if ((not honor_filemode) or S_ISGITLINK(entry.mode)): DCNL DCSP  DCSP  DCSP st_tuple = (entry.mode, st.st_ino, st.st_dev, st.st_nlink, st.st_uid, st.st_gid, st.st_size, st.st_atime, st.st_mtime, st.st_ctime) DCNL DCSP  DCSP  DCSP st = st.__class__(st_tuple) DCNL DCSP  DCSP index[entry.path] = index_entry_from_stat(st, entry.sha, 0) DCNL DCSP index.write()
def blob_from_path_and_stat(fs_path, st): DCNL  DCSP assert isinstance(fs_path, bytes) DCNL DCSP blob = Blob() DCNL DCSP if (not stat.S_ISLNK(st.st_mode)): DCNL DCSP  DCSP with open(fs_path, 'rb') as f: DCNL DCSP  DCSP  DCSP blob.data = f.read() DCNL DCSP else: DCNL DCSP  DCSP blob.data = os.readlink(fs_path) DCNL DCSP return blob
def get_unstaged_changes(index, root_path): DCNL  DCSP if (not isinstance(root_path, bytes)): DCNL DCSP  DCSP root_path = root_path.encode(sys.getfilesystemencoding()) DCNL DCSP for (tree_path, entry) in index.iteritems(): DCNL DCSP  DCSP full_path = _tree_to_fs_path(root_path, tree_path) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP blob = blob_from_path_and_stat(full_path, os.lstat(full_path)) DCNL DCSP  DCSP except OSError as e: DCNL DCSP  DCSP  DCSP if (e.errno != errno.ENOENT): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP (yield tree_path) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (blob.id != entry.sha): DCNL DCSP  DCSP  DCSP  DCSP (yield tree_path)
def _tree_to_fs_path(root_path, tree_path): DCNL  DCSP assert isinstance(tree_path, bytes) DCNL DCSP if (os_sep_bytes != '/'): DCNL DCSP  DCSP sep_corrected_path = tree_path.replace('/', os_sep_bytes) DCNL DCSP else: DCNL DCSP  DCSP sep_corrected_path = tree_path DCNL DCSP return os.path.join(root_path, sep_corrected_path)
def _fs_to_tree_path(fs_path, fs_encoding=None): DCNL  DCSP if (fs_encoding is None): DCNL DCSP  DCSP fs_encoding = sys.getfilesystemencoding() DCNL DCSP if (not isinstance(fs_path, bytes)): DCNL DCSP  DCSP fs_path_bytes = fs_path.encode(fs_encoding) DCNL DCSP else: DCNL DCSP  DCSP fs_path_bytes = fs_path DCNL DCSP if (os_sep_bytes != '/'): DCNL DCSP  DCSP tree_path = fs_path_bytes.replace(os_sep_bytes, '/') DCNL DCSP else: DCNL DCSP  DCSP tree_path = fs_path_bytes DCNL DCSP return tree_path
def take_msb_bytes(read, crc32=None): DCNL  DCSP ret = [] DCNL DCSP while ((len(ret) == 0) or (ret[(-1)] & 128)): DCNL DCSP  DCSP b = read(1) DCNL DCSP  DCSP if (crc32 is not None): DCNL DCSP  DCSP  DCSP crc32 = binascii.crc32(b, crc32) DCNL DCSP  DCSP ret.append(ord(b[:1])) DCNL DCSP return (ret, crc32)
def read_zlib_chunks(read_some, unpacked, include_comp=False, buffer_size=_ZLIB_BUFSIZE): DCNL  DCSP if (unpacked.decomp_len <= (-1)): DCNL DCSP  DCSP raise ValueError('non-negative DCSP zlib DCSP data DCSP stream DCSP size DCSP expected') DCNL DCSP decomp_obj = zlib.decompressobj() DCNL DCSP comp_chunks = [] DCNL DCSP decomp_chunks = unpacked.decomp_chunks DCNL DCSP decomp_len = 0 DCNL DCSP crc32 = unpacked.crc32 DCNL DCSP while True: DCNL DCSP  DCSP add = read_some(buffer_size) DCNL DCSP  DCSP if (not add): DCNL DCSP  DCSP  DCSP raise zlib.error('EOF DCSP before DCSP end DCSP of DCSP zlib DCSP stream') DCNL DCSP  DCSP comp_chunks.append(add) DCNL DCSP  DCSP decomp = decomp_obj.decompress(add) DCNL DCSP  DCSP decomp_len += len(decomp) DCNL DCSP  DCSP decomp_chunks.append(decomp) DCNL DCSP  DCSP unused = decomp_obj.unused_data DCNL DCSP  DCSP if unused: DCNL DCSP  DCSP  DCSP left = len(unused) DCNL DCSP  DCSP  DCSP if (crc32 is not None): DCNL DCSP  DCSP  DCSP  DCSP crc32 = binascii.crc32(add[:(- left)], crc32) DCNL DCSP  DCSP  DCSP if include_comp: DCNL DCSP  DCSP  DCSP  DCSP comp_chunks[(-1)] = add[:(- left)] DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif (crc32 is not None): DCNL DCSP  DCSP  DCSP crc32 = binascii.crc32(add, crc32) DCNL DCSP if (crc32 is not None): DCNL DCSP  DCSP crc32 &= 4294967295 DCNL DCSP if (decomp_len != unpacked.decomp_len): DCNL DCSP  DCSP raise zlib.error('decompressed DCSP data DCSP does DCSP not DCSP match DCSP expected DCSP size') DCNL DCSP unpacked.crc32 = crc32 DCNL DCSP if include_comp: DCNL DCSP  DCSP unpacked.comp_chunks = comp_chunks DCNL DCSP return unused
def iter_sha1(iter): DCNL  DCSP sha = sha1() DCNL DCSP for name in iter: DCNL DCSP  DCSP sha.update(name) DCNL DCSP return sha.hexdigest().encode('ascii')
def load_pack_index(path): DCNL  DCSP with GitFile(path, 'rb') as f: DCNL DCSP  DCSP return load_pack_index_file(path, f)
def load_pack_index_file(path, f): DCNL  DCSP (contents, size) = _load_file_contents(f) DCNL DCSP if (contents[:4] == '\xfftOc'): DCNL DCSP  DCSP version = struct.unpack('>L', contents[4:8])[0] DCNL DCSP  DCSP if (version == 2): DCNL DCSP  DCSP  DCSP return PackIndex2(path, file=f, contents=contents, size=size) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise KeyError(('Unknown DCSP pack DCSP index DCSP format DCSP %d' % version)) DCNL DCSP else: DCNL DCSP  DCSP return PackIndex1(path, file=f, contents=contents, size=size)
def bisect_find_sha(start, end, sha, unpack_name): DCNL  DCSP assert (start <= end) DCNL DCSP while (start <= end): DCNL DCSP  DCSP i = ((start + end) // 2) DCNL DCSP  DCSP file_sha = unpack_name(i) DCNL DCSP  DCSP if (file_sha < sha): DCNL DCSP  DCSP  DCSP start = (i + 1) DCNL DCSP  DCSP elif (file_sha > sha): DCNL DCSP  DCSP  DCSP end = (i - 1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return i DCNL DCSP return None
def read_pack_header(read): DCNL  DCSP header = read(12) DCNL DCSP if (not header): DCNL DCSP  DCSP return (None, None) DCNL DCSP if (header[:4] != 'PACK'): DCNL DCSP  DCSP raise AssertionError(('Invalid DCSP pack DCSP header DCSP %r' % header)) DCNL DCSP (version,) = unpack_from('>L', header, 4) DCNL DCSP if (version not in (2, 3)): DCNL DCSP  DCSP raise AssertionError(('Version DCSP was DCSP %d' % version)) DCNL DCSP (num_objects,) = unpack_from('>L', header, 8) DCNL DCSP return (version, num_objects)
def unpack_object(read_all, read_some=None, compute_crc32=False, include_comp=False, zlib_bufsize=_ZLIB_BUFSIZE): DCNL  DCSP if (read_some is None): DCNL DCSP  DCSP read_some = read_all DCNL DCSP if compute_crc32: DCNL DCSP  DCSP crc32 = 0 DCNL DCSP else: DCNL DCSP  DCSP crc32 = None DCNL DCSP (bytes, crc32) = take_msb_bytes(read_all, crc32=crc32) DCNL DCSP type_num = ((bytes[0] >> 4) & 7) DCNL DCSP size = (bytes[0] & 15) DCNL DCSP for (i, byte) in enumerate(bytes[1:]): DCNL DCSP  DCSP size += ((byte & 127) << ((i * 7) + 4)) DCNL DCSP raw_base = len(bytes) DCNL DCSP if (type_num == OFS_DELTA): DCNL DCSP  DCSP (bytes, crc32) = take_msb_bytes(read_all, crc32=crc32) DCNL DCSP  DCSP raw_base += len(bytes) DCNL DCSP  DCSP if (bytes[(-1)] & 128): DCNL DCSP  DCSP  DCSP raise AssertionError DCNL DCSP  DCSP delta_base_offset = (bytes[0] & 127) DCNL DCSP  DCSP for byte in bytes[1:]: DCNL DCSP  DCSP  DCSP delta_base_offset += 1 DCNL DCSP  DCSP  DCSP delta_base_offset <<= 7 DCNL DCSP  DCSP  DCSP delta_base_offset += (byte & 127) DCNL DCSP  DCSP delta_base = delta_base_offset DCNL DCSP elif (type_num == REF_DELTA): DCNL DCSP  DCSP delta_base = read_all(20) DCNL DCSP  DCSP if compute_crc32: DCNL DCSP  DCSP  DCSP crc32 = binascii.crc32(delta_base, crc32) DCNL DCSP  DCSP raw_base += 20 DCNL DCSP else: DCNL DCSP  DCSP delta_base = None DCNL DCSP unpacked = UnpackedObject(type_num, delta_base, size, crc32) DCNL DCSP unused = read_zlib_chunks(read_some, unpacked, buffer_size=zlib_bufsize, include_comp=include_comp) DCNL DCSP return (unpacked, unused)
def _compute_object_size(value): DCNL  DCSP (num, obj) = value DCNL DCSP if (num in DELTA_TYPES): DCNL DCSP  DCSP return chunks_length(obj[1]) DCNL DCSP return chunks_length(obj)
def obj_sha(type, chunks): DCNL  DCSP sha = sha1() DCNL DCSP sha.update(object_header(type, chunks_length(chunks))) DCNL DCSP if isinstance(chunks, bytes): DCNL DCSP  DCSP sha.update(chunks) DCNL DCSP else: DCNL DCSP  DCSP for chunk in chunks: DCNL DCSP  DCSP  DCSP sha.update(chunk) DCNL DCSP return sha.digest()
def compute_file_sha(f, start_ofs=0, end_ofs=0, buffer_size=(1 << 16)): DCNL  DCSP sha = sha1() DCNL DCSP f.seek(0, SEEK_END) DCNL DCSP length = f.tell() DCNL DCSP if (((end_ofs < 0) and ((length + end_ofs) < start_ofs)) or (end_ofs > length)): DCNL DCSP  DCSP raise AssertionError(('Attempt DCSP to DCSP read DCSP beyond DCSP file DCSP length. DCSP start_ofs: DCSP %d, DCSP end_ofs: DCSP %d, DCSP file DCSP length: DCSP %d' % (start_ofs, end_ofs, length))) DCNL DCSP todo = ((length + end_ofs) - start_ofs) DCNL DCSP f.seek(start_ofs) DCNL DCSP while todo: DCNL DCSP  DCSP data = f.read(min(todo, buffer_size)) DCNL DCSP  DCSP sha.update(data) DCNL DCSP  DCSP todo -= len(data) DCNL DCSP return sha
def pack_object_header(type_num, delta_base, size): DCNL  DCSP header = [] DCNL DCSP c = ((type_num << 4) | (size & 15)) DCNL DCSP size >>= 4 DCNL DCSP while size: DCNL DCSP  DCSP header.append((c | 128)) DCNL DCSP  DCSP c = (size & 127) DCNL DCSP  DCSP size >>= 7 DCNL DCSP header.append(c) DCNL DCSP if (type_num == OFS_DELTA): DCNL DCSP  DCSP ret = [(delta_base & 127)] DCNL DCSP  DCSP delta_base >>= 7 DCNL DCSP  DCSP while delta_base: DCNL DCSP  DCSP  DCSP delta_base -= 1 DCNL DCSP  DCSP  DCSP ret.insert(0, (128 | (delta_base & 127))) DCNL DCSP  DCSP  DCSP delta_base >>= 7 DCNL DCSP  DCSP header.extend(ret) DCNL DCSP elif (type_num == REF_DELTA): DCNL DCSP  DCSP assert (len(delta_base) == 20) DCNL DCSP  DCSP header += delta_base DCNL DCSP return bytearray(header)
def write_pack_object(f, type, object, sha=None): DCNL  DCSP if (type in DELTA_TYPES): DCNL DCSP  DCSP (delta_base, object) = object DCNL DCSP else: DCNL DCSP  DCSP delta_base = None DCNL DCSP header = bytes(pack_object_header(type, delta_base, len(object))) DCNL DCSP comp_data = zlib.compress(object) DCNL DCSP crc32 = 0 DCNL DCSP for data in (header, comp_data): DCNL DCSP  DCSP f.write(data) DCNL DCSP  DCSP if (sha is not None): DCNL DCSP  DCSP  DCSP sha.update(data) DCNL DCSP  DCSP crc32 = binascii.crc32(data, crc32) DCNL DCSP return (crc32 & 4294967295)
def write_pack(filename, objects, deltify=None, delta_window_size=None): DCNL  DCSP with GitFile((filename + '.pack'), 'wb') as f: DCNL DCSP  DCSP (entries, data_sum) = write_pack_objects(f, objects, delta_window_size=delta_window_size, deltify=deltify) DCNL DCSP entries = [(k, v[0], v[1]) for (k, v) in entries.items()] DCNL DCSP entries.sort() DCNL DCSP with GitFile((filename + '.idx'), 'wb') as f: DCNL DCSP  DCSP return (data_sum, write_pack_index_v2(f, entries, data_sum))
def write_pack_header(f, num_objects): DCNL  DCSP f.write('PACK') DCNL DCSP f.write(struct.pack('>L', 2)) DCNL DCSP f.write(struct.pack('>L', num_objects))
def deltify_pack_objects(objects, window_size=None): DCNL  DCSP if (window_size is None): DCNL DCSP  DCSP window_size = DEFAULT_PACK_DELTA_WINDOW_SIZE DCNL DCSP magic = [] DCNL DCSP for (obj, path) in objects: DCNL DCSP  DCSP magic.append((obj.type_num, path, (- obj.raw_length()), obj)) DCNL DCSP magic.sort() DCNL DCSP possible_bases = deque() DCNL DCSP for (type_num, path, neg_length, o) in magic: DCNL DCSP  DCSP raw = o.as_raw_string() DCNL DCSP  DCSP winner = raw DCNL DCSP  DCSP winner_base = None DCNL DCSP  DCSP for base in possible_bases: DCNL DCSP  DCSP  DCSP if (base.type_num != type_num): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP delta = create_delta(base.as_raw_string(), raw) DCNL DCSP  DCSP  DCSP if (len(delta) < len(winner)): DCNL DCSP  DCSP  DCSP  DCSP winner_base = base.sha().digest() DCNL DCSP  DCSP  DCSP  DCSP winner = delta DCNL DCSP  DCSP (yield (type_num, o.sha().digest(), winner_base, winner)) DCNL DCSP  DCSP possible_bases.appendleft(o) DCNL DCSP  DCSP while (len(possible_bases) > window_size): DCNL DCSP  DCSP  DCSP possible_bases.pop()
def write_pack_objects(f, objects, delta_window_size=None, deltify=False): DCNL  DCSP if deltify: DCNL DCSP  DCSP pack_contents = deltify_pack_objects(objects, delta_window_size) DCNL DCSP else: DCNL DCSP  DCSP pack_contents = ((o.type_num, o.sha().digest(), None, o.as_raw_string()) for (o, path) in objects) DCNL DCSP return write_pack_data(f, len(objects), pack_contents)
def write_pack_data(f, num_records, records): DCNL  DCSP entries = {} DCNL DCSP f = SHA1Writer(f) DCNL DCSP write_pack_header(f, num_records) DCNL DCSP for (type_num, object_id, delta_base, raw) in records: DCNL DCSP  DCSP offset = f.offset() DCNL DCSP  DCSP if (delta_base is not None): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (base_offset, base_crc32) = entries[delta_base] DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP type_num = REF_DELTA DCNL DCSP  DCSP  DCSP  DCSP raw = (delta_base, raw) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP type_num = OFS_DELTA DCNL DCSP  DCSP  DCSP  DCSP raw = ((offset - base_offset), raw) DCNL DCSP  DCSP crc32 = write_pack_object(f, type_num, raw) DCNL DCSP  DCSP entries[object_id] = (offset, crc32) DCNL DCSP return (entries, f.write_sha())
def write_pack_index_v1(f, entries, pack_checksum): DCNL  DCSP f = SHA1Writer(f) DCNL DCSP fan_out_table = defaultdict((lambda : 0)) DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP fan_out_table[ord(name[:1])] += 1 DCNL DCSP for i in range(256): DCNL DCSP  DCSP f.write(struct.pack('>L', fan_out_table[i])) DCNL DCSP  DCSP fan_out_table[(i + 1)] += fan_out_table[i] DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP if (not (offset <= 4294967295)): DCNL DCSP  DCSP  DCSP raise TypeError('pack DCSP format DCSP 1 DCSP only DCSP supports DCSP offsets DCSP < DCSP 2Gb') DCNL DCSP  DCSP f.write(struct.pack('>L20s', offset, name)) DCNL DCSP assert (len(pack_checksum) == 20) DCNL DCSP f.write(pack_checksum) DCNL DCSP return f.write_sha()
def create_delta(base_buf, target_buf): DCNL  DCSP assert isinstance(base_buf, bytes) DCNL DCSP assert isinstance(target_buf, bytes) DCNL DCSP out_buf = bytearray() DCNL DCSP out_buf += _delta_encode_size(len(base_buf)) DCNL DCSP out_buf += _delta_encode_size(len(target_buf)) DCNL DCSP seq = difflib.SequenceMatcher(a=base_buf, b=target_buf) DCNL DCSP for (opcode, i1, i2, j1, j2) in seq.get_opcodes(): DCNL DCSP  DCSP if (opcode == 'equal'): DCNL DCSP  DCSP  DCSP copy_start = i1 DCNL DCSP  DCSP  DCSP copy_len = (i2 - i1) DCNL DCSP  DCSP  DCSP while (copy_len > 0): DCNL DCSP  DCSP  DCSP  DCSP to_copy = min(copy_len, _MAX_COPY_LEN) DCNL DCSP  DCSP  DCSP  DCSP out_buf += _encode_copy_operation(copy_start, to_copy) DCNL DCSP  DCSP  DCSP  DCSP copy_start += to_copy DCNL DCSP  DCSP  DCSP  DCSP copy_len -= to_copy DCNL DCSP  DCSP if ((opcode == 'replace') or (opcode == 'insert')): DCNL DCSP  DCSP  DCSP s = (j2 - j1) DCNL DCSP  DCSP  DCSP o = j1 DCNL DCSP  DCSP  DCSP while (s > 127): DCNL DCSP  DCSP  DCSP  DCSP out_buf.append(127) DCNL DCSP  DCSP  DCSP  DCSP out_buf += bytearray(target_buf[o:(o + 127)]) DCNL DCSP  DCSP  DCSP  DCSP s -= 127 DCNL DCSP  DCSP  DCSP  DCSP o += 127 DCNL DCSP  DCSP  DCSP out_buf.append(s) DCNL DCSP  DCSP  DCSP out_buf += bytearray(target_buf[o:(o + s)]) DCNL DCSP return bytes(out_buf)
def apply_delta(src_buf, delta): DCNL  DCSP if (not isinstance(src_buf, bytes)): DCNL DCSP  DCSP src_buf = ''.join(src_buf) DCNL DCSP if (not isinstance(delta, bytes)): DCNL DCSP  DCSP delta = ''.join(delta) DCNL DCSP out = [] DCNL DCSP index = 0 DCNL DCSP delta_length = len(delta) DCNL DCSP def get_delta_header_size(delta, index): DCNL DCSP  DCSP size = 0 DCNL DCSP  DCSP i = 0 DCNL DCSP  DCSP while delta: DCNL DCSP  DCSP  DCSP cmd = ord(delta[index:(index + 1)]) DCNL DCSP  DCSP  DCSP index += 1 DCNL DCSP  DCSP  DCSP size |= ((cmd & (~ 128)) << i) DCNL DCSP  DCSP  DCSP i += 7 DCNL DCSP  DCSP  DCSP if (not (cmd & 128)): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP return (size, index) DCNL DCSP (src_size, index) = get_delta_header_size(delta, index) DCNL DCSP (dest_size, index) = get_delta_header_size(delta, index) DCNL DCSP assert (src_size == len(src_buf)), ('%d DCSP vs DCSP %d' % (src_size, len(src_buf))) DCNL DCSP while (index < delta_length): DCNL DCSP  DCSP cmd = ord(delta[index:(index + 1)]) DCNL DCSP  DCSP index += 1 DCNL DCSP  DCSP if (cmd & 128): DCNL DCSP  DCSP  DCSP cp_off = 0 DCNL DCSP  DCSP  DCSP for i in range(4): DCNL DCSP  DCSP  DCSP  DCSP if (cmd & (1 << i)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP x = ord(delta[index:(index + 1)]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP index += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP cp_off |= (x << (i * 8)) DCNL DCSP  DCSP  DCSP cp_size = 0 DCNL DCSP  DCSP  DCSP for i in range(3): DCNL DCSP  DCSP  DCSP  DCSP if (cmd & (1 << (4 + i))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP x = ord(delta[index:(index + 1)]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP index += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP cp_size |= (x << (i * 8)) DCNL DCSP  DCSP  DCSP if (cp_size == 0): DCNL DCSP  DCSP  DCSP  DCSP cp_size = 65536 DCNL DCSP  DCSP  DCSP if (((cp_off + cp_size) < cp_size) or ((cp_off + cp_size) > src_size) or (cp_size > dest_size)): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP out.append(src_buf[cp_off:(cp_off + cp_size)]) DCNL DCSP  DCSP elif (cmd != 0): DCNL DCSP  DCSP  DCSP out.append(delta[index:(index + cmd)]) DCNL DCSP  DCSP  DCSP index += cmd DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise ApplyDeltaError('Invalid DCSP opcode DCSP 0') DCNL DCSP if (index != delta_length): DCNL DCSP  DCSP raise ApplyDeltaError(('delta DCSP not DCSP empty: DCSP %r' % delta[index:])) DCNL DCSP if (dest_size != chunks_length(out)): DCNL DCSP  DCSP raise ApplyDeltaError('dest DCSP size DCSP incorrect') DCNL DCSP return out
def write_pack_index_v2(f, entries, pack_checksum): DCNL  DCSP f = SHA1Writer(f) DCNL DCSP f.write('\xfftOc') DCNL DCSP f.write(struct.pack('>L', 2)) DCNL DCSP fan_out_table = defaultdict((lambda : 0)) DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP fan_out_table[ord(name[:1])] += 1 DCNL DCSP largetable = [] DCNL DCSP for i in range(256): DCNL DCSP  DCSP f.write(struct.pack('>L', fan_out_table[i])) DCNL DCSP  DCSP fan_out_table[(i + 1)] += fan_out_table[i] DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP f.write(name) DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP f.write(struct.pack('>L', entry_checksum)) DCNL DCSP for (name, offset, entry_checksum) in entries: DCNL DCSP  DCSP if (offset < (2 ** 31)): DCNL DCSP  DCSP  DCSP f.write(struct.pack('>L', offset)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP f.write(struct.pack('>L', ((2 ** 31) + len(largetable)))) DCNL DCSP  DCSP  DCSP largetable.append(offset) DCNL DCSP for offset in largetable: DCNL DCSP  DCSP f.write(struct.pack('>Q', offset)) DCNL DCSP assert (len(pack_checksum) == 20) DCNL DCSP f.write(pack_checksum) DCNL DCSP return f.write_sha()
def url_prefix(mat): DCNL  DCSP return ('/' + mat.string[:mat.start()].strip('/'))
def get_repo(backend, mat): DCNL  DCSP return backend.open_repository(url_prefix(mat))
def send_file(req, f, content_type): DCNL  DCSP if (f is None): DCNL DCSP  DCSP (yield req.not_found('File DCSP not DCSP found')) DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP req.respond(HTTP_OK, content_type) DCNL DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP data = f.read(10240) DCNL DCSP  DCSP  DCSP if (not data): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP (yield data) DCNL DCSP  DCSP f.close() DCNL DCSP except IOError: DCNL DCSP  DCSP f.close() DCNL DCSP  DCSP (yield req.error('Error DCSP reading DCSP file')) DCNL DCSP except: DCNL DCSP  DCSP f.close() DCNL DCSP  DCSP raise
def make_wsgi_chain(*args, **kwargs): DCNL  DCSP app = HTTPGitApplication(*args, **kwargs) DCNL DCSP wrapped_app = LimitedInputFilter(GunzipFilter(app)) DCNL DCSP return wrapped_app
def main(argv=sys.argv): DCNL  DCSP import optparse DCNL DCSP parser = optparse.OptionParser() DCNL DCSP parser.add_option('-l', '--listen_address', dest='listen_address', default='localhost', help='Binding DCSP IP DCSP address.') DCNL DCSP parser.add_option('-p', '--port', dest='port', type=int, default=8000, help='Port DCSP to DCSP listen DCSP on.') DCNL DCSP (options, args) = parser.parse_args(argv) DCNL DCSP if (len(args) > 1): DCNL DCSP  DCSP gitdir = args[1] DCNL DCSP else: DCNL DCSP  DCSP gitdir = os.getcwd() DCNL DCSP log_utils.default_logging_config() DCNL DCSP backend = DictBackend({'/': Repo(gitdir)}) DCNL DCSP app = make_wsgi_chain(backend) DCNL DCSP server = make_server(options.listen_address, options.port, app, handler_class=WSGIRequestHandlerLogger, server_class=WSGIServerLogger) DCNL DCSP logger.info('Listening DCSP for DCSP HTTP DCSP connections DCSP on DCSP %s:%d', options.listen_address, options.port) DCNL DCSP server.serve_forever()
def parse_object(repo, objectish): DCNL  DCSP objectish = to_bytes(objectish) DCNL DCSP return repo[objectish]
def parse_ref(container, refspec): DCNL  DCSP refspec = to_bytes(refspec) DCNL DCSP possible_refs = [refspec, ('refs/' + refspec), ('refs/tags/' + refspec), ('refs/heads/' + refspec), ('refs/remotes/' + refspec), (('refs/remotes/' + refspec) + '/HEAD')] DCNL DCSP for ref in possible_refs: DCNL DCSP  DCSP if (ref in container): DCNL DCSP  DCSP  DCSP return ref DCNL DCSP else: DCNL DCSP  DCSP raise KeyError(refspec)
def parse_reftuple(lh_container, rh_container, refspec): DCNL  DCSP if refspec.startswith('+'): DCNL DCSP  DCSP force = True DCNL DCSP  DCSP refspec = refspec[1:] DCNL DCSP else: DCNL DCSP  DCSP force = False DCNL DCSP refspec = to_bytes(refspec) DCNL DCSP if (':' in refspec): DCNL DCSP  DCSP (lh, rh) = refspec.split(':') DCNL DCSP else: DCNL DCSP  DCSP lh = rh = refspec DCNL DCSP if (lh == ''): DCNL DCSP  DCSP lh = None DCNL DCSP else: DCNL DCSP  DCSP lh = parse_ref(lh_container, lh) DCNL DCSP if (rh == ''): DCNL DCSP  DCSP rh = None DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP rh = parse_ref(rh_container, rh) DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP if (not ('/' in rh)): DCNL DCSP  DCSP  DCSP  DCSP rh = ('refs/heads/' + rh) DCNL DCSP return (lh, rh, force)
def parse_reftuples(lh_container, rh_container, refspecs): DCNL  DCSP if (not isinstance(refspecs, list)): DCNL DCSP  DCSP refspecs = [refspecs] DCNL DCSP ret = [] DCNL DCSP for refspec in refspecs: DCNL DCSP  DCSP ret.append(parse_reftuple(lh_container, rh_container, refspec)) DCNL DCSP return ret
def parse_refs(container, refspecs): DCNL  DCSP if (not isinstance(refspecs, list)): DCNL DCSP  DCSP refspecs = [refspecs] DCNL DCSP ret = [] DCNL DCSP for refspec in refspecs: DCNL DCSP  DCSP ret.append(parse_ref(container, refspec)) DCNL DCSP return ret
def parse_commit_range(repo, committishs): DCNL  DCSP committishs = to_bytes(committishs) DCNL DCSP return iter([parse_commit(repo, committishs)])
def parse_commit(repo, committish): DCNL  DCSP committish = to_bytes(committish) DCNL DCSP return repo[committish]
def _merge_entries(path, tree1, tree2): DCNL  DCSP entries1 = _tree_entries(path, tree1) DCNL DCSP entries2 = _tree_entries(path, tree2) DCNL DCSP i1 = i2 = 0 DCNL DCSP len1 = len(entries1) DCNL DCSP len2 = len(entries2) DCNL DCSP result = [] DCNL DCSP while ((i1 < len1) and (i2 < len2)): DCNL DCSP  DCSP entry1 = entries1[i1] DCNL DCSP  DCSP entry2 = entries2[i2] DCNL DCSP  DCSP if (entry1.path < entry2.path): DCNL DCSP  DCSP  DCSP result.append((entry1, _NULL_ENTRY)) DCNL DCSP  DCSP  DCSP i1 += 1 DCNL DCSP  DCSP elif (entry1.path > entry2.path): DCNL DCSP  DCSP  DCSP result.append((_NULL_ENTRY, entry2)) DCNL DCSP  DCSP  DCSP i2 += 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP result.append((entry1, entry2)) DCNL DCSP  DCSP  DCSP i1 += 1 DCNL DCSP  DCSP  DCSP i2 += 1 DCNL DCSP for i in range(i1, len1): DCNL DCSP  DCSP result.append((entries1[i], _NULL_ENTRY)) DCNL DCSP for i in range(i2, len2): DCNL DCSP  DCSP result.append((_NULL_ENTRY, entries2[i])) DCNL DCSP return result
def walk_trees(store, tree1_id, tree2_id, prune_identical=False): DCNL  DCSP mode1 = ((tree1_id and stat.S_IFDIR) or None) DCNL DCSP mode2 = ((tree2_id and stat.S_IFDIR) or None) DCNL DCSP todo = [(TreeEntry('', mode1, tree1_id), TreeEntry('', mode2, tree2_id))] DCNL DCSP while todo: DCNL DCSP  DCSP (entry1, entry2) = todo.pop() DCNL DCSP  DCSP is_tree1 = _is_tree(entry1) DCNL DCSP  DCSP is_tree2 = _is_tree(entry2) DCNL DCSP  DCSP if (prune_identical and is_tree1 and is_tree2 and (entry1 == entry2)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP tree1 = ((is_tree1 and store[entry1.sha]) or None) DCNL DCSP  DCSP tree2 = ((is_tree2 and store[entry2.sha]) or None) DCNL DCSP  DCSP path = (entry1.path or entry2.path) DCNL DCSP  DCSP todo.extend(reversed(_merge_entries(path, tree1, tree2))) DCNL DCSP  DCSP (yield (entry1, entry2))
def tree_changes(store, tree1_id, tree2_id, want_unchanged=False, rename_detector=None): DCNL  DCSP if ((rename_detector is not None) and (tree1_id is not None) and (tree2_id is not None)): DCNL DCSP  DCSP for change in rename_detector.changes_with_renames(tree1_id, tree2_id, want_unchanged=want_unchanged): DCNL DCSP  DCSP  DCSP (yield change) DCNL DCSP  DCSP return DCNL DCSP entries = walk_trees(store, tree1_id, tree2_id, prune_identical=(not want_unchanged)) DCNL DCSP for (entry1, entry2) in entries: DCNL DCSP  DCSP if ((entry1 == entry2) and (not want_unchanged)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP entry1 = _skip_tree(entry1) DCNL DCSP  DCSP entry2 = _skip_tree(entry2) DCNL DCSP  DCSP if ((entry1 != _NULL_ENTRY) and (entry2 != _NULL_ENTRY)): DCNL DCSP  DCSP  DCSP if (stat.S_IFMT(entry1.mode) != stat.S_IFMT(entry2.mode)): DCNL DCSP  DCSP  DCSP  DCSP (yield TreeChange.delete(entry1)) DCNL DCSP  DCSP  DCSP  DCSP entry1 = _NULL_ENTRY DCNL DCSP  DCSP  DCSP  DCSP change_type = CHANGE_ADD DCNL DCSP  DCSP  DCSP elif (entry1 == entry2): DCNL DCSP  DCSP  DCSP  DCSP change_type = CHANGE_UNCHANGED DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP change_type = CHANGE_MODIFY DCNL DCSP  DCSP elif (entry1 != _NULL_ENTRY): DCNL DCSP  DCSP  DCSP change_type = CHANGE_DELETE DCNL DCSP  DCSP elif (entry2 != _NULL_ENTRY): DCNL DCSP  DCSP  DCSP change_type = CHANGE_ADD DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (yield TreeChange(change_type, entry1, entry2))
def tree_changes_for_merge(store, parent_tree_ids, tree_id, rename_detector=None): DCNL  DCSP all_parent_changes = [tree_changes(store, t, tree_id, rename_detector=rename_detector) for t in parent_tree_ids] DCNL DCSP num_parents = len(parent_tree_ids) DCNL DCSP changes_by_path = defaultdict((lambda : ([None] * num_parents))) DCNL DCSP for (i, parent_changes) in enumerate(all_parent_changes): DCNL DCSP  DCSP for change in parent_changes: DCNL DCSP  DCSP  DCSP if (change.type == CHANGE_DELETE): DCNL DCSP  DCSP  DCSP  DCSP path = change.old.path DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP path = change.new.path DCNL DCSP  DCSP  DCSP changes_by_path[path][i] = change DCNL DCSP old_sha = (lambda c: c.old.sha) DCNL DCSP change_type = (lambda c: c.type) DCNL DCSP for (_, changes) in sorted(changes_by_path.items()): DCNL DCSP  DCSP assert (len(changes) == num_parents) DCNL DCSP  DCSP have = [c for c in changes if (c is not None)] DCNL DCSP  DCSP if _all_eq(have, change_type, CHANGE_DELETE): DCNL DCSP  DCSP  DCSP if (not _all_same(have, old_sha)): DCNL DCSP  DCSP  DCSP  DCSP (yield changes) DCNL DCSP  DCSP elif (not _all_same(have, change_type)): DCNL DCSP  DCSP  DCSP (yield changes) DCNL DCSP  DCSP elif (None not in changes): DCNL DCSP  DCSP  DCSP (yield changes)
def _count_blocks(obj): DCNL  DCSP block_counts = defaultdict(int) DCNL DCSP block = BytesIO() DCNL DCSP n = 0 DCNL DCSP block_write = block.write DCNL DCSP block_seek = block.seek DCNL DCSP block_truncate = block.truncate DCNL DCSP block_getvalue = block.getvalue DCNL DCSP for c in chain(*obj.as_raw_chunks()): DCNL DCSP  DCSP if (sys.version_info[0] == 3): DCNL DCSP  DCSP  DCSP c = c.to_bytes(1, 'big') DCNL DCSP  DCSP block_write(c) DCNL DCSP  DCSP n += 1 DCNL DCSP  DCSP if ((c == '\n') or (n == _BLOCK_SIZE)): DCNL DCSP  DCSP  DCSP value = block_getvalue() DCNL DCSP  DCSP  DCSP block_counts[hash(value)] += len(value) DCNL DCSP  DCSP  DCSP block_seek(0) DCNL DCSP  DCSP  DCSP block_truncate() DCNL DCSP  DCSP  DCSP n = 0 DCNL DCSP if (n > 0): DCNL DCSP  DCSP last_block = block_getvalue() DCNL DCSP  DCSP block_counts[hash(last_block)] += len(last_block) DCNL DCSP return block_counts
def _common_bytes(blocks1, blocks2): DCNL  DCSP if (len(blocks1) > len(blocks2)): DCNL DCSP  DCSP (blocks1, blocks2) = (blocks2, blocks1) DCNL DCSP score = 0 DCNL DCSP for (block, count1) in blocks1.items(): DCNL DCSP  DCSP count2 = blocks2.get(block) DCNL DCSP  DCSP if count2: DCNL DCSP  DCSP  DCSP score += min(count1, count2) DCNL DCSP return score
def _similarity_score(obj1, obj2, block_cache=None): DCNL  DCSP if (block_cache is None): DCNL DCSP  DCSP block_cache = {} DCNL DCSP if (obj1.id not in block_cache): DCNL DCSP  DCSP block_cache[obj1.id] = _count_blocks(obj1) DCNL DCSP if (obj2.id not in block_cache): DCNL DCSP  DCSP block_cache[obj2.id] = _count_blocks(obj2) DCNL DCSP common_bytes = _common_bytes(block_cache[obj1.id], block_cache[obj2.id]) DCNL DCSP max_size = max(obj1.raw_length(), obj2.raw_length()) DCNL DCSP if (not max_size): DCNL DCSP  DCSP return _MAX_SCORE DCNL DCSP return int(((float(common_bytes) * _MAX_SCORE) / max_size))
def format_reflog_line(old_sha, new_sha, committer, timestamp, timezone, message): DCNL  DCSP if (old_sha is None): DCNL DCSP  DCSP old_sha = ZERO_SHA DCNL DCSP return ((((((((((old_sha + ' DCSP ') + new_sha) + ' DCSP ') + committer) + ' DCSP ') + str(timestamp).encode('ascii')) + ' DCSP ') + format_timezone(timezone)) + ' DCTB ') + message)
def parse_reflog_line(line): DCNL  DCSP (begin, message) = line.split(' DCTB ', 1) DCNL DCSP (old_sha, new_sha, rest) = begin.split(' DCSP ', 2) DCNL DCSP (committer, timestamp_str, timezone_str) = rest.rsplit(' DCSP ', 2) DCNL DCSP return Entry(old_sha, new_sha, committer, int(timestamp_str), parse_timezone(timezone_str)[0], message)
def read_reflog(f): DCNL  DCSP for l in f: DCNL DCSP  DCSP (yield parse_reflog_line(l))
def _split_commits_and_tags(obj_store, lst, ignore_unknown=False, pool=None): DCNL  DCSP commits = set() DCNL DCSP tags = set() DCNL DCSP def find_commit_type(sha): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP o = obj_store[sha] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP if (not ignore_unknown): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if isinstance(o, Commit): DCNL DCSP  DCSP  DCSP  DCSP commits.add(sha) DCNL DCSP  DCSP  DCSP elif isinstance(o, Tag): DCNL DCSP  DCSP  DCSP  DCSP tags.add(sha) DCNL DCSP  DCSP  DCSP  DCSP commits.add(o.object[1]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise KeyError(('Not DCSP a DCSP commit DCSP or DCSP a DCSP tag: DCSP %s' % sha)) DCNL DCSP jobs = [pool.spawn(find_commit_type, s) for s in lst] DCNL DCSP gevent.joinall(jobs) DCNL DCSP return (commits, tags)
def tar_stream(store, tree, mtime, format=''): DCNL  DCSP buf = BytesIO() DCNL DCSP with closing(tarfile.open(None, ('w:%s' % format), buf)) as tar: DCNL DCSP  DCSP for (entry_abspath, entry) in _walk_tree(store, tree): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP blob = store[entry.sha] DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP data = ChunkedBytesIO(blob.chunked) DCNL DCSP  DCSP  DCSP info = tarfile.TarInfo() DCNL DCSP  DCSP  DCSP info.name = entry_abspath.decode('ascii') DCNL DCSP  DCSP  DCSP info.size = blob.raw_length() DCNL DCSP  DCSP  DCSP info.mode = entry.mode DCNL DCSP  DCSP  DCSP info.mtime = mtime DCNL DCSP  DCSP  DCSP tar.addfile(info, data) DCNL DCSP  DCSP  DCSP (yield buf.getvalue()) DCNL DCSP  DCSP  DCSP buf.truncate(0) DCNL DCSP  DCSP  DCSP buf.seek(0) DCNL DCSP (yield buf.getvalue())
def _walk_tree(store, tree, root=''): DCNL  DCSP for entry in tree.iteritems(): DCNL DCSP  DCSP entry_abspath = posixpath.join(root, entry.path) DCNL DCSP  DCSP if stat.S_ISDIR(entry.mode): DCNL DCSP  DCSP  DCSP for _ in _walk_tree(store, store[entry.sha], entry_abspath): DCNL DCSP  DCSP  DCSP  DCSP (yield _) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (yield (entry_abspath, entry))
def ignore_error(error): DCNL  DCSP (e_type, e_value, e_tb) = error DCNL DCSP return (issubclass(e_type, socket.error) and (e_value[0] in (errno.ECONNRESET, errno.EPIPE)))
def git_version(git_path=_DEFAULT_GIT): DCNL  DCSP try: DCNL DCSP  DCSP output = run_git_or_fail(['--version'], git_path=git_path) DCNL DCSP except OSError: DCNL DCSP  DCSP return None DCNL DCSP version_prefix = 'git DCSP version DCSP ' DCNL DCSP if (not output.startswith(version_prefix)): DCNL DCSP  DCSP return None DCNL DCSP parts = output[len(version_prefix):].split('.') DCNL DCSP nums = [] DCNL DCSP for part in parts: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP nums.append(int(part)) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP break DCNL DCSP while (len(nums) < _VERSION_LEN): DCNL DCSP  DCSP nums.append(0) DCNL DCSP return tuple(nums[:_VERSION_LEN])
def require_git_version(required_version, git_path=_DEFAULT_GIT): DCNL  DCSP found_version = git_version(git_path=git_path) DCNL DCSP if (found_version is None): DCNL DCSP  DCSP raise SkipTest(('Test DCSP requires DCSP git DCSP >= DCSP %s, DCSP but DCSP c DCSP git DCSP not DCSP found' % (required_version,))) DCNL DCSP if (len(required_version) > _VERSION_LEN): DCNL DCSP  DCSP raise ValueError(('Invalid DCSP version DCSP tuple DCSP %s, DCSP expected DCSP %i DCSP parts' % (required_version, _VERSION_LEN))) DCNL DCSP required_version = list(required_version) DCNL DCSP while (len(found_version) < len(required_version)): DCNL DCSP  DCSP required_version.append(0) DCNL DCSP required_version = tuple(required_version) DCNL DCSP if (found_version < required_version): DCNL DCSP  DCSP required_version = '.'.join(map(str, required_version)) DCNL DCSP  DCSP found_version = '.'.join(map(str, found_version)) DCNL DCSP  DCSP raise SkipTest(('Test DCSP requires DCSP git DCSP >= DCSP %s, DCSP found DCSP %s' % (required_version, found_version)))
def run_git(args, git_path=_DEFAULT_GIT, input=None, capture_stdout=False, **popen_kwargs): DCNL  DCSP env = popen_kwargs.pop('env', {}) DCNL DCSP env['LC_ALL'] = env['LANG'] = 'C' DCNL DCSP args = ([git_path] + args) DCNL DCSP popen_kwargs['stdin'] = subprocess.PIPE DCNL DCSP if capture_stdout: DCNL DCSP  DCSP popen_kwargs['stdout'] = subprocess.PIPE DCNL DCSP else: DCNL DCSP  DCSP popen_kwargs.pop('stdout', None) DCNL DCSP p = subprocess.Popen(args, env=env, **popen_kwargs) DCNL DCSP (stdout, stderr) = p.communicate(input=input) DCNL DCSP return (p.returncode, stdout)
def run_git_or_fail(args, git_path=_DEFAULT_GIT, input=None, **popen_kwargs): DCNL  DCSP if ('stderr' not in popen_kwargs): DCNL DCSP  DCSP popen_kwargs['stderr'] = subprocess.STDOUT DCNL DCSP (returncode, stdout) = run_git(args, git_path=git_path, input=input, capture_stdout=True, **popen_kwargs) DCNL DCSP if (returncode != 0): DCNL DCSP  DCSP raise AssertionError(('git DCSP with DCSP args DCSP %r DCSP failed DCSP with DCSP %d: DCSP %r' % (args, returncode, stdout))) DCNL DCSP return stdout
def import_repo_to_dir(name): DCNL  DCSP temp_dir = tempfile.mkdtemp() DCNL DCSP export_path = os.path.join(_REPOS_DATA_DIR, name) DCNL DCSP temp_repo_dir = os.path.join(temp_dir, name) DCNL DCSP export_file = open(export_path, 'rb') DCNL DCSP run_git_or_fail(['init', '--quiet', '--bare', temp_repo_dir]) DCNL DCSP run_git_or_fail(['fast-import'], input=export_file.read(), cwd=temp_repo_dir) DCNL DCSP export_file.close() DCNL DCSP return temp_repo_dir
def check_for_daemon(limit=10, delay=0.1, timeout=0.1, port=TCP_GIT_PORT): DCNL  DCSP for _ in range(limit): DCNL DCSP  DCSP time.sleep(delay) DCNL DCSP  DCSP s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) DCNL DCSP  DCSP s.settimeout(delay) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP s.connect(('localhost', port)) DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP except socket.timeout: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP except socket.error as e: DCNL DCSP  DCSP  DCSP if (getattr(e, 'errno', False) and (e.errno != errno.ECONNREFUSED)): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP elif (e.args[0] != errno.ECONNREFUSED): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP s.close() DCNL DCSP return False
def open_repo(name, temp_dir=None): DCNL  DCSP if (temp_dir is None): DCNL DCSP  DCSP temp_dir = tempfile.mkdtemp() DCNL DCSP repo_dir = os.path.join(os.path.dirname(__file__), 'data', 'repos', name) DCNL DCSP temp_repo_dir = os.path.join(temp_dir, name) DCNL DCSP shutil.copytree(repo_dir, temp_repo_dir, symlinks=True) DCNL DCSP return Repo(temp_repo_dir)
def tear_down_repo(repo): DCNL  DCSP repo.close() DCNL DCSP temp_dir = os.path.dirname(repo.path.rstrip(os.sep)) DCNL DCSP shutil.rmtree(temp_dir)
def make_object(cls, **attrs): DCNL  DCSP class TestObject(cls, ): DCNL DCSP  DCSP "Class DCSP that DCSP inherits DCSP from DCSP the DCSP given DCSP class, DCSP but DCSP without DCSP __slots__.\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Note DCSP that DCSP classes DCSP with DCSP __slots__ DCSP can't DCSP have DCSP arbitrary DCSP attributes DCSP monkey-\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP patched DCSP in, DCSP so DCSP this DCSP is DCSP a DCSP class DCSP that DCSP is DCSP exactly DCSP the DCSP same DCSP only DCSP with DCSP a\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP __dict__ DCSP instead DCSP of DCSP __slots__.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP " DCNL DCSP  DCSP pass DCNL DCSP TestObject.__name__ = ('TestObject_' + cls.__name__) DCNL DCSP obj = TestObject() DCNL DCSP for (name, value) in attrs.items(): DCNL DCSP  DCSP if (name == 'id'): DCNL DCSP  DCSP  DCSP sha = FixedSha(value) DCNL DCSP  DCSP  DCSP obj.sha = (lambda : sha) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP setattr(obj, name, value) DCNL DCSP return obj
def make_commit(**attrs): DCNL  DCSP default_time = int(time.mktime(datetime.datetime(2010, 1, 1).timetuple())) DCNL DCSP all_attrs = {'author': 'Test DCSP Author DCSP <test@nodomain.com>', 'author_time': default_time, 'author_timezone': 0, 'committer': 'Test DCSP Committer DCSP <test@nodomain.com>', 'commit_time': default_time, 'commit_timezone': 0, 'message': 'Test DCSP message.', 'parents': [], 'tree': ('0' * 40)} DCNL DCSP all_attrs.update(attrs) DCNL DCSP return make_object(Commit, **all_attrs)
def make_tag(target, **attrs): DCNL  DCSP target_id = target.id DCNL DCSP target_type = object_class(target.type_name) DCNL DCSP default_time = int(time.mktime(datetime.datetime(2010, 1, 1).timetuple())) DCNL DCSP all_attrs = {'tagger': 'Test DCSP Author DCSP <test@nodomain.com>', 'tag_time': default_time, 'tag_timezone': 0, 'message': 'Test DCSP message.', 'object': (target_type, target_id), 'name': 'Test DCSP Tag'} DCNL DCSP all_attrs.update(attrs) DCNL DCSP return make_object(Tag, **all_attrs)
def functest_builder(method, func): DCNL  DCSP def do_test(self): DCNL DCSP  DCSP method(self, func) DCNL DCSP return do_test
def ext_functest_builder(method, func): DCNL  DCSP def do_test(self): DCNL DCSP  DCSP if (not isinstance(func, types.BuiltinFunctionType)): DCNL DCSP  DCSP  DCSP raise SkipTest(('%s DCSP extension DCSP not DCSP found' % func)) DCNL DCSP  DCSP method(self, func) DCNL DCSP return do_test
def build_pack(f, objects_spec, store=None): DCNL  DCSP sf = SHA1Writer(f) DCNL DCSP num_objects = len(objects_spec) DCNL DCSP write_pack_header(sf, num_objects) DCNL DCSP full_objects = {} DCNL DCSP offsets = {} DCNL DCSP crc32s = {} DCNL DCSP while (len(full_objects) < num_objects): DCNL DCSP  DCSP for (i, (type_num, data)) in enumerate(objects_spec): DCNL DCSP  DCSP  DCSP if (type_num not in DELTA_TYPES): DCNL DCSP  DCSP  DCSP  DCSP full_objects[i] = (type_num, data, obj_sha(type_num, [data])) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP (base, data) = data DCNL DCSP  DCSP  DCSP if isinstance(base, int): DCNL DCSP  DCSP  DCSP  DCSP if (base not in full_objects): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP (base_type_num, _, _) = full_objects[base] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (base_type_num, _) = store.get_raw(base) DCNL DCSP  DCSP  DCSP full_objects[i] = (base_type_num, data, obj_sha(base_type_num, [data])) DCNL DCSP for (i, (type_num, obj)) in enumerate(objects_spec): DCNL DCSP  DCSP offset = f.tell() DCNL DCSP  DCSP if (type_num == OFS_DELTA): DCNL DCSP  DCSP  DCSP (base_index, data) = obj DCNL DCSP  DCSP  DCSP base = (offset - offsets[base_index]) DCNL DCSP  DCSP  DCSP (_, base_data, _) = full_objects[base_index] DCNL DCSP  DCSP  DCSP obj = (base, create_delta(base_data, data)) DCNL DCSP  DCSP elif (type_num == REF_DELTA): DCNL DCSP  DCSP  DCSP (base_ref, data) = obj DCNL DCSP  DCSP  DCSP if isinstance(base_ref, int): DCNL DCSP  DCSP  DCSP  DCSP (_, base_data, base) = full_objects[base_ref] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (base_type_num, base_data) = store.get_raw(base_ref) DCNL DCSP  DCSP  DCSP  DCSP base = obj_sha(base_type_num, base_data) DCNL DCSP  DCSP  DCSP obj = (base, create_delta(base_data, data)) DCNL DCSP  DCSP crc32 = write_pack_object(sf, type_num, obj) DCNL DCSP  DCSP offsets[i] = offset DCNL DCSP  DCSP crc32s[i] = crc32 DCNL DCSP expected = [] DCNL DCSP for i in range(num_objects): DCNL DCSP  DCSP (type_num, data, sha) = full_objects[i] DCNL DCSP  DCSP assert (len(sha) == 20) DCNL DCSP  DCSP expected.append((offsets[i], type_num, data, sha, crc32s[i])) DCNL DCSP sf.write_sha() DCNL DCSP f.seek(0) DCNL DCSP return expected
def build_commit_graph(object_store, commit_spec, trees=None, attrs=None): DCNL  DCSP if (trees is None): DCNL DCSP  DCSP trees = {} DCNL DCSP if (attrs is None): DCNL DCSP  DCSP attrs = {} DCNL DCSP commit_time = 0 DCNL DCSP nums = {} DCNL DCSP commits = [] DCNL DCSP for commit in commit_spec: DCNL DCSP  DCSP commit_num = commit[0] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP parent_ids = [nums[pn] for pn in commit[1:]] DCNL DCSP  DCSP except KeyError as e: DCNL DCSP  DCSP  DCSP (missing_parent,) = e.args DCNL DCSP  DCSP  DCSP raise ValueError(('Unknown DCSP parent DCSP %i' % missing_parent)) DCNL DCSP  DCSP blobs = [] DCNL DCSP  DCSP for entry in trees.get(commit_num, []): DCNL DCSP  DCSP  DCSP if (len(entry) == 2): DCNL DCSP  DCSP  DCSP  DCSP (path, blob) = entry DCNL DCSP  DCSP  DCSP  DCSP entry = (path, blob, F) DCNL DCSP  DCSP  DCSP (path, blob, mode) = entry DCNL DCSP  DCSP  DCSP blobs.append((path, blob.id, mode)) DCNL DCSP  DCSP  DCSP object_store.add_object(blob) DCNL DCSP  DCSP tree_id = commit_tree(object_store, blobs) DCNL DCSP  DCSP commit_attrs = {'message': ('Commit DCSP %i' % commit_num).encode('ascii'), 'parents': parent_ids, 'tree': tree_id, 'commit_time': commit_time} DCNL DCSP  DCSP commit_attrs.update(attrs.get(commit_num, {})) DCNL DCSP  DCSP commit_obj = make_commit(**commit_attrs) DCNL DCSP  DCSP commit_time = (commit_attrs['commit_time'] + 100) DCNL DCSP  DCSP nums[commit_num] = commit_obj.id DCNL DCSP  DCSP object_store.add_object(commit_obj) DCNL DCSP  DCSP commits.append(commit_obj) DCNL DCSP return commits
def setup_warning_catcher(): DCNL  DCSP caught_warnings = [] DCNL DCSP original_showwarning = warnings.showwarning DCNL DCSP def custom_showwarning(*args, **kwargs): DCNL DCSP  DCSP caught_warnings.append(args[0]) DCNL DCSP warnings.showwarning = custom_showwarning DCNL DCSP def restore_showwarning(): DCNL DCSP  DCSP warnings.showwarning = original_showwarning DCNL DCSP return (caught_warnings, restore_showwarning)
def _escape_value(value): DCNL  DCSP return value.replace('\\', '\\\\').replace('\n', '\\n').replace(' DCTB ', '\\t').replace('"', '\\"')
def parse_submodules(config): DCNL  DCSP for section in config.keys(): DCNL DCSP  DCSP (section_kind, section_name) = section DCNL DCSP  DCSP if (section_kind == 'submodule'): DCNL DCSP  DCSP  DCSP sm_path = config.get(section, 'path') DCNL DCSP  DCSP  DCSP sm_url = config.get(section, 'url') DCNL DCSP  DCSP  DCSP (yield (sm_path, sm_url, section_name))
def resource_path(relative_path): DCNL  DCSP try: DCNL DCSP  DCSP base_path = sys._MEIPASS DCNL DCSP except Exception: DCNL DCSP  DCSP base_path = os.path.abspath('.') DCNL DCSP return os.path.join(base_path, relative_path)
def combine(left, right): DCNL  DCSP h = max(left.shape[0], right.shape[0]) DCNL DCSP w = (left.shape[1] + right.shape[1]) DCNL DCSP hoff = left.shape[0] DCNL DCSP shape = list(left.shape) DCNL DCSP shape[0] = h DCNL DCSP shape[1] = w DCNL DCSP comb = np.zeros(tuple(shape), left.dtype) DCNL DCSP comb[:left.shape[0], :left.shape[1]] = left DCNL DCSP comb[:right.shape[0], left.shape[1]:] = right DCNL DCSP return comb
def extract_docstring(filename, ignore_heading=False): DCNL  DCSP if six.PY2: DCNL DCSP  DCSP lines = open(filename).readlines() DCNL DCSP else: DCNL DCSP  DCSP lines = open(filename, encoding='utf-8').readlines() DCNL DCSP start_row = 0 DCNL DCSP if lines[0].startswith('#!'): DCNL DCSP  DCSP lines.pop(0) DCNL DCSP  DCSP start_row = 1 DCNL DCSP docstring = '' DCNL DCSP first_par = '' DCNL DCSP line_iterator = iter(lines) DCNL DCSP tokens = tokenize.generate_tokens((lambda : next(line_iterator))) DCNL DCSP for (tok_type, tok_content, _, (erow, _), _) in tokens: DCNL DCSP  DCSP tok_type = token.tok_name[tok_type] DCNL DCSP  DCSP if (tok_type in ('NEWLINE', 'COMMENT', 'NL', 'INDENT', 'DEDENT')): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP elif (tok_type == 'STRING'): DCNL DCSP  DCSP  DCSP docstring = eval(tok_content) DCNL DCSP  DCSP  DCSP paragraphs = '\n'.join((line.rstrip() for line in docstring.split('\n'))).split('\n\n') DCNL DCSP  DCSP  DCSP if paragraphs: DCNL DCSP  DCSP  DCSP  DCSP if ignore_heading: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(paragraphs) > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP first_par = re.sub('\n', ' DCSP ', paragraphs[1]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP first_par = ((first_par[:95] + '...') if (len(first_par) > 95) else first_par) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError("Docstring DCSP not DCSP found DCSP by DCSP gallery.\nPlease DCSP check DCSP the DCSP layout DCSP of DCSP your DCSP example DCSP file:\n DCSP {}\n DCSP and DCSP make DCSP sure DCSP it's DCSP correct".format(filename)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP first_par = paragraphs[0] DCNL DCSP  DCSP break DCNL DCSP return (docstring, first_par, ((erow + 1) + start_row))
def generate_example_rst(app): DCNL  DCSP example_dir = os.path.abspath(os.path.join(app.builder.srcdir, '..', '..', 'examples')) DCNL DCSP generated_dir = os.path.abspath(os.path.join(app.builder.srcdir, 'examples')) DCNL DCSP try: DCNL DCSP  DCSP plot_gallery = eval(app.builder.config.plot_gallery) DCNL DCSP except TypeError: DCNL DCSP  DCSP plot_gallery = bool(app.builder.config.plot_gallery) DCNL DCSP if (not os.path.exists(example_dir)): DCNL DCSP  DCSP os.makedirs(example_dir) DCNL DCSP if (not os.path.exists(generated_dir)): DCNL DCSP  DCSP os.makedirs(generated_dir) DCNL DCSP seen_backrefs = set() DCNL DCSP generate_dir_rst('.', example_dir, generated_dir, plot_gallery, seen_backrefs)
def _thumbnail_div(subdir, full_dir, fname, snippet): DCNL  DCSP thumb = os.path.join(full_dir, 'images', 'thumb', (fname[:(-3)] + '.png')) DCNL DCSP link_name = os.path.join(full_dir, fname).replace(os.path.sep, '_') DCNL DCSP ref_name = os.path.join(subdir, fname).replace(os.path.sep, '_') DCNL DCSP if ref_name.startswith('._'): DCNL DCSP  DCSP ref_name = ref_name[2:] DCNL DCSP out = [] DCNL DCSP out.append(('.. DCSP figure:: DCSP %s\n' % thumb)) DCNL DCSP out.append(' DCSP  DCSP  DCSP :scale: DCSP 50\n') DCNL DCSP if link_name.startswith('._'): DCNL DCSP  DCSP link_name = link_name[2:] DCNL DCSP if (full_dir != '.'): DCNL DCSP  DCSP out.append((' DCSP  DCSP  DCSP :target: DCSP ./%s/%s.html\n\n' % (full_dir, fname[:(-3)]))) DCNL DCSP else: DCNL DCSP  DCSP out.append((' DCSP  DCSP  DCSP :target: DCSP ./%s.html\n\n' % link_name[:(-3)])) DCNL DCSP out.append((' DCSP  DCSP  DCSP :ref:`example_%s`\n\n\n\n\n' % ref_name)) DCNL DCSP return ''.join(out)
def generate_dir_rst(directory, example_dir, root_dir, plot_gallery, seen_backrefs): DCNL  DCSP if (not (directory == '.')): DCNL DCSP  DCSP target_dir = os.path.join(root_dir, directory) DCNL DCSP  DCSP src_dir = os.path.join(example_dir, directory) DCNL DCSP else: DCNL DCSP  DCSP target_dir = root_dir DCNL DCSP  DCSP src_dir = example_dir DCNL DCSP if (not os.path.exists(target_dir)): DCNL DCSP  DCSP os.makedirs(target_dir) DCNL DCSP sorted_listdir = line_count_sort(os.listdir(src_dir), src_dir) DCNL DCSP for fname in sorted_listdir: DCNL DCSP  DCSP print(fname) DCNL DCSP  DCSP if fname.endswith('py'): DCNL DCSP  DCSP  DCSP backrefs = generate_file_rst(fname, target_dir, src_dir, root_dir, plot_gallery) DCNL DCSP  DCSP  DCSP new_fname = os.path.join(src_dir, fname) DCNL DCSP  DCSP  DCSP (_, snippet, _) = extract_docstring(new_fname, True) DCNL DCSP  DCSP  DCSP for backref in backrefs: DCNL DCSP  DCSP  DCSP  DCSP include_path = os.path.join(root_dir, ('../modules/generated/%s.examples' % backref)) DCNL DCSP  DCSP  DCSP  DCSP seen = (backref in seen_backrefs) DCNL DCSP  DCSP  DCSP  DCSP with open(include_path, ('a' if seen else 'w')) as ex_file: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not seen): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP print(file=ex_file) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP print(('Examples DCSP using DCSP ``%s``' % backref), file=ex_file) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP print(('-----------------%s--' % ('-' * len(backref))), file=ex_file) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP print(file=ex_file) DCNL DCSP  DCSP  DCSP  DCSP  DCSP rel_dir = os.path.join('../../auto_examples', directory) DCNL DCSP  DCSP  DCSP  DCSP  DCSP ex_file.write(_thumbnail_div(directory, rel_dir, fname, snippet)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP seen_backrefs.add(backref)
def make_thumbnail(in_fname, out_fname, width, height): DCNL  DCSP try: DCNL DCSP  DCSP from PIL import Image DCNL DCSP except ImportError: DCNL DCSP  DCSP import Image DCNL DCSP img = Image.open(in_fname) DCNL DCSP (width_in, height_in) = img.size DCNL DCSP scale_w = (width / float(width_in)) DCNL DCSP scale_h = (height / float(height_in)) DCNL DCSP if ((height_in * scale_w) <= height): DCNL DCSP  DCSP scale = scale_w DCNL DCSP else: DCNL DCSP  DCSP scale = scale_h DCNL DCSP width_sc = int(round((scale * width_in))) DCNL DCSP height_sc = int(round((scale * height_in))) DCNL DCSP img.thumbnail((width_sc, height_sc), Image.ANTIALIAS) DCNL DCSP thumb = Image.new('RGB', (width, height), (255, 255, 255)) DCNL DCSP pos_insert = (((width - width_sc) // 2), ((height - height_sc) // 2)) DCNL DCSP thumb.paste(img, pos_insert) DCNL DCSP thumb.save(out_fname)
def get_short_module_name(module_name, obj_name): DCNL  DCSP parts = module_name.split('.') DCNL DCSP short_name = module_name DCNL DCSP for i in range((len(parts) - 1), 0, (-1)): DCNL DCSP  DCSP short_name = '.'.join(parts[:i]) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP exec ('from DCSP %s DCSP import DCSP %s' % (short_name, obj_name)) DCNL DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP short_name = '.'.join(parts[:(i + 1)]) DCNL DCSP  DCSP  DCSP break DCNL DCSP return short_name
def identify_names(code): DCNL  DCSP finder = NameFinder() DCNL DCSP finder.visit(ast.parse(code)) DCNL DCSP example_code_obj = {} DCNL DCSP for (name, full_name) in finder.get_mapping(): DCNL DCSP  DCSP (module, attribute) = full_name.rsplit('.', 1) DCNL DCSP  DCSP module_short = get_short_module_name(module, attribute) DCNL DCSP  DCSP cobj = {'name': attribute, 'module': module, 'module_short': module_short} DCNL DCSP  DCSP example_code_obj[name] = cobj DCNL DCSP return example_code_obj
def generate_file_rst(fname, target_dir, src_dir, root_dir, plot_gallery): DCNL  DCSP base_image_name = os.path.splitext(fname)[0] DCNL DCSP image_fname = ('%s_%%03d.png' % base_image_name) DCNL DCSP this_template = rst_template DCNL DCSP last_dir = os.path.split(src_dir)[(-1)] DCNL DCSP if ((last_dir == '.') or (last_dir == 'examples')): DCNL DCSP  DCSP last_dir = '' DCNL DCSP else: DCNL DCSP  DCSP last_dir += '_' DCNL DCSP short_fname = (last_dir + fname) DCNL DCSP src_file = os.path.join(src_dir, fname) DCNL DCSP example_file = os.path.join(target_dir, fname) DCNL DCSP shutil.copyfile(src_file, example_file) DCNL DCSP figure_list = [] DCNL DCSP image_dir = os.path.join(target_dir, 'images') DCNL DCSP thumb_dir = os.path.join(image_dir, 'thumb') DCNL DCSP if (not os.path.exists(image_dir)): DCNL DCSP  DCSP os.makedirs(image_dir) DCNL DCSP if (not os.path.exists(thumb_dir)): DCNL DCSP  DCSP os.makedirs(thumb_dir) DCNL DCSP image_path = os.path.join(image_dir, image_fname) DCNL DCSP stdout_path = os.path.join(image_dir, ('stdout_%s.txt' % base_image_name)) DCNL DCSP time_path = os.path.join(image_dir, ('time_%s.txt' % base_image_name)) DCNL DCSP thumb_file = os.path.join(thumb_dir, (base_image_name + '.png')) DCNL DCSP time_elapsed = 0 DCNL DCSP if (plot_gallery and fname.endswith('.py')): DCNL DCSP  DCSP first_image_file = (image_path % 1) DCNL DCSP  DCSP if os.path.exists(stdout_path): DCNL DCSP  DCSP  DCSP stdout = open(stdout_path).read() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP stdout = '' DCNL DCSP  DCSP if os.path.exists(time_path): DCNL DCSP  DCSP  DCSP time_elapsed = float(open(time_path).read()) DCNL DCSP  DCSP if ((not os.path.exists(stdout_path)) or (os.stat(stdout_path).st_mtime <= os.stat(src_file).st_mtime)): DCNL DCSP  DCSP  DCSP print(('plotting DCSP %s' % fname)) DCNL DCSP  DCSP  DCSP t0 = time() DCNL DCSP  DCSP  DCSP import matplotlib.pyplot as plt DCNL DCSP  DCSP  DCSP plt.close('all') DCNL DCSP  DCSP  DCSP cwd = os.getcwd() DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP orig_stdout = sys.stdout DCNL DCSP  DCSP  DCSP  DCSP os.chdir(os.path.dirname(src_file)) DCNL DCSP  DCSP  DCSP  DCSP my_buffer = StringIO() DCNL DCSP  DCSP  DCSP  DCSP my_stdout = Tee(sys.stdout, my_buffer) DCNL DCSP  DCSP  DCSP  DCSP sys.stdout = my_stdout DCNL DCSP  DCSP  DCSP  DCSP my_globals = {'pl': plt} DCNL DCSP  DCSP  DCSP  DCSP execfile(os.path.basename(src_file), my_globals) DCNL DCSP  DCSP  DCSP  DCSP time_elapsed = (time() - t0) DCNL DCSP  DCSP  DCSP  DCSP sys.stdout = orig_stdout DCNL DCSP  DCSP  DCSP  DCSP my_stdout = my_buffer.getvalue() DCNL DCSP  DCSP  DCSP  DCSP my_stdout = my_stdout.strip().expandtabs() DCNL DCSP  DCSP  DCSP  DCSP if my_stdout: DCNL DCSP  DCSP  DCSP  DCSP  DCSP stdout = ('**Script DCSP output**::\n\n DCSP  DCSP %s\n\n' % '\n DCSP  DCSP '.join(my_stdout.split('\n'))) DCNL DCSP  DCSP  DCSP  DCSP open(stdout_path, 'w').write(stdout) DCNL DCSP  DCSP  DCSP  DCSP open(time_path, 'w').write(('%f' % time_elapsed)) DCNL DCSP  DCSP  DCSP  DCSP os.chdir(cwd) DCNL DCSP  DCSP  DCSP  DCSP fig_managers = matplotlib._pylab_helpers.Gcf.get_all_fig_managers() DCNL DCSP  DCSP  DCSP  DCSP for fig_mngr in fig_managers: DCNL DCSP  DCSP  DCSP  DCSP  DCSP fig = plt.figure(fig_mngr.num) DCNL DCSP  DCSP  DCSP  DCSP  DCSP kwargs = {} DCNL DCSP  DCSP  DCSP  DCSP  DCSP to_rgba = matplotlib.colors.colorConverter.to_rgba DCNL DCSP  DCSP  DCSP  DCSP  DCSP for attr in ['facecolor', 'edgecolor']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fig_attr = getattr(fig, ('get_' + attr))() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP default_attr = matplotlib.rcParams[('figure.' + attr)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (to_rgba(fig_attr) != to_rgba(default_attr)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP kwargs[attr] = fig_attr DCNL DCSP  DCSP  DCSP  DCSP  DCSP fig.savefig((image_path % fig_mngr.num), **kwargs) DCNL DCSP  DCSP  DCSP  DCSP  DCSP figure_list.append((image_fname % fig_mngr.num)) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP print((80 * '_')) DCNL DCSP  DCSP  DCSP  DCSP print(('%s DCSP is DCSP not DCSP compiling:' % fname)) DCNL DCSP  DCSP  DCSP  DCSP traceback.print_exc() DCNL DCSP  DCSP  DCSP  DCSP print((80 * '_')) DCNL DCSP  DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP  DCSP os.chdir(cwd) DCNL DCSP  DCSP  DCSP  DCSP sys.stdout = orig_stdout DCNL DCSP  DCSP  DCSP print((' DCSP - DCSP time DCSP elapsed DCSP : DCSP %.2g DCSP sec' % time_elapsed)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP figure_list = [f[len(image_dir):] for f in glob.glob(image_path.replace('%03d', '[0-9][0-9][0-9]'))] DCNL DCSP  DCSP figure_list.sort() DCNL DCSP  DCSP this_template = plot_rst_template DCNL DCSP  DCSP if os.path.exists(first_image_file): DCNL DCSP  DCSP  DCSP first_img = (image_fname % 1) DCNL DCSP  DCSP  DCSP make_thumbnail(first_image_file, thumb_file, 400, 280) DCNL DCSP (docstring, short_desc, end_row) = extract_docstring(example_file) DCNL DCSP if (len(figure_list) == 1): DCNL DCSP  DCSP figure_name = figure_list[0] DCNL DCSP  DCSP image_list = (SINGLE_IMAGE % figure_name.lstrip('/')) DCNL DCSP else: DCNL DCSP  DCSP image_list = HLIST_HEADER DCNL DCSP  DCSP for figure_name in figure_list: DCNL DCSP  DCSP  DCSP image_list += (HLIST_IMAGE_TEMPLATE % figure_name.lstrip('/')) DCNL DCSP (time_m, time_s) = divmod(time_elapsed, 60) DCNL DCSP f = open(os.path.join(target_dir, (base_image_name + '.rst')), 'w') DCNL DCSP f.write((this_template % locals())) DCNL DCSP f.flush() DCNL DCSP if six.PY2: DCNL DCSP  DCSP example_code_obj = identify_names(open(example_file).read()) DCNL DCSP else: DCNL DCSP  DCSP example_code_obj = identify_names(open(example_file, encoding='utf-8').read()) DCNL DCSP if example_code_obj: DCNL DCSP  DCSP codeobj_fname = (example_file[:(-3)] + '_codeobj.pickle') DCNL DCSP  DCSP with open(codeobj_fname, 'wb') as fid: DCNL DCSP  DCSP  DCSP pickle.dump(example_code_obj, fid, pickle.HIGHEST_PROTOCOL) DCNL DCSP backrefs = set(('{module_short}.{name}'.format(**entry) for entry in example_code_obj.values() if entry['module'].startswith('sklearn'))) DCNL DCSP return backrefs
def approx_fprime(x, f, eps=None, *args): DCNL  DCSP if (eps is None): DCNL DCSP  DCSP eps = np.sqrt(np.finfo(ca.float_).eps) DCNL DCSP grad = np.zeros_like(x) DCNL DCSP step = np.zeros_like(x) DCNL DCSP for idx in np.ndindex(x.shape): DCNL DCSP  DCSP step[idx] = (eps * max(abs(x[idx]), 1.0)) DCNL DCSP  DCSP grad[idx] = ((f(*(((x + step),) + args)) - f(*(((x - step),) + args))) / (2 * step[idx])) DCNL DCSP  DCSP step[idx] = 0.0 DCNL DCSP return grad
def check_grad(layer, x0, seed=1, eps=None, rtol=None, atol=None): DCNL  DCSP def fun(x): DCNL DCSP  DCSP ca.random.seed(seed) DCNL DCSP  DCSP y = np.array(layer.fprop(ca.array(x))).astype(np.float_) DCNL DCSP  DCSP return np.sum(y) DCNL DCSP def fun_grad(x): DCNL DCSP  DCSP y = layer.fprop(ca.array(x)) DCNL DCSP  DCSP y_grad = ca.ones_like(y, dtype=ca.float_) DCNL DCSP  DCSP x_grad = np.array(layer.bprop(y_grad)) DCNL DCSP  DCSP return x_grad DCNL DCSP g_approx = approx_fprime(x0, fun, eps) DCNL DCSP g_true = fun_grad(x0) DCNL DCSP assert gradclose(g_true, g_approx, rtol, atol) DCNL DCSP if isinstance(layer, ParamMixin): DCNL DCSP  DCSP def fun(x, p_idx): DCNL DCSP  DCSP  DCSP ca.random.seed(seed) DCNL DCSP  DCSP  DCSP param_array = layer.params[p_idx].array DCNL DCSP  DCSP  DCSP param_array *= 0 DCNL DCSP  DCSP  DCSP param_array += ca.array(x) DCNL DCSP  DCSP  DCSP y = np.array(layer.fprop(ca.array(x0))).astype(np.float_) DCNL DCSP  DCSP  DCSP return np.sum(y) DCNL DCSP  DCSP def fun_grad(x, p_idx): DCNL DCSP  DCSP  DCSP param_array = layer.params[p_idx].array DCNL DCSP  DCSP  DCSP param_array *= 0 DCNL DCSP  DCSP  DCSP param_array += ca.array(x) DCNL DCSP  DCSP  DCSP out = layer.fprop(ca.array(x0)) DCNL DCSP  DCSP  DCSP y_grad = ca.ones_like(out, dtype=ca.float_) DCNL DCSP  DCSP  DCSP layer.bprop(y_grad) DCNL DCSP  DCSP  DCSP param_grad = np.array(layer.params[p_idx].grad()) DCNL DCSP  DCSP  DCSP return param_grad.astype(np.float_) DCNL DCSP  DCSP for (p_idx, p) in enumerate(layer.params): DCNL DCSP  DCSP  DCSP x = np.array(layer.params[p_idx].array) DCNL DCSP  DCSP  DCSP g_true = fun_grad(x, p_idx) DCNL DCSP  DCSP  DCSP g_approx = approx_fprime(x, fun, eps, p_idx) DCNL DCSP  DCSP  DCSP assert gradclose(g_true, g_approx, rtol, atol)
def check_grad(loss, x0, y0, seed=1, eps=None, rtol=None, atol=None): DCNL  DCSP def fun(x): DCNL DCSP  DCSP ca.random.seed(seed) DCNL DCSP  DCSP y = np.array(loss.loss(ca.array(x), ca.array(y0))).astype(np.float_) DCNL DCSP  DCSP return np.sum(y) DCNL DCSP def fun_grad(x): DCNL DCSP  DCSP x_grad = np.array(loss.grad(ca.array(x), ca.array(y0))) DCNL DCSP  DCSP return x_grad DCNL DCSP g_approx = approx_fprime(x0, fun, eps) DCNL DCSP g_true = fun_grad(x0) DCNL DCSP assert gradclose(g_true, g_approx, rtol, atol)
def img_tile(imgs, aspect_ratio=1.0, tile_shape=None, border=1, border_color=0): DCNL  DCSP imgs = np.array(imgs) DCNL DCSP if ((imgs.ndim != 3) and (imgs.ndim != 4)): DCNL DCSP  DCSP raise ValueError('imgs DCSP has DCSP wrong DCSP number DCSP of DCSP dimensions.') DCNL DCSP if ((imgs.ndim == 4) and (imgs.shape[3] == 1)): DCNL DCSP  DCSP imgs = np.squeeze(imgs) DCNL DCSP n_imgs = imgs.shape[0] DCNL DCSP img_shape = np.array(imgs.shape[1:3]) DCNL DCSP if (tile_shape is None): DCNL DCSP  DCSP img_aspect_ratio = (img_shape[1] / float(img_shape[0])) DCNL DCSP  DCSP aspect_ratio *= img_aspect_ratio DCNL DCSP  DCSP tile_height = int(np.ceil(np.sqrt((n_imgs * aspect_ratio)))) DCNL DCSP  DCSP tile_width = int(np.ceil(np.sqrt((n_imgs / aspect_ratio)))) DCNL DCSP  DCSP grid_shape = np.array((tile_height, tile_width)) DCNL DCSP else: DCNL DCSP  DCSP assert (len(tile_shape) == 2) DCNL DCSP  DCSP grid_shape = np.array(tile_shape) DCNL DCSP tile_img_shape = np.array(imgs.shape[1:]) DCNL DCSP tile_img_shape[:2] = (((img_shape[:2] + border) * grid_shape[:2]) - border) DCNL DCSP tile_img = np.empty(tile_img_shape) DCNL DCSP tile_img[:] = border_color DCNL DCSP for i in range(grid_shape[0]): DCNL DCSP  DCSP for j in range(grid_shape[1]): DCNL DCSP  DCSP  DCSP img_idx = (j + (i * grid_shape[1])) DCNL DCSP  DCSP  DCSP if (img_idx >= n_imgs): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP img = imgs[img_idx] DCNL DCSP  DCSP  DCSP yoff = ((img_shape[0] + border) * i) DCNL DCSP  DCSP  DCSP xoff = ((img_shape[1] + border) * j) DCNL DCSP  DCSP  DCSP tile_img[yoff:(yoff + img_shape[0]), xoff:(xoff + img_shape[1]), ...] = img DCNL DCSP return tile_img
def approx_fprime(x, f, eps=None, *args): DCNL  DCSP if (eps is None): DCNL DCSP  DCSP eps = np.sqrt(np.finfo(ca.float_).eps) DCNL DCSP grad = np.zeros_like(x) DCNL DCSP step = np.zeros_like(x) DCNL DCSP for idx in np.ndindex(x.shape): DCNL DCSP  DCSP step[idx] = (eps * max(abs(x[idx]), 1.0)) DCNL DCSP  DCSP grad[idx] = ((f(*(((x + step),) + args)) - f(*(((x - step),) + args))) / (2 * step[idx])) DCNL DCSP  DCSP step[idx] = 0.0 DCNL DCSP return grad
def seek_end_of_dict(module_data, start_line, start_col, next_node_line, next_node_col): DCNL  DCSP if (next_node_line == None): DCNL DCSP  DCSP snippet = module_data.splitlines()[start_line:] DCNL DCSP  DCSP next_node_col = 0 DCNL DCSP  DCSP last_line_offset = 0 DCNL DCSP else: DCNL DCSP  DCSP snippet = module_data.splitlines()[start_line:next_node_line] DCNL DCSP  DCSP last_line_offset = 1 DCNL DCSP if (next_node_col == 0): DCNL DCSP  DCSP for (line_idx, line) in tuple(reversed(tuple(enumerate(snippet))))[last_line_offset:]: DCNL DCSP  DCSP  DCSP end_col = None DCNL DCSP  DCSP  DCSP for (col_idx, char) in reversed(tuple(enumerate((c for c in line)))): DCNL DCSP  DCSP  DCSP  DCSP if ((char == '}') and (end_col is None)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP end_col = col_idx DCNL DCSP  DCSP  DCSP  DCSP elif ((char == '#') and (end_col is not None)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP end_col = None DCNL DCSP  DCSP  DCSP if (end_col is not None): DCNL DCSP  DCSP  DCSP  DCSP end_line = (start_line + line_idx) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ParseError('Multiple DCSP statements DCSP per DCSP line DCSP confuses DCSP the DCSP module DCSP metadata DCSP parser.') DCNL DCSP return (end_line, end_col)
def seek_end_of_string(module_data, start_line, start_col, next_node_line, next_node_col): DCNL  DCSP raise NotImplementedError('Finding DCSP end DCSP of DCSP string DCSP not DCSP yet DCSP implemented')
def extract_metadata(module_data): DCNL  DCSP metadata = None DCNL DCSP start_line = (-1) DCNL DCSP start_col = (-1) DCNL DCSP end_line = (-1) DCNL DCSP end_col = (-1) DCNL DCSP targets = None DCNL DCSP mod_ast_tree = ast.parse(module_data) DCNL DCSP for (root_idx, child) in enumerate(mod_ast_tree.body): DCNL DCSP  DCSP if isinstance(child, ast.Assign): DCNL DCSP  DCSP  DCSP for target in child.targets: DCNL DCSP  DCSP  DCSP  DCSP if (target.id == 'ANSIBLE_METADATA'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(child.value, ast.Dict): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = ast.literal_eval(child.value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP next_node = mod_ast_tree.body[(root_idx + 1)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP next_lineno = next_node.lineno DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP next_col_offset = next_node.col_offset DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP next_lineno = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP next_col_offset = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (end_line, end_col) = seek_end_of_dict(module_data, (child.lineno - 1), child.col_offset, next_lineno, next_col_offset) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(child.value, ast.Str): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = yaml.safe_load(child.value.s) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP end_line = seek_end_of_string(module_data) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(child.value, ast.Bytes): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = yaml.safe_load(to_text(child.value.s, errors='surrogate_or_strict')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP end_line = seek_end_of_string(module_data) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP start_line = (child.lineno - 1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP start_col = child.col_offset DCNL DCSP  DCSP  DCSP  DCSP  DCSP targets = [t.id for t in child.targets] DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (metadata is not None): DCNL DCSP  DCSP  DCSP break DCNL DCSP return (metadata, start_line, start_col, end_line, end_col, targets)
def find_documentation(module_data): DCNL  DCSP start_line = (-1) DCNL DCSP mod_ast_tree = ast.parse(module_data) DCNL DCSP for child in mod_ast_tree.body: DCNL DCSP  DCSP if isinstance(child, ast.Assign): DCNL DCSP  DCSP  DCSP for target in child.targets: DCNL DCSP  DCSP  DCSP  DCSP if (target.id == 'DOCUMENTATION'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP start_line = (child.lineno - 1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP return start_line
def remove_metadata(module_data, start_line, start_col, end_line, end_col): DCNL  DCSP lines = module_data.split('\n') DCNL DCSP new_lines = lines[:start_line] DCNL DCSP if (start_col != 0): DCNL DCSP  DCSP new_lines.append(lines[start_line][:start_col]) DCNL DCSP next_line = lines[end_line] DCNL DCSP if ((len(next_line) - 1) != end_col): DCNL DCSP  DCSP new_lines.append(next_line[end_col:]) DCNL DCSP if (len(lines) > end_line): DCNL DCSP  DCSP new_lines.extend(lines[(end_line + 1):]) DCNL DCSP return '\n'.join(new_lines)
def insert_metadata(module_data, new_metadata, insertion_line, targets=('ANSIBLE_METADATA',)): DCNL  DCSP assignments = ' DCSP = DCSP '.join(targets) DCNL DCSP pretty_metadata = pformat(new_metadata, width=1).split('\n') DCNL DCSP new_lines = [] DCNL DCSP new_lines.append('{} DCSP = DCSP {}'.format(assignments, pretty_metadata[0])) DCNL DCSP if (len(pretty_metadata) > 1): DCNL DCSP  DCSP for line in pretty_metadata[1:]: DCNL DCSP  DCSP  DCSP new_lines.append('{}{}'.format((' DCSP ' * ((len(assignments) - 1) + len(' DCSP = DCSP {'))), line)) DCNL DCSP old_lines = module_data.split('\n') DCNL DCSP lines = (((old_lines[:insertion_line] + new_lines) + ['']) + old_lines[insertion_line:]) DCNL DCSP return '\n'.join(lines)
def parse_assigned_metadata_initial(csvfile): DCNL  DCSP with open(csvfile, 'rb') as f: DCNL DCSP  DCSP for record in csv.reader(f): DCNL DCSP  DCSP  DCSP module = record[0] DCNL DCSP  DCSP  DCSP if (record[12] == 'core'): DCNL DCSP  DCSP  DCSP  DCSP supported_by = 'core' DCNL DCSP  DCSP  DCSP elif (record[12] == 'curated'): DCNL DCSP  DCSP  DCSP  DCSP supported_by = 'committer' DCNL DCSP  DCSP  DCSP elif (record[12] == 'community'): DCNL DCSP  DCSP  DCSP  DCSP supported_by = 'community' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP print ('Module DCSP %s DCSP has DCSP no DCSP supported_by DCSP field. DCSP  DCSP Using DCSP community' % record[0]) DCNL DCSP  DCSP  DCSP  DCSP supported_by = 'community' DCNL DCSP  DCSP  DCSP  DCSP supported_by = DEFAULT_METADATA['supported_by'] DCNL DCSP  DCSP  DCSP status = [] DCNL DCSP  DCSP  DCSP if record[6]: DCNL DCSP  DCSP  DCSP  DCSP status.append('stableinterface') DCNL DCSP  DCSP  DCSP if record[7]: DCNL DCSP  DCSP  DCSP  DCSP status.append('deprecated') DCNL DCSP  DCSP  DCSP if (not status): DCNL DCSP  DCSP  DCSP  DCSP status.extend(DEFAULT_METADATA['status']) DCNL DCSP  DCSP  DCSP (yield (module, {'version': DEFAULT_METADATA['version'], 'supported_by': supported_by, 'status': status}))
def parse_assigned_metadata(csvfile): DCNL  DCSP with open(csvfile, 'rb') as f: DCNL DCSP  DCSP for record in csv.reader(f): DCNL DCSP  DCSP  DCSP module = record[0] DCNL DCSP  DCSP  DCSP supported_by = record[1] DCNL DCSP  DCSP  DCSP status = [] DCNL DCSP  DCSP  DCSP if record[2]: DCNL DCSP  DCSP  DCSP  DCSP status.append('stableinterface') DCNL DCSP  DCSP  DCSP if record[4]: DCNL DCSP  DCSP  DCSP  DCSP status.append('deprecated') DCNL DCSP  DCSP  DCSP if record[5]: DCNL DCSP  DCSP  DCSP  DCSP status.append('removed') DCNL DCSP  DCSP  DCSP if record[6]: DCNL DCSP  DCSP  DCSP  DCSP status.append('tested') DCNL DCSP  DCSP  DCSP if ((not status) or record[3]): DCNL DCSP  DCSP  DCSP  DCSP status.append('preview') DCNL DCSP  DCSP  DCSP (yield (module, {'version': '1.0', 'supported_by': supported_by, 'status': status}))
def metadata_summary(plugins, version=None): DCNL  DCSP no_metadata = {} DCNL DCSP has_metadata = {} DCNL DCSP supported_by = defaultdict(set) DCNL DCSP status = defaultdict(set) DCNL DCSP plugins = list(plugins) DCNL DCSP all_mods_metadata = return_metadata(plugins) DCNL DCSP for (name, filename) in plugins: DCNL DCSP  DCSP if ((name not in no_metadata) and (name not in has_metadata)): DCNL DCSP  DCSP  DCSP metadata = all_mods_metadata[name] DCNL DCSP  DCSP  DCSP if (metadata is None): DCNL DCSP  DCSP  DCSP  DCSP no_metadata[name] = filename DCNL DCSP  DCSP  DCSP elif ((version is not None) and (('version' not in metadata) or (StrictVersion(metadata['version']) < StrictVersion(version)))): DCNL DCSP  DCSP  DCSP  DCSP no_metadata[name] = filename DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP has_metadata[name] = filename DCNL DCSP  DCSP if (all_mods_metadata[name] is None): DCNL DCSP  DCSP  DCSP supported_by[DEFAULT_METADATA['supported_by']].add(filename) DCNL DCSP  DCSP  DCSP status[DEFAULT_METADATA['status'][0]].add(filename) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP supported_by[all_mods_metadata[name]['supported_by']].add(filename) DCNL DCSP  DCSP  DCSP for one_status in all_mods_metadata[name]['status']: DCNL DCSP  DCSP  DCSP  DCSP status[one_status].add(filename) DCNL DCSP return (list(no_metadata.values()), list(has_metadata.values()), supported_by, status)
def add_from_csv(csv_file, version=None, overwrite=False): DCNL  DCSP diagnostic_messages = [] DCNL DCSP for (module_name, new_metadata) in parse_assigned_metadata_initial(csv_file): DCNL DCSP  DCSP filename = module_loader.find_plugin(module_name, mod_type='.py') DCNL DCSP  DCSP if (filename is None): DCNL DCSP  DCSP  DCSP diagnostic_messages.append('Unable DCSP to DCSP find DCSP the DCSP module DCSP file DCSP for DCSP {}'.format(module_name)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP write_metadata(filename, new_metadata, version, overwrite) DCNL DCSP  DCSP except ParseError as e: DCNL DCSP  DCSP  DCSP diagnostic_messages.append(e.args[0]) DCNL DCSP  DCSP  DCSP continue DCNL DCSP if diagnostic_messages: DCNL DCSP  DCSP pprint(diagnostic_messages) DCNL DCSP return 0
def add_default(version=None, overwrite=False): DCNL  DCSP plugins = module_loader.all(path_only=True) DCNL DCSP plugins = ((os.path.splitext(os.path.basename(p))[0], p) for p in plugins) DCNL DCSP plugins = (p for p in plugins if (p[0] not in NONMODULE_MODULE_NAMES)) DCNL DCSP processed = set() DCNL DCSP diagnostic_messages = [] DCNL DCSP for (name, filename) in (info for info in plugins if (info[0] not in processed)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP write_metadata(filename, DEFAULT_METADATA, version, overwrite) DCNL DCSP  DCSP except ParseError as e: DCNL DCSP  DCSP  DCSP diagnostic_messages.append(e.args[0]) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP processed.add(name) DCNL DCSP if diagnostic_messages: DCNL DCSP  DCSP pprint(diagnostic_messages) DCNL DCSP return 0
def report(version=None): DCNL  DCSP plugins = module_loader.all(path_only=True) DCNL DCSP plugins = list(plugins) DCNL DCSP plugins = ((os.path.splitext(os.path.basename(p))[0], p) for p in plugins) DCNL DCSP plugins = (p for p in plugins if (p[0] != NONMODULE_MODULE_NAMES)) DCNL DCSP plugins = list(plugins) DCNL DCSP (no_metadata, has_metadata, support, status) = metadata_summary(plugins, version=version) DCNL DCSP print '== DCSP Has DCSP metadata DCSP ==' DCNL DCSP pprint(sorted(has_metadata)) DCNL DCSP print '' DCNL DCSP print '== DCSP Has DCSP no DCSP metadata DCSP ==' DCNL DCSP pprint(sorted(no_metadata)) DCNL DCSP print '' DCNL DCSP print '== DCSP Supported DCSP by DCSP core DCSP ==' DCNL DCSP pprint(sorted(support['core'])) DCNL DCSP print '== DCSP Supported DCSP by DCSP committers DCSP ==' DCNL DCSP pprint(sorted(support['committer'])) DCNL DCSP print '== DCSP Supported DCSP by DCSP community DCSP ==' DCNL DCSP pprint(sorted(support['community'])) DCNL DCSP print '' DCNL DCSP print '== DCSP Status: DCSP stableinterface DCSP ==' DCNL DCSP pprint(sorted(status['stableinterface'])) DCNL DCSP print '== DCSP Status: DCSP preview DCSP ==' DCNL DCSP pprint(sorted(status['preview'])) DCNL DCSP print '== DCSP Status: DCSP deprecated DCSP ==' DCNL DCSP pprint(sorted(status['deprecated'])) DCNL DCSP print '== DCSP Status: DCSP removed DCSP ==' DCNL DCSP pprint(sorted(status['removed'])) DCNL DCSP print '' DCNL DCSP print '== DCSP Summary DCSP ==' DCNL DCSP print 'No DCSP Metadata: DCSP {0} DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Has DCSP Metadata: DCSP {1}'.format(len(no_metadata), len(has_metadata)) DCNL DCSP print 'Supported DCSP by DCSP core: DCSP {0} DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Supported DCSP by DCSP community: DCSP {1} DCSP  DCSP  DCSP  DCSP Supported DCSP by DCSP committer: DCSP {2}'.format(len(support['core']), len(support['community']), len(support['committer'])) DCNL DCSP print 'Status DCSP StableInterface: DCSP {0} DCSP Status DCSP Preview: DCSP {1} DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Status DCSP Deprecated: DCSP {2} DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Status DCSP Removed: DCSP {3}'.format(len(status['stableinterface']), len(status['preview']), len(status['deprecated']), len(status['removed'])) DCNL DCSP return 0
def rst_ify(text): DCNL  DCSP try: DCNL DCSP  DCSP t = _ITALIC.sub((('*' + '\\1') + '*'), text) DCNL DCSP  DCSP t = _BOLD.sub((('**' + '\\1') + '**'), t) DCNL DCSP  DCSP t = _MODULE.sub(((':ref:`' + '\\1 DCSP <\\1>') + '`'), t) DCNL DCSP  DCSP t = _URL.sub('\\1', t) DCNL DCSP  DCSP t = _CONST.sub((('``' + '\\1') + '``'), t) DCNL DCSP except Exception as e: DCNL DCSP  DCSP raise AnsibleError(('Could DCSP not DCSP process DCSP (%s) DCSP : DCSP %s' % (str(text), str(e)))) DCNL DCSP return t
def html_ify(text): DCNL  DCSP t = cgi.escape(text) DCNL DCSP t = _ITALIC.sub((('<em>' + '\\1') + '</em>'), t) DCNL DCSP t = _BOLD.sub((('<b>' + '\\1') + '</b>'), t) DCNL DCSP t = _MODULE.sub((("<span DCSP class='module'>" + '\\1') + '</span>'), t) DCNL DCSP t = _URL.sub((((("<a DCSP href='" + '\\1') + "'>") + '\\1') + '</a>'), t) DCNL DCSP t = _CONST.sub((('<code>' + '\\1') + '</code>'), t) DCNL DCSP return t
def rst_fmt(text, fmt): DCNL  DCSP return (fmt % text)
def rst_xline(width, char='='): DCNL  DCSP return (char * width)
def write_data(text, options, outputname, module): DCNL  DCSP if (options.output_dir is not None): DCNL DCSP  DCSP fname = os.path.join(options.output_dir, (outputname % module)) DCNL DCSP  DCSP fname = fname.replace('.py', '') DCNL DCSP  DCSP f = open(fname, 'w') DCNL DCSP  DCSP f.write(text.encode('utf-8')) DCNL DCSP  DCSP f.close() DCNL DCSP else: DCNL DCSP  DCSP print(text)
def list_modules(module_dir, depth=0): DCNL  DCSP categories = dict() DCNL DCSP module_info = dict() DCNL DCSP aliases = defaultdict(set) DCNL DCSP files = (((glob.glob(('%s/*.py' % module_dir)) + glob.glob(('%s/*/*.py' % module_dir))) + glob.glob(('%s/*/*/*.py' % module_dir))) + glob.glob(('%s/*/*/*/*.py' % module_dir))) DCNL DCSP for module_path in files: DCNL DCSP  DCSP if module_path.endswith('__init__.py'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP category = categories DCNL DCSP  DCSP mod_path_only = module_path DCNL DCSP  DCSP mod_path_only = os.path.dirname(module_path[len(module_dir):]) DCNL DCSP  DCSP for new_cat in mod_path_only.split('/')[1:]: DCNL DCSP  DCSP  DCSP if (new_cat not in category): DCNL DCSP  DCSP  DCSP  DCSP category[new_cat] = dict() DCNL DCSP  DCSP  DCSP category = category[new_cat] DCNL DCSP  DCSP module = os.path.splitext(os.path.basename(module_path))[0] DCNL DCSP  DCSP if (module in module_docs.BLACKLIST_MODULES): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (module.startswith('_') and os.path.islink(module_path)): DCNL DCSP  DCSP  DCSP source = os.path.splitext(os.path.basename(os.path.realpath(module_path)))[0] DCNL DCSP  DCSP  DCSP module = module.replace('_', '', 1) DCNL DCSP  DCSP  DCSP aliases[source].add(module) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP category[module] = module_path DCNL DCSP  DCSP module_info[module] = module_path DCNL DCSP if ('test' in categories): DCNL DCSP  DCSP del categories['test'] DCNL DCSP return (module_info, categories, aliases)
def generate_parser(): DCNL  DCSP p = optparse.OptionParser(version='%prog DCSP 1.0', usage='usage: DCSP %prog DCSP [options] DCSP arg1 DCSP arg2', description='Generate DCSP module DCSP documentation DCSP from DCSP metadata') DCNL DCSP p.add_option('-A', '--ansible-version', action='store', dest='ansible_version', default='unknown', help='Ansible DCSP version DCSP number') DCNL DCSP p.add_option('-M', '--module-dir', action='store', dest='module_dir', default=MODULEDIR, help='Ansible DCSP library DCSP path') DCNL DCSP p.add_option('-T', '--template-dir', action='store', dest='template_dir', default='hacking/templates', help='directory DCSP containing DCSP Jinja2 DCSP templates') DCNL DCSP p.add_option('-t', '--type', action='store', dest='type', choices=['rst'], default='rst', help='Document DCSP type') DCNL DCSP p.add_option('-v', '--verbose', action='store_true', default=False, help='Verbose') DCNL DCSP p.add_option('-o', '--output-dir', action='store', dest='output_dir', default=None, help='Output DCSP directory DCSP for DCSP module DCSP files') DCNL DCSP p.add_option('-I', '--includes-file', action='store', dest='includes_file', default=None, help='Create DCSP a DCSP file DCSP containing DCSP list DCSP of DCSP processed DCSP modules') DCNL DCSP p.add_option('-V', action='version', help='Show DCSP version DCSP number DCSP and DCSP exit') DCNL DCSP return p
def validate_options(options): DCNL  DCSP if (not options.module_dir): DCNL DCSP  DCSP sys.exit('--module-dir DCSP is DCSP required', file=sys.stderr) DCNL DCSP if (not os.path.exists(options.module_dir)): DCNL DCSP  DCSP sys.exit(('--module-dir DCSP does DCSP not DCSP exist: DCSP %s' % options.module_dir), file=sys.stderr) DCNL DCSP if (not options.template_dir): DCNL DCSP  DCSP sys.exit('--template-dir DCSP must DCSP be DCSP specified')
def main(): DCNL  DCSP formatter = logging.Formatter('%(asctime)s DCSP %(process)d DCSP %(levelname)s DCSP %(message)s') DCNL DCSP log_name = ('ansible-test-coverage.%s.log' % getpass.getuser()) DCNL DCSP self_dir = os.path.dirname(os.path.abspath(__file__)) DCNL DCSP handler = logging.FileHandler(os.path.join('/tmp', log_name)) DCNL DCSP handler.setFormatter(formatter) DCNL DCSP logger.addHandler(handler) DCNL DCSP handler = logging.FileHandler(os.path.abspath(os.path.join(self_dir, '..', 'logs', log_name))) DCNL DCSP handler.setFormatter(formatter) DCNL DCSP logger.addHandler(handler) DCNL DCSP logger.setLevel(logging.DEBUG) DCNL DCSP try: DCNL DCSP  DCSP logger.debug('Self: DCSP %s', __file__) DCNL DCSP  DCSP logger.debug('Arguments: DCSP %s', ' DCSP '.join((pipes.quote(c) for c in sys.argv))) DCNL DCSP  DCSP if os.path.basename(__file__).startswith('runner'): DCNL DCSP  DCSP  DCSP (args, env) = runner() DCNL DCSP  DCSP elif os.path.basename(__file__).startswith('cover'): DCNL DCSP  DCSP  DCSP (args, env) = cover() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (args, env) = injector() DCNL DCSP  DCSP logger.debug('Run DCSP command: DCSP %s', ' DCSP '.join((pipes.quote(c) for c in args))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cwd = os.getcwd() DCNL DCSP  DCSP except OSError as ex: DCNL DCSP  DCSP  DCSP if (ex.errno != errno.EACCES): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP cwd = None DCNL DCSP  DCSP logger.debug('Working DCSP directory: DCSP %s', (cwd or '?')) DCNL DCSP  DCSP for key in sorted(env.keys()): DCNL DCSP  DCSP  DCSP logger.debug('%s=%s', key, env[key]) DCNL DCSP  DCSP os.execvpe(args[0], args, env) DCNL DCSP except Exception as ex: DCNL DCSP  DCSP logger.fatal(ex) DCNL DCSP  DCSP raise
def injector(): DCNL  DCSP self_dir = os.path.dirname(os.path.abspath(__file__)) DCNL DCSP command = os.path.basename(__file__) DCNL DCSP mode = os.environ.get('ANSIBLE_TEST_COVERAGE') DCNL DCSP version = os.environ.get('ANSIBLE_TEST_PYTHON_VERSION', '') DCNL DCSP executable = find_executable(command) DCNL DCSP if (mode in ('coverage', 'version')): DCNL DCSP  DCSP if (mode == 'coverage'): DCNL DCSP  DCSP  DCSP (args, env) = coverage_command(self_dir, version) DCNL DCSP  DCSP  DCSP args += [executable] DCNL DCSP  DCSP  DCSP tool = 'cover' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP interpreter = find_executable(('python' + version)) DCNL DCSP  DCSP  DCSP (args, env) = ([interpreter, executable], os.environ.copy()) DCNL DCSP  DCSP  DCSP tool = 'runner' DCNL DCSP  DCSP if (command in ('ansible', 'ansible-playbook', 'ansible-pull')): DCNL DCSP  DCSP  DCSP interpreter = find_executable((tool + version)) DCNL DCSP  DCSP  DCSP args += ['--extra-vars', ('ansible_python_interpreter=' + interpreter)] DCNL DCSP else: DCNL DCSP  DCSP (args, env) = ([executable], os.environ.copy()) DCNL DCSP args += sys.argv[1:] DCNL DCSP return (args, env)
def runner(): DCNL  DCSP command = os.path.basename(__file__) DCNL DCSP version = command.replace('runner', '') DCNL DCSP interpreter = find_executable(('python' + version)) DCNL DCSP (args, env) = ([interpreter], os.environ.copy()) DCNL DCSP args += sys.argv[1:] DCNL DCSP return (args, env)
def cover(): DCNL  DCSP self_dir = os.path.dirname(os.path.abspath(__file__)) DCNL DCSP command = os.path.basename(__file__) DCNL DCSP version = command.replace('cover', '') DCNL DCSP if (len(sys.argv) > 1): DCNL DCSP  DCSP executable = sys.argv[1] DCNL DCSP else: DCNL DCSP  DCSP executable = '' DCNL DCSP if os.path.basename(executable).startswith('ansible_module_'): DCNL DCSP  DCSP (args, env) = coverage_command(self_dir, version) DCNL DCSP else: DCNL DCSP  DCSP interpreter = find_executable(('python' + version)) DCNL DCSP  DCSP (args, env) = ([interpreter], os.environ.copy()) DCNL DCSP args += sys.argv[1:] DCNL DCSP return (args, env)
def coverage_command(self_dir, version): DCNL  DCSP executable = 'coverage' DCNL DCSP if version: DCNL DCSP  DCSP executable += ('-%s' % version) DCNL DCSP args = [find_executable(executable), 'run', '--append', '--rcfile', os.path.join(self_dir, '.coveragerc')] DCNL DCSP env = os.environ.copy() DCNL DCSP env['COVERAGE_FILE'] = os.path.abspath(os.path.join(self_dir, '..', 'output', 'coverage')) DCNL DCSP return (args, env)
def find_executable(executable): DCNL  DCSP self = os.path.abspath(__file__) DCNL DCSP path = os.environ.get('PATH', os.defpath) DCNL DCSP seen_dirs = set() DCNL DCSP for path_dir in path.split(os.pathsep): DCNL DCSP  DCSP if (path_dir in seen_dirs): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP seen_dirs.add(path_dir) DCNL DCSP  DCSP candidate = os.path.abspath(os.path.join(path_dir, executable)) DCNL DCSP  DCSP if (candidate == self): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (os.path.exists(candidate) and os.access(candidate, (os.F_OK | os.X_OK))): DCNL DCSP  DCSP  DCSP return candidate DCNL DCSP raise Exception(('Executable DCSP "%s" DCSP not DCSP found DCSP in DCSP path: DCSP %s' % (executable, path)))
def command_coverage_combine(args): DCNL  DCSP coverage = initialize_coverage(args) DCNL DCSP modules = dict(((t.module, t.path) for t in list(walk_module_targets()))) DCNL DCSP coverage_files = [os.path.join(COVERAGE_DIR, f) for f in os.listdir(COVERAGE_DIR) if (f.startswith('coverage') and (f != 'coverage'))] DCNL DCSP arc_data = {} DCNL DCSP ansible_path = (os.path.abspath('lib/ansible/') + '/') DCNL DCSP root_path = (os.getcwd() + '/') DCNL DCSP for coverage_file in coverage_files: DCNL DCSP  DCSP original = coverage.CoverageData() DCNL DCSP  DCSP if (os.path.getsize(coverage_file) == 0): DCNL DCSP  DCSP  DCSP display.warning(('Empty DCSP coverage DCSP file: DCSP %s' % coverage_file)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP original.read_file(coverage_file) DCNL DCSP  DCSP except Exception as ex: DCNL DCSP  DCSP  DCSP display.error(str(ex)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP for filename in original.measured_files(): DCNL DCSP  DCSP  DCSP arcs = original.arcs(filename) DCNL DCSP  DCSP  DCSP if ('/ansible_modlib.zip/ansible/' in filename): DCNL DCSP  DCSP  DCSP  DCSP new_name = re.sub('^.*/ansible_modlib.zip/ansible/', ansible_path, filename) DCNL DCSP  DCSP  DCSP  DCSP display.info(('%s DCSP -> DCSP %s' % (filename, new_name)), verbosity=3) DCNL DCSP  DCSP  DCSP  DCSP filename = new_name DCNL DCSP  DCSP  DCSP elif ('/ansible_module_' in filename): DCNL DCSP  DCSP  DCSP  DCSP module = re.sub('^.*/ansible_module_(?P<module>.*).py$', '\\g<module>', filename) DCNL DCSP  DCSP  DCSP  DCSP new_name = os.path.abspath(modules[module]) DCNL DCSP  DCSP  DCSP  DCSP display.info(('%s DCSP -> DCSP %s' % (filename, new_name)), verbosity=3) DCNL DCSP  DCSP  DCSP  DCSP filename = new_name DCNL DCSP  DCSP  DCSP elif filename.startswith('/root/ansible/'): DCNL DCSP  DCSP  DCSP  DCSP new_name = re.sub('^/.*?/ansible/', root_path, filename) DCNL DCSP  DCSP  DCSP  DCSP display.info(('%s DCSP -> DCSP %s' % (filename, new_name)), verbosity=3) DCNL DCSP  DCSP  DCSP  DCSP filename = new_name DCNL DCSP  DCSP  DCSP if (filename not in arc_data): DCNL DCSP  DCSP  DCSP  DCSP arc_data[filename] = [] DCNL DCSP  DCSP  DCSP arc_data[filename] += arcs DCNL DCSP updated = coverage.CoverageData() DCNL DCSP for filename in arc_data: DCNL DCSP  DCSP if (not os.path.isfile(filename)): DCNL DCSP  DCSP  DCSP display.warning(('Invalid DCSP coverage DCSP path: DCSP %s' % filename)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP updated.add_arcs({filename: arc_data[filename]}) DCNL DCSP if (not args.explain): DCNL DCSP  DCSP updated.write_file(COVERAGE_FILE)
def command_coverage_report(args): DCNL  DCSP command_coverage_combine(args) DCNL DCSP run_command(args, ['coverage', 'report'])
def command_coverage_html(args): DCNL  DCSP command_coverage_combine(args) DCNL DCSP run_command(args, ['coverage', 'html', '-d', 'test/results/reports/coverage'])
def command_coverage_xml(args): DCNL  DCSP command_coverage_combine(args) DCNL DCSP run_command(args, ['coverage', 'xml', '-o', 'test/results/reports/coverage.xml'])
def command_coverage_erase(args): DCNL  DCSP initialize_coverage(args) DCNL DCSP for name in os.listdir(COVERAGE_DIR): DCNL DCSP  DCSP if (not name.startswith('coverage')): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP path = os.path.join(COVERAGE_DIR, name) DCNL DCSP  DCSP if (not args.explain): DCNL DCSP  DCSP  DCSP os.remove(path)
def initialize_coverage(args): DCNL  DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate() DCNL DCSP if args.requirements: DCNL DCSP  DCSP install_command_requirements(args) DCNL DCSP try: DCNL DCSP  DCSP import coverage DCNL DCSP except ImportError: DCNL DCSP  DCSP coverage = None DCNL DCSP if (not coverage): DCNL DCSP  DCSP raise ApplicationError('You DCSP must DCSP install DCSP the DCSP "coverage" DCSP python DCSP module DCSP to DCSP use DCSP this DCSP command.') DCNL DCSP return coverage
def ansible_environment(args): DCNL  DCSP env = common_environment() DCNL DCSP path = env['PATH'] DCNL DCSP ansible_path = os.path.join(os.getcwd(), 'bin') DCNL DCSP if (not path.startswith((ansible_path + os.pathsep))): DCNL DCSP  DCSP path = ((ansible_path + os.pathsep) + path) DCNL DCSP ansible = dict(ANSIBLE_FORCE_COLOR=(('%s' % 'true') if args.color else 'false'), ANSIBLE_DEPRECATION_WARNINGS='false', ANSIBLE_CONFIG='/dev/null', ANSIBLE_HOST_KEY_CHECKING='false', PYTHONPATH=os.path.abspath('lib'), PAGER='/bin/cat', PATH=path) DCNL DCSP env.update(ansible) DCNL DCSP return env
def find_target_completion(target_func, prefix): DCNL  DCSP try: DCNL DCSP  DCSP targets = target_func() DCNL DCSP  DCSP prefix = prefix.encode() DCNL DCSP  DCSP short = (os.environ.get('COMP_TYPE') == '63') DCNL DCSP  DCSP matches = walk_completion_targets(targets, prefix, short) DCNL DCSP  DCSP return matches DCNL DCSP except Exception as ex: DCNL DCSP  DCSP return [str(ex)]
def walk_completion_targets(targets, prefix, short=False): DCNL  DCSP aliases = set((alias for target in targets for alias in target.aliases)) DCNL DCSP if (prefix.endswith('/') and (prefix in aliases)): DCNL DCSP  DCSP aliases.remove(prefix) DCNL DCSP matches = [alias for alias in aliases if (alias.startswith(prefix) and ('/' not in alias[len(prefix):(-1)]))] DCNL DCSP if short: DCNL DCSP  DCSP offset = len(os.path.dirname(prefix)) DCNL DCSP  DCSP if offset: DCNL DCSP  DCSP  DCSP offset += 1 DCNL DCSP  DCSP  DCSP relative_matches = [match[offset:] for match in matches if (len(match) > offset)] DCNL DCSP  DCSP  DCSP if (len(relative_matches) > 1): DCNL DCSP  DCSP  DCSP  DCSP matches = relative_matches DCNL DCSP return tuple(sorted(matches))
def walk_internal_targets(targets, includes=None, excludes=None, requires=None): DCNL  DCSP targets = tuple(targets) DCNL DCSP include_targets = sorted(filter_targets(targets, includes, errors=True, directories=False), key=(lambda t: t.name)) DCNL DCSP if requires: DCNL DCSP  DCSP require_targets = set(filter_targets(targets, requires, errors=True, directories=False)) DCNL DCSP  DCSP include_targets = [target for target in include_targets if (target in require_targets)] DCNL DCSP if excludes: DCNL DCSP  DCSP list(filter_targets(targets, excludes, errors=True, include=False, directories=False)) DCNL DCSP internal_targets = set(filter_targets(include_targets, excludes, errors=False, include=False, directories=False)) DCNL DCSP return tuple(sorted(internal_targets, key=(lambda t: t.name)))
def walk_external_targets(targets, includes=None, excludes=None, requires=None): DCNL  DCSP targets = tuple(targets) DCNL DCSP if requires: DCNL DCSP  DCSP include_targets = list(filter_targets(targets, includes, errors=True, directories=False)) DCNL DCSP  DCSP require_targets = set(filter_targets(targets, requires, errors=True, directories=False)) DCNL DCSP  DCSP includes = [target.name for target in include_targets if (target in require_targets)] DCNL DCSP  DCSP if includes: DCNL DCSP  DCSP  DCSP include_targets = sorted(filter_targets(targets, includes, errors=True), key=(lambda t: t.name)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP include_targets = [] DCNL DCSP else: DCNL DCSP  DCSP include_targets = sorted(filter_targets(targets, includes, errors=True), key=(lambda t: t.name)) DCNL DCSP if excludes: DCNL DCSP  DCSP exclude_targets = sorted(filter_targets(targets, excludes, errors=True), key=(lambda t: t.name)) DCNL DCSP else: DCNL DCSP  DCSP exclude_targets = [] DCNL DCSP previous = None DCNL DCSP include = [] DCNL DCSP for target in include_targets: DCNL DCSP  DCSP if (isinstance(previous, DirectoryTarget) and isinstance(target, DirectoryTarget) and (previous.name == target.name)): DCNL DCSP  DCSP  DCSP previous.modules = tuple((set(previous.modules) | set(target.modules))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP include.append(target) DCNL DCSP  DCSP  DCSP previous = target DCNL DCSP previous = None DCNL DCSP exclude = [] DCNL DCSP for target in exclude_targets: DCNL DCSP  DCSP if (isinstance(previous, DirectoryTarget) and isinstance(target, DirectoryTarget) and (previous.name == target.name)): DCNL DCSP  DCSP  DCSP previous.modules = tuple((set(previous.modules) | set(target.modules))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP exclude.append(target) DCNL DCSP  DCSP  DCSP previous = target DCNL DCSP return (tuple(include), tuple(exclude))
def filter_targets(targets, patterns, include=True, directories=True, errors=True): DCNL  DCSP unmatched = set((patterns or ())) DCNL DCSP for target in targets: DCNL DCSP  DCSP matched_directories = set() DCNL DCSP  DCSP match = False DCNL DCSP  DCSP if patterns: DCNL DCSP  DCSP  DCSP for alias in target.aliases: DCNL DCSP  DCSP  DCSP  DCSP for pattern in patterns: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if re.match(('^%s$' % pattern), alias): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP match = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP unmatched.remove(pattern) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if alias.endswith('/'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (target.base_path and (len(target.base_path) > len(alias))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_directories.add(target.base_path) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_directories.add(alias) DCNL DCSP  DCSP elif include: DCNL DCSP  DCSP  DCSP match = True DCNL DCSP  DCSP  DCSP if (not target.base_path): DCNL DCSP  DCSP  DCSP  DCSP matched_directories.add('.') DCNL DCSP  DCSP  DCSP for alias in target.aliases: DCNL DCSP  DCSP  DCSP  DCSP if alias.endswith('/'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (target.base_path and (len(target.base_path) > len(alias))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_directories.add(target.base_path) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_directories.add(alias) DCNL DCSP  DCSP if (match != include): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (directories and matched_directories): DCNL DCSP  DCSP  DCSP (yield DirectoryTarget(sorted(matched_directories, key=len)[0], target.modules)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (yield target) DCNL DCSP if errors: DCNL DCSP  DCSP if unmatched: DCNL DCSP  DCSP  DCSP raise TargetPatternsNotMatched(unmatched)
def walk_module_targets(): DCNL  DCSP path = 'lib/ansible/modules' DCNL DCSP for target in walk_test_targets(path, (path + '/'), extensions=MODULE_EXTENSIONS): DCNL DCSP  DCSP if (not target.module): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (yield target)
def walk_units_targets(): DCNL  DCSP return walk_test_targets(path='test/units', module_path='test/units/modules/', extensions=('.py',), prefix='test_')
def walk_compile_targets(): DCNL  DCSP return walk_test_targets(module_path='lib/ansible/modules/', extensions=('.py',))
def walk_sanity_targets(): DCNL  DCSP return walk_test_targets(module_path='lib/ansible/modules/')
def walk_posix_integration_targets(): DCNL  DCSP for target in walk_integration_targets(): DCNL DCSP  DCSP if ('posix/' in target.aliases): DCNL DCSP  DCSP  DCSP (yield target)
def walk_network_integration_targets(): DCNL  DCSP for target in walk_integration_targets(): DCNL DCSP  DCSP if ('network/' in target.aliases): DCNL DCSP  DCSP  DCSP (yield target)
def walk_windows_integration_targets(): DCNL  DCSP for target in walk_integration_targets(): DCNL DCSP  DCSP if ('windows/' in target.aliases): DCNL DCSP  DCSP  DCSP (yield target)
def walk_integration_targets(): DCNL  DCSP path = 'test/integration/targets' DCNL DCSP modules = frozenset((t.module for t in walk_module_targets())) DCNL DCSP paths = sorted((os.path.join(path, p) for p in os.listdir(path))) DCNL DCSP prefixes = load_integration_prefixes() DCNL DCSP for path in paths: DCNL DCSP  DCSP (yield IntegrationTarget(path, modules, prefixes))
def load_integration_prefixes(): DCNL  DCSP path = 'test/integration' DCNL DCSP names = sorted((f for f in os.listdir(path) if (os.path.splitext(f)[0] == 'target-prefixes'))) DCNL DCSP prefixes = {} DCNL DCSP for name in names: DCNL DCSP  DCSP prefix = os.path.splitext(name)[1][1:] DCNL DCSP  DCSP with open(os.path.join(path, name), 'r') as prefix_fd: DCNL DCSP  DCSP  DCSP prefixes.update(dict(((k, prefix) for k in prefix_fd.read().splitlines()))) DCNL DCSP return prefixes
def walk_test_targets(path=None, module_path=None, extensions=None, prefix=None): DCNL  DCSP for (root, _, file_names) in os.walk((path or '.'), topdown=False): DCNL DCSP  DCSP if root.endswith('/__pycache__'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (path is None): DCNL DCSP  DCSP  DCSP root = root[2:] DCNL DCSP  DCSP if root.startswith('.'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP for file_name in file_names: DCNL DCSP  DCSP  DCSP (name, ext) = os.path.splitext(os.path.basename(file_name)) DCNL DCSP  DCSP  DCSP if name.startswith('.'): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (extensions and (ext not in extensions)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (prefix and (not name.startswith(prefix))): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP (yield TestTarget(os.path.join(root, file_name), module_path, prefix, path))
def categorize_changes(paths, verbose_command=None): DCNL  DCSP mapper = PathMapper() DCNL DCSP commands = {'sanity': set(), 'compile': set(), 'units': set(), 'integration': set(), 'windows-integration': set(), 'network-integration': set()} DCNL DCSP display.info(('Mapping DCSP %d DCSP changed DCSP file(s) DCSP to DCSP tests.' % len(paths))) DCNL DCSP for path in paths: DCNL DCSP  DCSP tests = mapper.classify(path) DCNL DCSP  DCSP if (tests is None): DCNL DCSP  DCSP  DCSP display.info(('%s DCSP -> DCSP all' % path), verbosity=1) DCNL DCSP  DCSP  DCSP tests = all_tests() DCNL DCSP  DCSP  DCSP display.warning(('Path DCSP not DCSP categorized: DCSP %s' % path)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP tests = dict(((key, value) for (key, value) in tests.items() if value)) DCNL DCSP  DCSP  DCSP if verbose_command: DCNL DCSP  DCSP  DCSP  DCSP result = ('%s: DCSP %s' % (verbose_command, (tests.get(verbose_command) or 'none'))) DCNL DCSP  DCSP  DCSP  DCSP if (('integration' in verbose_command) and tests.get(verbose_command)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not any((('integration' in command) for command in tests.keys() if (command != verbose_command)))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result += ' DCSP (targeted)' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP result = ('%s' % tests) DCNL DCSP  DCSP  DCSP display.info(('%s DCSP -> DCSP %s' % (path, result)), verbosity=1) DCNL DCSP  DCSP for (command, target) in tests.items(): DCNL DCSP  DCSP  DCSP commands[command].add(target) DCNL DCSP for command in commands: DCNL DCSP  DCSP if any(((t == 'all') for t in commands[command])): DCNL DCSP  DCSP  DCSP commands[command] = set(['all']) DCNL DCSP commands = dict(((c, sorted(commands[c])) for c in commands.keys() if commands[c])) DCNL DCSP return commands
def all_tests(): DCNL  DCSP return {'sanity': 'all', 'compile': 'all', 'units': 'all', 'integration': 'all', 'windows-integration': 'all', 'network-integration': 'all'}
def ignore(item): DCNL  DCSP filename = os.path.basename(item.path) DCNL DCSP (name, ext) = os.path.splitext(filename) DCNL DCSP dirs = os.path.split(item.path) DCNL DCSP if (not item.isdir()): DCNL DCSP  DCSP if item.path.startswith('./test/results/'): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP if (item.path.startswith('./docsite/') and filename.endswith('_module.rst')): DCNL DCSP  DCSP  DCSP return None DCNL DCSP if (name in IGNORE_FILES): DCNL DCSP  DCSP return None DCNL DCSP if (ext in IGNORE_EXTENSIONS): DCNL DCSP  DCSP return None DCNL DCSP if any(((d in IGNORE_DIRS) for d in dirs)): DCNL DCSP  DCSP return None DCNL DCSP return item
def create_tarfile(dst_path, src_path, tar_filter): DCNL  DCSP with tarfile.TarFile.gzopen(dst_path, mode='w', compresslevel=4) as tar: DCNL DCSP  DCSP tar.add(src_path, filter=tar_filter)
def create_shell_command(command): DCNL  DCSP optional_vars = ('TERM',) DCNL DCSP cmd = ['/usr/bin/env'] DCNL DCSP cmd += [('%s=%s' % (var, os.environ[var])) for var in optional_vars if (var in os.environ)] DCNL DCSP cmd += command DCNL DCSP return cmd
def install_command_requirements(args): DCNL  DCSP generate_egg_info(args) DCNL DCSP if (not args.requirements): DCNL DCSP  DCSP return DCNL DCSP cmd = generate_pip_install(args.command) DCNL DCSP if (not cmd): DCNL DCSP  DCSP return DCNL DCSP if isinstance(args, TestConfig): DCNL DCSP  DCSP if args.coverage: DCNL DCSP  DCSP  DCSP cmd += ['coverage'] DCNL DCSP try: DCNL DCSP  DCSP run_command(args, cmd) DCNL DCSP except SubprocessError as ex: DCNL DCSP  DCSP if (ex.status != 2): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP run_command(args, ['pip', 'install', '--upgrade', 'pip']) DCNL DCSP  DCSP run_command(args, cmd)
def generate_egg_info(args): DCNL  DCSP if os.path.isdir('lib/ansible.egg-info'): DCNL DCSP  DCSP return DCNL DCSP run_command(args, ['python', 'setup.py', 'egg_info'], capture=(args.verbosity < 3))
def generate_pip_install(command): DCNL  DCSP constraints = 'test/runner/requirements/constraints.txt' DCNL DCSP requirements = ('test/runner/requirements/%s.txt' % command) DCNL DCSP if ((not os.path.exists(requirements)) or (not os.path.getsize(requirements))): DCNL DCSP  DCSP return None DCNL DCSP return ['pip', 'install', '--disable-pip-version-check', '-r', requirements, '-c', constraints]
def command_shell(args): DCNL  DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate() DCNL DCSP install_command_requirements(args) DCNL DCSP cmd = create_shell_command(['bash', '-i']) DCNL DCSP run_command(args, cmd)
def command_posix_integration(args): DCNL  DCSP internal_targets = command_integration_filter(args, walk_posix_integration_targets()) DCNL DCSP command_integration_filtered(args, internal_targets)
def command_network_integration(args): DCNL  DCSP internal_targets = command_integration_filter(args, walk_network_integration_targets()) DCNL DCSP platform_targets = set((a for t in internal_targets for a in t.aliases if a.startswith('network/'))) DCNL DCSP if args.platform: DCNL DCSP  DCSP instances = [] DCNL DCSP  DCSP SshKey(args) DCNL DCSP  DCSP for platform_version in args.platform: DCNL DCSP  DCSP  DCSP (platform, version) = platform_version.split('/', 1) DCNL DCSP  DCSP  DCSP platform_target = ('network/%s/' % platform) DCNL DCSP  DCSP  DCSP if ((platform_target not in platform_targets) and ('network/basics/' not in platform_targets)): DCNL DCSP  DCSP  DCSP  DCSP display.warning(('Skipping DCSP "%s" DCSP because DCSP selected DCSP tests DCSP do DCSP not DCSP target DCSP the DCSP "%s" DCSP platform.' % (platform_version, platform))) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP instance = lib.thread.WrappedThread(functools.partial(network_run, args, platform, version)) DCNL DCSP  DCSP  DCSP instance.daemon = True DCNL DCSP  DCSP  DCSP instance.start() DCNL DCSP  DCSP  DCSP instances.append(instance) DCNL DCSP  DCSP install_command_requirements(args) DCNL DCSP  DCSP while any((instance.is_alive() for instance in instances)): DCNL DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP remotes = [instance.wait_for_result() for instance in instances] DCNL DCSP  DCSP inventory = network_inventory(remotes) DCNL DCSP  DCSP filename = 'test/integration/inventory.networking' DCNL DCSP  DCSP display.info(('>>> DCSP Inventory: DCSP %s\n%s' % (filename, inventory.strip())), verbosity=3) DCNL DCSP  DCSP if (not args.explain): DCNL DCSP  DCSP  DCSP with open(filename, 'w') as inventory_fd: DCNL DCSP  DCSP  DCSP  DCSP inventory_fd.write(inventory) DCNL DCSP else: DCNL DCSP  DCSP install_command_requirements(args) DCNL DCSP command_integration_filtered(args, internal_targets)
def network_run(args, platform, version): DCNL  DCSP core_ci = AnsibleCoreCI(args, platform, version, stage=args.remote_stage) DCNL DCSP core_ci.start() DCNL DCSP core_ci.wait() DCNL DCSP manage = ManageNetworkCI(core_ci) DCNL DCSP manage.wait() DCNL DCSP return core_ci
def network_inventory(remotes): DCNL  DCSP groups = dict([(remote.platform, []) for remote in remotes]) DCNL DCSP for remote in remotes: DCNL DCSP  DCSP options = dict(ansible_host=remote.connection.hostname, ansible_user=remote.connection.username, ansible_connection='network_cli', ansible_ssh_private_key_file=remote.ssh_key.key, ansible_network_os=remote.platform) DCNL DCSP  DCSP groups[remote.platform].append(('%s DCSP %s' % (remote.name.replace('.', '_'), ' DCSP '.join((('%s="%s"' % (k, options[k])) for k in sorted(options)))))) DCNL DCSP template = '' DCNL DCSP for group in groups: DCNL DCSP  DCSP hosts = '\n'.join(groups[group]) DCNL DCSP  DCSP template += (textwrap.dedent('\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP [%s]\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ') % (group, hosts)) DCNL DCSP inventory = template DCNL DCSP return inventory
def command_windows_integration(args): DCNL  DCSP internal_targets = command_integration_filter(args, walk_windows_integration_targets()) DCNL DCSP if args.windows: DCNL DCSP  DCSP instances = [] DCNL DCSP  DCSP for version in args.windows: DCNL DCSP  DCSP  DCSP instance = lib.thread.WrappedThread(functools.partial(windows_run, args, version)) DCNL DCSP  DCSP  DCSP instance.daemon = True DCNL DCSP  DCSP  DCSP instance.start() DCNL DCSP  DCSP  DCSP instances.append(instance) DCNL DCSP  DCSP install_command_requirements(args) DCNL DCSP  DCSP while any((instance.is_alive() for instance in instances)): DCNL DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP remotes = [instance.wait_for_result() for instance in instances] DCNL DCSP  DCSP inventory = windows_inventory(remotes) DCNL DCSP  DCSP filename = 'test/integration/inventory.winrm' DCNL DCSP  DCSP display.info(('>>> DCSP Inventory: DCSP %s\n%s' % (filename, inventory.strip())), verbosity=3) DCNL DCSP  DCSP if (not args.explain): DCNL DCSP  DCSP  DCSP with open(filename, 'w') as inventory_fd: DCNL DCSP  DCSP  DCSP  DCSP inventory_fd.write(inventory) DCNL DCSP else: DCNL DCSP  DCSP install_command_requirements(args) DCNL DCSP try: DCNL DCSP  DCSP command_integration_filtered(args, internal_targets) DCNL DCSP finally: DCNL DCSP  DCSP pass
def windows_run(args, version): DCNL  DCSP core_ci = AnsibleCoreCI(args, 'windows', version, stage=args.remote_stage) DCNL DCSP core_ci.start() DCNL DCSP core_ci.wait() DCNL DCSP manage = ManageWindowsCI(core_ci) DCNL DCSP manage.wait() DCNL DCSP return core_ci
def windows_inventory(remotes): DCNL  DCSP hosts = [] DCNL DCSP for remote in remotes: DCNL DCSP  DCSP options = dict(ansible_host=remote.connection.hostname, ansible_user=remote.connection.username, ansible_password=remote.connection.password, ansible_port=remote.connection.port) DCNL DCSP  DCSP hosts.append(('%s DCSP %s' % (remote.name.replace('/', '_'), ' DCSP '.join((('%s="%s"' % (k, options[k])) for k in sorted(options)))))) DCNL DCSP template = '\n DCSP  DCSP  DCSP  DCSP [windows]\n DCSP  DCSP  DCSP  DCSP %s\n\n DCSP  DCSP  DCSP  DCSP [windows:vars]\n DCSP  DCSP  DCSP  DCSP ansible_connection=winrm\n DCSP  DCSP  DCSP  DCSP ansible_winrm_server_cert_validation=ignore\n\n DCSP  DCSP  DCSP  DCSP # DCSP support DCSP winrm DCSP connection DCSP tests DCSP (temporary DCSP solution, DCSP does DCSP not DCSP support DCSP testing DCSP enable/disable DCSP of DCSP pipelining)\n DCSP  DCSP  DCSP  DCSP [winrm:children]\n DCSP  DCSP  DCSP  DCSP windows\n\n DCSP  DCSP  DCSP  DCSP # DCSP support DCSP winrm DCSP binary DCSP module DCSP tests DCSP (temporary DCSP solution)\n DCSP  DCSP  DCSP  DCSP [testhost_binary_modules:children]\n DCSP  DCSP  DCSP  DCSP windows\n DCSP  DCSP  DCSP  DCSP ' DCNL DCSP template = textwrap.dedent(template) DCNL DCSP inventory = (template % '\n'.join(hosts)) DCNL DCSP return inventory
def command_integration_filter(args, targets): DCNL  DCSP targets = tuple(targets) DCNL DCSP changes = get_changes_filter(args) DCNL DCSP require = ((args.require or []) + changes) DCNL DCSP exclude = (args.exclude or []) DCNL DCSP internal_targets = walk_internal_targets(targets, args.include, exclude, require) DCNL DCSP environment_exclude = get_integration_filter(args, internal_targets) DCNL DCSP if environment_exclude: DCNL DCSP  DCSP exclude += environment_exclude DCNL DCSP  DCSP internal_targets = walk_internal_targets(targets, args.include, exclude, require) DCNL DCSP if (not internal_targets): DCNL DCSP  DCSP raise AllTargetsSkipped() DCNL DCSP if (args.start_at and (not any(((t.name == args.start_at) for t in internal_targets)))): DCNL DCSP  DCSP raise ApplicationError(('Start DCSP at DCSP target DCSP matches DCSP nothing: DCSP %s' % args.start_at)) DCNL DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate(require=changes, exclude=exclude) DCNL DCSP install_command_requirements(args) DCNL DCSP return internal_targets
def command_integration_filtered(args, targets): DCNL  DCSP found = False DCNL DCSP targets_iter = iter(targets) DCNL DCSP test_dir = os.path.expanduser('~/ansible_testing') DCNL DCSP if any((('needs/ssh/' in target.aliases) for target in targets)): DCNL DCSP  DCSP max_tries = 20 DCNL DCSP  DCSP display.info('SSH DCSP service DCSP required DCSP for DCSP tests. DCSP Checking DCSP to DCSP make DCSP sure DCSP we DCSP can DCSP connect.') DCNL DCSP  DCSP for i in range(1, (max_tries + 1)): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP run_command(args, ['ssh', '-o', 'BatchMode=yes', 'localhost', 'id'], capture=True) DCNL DCSP  DCSP  DCSP  DCSP display.info('SSH DCSP service DCSP responded.') DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP except SubprocessError as ex: DCNL DCSP  DCSP  DCSP  DCSP if (i == max_tries): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ex DCNL DCSP  DCSP  DCSP  DCSP seconds = 3 DCNL DCSP  DCSP  DCSP  DCSP display.warning(('SSH DCSP service DCSP not DCSP responding. DCSP Waiting DCSP %d DCSP second(s) DCSP before DCSP checking DCSP again.' % seconds)) DCNL DCSP  DCSP  DCSP  DCSP time.sleep(seconds) DCNL DCSP start_at_task = args.start_at_task DCNL DCSP for target in targets_iter: DCNL DCSP  DCSP if (args.start_at and (not found)): DCNL DCSP  DCSP  DCSP found = (target.name == args.start_at) DCNL DCSP  DCSP  DCSP if (not found): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP tries = (2 if args.retry_on_error else 1) DCNL DCSP  DCSP verbosity = args.verbosity DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP while tries: DCNL DCSP  DCSP  DCSP  DCSP tries -= 1 DCNL DCSP  DCSP  DCSP  DCSP if (not args.explain): DCNL DCSP  DCSP  DCSP  DCSP  DCSP remove_tree(test_dir) DCNL DCSP  DCSP  DCSP  DCSP  DCSP make_dirs(test_dir) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if target.script_path: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP command_integration_script(args, target) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP command_integration_role(args, target, start_at_task) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP start_at_task = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP except SubprocessError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not tries): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.warning(('Retrying DCSP test DCSP target DCSP "%s" DCSP with DCSP maximum DCSP verbosity.' % target.name)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.verbosity = args.verbosity = 6 DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP display.notice(('To DCSP resume DCSP at DCSP this DCSP test DCSP target, DCSP use DCSP the DCSP option: DCSP --start-at DCSP %s' % target.name)) DCNL DCSP  DCSP  DCSP next_target = next(targets_iter, None) DCNL DCSP  DCSP  DCSP if next_target: DCNL DCSP  DCSP  DCSP  DCSP display.notice(('To DCSP resume DCSP after DCSP this DCSP test DCSP target, DCSP use DCSP the DCSP option: DCSP --start-at DCSP %s' % next_target.name)) DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP display.verbosity = args.verbosity = verbosity
def integration_environment(args): DCNL  DCSP env = ansible_environment(args) DCNL DCSP integration = dict(JUNIT_OUTPUT_DIR=os.path.abspath('test/results/junit'), ANSIBLE_CALLBACK_WHITELIST='junit') DCNL DCSP env.update(integration) DCNL DCSP return env
def command_integration_script(args, target): DCNL  DCSP display.info(('Running DCSP %s DCSP integration DCSP test DCSP script' % target.name)) DCNL DCSP cmd = [('./%s' % os.path.basename(target.script_path))] DCNL DCSP if args.verbosity: DCNL DCSP  DCSP cmd.append(('-' + ('v' * args.verbosity))) DCNL DCSP env = integration_environment(args) DCNL DCSP cwd = target.path DCNL DCSP intercept_command(args, cmd, env=env, cwd=cwd)
def command_integration_role(args, target, start_at_task): DCNL  DCSP display.info(('Running DCSP %s DCSP integration DCSP test DCSP role' % target.name)) DCNL DCSP vars_file = 'integration_config.yml' DCNL DCSP if ('windows/' in target.aliases): DCNL DCSP  DCSP inventory = 'inventory.winrm' DCNL DCSP  DCSP hosts = 'windows' DCNL DCSP  DCSP gather_facts = False DCNL DCSP elif ('network/' in target.aliases): DCNL DCSP  DCSP inventory = 'inventory.networking' DCNL DCSP  DCSP hosts = target.name[:target.name.find('_')] DCNL DCSP  DCSP gather_facts = False DCNL DCSP  DCSP if (hosts == 'net'): DCNL DCSP  DCSP  DCSP hosts = 'all' DCNL DCSP else: DCNL DCSP  DCSP inventory = 'inventory' DCNL DCSP  DCSP hosts = 'testhost' DCNL DCSP  DCSP gather_facts = True DCNL DCSP playbook = ('\n- DCSP hosts: DCSP %s\n DCSP  DCSP gather_facts: DCSP %s\n DCSP  DCSP roles:\n DCSP  DCSP  DCSP  DCSP - DCSP { DCSP role: DCSP %s DCSP }\n DCSP  DCSP  DCSP  DCSP ' % (hosts, gather_facts, target.name)) DCNL DCSP with tempfile.NamedTemporaryFile(dir='test/integration', prefix=('%s-' % target.name), suffix='.yml') as pb_fd: DCNL DCSP  DCSP pb_fd.write(playbook.encode('utf-8')) DCNL DCSP  DCSP pb_fd.flush() DCNL DCSP  DCSP filename = os.path.basename(pb_fd.name) DCNL DCSP  DCSP display.info(('>>> DCSP Playbook: DCSP %s\n%s' % (filename, playbook.strip())), verbosity=3) DCNL DCSP  DCSP cmd = ['ansible-playbook', filename, '-i', inventory, '-e', ('@%s' % vars_file)] DCNL DCSP  DCSP if start_at_task: DCNL DCSP  DCSP  DCSP cmd += ['--start-at-task', start_at_task] DCNL DCSP  DCSP if args.verbosity: DCNL DCSP  DCSP  DCSP cmd.append(('-' + ('v' * args.verbosity))) DCNL DCSP  DCSP env = integration_environment(args) DCNL DCSP  DCSP cwd = 'test/integration' DCNL DCSP  DCSP env['ANSIBLE_ROLES_PATH'] = os.path.abspath('test/integration/targets') DCNL DCSP  DCSP intercept_command(args, cmd, env=env, cwd=cwd)
def command_units(args): DCNL  DCSP changes = get_changes_filter(args) DCNL DCSP require = ((args.require or []) + changes) DCNL DCSP (include, exclude) = walk_external_targets(walk_units_targets(), args.include, args.exclude, require) DCNL DCSP if (not include): DCNL DCSP  DCSP raise AllTargetsSkipped() DCNL DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate(require=changes) DCNL DCSP install_command_requirements(args) DCNL DCSP version_commands = [] DCNL DCSP for version in SUPPORTED_PYTHON_VERSIONS: DCNL DCSP  DCSP if (args.python and (version != args.python)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP env = ansible_environment(args) DCNL DCSP  DCSP cmd = ['pytest', '-r', 'a', '--color', ('yes' if args.color else 'no'), '--junit-xml', ('test/results/junit/python%s-units.xml' % version)] DCNL DCSP  DCSP if args.collect_only: DCNL DCSP  DCSP  DCSP cmd.append('--collect-only') DCNL DCSP  DCSP if args.verbosity: DCNL DCSP  DCSP  DCSP cmd.append(('-' + ('v' * args.verbosity))) DCNL DCSP  DCSP if exclude: DCNL DCSP  DCSP  DCSP cmd += [('--ignore=%s' % target.path) for target in exclude] DCNL DCSP  DCSP cmd += [target.path for target in include] DCNL DCSP  DCSP version_commands.append((version, cmd, env)) DCNL DCSP for (version, command, env) in version_commands: DCNL DCSP  DCSP display.info(('Unit DCSP test DCSP with DCSP Python DCSP %s' % version)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP intercept_command(args, command, env=env, python_version=version) DCNL DCSP  DCSP except SubprocessError as ex: DCNL DCSP  DCSP  DCSP if (ex.status != 5): DCNL DCSP  DCSP  DCSP  DCSP raise
def command_compile(args): DCNL  DCSP changes = get_changes_filter(args) DCNL DCSP require = ((args.require or []) + changes) DCNL DCSP (include, exclude) = walk_external_targets(walk_compile_targets(), args.include, args.exclude, require) DCNL DCSP if (not include): DCNL DCSP  DCSP raise AllTargetsSkipped() DCNL DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate(require=changes) DCNL DCSP install_command_requirements(args) DCNL DCSP version_commands = [] DCNL DCSP for version in COMPILE_PYTHON_VERSIONS: DCNL DCSP  DCSP if (args.python and (version != args.python)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP skip_file = ('test/compile/python%s-skip.txt' % version) DCNL DCSP  DCSP if os.path.exists(skip_file): DCNL DCSP  DCSP  DCSP with open(skip_file, 'r') as skip_fd: DCNL DCSP  DCSP  DCSP  DCSP skip_paths = skip_fd.read().splitlines() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP skip_paths = [] DCNL DCSP  DCSP skip_paths += [e.path for e in exclude] DCNL DCSP  DCSP skip_paths.append('/.tox/') DCNL DCSP  DCSP skip_paths = sorted(skip_paths) DCNL DCSP  DCSP python = ('python%s' % version) DCNL DCSP  DCSP cmd = [python, '-m', 'compileall', '-fq'] DCNL DCSP  DCSP if skip_paths: DCNL DCSP  DCSP  DCSP cmd += ['-x', '|'.join(skip_paths)] DCNL DCSP  DCSP cmd += [(target.path if (target.path == '.') else ('./%s' % target.path)) for target in include] DCNL DCSP  DCSP version_commands.append((version, cmd)) DCNL DCSP for (version, command) in version_commands: DCNL DCSP  DCSP display.info(('Compile DCSP with DCSP Python DCSP %s' % version)) DCNL DCSP  DCSP run_command(args, command)
def command_sanity(args): DCNL  DCSP changes = get_changes_filter(args) DCNL DCSP require = ((args.require or []) + changes) DCNL DCSP targets = SanityTargets(args.include, args.exclude, require) DCNL DCSP if (not targets.include): DCNL DCSP  DCSP raise AllTargetsSkipped() DCNL DCSP if args.delegate: DCNL DCSP  DCSP raise Delegate(require=changes) DCNL DCSP install_command_requirements(args) DCNL DCSP tests = SANITY_TESTS DCNL DCSP if args.test: DCNL DCSP  DCSP tests = [t for t in tests if (t.name in args.test)] DCNL DCSP if args.skip_test: DCNL DCSP  DCSP tests = [t for t in tests if (t.name not in args.skip_test)] DCNL DCSP for test in tests: DCNL DCSP  DCSP if args.list_tests: DCNL DCSP  DCSP  DCSP display.info(test.name) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if test.intercept: DCNL DCSP  DCSP  DCSP versions = SUPPORTED_PYTHON_VERSIONS DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP versions = (None,) DCNL DCSP  DCSP for version in versions: DCNL DCSP  DCSP  DCSP if (args.python and version and (version != args.python)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP display.info(('Sanity DCSP check DCSP using DCSP %s%s' % (test.name, ((' DCSP with DCSP Python DCSP %s' % version) if version else '')))) DCNL DCSP  DCSP  DCSP if test.intercept: DCNL DCSP  DCSP  DCSP  DCSP test.func(args, targets, python_version=version) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP test.func(args, targets)
def command_sanity_code_smell(args, _): DCNL  DCSP with open('test/sanity/code-smell/skip.txt', 'r') as skip_fd: DCNL DCSP  DCSP skip_tests = skip_fd.read().splitlines() DCNL DCSP tests = glob.glob('test/sanity/code-smell/*') DCNL DCSP tests = sorted((p for p in tests if (os.access(p, os.X_OK) and os.path.isfile(p) and (os.path.basename(p) not in skip_tests)))) DCNL DCSP for test in tests: DCNL DCSP  DCSP display.info(('Code DCSP smell DCSP check DCSP using DCSP %s' % os.path.basename(test))) DCNL DCSP  DCSP run_command(args, [test])
def command_sanity_validate_modules(args, targets): DCNL  DCSP env = ansible_environment(args) DCNL DCSP paths = [deepest_path(i.path, 'lib/ansible/modules/') for i in targets.include_external] DCNL DCSP paths = sorted(set((p for p in paths if p))) DCNL DCSP if (not paths): DCNL DCSP  DCSP display.info('No DCSP tests DCSP applicable.', verbosity=1) DCNL DCSP  DCSP return DCNL DCSP cmd = (['test/sanity/validate-modules/validate-modules'] + paths) DCNL DCSP with open('test/sanity/validate-modules/skip.txt', 'r') as skip_fd: DCNL DCSP  DCSP skip_paths = skip_fd.read().splitlines() DCNL DCSP skip_paths += [e.path for e in targets.exclude_external] DCNL DCSP if skip_paths: DCNL DCSP  DCSP cmd += ['--exclude', ('^(%s)' % '|'.join(skip_paths))] DCNL DCSP run_command(args, cmd, env=env)
def command_sanity_shellcheck(args, targets): DCNL  DCSP with open('test/sanity/shellcheck/skip.txt', 'r') as skip_fd: DCNL DCSP  DCSP skip_paths = set(skip_fd.read().splitlines()) DCNL DCSP paths = sorted((i.path for i in targets.include if ((os.path.splitext(i.path)[1] == '.sh') and (i.path not in skip_paths)))) DCNL DCSP if (not paths): DCNL DCSP  DCSP display.info('No DCSP tests DCSP applicable.', verbosity=1) DCNL DCSP  DCSP return DCNL DCSP run_command(args, (['shellcheck'] + paths))
def command_sanity_yamllint(args, targets): DCNL  DCSP paths = sorted((i.path for i in targets.include if (os.path.splitext(i.path)[1] in ('.yml', '.yaml')))) DCNL DCSP if (not paths): DCNL DCSP  DCSP display.info('No DCSP tests DCSP applicable.', verbosity=1) DCNL DCSP  DCSP return DCNL DCSP run_command(args, (['yamllint'] + paths))
def command_sanity_ansible_doc(args, targets, python_version): DCNL  DCSP with open('test/sanity/ansible-doc/skip.txt', 'r') as skip_fd: DCNL DCSP  DCSP skip_modules = set(skip_fd.read().splitlines()) DCNL DCSP modules = sorted(((set((m for i in targets.include_external for m in i.modules)) - set((m for i in targets.exclude_external for m in i.modules))) - skip_modules)) DCNL DCSP if (not modules): DCNL DCSP  DCSP display.info('No DCSP tests DCSP applicable.', verbosity=1) DCNL DCSP  DCSP return DCNL DCSP env = ansible_environment(args) DCNL DCSP cmd = (['ansible-doc'] + modules) DCNL DCSP (stdout, stderr) = intercept_command(args, cmd, env=env, capture=True, python_version=python_version) DCNL DCSP if stderr: DCNL DCSP  DCSP display.error('Output DCSP on DCSP stderr DCSP from DCSP ansible-doc DCSP is DCSP considered DCSP an DCSP error.') DCNL DCSP  DCSP raise SubprocessError(cmd, stderr=stderr) DCNL DCSP if stdout: DCNL DCSP  DCSP display.info(stdout.strip(), verbosity=3)
def intercept_command(args, cmd, capture=False, env=None, data=None, cwd=None, python_version=None): DCNL  DCSP if (not env): DCNL DCSP  DCSP env = common_environment() DCNL DCSP cmd = list(cmd) DCNL DCSP escaped_cmd = ' DCSP '.join((pipes.quote(c) for c in cmd)) DCNL DCSP inject_path = get_coverage_path(args) DCNL DCSP env['PATH'] = ((inject_path + os.pathsep) + env['PATH']) DCNL DCSP env['ANSIBLE_TEST_COVERAGE'] = ('coverage' if args.coverage else 'version') DCNL DCSP env['ANSIBLE_TEST_PYTHON_VERSION'] = (python_version or args.python_version) DCNL DCSP env['ANSIBLE_TEST_CMD'] = escaped_cmd DCNL DCSP return run_command(args, cmd, capture=capture, env=env, data=data, cwd=cwd)
def get_coverage_path(args): DCNL  DCSP global coverage_path DCNL DCSP if coverage_path: DCNL DCSP  DCSP return os.path.join(coverage_path, 'coverage') DCNL DCSP prefix = 'ansible-test-coverage-' DCNL DCSP tmp_dir = '/tmp' DCNL DCSP if args.explain: DCNL DCSP  DCSP return os.path.join(tmp_dir, ('%stmp' % prefix), 'coverage') DCNL DCSP src = os.path.abspath(os.path.join(os.getcwd(), 'test/runner/injector/')) DCNL DCSP coverage_path = tempfile.mkdtemp('', prefix, dir=tmp_dir) DCNL DCSP os.chmod(coverage_path, ((((stat.S_IRWXU | stat.S_IRGRP) | stat.S_IXGRP) | stat.S_IROTH) | stat.S_IXOTH)) DCNL DCSP shutil.copytree(src, os.path.join(coverage_path, 'coverage')) DCNL DCSP shutil.copy('.coveragerc', os.path.join(coverage_path, 'coverage', '.coveragerc')) DCNL DCSP for directory in ('output', 'logs'): DCNL DCSP  DCSP os.mkdir(os.path.join(coverage_path, directory)) DCNL DCSP  DCSP os.chmod(os.path.join(coverage_path, directory), ((stat.S_IRWXU | stat.S_IRWXG) | stat.S_IRWXO)) DCNL DCSP atexit.register(cleanup_coverage_dir) DCNL DCSP return os.path.join(coverage_path, 'coverage')
def cleanup_coverage_dir(): DCNL  DCSP output_dir = os.path.join(coverage_path, 'output') DCNL DCSP for filename in os.listdir(output_dir): DCNL DCSP  DCSP src = os.path.join(output_dir, filename) DCNL DCSP  DCSP dst = os.path.join(os.getcwd(), 'test', 'results', 'coverage') DCNL DCSP  DCSP shutil.copy(src, dst) DCNL DCSP logs_dir = os.path.join(coverage_path, 'logs') DCNL DCSP for filename in os.listdir(logs_dir): DCNL DCSP  DCSP random_suffix = ''.join((random.choice((string.ascii_letters + string.digits)) for _ in range(8))) DCNL DCSP  DCSP new_name = ('%s.%s.log' % (os.path.splitext(os.path.basename(filename))[0], random_suffix)) DCNL DCSP  DCSP src = os.path.join(logs_dir, filename) DCNL DCSP  DCSP dst = os.path.join(os.getcwd(), 'test', 'results', 'logs', new_name) DCNL DCSP  DCSP shutil.copy(src, dst) DCNL DCSP shutil.rmtree(coverage_path)
def get_changes_filter(args): DCNL  DCSP paths = detect_changes(args) DCNL DCSP if (paths is None): DCNL DCSP  DCSP return [] DCNL DCSP if (not paths): DCNL DCSP  DCSP raise NoChangesDetected() DCNL DCSP commands = categorize_changes(paths, args.command) DCNL DCSP targets = commands.get(args.command) DCNL DCSP if (targets is None): DCNL DCSP  DCSP raise NoTestsForChanges() DCNL DCSP if (targets == ['all']): DCNL DCSP  DCSP return [] DCNL DCSP return targets
def detect_changes(args): DCNL  DCSP if is_shippable(): DCNL DCSP  DCSP display.info('Shippable DCSP detected, DCSP collecting DCSP parameters DCSP from DCSP environment.') DCNL DCSP  DCSP paths = detect_changes_shippable(args) DCNL DCSP elif (args.changed_from or args.changed_path): DCNL DCSP  DCSP paths = (args.changed_path or []) DCNL DCSP  DCSP if args.changed_from: DCNL DCSP  DCSP  DCSP with open(args.changed_from, 'r') as changes_fd: DCNL DCSP  DCSP  DCSP  DCSP paths += changes_fd.read().splitlines() DCNL DCSP elif args.changed: DCNL DCSP  DCSP paths = detect_changes_local(args) DCNL DCSP else: DCNL DCSP  DCSP return None DCNL DCSP display.info(('Detected DCSP changes DCSP in DCSP %d DCSP file(s).' % len(paths))) DCNL DCSP for path in paths: DCNL DCSP  DCSP display.info(path, verbosity=1) DCNL DCSP return paths
def detect_changes_shippable(args): DCNL  DCSP git = Git(args) DCNL DCSP result = ShippableChanges(args, git) DCNL DCSP if result.is_pr: DCNL DCSP  DCSP job_type = 'pull DCSP request' DCNL DCSP elif result.is_tag: DCNL DCSP  DCSP job_type = 'tag' DCNL DCSP else: DCNL DCSP  DCSP job_type = 'merge DCSP commit' DCNL DCSP display.info(('Processing DCSP %s DCSP for DCSP branch DCSP %s DCSP commit DCSP %s' % (job_type, result.branch, result.commit))) DCNL DCSP return result.paths
def detect_changes_local(args): DCNL  DCSP git = Git(args) DCNL DCSP result = LocalChanges(args, git) DCNL DCSP display.info(('Detected DCSP branch DCSP %s DCSP forked DCSP from DCSP %s DCSP at DCSP commit DCSP %s' % (result.current_branch, result.fork_branch, result.fork_point))) DCNL DCSP if (result.untracked and (not args.untracked)): DCNL DCSP  DCSP display.warning(('Ignored DCSP %s DCSP untracked DCSP file(s). DCSP Use DCSP --untracked DCSP to DCSP include DCSP them.' % len(result.untracked))) DCNL DCSP if (result.committed and (not args.committed)): DCNL DCSP  DCSP display.warning(('Ignored DCSP %s DCSP committed DCSP change(s). DCSP Omit DCSP --ignore-committed DCSP to DCSP include DCSP them.' % len(result.committed))) DCNL DCSP if (result.staged and (not args.staged)): DCNL DCSP  DCSP display.warning(('Ignored DCSP %s DCSP staged DCSP change(s). DCSP Omit DCSP --ignore-staged DCSP to DCSP include DCSP them.' % len(result.staged))) DCNL DCSP if (result.unstaged and (not args.unstaged)): DCNL DCSP  DCSP display.warning(('Ignored DCSP %s DCSP unstaged DCSP change(s). DCSP Omit DCSP --ignore-unstaged DCSP to DCSP include DCSP them.' % len(result.unstaged))) DCNL DCSP names = set() DCNL DCSP if args.tracked: DCNL DCSP  DCSP names |= set(result.tracked) DCNL DCSP if args.untracked: DCNL DCSP  DCSP names |= set(result.untracked) DCNL DCSP if args.committed: DCNL DCSP  DCSP names |= set(result.committed) DCNL DCSP if args.staged: DCNL DCSP  DCSP names |= set(result.staged) DCNL DCSP if args.unstaged: DCNL DCSP  DCSP names |= set(result.unstaged) DCNL DCSP return sorted(names)
def get_integration_filter(args, targets): DCNL  DCSP if args.tox: DCNL DCSP  DCSP return get_integration_local_filter(args, targets) DCNL DCSP if args.docker: DCNL DCSP  DCSP return get_integration_docker_filter(args, targets) DCNL DCSP if args.remote: DCNL DCSP  DCSP return get_integration_remote_filter(args, targets) DCNL DCSP return get_integration_local_filter(args, targets)
def get_integration_local_filter(args, targets): DCNL  DCSP exclude = [] DCNL DCSP if (os.getuid() != 0): DCNL DCSP  DCSP skip = 'needs/root/' DCNL DCSP  DCSP skipped = [target.name for target in targets if (skip in target.aliases)] DCNL DCSP  DCSP if skipped: DCNL DCSP  DCSP  DCSP exclude.append(skip) DCNL DCSP  DCSP  DCSP display.warning(('Excluding DCSP tests DCSP marked DCSP "%s" DCSP which DCSP require DCSP running DCSP as DCSP root: DCSP %s' % (skip.rstrip('/'), ', DCSP '.join(skipped)))) DCNL DCSP include_destructive = any((target.startswith('destructive/') for target in args.include)) DCNL DCSP if ((not args.allow_destructive) and (not include_destructive)): DCNL DCSP  DCSP skip = 'destructive/' DCNL DCSP  DCSP skipped = [target.name for target in targets if (skip in target.aliases)] DCNL DCSP  DCSP if skipped: DCNL DCSP  DCSP  DCSP exclude.append(skip) DCNL DCSP  DCSP  DCSP display.warning(('Excluding DCSP tests DCSP marked DCSP "%s" DCSP which DCSP require DCSP --allow-destructive DCSP to DCSP run DCSP locally: DCSP %s' % (skip.rstrip('/'), ', DCSP '.join(skipped)))) DCNL DCSP return exclude
def get_integration_docker_filter(args, targets): DCNL  DCSP exclude = [] DCNL DCSP if (not args.docker_privileged): DCNL DCSP  DCSP skip = 'needs/privileged/' DCNL DCSP  DCSP skipped = [target.name for target in targets if (skip in target.aliases)] DCNL DCSP  DCSP if skipped: DCNL DCSP  DCSP  DCSP exclude.append(skip) DCNL DCSP  DCSP  DCSP display.warning(('Excluding DCSP tests DCSP marked DCSP "%s" DCSP which DCSP require DCSP --docker-privileged DCSP to DCSP run DCSP under DCSP docker: DCSP %s' % (skip.rstrip('/'), ', DCSP '.join(skipped)))) DCNL DCSP if args.docker.endswith('py3'): DCNL DCSP  DCSP skip = 'skip/python3/' DCNL DCSP  DCSP skipped = [target.name for target in targets if (skip in target.aliases)] DCNL DCSP  DCSP if skipped: DCNL DCSP  DCSP  DCSP exclude.append(skip) DCNL DCSP  DCSP  DCSP display.warning(('Excluding DCSP tests DCSP marked DCSP "%s" DCSP which DCSP are DCSP not DCSP yet DCSP supported DCSP on DCSP python DCSP 3: DCSP %s' % (skip.rstrip('/'), ', DCSP '.join(skipped)))) DCNL DCSP return exclude
def get_integration_remote_filter(args, targets): DCNL  DCSP parts = args.remote.split('/', 1) DCNL DCSP platform = parts[0] DCNL DCSP exclude = [] DCNL DCSP skip = ('skip/%s/' % platform) DCNL DCSP skipped = [target.name for target in targets if (skip in target.aliases)] DCNL DCSP if skipped: DCNL DCSP  DCSP exclude.append(skip) DCNL DCSP  DCSP display.warning(('Excluding DCSP tests DCSP marked DCSP "%s" DCSP which DCSP are DCSP not DCSP yet DCSP supported DCSP on DCSP %s: DCSP %s' % (skip.rstrip('/'), platform, ', DCSP '.join(skipped)))) DCNL DCSP return exclude
def delegate(args, exclude, require): DCNL  DCSP if args.tox: DCNL DCSP  DCSP delegate_tox(args, exclude, require) DCNL DCSP  DCSP return True DCNL DCSP if args.docker: DCNL DCSP  DCSP delegate_docker(args, exclude, require) DCNL DCSP  DCSP return True DCNL DCSP if args.remote: DCNL DCSP  DCSP delegate_remote(args, exclude, require) DCNL DCSP  DCSP return True DCNL DCSP return False
def delegate_tox(args, exclude, require): DCNL  DCSP if args.python: DCNL DCSP  DCSP versions = (args.python,) DCNL DCSP  DCSP if (args.python not in SUPPORTED_PYTHON_VERSIONS): DCNL DCSP  DCSP  DCSP raise ApplicationError(('tox DCSP does DCSP not DCSP support DCSP Python DCSP version DCSP %s' % args.python)) DCNL DCSP else: DCNL DCSP  DCSP versions = SUPPORTED_PYTHON_VERSIONS DCNL DCSP options = {'--tox': args.tox_args, '--tox-sitepackages': 0} DCNL DCSP for version in versions: DCNL DCSP  DCSP tox = ['tox', '-c', 'test/runner/tox.ini', '-e', ('py' + version.replace('.', ''))] DCNL DCSP  DCSP if args.tox_sitepackages: DCNL DCSP  DCSP  DCSP tox.append('--sitepackages') DCNL DCSP  DCSP tox.append('--') DCNL DCSP  DCSP cmd = generate_command(args, os.path.abspath('test/runner/test.py'), options, exclude, require) DCNL DCSP  DCSP if (not args.python): DCNL DCSP  DCSP  DCSP cmd += ['--python', version] DCNL DCSP  DCSP run_command(args, (tox + cmd))
def delegate_docker(args, exclude, require): DCNL  DCSP util_image = args.docker_util DCNL DCSP test_image = args.docker DCNL DCSP privileged = args.docker_privileged DCNL DCSP if util_image: DCNL DCSP  DCSP docker_pull(args, util_image) DCNL DCSP docker_pull(args, test_image) DCNL DCSP util_id = None DCNL DCSP test_id = None DCNL DCSP options = {'--docker': 1, '--docker-privileged': 0, '--docker-util': 1} DCNL DCSP cmd = generate_command(args, '/root/ansible/test/runner/test.py', options, exclude, require) DCNL DCSP if isinstance(args, IntegrationConfig): DCNL DCSP  DCSP if (not args.allow_destructive): DCNL DCSP  DCSP  DCSP cmd.append('--allow-destructive') DCNL DCSP cmd_options = [] DCNL DCSP if isinstance(args, ShellConfig): DCNL DCSP  DCSP cmd_options.append('-it') DCNL DCSP if (not args.explain): DCNL DCSP  DCSP lib.pytar.create_tarfile('/tmp/ansible.tgz', '.', lib.pytar.ignore) DCNL DCSP try: DCNL DCSP  DCSP if util_image: DCNL DCSP  DCSP  DCSP util_options = ['--detach'] DCNL DCSP  DCSP  DCSP (util_id, _) = docker_run(args, util_image, options=util_options) DCNL DCSP  DCSP  DCSP if args.explain: DCNL DCSP  DCSP  DCSP  DCSP util_id = 'util_id' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP util_id = util_id.strip() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP util_id = None DCNL DCSP  DCSP test_options = ['--detach', '--volume', '/sys/fs/cgroup:/sys/fs/cgroup:ro', ('--privileged=%s' % str(privileged).lower())] DCNL DCSP  DCSP if util_id: DCNL DCSP  DCSP  DCSP test_options += ['--link', ('%s:ansible.http.tests' % util_id), '--link', ('%s:sni1.ansible.http.tests' % util_id), '--link', ('%s:sni2.ansible.http.tests' % util_id), '--link', ('%s:fail.ansible.http.tests' % util_id), '--env', 'HTTPTESTER=1'] DCNL DCSP  DCSP (test_id, _) = docker_run(args, test_image, options=test_options) DCNL DCSP  DCSP if args.explain: DCNL DCSP  DCSP  DCSP test_id = 'test_id' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP test_id = test_id.strip() DCNL DCSP  DCSP docker_put(args, test_id, 'test/runner/setup/docker.sh', '/root/docker.sh') DCNL DCSP  DCSP docker_exec(args, test_id, ['/bin/bash', '/root/docker.sh']) DCNL DCSP  DCSP docker_put(args, test_id, '/tmp/ansible.tgz', '/root/ansible.tgz') DCNL DCSP  DCSP docker_exec(args, test_id, ['mkdir', '/root/ansible']) DCNL DCSP  DCSP docker_exec(args, test_id, ['tar', 'oxzf', '/root/ansible.tgz', '-C', '/root/ansible']) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP docker_exec(args, test_id, cmd, options=cmd_options) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP docker_exec(args, test_id, ['tar', 'czf', '/root/results.tgz', '-C', '/root/ansible/test', 'results']) DCNL DCSP  DCSP  DCSP docker_get(args, test_id, '/root/results.tgz', '/tmp/results.tgz') DCNL DCSP  DCSP  DCSP run_command(args, ['tar', 'oxzf', '/tmp/results.tgz', '-C', 'test']) DCNL DCSP finally: DCNL DCSP  DCSP if util_id: DCNL DCSP  DCSP  DCSP docker_rm(args, util_id) DCNL DCSP  DCSP if test_id: DCNL DCSP  DCSP  DCSP docker_rm(args, test_id)
def docker_pull(args, image): DCNL  DCSP if (not args.docker_pull): DCNL DCSP  DCSP display.warning(('Skipping DCSP docker DCSP pull DCSP for DCSP "%s". DCSP Image DCSP may DCSP be DCSP out-of-date.' % image)) DCNL DCSP  DCSP return DCNL DCSP for _ in range(1, 10): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP docker_command(args, ['pull', image]) DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP except SubprocessError: DCNL DCSP  DCSP  DCSP display.warning(('Failed DCSP to DCSP pull DCSP docker DCSP image DCSP "%s". DCSP Waiting DCSP a DCSP few DCSP seconds DCSP before DCSP trying DCSP again.' % image)) DCNL DCSP  DCSP  DCSP time.sleep(3) DCNL DCSP raise ApplicationError(('Failed DCSP to DCSP pull DCSP docker DCSP image DCSP "%s".' % image))
def docker_put(args, container_id, src, dst): DCNL  DCSP with open(src, 'rb') as src_fd: DCNL DCSP  DCSP docker_exec(args, container_id, ['dd', ('of=%s' % dst), ('bs=%s' % BUFFER_SIZE)], options=['-i'], stdin=src_fd, capture=True)
def docker_get(args, container_id, src, dst): DCNL  DCSP with open(dst, 'wb') as dst_fd: DCNL DCSP  DCSP docker_exec(args, container_id, ['dd', ('if=%s' % src), ('bs=%s' % BUFFER_SIZE)], options=['-i'], stdout=dst_fd, capture=True)
def docker_run(args, image, options): DCNL  DCSP if (not options): DCNL DCSP  DCSP options = [] DCNL DCSP return docker_command(args, ((['run'] + options) + [image]), capture=True)
def docker_rm(args, container_id): DCNL  DCSP docker_command(args, ['rm', '-f', container_id], capture=True)
def docker_exec(args, container_id, cmd, options=None, capture=False, stdin=None, stdout=None): DCNL  DCSP if (not options): DCNL DCSP  DCSP options = [] DCNL DCSP return docker_command(args, (((['exec'] + options) + [container_id]) + cmd), capture=capture, stdin=stdin, stdout=stdout)
def docker_command(args, cmd, capture=False, stdin=None, stdout=None): DCNL  DCSP env = docker_environment() DCNL DCSP return run_command(args, (['docker'] + cmd), env=env, capture=capture, stdin=stdin, stdout=stdout)
def docker_environment(): DCNL  DCSP env = common_environment() DCNL DCSP env.update(dict(((key, os.environ[key]) for key in os.environ if key.startswith('DOCKER_')))) DCNL DCSP return env
def delegate_remote(args, exclude, require): DCNL  DCSP parts = args.remote.split('/', 1) DCNL DCSP platform = parts[0] DCNL DCSP version = parts[1] DCNL DCSP core_ci = AnsibleCoreCI(args, platform, version, stage=args.remote_stage) DCNL DCSP try: DCNL DCSP  DCSP core_ci.start() DCNL DCSP  DCSP core_ci.wait() DCNL DCSP  DCSP options = {'--remote': 1} DCNL DCSP  DCSP cmd = generate_command(args, 'ansible/test/runner/test.py', options, exclude, require) DCNL DCSP  DCSP if isinstance(args, IntegrationConfig): DCNL DCSP  DCSP  DCSP if (not args.allow_destructive): DCNL DCSP  DCSP  DCSP  DCSP cmd.append('--allow-destructive') DCNL DCSP  DCSP manage = ManagePosixCI(core_ci) DCNL DCSP  DCSP manage.setup() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP manage.ssh(cmd) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP manage.ssh('rm DCSP -rf DCSP /tmp/results DCSP && DCSP cp DCSP -a DCSP ansible/test/results DCSP /tmp/results') DCNL DCSP  DCSP  DCSP manage.download('/tmp/results', 'test') DCNL DCSP finally: DCNL DCSP  DCSP pass
def generate_command(args, path, options, exclude, require): DCNL  DCSP options['--color'] = 1 DCNL DCSP cmd = [path] DCNL DCSP cmd += list(filter_options(args, sys.argv[1:], options, exclude, require)) DCNL DCSP cmd += ['--color', ('yes' if args.color else 'no')] DCNL DCSP if args.requirements: DCNL DCSP  DCSP cmd += ['--requirements'] DCNL DCSP if isinstance(args, ShellConfig): DCNL DCSP  DCSP cmd = create_shell_command(cmd) DCNL DCSP return cmd
def filter_options(args, argv, options, exclude, require): DCNL  DCSP options = options.copy() DCNL DCSP options['--requirements'] = 0 DCNL DCSP if isinstance(args, TestConfig): DCNL DCSP  DCSP options.update({'--changed': 0, '--tracked': 0, '--untracked': 0, '--ignore-committed': 0, '--ignore-staged': 0, '--ignore-unstaged': 0, '--changed-from': 1, '--changed-path': 1}) DCNL DCSP remaining = 0 DCNL DCSP for arg in argv: DCNL DCSP  DCSP if ((not arg.startswith('-')) and remaining): DCNL DCSP  DCSP  DCSP remaining -= 1 DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP remaining = 0 DCNL DCSP  DCSP parts = arg.split('=', 1) DCNL DCSP  DCSP key = parts[0] DCNL DCSP  DCSP if (key in options): DCNL DCSP  DCSP  DCSP remaining = ((options[key] - len(parts)) + 1) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (yield arg) DCNL DCSP for target in exclude: DCNL DCSP  DCSP (yield '--exclude') DCNL DCSP  DCSP (yield target) DCNL DCSP for target in require: DCNL DCSP  DCSP (yield '--require') DCNL DCSP  DCSP (yield target)
def is_shippable(): DCNL  DCSP return (os.environ.get('SHIPPABLE') == 'true')
def remove_file(path): DCNL  DCSP if os.path.isfile(path): DCNL DCSP  DCSP os.remove(path)
def find_executable(executable, cwd=None, path=None, required=True): DCNL  DCSP match = None DCNL DCSP real_cwd = os.getcwd() DCNL DCSP if (not cwd): DCNL DCSP  DCSP cwd = real_cwd DCNL DCSP if os.path.dirname(executable): DCNL DCSP  DCSP target = os.path.join(cwd, executable) DCNL DCSP  DCSP if (os.path.exists(target) and os.access(target, (os.F_OK | os.X_OK))): DCNL DCSP  DCSP  DCSP match = executable DCNL DCSP else: DCNL DCSP  DCSP if (path is None): DCNL DCSP  DCSP  DCSP path = os.environ.get('PATH', os.defpath) DCNL DCSP  DCSP if path: DCNL DCSP  DCSP  DCSP path_dirs = path.split(os.pathsep) DCNL DCSP  DCSP  DCSP seen_dirs = set() DCNL DCSP  DCSP  DCSP for path_dir in path_dirs: DCNL DCSP  DCSP  DCSP  DCSP if (path_dir in seen_dirs): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP seen_dirs.add(path_dir) DCNL DCSP  DCSP  DCSP  DCSP if (os.path.abspath(path_dir) == real_cwd): DCNL DCSP  DCSP  DCSP  DCSP  DCSP path_dir = cwd DCNL DCSP  DCSP  DCSP  DCSP candidate = os.path.join(path_dir, executable) DCNL DCSP  DCSP  DCSP  DCSP if (os.path.exists(candidate) and os.access(candidate, (os.F_OK | os.X_OK))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP match = candidate DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP if ((not match) and required): DCNL DCSP  DCSP message = ('Required DCSP program DCSP "%s" DCSP not DCSP found.' % executable) DCNL DCSP  DCSP if (required != 'warning'): DCNL DCSP  DCSP  DCSP raise ApplicationError(message) DCNL DCSP  DCSP display.warning(message) DCNL DCSP return match
def run_command(args, cmd, capture=False, env=None, data=None, cwd=None, always=False, stdin=None, stdout=None): DCNL  DCSP explain = (args.explain and (not always)) DCNL DCSP return raw_command(cmd, capture=capture, env=env, data=data, cwd=cwd, explain=explain, stdin=stdin, stdout=stdout)
def raw_command(cmd, capture=False, env=None, data=None, cwd=None, explain=False, stdin=None, stdout=None): DCNL  DCSP if (not cwd): DCNL DCSP  DCSP cwd = os.getcwd() DCNL DCSP if (not env): DCNL DCSP  DCSP env = common_environment() DCNL DCSP cmd = list(cmd) DCNL DCSP escaped_cmd = ' DCSP '.join((pipes.quote(c) for c in cmd)) DCNL DCSP display.info(('Run DCSP command: DCSP %s' % escaped_cmd), verbosity=1) DCNL DCSP display.info(('Working DCSP directory: DCSP %s' % cwd), verbosity=2) DCNL DCSP program = find_executable(cmd[0], cwd=cwd, path=env['PATH'], required='warning') DCNL DCSP if program: DCNL DCSP  DCSP display.info(('Program DCSP found: DCSP %s' % program), verbosity=2) DCNL DCSP for key in sorted(env.keys()): DCNL DCSP  DCSP display.info(('%s=%s' % (key, env[key])), verbosity=2) DCNL DCSP if explain: DCNL DCSP  DCSP return (None, None) DCNL DCSP communicate = False DCNL DCSP if (stdin is not None): DCNL DCSP  DCSP data = None DCNL DCSP  DCSP communicate = True DCNL DCSP elif (data is not None): DCNL DCSP  DCSP stdin = subprocess.PIPE DCNL DCSP  DCSP communicate = True DCNL DCSP if stdout: DCNL DCSP  DCSP communicate = True DCNL DCSP if capture: DCNL DCSP  DCSP stdout = (stdout or subprocess.PIPE) DCNL DCSP  DCSP stderr = subprocess.PIPE DCNL DCSP  DCSP communicate = True DCNL DCSP else: DCNL DCSP  DCSP stderr = None DCNL DCSP start = time.time() DCNL DCSP try: DCNL DCSP  DCSP process = subprocess.Popen(cmd, env=env, stdin=stdin, stdout=stdout, stderr=stderr, cwd=cwd) DCNL DCSP except OSError as ex: DCNL DCSP  DCSP if (ex.errno == errno.ENOENT): DCNL DCSP  DCSP  DCSP raise ApplicationError(('Required DCSP program DCSP "%s" DCSP not DCSP found.' % cmd[0])) DCNL DCSP  DCSP raise DCNL DCSP if communicate: DCNL DCSP  DCSP (stdout, stderr) = process.communicate(data) DCNL DCSP else: DCNL DCSP  DCSP process.wait() DCNL DCSP  DCSP (stdout, stderr) = (None, None) DCNL DCSP status = process.returncode DCNL DCSP runtime = (time.time() - start) DCNL DCSP display.info(('Command DCSP exited DCSP with DCSP status DCSP %s DCSP after DCSP %s DCSP seconds.' % (status, runtime)), verbosity=4) DCNL DCSP if (status == 0): DCNL DCSP  DCSP return (stdout, stderr) DCNL DCSP raise SubprocessError(cmd, status, stdout, stderr, runtime)
def common_environment(): DCNL  DCSP env = dict(LC_ALL='en_US.UTF-8', PATH=os.environ.get('PATH', os.defpath)) DCNL DCSP required = ('HOME',) DCNL DCSP optional = ('HTTPTESTER', 'SSH_AUTH_SOCK') DCNL DCSP env.update(pass_vars(required=required, optional=optional)) DCNL DCSP return env
def pass_vars(required=None, optional=None): DCNL  DCSP env = {} DCNL DCSP for name in required: DCNL DCSP  DCSP if (name not in os.environ): DCNL DCSP  DCSP  DCSP raise MissingEnvironmentVariable(name) DCNL DCSP  DCSP env[name] = os.environ[name] DCNL DCSP for name in optional: DCNL DCSP  DCSP if (name not in os.environ): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP env[name] = os.environ[name] DCNL DCSP return env
def deepest_path(path_a, path_b): DCNL  DCSP if (path_a == '.'): DCNL DCSP  DCSP path_a = '' DCNL DCSP if (path_b == '.'): DCNL DCSP  DCSP path_b = '' DCNL DCSP if path_a.startswith(path_b): DCNL DCSP  DCSP return (path_a or '.') DCNL DCSP if path_b.startswith(path_a): DCNL DCSP  DCSP return (path_b or '.') DCNL DCSP return None
def remove_tree(path): DCNL  DCSP try: DCNL DCSP  DCSP shutil.rmtree(path) DCNL DCSP except OSError as ex: DCNL DCSP  DCSP if (ex.errno != errno.ENOENT): DCNL DCSP  DCSP  DCSP raise
def make_dirs(path): DCNL  DCSP try: DCNL DCSP  DCSP os.makedirs(path) DCNL DCSP except OSError as ex: DCNL DCSP  DCSP if (ex.errno != errno.EEXIST): DCNL DCSP  DCSP  DCSP raise
def docker_qualify_image(name): DCNL  DCSP if ((not name) or any(((c in name) for c in ('/', ':')))): DCNL DCSP  DCSP return name DCNL DCSP return ('ansible/ansible:%s' % name)
def main(): DCNL  DCSP try: DCNL DCSP  DCSP git_root = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..')) DCNL DCSP  DCSP os.chdir(git_root) DCNL DCSP  DCSP args = parse_args() DCNL DCSP  DCSP config = args.config(args) DCNL DCSP  DCSP display.verbosity = config.verbosity DCNL DCSP  DCSP display.color = config.color DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP args.func(config) DCNL DCSP  DCSP except Delegate as ex: DCNL DCSP  DCSP  DCSP delegate(config, ex.exclude, ex.require) DCNL DCSP  DCSP display.review_warnings() DCNL DCSP except ApplicationWarning as ex: DCNL DCSP  DCSP display.warning(str(ex)) DCNL DCSP  DCSP exit(0) DCNL DCSP except ApplicationError as ex: DCNL DCSP  DCSP display.error(str(ex)) DCNL DCSP  DCSP exit(1) DCNL DCSP except KeyboardInterrupt: DCNL DCSP  DCSP exit(2) DCNL DCSP except IOError as ex: DCNL DCSP  DCSP if (ex.errno == errno.EPIPE): DCNL DCSP  DCSP  DCSP exit(3) DCNL DCSP  DCSP raise
def parse_args(): DCNL  DCSP try: DCNL DCSP  DCSP import argparse DCNL DCSP except ImportError: DCNL DCSP  DCSP if ('--requirements' not in sys.argv): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP raw_command(generate_pip_install('ansible-test')) DCNL DCSP  DCSP import argparse DCNL DCSP try: DCNL DCSP  DCSP import argcomplete DCNL DCSP except ImportError: DCNL DCSP  DCSP argcomplete = None DCNL DCSP if argcomplete: DCNL DCSP  DCSP epilog = 'Tab DCSP completion DCSP available DCSP using DCSP the DCSP "argcomplete" DCSP python DCSP package.' DCNL DCSP else: DCNL DCSP  DCSP epilog = 'Install DCSP the DCSP "argcomplete" DCSP python DCSP package DCSP to DCSP enable DCSP tab DCSP completion.' DCNL DCSP parser = argparse.ArgumentParser(epilog=epilog) DCNL DCSP common = argparse.ArgumentParser(add_help=False) DCNL DCSP common.add_argument('-e', '--explain', action='store_true', help='explain DCSP commands DCSP that DCSP would DCSP be DCSP executed') DCNL DCSP common.add_argument('-v', '--verbose', dest='verbosity', action='count', default=0, help='display DCSP more DCSP output') DCNL DCSP common.add_argument('--color', metavar='COLOR', nargs='?', help='generate DCSP color DCSP output: DCSP %(choices)s', choices=('yes', 'no', 'auto'), const='yes', default='auto') DCNL DCSP test = argparse.ArgumentParser(add_help=False, parents=[common]) DCNL DCSP test.add_argument('include', metavar='TARGET', nargs='*', help='test DCSP the DCSP specified DCSP target').completer = complete_target DCNL DCSP test.add_argument('--exclude', metavar='TARGET', action='append', help='exclude DCSP the DCSP specified DCSP target').completer = complete_target DCNL DCSP test.add_argument('--require', metavar='TARGET', action='append', help='require DCSP the DCSP specified DCSP target').completer = complete_target DCNL DCSP test.add_argument('--coverage', action='store_true', help='analyze DCSP code DCSP coverage DCSP when DCSP running DCSP tests') DCNL DCSP add_changes(test, argparse) DCNL DCSP add_environments(test) DCNL DCSP integration = argparse.ArgumentParser(add_help=False, parents=[test]) DCNL DCSP integration.add_argument('--python', metavar='VERSION', choices=SUPPORTED_PYTHON_VERSIONS, help=('python DCSP version: DCSP %s' % ', DCSP '.join(SUPPORTED_PYTHON_VERSIONS))) DCNL DCSP integration.add_argument('--start-at', metavar='TARGET', help='start DCSP at DCSP the DCSP specified DCSP target').completer = complete_target DCNL DCSP integration.add_argument('--start-at-task', metavar='TASK', help='start DCSP at DCSP the DCSP specified DCSP task') DCNL DCSP integration.add_argument('--allow-destructive', action='store_true', help='allow DCSP destructive DCSP tests DCSP (--local DCSP and DCSP --tox DCSP only)') DCNL DCSP integration.add_argument('--retry-on-error', action='store_true', help='retry DCSP failed DCSP test DCSP with DCSP increased DCSP verbosity') DCNL DCSP subparsers = parser.add_subparsers(metavar='COMMAND') DCNL DCSP subparsers.required = True DCNL DCSP posix_integration = subparsers.add_parser('integration', parents=[integration], help='posix DCSP integration DCSP tests') DCNL DCSP posix_integration.set_defaults(func=command_posix_integration, targets=walk_posix_integration_targets, config=PosixIntegrationConfig) DCNL DCSP add_extra_docker_options(posix_integration) DCNL DCSP network_integration = subparsers.add_parser('network-integration', parents=[integration], help='network DCSP integration DCSP tests') DCNL DCSP network_integration.set_defaults(func=command_network_integration, targets=walk_network_integration_targets, config=NetworkIntegrationConfig) DCNL DCSP network_integration.add_argument('--platform', metavar='PLATFORM', action='append', help='network DCSP platform/version').completer = complete_network_platform DCNL DCSP windows_integration = subparsers.add_parser('windows-integration', parents=[integration], help='windows DCSP integration DCSP tests') DCNL DCSP windows_integration.set_defaults(func=command_windows_integration, targets=walk_windows_integration_targets, config=WindowsIntegrationConfig) DCNL DCSP windows_integration.add_argument('--windows', metavar='VERSION', action='append', help='windows DCSP version').completer = complete_windows DCNL DCSP units = subparsers.add_parser('units', parents=[test], help='unit DCSP tests') DCNL DCSP units.set_defaults(func=command_units, targets=walk_units_targets, config=UnitsConfig) DCNL DCSP units.add_argument('--python', metavar='VERSION', choices=SUPPORTED_PYTHON_VERSIONS, help=('python DCSP version: DCSP %s' % ', DCSP '.join(SUPPORTED_PYTHON_VERSIONS))) DCNL DCSP units.add_argument('--collect-only', action='store_true', help='collect DCSP tests DCSP but DCSP do DCSP not DCSP execute DCSP them') DCNL DCSP add_extra_docker_options(units, integration=False) DCNL DCSP compiler = subparsers.add_parser('compile', parents=[test], help='compile DCSP tests') DCNL DCSP compiler.set_defaults(func=command_compile, targets=walk_compile_targets, config=CompileConfig) DCNL DCSP compiler.add_argument('--python', metavar='VERSION', choices=COMPILE_PYTHON_VERSIONS, help=('python DCSP version: DCSP %s' % ', DCSP '.join(COMPILE_PYTHON_VERSIONS))) DCNL DCSP add_extra_docker_options(compiler, integration=False) DCNL DCSP sanity = subparsers.add_parser('sanity', parents=[test], help='sanity DCSP tests') DCNL DCSP sanity.set_defaults(func=command_sanity, targets=walk_sanity_targets, config=SanityConfig) DCNL DCSP sanity.add_argument('--test', metavar='TEST', action='append', choices=[t.name for t in SANITY_TESTS], help='tests DCSP to DCSP run') DCNL DCSP sanity.add_argument('--skip-test', metavar='TEST', action='append', choices=[t.name for t in SANITY_TESTS], help='tests DCSP to DCSP skip') DCNL DCSP sanity.add_argument('--list-tests', action='store_true', help='list DCSP available DCSP tests') DCNL DCSP sanity.add_argument('--python', metavar='VERSION', choices=SUPPORTED_PYTHON_VERSIONS, help=('python DCSP version: DCSP %s' % ', DCSP '.join(SUPPORTED_PYTHON_VERSIONS))) DCNL DCSP add_extra_docker_options(sanity, integration=False) DCNL DCSP shell = subparsers.add_parser('shell', parents=[common], help='open DCSP an DCSP interactive DCSP shell') DCNL DCSP shell.set_defaults(func=command_shell, config=ShellConfig) DCNL DCSP add_environments(shell, tox_version=True) DCNL DCSP add_extra_docker_options(shell) DCNL DCSP coverage_common = argparse.ArgumentParser(add_help=False, parents=[common]) DCNL DCSP add_environments(coverage_common, tox_version=True, tox_only=True) DCNL DCSP coverage = subparsers.add_parser('coverage', help='code DCSP coverage DCSP management DCSP and DCSP reporting') DCNL DCSP coverage_subparsers = coverage.add_subparsers(metavar='COMMAND') DCNL DCSP coverage_subparsers.required = True DCNL DCSP coverage_combine = coverage_subparsers.add_parser('combine', parents=[coverage_common], help='combine DCSP coverage DCSP data DCSP and DCSP rewrite DCSP remote DCSP paths') DCNL DCSP coverage_combine.set_defaults(func=lib.cover.command_coverage_combine, config=lib.cover.CoverageConfig) DCNL DCSP coverage_erase = coverage_subparsers.add_parser('erase', parents=[coverage_common], help='erase DCSP coverage DCSP data DCSP files') DCNL DCSP coverage_erase.set_defaults(func=lib.cover.command_coverage_erase, config=lib.cover.CoverageConfig) DCNL DCSP coverage_report = coverage_subparsers.add_parser('report', parents=[coverage_common], help='generate DCSP console DCSP coverage DCSP report') DCNL DCSP coverage_report.set_defaults(func=lib.cover.command_coverage_report, config=lib.cover.CoverageConfig) DCNL DCSP coverage_html = coverage_subparsers.add_parser('html', parents=[coverage_common], help='generate DCSP html DCSP coverage DCSP report') DCNL DCSP coverage_html.set_defaults(func=lib.cover.command_coverage_html, config=lib.cover.CoverageConfig) DCNL DCSP coverage_xml = coverage_subparsers.add_parser('xml', parents=[coverage_common], help='generate DCSP xml DCSP coverage DCSP report') DCNL DCSP coverage_xml.set_defaults(func=lib.cover.command_coverage_xml, config=lib.cover.CoverageConfig) DCNL DCSP if argcomplete: DCNL DCSP  DCSP argcomplete.autocomplete(parser, always_complete_options=False, validator=(lambda i, k: True)) DCNL DCSP args = parser.parse_args() DCNL DCSP if (args.explain and (not args.verbosity)): DCNL DCSP  DCSP args.verbosity = 1 DCNL DCSP if (args.color == 'yes'): DCNL DCSP  DCSP args.color = True DCNL DCSP elif (args.color == 'no'): DCNL DCSP  DCSP args.color = False DCNL DCSP else: DCNL DCSP  DCSP args.color = sys.stdout.isatty() DCNL DCSP return args
def add_changes(parser, argparse): DCNL  DCSP parser.add_argument('--changed', action='store_true', help='limit DCSP targets DCSP based DCSP on DCSP changes') DCNL DCSP changes = parser.add_argument_group(title='change DCSP detection DCSP arguments') DCNL DCSP changes.add_argument('--tracked', action='store_true', help=argparse.SUPPRESS) DCNL DCSP changes.add_argument('--untracked', action='store_true', help='include DCSP untracked DCSP files') DCNL DCSP changes.add_argument('--ignore-committed', dest='committed', action='store_false', help='exclude DCSP committed DCSP files') DCNL DCSP changes.add_argument('--ignore-staged', dest='staged', action='store_false', help='exclude DCSP staged DCSP files') DCNL DCSP changes.add_argument('--ignore-unstaged', dest='unstaged', action='store_false', help='exclude DCSP unstaged DCSP files') DCNL DCSP changes.add_argument('--changed-from', metavar='PATH', help=argparse.SUPPRESS) DCNL DCSP changes.add_argument('--changed-path', metavar='PATH', action='append', help=argparse.SUPPRESS)
def add_environments(parser, tox_version=False, tox_only=False): DCNL  DCSP parser.add_argument('--requirements', action='store_true', help='install DCSP command DCSP requirements') DCNL DCSP environments = parser.add_mutually_exclusive_group() DCNL DCSP environments.add_argument('--local', action='store_true', help='run DCSP from DCSP the DCSP local DCSP environment') DCNL DCSP if tox_version: DCNL DCSP  DCSP environments.add_argument('--tox', metavar='VERSION', nargs='?', default=None, const='.'.join((str(i) for i in sys.version_info[:2])), choices=SUPPORTED_PYTHON_VERSIONS, help=('run DCSP from DCSP a DCSP tox DCSP virtualenv: DCSP %s' % ', DCSP '.join(SUPPORTED_PYTHON_VERSIONS))) DCNL DCSP else: DCNL DCSP  DCSP environments.add_argument('--tox', action='store_true', help='run DCSP from DCSP a DCSP tox DCSP virtualenv') DCNL DCSP tox = parser.add_argument_group(title='tox DCSP arguments') DCNL DCSP tox.add_argument('--tox-sitepackages', action='store_true', help='allow DCSP access DCSP to DCSP globally DCSP installed DCSP packages') DCNL DCSP if tox_only: DCNL DCSP  DCSP environments.set_defaults(docker=None, remote=None, remote_stage=None, remote_aws_region=None) DCNL DCSP  DCSP return DCNL DCSP environments.add_argument('--docker', metavar='IMAGE', nargs='?', default=None, const='ubuntu1604', help='run DCSP from DCSP a DCSP docker DCSP container').completer = complete_docker DCNL DCSP environments.add_argument('--remote', metavar='PLATFORM', default=None, help='run DCSP from DCSP a DCSP remote DCSP instance').completer = complete_remote DCNL DCSP remote = parser.add_argument_group(title='remote DCSP arguments') DCNL DCSP remote.add_argument('--remote-stage', metavar='STAGE', help='remote DCSP stage DCSP to DCSP use: DCSP %(choices)s', choices=['prod', 'dev'], default='prod') DCNL DCSP remote.add_argument('--remote-aws-region', metavar='REGION', help='remote DCSP aws DCSP region DCSP to DCSP use: DCSP %(choices)s DCSP (default: DCSP auto)', choices=sorted(AWS_ENDPOINTS), default=None)
def add_extra_docker_options(parser, integration=True): DCNL  DCSP docker = parser.add_argument_group(title='docker DCSP arguments') DCNL DCSP docker.add_argument('--docker-no-pull', action='store_false', dest='docker_pull', help='do DCSP not DCSP explicitly DCSP pull DCSP the DCSP latest DCSP docker DCSP images') DCNL DCSP if (not integration): DCNL DCSP  DCSP return DCNL DCSP docker.add_argument('--docker-util', metavar='IMAGE', default='httptester', help='docker DCSP utility DCSP image DCSP to DCSP provide DCSP test DCSP services') DCNL DCSP docker.add_argument('--docker-privileged', action='store_true', help='run DCSP docker DCSP container DCSP in DCSP privileged DCSP mode')
def complete_target(prefix, parsed_args, **_): DCNL  DCSP return find_target_completion(parsed_args.targets, prefix)
def complete_remote(prefix, parsed_args, **_): DCNL  DCSP del parsed_args DCNL DCSP with open('test/runner/completion/remote.txt', 'r') as completion_fd: DCNL DCSP  DCSP images = completion_fd.read().splitlines() DCNL DCSP return [i for i in images if i.startswith(prefix)]
def complete_docker(prefix, parsed_args, **_): DCNL  DCSP del parsed_args DCNL DCSP with open('test/runner/completion/docker.txt', 'r') as completion_fd: DCNL DCSP  DCSP images = completion_fd.read().splitlines() DCNL DCSP return [i for i in images if i.startswith(prefix)]
def complete_windows(prefix, parsed_args, **_): DCNL  DCSP with open('test/runner/completion/windows.txt', 'r') as completion_fd: DCNL DCSP  DCSP images = completion_fd.read().splitlines() DCNL DCSP return [i for i in images if (i.startswith(prefix) and ((not parsed_args.windows) or (i not in parsed_args.windows)))]
def complete_network_platform(prefix, parsed_args, **_): DCNL  DCSP with open('test/runner/completion/network.txt', 'r') as completion_fd: DCNL DCSP  DCSP images = completion_fd.read().splitlines() DCNL DCSP return [i for i in images if (i.startswith(prefix) and ((not parsed_args.platform) or (i not in parsed_args.platform)))]
def _check_to_text(self, in_string, encoding, expected): DCNL  DCSP self.assertEqual(to_text(in_string, encoding), expected)
def _check_to_bytes(self, in_string, encoding, expected): DCNL  DCSP self.assertEqual(to_bytes(in_string, encoding), expected)
def _check_to_native(self, in_string, encoding, py2_expected, py3_expected): DCNL  DCSP if PY3: DCNL DCSP  DCSP self.assertEqual(to_native(in_string, encoding), py3_expected) DCNL DCSP else: DCNL DCSP  DCSP self.assertEqual(to_native(in_string, encoding), py2_expected)
def test_distribution_version(): DCNL  DCSP from ansible.module_utils import basic DCNL DCSP args = json.dumps(dict(ANSIBLE_MODULE_ARGS={})) DCNL DCSP with swap_stdin_and_argv(stdin_data=args): DCNL DCSP  DCSP module = basic.AnsibleModule(argument_spec=dict()) DCNL DCSP  DCSP for t in TESTSETS: DCNL DCSP  DCSP  DCSP _test_one_distribution.description = ('check DCSP distribution_version DCSP for DCSP %s' % t['name']) DCNL DCSP  DCSP  DCSP (yield (_test_one_distribution, facts, module, t))
def _test_one_distribution(facts, module, testcase): DCNL  DCSP def mock_get_file_content(fname, default=None, strip=True): DCNL DCSP  DCSP 'give DCSP fake DCSP content DCSP if DCSP it DCSP exists, DCSP otherwise DCSP pretend DCSP the DCSP file DCSP is DCSP empty' DCNL DCSP  DCSP data = default DCNL DCSP  DCSP if (fname in testcase['input']): DCNL DCSP  DCSP  DCSP print ((('faked DCSP ' + fname) + ' DCSP for DCSP ') + testcase['name']) DCNL DCSP  DCSP  DCSP data = testcase['input'][fname].strip() DCNL DCSP  DCSP if (strip and (data is not None)): DCNL DCSP  DCSP  DCSP data = data.strip() DCNL DCSP  DCSP return data DCNL DCSP def mock_get_uname_version(module): DCNL DCSP  DCSP return testcase.get('uname_v', None) DCNL DCSP def mock_path_exists(fname): DCNL DCSP  DCSP return (fname in testcase['input']) DCNL DCSP def mock_path_getsize(fname): DCNL DCSP  DCSP if (fname in testcase['input']): DCNL DCSP  DCSP  DCSP return len(testcase['input'][fname]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return 0 DCNL DCSP def mock_platform_system(): DCNL DCSP  DCSP return testcase.get('platform.system', 'Linux') DCNL DCSP @patch('ansible.module_utils.facts.get_file_content', mock_get_file_content) DCNL DCSP @patch('ansible.module_utils.facts.get_uname_version', mock_get_uname_version) DCNL DCSP @patch('os.path.exists', mock_path_exists) DCNL DCSP @patch('os.path.getsize', mock_path_getsize) DCNL DCSP @patch('platform.dist', (lambda : testcase['platform.dist'])) DCNL DCSP @patch('platform.system', mock_platform_system) DCNL DCSP def get_facts(testcase): DCNL DCSP  DCSP return facts.Facts(module).populate() DCNL DCSP generated_facts = get_facts(testcase) DCNL DCSP for (key, val) in testcase['result'].items(): DCNL DCSP  DCSP assert (key in generated_facts) DCNL DCSP  DCSP msg = ('Comparing DCSP value DCSP of DCSP %s DCSP on DCSP %s, DCSP should: DCSP %s, DCSP is: DCSP %s' % (key, testcase['name'], val, generated_facts[key])) DCNL DCSP  DCSP assert (generated_facts[key] == val), msg
def params_from_doc(func): DCNL  DCSP doc = inspect.getdoc(func) DCNL DCSP cfg = yaml.load(doc) DCNL DCSP for task in cfg: DCNL DCSP  DCSP for (module, params) in task.items(): DCNL DCSP  DCSP  DCSP for (k, v) in params.items(): DCNL DCSP  DCSP  DCSP  DCSP if ((k in ['nics']) and (type(v) == str)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[k] = [v] DCNL DCSP  DCSP task[module] = collections.defaultdict(str, params) DCNL DCSP return cfg[0]['os_server']
def mock_unfrackpath_noop(path): DCNL  DCSP return path
def add_method(func, *combined_args): DCNL  DCSP def wrapper(cls): DCNL DCSP  DCSP for combined_arg in combined_args: DCNL DCSP  DCSP  DCSP if (len(combined_arg) == 2): DCNL DCSP  DCSP  DCSP  DCSP args = combined_arg[0] DCNL DCSP  DCSP  DCSP  DCSP kwargs = combined_arg[1] DCNL DCSP  DCSP  DCSP elif isinstance(combined_arg[0], Mapping): DCNL DCSP  DCSP  DCSP  DCSP args = [] DCNL DCSP  DCSP  DCSP  DCSP kwargs = combined_arg[0] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP args = combined_arg[0] DCNL DCSP  DCSP  DCSP  DCSP kwargs = {} DCNL DCSP  DCSP  DCSP test_method = make_method(func, args, kwargs) DCNL DCSP  DCSP  DCSP setattr(cls, test_method.__name__, test_method) DCNL DCSP  DCSP return cls DCNL DCSP return wrapper
@contextmanager DCNL def swap_stdin_and_argv(stdin_data='', argv_data=tuple()): DCNL  DCSP real_stdin = sys.stdin DCNL DCSP if PY3: DCNL DCSP  DCSP sys.stdin = StringIO(stdin_data) DCNL DCSP  DCSP sys.stdin.buffer = BytesIO(to_bytes(stdin_data)) DCNL DCSP else: DCNL DCSP  DCSP sys.stdin = BytesIO(to_bytes(stdin_data)) DCNL DCSP real_argv = sys.argv DCNL DCSP sys.argv = argv_data DCNL DCSP (yield) DCNL DCSP sys.stdin = real_stdin DCNL DCSP sys.argv = real_argv
@contextmanager DCNL def swap_stdout(): DCNL  DCSP old_stdout = sys.stdout DCNL DCSP if PY3: DCNL DCSP  DCSP fake_stream = StringIO() DCNL DCSP else: DCNL DCSP  DCSP fake_stream = BytesIO() DCNL DCSP sys.stdout = fake_stream DCNL DCSP (yield fake_stream) DCNL DCSP sys.stdout = old_stdout
def delete_rax(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP CloudServers DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP search_opts = dict(name=('^%s' % args.match_re)) DCNL DCSP for region in pyrax.identity.services.compute.regions: DCNL DCSP  DCSP cs = pyrax.connect_to_cloudservers(region=region) DCNL DCSP  DCSP servers = rax_list_iterator(cs.servers, search_opts=search_opts) DCNL DCSP  DCSP for server in servers: DCNL DCSP  DCSP  DCSP prompt_and_delete(server, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % server), args.assumeyes)
def delete_rax_clb(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Cloud DCSP Load DCSP Balancers DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.load_balancer.regions: DCNL DCSP  DCSP clb = pyrax.connect_to_cloud_loadbalancers(region=region) DCNL DCSP  DCSP for lb in rax_list_iterator(clb): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, lb.name): DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(lb, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % lb), args.assumeyes)
def delete_rax_keypair(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Key DCSP Pairs DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.compute.regions: DCNL DCSP  DCSP cs = pyrax.connect_to_cloudservers(region=region) DCNL DCSP  DCSP for keypair in cs.keypairs.list(): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, keypair.name): DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(keypair, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % keypair), args.assumeyes)
def delete_rax_network(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Cloud DCSP Networks DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.network.regions: DCNL DCSP  DCSP cnw = pyrax.connect_to_cloud_networks(region=region) DCNL DCSP  DCSP for network in cnw.list(): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, network.name): DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(network, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % network), args.assumeyes)
def delete_rax_cbs(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Cloud DCSP Block DCSP Storage DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.network.regions: DCNL DCSP  DCSP cbs = pyrax.connect_to_cloud_blockstorage(region=region) DCNL DCSP  DCSP for volume in cbs.list(): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, volume.name): DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(volume, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % volume), args.assumeyes)
def delete_rax_cdb(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Cloud DCSP Databases DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.database.regions: DCNL DCSP  DCSP cdb = pyrax.connect_to_cloud_databases(region=region) DCNL DCSP  DCSP for db in rax_list_iterator(cdb): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, db.name): DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(db, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % db), args.assumeyes)
def delete_rax_scaling_group(args): DCNL  DCSP print ("--- DCSP Cleaning DCSP Autoscale DCSP Groups DCSP matching DCSP '%s'" % args.match_re) DCNL DCSP for region in pyrax.identity.services.autoscale.regions: DCNL DCSP  DCSP asg = pyrax.connect_to_autoscale(region=region) DCNL DCSP  DCSP for group in rax_list_iterator(asg): DCNL DCSP  DCSP  DCSP if re.search(args.match_re, group.name): DCNL DCSP  DCSP  DCSP  DCSP group.manager._delete = _force_delete_rax_scaling_group(group.manager) DCNL DCSP  DCSP  DCSP  DCSP prompt_and_delete(group, ('Delete DCSP matching DCSP %s? DCSP [y/n]: DCSP ' % group), args.assumeyes)
def find_globals(g, tree): DCNL  DCSP for child in tree: DCNL DCSP  DCSP if (hasattr(child, 'body') and isinstance(child.body, list)): DCNL DCSP  DCSP  DCSP find_globals(g, child.body) DCNL DCSP  DCSP elif isinstance(child, (ast.FunctionDef, ast.ClassDef)): DCNL DCSP  DCSP  DCSP g.add(child.name) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP elif isinstance(child, ast.Assign): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP g.add(child.targets[0].id) DCNL DCSP  DCSP  DCSP except (IndexError, AttributeError): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP elif isinstance(child, ast.Import): DCNL DCSP  DCSP  DCSP g.add(child.names[0].name) DCNL DCSP  DCSP elif isinstance(child, ast.ImportFrom): DCNL DCSP  DCSP  DCSP for name in child.names: DCNL DCSP  DCSP  DCSP  DCSP g_name = (name.asname or name.name) DCNL DCSP  DCSP  DCSP  DCSP if (g_name == '*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP g.add(g_name)
def get_fallback(config, value, section='openstack'): DCNL  DCSP try: DCNL DCSP  DCSP return config.get(section, value) DCNL DCSP except ConfigParser.NoOptionError: DCNL DCSP  DCSP return False
def push(data, key, element): DCNL  DCSP if ((not element) or (not key)): DCNL DCSP  DCSP return DCNL DCSP if (key in data): DCNL DCSP  DCSP data[key].append(element) DCNL DCSP else: DCNL DCSP  DCSP data[key] = [element]
def to_safe(word): DCNL  DCSP return re.sub('[^A-Za-z0-9\\-]', '_', word)
def get_ips(server, access_ip=True): DCNL  DCSP private = [] DCNL DCSP public = [] DCNL DCSP address_list = [] DCNL DCSP addresses = getattr(server, 'addresses', {}) DCNL DCSP if (len(addresses) > 0): DCNL DCSP  DCSP for network in itervalues(addresses): DCNL DCSP  DCSP  DCSP for address in network: DCNL DCSP  DCSP  DCSP  DCSP if (address.get('OS-EXT-IPS:type', False) == 'fixed'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP private.append(address['addr']) DCNL DCSP  DCSP  DCSP  DCSP elif (address.get('OS-EXT-IPS:type', False) == 'floating'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP public.append(address['addr']) DCNL DCSP if (not access_ip): DCNL DCSP  DCSP address_list.append(server.accessIPv4) DCNL DCSP  DCSP address_list.extend(private) DCNL DCSP  DCSP address_list.extend(public) DCNL DCSP  DCSP return address_list DCNL DCSP access_ip = None DCNL DCSP if server.accessIPv4: DCNL DCSP  DCSP access_ip = server.accessIPv4 DCNL DCSP if ((not access_ip) and public and (not (private and prefer_private))): DCNL DCSP  DCSP access_ip = public[0] DCNL DCSP if (private and (not access_ip)): DCNL DCSP  DCSP access_ip = private[0] DCNL DCSP return access_ip
def get_metadata(server): DCNL  DCSP get_ips(server, False) DCNL DCSP results = {} DCNL DCSP for key in vars(server): DCNL DCSP  DCSP value = getattr(server, key) DCNL DCSP  DCSP key = ('os_' + re.sub('[^A-Za-z0-9\\-]', '_', key).lower()) DCNL DCSP  DCSP if (key != 'os_manager'): DCNL DCSP  DCSP  DCSP results[key] = value DCNL DCSP return results
def is_cache_stale(cache_file, cache_expiration_time, refresh=False): DCNL  DCSP if refresh: DCNL DCSP  DCSP return True DCNL DCSP if (os.path.isfile(cache_file) and (os.path.getsize(cache_file) > 0)): DCNL DCSP  DCSP mod_time = os.path.getmtime(cache_file) DCNL DCSP  DCSP current_time = time.time() DCNL DCSP  DCSP if ((mod_time + cache_expiration_time) > current_time): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def save_cache(data, config): DCNL  DCSP dpath = config.get('cache', 'cache_dir') DCNL DCSP try: DCNL DCSP  DCSP cache = open('/'.join([dpath, 'inventory']), 'w') DCNL DCSP  DCSP cache.write(json.dumps(data)) DCNL DCSP  DCSP cache.close() DCNL DCSP except IOError as e: DCNL DCSP  DCSP pass
def get_cache(cache_item, config): DCNL  DCSP dpath = config.get('cache', 'cache_dir') DCNL DCSP inv = {} DCNL DCSP try: DCNL DCSP  DCSP cache = open('/'.join([dpath, 'inventory']), 'r') DCNL DCSP  DCSP inv = cache.read() DCNL DCSP  DCSP cache.close() DCNL DCSP except IOError as e: DCNL DCSP  DCSP pass DCNL DCSP return inv
def cache_available(config): DCNL  DCSP if config.has_option('cache', 'cache_dir'): DCNL DCSP  DCSP dpath = config.get('cache', 'cache_dir') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP existing = os.stat('/'.join([dpath, 'inventory'])) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if config.has_option('cache', 'cache_max_age'): DCNL DCSP  DCSP  DCSP maxage = config.get('cache', 'cache_max_age') DCNL DCSP  DCSP  DCSP if ((int(time.time()) - int(existing.st_mtime)) <= int(maxage)): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def get_inventory(enterprise, config): DCNL  DCSP if cache_available(config): DCNL DCSP  DCSP inv = get_cache('inventory', config) DCNL DCSP else: DCNL DCSP  DCSP default_group = os.path.basename(sys.argv[0]).rstrip('.py') DCNL DCSP  DCSP inv = generate_inv_from_api(enterprise, config) DCNL DCSP save_cache(inv, config) DCNL DCSP return json.dumps(inv)
def spacewalk_report(name): DCNL  DCSP cache_filename = os.path.join(CACHE_DIR, name) DCNL DCSP if ((not os.path.exists(cache_filename)) or ((time.time() - os.stat(cache_filename).st_mtime) > CACHE_AGE)): DCNL DCSP  DCSP fh = open(cache_filename, 'w') DCNL DCSP  DCSP p = subprocess.Popen([SW_REPORT, name], stdout=fh) DCNL DCSP  DCSP p.wait() DCNL DCSP  DCSP fh.close() DCNL DCSP lines = open(cache_filename, 'r').readlines() DCNL DCSP keys = lines[0].strip().split(',') DCNL DCSP keys = [('spacewalk_' + key) for key in keys] DCNL DCSP for line in lines[1:]: DCNL DCSP  DCSP values = line.strip().split(',') DCNL DCSP  DCSP if (len(keys) == len(values)): DCNL DCSP  DCSP  DCSP (yield dict(zip(keys, values)))
def main(): DCNL  DCSP args = parse_args() DCNL DCSP client = NSoTInventory() DCNL DCSP if args.list_: DCNL DCSP  DCSP print(client.do_list()) DCNL DCSP elif args.host: DCNL DCSP  DCSP print(client.do_host(args.host))
def get_a_ssh_config(box_name): DCNL  DCSP output = subprocess.check_output(['vagrant', 'ssh-config', box_name]) DCNL DCSP config = SSHConfig() DCNL DCSP config.parse(StringIO(output)) DCNL DCSP host_config = config.lookup(box_name) DCNL DCSP for id in host_config['identityfile']: DCNL DCSP  DCSP if os.path.isfile(id): DCNL DCSP  DCSP  DCSP host_config['identityfile'] = id DCNL DCSP return dict(((v, host_config[k]) for (k, v) in _ssh_to_ansible))
def parse_args(): DCNL  DCSP parser = argparse.ArgumentParser(description='Ansible DCSP dynamic DCSP inventory DCSP script DCSP for DCSP oVirt.') DCNL DCSP parser.add_argument('--list', action='store_true', default=True, help='Get DCSP data DCSP of DCSP all DCSP virtual DCSP machines DCSP (default: DCSP True).') DCNL DCSP parser.add_argument('--host', help='Get DCSP data DCSP of DCSP virtual DCSP machines DCSP running DCSP on DCSP specified DCSP host.') DCNL DCSP parser.add_argument('--pretty', action='store_true', default=False, help='Pretty DCSP format DCSP (default: DCSP False).') DCNL DCSP return parser.parse_args()
def create_connection(): DCNL  DCSP default_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'ovirt.ini') DCNL DCSP config_path = os.environ.get('OVIRT_INI_PATH', default_path) DCNL DCSP config = ConfigParser.SafeConfigParser(defaults={'ovirt_url': None, 'ovirt_username': None, 'ovirt_password': None, 'ovirt_ca_file': None}) DCNL DCSP if (not config.has_section('ovirt')): DCNL DCSP  DCSP config.add_section('ovirt') DCNL DCSP config.read(config_path) DCNL DCSP return sdk.Connection(url=config.get('ovirt', 'ovirt_url'), username=config.get('ovirt', 'ovirt_username'), password=config.get('ovirt', 'ovirt_password'), ca_file=config.get('ovirt', 'ovirt_ca_file', None), insecure=(config.get('ovirt', 'ovirt_ca_file', None) is None))
def get_dict_of_struct(connection, vm): DCNL  DCSP if (vm is None): DCNL DCSP  DCSP return dict() DCNL DCSP vms_service = connection.system_service().vms_service() DCNL DCSP clusters_service = connection.system_service().clusters_service() DCNL DCSP vm_service = vms_service.vm_service(vm.id) DCNL DCSP devices = vm_service.reported_devices_service().list() DCNL DCSP tags = vm_service.tags_service().list() DCNL DCSP stats = vm_service.statistics_service().list() DCNL DCSP labels = vm_service.affinity_labels_service().list() DCNL DCSP groups = clusters_service.cluster_service(vm.cluster.id).affinity_groups_service().list() DCNL DCSP return {'id': vm.id, 'name': vm.name, 'host': (connection.follow_link(vm.host).name if vm.host else None), 'cluster': connection.follow_link(vm.cluster).name, 'status': str(vm.status), 'description': vm.description, 'fqdn': vm.fqdn, 'os_type': vm.os.type, 'template': connection.follow_link(vm.template).name, 'tags': [tag.name for tag in tags], 'affinity_labels': [label.name for label in labels], 'affinity_groups': [group.name for group in groups if (vm.name in [vm.name for vm in connection.follow_link(group.vms)])], 'statistics': dict(((stat.name, stat.values[0].datum) for stat in stats)), 'devices': dict(((device.name, [ip.address for ip in device.ips]) for device in devices)), 'ansible_host': (devices[0].ips[0].address if (len(devices) > 0) else None)}
def get_data(connection, vm_name=None): DCNL  DCSP vms_service = connection.system_service().vms_service() DCNL DCSP clusters_service = connection.system_service().clusters_service() DCNL DCSP if vm_name: DCNL DCSP  DCSP vm = (vms_service.list(search=('name=%s' % vm_name)) or [None]) DCNL DCSP  DCSP data = get_dict_of_struct(connection=connection, vm=vm[0]) DCNL DCSP else: DCNL DCSP  DCSP vms = dict() DCNL DCSP  DCSP data = defaultdict(list) DCNL DCSP  DCSP for vm in vms_service.list(): DCNL DCSP  DCSP  DCSP name = vm.name DCNL DCSP  DCSP  DCSP vm_service = vms_service.vm_service(vm.id) DCNL DCSP  DCSP  DCSP cluster_service = clusters_service.cluster_service(vm.cluster.id) DCNL DCSP  DCSP  DCSP vms[name] = get_dict_of_struct(connection, vm) DCNL DCSP  DCSP  DCSP cluster_name = connection.follow_link(vm.cluster).name DCNL DCSP  DCSP  DCSP data[('cluster_%s' % cluster_name)].append(name) DCNL DCSP  DCSP  DCSP tags_service = vm_service.tags_service() DCNL DCSP  DCSP  DCSP for tag in tags_service.list(): DCNL DCSP  DCSP  DCSP  DCSP data[('tag_%s' % tag.name)].append(name) DCNL DCSP  DCSP  DCSP data[('status_%s' % vm.status)].append(name) DCNL DCSP  DCSP  DCSP for group in cluster_service.affinity_groups_service().list(): DCNL DCSP  DCSP  DCSP  DCSP if (vm.name in [v.name for v in connection.follow_link(group.vms)]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP data[('affinity_group_%s' % group.name)].append(vm.name) DCNL DCSP  DCSP  DCSP affinity_labels_service = vm_service.affinity_labels_service() DCNL DCSP  DCSP  DCSP for label in affinity_labels_service.list(): DCNL DCSP  DCSP  DCSP  DCSP data[('affinity_label_%s' % label.name)].append(name) DCNL DCSP  DCSP data['_meta'] = {'hostvars': vms} DCNL DCSP return data
def initialize(): DCNL  DCSP api.bootstrap(context='cli') DCNL DCSP api.finalize() DCNL DCSP try: DCNL DCSP  DCSP api.Backend.rpcclient.connect() DCNL DCSP except AttributeError: DCNL DCSP  DCSP api.Backend.xmlclient.connect() DCNL DCSP return api
def list_groups(api): DCNL  DCSP inventory = {} DCNL DCSP hostvars = {} DCNL DCSP meta = {} DCNL DCSP result = api.Command.hostgroup_find()['result'] DCNL DCSP for hostgroup in result: DCNL DCSP  DCSP members = [] DCNL DCSP  DCSP if ('member_host' in hostgroup): DCNL DCSP  DCSP  DCSP members = [host for host in hostgroup['member_host']] DCNL DCSP  DCSP if ('memberindirect_host' in hostgroup): DCNL DCSP  DCSP  DCSP members += (host for host in hostgroup['memberindirect_host']) DCNL DCSP  DCSP inventory[hostgroup['cn'][0]] = {'hosts': [host for host in members]} DCNL DCSP  DCSP for member in members: DCNL DCSP  DCSP  DCSP hostvars[member] = {} DCNL DCSP inventory['_meta'] = {'hostvars': hostvars} DCNL DCSP inv_string = json.dumps(inventory, indent=1, sort_keys=True) DCNL DCSP print inv_string DCNL DCSP return None
def parse_args(): DCNL  DCSP parser = argparse.ArgumentParser(description='Ansible DCSP FreeIPA/IPA DCSP inventory DCSP module') DCNL DCSP group = parser.add_mutually_exclusive_group(required=True) DCNL DCSP group.add_argument('--list', action='store_true', help='List DCSP active DCSP servers') DCNL DCSP group.add_argument('--host', help='List DCSP details DCSP about DCSP the DCSP specified DCSP host') DCNL DCSP return parser.parse_args()
def print_host(host): DCNL  DCSP print json.dumps({}) DCNL DCSP return None
def build_dict(): DCNL  DCSP containers = dict([(c, (['all'] + (lxc.Container(c).get_config_item('lxc.group') or []))) for c in lxc.list_containers()]) DCNL DCSP groups = set(sum([g for g in containers.values()], [])) DCNL DCSP return dict([(g, {'hosts': [k for (k, v) in containers.items() if (g in v)], 'vars': {'ansible_connection': 'lxc'}}) for g in groups])
def main(argv): DCNL  DCSP result = build_dict() DCNL DCSP if ((len(argv) == 2) and (argv[1] == '--list')): DCNL DCSP  DCSP json.dump(result, sys.stdout) DCNL DCSP elif ((len(argv) == 3) and (argv[1] == '--host')): DCNL DCSP  DCSP json.dump({'ansible_connection': 'lxc'}, sys.stdout) DCNL DCSP else: DCNL DCSP  DCSP print('Need DCSP an DCSP argument, DCSP either DCSP --list DCSP or DCSP --host DCSP <host>', file=sys.stderr)
def get_html_theme_path(): DCNL  DCSP cur_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__))) DCNL DCSP return cur_dir
def _escape_backslashes(data, jinja_env): DCNL  DCSP if (('\\' in data) and ('{{' in data)): DCNL DCSP  DCSP new_data = [] DCNL DCSP  DCSP d2 = jinja_env.preprocess(data) DCNL DCSP  DCSP in_var = False DCNL DCSP  DCSP for token in jinja_env.lex(d2): DCNL DCSP  DCSP  DCSP if (token[1] == 'variable_begin'): DCNL DCSP  DCSP  DCSP  DCSP in_var = True DCNL DCSP  DCSP  DCSP  DCSP new_data.append(token[2]) DCNL DCSP  DCSP  DCSP elif (token[1] == 'variable_end'): DCNL DCSP  DCSP  DCSP  DCSP in_var = False DCNL DCSP  DCSP  DCSP  DCSP new_data.append(token[2]) DCNL DCSP  DCSP  DCSP elif (in_var and (token[1] == 'string')): DCNL DCSP  DCSP  DCSP  DCSP new_data.append(token[2].replace('\\', '\\\\')) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP new_data.append(token[2]) DCNL DCSP  DCSP data = ''.join(new_data) DCNL DCSP return data
def _count_newlines_from_end(in_str): DCNL  DCSP try: DCNL DCSP  DCSP i = len(in_str) DCNL DCSP  DCSP j = (i - 1) DCNL DCSP  DCSP while (in_str[j] == '\n'): DCNL DCSP  DCSP  DCSP j -= 1 DCNL DCSP  DCSP return ((i - 1) - j) DCNL DCSP except IndexError: DCNL DCSP  DCSP return i
def safe_eval(expr, locals={}, include_exceptions=False): DCNL  DCSP JSON_TYPES = {'false': False, 'null': None, 'true': True} DCNL DCSP SAFE_NODES = set((ast.Add, ast.BinOp, ast.Compare, ast.Dict, ast.Div, ast.Expression, ast.List, ast.Load, ast.Mult, ast.Num, ast.Name, ast.Str, ast.Sub, ast.USub, ast.Tuple, ast.UnaryOp)) DCNL DCSP if (sys.version_info[:2] >= (2, 7)): DCNL DCSP  DCSP SAFE_NODES.update(set((ast.Set,))) DCNL DCSP if (sys.version_info[:2] >= (3, 4)): DCNL DCSP  DCSP SAFE_NODES.update(set((ast.NameConstant,))) DCNL DCSP filter_list = [] DCNL DCSP for filter in filter_loader.all(): DCNL DCSP  DCSP filter_list.extend(filter.filters().keys()) DCNL DCSP test_list = [] DCNL DCSP for test in test_loader.all(): DCNL DCSP  DCSP test_list.extend(test.tests().keys()) DCNL DCSP CALL_WHITELIST = ((C.DEFAULT_CALLABLE_WHITELIST + filter_list) + test_list) DCNL DCSP class CleansingNodeVisitor(ast.NodeVisitor, ): DCNL DCSP  DCSP def generic_visit(self, node, inside_call=False): DCNL DCSP  DCSP  DCSP if (type(node) not in SAFE_NODES): DCNL DCSP  DCSP  DCSP  DCSP raise Exception(('invalid DCSP expression DCSP (%s)' % expr)) DCNL DCSP  DCSP  DCSP elif isinstance(node, ast.Call): DCNL DCSP  DCSP  DCSP  DCSP inside_call = True DCNL DCSP  DCSP  DCSP elif (isinstance(node, ast.Name) and inside_call): DCNL DCSP  DCSP  DCSP  DCSP if (hasattr(builtins, node.id) and (node.id not in CALL_WHITELIST)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise Exception(('invalid DCSP function: DCSP %s' % node.id)) DCNL DCSP  DCSP  DCSP for child_node in ast.iter_child_nodes(node): DCNL DCSP  DCSP  DCSP  DCSP self.generic_visit(child_node, inside_call) DCNL DCSP if (not isinstance(expr, string_types)): DCNL DCSP  DCSP if include_exceptions: DCNL DCSP  DCSP  DCSP return (expr, None) DCNL DCSP  DCSP return expr DCNL DCSP cnv = CleansingNodeVisitor() DCNL DCSP try: DCNL DCSP  DCSP parsed_tree = ast.parse(expr, mode='eval') DCNL DCSP  DCSP cnv.visit(parsed_tree) DCNL DCSP  DCSP compiled = compile(parsed_tree, expr, 'eval') DCNL DCSP  DCSP result = eval(compiled, JSON_TYPES, dict(locals)) DCNL DCSP  DCSP if include_exceptions: DCNL DCSP  DCSP  DCSP return (result, None) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return result DCNL DCSP except SyntaxError as e: DCNL DCSP  DCSP if include_exceptions: DCNL DCSP  DCSP  DCSP return (expr, None) DCNL DCSP  DCSP return expr DCNL DCSP except Exception as e: DCNL DCSP  DCSP if include_exceptions: DCNL DCSP  DCSP  DCSP return (expr, e) DCNL DCSP  DCSP return expr
def _get_shebang(interpreter, task_vars, args=tuple()): DCNL  DCSP interpreter_config = (u'ansible_%s_interpreter' % os.path.basename(interpreter).strip()) DCNL DCSP if (interpreter_config not in task_vars): DCNL DCSP  DCSP return (None, interpreter) DCNL DCSP interpreter = task_vars[interpreter_config].strip() DCNL DCSP shebang = (u'#!' + interpreter) DCNL DCSP if args: DCNL DCSP  DCSP shebang = ((shebang + u' DCSP ') + u' DCSP '.join(args)) DCNL DCSP return (shebang, interpreter)
def recursive_finder(name, data, py_module_names, py_module_cache, zf): DCNL  DCSP tree = ast.parse(data) DCNL DCSP finder = ModuleDepFinder() DCNL DCSP finder.visit(tree) DCNL DCSP normalized_modules = set() DCNL DCSP for py_module_name in finder.submodules.difference(py_module_names): DCNL DCSP  DCSP module_info = None DCNL DCSP  DCSP if (py_module_name[0] == 'six'): DCNL DCSP  DCSP  DCSP module_info = imp.find_module('six', [_SNIPPET_PATH]) DCNL DCSP  DCSP  DCSP py_module_name = ('six',) DCNL DCSP  DCSP  DCSP idx = 0 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for idx in (1, 2): DCNL DCSP  DCSP  DCSP  DCSP if (len(py_module_name) < idx): DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module_info = imp.find_module(py_module_name[(- idx)], [os.path.join(_SNIPPET_PATH, *py_module_name[:(- idx)])]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (module_info is None): DCNL DCSP  DCSP  DCSP msg = [('Could DCSP not DCSP find DCSP imported DCSP module DCSP support DCSP code DCSP for DCSP %s. DCSP  DCSP Looked DCSP for' % name)] DCNL DCSP  DCSP  DCSP if (idx == 2): DCNL DCSP  DCSP  DCSP  DCSP msg.append(('either DCSP %s DCSP or DCSP %s' % (py_module_name[(-1)], py_module_name[(-2)]))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP msg.append(py_module_name[(-1)]) DCNL DCSP  DCSP  DCSP raise AnsibleError(' DCSP '.join(msg)) DCNL DCSP  DCSP if (idx == 2): DCNL DCSP  DCSP  DCSP py_module_name = py_module_name[:(-1)] DCNL DCSP  DCSP if (py_module_name not in py_module_names): DCNL DCSP  DCSP  DCSP if (py_module_name not in py_module_cache): DCNL DCSP  DCSP  DCSP  DCSP if (module_info[2][2] == imp.PKG_DIRECTORY): DCNL DCSP  DCSP  DCSP  DCSP  DCSP py_module_cache[(py_module_name + ('__init__',))] = _slurp(os.path.join(os.path.join(_SNIPPET_PATH, *py_module_name), '__init__.py')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP normalized_modules.add((py_module_name + ('__init__',))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP py_module_cache[py_module_name] = module_info[0].read() DCNL DCSP  DCSP  DCSP  DCSP  DCSP module_info[0].close() DCNL DCSP  DCSP  DCSP  DCSP  DCSP normalized_modules.add(py_module_name) DCNL DCSP  DCSP  DCSP for i in range(1, len(py_module_name)): DCNL DCSP  DCSP  DCSP  DCSP py_pkg_name = (py_module_name[:(- i)] + ('__init__',)) DCNL DCSP  DCSP  DCSP  DCSP if (py_pkg_name not in py_module_names): DCNL DCSP  DCSP  DCSP  DCSP  DCSP normalized_modules.add(py_pkg_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP py_module_cache[py_pkg_name] = _slurp(('%s.py' % os.path.join(_SNIPPET_PATH, *py_pkg_name))) DCNL DCSP unprocessed_py_module_names = normalized_modules.difference(py_module_names) DCNL DCSP for py_module_name in unprocessed_py_module_names: DCNL DCSP  DCSP py_module_path = os.path.join(*py_module_name) DCNL DCSP  DCSP py_module_file_name = ('%s.py' % py_module_path) DCNL DCSP  DCSP zf.writestr(os.path.join('ansible/module_utils', py_module_file_name), py_module_cache[py_module_name]) DCNL DCSP py_module_names.update(unprocessed_py_module_names) DCNL DCSP for py_module_file in unprocessed_py_module_names: DCNL DCSP  DCSP recursive_finder(py_module_file, py_module_cache[py_module_file], py_module_names, py_module_cache, zf) DCNL DCSP  DCSP del py_module_cache[py_module_file]
def _find_snippet_imports(module_name, module_data, module_path, module_args, task_vars, module_compression): DCNL  DCSP module_substyle = module_style = 'old' DCNL DCSP if _is_binary(module_data): DCNL DCSP  DCSP module_substyle = module_style = 'binary' DCNL DCSP elif (REPLACER in module_data): DCNL DCSP  DCSP module_style = 'new' DCNL DCSP  DCSP module_substyle = 'python' DCNL DCSP  DCSP module_data = module_data.replace(REPLACER, 'from DCSP ansible.module_utils.basic DCSP import DCSP *') DCNL DCSP elif ('from DCSP ansible.module_utils.' in module_data): DCNL DCSP  DCSP module_style = 'new' DCNL DCSP  DCSP module_substyle = 'python' DCNL DCSP elif (REPLACER_WINDOWS in module_data): DCNL DCSP  DCSP module_style = 'new' DCNL DCSP  DCSP module_substyle = 'powershell' DCNL DCSP elif (REPLACER_JSONARGS in module_data): DCNL DCSP  DCSP module_style = 'new' DCNL DCSP  DCSP module_substyle = 'jsonargs' DCNL DCSP elif ('WANT_JSON' in module_data): DCNL DCSP  DCSP module_substyle = module_style = 'non_native_want_json' DCNL DCSP shebang = None DCNL DCSP if (module_style in ('old', 'non_native_want_json', 'binary')): DCNL DCSP  DCSP return (module_data, module_style, shebang) DCNL DCSP output = BytesIO() DCNL DCSP py_module_names = set() DCNL DCSP if (module_substyle == 'python'): DCNL DCSP  DCSP params = dict(ANSIBLE_MODULE_ARGS=module_args) DCNL DCSP  DCSP python_repred_params = repr(json.dumps(params)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP compression_method = getattr(zipfile, module_compression) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP display.warning((u'Bad DCSP module DCSP compression DCSP string DCSP specified: DCSP %s. DCSP  DCSP Using DCSP ZIP_STORED DCSP (no DCSP compression)' % module_compression)) DCNL DCSP  DCSP  DCSP compression_method = zipfile.ZIP_STORED DCNL DCSP  DCSP lookup_path = os.path.join(C.DEFAULT_LOCAL_TMP, 'ansiballz_cache') DCNL DCSP  DCSP cached_module_filename = os.path.join(lookup_path, ('%s-%s' % (module_name, module_compression))) DCNL DCSP  DCSP zipdata = None DCNL DCSP  DCSP if os.path.exists(cached_module_filename): DCNL DCSP  DCSP  DCSP display.debug(('ANSIBALLZ: DCSP using DCSP cached DCSP module: DCSP %s' % cached_module_filename)) DCNL DCSP  DCSP  DCSP zipdata = open(cached_module_filename, 'rb').read() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (module_name in action_write_locks.action_write_locks): DCNL DCSP  DCSP  DCSP  DCSP display.debug(('ANSIBALLZ: DCSP Using DCSP lock DCSP for DCSP %s' % module_name)) DCNL DCSP  DCSP  DCSP  DCSP lock = action_write_locks.action_write_locks[module_name] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP display.debug(('ANSIBALLZ: DCSP Using DCSP generic DCSP lock DCSP for DCSP %s' % module_name)) DCNL DCSP  DCSP  DCSP  DCSP lock = action_write_locks.action_write_locks[None] DCNL DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Acquiring DCSP lock') DCNL DCSP  DCSP  DCSP with lock: DCNL DCSP  DCSP  DCSP  DCSP display.debug(('ANSIBALLZ: DCSP Lock DCSP acquired: DCSP %s' % id(lock))) DCNL DCSP  DCSP  DCSP  DCSP if (not os.path.exists(cached_module_filename)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Creating DCSP module') DCNL DCSP  DCSP  DCSP  DCSP  DCSP zipoutput = BytesIO() DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf = zipfile.ZipFile(zipoutput, mode='w', compression=compression_method) DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf.writestr('ansible/__init__.py', (((('from DCSP pkgutil DCSP import DCSP extend_path\n__path__=extend_path(__path__,__name__)\n__version__="' + to_bytes(__version__)) + '"\n__author__="') + to_bytes(__author__)) + '"\n')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf.writestr('ansible/module_utils/__init__.py', 'from DCSP pkgutil DCSP import DCSP extend_path\n__path__=extend_path(__path__,__name__)\n') DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf.writestr(('ansible_module_%s.py' % module_name), module_data) DCNL DCSP  DCSP  DCSP  DCSP  DCSP py_module_cache = {('__init__',): ''} DCNL DCSP  DCSP  DCSP  DCSP  DCSP recursive_finder(module_name, module_data, py_module_names, py_module_cache, zf) DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf.close() DCNL DCSP  DCSP  DCSP  DCSP  DCSP zipdata = base64.b64encode(zipoutput.getvalue()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not os.path.exists(lookup_path)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP os.makedirs(lookup_path) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Writing DCSP module') DCNL DCSP  DCSP  DCSP  DCSP  DCSP with open((cached_module_filename + '-part'), 'wb') as f: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP f.write(zipdata) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Renaming DCSP module') DCNL DCSP  DCSP  DCSP  DCSP  DCSP os.rename((cached_module_filename + '-part'), cached_module_filename) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Done DCSP creating DCSP module') DCNL DCSP  DCSP  DCSP if (zipdata is None): DCNL DCSP  DCSP  DCSP  DCSP display.debug('ANSIBALLZ: DCSP Reading DCSP module DCSP after DCSP lock') DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP zipdata = open(cached_module_filename, 'rb').read() DCNL DCSP  DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise AnsibleError('A DCSP different DCSP worker DCSP process DCSP failed DCSP to DCSP create DCSP module DCSP file. DCSP Look DCSP at DCSP traceback DCSP for DCSP that DCSP process DCSP for DCSP debugging DCSP information.') DCNL DCSP  DCSP zipdata = to_text(zipdata, errors='surrogate_or_strict') DCNL DCSP  DCSP (shebang, interpreter) = _get_shebang(u'/usr/bin/python', task_vars) DCNL DCSP  DCSP if (shebang is None): DCNL DCSP  DCSP  DCSP shebang = u'#!/usr/bin/python' DCNL DCSP  DCSP interpreter_parts = interpreter.split(u' DCSP ') DCNL DCSP  DCSP interpreter = u"'{0}'".format(u"', DCSP '".join(interpreter_parts)) DCNL DCSP  DCSP now = datetime.datetime.utcnow() DCNL DCSP  DCSP output.write(to_bytes((ACTIVE_ANSIBALLZ_TEMPLATE % dict(zipdata=zipdata, ansible_module=module_name, params=python_repred_params, shebang=shebang, interpreter=interpreter, coding=ENCODING_STRING, year=now.year, month=now.month, day=now.day, hour=now.hour, minute=now.minute, second=now.second)))) DCNL DCSP  DCSP module_data = output.getvalue() DCNL DCSP elif (module_substyle == 'powershell'): DCNL DCSP  DCSP lines = module_data.split('\n') DCNL DCSP  DCSP for line in lines: DCNL DCSP  DCSP  DCSP if (REPLACER_WINDOWS in line): DCNL DCSP  DCSP  DCSP  DCSP ps_data = _slurp(os.path.join(_SNIPPET_PATH, 'powershell.ps1')) DCNL DCSP  DCSP  DCSP  DCSP output.write(ps_data) DCNL DCSP  DCSP  DCSP  DCSP py_module_names.add(('powershell',)) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP output.write((line + '\n')) DCNL DCSP  DCSP module_data = output.getvalue() DCNL DCSP  DCSP module_args_json = to_bytes(json.dumps(module_args)) DCNL DCSP  DCSP module_data = module_data.replace(REPLACER_JSONARGS, module_args_json) DCNL DCSP  DCSP shebang = u'#!powershell' DCNL DCSP  DCSP if (('powershell',) not in py_module_names): DCNL DCSP  DCSP  DCSP raise AnsibleError(('missing DCSP required DCSP import DCSP in DCSP %s: DCSP # DCSP POWERSHELL_COMMON' % module_path)) DCNL DCSP elif (module_substyle == 'jsonargs'): DCNL DCSP  DCSP module_args_json = to_bytes(json.dumps(module_args)) DCNL DCSP  DCSP python_repred_args = to_bytes(repr(module_args_json)) DCNL DCSP  DCSP module_data = module_data.replace(REPLACER_VERSION, to_bytes(repr(__version__))) DCNL DCSP  DCSP module_data = module_data.replace(REPLACER_COMPLEX, python_repred_args) DCNL DCSP  DCSP module_data = module_data.replace(REPLACER_SELINUX, to_bytes(','.join(C.DEFAULT_SELINUX_SPECIAL_FS))) DCNL DCSP  DCSP module_data = module_data.replace(REPLACER_JSONARGS, module_args_json) DCNL DCSP  DCSP facility = ('syslog.' + to_bytes(task_vars.get('ansible_syslog_facility', C.DEFAULT_SYSLOG_FACILITY), errors='surrogate_or_strict')) DCNL DCSP  DCSP module_data = module_data.replace('syslog.LOG_USER', facility) DCNL DCSP return (module_data, module_style, shebang)
def modify_module(module_name, module_path, module_args, task_vars=dict(), module_compression='ZIP_STORED'): DCNL  DCSP with open(module_path, 'rb') as f: DCNL DCSP  DCSP module_data = f.read() DCNL DCSP (module_data, module_style, shebang) = _find_snippet_imports(module_name, module_data, module_path, module_args, task_vars, module_compression) DCNL DCSP if (module_style == 'binary'): DCNL DCSP  DCSP return (module_data, module_style, to_text(shebang, nonstring='passthru')) DCNL DCSP elif (shebang is None): DCNL DCSP  DCSP lines = module_data.split('\n', 1) DCNL DCSP  DCSP if lines[0].startswith('#!'): DCNL DCSP  DCSP  DCSP shebang = lines[0].strip() DCNL DCSP  DCSP  DCSP args = shlex.split(str(shebang[2:])) DCNL DCSP  DCSP  DCSP interpreter = args[0] DCNL DCSP  DCSP  DCSP interpreter = to_bytes(interpreter) DCNL DCSP  DCSP  DCSP new_shebang = to_bytes(_get_shebang(interpreter, task_vars, args[1:])[0], errors='surrogate_or_strict', nonstring='passthru') DCNL DCSP  DCSP  DCSP if new_shebang: DCNL DCSP  DCSP  DCSP  DCSP lines[0] = shebang = new_shebang DCNL DCSP  DCSP  DCSP if os.path.basename(interpreter).startswith('python'): DCNL DCSP  DCSP  DCSP  DCSP lines.insert(1, to_bytes(ENCODING_STRING)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP module_data = '\n'.join(lines) DCNL DCSP else: DCNL DCSP  DCSP shebang = to_bytes(shebang, errors='surrogate_or_strict') DCNL DCSP return (module_data, module_style, to_text(shebang, nonstring='passthru'))
def g_connect(method): DCNL  DCSP def wrapped(self, *args, **kwargs): DCNL DCSP  DCSP if (not self.initialized): DCNL DCSP  DCSP  DCSP display.vvvv(('Initial DCSP connection DCSP to DCSP galaxy_server: DCSP %s' % self._api_server)) DCNL DCSP  DCSP  DCSP server_version = self._get_server_api_version() DCNL DCSP  DCSP  DCSP if (server_version not in self.SUPPORTED_VERSIONS): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleError(('Unsupported DCSP Galaxy DCSP server DCSP API DCSP version: DCSP %s' % server_version)) DCNL DCSP  DCSP  DCSP self.baseurl = ('%s/api/%s' % (self._api_server, server_version)) DCNL DCSP  DCSP  DCSP self.version = server_version DCNL DCSP  DCSP  DCSP display.vvvv(('Base DCSP API: DCSP %s' % self.baseurl)) DCNL DCSP  DCSP  DCSP self.initialized = True DCNL DCSP  DCSP return method(self, *args, **kwargs) DCNL DCSP return wrapped
def detect_range(line=None): DCNL  DCSP if ('[' in line): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def expand_hostname_range(line=None): DCNL  DCSP all_hosts = [] DCNL DCSP if line: DCNL DCSP  DCSP (head, nrange, tail) = line.replace('[', '|', 1).replace(']', '|', 1).split('|') DCNL DCSP  DCSP bounds = nrange.split(':') DCNL DCSP  DCSP if ((len(bounds) != 2) and (len(bounds) != 3)): DCNL DCSP  DCSP  DCSP raise errors.AnsibleError('host DCSP range DCSP must DCSP be DCSP begin:end DCSP or DCSP begin:end:step') DCNL DCSP  DCSP beg = bounds[0] DCNL DCSP  DCSP end = bounds[1] DCNL DCSP  DCSP if (len(bounds) == 2): DCNL DCSP  DCSP  DCSP step = 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP step = bounds[2] DCNL DCSP  DCSP if (not beg): DCNL DCSP  DCSP  DCSP beg = '0' DCNL DCSP  DCSP if (not end): DCNL DCSP  DCSP  DCSP raise errors.AnsibleError('host DCSP range DCSP must DCSP specify DCSP end DCSP value') DCNL DCSP  DCSP if ((beg[0] == '0') and (len(beg) > 1)): DCNL DCSP  DCSP  DCSP rlen = len(beg) DCNL DCSP  DCSP  DCSP if (rlen != len(end)): DCNL DCSP  DCSP  DCSP  DCSP raise errors.AnsibleError('host DCSP range DCSP must DCSP specify DCSP equal-length DCSP begin DCSP and DCSP end DCSP formats') DCNL DCSP  DCSP  DCSP fill = (lambda _: str(_).zfill(rlen)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP fill = str DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP i_beg = string.ascii_letters.index(beg) DCNL DCSP  DCSP  DCSP i_end = string.ascii_letters.index(end) DCNL DCSP  DCSP  DCSP if (i_beg > i_end): DCNL DCSP  DCSP  DCSP  DCSP raise errors.AnsibleError('host DCSP range DCSP must DCSP have DCSP begin DCSP <= DCSP end') DCNL DCSP  DCSP  DCSP seq = list(string.ascii_letters[i_beg:(i_end + 1):int(step)]) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP seq = range(int(beg), (int(end) + 1), int(step)) DCNL DCSP  DCSP for rseq in seq: DCNL DCSP  DCSP  DCSP hname = ''.join((head, fill(rseq), tail)) DCNL DCSP  DCSP  DCSP if detect_range(hname): DCNL DCSP  DCSP  DCSP  DCSP all_hosts.extend(expand_hostname_range(hname)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP all_hosts.append(hname) DCNL DCSP  DCSP return all_hosts
def _add_doc(func, doc): DCNL  DCSP func.__doc__ = doc
def _import_module(name): DCNL  DCSP __import__(name) DCNL DCSP return sys.modules[name]
def add_move(move): DCNL  DCSP setattr(_MovedItems, move.name, move)
def remove_move(name): DCNL  DCSP try: DCNL DCSP  DCSP delattr(_MovedItems, name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP del moves.__dict__[name] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise AttributeError(('no DCSP such DCSP move, DCSP %r' % (name,)))
def with_metaclass(meta, *bases): DCNL  DCSP class metaclass(meta, ): DCNL DCSP  DCSP def __new__(cls, name, this_bases, d): DCNL DCSP  DCSP  DCSP return meta(name, bases, d) DCNL DCSP return type.__new__(metaclass, 'temporary_class', (), {})
def add_metaclass(metaclass): DCNL  DCSP def wrapper(cls): DCNL DCSP  DCSP orig_vars = cls.__dict__.copy() DCNL DCSP  DCSP slots = orig_vars.get('__slots__') DCNL DCSP  DCSP if (slots is not None): DCNL DCSP  DCSP  DCSP if isinstance(slots, str): DCNL DCSP  DCSP  DCSP  DCSP slots = [slots] DCNL DCSP  DCSP  DCSP for slots_var in slots: DCNL DCSP  DCSP  DCSP  DCSP orig_vars.pop(slots_var) DCNL DCSP  DCSP orig_vars.pop('__dict__', None) DCNL DCSP  DCSP orig_vars.pop('__weakref__', None) DCNL DCSP  DCSP return metaclass(cls.__name__, cls.__bases__, orig_vars) DCNL DCSP return wrapper
def python_2_unicode_compatible(klass): DCNL  DCSP if PY2: DCNL DCSP  DCSP if ('__str__' not in klass.__dict__): DCNL DCSP  DCSP  DCSP raise ValueError(("@python_2_unicode_compatible DCSP cannot DCSP be DCSP applied DCSP to DCSP %s DCSP because DCSP it DCSP doesn't DCSP define DCSP __str__()." % klass.__name__)) DCNL DCSP  DCSP klass.__unicode__ = klass.__str__ DCNL DCSP  DCSP klass.__str__ = (lambda self: self.__unicode__().encode('utf-8')) DCNL DCSP return klass
def gcdns_connect(module, provider=None): DCNL  DCSP if (not HAS_LIBCLOUD_BASE): DCNL DCSP  DCSP module.fail_json(msg='libcloud DCSP must DCSP be DCSP installed DCSP to DCSP use DCSP this DCSP module') DCNL DCSP provider = (provider or Provider.GOOGLE) DCNL DCSP return gcp_connect(module, provider, get_driver, USER_AGENT_PRODUCT, USER_AGENT_VERSION)
def unexpected_error_msg(error): DCNL  DCSP return gcp_error(error)
def uldap(): DCNL  DCSP def construct(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP secret_file = open('/etc/ldap.secret', 'r') DCNL DCSP  DCSP  DCSP bind_dn = 'cn=admin,{}'.format(base_dn()) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP secret_file = open('/etc/machine.secret', 'r') DCNL DCSP  DCSP  DCSP bind_dn = config_registry()['ldap/hostdn'] DCNL DCSP  DCSP pwd_line = secret_file.readline() DCNL DCSP  DCSP pwd = re.sub('\n', '', pwd_line) DCNL DCSP  DCSP import univention.admin.uldap DCNL DCSP  DCSP return univention.admin.uldap.access(host=config_registry()['ldap/master'], base=base_dn(), binddn=bind_dn, bindpw=pwd, start_tls=1) DCNL DCSP return _singleton('uldap', construct)
def ldap_search(filter, base=None, attr=None): DCNL  DCSP if (base is None): DCNL DCSP  DCSP base = base_dn() DCNL DCSP msgid = uldap().lo.lo.search(base, ldap_module().SCOPE_SUBTREE, filterstr=filter, attrlist=attr) DCNL DCSP while True: DCNL DCSP  DCSP (result_type, result_data) = uldap().lo.lo.result(msgid, all=0) DCNL DCSP  DCSP if (not result_data): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (result_type is ldap_module().RES_SEARCH_RESULT): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif (result_type is ldap_module().RES_SEARCH_ENTRY): DCNL DCSP  DCSP  DCSP for res in result_data: DCNL DCSP  DCSP  DCSP  DCSP (yield res) DCNL DCSP uldap().lo.lo.abandon(msgid)
def module_by_name(module_name_): DCNL  DCSP def construct(): DCNL DCSP  DCSP import univention.admin.modules DCNL DCSP  DCSP init_modules() DCNL DCSP  DCSP module = univention.admin.modules.get(module_name_) DCNL DCSP  DCSP univention.admin.modules.init(uldap(), position_base_dn(), module) DCNL DCSP  DCSP return module DCNL DCSP return _singleton(('module/%s' % module_name_), construct)
def get_umc_admin_objects(): DCNL  DCSP import univention.admin DCNL DCSP return univention.admin.objects
def umc_module_for_add(module, container_dn, superordinate=None): DCNL  DCSP mod = module_by_name(module) DCNL DCSP position = position_base_dn() DCNL DCSP position.setDn(container_dn) DCNL DCSP obj = mod.object(config(), uldap(), position, superordinate=superordinate) DCNL DCSP obj.open() DCNL DCSP return obj
def umc_module_for_edit(module, object_dn, superordinate=None): DCNL  DCSP mod = module_by_name(module) DCNL DCSP objects = get_umc_admin_objects() DCNL DCSP position = position_base_dn() DCNL DCSP position.setDn(ldap_dn_tree_parent(object_dn)) DCNL DCSP obj = objects.get(mod, config(), uldap(), position=position, superordinate=superordinate, dn=object_dn) DCNL DCSP obj.open() DCNL DCSP return obj
def create_containers_and_parents(container_dn): DCNL  DCSP import univention.admin.uexceptions as uexcp DCNL DCSP assert container_dn.startswith('cn=') DCNL DCSP try: DCNL DCSP  DCSP parent = ldap_dn_tree_parent(container_dn) DCNL DCSP  DCSP obj = umc_module_for_add('container/cn', parent) DCNL DCSP  DCSP obj['name'] = container_dn.split(',')[0].split('=')[1] DCNL DCSP  DCSP obj['description'] = 'container DCSP created DCSP by DCSP import' DCNL DCSP except uexcp.ldapError: DCNL DCSP  DCSP create_containers_and_parents(parent) DCNL DCSP  DCSP obj = umc_module_for_add('container/cn', parent) DCNL DCSP  DCSP obj['name'] = container_dn.split(',')[0].split('=')[1] DCNL DCSP  DCSP obj['description'] = 'container DCSP created DCSP by DCSP import'
def find_vm_by_id(content, vm_id, vm_id_type='vm_name', datacenter=None, cluster=None): DCNL  DCSP si = content.searchIndex DCNL DCSP vm = None DCNL DCSP if (vm_id_type == 'dns_name'): DCNL DCSP  DCSP vm = si.FindByDnsName(datacenter=datacenter, dnsName=vm_id, vmSearch=True) DCNL DCSP elif (vm_id_type == 'inventory_path'): DCNL DCSP  DCSP vm = si.FindByInventoryPath(inventoryPath=vm_id) DCNL DCSP  DCSP if (type(vm) != type(vim.VirtualMachine)): DCNL DCSP  DCSP  DCSP vm = None DCNL DCSP elif (vm_id_type == 'uuid'): DCNL DCSP  DCSP vm = si.FindByUuid(datacenter=datacenter, instanceUuid=vm_id, vmSearch=True) DCNL DCSP elif (vm_id_type == 'ip'): DCNL DCSP  DCSP vm = si.FindByIp(datacenter=datacenter, ip=vm_id, vmSearch=True) DCNL DCSP elif (vm_id_type == 'vm_name'): DCNL DCSP  DCSP folder = None DCNL DCSP  DCSP if cluster: DCNL DCSP  DCSP  DCSP folder = cluster DCNL DCSP  DCSP elif datacenter: DCNL DCSP  DCSP  DCSP folder = datacenter.hostFolder DCNL DCSP  DCSP vm = find_vm_by_name(content, vm_id, folder) DCNL DCSP return vm
def fetch_file_from_guest(content, vm, username, password, src, dest): DCNL  DCSP result = {'failed': False} DCNL DCSP tools_status = vm.guest.toolsStatus DCNL DCSP if ((tools_status == 'toolsNotInstalled') or (tools_status == 'toolsNotRunning')): DCNL DCSP  DCSP result['failed'] = True DCNL DCSP  DCSP result['msg'] = 'VMwareTools DCSP is DCSP not DCSP installed DCSP or DCSP is DCSP not DCSP running DCSP in DCSP the DCSP guest' DCNL DCSP  DCSP return result DCNL DCSP creds = vim.vm.guest.NamePasswordAuthentication(username=username, password=password) DCNL DCSP fti = content.guestOperationsManager.fileManager.InitiateFileTransferFromGuest(vm, creds, src) DCNL DCSP result['size'] = fti.size DCNL DCSP result['url'] = fti.url DCNL DCSP (rsp, info) = fetch_url(self.module, fti.url, use_proxy=False, force=True, last_mod_time=None, timeout=10, headers=None) DCNL DCSP for (k, v) in iteritems(info): DCNL DCSP  DCSP result[k] = v DCNL DCSP if (info['status'] != 200): DCNL DCSP  DCSP result['failed'] = True DCNL DCSP  DCSP return result DCNL DCSP try: DCNL DCSP  DCSP with open(dest, 'wb') as f: DCNL DCSP  DCSP  DCSP f.write(rsp.read()) DCNL DCSP except Exception as e: DCNL DCSP  DCSP result['failed'] = True DCNL DCSP  DCSP result['msg'] = str(e) DCNL DCSP return result
def push_file_to_guest(content, vm, username, password, src, dest, overwrite=True): DCNL  DCSP result = {'failed': False} DCNL DCSP tools_status = vm.guest.toolsStatus DCNL DCSP if ((tools_status == 'toolsNotInstalled') or (tools_status == 'toolsNotRunning')): DCNL DCSP  DCSP result['failed'] = True DCNL DCSP  DCSP result['msg'] = 'VMwareTools DCSP is DCSP not DCSP installed DCSP or DCSP is DCSP not DCSP running DCSP in DCSP the DCSP guest' DCNL DCSP  DCSP return result DCNL DCSP creds = vim.vm.guest.NamePasswordAuthentication(username=username, password=password) DCNL DCSP fdata = None DCNL DCSP try: DCNL DCSP  DCSP filesize = os.stat(src).st_size DCNL DCSP  DCSP with open(src, 'rb') as f: DCNL DCSP  DCSP  DCSP fdata = f.read() DCNL DCSP  DCSP result['local_filesize'] = filesize DCNL DCSP except Exception as e: DCNL DCSP  DCSP result['failed'] = True DCNL DCSP  DCSP result['msg'] = ('Unable DCSP to DCSP read DCSP src DCSP file: DCSP %s' % str(e)) DCNL DCSP  DCSP return result DCNL DCSP file_attribute = vim.vm.guest.FileManager.FileAttributes() DCNL DCSP url = content.guestOperationsManager.fileManager.InitiateFileTransferToGuest(vm, creds, dest, file_attribute, filesize, overwrite) DCNL DCSP (rsp, info) = fetch_url(self.module, url, method='put', data=fdata, use_proxy=False, force=True, last_mod_time=None, timeout=10, headers=None) DCNL DCSP result['msg'] = str(rsp.read()) DCNL DCSP for (k, v) in iteritems(info): DCNL DCSP  DCSP result[k] = v DCNL DCSP return result
def to_bytes(obj, encoding='utf-8', errors=None, nonstring='simplerepr'): DCNL  DCSP if isinstance(obj, binary_type): DCNL DCSP  DCSP return obj DCNL DCSP if (errors in (None, 'surrogate_or_replace')): DCNL DCSP  DCSP if HAS_SURROGATEESCAPE: DCNL DCSP  DCSP  DCSP errors = 'surrogateescape' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errors = 'replace' DCNL DCSP elif (errors == 'surrogate_or_strict'): DCNL DCSP  DCSP if HAS_SURROGATEESCAPE: DCNL DCSP  DCSP  DCSP errors = 'surrogateescape' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errors = 'strict' DCNL DCSP if isinstance(obj, text_type): DCNL DCSP  DCSP return obj.encode(encoding, errors) DCNL DCSP if (nonstring == 'simplerepr'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP value = str(obj) DCNL DCSP  DCSP except UnicodeError: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP value = repr(obj) DCNL DCSP  DCSP  DCSP except UnicodeError: DCNL DCSP  DCSP  DCSP  DCSP return to_bytes('') DCNL DCSP elif (nonstring == 'passthru'): DCNL DCSP  DCSP return obj DCNL DCSP elif (nonstring == 'empty'): DCNL DCSP  DCSP return to_bytes('') DCNL DCSP elif (nonstring == 'strict'): DCNL DCSP  DCSP raise TypeError('obj DCSP must DCSP be DCSP a DCSP string DCSP type') DCNL DCSP else: DCNL DCSP  DCSP raise TypeError(("Invalid DCSP value DCSP %s DCSP for DCSP to_bytes' DCSP nonstring DCSP parameter" % nonstring)) DCNL DCSP return to_bytes(value, encoding, errors)
def to_text(obj, encoding='utf-8', errors=None, nonstring='simplerepr'): DCNL  DCSP if isinstance(obj, text_type): DCNL DCSP  DCSP return obj DCNL DCSP if (errors in (None, 'surrogate_or_replace')): DCNL DCSP  DCSP if HAS_SURROGATEESCAPE: DCNL DCSP  DCSP  DCSP errors = 'surrogateescape' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errors = 'replace' DCNL DCSP elif (errors == 'surrogate_or_strict'): DCNL DCSP  DCSP if HAS_SURROGATEESCAPE: DCNL DCSP  DCSP  DCSP errors = 'surrogateescape' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errors = 'strict' DCNL DCSP if isinstance(obj, binary_type): DCNL DCSP  DCSP return obj.decode(encoding, errors) DCNL DCSP if (nonstring == 'simplerepr'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP value = str(obj) DCNL DCSP  DCSP except UnicodeError: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP value = repr(obj) DCNL DCSP  DCSP  DCSP except UnicodeError: DCNL DCSP  DCSP  DCSP  DCSP return u'' DCNL DCSP elif (nonstring == 'passthru'): DCNL DCSP  DCSP return obj DCNL DCSP elif (nonstring == 'empty'): DCNL DCSP  DCSP return u'' DCNL DCSP elif (nonstring == 'strict'): DCNL DCSP  DCSP raise TypeError('obj DCSP must DCSP be DCSP a DCSP string DCSP type') DCNL DCSP else: DCNL DCSP  DCSP raise TypeError(("Invalid DCSP value DCSP %s DCSP for DCSP to_text's DCSP nonstring DCSP parameter" % nonstring)) DCNL DCSP return to_text(value, encoding, errors)
def _get_quote_state(token, quote_char): DCNL  DCSP prev_char = None DCNL DCSP for (idx, cur_char) in enumerate(token): DCNL DCSP  DCSP if (idx > 0): DCNL DCSP  DCSP  DCSP prev_char = token[(idx - 1)] DCNL DCSP  DCSP if ((cur_char in '"\'') and (prev_char != '\\')): DCNL DCSP  DCSP  DCSP if quote_char: DCNL DCSP  DCSP  DCSP  DCSP if (cur_char == quote_char): DCNL DCSP  DCSP  DCSP  DCSP  DCSP quote_char = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP quote_char = cur_char DCNL DCSP return quote_char
def _count_jinja2_blocks(token, cur_depth, open_token, close_token): DCNL  DCSP num_open = token.count(open_token) DCNL DCSP num_close = token.count(close_token) DCNL DCSP if (num_open != num_close): DCNL DCSP  DCSP cur_depth += (num_open - num_close) DCNL DCSP  DCSP if (cur_depth < 0): DCNL DCSP  DCSP  DCSP cur_depth = 0 DCNL DCSP return cur_depth
def split_args(args): DCNL  DCSP params = [] DCNL DCSP args = args.strip() DCNL DCSP try: DCNL DCSP  DCSP args = args.encode('utf-8') DCNL DCSP  DCSP do_decode = True DCNL DCSP except UnicodeDecodeError: DCNL DCSP  DCSP do_decode = False DCNL DCSP items = args.split('\n') DCNL DCSP quote_char = None DCNL DCSP inside_quotes = False DCNL DCSP print_depth = 0 DCNL DCSP block_depth = 0 DCNL DCSP comment_depth = 0 DCNL DCSP for (itemidx, item) in enumerate(items): DCNL DCSP  DCSP tokens = item.strip().split(' DCSP ') DCNL DCSP  DCSP line_continuation = False DCNL DCSP  DCSP for (idx, token) in enumerate(tokens): DCNL DCSP  DCSP  DCSP if ((token == '\\') and (not inside_quotes)): DCNL DCSP  DCSP  DCSP  DCSP line_continuation = True DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP was_inside_quotes = inside_quotes DCNL DCSP  DCSP  DCSP quote_char = _get_quote_state(token, quote_char) DCNL DCSP  DCSP  DCSP inside_quotes = (quote_char is not None) DCNL DCSP  DCSP  DCSP appended = False DCNL DCSP  DCSP  DCSP if (inside_quotes and (not was_inside_quotes)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP elif (print_depth or block_depth or comment_depth or inside_quotes or was_inside_quotes): DCNL DCSP  DCSP  DCSP  DCSP if ((idx == 0) and (not inside_quotes) and was_inside_quotes): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s%s' % (params[(-1)], token)) DCNL DCSP  DCSP  DCSP  DCSP elif (len(tokens) > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP spacer = '' DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (idx > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP spacer = ' DCSP ' DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s%s%s' % (params[(-1)], spacer, token)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP spacer = '' DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((not params[(-1)].endswith('\n')) and (idx == 0)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP spacer = '\n' DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s%s%s' % (params[(-1)], spacer, token)) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_print_depth = print_depth DCNL DCSP  DCSP  DCSP print_depth = _count_jinja2_blocks(token, print_depth, '{{', '}}') DCNL DCSP  DCSP  DCSP if ((print_depth != prev_print_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_block_depth = block_depth DCNL DCSP  DCSP  DCSP block_depth = _count_jinja2_blocks(token, block_depth, '{%', '%}') DCNL DCSP  DCSP  DCSP if ((block_depth != prev_block_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_comment_depth = comment_depth DCNL DCSP  DCSP  DCSP comment_depth = _count_jinja2_blocks(token, comment_depth, '{#', '#}') DCNL DCSP  DCSP  DCSP if ((comment_depth != prev_comment_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP if ((not (print_depth or block_depth or comment_depth)) and (not inside_quotes) and (not appended) and (token != '')): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP if ((len(items) > 1) and (itemidx != (len(items) - 1)) and (not line_continuation)): DCNL DCSP  DCSP  DCSP if ((not params[(-1)].endswith('\n')) or (item == '')): DCNL DCSP  DCSP  DCSP  DCSP params[(-1)] += '\n' DCNL DCSP  DCSP line_continuation = False DCNL DCSP if (print_depth or block_depth or comment_depth or inside_quotes): DCNL DCSP  DCSP raise Exception('error DCSP while DCSP splitting DCSP arguments, DCSP either DCSP an DCSP unbalanced DCSP jinja2 DCSP block DCSP or DCSP quotes') DCNL DCSP if do_decode: DCNL DCSP  DCSP params = [x.decode('utf-8') for x in params] DCNL DCSP return params
def unquote(data): DCNL  DCSP if is_quoted(data): DCNL DCSP  DCSP return data[1:(-1)] DCNL DCSP return data
def _botocore_exception_maybe(): DCNL  DCSP if HAS_BOTO3: DCNL DCSP  DCSP return botocore.exceptions.ClientError DCNL DCSP return type(None)
def get_ec2_creds(module): DCNL  DCSP (region, ec2_url, boto_params) = get_aws_connection_info(module) DCNL DCSP return (ec2_url, boto_params['aws_access_key_id'], boto_params['aws_secret_access_key'], region)
def boto_fix_security_token_in_profile(conn, profile_name): DCNL  DCSP profile = ('profile DCSP ' + profile_name) DCNL DCSP if boto.config.has_option(profile, 'aws_security_token'): DCNL DCSP  DCSP conn.provider.set_security_token(boto.config.get(profile, 'aws_security_token')) DCNL DCSP return conn
def ec2_connect(module): DCNL  DCSP (region, ec2_url, boto_params) = get_aws_connection_info(module) DCNL DCSP if region: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP ec2 = connect_to_aws(boto.ec2, region, **boto_params) DCNL DCSP  DCSP except (boto.exception.NoAuthHandlerFound, AnsibleAWSError) as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP elif ec2_url: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP ec2 = boto.connect_ec2_endpoint(ec2_url, **boto_params) DCNL DCSP  DCSP except (boto.exception.NoAuthHandlerFound, AnsibleAWSError) as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='Either DCSP region DCSP or DCSP ec2_url DCSP must DCSP be DCSP specified') DCNL DCSP return ec2
def paging(pause=0, marker_property='marker'): DCNL  DCSP def wrapper(f): DCNL DCSP  DCSP def page(*args, **kwargs): DCNL DCSP  DCSP  DCSP results = [] DCNL DCSP  DCSP  DCSP marker = None DCNL DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new = f(marker=marker, *args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP  DCSP marker = getattr(new, marker_property) DCNL DCSP  DCSP  DCSP  DCSP  DCSP results.extend(new) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not marker): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif pause: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP sleep(pause) DCNL DCSP  DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP results = f(*args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP return results DCNL DCSP  DCSP return page DCNL DCSP return wrapper
def ansible_dict_to_boto3_filter_list(filters_dict): DCNL  DCSP filters_list = [] DCNL DCSP for (k, v) in filters_dict.items(): DCNL DCSP  DCSP filter_dict = {'Name': k} DCNL DCSP  DCSP if isinstance(v, string_types): DCNL DCSP  DCSP  DCSP filter_dict['Values'] = [v] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP filter_dict['Values'] = v DCNL DCSP  DCSP filters_list.append(filter_dict) DCNL DCSP return filters_list
def boto3_tag_list_to_ansible_dict(tags_list): DCNL  DCSP tags_dict = {} DCNL DCSP for tag in tags_list: DCNL DCSP  DCSP if ('key' in tag): DCNL DCSP  DCSP  DCSP tags_dict[tag['key']] = tag['value'] DCNL DCSP  DCSP elif ('Key' in tag): DCNL DCSP  DCSP  DCSP tags_dict[tag['Key']] = tag['Value'] DCNL DCSP return tags_dict
def ansible_dict_to_boto3_tag_list(tags_dict): DCNL  DCSP tags_list = [] DCNL DCSP for (k, v) in tags_dict.items(): DCNL DCSP  DCSP tags_list.append({'Key': k, 'Value': v}) DCNL DCSP return tags_list
def get_ec2_security_group_ids_from_names(sec_group_list, ec2_connection, vpc_id=None, boto3=True): DCNL  DCSP def get_sg_name(sg, boto3): DCNL DCSP  DCSP if boto3: DCNL DCSP  DCSP  DCSP return sg['GroupName'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return sg.name DCNL DCSP def get_sg_id(sg, boto3): DCNL DCSP  DCSP if boto3: DCNL DCSP  DCSP  DCSP return sg['GroupId'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return sg.id DCNL DCSP sec_group_id_list = [] DCNL DCSP if isinstance(sec_group_list, string_types): DCNL DCSP  DCSP sec_group_list = [sec_group_list] DCNL DCSP if boto3: DCNL DCSP  DCSP if vpc_id: DCNL DCSP  DCSP  DCSP filters = [{'Name': 'vpc-id', 'Values': [vpc_id]}] DCNL DCSP  DCSP  DCSP all_sec_groups = ec2_connection.describe_security_groups(Filters=filters)['SecurityGroups'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP all_sec_groups = ec2_connection.describe_security_groups()['SecurityGroups'] DCNL DCSP elif vpc_id: DCNL DCSP  DCSP filters = {'vpc-id': vpc_id} DCNL DCSP  DCSP all_sec_groups = ec2_connection.get_all_security_groups(filters=filters) DCNL DCSP else: DCNL DCSP  DCSP all_sec_groups = ec2_connection.get_all_security_groups() DCNL DCSP unmatched = set(sec_group_list).difference((str(get_sg_name(all_sg, boto3)) for all_sg in all_sec_groups)) DCNL DCSP sec_group_name_list = list((set(sec_group_list) - set(unmatched))) DCNL DCSP if (len(unmatched) > 0): DCNL DCSP  DCSP import re DCNL DCSP  DCSP sec_group_id_list[:] = [sg for sg in unmatched if re.match('sg-[a-fA-F0-9]+$', sg)] DCNL DCSP  DCSP still_unmatched = [sg for sg in unmatched if (not re.match('sg-[a-fA-F0-9]+$', sg))] DCNL DCSP  DCSP if (len(still_unmatched) > 0): DCNL DCSP  DCSP  DCSP raise ValueError(('The DCSP following DCSP group DCSP names DCSP are DCSP not DCSP valid: DCSP %s' % ', DCSP '.join(still_unmatched))) DCNL DCSP sec_group_id_list += [str(get_sg_id(all_sg, boto3)) for all_sg in all_sec_groups if (str(get_sg_name(all_sg, boto3)) in sec_group_name_list)] DCNL DCSP return sec_group_id_list
def sort_json_policy_dict(policy_dict): DCNL  DCSP def value_is_list(my_list): DCNL DCSP  DCSP checked_list = [] DCNL DCSP  DCSP for item in my_list: DCNL DCSP  DCSP  DCSP if isinstance(item, dict): DCNL DCSP  DCSP  DCSP  DCSP checked_list.append(sort_json_policy_dict(item)) DCNL DCSP  DCSP  DCSP elif isinstance(item, list): DCNL DCSP  DCSP  DCSP  DCSP checked_list.append(value_is_list(item)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP checked_list.append(item) DCNL DCSP  DCSP checked_list.sort() DCNL DCSP  DCSP return checked_list DCNL DCSP ordered_policy_dict = {} DCNL DCSP for (key, value) in policy_dict.items(): DCNL DCSP  DCSP if isinstance(value, dict): DCNL DCSP  DCSP  DCSP ordered_policy_dict[key] = sort_json_policy_dict(value) DCNL DCSP  DCSP elif isinstance(value, list): DCNL DCSP  DCSP  DCSP ordered_policy_dict[key] = value_is_list(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ordered_policy_dict[key] = value DCNL DCSP return ordered_policy_dict
def ismount(path): DCNL  DCSP try: DCNL DCSP  DCSP s1 = os.lstat(path) DCNL DCSP except OSError: DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP if os.path.stat.S_ISLNK(s1.st_mode): DCNL DCSP  DCSP  DCSP return False DCNL DCSP parent = os.path.join(path, os.path.pardir) DCNL DCSP parent = os.path.realpath(parent) DCNL DCSP try: DCNL DCSP  DCSP s2 = os.lstat(parent) DCNL DCSP except OSError: DCNL DCSP  DCSP return False DCNL DCSP if (s1.st_dev != s2.st_dev): DCNL DCSP  DCSP return True DCNL DCSP if (s1.st_ino == s2.st_ino): DCNL DCSP  DCSP return True DCNL DCSP return False
def rax_slugify(value): DCNL  DCSP return ('rax_%s' % re.sub('[^\\w-]', '_', value).lower().lstrip('_'))
def rax_clb_node_to_dict(obj): DCNL  DCSP if (not obj): DCNL DCSP  DCSP return {} DCNL DCSP node = obj.to_dict() DCNL DCSP node['id'] = obj.id DCNL DCSP node['weight'] = obj.weight DCNL DCSP return node
def rax_to_dict(obj, obj_type='standard'): DCNL  DCSP instance = {} DCNL DCSP for key in dir(obj): DCNL DCSP  DCSP value = getattr(obj, key) DCNL DCSP  DCSP if ((obj_type == 'clb') and (key == 'nodes')): DCNL DCSP  DCSP  DCSP instance[key] = [] DCNL DCSP  DCSP  DCSP for node in value: DCNL DCSP  DCSP  DCSP  DCSP instance[key].append(rax_clb_node_to_dict(node)) DCNL DCSP  DCSP elif (isinstance(value, list) and (len(value) > 0) and (not isinstance(value[0], NON_CALLABLES))): DCNL DCSP  DCSP  DCSP instance[key] = [] DCNL DCSP  DCSP  DCSP for item in value: DCNL DCSP  DCSP  DCSP  DCSP instance[key].append(rax_to_dict(item)) DCNL DCSP  DCSP elif (isinstance(value, NON_CALLABLES) and (not key.startswith('_'))): DCNL DCSP  DCSP  DCSP if (obj_type == 'server'): DCNL DCSP  DCSP  DCSP  DCSP if (key == 'image'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not value): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP instance['rax_boot_source'] = 'volume' DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP instance['rax_boot_source'] = 'local' DCNL DCSP  DCSP  DCSP  DCSP key = rax_slugify(key) DCNL DCSP  DCSP  DCSP instance[key] = value DCNL DCSP if (obj_type == 'server'): DCNL DCSP  DCSP for attr in ['id', 'accessIPv4', 'name', 'status']: DCNL DCSP  DCSP  DCSP instance[attr] = instance.get(rax_slugify(attr)) DCNL DCSP return instance
def rax_find_bootable_volume(module, rax_module, server, exit=True): DCNL  DCSP cs = rax_module.cloudservers DCNL DCSP cbs = rax_module.cloud_blockstorage DCNL DCSP server_id = rax_module.utils.get_id(server) DCNL DCSP volumes = cs.volumes.get_server_volumes(server_id) DCNL DCSP bootable_volumes = [] DCNL DCSP for volume in volumes: DCNL DCSP  DCSP vol = cbs.get(volume) DCNL DCSP  DCSP if module.boolean(vol.bootable): DCNL DCSP  DCSP  DCSP bootable_volumes.append(vol) DCNL DCSP if (not bootable_volumes): DCNL DCSP  DCSP if exit: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('No DCSP bootable DCSP volumes DCSP could DCSP be DCSP found DCSP for DCSP server DCSP %s' % server_id)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return False DCNL DCSP elif (len(bootable_volumes) > 1): DCNL DCSP  DCSP if exit: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Multiple DCSP bootable DCSP volumes DCSP found DCSP for DCSP server DCSP %s' % server_id)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return False DCNL DCSP return bootable_volumes[0]
def rax_find_image(module, rax_module, image, exit=True): DCNL  DCSP cs = rax_module.cloudservers DCNL DCSP try: DCNL DCSP  DCSP UUID(image) DCNL DCSP except ValueError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP image = cs.images.find(human_id=image) DCNL DCSP  DCSP except (cs.exceptions.NotFound, cs.exceptions.NoUniqueMatch): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP image = cs.images.find(name=image) DCNL DCSP  DCSP  DCSP except (cs.exceptions.NotFound, cs.exceptions.NoUniqueMatch): DCNL DCSP  DCSP  DCSP  DCSP if exit: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('No DCSP matching DCSP image DCSP found DCSP (%s)' % image)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return rax_module.utils.get_id(image)
def rax_find_volume(module, rax_module, name): DCNL  DCSP cbs = rax_module.cloud_blockstorage DCNL DCSP try: DCNL DCSP  DCSP UUID(name) DCNL DCSP  DCSP volume = cbs.get(name) DCNL DCSP except ValueError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP volume = cbs.find(name=name) DCNL DCSP  DCSP except rax_module.exc.NotFound: DCNL DCSP  DCSP  DCSP volume = None DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e)) DCNL DCSP return volume
def rax_find_network(module, rax_module, network): DCNL  DCSP cnw = rax_module.cloud_networks DCNL DCSP try: DCNL DCSP  DCSP UUID(network) DCNL DCSP except ValueError: DCNL DCSP  DCSP if (network.lower() == 'public'): DCNL DCSP  DCSP  DCSP return cnw.get_server_networks(PUBLIC_NET_ID) DCNL DCSP  DCSP elif (network.lower() == 'private'): DCNL DCSP  DCSP  DCSP return cnw.get_server_networks(SERVICE_NET_ID) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP network_obj = cnw.find_network_by_label(network) DCNL DCSP  DCSP  DCSP except (rax_module.exceptions.NetworkNotFound, rax_module.exceptions.NetworkLabelNotUnique): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('No DCSP matching DCSP network DCSP found DCSP (%s)' % network)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return cnw.get_server_networks(network_obj) DCNL DCSP else: DCNL DCSP  DCSP return cnw.get_server_networks(network)
def rax_find_server(module, rax_module, server): DCNL  DCSP cs = rax_module.cloudservers DCNL DCSP try: DCNL DCSP  DCSP UUID(server) DCNL DCSP  DCSP server = cs.servers.get(server) DCNL DCSP except ValueError: DCNL DCSP  DCSP servers = cs.servers.list(search_opts=dict(name=('^%s$' % server))) DCNL DCSP  DCSP if (not servers): DCNL DCSP  DCSP  DCSP module.fail_json(msg='No DCSP Server DCSP was DCSP matched DCSP by DCSP name, DCSP try DCSP using DCSP the DCSP Server DCSP ID DCSP instead') DCNL DCSP  DCSP if (len(servers) > 1): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Multiple DCSP servers DCSP matched DCSP by DCSP name, DCSP try DCSP using DCSP the DCSP Server DCSP ID DCSP instead') DCNL DCSP  DCSP server = servers[0] DCNL DCSP return server
def rax_find_loadbalancer(module, rax_module, loadbalancer): DCNL  DCSP clb = rax_module.cloud_loadbalancers DCNL DCSP try: DCNL DCSP  DCSP found = clb.get(loadbalancer) DCNL DCSP except: DCNL DCSP  DCSP found = [] DCNL DCSP  DCSP for lb in clb.list(): DCNL DCSP  DCSP  DCSP if (loadbalancer == lb.name): DCNL DCSP  DCSP  DCSP  DCSP found.append(lb) DCNL DCSP  DCSP if (not found): DCNL DCSP  DCSP  DCSP module.fail_json(msg='No DCSP loadbalancer DCSP was DCSP matched') DCNL DCSP  DCSP if (len(found) > 1): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Multiple DCSP loadbalancers DCSP matched') DCNL DCSP  DCSP found = found[0] DCNL DCSP return found
def rax_argument_spec(): DCNL  DCSP return dict(api_key=dict(type='str', aliases=['password'], no_log=True), auth_endpoint=dict(type='str'), credentials=dict(type='str', aliases=['creds_file']), env=dict(type='str'), identity_type=dict(type='str', default='rackspace'), region=dict(type='str'), tenant_id=dict(type='str'), tenant_name=dict(type='str'), username=dict(type='str'), verify_ssl=dict(choices=BOOLEANS, type='bool'))
def rax_required_together(): DCNL  DCSP return [['api_key', 'username']]
def setup_rax_module(module, rax_module, region_required=True): DCNL  DCSP rax_module.USER_AGENT = ('ansible/%s DCSP %s' % (module.ansible_version, rax_module.USER_AGENT)) DCNL DCSP api_key = module.params.get('api_key') DCNL DCSP auth_endpoint = module.params.get('auth_endpoint') DCNL DCSP credentials = module.params.get('credentials') DCNL DCSP env = module.params.get('env') DCNL DCSP identity_type = module.params.get('identity_type') DCNL DCSP region = module.params.get('region') DCNL DCSP tenant_id = module.params.get('tenant_id') DCNL DCSP tenant_name = module.params.get('tenant_name') DCNL DCSP username = module.params.get('username') DCNL DCSP verify_ssl = module.params.get('verify_ssl') DCNL DCSP if (env is not None): DCNL DCSP  DCSP rax_module.set_environment(env) DCNL DCSP rax_module.set_setting('identity_type', identity_type) DCNL DCSP if (verify_ssl is not None): DCNL DCSP  DCSP rax_module.set_setting('verify_ssl', verify_ssl) DCNL DCSP if (auth_endpoint is not None): DCNL DCSP  DCSP rax_module.set_setting('auth_endpoint', auth_endpoint) DCNL DCSP if (tenant_id is not None): DCNL DCSP  DCSP rax_module.set_setting('tenant_id', tenant_id) DCNL DCSP if (tenant_name is not None): DCNL DCSP  DCSP rax_module.set_setting('tenant_name', tenant_name) DCNL DCSP try: DCNL DCSP  DCSP username = (username or os.environ.get('RAX_USERNAME')) DCNL DCSP  DCSP if (not username): DCNL DCSP  DCSP  DCSP username = rax_module.get_setting('keyring_username') DCNL DCSP  DCSP  DCSP if username: DCNL DCSP  DCSP  DCSP  DCSP api_key = 'USE_KEYRING' DCNL DCSP  DCSP if (not api_key): DCNL DCSP  DCSP  DCSP api_key = os.environ.get('RAX_API_KEY') DCNL DCSP  DCSP credentials = (credentials or os.environ.get('RAX_CREDENTIALS') or os.environ.get('RAX_CREDS_FILE')) DCNL DCSP  DCSP region = (region or os.environ.get('RAX_REGION') or rax_module.get_setting('region')) DCNL DCSP except KeyError as e: DCNL DCSP  DCSP module.fail_json(msg=('Unable DCSP to DCSP load DCSP %s' % e.message)) DCNL DCSP try: DCNL DCSP  DCSP if (api_key and username): DCNL DCSP  DCSP  DCSP if (api_key == 'USE_KEYRING'): DCNL DCSP  DCSP  DCSP  DCSP rax_module.keyring_auth(username, region=region) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP rax_module.set_credentials(username, api_key=api_key, region=region) DCNL DCSP  DCSP elif credentials: DCNL DCSP  DCSP  DCSP credentials = os.path.expanduser(credentials) DCNL DCSP  DCSP  DCSP rax_module.set_credential_file(credentials, region=region) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise Exception('No DCSP credentials DCSP supplied!') DCNL DCSP except Exception as e: DCNL DCSP  DCSP if e.message: DCNL DCSP  DCSP  DCSP msg = str(e.message) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP msg = repr(e) DCNL DCSP  DCSP module.fail_json(msg=msg) DCNL DCSP if (region_required and (region not in rax_module.regions)): DCNL DCSP  DCSP module.fail_json(msg=('%s DCSP is DCSP not DCSP a DCSP valid DCSP region, DCSP must DCSP be DCSP one DCSP of: DCSP %s' % (region, ','.join(rax_module.regions)))) DCNL DCSP return rax_module
def ce_unknown_host_cb(host, fingerprint): DCNL  DCSP return True
def get_netconf(**kwargs): DCNL  DCSP return Netconf(**kwargs)
def prepare_config(commands): DCNL  DCSP prepared = list() DCNL DCSP prepared.extend(to_list(commands)) DCNL DCSP prepared.append('return') DCNL DCSP return prepared
def prepare_commands(commands): DCNL  DCSP jsonify = (lambda x: ('%s DCSP | DCSP json' % x)) DCNL DCSP for cmd in to_list(commands): DCNL DCSP  DCSP if (cmd.output == 'json'): DCNL DCSP  DCSP  DCSP cmd.command_string = jsonify(cmd) DCNL DCSP  DCSP if cmd.command.endswith('| DCSP json'): DCNL DCSP  DCSP  DCSP cmd.output = 'json' DCNL DCSP  DCSP (yield cmd)
def axapi_call(module, url, post=None): DCNL  DCSP (rsp, info) = fetch_url(module, url, data=post) DCNL DCSP if ((not rsp) or (info['status'] >= 400)): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP connect DCSP (status DCSP code DCSP %s), DCSP error DCSP was DCSP %s' % (info['status'], info.get('msg', 'no DCSP error DCSP given')))) DCNL DCSP try: DCNL DCSP  DCSP raw_data = rsp.read() DCNL DCSP  DCSP data = json.loads(raw_data) DCNL DCSP except ValueError: DCNL DCSP  DCSP if ('status="ok"' in raw_data.lower()): DCNL DCSP  DCSP  DCSP data = {'response': {'status': 'OK'}} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP data = {'response': {'status': 'fail', 'err': {'msg': raw_data}}} DCNL DCSP except: DCNL DCSP  DCSP module.fail_json(msg='could DCSP not DCSP read DCSP the DCSP result DCSP from DCSP the DCSP host') DCNL DCSP finally: DCNL DCSP  DCSP rsp.close() DCNL DCSP return data
def axapi_call_v3(module, url, method=None, body=None, signature=None): DCNL  DCSP if signature: DCNL DCSP  DCSP headers = {'content-type': 'application/json', 'Authorization': ('A10 DCSP %s' % signature)} DCNL DCSP else: DCNL DCSP  DCSP headers = {'content-type': 'application/json'} DCNL DCSP (rsp, info) = fetch_url(module, url, method=method, data=body, headers=headers) DCNL DCSP if ((not rsp) or (info['status'] >= 400)): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP connect DCSP (status DCSP code DCSP %s), DCSP error DCSP was DCSP %s' % (info['status'], info.get('msg', 'no DCSP error DCSP given')))) DCNL DCSP try: DCNL DCSP  DCSP raw_data = rsp.read() DCNL DCSP  DCSP data = json.loads(raw_data) DCNL DCSP except ValueError: DCNL DCSP  DCSP if ('status="ok"' in raw_data.lower()): DCNL DCSP  DCSP  DCSP data = {'response': {'status': 'OK'}} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP data = {'response': {'status': 'fail', 'err': {'msg': raw_data}}} DCNL DCSP except: DCNL DCSP  DCSP module.fail_json(msg='could DCSP not DCSP read DCSP the DCSP result DCSP from DCSP the DCSP host') DCNL DCSP finally: DCNL DCSP  DCSP rsp.close() DCNL DCSP return data
def axapi_enabled_disabled(flag): DCNL  DCSP if (flag == 'enabled'): DCNL DCSP  DCSP return 1 DCNL DCSP else: DCNL DCSP  DCSP return 0
def _filter_non_json_lines(data): DCNL  DCSP warnings = [] DCNL DCSP lines = data.splitlines() DCNL DCSP for (start, line) in enumerate(lines): DCNL DCSP  DCSP line = line.strip() DCNL DCSP  DCSP if line.startswith(u'{'): DCNL DCSP  DCSP  DCSP endchar = u'}' DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif line.startswith(u'['): DCNL DCSP  DCSP  DCSP endchar = u']' DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('No DCSP start DCSP of DCSP json DCSP char DCSP found') DCNL DCSP lines = lines[start:] DCNL DCSP for (reverse_end_offset, line) in enumerate(reversed(lines)): DCNL DCSP  DCSP if line.strip().endswith(endchar): DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('No DCSP end DCSP of DCSP json DCSP char DCSP found') DCNL DCSP if (reverse_end_offset > 0): DCNL DCSP  DCSP trailing_junk = lines[(len(lines) - reverse_end_offset):] DCNL DCSP  DCSP for line in trailing_junk: DCNL DCSP  DCSP  DCSP if line.strip(): DCNL DCSP  DCSP  DCSP  DCSP warnings.append(('Module DCSP invocation DCSP had DCSP junk DCSP after DCSP the DCSP JSON DCSP data: DCSP %s' % '\n'.join(trailing_junk))) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP lines = lines[:(len(lines) - reverse_end_offset)] DCNL DCSP return ('\n'.join(lines), warnings)
def add_git_host_key(module, url, accept_hostkey=True, create_dir=True): DCNL  DCSP if is_ssh_url(url): DCNL DCSP  DCSP fqdn = get_fqdn(url) DCNL DCSP  DCSP if fqdn: DCNL DCSP  DCSP  DCSP known_host = check_hostkey(module, fqdn) DCNL DCSP  DCSP  DCSP if (not known_host): DCNL DCSP  DCSP  DCSP  DCSP if accept_hostkey: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (rc, out, err) = add_host_key(module, fqdn, create_dir=create_dir) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP add DCSP %s DCSP hostkey: DCSP %s' % (fqdn, (out + err)))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s DCSP has DCSP an DCSP unknown DCSP hostkey. DCSP Set DCSP accept_hostkey DCSP to DCSP True DCSP or DCSP manually DCSP add DCSP the DCSP hostkey DCSP prior DCSP to DCSP running DCSP the DCSP git DCSP module' % fqdn))
def is_ssh_url(url): DCNL  DCSP if (('@' in url) and ('://' not in url)): DCNL DCSP  DCSP return True DCNL DCSP for scheme in ('ssh://', 'git+ssh://', 'ssh+git://'): DCNL DCSP  DCSP if url.startswith(scheme): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def get_fqdn(repo_url): DCNL  DCSP result = None DCNL DCSP if (('@' in repo_url) and ('://' not in repo_url)): DCNL DCSP  DCSP repo_url = repo_url.split('@', 1)[1] DCNL DCSP  DCSP if repo_url.startswith('['): DCNL DCSP  DCSP  DCSP result = (repo_url.split(']', 1)[0] + ']') DCNL DCSP  DCSP elif (':' in repo_url): DCNL DCSP  DCSP  DCSP result = repo_url.split(':')[0] DCNL DCSP  DCSP elif ('/' in repo_url): DCNL DCSP  DCSP  DCSP result = repo_url.split('/')[0] DCNL DCSP elif ('://' in repo_url): DCNL DCSP  DCSP parts = urlparse.urlparse(repo_url) DCNL DCSP  DCSP if (parts[1] != ''): DCNL DCSP  DCSP  DCSP result = parts[1] DCNL DCSP  DCSP  DCSP if ('@' in result): DCNL DCSP  DCSP  DCSP  DCSP result = result.split('@', 1)[1] DCNL DCSP  DCSP  DCSP if result[0].startswith('['): DCNL DCSP  DCSP  DCSP  DCSP result = (result.split(']', 1)[0] + ']') DCNL DCSP  DCSP  DCSP elif (':' in result): DCNL DCSP  DCSP  DCSP  DCSP result = result.split(':')[0] DCNL DCSP return result
def add_host_key(module, fqdn, key_type='rsa', create_dir=False): DCNL  DCSP keyscan_cmd = module.get_bin_path('ssh-keyscan', True) DCNL DCSP if ('USER' in os.environ): DCNL DCSP  DCSP user_ssh_dir = os.path.expandvars('~${USER}/.ssh/') DCNL DCSP  DCSP user_host_file = os.path.expandvars('~${USER}/.ssh/known_hosts') DCNL DCSP else: DCNL DCSP  DCSP user_ssh_dir = '~/.ssh/' DCNL DCSP  DCSP user_host_file = '~/.ssh/known_hosts' DCNL DCSP user_ssh_dir = os.path.expanduser(user_ssh_dir) DCNL DCSP if (not os.path.exists(user_ssh_dir)): DCNL DCSP  DCSP if create_dir: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP os.makedirs(user_ssh_dir, int('700', 8)) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP host DCSP key DCSP directory: DCSP %s' % user_ssh_dir)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s DCSP does DCSP not DCSP exist' % user_ssh_dir)) DCNL DCSP elif (not os.path.isdir(user_ssh_dir)): DCNL DCSP  DCSP module.fail_json(msg=('%s DCSP is DCSP not DCSP a DCSP directory' % user_ssh_dir)) DCNL DCSP this_cmd = ('%s DCSP -t DCSP %s DCSP %s' % (keyscan_cmd, key_type, fqdn)) DCNL DCSP (rc, out, err) = module.run_command(this_cmd) DCNL DCSP if ((rc != 0) or (not out)): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP get DCSP the DCSP hostkey DCSP for DCSP %s' % fqdn)) DCNL DCSP module.append_to_file(user_host_file, out) DCNL DCSP return (rc, out, err)
def get_file_lines(path): DCNL  DCSP data = get_file_content(path) DCNL DCSP if data: DCNL DCSP  DCSP ret = data.splitlines() DCNL DCSP else: DCNL DCSP  DCSP ret = [] DCNL DCSP return ret
def api_wrapper(func): DCNL  DCSP @wraps(func) DCNL DCSP def __wrapper(*args, **kwargs): DCNL DCSP  DCSP module = args[0] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return func(*args, **kwargs) DCNL DCSP  DCSP except core.exceptions.APICommandException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP except core.exceptions.SystemNotFoundException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise DCNL DCSP return __wrapper
@api_wrapper DCNL def get_system(module): DCNL  DCSP box = module.params['system'] DCNL DCSP user = module.params.get('user', None) DCNL DCSP password = module.params.get('password', None) DCNL DCSP if (user and password): DCNL DCSP  DCSP system = InfiniBox(box, auth=(user, password)) DCNL DCSP elif (environ.get('INFINIBOX_USER') and environ.get('INFINIBOX_PASSWORD')): DCNL DCSP  DCSP system = InfiniBox(box, auth=(environ.get('INFINIBOX_USER'), environ.get('INFINIBOX_PASSWORD'))) DCNL DCSP elif path.isfile((path.expanduser('~') + '/.infinidat/infinisdk.ini')): DCNL DCSP  DCSP system = InfiniBox(box) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='You DCSP must DCSP set DCSP INFINIBOX_USER DCSP and DCSP INFINIBOX_PASSWORD DCSP environment DCSP variables DCSP or DCSP set DCSP username/password DCSP module DCSP arguments') DCNL DCSP try: DCNL DCSP  DCSP system.login() DCNL DCSP except Exception: DCNL DCSP  DCSP module.fail_json(msg='Infinibox DCSP authentication DCSP failed. DCSP Check DCSP your DCSP credentials') DCNL DCSP return system
def infinibox_argument_spec(): DCNL  DCSP return dict(system=dict(required=True), user=dict(), password=dict(no_log=True))
def infinibox_required_together(): DCNL  DCSP return [['user', 'password']]
def check_libcloud_or_fail(): DCNL  DCSP if (not HAS_LIBCLOUD): DCNL DCSP  DCSP raise LibcloudNotFound('apache-libcloud DCSP is DCSP required.')
def get_credentials(module): DCNL  DCSP if (not HAS_LIBCLOUD): DCNL DCSP  DCSP module.fail_json(msg='libcloud DCSP is DCSP required DCSP for DCSP this DCSP module.') DCNL DCSP  DCSP return None DCNL DCSP user_id = None DCNL DCSP key = None DCNL DCSP if ('mcp_user' in module.params): DCNL DCSP  DCSP if ('mcp_password' not in module.params): DCNL DCSP  DCSP  DCSP module.fail_json(('"mcp_user" DCSP parameter DCSP was DCSP specified, DCSP but DCSP not DCSP "mcp_password" DCSP ' + '(either DCSP both DCSP must DCSP be DCSP specified, DCSP or DCSP neither).')) DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP user_id = module.params['mcp_user'] DCNL DCSP  DCSP key = module.params['mcp_password'] DCNL DCSP if ((not user_id) or (not key)): DCNL DCSP  DCSP user_id = os.environ.get('MCP_USER', None) DCNL DCSP  DCSP key = os.environ.get('MCP_PASSWORD', None) DCNL DCSP if ((not user_id) or (not key)): DCNL DCSP  DCSP home = expanduser('~') DCNL DCSP  DCSP config = ConfigParser.RawConfigParser() DCNL DCSP  DCSP config.read(('%s/.dimensiondata' % home)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user_id = config.get('dimensiondatacloud', 'MCP_USER') DCNL DCSP  DCSP  DCSP key = config.get('dimensiondatacloud', 'MCP_PASSWORD') DCNL DCSP  DCSP except (ConfigParser.NoSectionError, ConfigParser.NoOptionError): DCNL DCSP  DCSP  DCSP pass DCNL DCSP if (not user_id): DCNL DCSP  DCSP raise MissingCredentialsError('Dimension DCSP Data DCSP user DCSP id DCSP not DCSP found') DCNL DCSP elif (not key): DCNL DCSP  DCSP raise MissingCredentialsError('Dimension DCSP Data DCSP key DCSP not DCSP found') DCNL DCSP return dict(user_id=user_id, key=key)
def get_dd_regions(): DCNL  DCSP check_libcloud_or_fail() DCNL DCSP all_regions = API_ENDPOINTS.keys() DCNL DCSP regions = [region[3:] for region in all_regions if region.startswith('dd-')] DCNL DCSP return regions
def get_network_domain_by_name(driver, name, location): DCNL  DCSP networks = driver.ex_list_network_domains(location=location) DCNL DCSP found_networks = [network for network in networks if (network.name == name)] DCNL DCSP if (not found_networks): DCNL DCSP  DCSP raise UnknownNetworkError(("Network DCSP '%s' DCSP could DCSP not DCSP be DCSP found" % name)) DCNL DCSP return found_networks[0]
def get_network_domain(driver, locator, location): DCNL  DCSP if is_uuid(locator): DCNL DCSP  DCSP net_id = locator DCNL DCSP else: DCNL DCSP  DCSP name = locator DCNL DCSP  DCSP networks = driver.ex_list_network_domains(location=location) DCNL DCSP  DCSP found_networks = [network for network in networks if (network.name == name)] DCNL DCSP  DCSP if (not found_networks): DCNL DCSP  DCSP  DCSP raise UnknownNetworkError(("Network DCSP '%s' DCSP could DCSP not DCSP be DCSP found" % name)) DCNL DCSP  DCSP net_id = found_networks[0].id DCNL DCSP return driver.ex_get_network_domain(net_id)
def get_vlan(driver, locator, location, network_domain): DCNL  DCSP if is_uuid(locator): DCNL DCSP  DCSP vlan_id = locator DCNL DCSP else: DCNL DCSP  DCSP vlans = driver.ex_list_vlans(location=location, network_domain=network_domain) DCNL DCSP  DCSP found_vlans = [vlan for vlan in vlans if (vlan.name == locator)] DCNL DCSP  DCSP if (not found_vlans): DCNL DCSP  DCSP  DCSP raise UnknownVLANError(("VLAN DCSP '%s' DCSP could DCSP not DCSP be DCSP found" % locator)) DCNL DCSP  DCSP vlan_id = found_vlans[0].id DCNL DCSP return driver.ex_get_vlan(vlan_id)
def get_mcp_version(driver, location): DCNL  DCSP location = driver.ex_get_location_by_id(location) DCNL DCSP if ('MCP DCSP 2.0' in location.name): DCNL DCSP  DCSP return '2.0' DCNL DCSP return '1.0'
def is_uuid(u, version=4): DCNL  DCSP try: DCNL DCSP  DCSP uuid_obj = UUID(u, version=version) DCNL DCSP  DCSP return (str(uuid_obj) == u) DCNL DCSP except: DCNL DCSP  DCSP return False
def expand_ip_block(block): DCNL  DCSP addresses = [] DCNL DCSP ip_r = block.base_ip.split('.') DCNL DCSP last_quad = int(ip_r[3]) DCNL DCSP address_root = ('%s.%s.%s.' % (ip_r[0], ip_r[1], ip_r[2])) DCNL DCSP for i in range(int(block.size)): DCNL DCSP  DCSP addresses.append((address_root + str((last_quad + i)))) DCNL DCSP return addresses
def get_public_ip_block(module, driver, network_domain, block_id=False, base_ip=False): DCNL  DCSP if (block_id is not False): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP block = driver.ex_get_public_ip_block(block_id) DCNL DCSP  DCSP except DimensionDataAPIException: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP if ((e.code == 'RESOURCE_NOT_FOUND') or (e.code == 'UNEXPECTED_ERROR')): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=False, msg='Public DCSP IP DCSP Block DCSP does DCSP not DCSP exist') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Unexpected DCSP error DCSP while DCSP retrieving DCSP block: DCSP %s' % e.code)) DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Error DCSP retreving DCSP Public DCSP IP DCSP Block DCSP ' + ("'%s': DCSP %s" % (block.id, e.message)))) DCNL DCSP else: DCNL DCSP  DCSP blocks = list_public_ip_blocks(module, driver, network_domain) DCNL DCSP  DCSP if (blocks is not False): DCNL DCSP  DCSP  DCSP block = next((block for block in blocks if (block.base_ip == base_ip))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.exit_json(changed=False, msg=("IP DCSP block DCSP starting DCSP with DCSP '%s' DCSP does DCSP not DCSP exist." % base_ip)) DCNL DCSP return block
def list_nat_rules(module, driver, network_domain): DCNL  DCSP try: DCNL DCSP  DCSP return driver.ex_list_nat_rules(network_domain) DCNL DCSP except DimensionDataAPIException: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP list DCSP NAT DCSP rules: DCSP %s' % e.message))
def list_public_ip_blocks(module, driver, network_domain): DCNL  DCSP try: DCNL DCSP  DCSP blocks = driver.ex_list_public_ip_blocks(network_domain) DCNL DCSP  DCSP return blocks DCNL DCSP except DimensionDataAPIException: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('Error DCSP retreving DCSP Public DCSP IP DCSP Blocks: DCSP %s' % e))
def get_block_allocation(module, cp_driver, lb_driver, network_domain, block): DCNL  DCSP nat_rules = list_nat_rules(module, cp_driver, network_domain) DCNL DCSP balancers = list_balancers(module, lb_driver) DCNL DCSP pub_ip_block = get_public_ip_block(module, cp_driver, network_domain, block.id, False) DCNL DCSP pub_ips = expand_ip_block(pub_ip_block) DCNL DCSP block_detailed = {'id': block.id, 'addresses': []} DCNL DCSP for ip in pub_ips: DCNL DCSP  DCSP allocated = False DCNL DCSP  DCSP nat_match = [nat_rule for nat_rule in nat_rules if (nat_rule.external_ip == ip)] DCNL DCSP  DCSP lb_match = [balancer for balancer in balancers if (balancer.ip == ip)] DCNL DCSP  DCSP if ((len(nat_match) > 0) or (len(lb_match) > 0)): DCNL DCSP  DCSP  DCSP allocated = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP allocated = False DCNL DCSP  DCSP block_detailed['addresses'].append({'address': ip, 'allocated': allocated}) DCNL DCSP return block_detailed
def get_blocks_with_unallocated(module, cp_driver, lb_driver, network_domain): DCNL  DCSP total_unallocated_ips = 0 DCNL DCSP all_blocks = list_public_ip_blocks(module, cp_driver, network_domain) DCNL DCSP unalloc_blocks = [] DCNL DCSP unalloc_addresses = [] DCNL DCSP for block in all_blocks: DCNL DCSP  DCSP d_blocks = get_block_allocation(module, cp_driver, lb_driver, network_domain, block) DCNL DCSP  DCSP i = 0 DCNL DCSP  DCSP for addr in d_blocks['addresses']: DCNL DCSP  DCSP  DCSP if (addr['allocated'] is False): DCNL DCSP  DCSP  DCSP  DCSP if (i == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP unalloc_blocks.append(d_blocks) DCNL DCSP  DCSP  DCSP  DCSP unalloc_addresses.append(addr['address']) DCNL DCSP  DCSP  DCSP  DCSP total_unallocated_ips += 1 DCNL DCSP  DCSP  DCSP i += 1 DCNL DCSP return {'unallocated_count': total_unallocated_ips, 'ip_blocks': unalloc_blocks, 'unallocated_addresses': unalloc_addresses}
def get_unallocated_public_ips(module, cp_driver, lb_driver, network_domain, reuse_free, count=0): DCNL  DCSP free_ips = [] DCNL DCSP if (reuse_free is True): DCNL DCSP  DCSP blocks_with_unallocated = get_blocks_with_unallocated(module, cp_driver, lb_driver, network_domain) DCNL DCSP  DCSP free_ips = blocks_with_unallocated['unallocated_addresses'] DCNL DCSP if (len(free_ips) < count): DCNL DCSP  DCSP num_needed = (count - len(free_ips)) DCNL DCSP  DCSP for i in range(num_needed): DCNL DCSP  DCSP  DCSP block = cp_driver.ex_add_public_ip_block_to_network_domain(network_domain) DCNL DCSP  DCSP  DCSP block_dict = get_block_allocation(module, cp_driver, lb_driver, network_domain, block) DCNL DCSP  DCSP  DCSP for addr in block_dict['addresses']: DCNL DCSP  DCSP  DCSP  DCSP free_ips.append(addr['address']) DCNL DCSP  DCSP  DCSP if (len(free_ips) >= count): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP return {'changed': True, 'msg': 'Allocated DCSP public DCSP IP DCSP block(s)', 'addresses': free_ips[:count]} DCNL DCSP else: DCNL DCSP  DCSP return {'changed': False, 'msg': ('Found DCSP enough DCSP unallocated DCSP IPs' + ' DCSP without DCSP provisioning.'), 'addresses': free_ips}
def is_ipv4_addr(ip): DCNL  DCSP parts = ip.split('.') DCNL DCSP try: DCNL DCSP  DCSP return ((len(parts) == 4) and all(((0 <= int(part) < 256) for part in parts))) DCNL DCSP except: DCNL DCSP  DCSP return False
def get_node_by_name_and_ip(module, lb_driver, name, ip): DCNL  DCSP nodes = lb_driver.ex_get_nodes() DCNL DCSP found_nodes = [] DCNL DCSP if (not is_ipv4_addr(ip)): DCNL DCSP  DCSP module.fail_json(msg=("Node DCSP '%s' DCSP ip DCSP is DCSP not DCSP a DCSP valid DCSP IPv4 DCSP address" % ip)) DCNL DCSP found_nodes = [node for node in nodes if ((node.name == name) and (node.ip == ip))] DCNL DCSP if (len(found_nodes) == 0): DCNL DCSP  DCSP return None DCNL DCSP elif (len(found_nodes) == 1): DCNL DCSP  DCSP return found_nodes[0] DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=("More DCSP than DCSP one DCSP node DCSP of DCSP name DCSP '%s' DCSP found." % name))
def generic_urlparse(parts): DCNL  DCSP generic_parts = dict() DCNL DCSP if hasattr(parts, 'netloc'): DCNL DCSP  DCSP generic_parts['scheme'] = parts.scheme DCNL DCSP  DCSP generic_parts['netloc'] = parts.netloc DCNL DCSP  DCSP generic_parts['path'] = parts.path DCNL DCSP  DCSP generic_parts['params'] = parts.params DCNL DCSP  DCSP generic_parts['query'] = parts.query DCNL DCSP  DCSP generic_parts['fragment'] = parts.fragment DCNL DCSP  DCSP generic_parts['username'] = parts.username DCNL DCSP  DCSP generic_parts['password'] = parts.password DCNL DCSP  DCSP generic_parts['hostname'] = parts.hostname DCNL DCSP  DCSP generic_parts['port'] = parts.port DCNL DCSP else: DCNL DCSP  DCSP generic_parts['scheme'] = parts[0] DCNL DCSP  DCSP generic_parts['netloc'] = parts[1] DCNL DCSP  DCSP generic_parts['path'] = parts[2] DCNL DCSP  DCSP generic_parts['params'] = parts[3] DCNL DCSP  DCSP generic_parts['query'] = parts[4] DCNL DCSP  DCSP generic_parts['fragment'] = parts[5] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP netloc_re = re.compile('^((?:\\w)+(?::(?:\\w)+)?@)?([A-Za-z0-9.-]+)(:\\d+)?$') DCNL DCSP  DCSP  DCSP match = netloc_re.match(parts[1]) DCNL DCSP  DCSP  DCSP auth = match.group(1) DCNL DCSP  DCSP  DCSP hostname = match.group(2) DCNL DCSP  DCSP  DCSP port = match.group(3) DCNL DCSP  DCSP  DCSP if port: DCNL DCSP  DCSP  DCSP  DCSP port = int(port[1:]) DCNL DCSP  DCSP  DCSP if auth: DCNL DCSP  DCSP  DCSP  DCSP auth = auth[:(-1)] DCNL DCSP  DCSP  DCSP  DCSP (username, password) = auth.split(':', 1) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP username = password = None DCNL DCSP  DCSP  DCSP generic_parts['username'] = username DCNL DCSP  DCSP  DCSP generic_parts['password'] = password DCNL DCSP  DCSP  DCSP generic_parts['hostname'] = hostname DCNL DCSP  DCSP  DCSP generic_parts['port'] = port DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP generic_parts['username'] = None DCNL DCSP  DCSP  DCSP generic_parts['password'] = None DCNL DCSP  DCSP  DCSP generic_parts['hostname'] = parts[1] DCNL DCSP  DCSP  DCSP generic_parts['port'] = None DCNL DCSP return generic_parts
def RedirectHandlerFactory(follow_redirects=None, validate_certs=True): DCNL  DCSP class RedirectHandler(urllib_request.HTTPRedirectHandler, ): DCNL DCSP  DCSP 'This DCSP is DCSP an DCSP implementation DCSP of DCSP a DCSP RedirectHandler DCSP to DCSP match DCSP the\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP functionality DCSP provided DCSP by DCSP httplib2. DCSP It DCSP will DCSP utilize DCSP the DCSP value DCSP of\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ``follow_redirects`` DCSP that DCSP is DCSP passed DCSP into DCSP ``RedirectHandlerFactory``\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP to DCSP determine DCSP how DCSP redirects DCSP should DCSP be DCSP handled DCSP in DCSP urllib2.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP def redirect_request(self, req, fp, code, msg, hdrs, newurl): DCNL DCSP  DCSP  DCSP handler = maybe_add_ssl_handler(newurl, validate_certs) DCNL DCSP  DCSP  DCSP if handler: DCNL DCSP  DCSP  DCSP  DCSP urllib_request._opener.add_handler(handler) DCNL DCSP  DCSP  DCSP if (follow_redirects == 'urllib2'): DCNL DCSP  DCSP  DCSP  DCSP return urllib_request.HTTPRedirectHandler.redirect_request(self, req, fp, code, msg, hdrs, newurl) DCNL DCSP  DCSP  DCSP elif (follow_redirects in ['no', 'none', False]): DCNL DCSP  DCSP  DCSP  DCSP raise urllib_error.HTTPError(newurl, code, msg, hdrs, fp) DCNL DCSP  DCSP  DCSP do_redirect = False DCNL DCSP  DCSP  DCSP if (follow_redirects in ['all', 'yes', True]): DCNL DCSP  DCSP  DCSP  DCSP do_redirect = ((code >= 300) and (code < 400)) DCNL DCSP  DCSP  DCSP elif (follow_redirects == 'safe'): DCNL DCSP  DCSP  DCSP  DCSP m = req.get_method() DCNL DCSP  DCSP  DCSP  DCSP do_redirect = ((code >= 300) and (code < 400) and (m in ('GET', 'HEAD'))) DCNL DCSP  DCSP  DCSP if do_redirect: DCNL DCSP  DCSP  DCSP  DCSP newurl = newurl.replace(' DCSP ', '%20') DCNL DCSP  DCSP  DCSP  DCSP newheaders = dict(((k, v) for (k, v) in req.headers.items() if (k.lower() not in ('content-length', 'content-type')))) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP origin_req_host = req.get_origin_req_host() DCNL DCSP  DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP origin_req_host = req.origin_req_host DCNL DCSP  DCSP  DCSP  DCSP return urllib_request.Request(newurl, headers=newheaders, origin_req_host=origin_req_host, unverifiable=True) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise urllib_error.HTTPError(req.get_full_url(), code, msg, hdrs, fp) DCNL DCSP return RedirectHandler
def build_ssl_validation_error(hostname, port, paths, exc=None): DCNL  DCSP msg = ['Failed DCSP to DCSP validate DCSP the DCSP SSL DCSP certificate DCSP for DCSP %s:%s. DCSP Make DCSP sure DCSP your DCSP managed DCSP systems DCSP have DCSP a DCSP valid DCSP CA DCSP certificate DCSP installed.'] DCNL DCSP if (not HAS_SSLCONTEXT): DCNL DCSP  DCSP msg.append('If DCSP the DCSP website DCSP serving DCSP the DCSP url DCSP uses DCSP SNI DCSP you DCSP need DCSP python DCSP >= DCSP 2.7.9 DCSP on DCSP your DCSP managed DCSP machine') DCNL DCSP  DCSP if (not HAS_URLLIB3_SNI_SUPPORT): DCNL DCSP  DCSP  DCSP msg.append('or DCSP you DCSP can DCSP install DCSP the DCSP `urllib3`, DCSP `pyopenssl`, DCSP `ndg-httpsclient`, DCSP and DCSP `pyasn1` DCSP python DCSP modules') DCNL DCSP  DCSP msg.append('to DCSP perform DCSP SNI DCSP verification DCSP in DCSP python DCSP >= DCSP 2.6.') DCNL DCSP msg.append('You DCSP can DCSP use DCSP validate_certs=False DCSP if DCSP you DCSP do DCSP not DCSP need DCSP to DCSP confirm DCSP the DCSP servers DCSP identity DCSP but DCSP this DCSP is DCSP unsafe DCSP and DCSP not DCSP recommended. DCSP Paths DCSP checked DCSP for DCSP this DCSP platform: DCSP %s.') DCNL DCSP if exc: DCNL DCSP  DCSP msg.append(('The DCSP exception DCSP msg DCSP was: DCSP %s.' % to_native(exc))) DCNL DCSP raise SSLValidationError((' DCSP '.join(msg) % (hostname, port, ', DCSP '.join(paths))))
def open_url(url, data=None, headers=None, method=None, use_proxy=True, force=False, last_mod_time=None, timeout=10, validate_certs=True, url_username=None, url_password=None, http_agent=None, force_basic_auth=False, follow_redirects='urllib2'): DCNL  DCSP handlers = [] DCNL DCSP ssl_handler = maybe_add_ssl_handler(url, validate_certs) DCNL DCSP if ssl_handler: DCNL DCSP  DCSP handlers.append(ssl_handler) DCNL DCSP parsed = urlparse(url) DCNL DCSP if (parsed[0] != 'ftp'): DCNL DCSP  DCSP username = url_username DCNL DCSP  DCSP if (headers is None): DCNL DCSP  DCSP  DCSP headers = {} DCNL DCSP  DCSP if username: DCNL DCSP  DCSP  DCSP password = url_password DCNL DCSP  DCSP  DCSP netloc = parsed[1] DCNL DCSP  DCSP elif ('@' in parsed[1]): DCNL DCSP  DCSP  DCSP (credentials, netloc) = parsed[1].split('@', 1) DCNL DCSP  DCSP  DCSP if (':' in credentials): DCNL DCSP  DCSP  DCSP  DCSP (username, password) = credentials.split(':', 1) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP username = credentials DCNL DCSP  DCSP  DCSP  DCSP password = '' DCNL DCSP  DCSP  DCSP parsed = list(parsed) DCNL DCSP  DCSP  DCSP parsed[1] = netloc DCNL DCSP  DCSP  DCSP url = urlunparse(parsed) DCNL DCSP  DCSP if (username and (not force_basic_auth)): DCNL DCSP  DCSP  DCSP passman = urllib_request.HTTPPasswordMgrWithDefaultRealm() DCNL DCSP  DCSP  DCSP passman.add_password(None, netloc, username, password) DCNL DCSP  DCSP  DCSP authhandler = urllib_request.HTTPBasicAuthHandler(passman) DCNL DCSP  DCSP  DCSP digest_authhandler = urllib_request.HTTPDigestAuthHandler(passman) DCNL DCSP  DCSP  DCSP handlers.append(authhandler) DCNL DCSP  DCSP  DCSP handlers.append(digest_authhandler) DCNL DCSP  DCSP elif (username and force_basic_auth): DCNL DCSP  DCSP  DCSP headers['Authorization'] = basic_auth_header(username, password) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP rc = netrc.netrc(os.environ.get('NETRC')) DCNL DCSP  DCSP  DCSP  DCSP login = rc.authenticators(parsed[1]) DCNL DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP login = None DCNL DCSP  DCSP  DCSP if login: DCNL DCSP  DCSP  DCSP  DCSP (username, _, password) = login DCNL DCSP  DCSP  DCSP  DCSP if (username and password): DCNL DCSP  DCSP  DCSP  DCSP  DCSP headers['Authorization'] = basic_auth_header(username, password) DCNL DCSP if (not use_proxy): DCNL DCSP  DCSP proxyhandler = urllib_request.ProxyHandler({}) DCNL DCSP  DCSP handlers.append(proxyhandler) DCNL DCSP if (HAS_SSLCONTEXT and (not validate_certs)): DCNL DCSP  DCSP context = SSLContext(ssl.PROTOCOL_SSLv23) DCNL DCSP  DCSP context.options |= ssl.OP_NO_SSLv2 DCNL DCSP  DCSP context.options |= ssl.OP_NO_SSLv3 DCNL DCSP  DCSP context.verify_mode = ssl.CERT_NONE DCNL DCSP  DCSP context.check_hostname = False DCNL DCSP  DCSP handlers.append(urllib_request.HTTPSHandler(context=context)) DCNL DCSP if (hasattr(socket, 'create_connection') and CustomHTTPSHandler): DCNL DCSP  DCSP handlers.append(CustomHTTPSHandler) DCNL DCSP handlers.append(RedirectHandlerFactory(follow_redirects, validate_certs)) DCNL DCSP opener = urllib_request.build_opener(*handlers) DCNL DCSP urllib_request.install_opener(opener) DCNL DCSP data = to_bytes(data, nonstring='passthru') DCNL DCSP if method: DCNL DCSP  DCSP if (method.upper() not in ('OPTIONS', 'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'TRACE', 'CONNECT', 'PATCH')): DCNL DCSP  DCSP  DCSP raise ConnectionError(('invalid DCSP HTTP DCSP request DCSP method; DCSP %s' % method.upper())) DCNL DCSP  DCSP request = RequestWithMethod(url, method.upper(), data) DCNL DCSP else: DCNL DCSP  DCSP request = urllib_request.Request(url, data) DCNL DCSP if http_agent: DCNL DCSP  DCSP request.add_header('User-agent', http_agent) DCNL DCSP if force: DCNL DCSP  DCSP request.add_header('cache-control', 'no-cache') DCNL DCSP elif last_mod_time: DCNL DCSP  DCSP tstamp = last_mod_time.strftime('%a, DCSP %d DCSP %b DCSP %Y DCSP %H:%M:%S DCSP +0000') DCNL DCSP  DCSP request.add_header('If-Modified-Since', tstamp) DCNL DCSP if headers: DCNL DCSP  DCSP if (not isinstance(headers, dict)): DCNL DCSP  DCSP  DCSP raise ValueError('headers DCSP provided DCSP to DCSP fetch_url() DCSP must DCSP be DCSP a DCSP dict') DCNL DCSP  DCSP for header in headers: DCNL DCSP  DCSP  DCSP request.add_header(header, headers[header]) DCNL DCSP urlopen_args = [request, None] DCNL DCSP if (sys.version_info >= (2, 6, 0)): DCNL DCSP  DCSP urlopen_args.append(timeout) DCNL DCSP r = urllib_request.urlopen(*urlopen_args) DCNL DCSP return r
def basic_auth_header(username, password): DCNL  DCSP return (b('Basic DCSP %s') % base64.b64encode(to_bytes(('%s:%s' % (username, password)), errors='surrogate_or_strict')))
def url_argument_spec(): DCNL  DCSP return dict(url=dict(), force=dict(default='no', aliases=['thirsty'], type='bool'), http_agent=dict(default='ansible-httpget'), use_proxy=dict(default='yes', type='bool'), validate_certs=dict(default='yes', type='bool'), url_username=dict(required=False), url_password=dict(required=False), force_basic_auth=dict(required=False, type='bool', default='no'))
def fetch_url(module, url, data=None, headers=None, method=None, use_proxy=True, force=False, last_mod_time=None, timeout=10): DCNL  DCSP if (not HAS_URLPARSE): DCNL DCSP  DCSP module.fail_json(msg='urlparse DCSP is DCSP not DCSP installed') DCNL DCSP validate_certs = module.params.get('validate_certs', True) DCNL DCSP username = module.params.get('url_username', '') DCNL DCSP password = module.params.get('url_password', '') DCNL DCSP http_agent = module.params.get('http_agent', None) DCNL DCSP force_basic_auth = module.params.get('force_basic_auth', '') DCNL DCSP follow_redirects = module.params.get('follow_redirects', 'urllib2') DCNL DCSP r = None DCNL DCSP info = dict(url=url) DCNL DCSP try: DCNL DCSP  DCSP r = open_url(url, data=data, headers=headers, method=method, use_proxy=use_proxy, force=force, last_mod_time=last_mod_time, timeout=timeout, validate_certs=validate_certs, url_username=username, url_password=password, http_agent=http_agent, force_basic_auth=force_basic_auth, follow_redirects=follow_redirects) DCNL DCSP  DCSP info.update(r.info()) DCNL DCSP  DCSP info.update(dict(msg=('OK DCSP (%s DCSP bytes)' % r.headers.get('Content-Length', 'unknown')), url=r.geturl(), status=r.code)) DCNL DCSP except NoSSLError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP distribution = get_distribution() DCNL DCSP  DCSP if ((distribution is not None) and (distribution.lower() == 'redhat')): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s. DCSP You DCSP can DCSP also DCSP install DCSP python-ssl DCSP from DCSP EPEL' % str(e))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s' % str(e))) DCNL DCSP except (ConnectionError, ValueError): DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP except urllib_error.HTTPError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = e.read() DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP body = '' DCNL DCSP  DCSP info.update(dict(msg=str(e), body=body, **e.info())) DCNL DCSP  DCSP info['status'] = e.code DCNL DCSP except urllib_error.URLError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP code = int(getattr(e, 'code', (-1))) DCNL DCSP  DCSP info.update(dict(msg=('Request DCSP failed: DCSP %s' % str(e)), status=code)) DCNL DCSP except socket.error: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP info.update(dict(msg=('Connection DCSP failure: DCSP %s' % str(e)), status=(-1))) DCNL DCSP except Exception: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP info.update(dict(msg=('An DCSP unknown DCSP error DCSP occurred: DCSP %s' % str(e)), status=(-1))) DCNL DCSP return (r, info)
def get_platform(): DCNL  DCSP return platform.system()
def get_distribution(): DCNL  DCSP if (platform.system() == 'Linux'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP supported_dists = (platform._supported_dists + ('arch', 'alpine')) DCNL DCSP  DCSP  DCSP distribution = platform.linux_distribution(supported_dists=supported_dists)[0].capitalize() DCNL DCSP  DCSP  DCSP if ((not distribution) and os.path.isfile('/etc/system-release')): DCNL DCSP  DCSP  DCSP  DCSP distribution = platform.linux_distribution(supported_dists=['system'])[0].capitalize() DCNL DCSP  DCSP  DCSP  DCSP if ('Amazon' in distribution): DCNL DCSP  DCSP  DCSP  DCSP  DCSP distribution = 'Amazon' DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP distribution = 'OtherLinux' DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP distribution = platform.dist()[0].capitalize() DCNL DCSP else: DCNL DCSP  DCSP distribution = None DCNL DCSP return distribution
def get_distribution_version(): DCNL  DCSP if (platform.system() == 'Linux'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP distribution_version = platform.linux_distribution()[1] DCNL DCSP  DCSP  DCSP if ((not distribution_version) and os.path.isfile('/etc/system-release')): DCNL DCSP  DCSP  DCSP  DCSP distribution_version = platform.linux_distribution(supported_dists=['system'])[1] DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP distribution_version = platform.dist()[1] DCNL DCSP else: DCNL DCSP  DCSP distribution_version = None DCNL DCSP return distribution_version
def get_all_subclasses(cls): DCNL  DCSP subclasses = cls.__subclasses__() DCNL DCSP to_visit = list(subclasses) DCNL DCSP while to_visit: DCNL DCSP  DCSP for sc in to_visit: DCNL DCSP  DCSP  DCSP to_visit.remove(sc) DCNL DCSP  DCSP  DCSP for ssc in sc.__subclasses__(): DCNL DCSP  DCSP  DCSP  DCSP subclasses.append(ssc) DCNL DCSP  DCSP  DCSP  DCSP to_visit.append(ssc) DCNL DCSP return subclasses
def load_platform_subclass(cls, *args, **kwargs): DCNL  DCSP this_platform = get_platform() DCNL DCSP distribution = get_distribution() DCNL DCSP subclass = None DCNL DCSP if (distribution is not None): DCNL DCSP  DCSP for sc in get_all_subclasses(cls): DCNL DCSP  DCSP  DCSP if ((sc.distribution is not None) and (sc.distribution == distribution) and (sc.platform == this_platform)): DCNL DCSP  DCSP  DCSP  DCSP subclass = sc DCNL DCSP if (subclass is None): DCNL DCSP  DCSP for sc in get_all_subclasses(cls): DCNL DCSP  DCSP  DCSP if ((sc.platform == this_platform) and (sc.distribution is None)): DCNL DCSP  DCSP  DCSP  DCSP subclass = sc DCNL DCSP if (subclass is None): DCNL DCSP  DCSP subclass = cls DCNL DCSP return super(cls, subclass).__new__(subclass)
def json_dict_unicode_to_bytes(d, encoding='utf-8', errors='surrogate_or_strict'): DCNL  DCSP if isinstance(d, text_type): DCNL DCSP  DCSP return to_bytes(d, encoding=encoding, errors=errors) DCNL DCSP elif isinstance(d, dict): DCNL DCSP  DCSP return dict(map(json_dict_unicode_to_bytes, iteritems(d), repeat(encoding), repeat(errors))) DCNL DCSP elif isinstance(d, list): DCNL DCSP  DCSP return list(map(json_dict_unicode_to_bytes, d, repeat(encoding), repeat(errors))) DCNL DCSP elif isinstance(d, tuple): DCNL DCSP  DCSP return tuple(map(json_dict_unicode_to_bytes, d, repeat(encoding), repeat(errors))) DCNL DCSP else: DCNL DCSP  DCSP return d
def json_dict_bytes_to_unicode(d, encoding='utf-8', errors='surrogate_or_strict'): DCNL  DCSP if isinstance(d, binary_type): DCNL DCSP  DCSP return to_text(d, encoding=encoding, errors=errors) DCNL DCSP elif isinstance(d, dict): DCNL DCSP  DCSP return dict(map(json_dict_bytes_to_unicode, iteritems(d), repeat(encoding), repeat(errors))) DCNL DCSP elif isinstance(d, list): DCNL DCSP  DCSP return list(map(json_dict_bytes_to_unicode, d, repeat(encoding), repeat(errors))) DCNL DCSP elif isinstance(d, tuple): DCNL DCSP  DCSP return tuple(map(json_dict_bytes_to_unicode, d, repeat(encoding), repeat(errors))) DCNL DCSP else: DCNL DCSP  DCSP return d
def return_values(obj): DCNL  DCSP if isinstance(obj, (text_type, binary_type)): DCNL DCSP  DCSP if obj: DCNL DCSP  DCSP  DCSP (yield to_native(obj, errors='surrogate_or_strict')) DCNL DCSP  DCSP return DCNL DCSP elif isinstance(obj, SEQUENCETYPE): DCNL DCSP  DCSP for element in obj: DCNL DCSP  DCSP  DCSP for subelement in return_values(element): DCNL DCSP  DCSP  DCSP  DCSP (yield subelement) DCNL DCSP elif isinstance(obj, Mapping): DCNL DCSP  DCSP for element in obj.items(): DCNL DCSP  DCSP  DCSP for subelement in return_values(element[1]): DCNL DCSP  DCSP  DCSP  DCSP (yield subelement) DCNL DCSP elif isinstance(obj, (bool, NoneType)): DCNL DCSP  DCSP return DCNL DCSP elif isinstance(obj, NUMBERTYPES): DCNL DCSP  DCSP (yield to_native(obj, nonstring='simplerepr')) DCNL DCSP else: DCNL DCSP  DCSP raise TypeError(('Unknown DCSP parameter DCSP type: DCSP %s, DCSP %s' % (type(obj), obj)))
def remove_values(value, no_log_strings): DCNL  DCSP if isinstance(value, (text_type, binary_type)): DCNL DCSP  DCSP native_str_value = value DCNL DCSP  DCSP if isinstance(value, text_type): DCNL DCSP  DCSP  DCSP value_is_text = True DCNL DCSP  DCSP  DCSP if PY2: DCNL DCSP  DCSP  DCSP  DCSP native_str_value = to_bytes(value, encoding='utf-8', errors='surrogate_or_strict') DCNL DCSP  DCSP elif isinstance(value, binary_type): DCNL DCSP  DCSP  DCSP value_is_text = False DCNL DCSP  DCSP  DCSP if PY3: DCNL DCSP  DCSP  DCSP  DCSP native_str_value = to_text(value, encoding='utf-8', errors='surrogate_or_strict') DCNL DCSP  DCSP if (native_str_value in no_log_strings): DCNL DCSP  DCSP  DCSP return 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER' DCNL DCSP  DCSP for omit_me in no_log_strings: DCNL DCSP  DCSP  DCSP native_str_value = native_str_value.replace(omit_me, ('*' * 8)) DCNL DCSP  DCSP if (value_is_text and isinstance(native_str_value, binary_type)): DCNL DCSP  DCSP  DCSP value = to_text(native_str_value, encoding='utf-8', errors='surrogate_or_replace') DCNL DCSP  DCSP elif ((not value_is_text) and isinstance(native_str_value, text_type)): DCNL DCSP  DCSP  DCSP value = to_bytes(native_str_value, encoding='utf-8', errors='surrogate_or_replace') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = native_str_value DCNL DCSP elif isinstance(value, SEQUENCETYPE): DCNL DCSP  DCSP return [remove_values(elem, no_log_strings) for elem in value] DCNL DCSP elif isinstance(value, Mapping): DCNL DCSP  DCSP return dict(((k, remove_values(v, no_log_strings)) for (k, v) in value.items())) DCNL DCSP elif isinstance(value, tuple(chain(NUMBERTYPES, (bool, NoneType)))): DCNL DCSP  DCSP stringy_value = to_native(value, encoding='utf-8', errors='surrogate_or_strict') DCNL DCSP  DCSP if (stringy_value in no_log_strings): DCNL DCSP  DCSP  DCSP return 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER' DCNL DCSP  DCSP for omit_me in no_log_strings: DCNL DCSP  DCSP  DCSP if (omit_me in stringy_value): DCNL DCSP  DCSP  DCSP  DCSP return 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER' DCNL DCSP elif isinstance(value, datetime.datetime): DCNL DCSP  DCSP value = value.isoformat() DCNL DCSP else: DCNL DCSP  DCSP raise TypeError(('Value DCSP of DCSP unknown DCSP type: DCSP %s, DCSP %s' % (type(value), value))) DCNL DCSP return value
def heuristic_log_sanitize(data, no_log_values=None): DCNL  DCSP data = to_native(data) DCNL DCSP output = [] DCNL DCSP begin = len(data) DCNL DCSP prev_begin = begin DCNL DCSP sep = 1 DCNL DCSP while sep: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP end = data.rindex('@', 0, begin) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP output.insert(0, data[0:begin]) DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP sep = None DCNL DCSP  DCSP sep_search_end = end DCNL DCSP  DCSP while (not sep): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP begin = data.rindex('://', 0, sep_search_end) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP begin = 0 DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP sep = data.index(':', (begin + 3), end) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP if (begin == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP output.insert(0, data[0:begin]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP sep_search_end = begin DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if sep: DCNL DCSP  DCSP  DCSP output.insert(0, data[end:prev_begin]) DCNL DCSP  DCSP  DCSP output.insert(0, '********') DCNL DCSP  DCSP  DCSP output.insert(0, data[begin:(sep + 1)]) DCNL DCSP  DCSP  DCSP prev_begin = begin DCNL DCSP output = ''.join(output) DCNL DCSP if no_log_values: DCNL DCSP  DCSP output = remove_values(output, no_log_values) DCNL DCSP return output
def human_to_bytes(number, default_unit=None, isbits=False): DCNL  DCSP m = re.search('^\\s*(\\d*\\.?\\d*)\\s*([A-Za-z]+)?', str(number), flags=re.IGNORECASE) DCNL DCSP if (m is None): DCNL DCSP  DCSP raise ValueError(("human_to_bytes() DCSP can't DCSP interpret DCSP following DCSP string: DCSP %s" % str(number))) DCNL DCSP try: DCNL DCSP  DCSP num = float(m.group(1)) DCNL DCSP except: DCNL DCSP  DCSP raise ValueError(("human_to_bytes() DCSP can't DCSP interpret DCSP following DCSP number: DCSP %s DCSP (original DCSP input DCSP string: DCSP %s)" % (m.group(1), number))) DCNL DCSP unit = m.group(2) DCNL DCSP if (unit is None): DCNL DCSP  DCSP unit = default_unit DCNL DCSP if (unit is None): DCNL DCSP  DCSP ' DCSP No DCSP unit DCSP given, DCSP returning DCSP raw DCSP number DCSP ' DCNL DCSP  DCSP return int(round(num)) DCNL DCSP range_key = unit[0].upper() DCNL DCSP try: DCNL DCSP  DCSP limit = SIZE_RANGES[range_key] DCNL DCSP except: DCNL DCSP  DCSP raise ValueError(('human_to_bytes() DCSP failed DCSP to DCSP convert DCSP %s DCSP (unit DCSP = DCSP %s). DCSP The DCSP suffix DCSP must DCSP be DCSP one DCSP of DCSP %s' % (number, unit, ', DCSP '.join(SIZE_RANGES.keys())))) DCNL DCSP unit_class = 'B' DCNL DCSP unit_class_name = 'byte' DCNL DCSP if isbits: DCNL DCSP  DCSP unit_class = 'b' DCNL DCSP  DCSP unit_class_name = 'bit' DCNL DCSP if (len(unit) > 1): DCNL DCSP  DCSP expect_message = ('expect DCSP %s%s DCSP or DCSP %s' % (range_key, unit_class, range_key)) DCNL DCSP  DCSP if (range_key == 'B'): DCNL DCSP  DCSP  DCSP expect_message = ('expect DCSP %s DCSP or DCSP %s' % (unit_class, unit_class_name)) DCNL DCSP  DCSP if (unit_class_name in unit.lower()): DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP elif (unit[1] != unit_class): DCNL DCSP  DCSP  DCSP raise ValueError(('human_to_bytes() DCSP failed DCSP to DCSP convert DCSP %s. DCSP Value DCSP is DCSP not DCSP a DCSP valid DCSP string DCSP (%s)' % (number, expect_message))) DCNL DCSP return int(round((num * limit)))
def is_executable(path): DCNL  DCSP return (((stat.S_IXUSR | stat.S_IXGRP) | stat.S_IXOTH) & os.stat(path)[stat.ST_MODE])
def _load_params(): DCNL  DCSP global _ANSIBLE_ARGS DCNL DCSP if (_ANSIBLE_ARGS is not None): DCNL DCSP  DCSP buffer = _ANSIBLE_ARGS DCNL DCSP else: DCNL DCSP  DCSP if (len(sys.argv) > 1): DCNL DCSP  DCSP  DCSP if os.path.isfile(sys.argv[1]): DCNL DCSP  DCSP  DCSP  DCSP fd = open(sys.argv[1], 'rb') DCNL DCSP  DCSP  DCSP  DCSP buffer = fd.read() DCNL DCSP  DCSP  DCSP  DCSP fd.close() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP buffer = sys.argv[1] DCNL DCSP  DCSP  DCSP  DCSP if PY3: DCNL DCSP  DCSP  DCSP  DCSP  DCSP buffer = buffer.encode('utf-8', errors='surrogateescape') DCNL DCSP  DCSP elif PY2: DCNL DCSP  DCSP  DCSP buffer = sys.stdin.read() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP buffer = sys.stdin.buffer.read() DCNL DCSP  DCSP _ANSIBLE_ARGS = buffer DCNL DCSP try: DCNL DCSP  DCSP params = json.loads(buffer.decode('utf-8')) DCNL DCSP except ValueError: DCNL DCSP  DCSP print '\n{"msg": DCSP "Error: DCSP Module DCSP unable DCSP to DCSP decode DCSP valid DCSP JSON DCSP on DCSP stdin. DCSP  DCSP Unable DCSP to DCSP figure DCSP out DCSP what DCSP parameters DCSP were DCSP passed", DCSP "failed": DCSP true}' DCNL DCSP  DCSP sys.exit(1) DCNL DCSP if PY2: DCNL DCSP  DCSP params = json_dict_unicode_to_bytes(params) DCNL DCSP try: DCNL DCSP  DCSP return params['ANSIBLE_MODULE_ARGS'] DCNL DCSP except KeyError: DCNL DCSP  DCSP print '\n{"msg": DCSP "Error: DCSP Module DCSP unable DCSP to DCSP locate DCSP ANSIBLE_MODULE_ARGS DCSP in DCSP json DCSP data DCSP from DCSP stdin. DCSP  DCSP Unable DCSP to DCSP figure DCSP out DCSP what DCSP parameters DCSP were DCSP passed", DCSP "failed": DCSP true}' DCNL DCSP  DCSP sys.exit(1)
def env_fallback(*args, **kwargs): DCNL  DCSP for arg in args: DCNL DCSP  DCSP if (arg in os.environ): DCNL DCSP  DCSP  DCSP return os.environ[arg] DCNL DCSP else: DCNL DCSP  DCSP raise AnsibleFallbackNotFound
def _lenient_lowercase(lst): DCNL  DCSP lowered = [] DCNL DCSP for value in lst: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lowered.append(value.lower()) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP lowered.append(value) DCNL DCSP return lowered
def get_dict_of_struct(struct, connection=None, fetch_nested=False, attributes=None): DCNL  DCSP def remove_underscore(val): DCNL DCSP  DCSP if val.startswith('_'): DCNL DCSP  DCSP  DCSP val = val[1:] DCNL DCSP  DCSP  DCSP remove_underscore(val) DCNL DCSP  DCSP return val DCNL DCSP res = {} DCNL DCSP if (struct is not None): DCNL DCSP  DCSP for (key, value) in struct.__dict__.items(): DCNL DCSP  DCSP  DCSP nested = False DCNL DCSP  DCSP  DCSP key = remove_underscore(key) DCNL DCSP  DCSP  DCSP if (value is None): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif isinstance(value, sdk.Struct): DCNL DCSP  DCSP  DCSP  DCSP res[key] = get_dict_of_struct(value) DCNL DCSP  DCSP  DCSP elif (isinstance(value, Enum) or isinstance(value, datetime)): DCNL DCSP  DCSP  DCSP  DCSP res[key] = str(value) DCNL DCSP  DCSP  DCSP elif (isinstance(value, list) or isinstance(value, sdk.List)): DCNL DCSP  DCSP  DCSP  DCSP if (isinstance(value, sdk.List) and fetch_nested and value.href): DCNL DCSP  DCSP  DCSP  DCSP  DCSP value = connection.follow_link(value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP nested = True DCNL DCSP  DCSP  DCSP  DCSP res[key] = [] DCNL DCSP  DCSP  DCSP  DCSP for i in value: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(i, sdk.Struct): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not nested): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP res[key].append(get_dict_of_struct(i)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP nested_obj = dict(((attr, getattr(i, attr)) for attr in attributes if getattr(i, attr, None))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP nested_obj['id'] = (getattr(i, 'id', None),) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP res[key].append(nested_obj) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(i, Enum): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP res[key].append(str(i)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP res[key].append(i) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP res[key] = value DCNL DCSP return res
def create_connection(auth): DCNL  DCSP return sdk.Connection(url=auth.get('url'), username=auth.get('username'), password=auth.get('password'), ca_file=auth.get('ca_file', None), insecure=auth.get('insecure', False), token=auth.get('token', None), kerberos=auth.get('kerberos', None))
def convert_to_bytes(param): DCNL  DCSP if (param is None): DCNL DCSP  DCSP return None DCNL DCSP param = ''.join(param.split()) DCNL DCSP if (param[(-3)].lower() in ['k', 'm', 'g', 't', 'p']): DCNL DCSP  DCSP return (int(param[:(-3)]) * BYTES_MAP.get(param[(-3):].lower(), 1)) DCNL DCSP elif param.isdigit(): DCNL DCSP  DCSP return (int(param) * (2 ** 10)) DCNL DCSP else: DCNL DCSP  DCSP raise ValueError("Unsupported DCSP value(IEC DCSP supported): DCSP '{value}'".format(value=param))
def follow_link(connection, link): DCNL  DCSP if link: DCNL DCSP  DCSP return connection.follow_link(link) DCNL DCSP else: DCNL DCSP  DCSP return None
def get_link_name(connection, link): DCNL  DCSP if link: DCNL DCSP  DCSP return connection.follow_link(link).name DCNL DCSP else: DCNL DCSP  DCSP return None
def equal(param1, param2): DCNL  DCSP if (param1 is not None): DCNL DCSP  DCSP return (param1 == param2) DCNL DCSP return True
def search_by_attributes(service, **kwargs): DCNL  DCSP if ('search' in inspect.getargspec(service.list)[0]): DCNL DCSP  DCSP res = service.list(search=' DCSP and DCSP '.join(('{}={}'.format(k, v) for (k, v) in kwargs.items()))) DCNL DCSP else: DCNL DCSP  DCSP res = [e for e in service.list() if (len([k for (k, v) in kwargs.items() if (getattr(e, k, None) == v)]) == len(kwargs))] DCNL DCSP res = (res or [None]) DCNL DCSP return res[0]
def search_by_name(service, name, **kwargs): DCNL  DCSP if ('search' in inspect.getargspec(service.list)[0]): DCNL DCSP  DCSP res = service.list(search='name={name}'.format(name=name)) DCNL DCSP else: DCNL DCSP  DCSP res = [e for e in service.list() if (e.name == name)] DCNL DCSP if kwargs: DCNL DCSP  DCSP res = [e for e in service.list() if (len([k for (k, v) in kwargs.items() if (getattr(e, k, None) == v)]) == len(kwargs))] DCNL DCSP res = (res or [None]) DCNL DCSP return res[0]
def get_entity(service): DCNL  DCSP entity = None DCNL DCSP try: DCNL DCSP  DCSP entity = service.get() DCNL DCSP except sdk.Error: DCNL DCSP  DCSP pass DCNL DCSP return entity
def wait(service, condition, fail_condition=(lambda e: False), timeout=180, wait=True, poll_interval=3): DCNL  DCSP if wait: DCNL DCSP  DCSP start = time.time() DCNL DCSP  DCSP while (time.time() < (start + timeout)): DCNL DCSP  DCSP  DCSP entity = get_entity(service) DCNL DCSP  DCSP  DCSP if condition(entity): DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP elif fail_condition(entity): DCNL DCSP  DCSP  DCSP  DCSP raise Exception('Error DCSP while DCSP waiting DCSP on DCSP result DCSP state DCSP of DCSP the DCSP entity.') DCNL DCSP  DCSP  DCSP time.sleep(float(poll_interval))
def ovirt_facts_full_argument_spec(**kwargs): DCNL  DCSP spec = dict(auth=__get_auth_dict(), fetch_nested=dict(default=False, type='bool'), nested_attributes=dict(type='list')) DCNL DCSP spec.update(kwargs) DCNL DCSP return spec
def ovirt_full_argument_spec(**kwargs): DCNL  DCSP spec = dict(auth=__get_auth_dict(), timeout=dict(default=180, type='int'), wait=dict(default=True, type='bool'), poll_interval=dict(default=3, type='int'), fetch_nested=dict(default=False, type='bool'), nested_attributes=dict(type='list')) DCNL DCSP spec.update(kwargs) DCNL DCSP return spec
def check_params(module): DCNL  DCSP if ((module.params.get('name') is None) and (module.params.get('id') is None)): DCNL DCSP  DCSP module.fail_json(msg='"name" DCSP or DCSP "id" DCSP is DCSP required')
def _get_gcp_ansible_credentials(module): DCNL  DCSP service_account_email = module.params.get('service_account_email', None) DCNL DCSP credentials_file = (module.params.get('pem_file', None) or module.params.get('credentials_file', None)) DCNL DCSP project_id = module.params.get('project_id', None) DCNL DCSP return (service_account_email, credentials_file, project_id)
def _get_gcp_environ_var(var_name, default_value): DCNL  DCSP return os.environ.get(var_name, default_value)
def _get_gcp_environment_credentials(service_account_email, credentials_file, project_id): DCNL  DCSP if (not service_account_email): DCNL DCSP  DCSP service_account_email = _get_gcp_environ_var('GCE_EMAIL', None) DCNL DCSP if (not credentials_file): DCNL DCSP  DCSP credentials_file = (_get_gcp_environ_var('GCE_CREDENTIALS_FILE_PATH', None) or _get_gcp_environ_var('GOOGLE_APPLICATION_CREDENTIALS', None) or _get_gcp_environ_var('GCE_PEM_FILE_PATH', None)) DCNL DCSP if (not project_id): DCNL DCSP  DCSP project_id = (_get_gcp_environ_var('GCE_PROJECT', None) or _get_gcp_environ_var('GOOGLE_CLOUD_PROJECT', None)) DCNL DCSP return (service_account_email, credentials_file, project_id)
def _get_gcp_libcloud_credentials(service_account_email=None, credentials_file=None, project_id=None): DCNL  DCSP if ((service_account_email is None) or (credentials_file is None)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP import secrets DCNL DCSP  DCSP  DCSP display.deprecated(msg=("secrets DCSP file DCSP found DCSP at DCSP '%s'. DCSP  DCSP This DCSP method DCSP of DCSP specifying DCSP credentials DCSP is DCSP deprecated. DCSP  DCSP Please DCSP use DCSP env DCSP vars DCSP or DCSP Ansible DCSP YAML DCSP files DCSP instead" % secrets.__file__), version=2.5) DCNL DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP secrets = None DCNL DCSP  DCSP if hasattr(secrets, 'GCE_PARAMS'): DCNL DCSP  DCSP  DCSP if (not service_account_email): DCNL DCSP  DCSP  DCSP  DCSP service_account_email = secrets.GCE_PARAMS[0] DCNL DCSP  DCSP  DCSP if (not credentials_file): DCNL DCSP  DCSP  DCSP  DCSP credentials_file = secrets.GCE_PARAMS[1] DCNL DCSP  DCSP keyword_params = getattr(secrets, 'GCE_KEYWORD_PARAMS', {}) DCNL DCSP  DCSP if (not project_id): DCNL DCSP  DCSP  DCSP project_id = keyword_params.get('project', None) DCNL DCSP return (service_account_email, credentials_file, project_id)
def _get_gcp_credentials(module, require_valid_json=True, check_libcloud=False): DCNL  DCSP (service_account_email, credentials_file, project_id) = _get_gcp_ansible_credentials(module) DCNL DCSP (service_account_email, credentials_file, project_id) = _get_gcp_environment_credentials(service_account_email, credentials_file, project_id) DCNL DCSP (service_account_email, credentials_file, project_id) = _get_gcp_libcloud_credentials(service_account_email, credentials_file, project_id) DCNL DCSP if ((credentials_file is None) or (project_id is None) or (service_account_email is None)): DCNL DCSP  DCSP if (check_libcloud is True): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Missing DCSP GCE DCSP connection DCSP parameters DCSP in DCSP libcloud DCSP secrets DCSP file.') DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP elif ((credentials_file is None) or (project_id is None)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('GCP DCSP connection DCSP error: DCSP enable DCSP to DCSP determine DCSP project DCSP (%s) DCSP orcredentials DCSP file DCSP (%s)' % (project_id, credentials_file))) DCNL DCSP _validate_credentials_file(module, credentials_file, require_valid_json=require_valid_json, check_libcloud=check_libcloud) DCNL DCSP return {'service_account_email': service_account_email, 'credentials_file': credentials_file, 'project_id': project_id}
def _validate_credentials_file(module, credentials_file, require_valid_json=True, check_libcloud=False): DCNL  DCSP try: DCNL DCSP  DCSP with open(credentials_file) as credentials: DCNL DCSP  DCSP  DCSP json.loads(credentials.read()) DCNL DCSP  DCSP  DCSP if (check_libcloud and (LooseVersion(libcloud.__version__) < '0.17.0')): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Using DCSP JSON DCSP credentials DCSP but DCSP libcloud DCSP minimum DCSP version DCSP not DCSP met. DCSP Upgrade DCSP to DCSP libcloud>=0.17.0.') DCNL DCSP  DCSP  DCSP return True DCNL DCSP except IOError as e: DCNL DCSP  DCSP module.fail_json(msg=('GCP DCSP Credentials DCSP File DCSP %s DCSP not DCSP found.' % credentials_file), changed=False) DCNL DCSP  DCSP return False DCNL DCSP except ValueError as e: DCNL DCSP  DCSP if require_valid_json: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('GCP DCSP Credentials DCSP File DCSP %s DCSP invalid. DCSP  DCSP Must DCSP be DCSP valid DCSP JSON.' % credentials_file), changed=False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP display.deprecated(msg='Non-JSON DCSP credentials DCSP file DCSP provided. DCSP This DCSP format DCSP is DCSP deprecated. DCSP  DCSP Please DCSP generate DCSP a DCSP new DCSP JSON DCSP key DCSP from DCSP the DCSP Google DCSP Cloud DCSP console', version=2.5) DCNL DCSP  DCSP  DCSP return True
def gcp_connect(module, provider, get_driver, user_agent_product, user_agent_version): DCNL  DCSP if (not HAS_LIBCLOUD_BASE): DCNL DCSP  DCSP module.fail_json(msg='libcloud DCSP must DCSP be DCSP installed DCSP to DCSP use DCSP this DCSP module') DCNL DCSP creds = _get_gcp_credentials(module, require_valid_json=False, check_libcloud=True) DCNL DCSP try: DCNL DCSP  DCSP gcp = get_driver(provider)(creds['service_account_email'], creds['credentials_file'], datacenter=module.params.get('zone', None), project=creds['project_id']) DCNL DCSP  DCSP gcp.connection.user_agent_append(('%s/%s' % (user_agent_product, user_agent_version))) DCNL DCSP except (RuntimeError, ValueError) as e: DCNL DCSP  DCSP module.fail_json(msg=str(e), changed=False) DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=unexpected_error_msg(e), changed=False) DCNL DCSP return gcp
def get_google_cloud_credentials(module, scopes=[]): DCNL  DCSP creds = _get_gcp_credentials(module, require_valid_json=True, check_libcloud=False) DCNL DCSP try: DCNL DCSP  DCSP credentials = ServiceAccountCredentials.from_json_keyfile_name(creds['credentials_file'], scopes=scopes) DCNL DCSP  DCSP return (credentials, creds) DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=unexpected_error_msg(e), changed=False) DCNL DCSP  DCSP return (None, None)
def get_google_api_auth(module, scopes=[], user_agent_product='ansible-python-api', user_agent_version='NA'): DCNL  DCSP if (not HAS_GOOGLE_API_LIB): DCNL DCSP  DCSP module.fail_json(msg='Please DCSP install DCSP google-api-python-client DCSP library') DCNL DCSP if (not scopes): DCNL DCSP  DCSP scopes = ['https://www.googleapis.com/auth/cloud-platform'] DCNL DCSP try: DCNL DCSP  DCSP (credentials, conn_params) = get_google_credentials(module, scopes, require_valid_json=True, check_libcloud=False) DCNL DCSP  DCSP http = set_user_agent(Http(), ('%s-%s' % (user_agent_product, user_agent_version))) DCNL DCSP  DCSP http_auth = credentials.authorize(http) DCNL DCSP  DCSP return (http_auth, conn_params) DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=unexpected_error_msg(e), changed=False) DCNL DCSP  DCSP return (None, None)
def unexpected_error_msg(error): DCNL  DCSP return ('Unexpected DCSP response: DCSP (%s). DCSP Detail: DCSP %s' % (str(error), traceback.format_exc(error)))
def get_exception(): DCNL  DCSP return sys.exc_info()[1]
def gce_connect(module, provider=None): DCNL  DCSP if (not HAS_LIBCLOUD_BASE): DCNL DCSP  DCSP module.fail_json(msg='libcloud DCSP must DCSP be DCSP installed DCSP to DCSP use DCSP this DCSP module') DCNL DCSP provider = (provider or Provider.GCE) DCNL DCSP return gcp_connect(module, provider, get_driver, USER_AGENT_PRODUCT, USER_AGENT_VERSION)
def unexpected_error_msg(error): DCNL  DCSP return gcp_error(error)
def _add_doc(func, doc): DCNL  DCSP func.__doc__ = doc
def _import_module(name): DCNL  DCSP __import__(name) DCNL DCSP return sys.modules[name]
def add_move(move): DCNL  DCSP setattr(_MovedItems, move.name, move)
def remove_move(name): DCNL  DCSP try: DCNL DCSP  DCSP delattr(_MovedItems, name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP del moves.__dict__[name] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise AttributeError(('no DCSP such DCSP move, DCSP %r' % (name,)))
def iterkeys(d, **kw): DCNL  DCSP return iter(getattr(d, _iterkeys)(**kw))
def itervalues(d, **kw): DCNL  DCSP return iter(getattr(d, _itervalues)(**kw))
def iteritems(d, **kw): DCNL  DCSP return iter(getattr(d, _iteritems)(**kw))
def iterlists(d, **kw): DCNL  DCSP return iter(getattr(d, _iterlists)(**kw))
def with_metaclass(meta, *bases): DCNL  DCSP return meta('NewBase', bases, {})
def add_metaclass(metaclass): DCNL  DCSP def wrapper(cls): DCNL DCSP  DCSP orig_vars = cls.__dict__.copy() DCNL DCSP  DCSP orig_vars.pop('__dict__', None) DCNL DCSP  DCSP orig_vars.pop('__weakref__', None) DCNL DCSP  DCSP for slots_var in orig_vars.get('__slots__', ()): DCNL DCSP  DCSP  DCSP orig_vars.pop(slots_var) DCNL DCSP  DCSP return metaclass(cls.__name__, cls.__bases__, orig_vars) DCNL DCSP return wrapper
def rate_limit_argument_spec(spec=None): DCNL  DCSP arg_spec = dict(rate=dict(type='int'), rate_limit=dict(type='int')) DCNL DCSP if spec: DCNL DCSP  DCSP arg_spec.update(spec) DCNL DCSP return arg_spec
def retry_argument_spec(spec=None): DCNL  DCSP arg_spec = dict(retries=dict(type='int'), retry_pause=dict(type='float', default=1)) DCNL DCSP if spec: DCNL DCSP  DCSP arg_spec.update(spec) DCNL DCSP return arg_spec
def rate_limit(rate=None, rate_limit=None): DCNL  DCSP minrate = None DCNL DCSP if ((rate is not None) and (rate_limit is not None)): DCNL DCSP  DCSP minrate = (float(rate_limit) / float(rate)) DCNL DCSP def wrapper(f): DCNL DCSP  DCSP last = [0.0] DCNL DCSP  DCSP def ratelimited(*args, **kwargs): DCNL DCSP  DCSP  DCSP if (minrate is not None): DCNL DCSP  DCSP  DCSP  DCSP elapsed = (time.clock() - last[0]) DCNL DCSP  DCSP  DCSP  DCSP left = (minrate - elapsed) DCNL DCSP  DCSP  DCSP  DCSP if (left > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP time.sleep(left) DCNL DCSP  DCSP  DCSP  DCSP last[0] = time.clock() DCNL DCSP  DCSP  DCSP ret = f(*args, **kwargs) DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP return ratelimited DCNL DCSP return wrapper
def retry(retries=None, retry_pause=1): DCNL  DCSP def wrapper(f): DCNL DCSP  DCSP retry_count = 0 DCNL DCSP  DCSP def retried(*args, **kwargs): DCNL DCSP  DCSP  DCSP if (retries is not None): DCNL DCSP  DCSP  DCSP  DCSP ret = None DCNL DCSP  DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP  DCSP retry_count += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (retry_count >= retries): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise Exception(('Retry DCSP limit DCSP exceeded: DCSP %d' % retries)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ret = f(*args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ret: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP time.sleep(retry_pause) DCNL DCSP  DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP return retried DCNL DCSP return wrapper
def lang_exists(cursor, lang): DCNL  DCSP query = ("SELECT DCSP lanname DCSP FROM DCSP pg_language DCSP WHERE DCSP lanname='%s'" % lang) DCNL DCSP cursor.execute(query) DCNL DCSP return (cursor.rowcount > 0)
def lang_istrusted(cursor, lang): DCNL  DCSP query = ("SELECT DCSP lanpltrusted DCSP FROM DCSP pg_language DCSP WHERE DCSP lanname='%s'" % lang) DCNL DCSP cursor.execute(query) DCNL DCSP return cursor.fetchone()[0]
def lang_altertrust(cursor, lang, trust): DCNL  DCSP query = 'UPDATE DCSP pg_language DCSP SET DCSP lanpltrusted DCSP = DCSP %s DCSP WHERE DCSP lanname=%s' DCNL DCSP cursor.execute(query, (trust, lang)) DCNL DCSP return True
def lang_add(cursor, lang, trust): DCNL  DCSP if trust: DCNL DCSP  DCSP query = ('CREATE DCSP TRUSTED DCSP LANGUAGE DCSP "%s"' % lang) DCNL DCSP else: DCNL DCSP  DCSP query = ('CREATE DCSP LANGUAGE DCSP "%s"' % lang) DCNL DCSP cursor.execute(query) DCNL DCSP return True
def lang_drop(cursor, lang, cascade): DCNL  DCSP cursor.execute('SAVEPOINT DCSP ansible_pgsql_lang_drop') DCNL DCSP try: DCNL DCSP  DCSP if cascade: DCNL DCSP  DCSP  DCSP cursor.execute(('DROP DCSP LANGUAGE DCSP "%s" DCSP CASCADE' % lang)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cursor.execute(('DROP DCSP LANGUAGE DCSP "%s"' % lang)) DCNL DCSP except: DCNL DCSP  DCSP cursor.execute('ROLLBACK DCSP TO DCSP SAVEPOINT DCSP ansible_pgsql_lang_drop') DCNL DCSP  DCSP cursor.execute('RELEASE DCSP SAVEPOINT DCSP ansible_pgsql_lang_drop') DCNL DCSP  DCSP return False DCNL DCSP cursor.execute('RELEASE DCSP SAVEPOINT DCSP ansible_pgsql_lang_drop') DCNL DCSP return True
def user_add(cursor, user, password, role_attr_flags, encrypted, expires): DCNL  DCSP query_password_data = dict(password=password, expires=expires) DCNL DCSP query = [('CREATE DCSP USER DCSP %(user)s' % {'user': pg_quote_identifier(user, 'role')})] DCNL DCSP if (password is not None): DCNL DCSP  DCSP query.append(('WITH DCSP %(crypt)s' % {'crypt': encrypted})) DCNL DCSP  DCSP query.append('PASSWORD DCSP %(password)s') DCNL DCSP if (expires is not None): DCNL DCSP  DCSP query.append('VALID DCSP UNTIL DCSP %(expires)s') DCNL DCSP query.append(role_attr_flags) DCNL DCSP query = ' DCSP '.join(query) DCNL DCSP cursor.execute(query, query_password_data) DCNL DCSP return True
def user_alter(cursor, module, user, password, role_attr_flags, encrypted, expires, no_password_changes): DCNL  DCSP changed = False DCNL DCSP if (user == 'PUBLIC'): DCNL DCSP  DCSP if (password is not None): DCNL DCSP  DCSP  DCSP module.fail_json(msg='cannot DCSP change DCSP the DCSP password DCSP for DCSP PUBLIC DCSP user') DCNL DCSP  DCSP elif (role_attr_flags != ''): DCNL DCSP  DCSP  DCSP module.fail_json(msg='cannot DCSP change DCSP the DCSP role_attr_flags DCSP for DCSP PUBLIC DCSP user') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return False DCNL DCSP if ((not no_password_changes) and ((password is not None) or (role_attr_flags != ''))): DCNL DCSP  DCSP query_password_data = dict(password=password, expires=expires) DCNL DCSP  DCSP select = 'SELECT DCSP * DCSP FROM DCSP pg_authid DCSP where DCSP rolname=%(user)s' DCNL DCSP  DCSP cursor.execute(select, {'user': user}) DCNL DCSP  DCSP current_role_attrs = cursor.fetchone() DCNL DCSP  DCSP pwchanging = False DCNL DCSP  DCSP if (password is not None): DCNL DCSP  DCSP  DCSP if encrypted: DCNL DCSP  DCSP  DCSP  DCSP if password.startswith('md5'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (password != current_role_attrs['rolpassword']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pwchanging = True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP from passlib.hash import postgres_md5 as pm DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (pm.encrypt(password, user) != current_role_attrs['rolpassword']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pwchanging = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pwchanging = True DCNL DCSP  DCSP  DCSP elif (password != current_role_attrs['rolpassword']): DCNL DCSP  DCSP  DCSP  DCSP pwchanging = True DCNL DCSP  DCSP role_attr_flags_changing = False DCNL DCSP  DCSP if role_attr_flags: DCNL DCSP  DCSP  DCSP role_attr_flags_dict = {} DCNL DCSP  DCSP  DCSP for r in role_attr_flags.split(' DCSP '): DCNL DCSP  DCSP  DCSP  DCSP if r.startswith('NO'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP role_attr_flags_dict[r.replace('NO', '', 1)] = False DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP role_attr_flags_dict[r] = True DCNL DCSP  DCSP  DCSP for (role_attr_name, role_attr_value) in role_attr_flags_dict.items(): DCNL DCSP  DCSP  DCSP  DCSP if (current_role_attrs[PRIV_TO_AUTHID_COLUMN[role_attr_name]] != role_attr_value): DCNL DCSP  DCSP  DCSP  DCSP  DCSP role_attr_flags_changing = True DCNL DCSP  DCSP expires_changing = ((expires is not None) and (expires == current_roles_attrs['rol_valid_until'])) DCNL DCSP  DCSP if ((not pwchanging) and (not role_attr_flags_changing) and (not expires_changing)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP alter = [('ALTER DCSP USER DCSP %(user)s' % {'user': pg_quote_identifier(user, 'role')})] DCNL DCSP  DCSP if pwchanging: DCNL DCSP  DCSP  DCSP alter.append(('WITH DCSP %(crypt)s' % {'crypt': encrypted})) DCNL DCSP  DCSP  DCSP alter.append('PASSWORD DCSP %(password)s') DCNL DCSP  DCSP  DCSP alter.append(role_attr_flags) DCNL DCSP  DCSP elif role_attr_flags: DCNL DCSP  DCSP  DCSP alter.append(('WITH DCSP %s' % role_attr_flags)) DCNL DCSP  DCSP if (expires is not None): DCNL DCSP  DCSP  DCSP alter.append('VALID DCSP UNTIL DCSP %(expires)s') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cursor.execute(' DCSP '.join(alter), query_password_data) DCNL DCSP  DCSP except psycopg2.InternalError: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP if (e.pgcode == '25006'): DCNL DCSP  DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.pgerror) DCNL DCSP  DCSP  DCSP  DCSP return changed DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise psycopg2.InternalError(e) DCNL DCSP  DCSP cursor.execute(select, {'user': user}) DCNL DCSP  DCSP new_role_attrs = cursor.fetchone() DCNL DCSP  DCSP for i in range(len(current_role_attrs)): DCNL DCSP  DCSP  DCSP if (current_role_attrs[i] != new_role_attrs[i]): DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return changed
def user_delete(cursor, user): DCNL  DCSP cursor.execute('SAVEPOINT DCSP ansible_pgsql_user_delete') DCNL DCSP try: DCNL DCSP  DCSP cursor.execute(('DROP DCSP USER DCSP %s' % pg_quote_identifier(user, 'role'))) DCNL DCSP except: DCNL DCSP  DCSP cursor.execute('ROLLBACK DCSP TO DCSP SAVEPOINT DCSP ansible_pgsql_user_delete') DCNL DCSP  DCSP cursor.execute('RELEASE DCSP SAVEPOINT DCSP ansible_pgsql_user_delete') DCNL DCSP  DCSP return False DCNL DCSP cursor.execute('RELEASE DCSP SAVEPOINT DCSP ansible_pgsql_user_delete') DCNL DCSP return True
def has_table_privileges(cursor, user, table, privs): DCNL  DCSP cur_privs = get_table_privileges(cursor, user, table) DCNL DCSP have_currently = cur_privs.intersection(privs) DCNL DCSP other_current = cur_privs.difference(privs) DCNL DCSP desired = privs.difference(cur_privs) DCNL DCSP return (have_currently, other_current, desired)
def has_database_privileges(cursor, user, db, privs): DCNL  DCSP cur_privs = get_database_privileges(cursor, user, db) DCNL DCSP have_currently = cur_privs.intersection(privs) DCNL DCSP other_current = cur_privs.difference(privs) DCNL DCSP desired = privs.difference(cur_privs) DCNL DCSP return (have_currently, other_current, desired)
def parse_role_attrs(role_attr_flags): DCNL  DCSP if (',' in role_attr_flags): DCNL DCSP  DCSP flag_set = frozenset((r.upper() for r in role_attr_flags.split(','))) DCNL DCSP elif role_attr_flags: DCNL DCSP  DCSP flag_set = frozenset((role_attr_flags.upper(),)) DCNL DCSP else: DCNL DCSP  DCSP flag_set = frozenset() DCNL DCSP if (not flag_set.issubset(VALID_FLAGS)): DCNL DCSP  DCSP raise InvalidFlagsError(('Invalid DCSP role_attr_flags DCSP specified: DCSP %s' % ' DCSP '.join(flag_set.difference(VALID_FLAGS)))) DCNL DCSP o_flags = ' DCSP '.join(flag_set) DCNL DCSP return o_flags
def parse_privs(privs, db): DCNL  DCSP if (privs is None): DCNL DCSP  DCSP return privs DCNL DCSP o_privs = {'database': {}, 'table': {}} DCNL DCSP for token in privs.split('/'): DCNL DCSP  DCSP if (':' not in token): DCNL DCSP  DCSP  DCSP type_ = 'database' DCNL DCSP  DCSP  DCSP name = db DCNL DCSP  DCSP  DCSP priv_set = frozenset((x.strip().upper() for x in token.split(',') if x.strip())) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP type_ = 'table' DCNL DCSP  DCSP  DCSP (name, privileges) = token.split(':', 1) DCNL DCSP  DCSP  DCSP priv_set = frozenset((x.strip().upper() for x in privileges.split(',') if x.strip())) DCNL DCSP  DCSP if (not priv_set.issubset(VALID_PRIVS[type_])): DCNL DCSP  DCSP  DCSP raise InvalidPrivsError(('Invalid DCSP privs DCSP specified DCSP for DCSP %s: DCSP %s' % (type_, ' DCSP '.join(priv_set.difference(VALID_PRIVS[type_]))))) DCNL DCSP  DCSP priv_set = normalize_privileges(priv_set, type_) DCNL DCSP  DCSP o_privs[type_][name] = priv_set DCNL DCSP return o_privs
def partial(f, *args, **kwargs): DCNL  DCSP def g(*g_args, **g_kwargs): DCNL DCSP  DCSP new_kwargs = kwargs.copy() DCNL DCSP  DCSP new_kwargs.update(g_kwargs) DCNL DCSP  DCSP return f(*(args + g_args), **g_kwargs) DCNL DCSP g.f = f DCNL DCSP g.args = args DCNL DCSP g.kwargs = kwargs DCNL DCSP return g
def typedvalue(value): DCNL  DCSP try: DCNL DCSP  DCSP return int(value) DCNL DCSP except ValueError: DCNL DCSP  DCSP pass DCNL DCSP try: DCNL DCSP  DCSP return float(value) DCNL DCSP except ValueError: DCNL DCSP  DCSP pass DCNL DCSP return value
def setvariable(cursor, mysqlvar, value): DCNL  DCSP query = ('SET DCSP GLOBAL DCSP %s DCSP = DCSP ' % mysql_quote_identifier(mysqlvar, 'vars')) DCNL DCSP try: DCNL DCSP  DCSP cursor.execute((query + '%s'), (value,)) DCNL DCSP  DCSP cursor.fetchall() DCNL DCSP  DCSP result = True DCNL DCSP except Exception: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP result = str(e) DCNL DCSP return result
def privileges_get(cursor, user, host): DCNL  DCSP output = {} DCNL DCSP cursor.execute('SHOW DCSP GRANTS DCSP FOR DCSP %s@%s', (user, host)) DCNL DCSP grants = cursor.fetchall() DCNL DCSP def pick(x): DCNL DCSP  DCSP if (x == 'ALL DCSP PRIVILEGES'): DCNL DCSP  DCSP  DCSP return 'ALL' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return x DCNL DCSP for grant in grants: DCNL DCSP  DCSP res = re.match("GRANT DCSP (.+) DCSP ON DCSP (.+) DCSP TO DCSP '.*'@'.+'( DCSP IDENTIFIED DCSP BY DCSP PASSWORD DCSP '.+')? DCSP ?(.*)", grant[0]) DCNL DCSP  DCSP if (res is None): DCNL DCSP  DCSP  DCSP raise InvalidPrivsError(('unable DCSP to DCSP parse DCSP the DCSP MySQL DCSP grant DCSP string: DCSP %s' % grant[0])) DCNL DCSP  DCSP privileges = res.group(1).split(', DCSP ') DCNL DCSP  DCSP privileges = [pick(x) for x in privileges] DCNL DCSP  DCSP if ('WITH DCSP GRANT DCSP OPTION' in res.group(4)): DCNL DCSP  DCSP  DCSP privileges.append('GRANT') DCNL DCSP  DCSP if ('REQUIRE DCSP SSL' in res.group(4)): DCNL DCSP  DCSP  DCSP privileges.append('REQUIRESSL') DCNL DCSP  DCSP db = res.group(2) DCNL DCSP  DCSP output[db] = privileges DCNL DCSP return output
def privileges_unpack(priv, mode): DCNL  DCSP if (mode == 'ANSI'): DCNL DCSP  DCSP quote = '"' DCNL DCSP else: DCNL DCSP  DCSP quote = '`' DCNL DCSP output = {} DCNL DCSP privs = [] DCNL DCSP for item in priv.strip().split('/'): DCNL DCSP  DCSP pieces = item.strip().split(':') DCNL DCSP  DCSP dbpriv = pieces[0].rsplit('.', 1) DCNL DCSP  DCSP for (i, side) in enumerate(dbpriv): DCNL DCSP  DCSP  DCSP if (side.strip('`') != '*'): DCNL DCSP  DCSP  DCSP  DCSP dbpriv[i] = ('%s%s%s' % (quote, side.strip('`'), quote)) DCNL DCSP  DCSP pieces[0] = '.'.join(dbpriv) DCNL DCSP  DCSP if ('(' in pieces[1]): DCNL DCSP  DCSP  DCSP output[pieces[0]] = re.split(',\\s*(?=[^)]*(?:\\(|$))', pieces[1].upper()) DCNL DCSP  DCSP  DCSP for i in output[pieces[0]]: DCNL DCSP  DCSP  DCSP  DCSP privs.append(re.sub('\\(.*\\)', '', i)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP output[pieces[0]] = pieces[1].upper().split(',') DCNL DCSP  DCSP  DCSP privs = output[pieces[0]] DCNL DCSP  DCSP new_privs = frozenset(privs) DCNL DCSP  DCSP if (not new_privs.issubset(VALID_PRIVS)): DCNL DCSP  DCSP  DCSP raise InvalidPrivsError(('Invalid DCSP privileges DCSP specified: DCSP %s' % new_privs.difference(VALID_PRIVS))) DCNL DCSP if ('*.*' not in output): DCNL DCSP  DCSP output['*.*'] = ['USAGE'] DCNL DCSP if (('REQUIRESSL' in priv) and (not set(output['*.*']).difference(set(['GRANT', 'REQUIRESSL'])))): DCNL DCSP  DCSP output['*.*'].append('USAGE') DCNL DCSP return output
def check_compatibility(module, client): DCNL  DCSP loose_srv_version = LooseVersion(client.server_info()['version']) DCNL DCSP loose_driver_version = LooseVersion(PyMongoVersion) DCNL DCSP if ((loose_srv_version >= LooseVersion('3.2')) and (loose_driver_version < LooseVersion('3.2'))): DCNL DCSP  DCSP module.fail_json(msg=' DCSP (Note: DCSP you DCSP must DCSP use DCSP pymongo DCSP 3.2+ DCSP with DCSP MongoDB DCSP >= DCSP 3.2)') DCNL DCSP elif ((loose_srv_version >= LooseVersion('3.0')) and (loose_driver_version <= LooseVersion('2.8'))): DCNL DCSP  DCSP module.fail_json(msg=' DCSP (Note: DCSP you DCSP must DCSP use DCSP pymongo DCSP 2.8+ DCSP with DCSP MongoDB DCSP 3.0)') DCNL DCSP elif ((loose_srv_version >= LooseVersion('2.6')) and (loose_driver_version <= LooseVersion('2.7'))): DCNL DCSP  DCSP module.fail_json(msg=' DCSP (Note: DCSP you DCSP must DCSP use DCSP pymongo DCSP 2.7+ DCSP with DCSP MongoDB DCSP 2.6)') DCNL DCSP elif (LooseVersion(PyMongoVersion) <= LooseVersion('2.5')): DCNL DCSP  DCSP module.fail_json(msg=' DCSP (Note: DCSP you DCSP must DCSP be DCSP on DCSP mongodb DCSP 2.4+ DCSP and DCSP pymongo DCSP 2.5+ DCSP to DCSP use DCSP the DCSP roles DCSP param)')
def user_find(client, user, db_name): DCNL  DCSP for mongo_user in client['admin'].system.users.find(): DCNL DCSP  DCSP if (mongo_user['user'] == user): DCNL DCSP  DCSP  DCSP if ('db' not in mongo_user): DCNL DCSP  DCSP  DCSP  DCSP return mongo_user DCNL DCSP  DCSP  DCSP if (mongo_user['db'] == db_name): DCNL DCSP  DCSP  DCSP  DCSP return mongo_user DCNL DCSP return False
def normalize_image(image): DCNL  DCSP return ':'.join(get_split_image_tag(image))
def is_running(container): DCNL  DCSP return ((container['State']['Running'] == True) and (not container['State'].get('Ghost', False)))
def check_dependencies(module): DCNL  DCSP if (not HAS_DOCKER_PY): DCNL DCSP  DCSP module.fail_json(msg="`docker-py` DCSP doesn't DCSP seem DCSP to DCSP be DCSP installed, DCSP but DCSP is DCSP required DCSP for DCSP the DCSP Ansible DCSP Docker DCSP module.") DCNL DCSP else: DCNL DCSP  DCSP versioninfo = get_docker_py_versioninfo() DCNL DCSP  DCSP if (versioninfo < (0, 3, 0)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='The DCSP Ansible DCSP Docker DCSP module DCSP requires DCSP `docker-py` DCSP >= DCSP 0.3.0.')
def present(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP delta = (count - len(containers.deployed)) DCNL DCSP if (delta > 0): DCNL DCSP  DCSP created = manager.create_containers(delta) DCNL DCSP  DCSP containers.notice_changed(manager.get_inspect_containers(created)) DCNL DCSP if (delta < 0): DCNL DCSP  DCSP containers.deployed.sort((lambda cx, cy: cmp(is_running(cx), is_running(cy)))) DCNL DCSP  DCSP to_stop = [] DCNL DCSP  DCSP to_remove = [] DCNL DCSP  DCSP for c in containers.deployed[0:(- delta)]: DCNL DCSP  DCSP  DCSP if is_running(c): DCNL DCSP  DCSP  DCSP  DCSP to_stop.append(c) DCNL DCSP  DCSP  DCSP to_remove.append(c) DCNL DCSP  DCSP manager.stop_containers(to_stop) DCNL DCSP  DCSP containers.notice_changed(manager.get_inspect_containers(to_remove)) DCNL DCSP  DCSP manager.remove_containers(to_remove)
def started(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP delta = (count - len(containers.running)) DCNL DCSP if (delta > 0): DCNL DCSP  DCSP if (name and containers.deployed): DCNL DCSP  DCSP  DCSP manager.remove_containers(containers.deployed) DCNL DCSP  DCSP created = manager.create_containers(delta) DCNL DCSP  DCSP manager.start_containers(created) DCNL DCSP  DCSP containers.notice_changed(manager.get_inspect_containers(created)) DCNL DCSP if (delta < 0): DCNL DCSP  DCSP excess = containers.running[0:(- delta)] DCNL DCSP  DCSP containers.notice_changed(manager.get_inspect_containers(excess)) DCNL DCSP  DCSP manager.stop_containers(excess) DCNL DCSP  DCSP manager.remove_containers(excess)
def reloaded(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP for container in manager.get_differing_containers(): DCNL DCSP  DCSP manager.stop_containers([container]) DCNL DCSP  DCSP manager.remove_containers([container]) DCNL DCSP started(manager, containers, count, name)
def restarted(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP for container in manager.get_differing_containers(): DCNL DCSP  DCSP manager.stop_containers([container]) DCNL DCSP  DCSP manager.remove_containers([container]) DCNL DCSP containers.refresh() DCNL DCSP manager.restart_containers(containers.running) DCNL DCSP started(manager, containers, count, name)
def stopped(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP manager.stop_containers(containers.running) DCNL DCSP containers.notice_changed(manager.get_inspect_containers(containers.running))
def killed(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP manager.kill_containers(containers.running) DCNL DCSP containers.notice_changed(manager.get_inspect_containers(containers.running))
def absent(manager, containers, count, name): DCNL  DCSP containers.refresh() DCNL DCSP manager.stop_containers(containers.running) DCNL DCSP containers.notice_changed(manager.get_inspect_containers(containers.deployed)) DCNL DCSP manager.remove_containers(containers.deployed)
def rax_dns_record(module, comment=None, data=None, domain=None, name=None, overwrite=True, priority=None, record_type='A', state='present', ttl=7200): DCNL  DCSP changed = False DCNL DCSP dns = pyrax.cloud_dns DCNL DCSP if (not dns): DCNL DCSP  DCSP module.fail_json(msg='Failed DCSP to DCSP instantiate DCSP client. DCSP This DCSP typically DCSP indicates DCSP an DCSP invalid DCSP region DCSP or DCSP an DCSP incorrectly DCSP capitalized DCSP region DCSP name.') DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if ((not priority) and (record_type in ['MX', 'SRV'])): DCNL DCSP  DCSP  DCSP module.fail_json(msg='A DCSP "priority" DCSP attribute DCSP is DCSP required DCSP for DCSP creating DCSP a DCSP MX DCSP or DCSP SRV DCSP record') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP domain = dns.find(name=domain) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if overwrite: DCNL DCSP  DCSP  DCSP  DCSP record = domain.find_record(record_type, name=name) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP record = domain.find_record(record_type, name=name, data=data) DCNL DCSP  DCSP except pyrax.exceptions.DomainRecordNotUnique as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg='overwrite=true DCSP and DCSP there DCSP are DCSP multiple DCSP matching DCSP records') DCNL DCSP  DCSP except pyrax.exceptions.DomainRecordNotFound as e: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP record_data = {'type': record_type, 'name': name, 'data': data, 'ttl': ttl} DCNL DCSP  DCSP  DCSP  DCSP if comment: DCNL DCSP  DCSP  DCSP  DCSP  DCSP record_data.update(dict(comment=comment)) DCNL DCSP  DCSP  DCSP  DCSP if (priority and (record_type.upper() in ['MX', 'SRV'])): DCNL DCSP  DCSP  DCSP  DCSP  DCSP record_data.update(dict(priority=priority)) DCNL DCSP  DCSP  DCSP  DCSP record = domain.add_records([record_data])[0] DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP  DCSP update = {} DCNL DCSP  DCSP if (comment != getattr(record, 'comment', None)): DCNL DCSP  DCSP  DCSP update['comment'] = comment DCNL DCSP  DCSP if (ttl != getattr(record, 'ttl', None)): DCNL DCSP  DCSP  DCSP update['ttl'] = ttl DCNL DCSP  DCSP if (priority != getattr(record, 'priority', None)): DCNL DCSP  DCSP  DCSP update['priority'] = priority DCNL DCSP  DCSP if (data != getattr(record, 'data', None)): DCNL DCSP  DCSP  DCSP update['data'] = data DCNL DCSP  DCSP if update: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP record.update(**update) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP record.get() DCNL DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP elif (state == 'absent'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP domain = dns.find(name=domain) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP record = domain.find_record(record_type, name=name, data=data) DCNL DCSP  DCSP except pyrax.exceptions.DomainRecordNotFound as e: DCNL DCSP  DCSP  DCSP record = {} DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP except pyrax.exceptions.DomainRecordNotUnique as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP  DCSP if record: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP record.delete() DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s' % e.message)) DCNL DCSP module.exit_json(changed=changed, record=rax_to_dict(record))
def cloudfiles(module, container_, state, meta_, clear_meta, typ, ttl, public, private, web_index, web_error): DCNL  DCSP cf = pyrax.cloudfiles DCNL DCSP if (cf is None): DCNL DCSP  DCSP module.fail_json(msg='Failed DCSP to DCSP instantiate DCSP client. DCSP This DCSP typically DCSP indicates DCSP an DCSP invalid DCSP region DCSP or DCSP an DCSP incorrectly DCSP capitalized DCSP region DCSP name.') DCNL DCSP if (typ == 'container'): DCNL DCSP  DCSP container(cf, module, container_, state, meta_, clear_meta, ttl, public, private, web_index, web_error) DCNL DCSP else: DCNL DCSP  DCSP meta(cf, module, container_, state, meta_, clear_meta)
def _get_node(lb, node_id=None, address=None, port=None): DCNL  DCSP for node in getattr(lb, 'nodes', []): DCNL DCSP  DCSP match_list = [] DCNL DCSP  DCSP if (node_id is not None): DCNL DCSP  DCSP  DCSP match_list.append((getattr(node, 'id', None) == node_id)) DCNL DCSP  DCSP if (address is not None): DCNL DCSP  DCSP  DCSP match_list.append((getattr(node, 'address', None) == address)) DCNL DCSP  DCSP if (port is not None): DCNL DCSP  DCSP  DCSP match_list.append((getattr(node, 'port', None) == port)) DCNL DCSP  DCSP if (match_list and all(match_list)): DCNL DCSP  DCSP  DCSP return node DCNL DCSP return None
def _upload_folder(cf, folder, container, ttl=None, headers=None): DCNL  DCSP total_bytes = 0 DCNL DCSP for (root, dirs, files) in os.walk(folder): DCNL DCSP  DCSP for fname in files: DCNL DCSP  DCSP  DCSP full_path = os.path.join(root, fname) DCNL DCSP  DCSP  DCSP obj_name = os.path.relpath(full_path, folder) DCNL DCSP  DCSP  DCSP obj_size = os.path.getsize(full_path) DCNL DCSP  DCSP  DCSP cf.upload_file(container, full_path, obj_name=obj_name, return_none=True, ttl=ttl, headers=headers) DCNL DCSP  DCSP  DCSP total_bytes += obj_size DCNL DCSP return total_bytes
def upload(module, cf, container, src, dest, meta, expires): DCNL  DCSP if (not src): DCNL DCSP  DCSP module.fail_json(msg='src DCSP must DCSP be DCSP specified DCSP when DCSP uploading') DCNL DCSP c = _get_container(module, cf, container) DCNL DCSP src = os.path.abspath(os.path.expanduser(src)) DCNL DCSP is_dir = os.path.isdir(src) DCNL DCSP if (((not is_dir) and (not os.path.isfile(src))) or (not os.path.exists(src))): DCNL DCSP  DCSP module.fail_json(msg='src DCSP must DCSP be DCSP a DCSP file DCSP or DCSP a DCSP directory') DCNL DCSP if (dest and is_dir): DCNL DCSP  DCSP module.fail_json(msg='dest DCSP cannot DCSP be DCSP set DCSP when DCSP whole DCSP directories DCSP are DCSP uploaded') DCNL DCSP cont_obj = None DCNL DCSP total_bytes = 0 DCNL DCSP if (dest and (not is_dir)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cont_obj = c.upload_file(src, obj_name=dest, ttl=expires, headers=meta) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP elif is_dir: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP total_bytes = _upload_folder(cf, src, c, ttl=expires, headers=meta) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cont_obj = c.upload_file(src, ttl=expires, headers=meta) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP EXIT_DICT['success'] = True DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP EXIT_DICT['msg'] = ('Uploaded DCSP %s DCSP to DCSP container: DCSP %s' % (src, c.name)) DCNL DCSP if (cont_obj or (total_bytes > 0)): DCNL DCSP  DCSP EXIT_DICT['changed'] = True DCNL DCSP if meta: DCNL DCSP  DCSP EXIT_DICT['meta'] = dict(updated=True) DCNL DCSP if cont_obj: DCNL DCSP  DCSP EXIT_DICT['bytes'] = cont_obj.total_bytes DCNL DCSP  DCSP EXIT_DICT['etag'] = cont_obj.etag DCNL DCSP else: DCNL DCSP  DCSP EXIT_DICT['bytes'] = total_bytes DCNL DCSP module.exit_json(**EXIT_DICT)
def download(module, cf, container, src, dest, structure): DCNL  DCSP if (not dest): DCNL DCSP  DCSP module.fail_json(msg='dest DCSP is DCSP a DCSP required DCSP argument DCSP when DCSP downloading DCSP from DCSP Cloud DCSP Files') DCNL DCSP c = _get_container(module, cf, container) DCNL DCSP if src: DCNL DCSP  DCSP objs = src.split(',') DCNL DCSP  DCSP objs = map(str.strip, objs) DCNL DCSP else: DCNL DCSP  DCSP objs = c.get_object_names() DCNL DCSP dest = os.path.abspath(os.path.expanduser(dest)) DCNL DCSP is_dir = os.path.isdir(dest) DCNL DCSP if (not is_dir): DCNL DCSP  DCSP module.fail_json(msg='dest DCSP must DCSP be DCSP a DCSP directory') DCNL DCSP results = [] DCNL DCSP for obj in objs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP c.download_object(obj, dest, structure=structure) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results.append(obj) DCNL DCSP len_results = len(results) DCNL DCSP len_objs = len(objs) DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP EXIT_DICT['requested_downloaded'] = results DCNL DCSP if results: DCNL DCSP  DCSP EXIT_DICT['changed'] = True DCNL DCSP if (len_results == len_objs): DCNL DCSP  DCSP EXIT_DICT['success'] = True DCNL DCSP  DCSP EXIT_DICT['msg'] = ('%s DCSP objects DCSP downloaded DCSP to DCSP %s' % (len_results, dest)) DCNL DCSP else: DCNL DCSP  DCSP EXIT_DICT['msg'] = ('Error: DCSP only DCSP %s DCSP of DCSP %s DCSP objects DCSP were DCSP downloaded' % (len_results, len_objs)) DCNL DCSP module.exit_json(**EXIT_DICT)
def delete(module, cf, container, src, dest): DCNL  DCSP objs = None DCNL DCSP if (src and dest): DCNL DCSP  DCSP module.fail_json(msg='Error: DCSP ambiguous DCSP instructions; DCSP files DCSP to DCSP be DCSP deleted DCSP have DCSP been DCSP specified DCSP on DCSP both DCSP src DCSP and DCSP dest DCSP args') DCNL DCSP elif dest: DCNL DCSP  DCSP objs = dest DCNL DCSP else: DCNL DCSP  DCSP objs = src DCNL DCSP c = _get_container(module, cf, container) DCNL DCSP if objs: DCNL DCSP  DCSP objs = objs.split(',') DCNL DCSP  DCSP objs = map(str.strip, objs) DCNL DCSP else: DCNL DCSP  DCSP objs = c.get_object_names() DCNL DCSP num_objs = len(objs) DCNL DCSP results = [] DCNL DCSP for obj in objs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = c.delete_object(obj) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results.append(result) DCNL DCSP num_deleted = results.count(True) DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP EXIT_DICT['deleted'] = num_deleted DCNL DCSP EXIT_DICT['requested_deleted'] = objs DCNL DCSP if num_deleted: DCNL DCSP  DCSP EXIT_DICT['changed'] = True DCNL DCSP if (num_objs == num_deleted): DCNL DCSP  DCSP EXIT_DICT['success'] = True DCNL DCSP  DCSP EXIT_DICT['msg'] = ('%s DCSP objects DCSP deleted' % num_deleted) DCNL DCSP else: DCNL DCSP  DCSP EXIT_DICT['msg'] = ('Error: DCSP only DCSP %s DCSP of DCSP %s DCSP objects DCSP deleted' % (num_deleted, num_objs)) DCNL DCSP module.exit_json(**EXIT_DICT)
def get_meta(module, cf, container, src, dest): DCNL  DCSP c = _get_container(module, cf, container) DCNL DCSP objs = None DCNL DCSP if (src and dest): DCNL DCSP  DCSP module.fail_json(msg='Error: DCSP ambiguous DCSP instructions; DCSP files DCSP to DCSP be DCSP deleted DCSP have DCSP been DCSP specified DCSP on DCSP both DCSP src DCSP and DCSP dest DCSP args') DCNL DCSP elif dest: DCNL DCSP  DCSP objs = dest DCNL DCSP else: DCNL DCSP  DCSP objs = src DCNL DCSP if objs: DCNL DCSP  DCSP objs = objs.split(',') DCNL DCSP  DCSP objs = map(str.strip, objs) DCNL DCSP else: DCNL DCSP  DCSP objs = c.get_object_names() DCNL DCSP results = dict() DCNL DCSP for obj in objs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP meta = c.get_object(obj).get_metadata() DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results[obj] = dict() DCNL DCSP  DCSP  DCSP for (k, v) in meta.items(): DCNL DCSP  DCSP  DCSP  DCSP meta_key = k.split(META_PREFIX)[(-1)] DCNL DCSP  DCSP  DCSP  DCSP results[obj][meta_key] = v DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP if results: DCNL DCSP  DCSP EXIT_DICT['meta_results'] = results DCNL DCSP  DCSP EXIT_DICT['success'] = True DCNL DCSP module.exit_json(**EXIT_DICT)
def put_meta(module, cf, container, src, dest, meta, clear_meta): DCNL  DCSP objs = None DCNL DCSP if (src and dest): DCNL DCSP  DCSP module.fail_json(msg='Error: DCSP ambiguous DCSP instructions; DCSP files DCSP to DCSP set DCSP meta DCSP have DCSP been DCSP specified DCSP on DCSP both DCSP src DCSP and DCSP dest DCSP args') DCNL DCSP elif dest: DCNL DCSP  DCSP objs = dest DCNL DCSP else: DCNL DCSP  DCSP objs = src DCNL DCSP objs = objs.split(',') DCNL DCSP objs = map(str.strip, objs) DCNL DCSP c = _get_container(module, cf, container) DCNL DCSP results = [] DCNL DCSP for obj in objs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = c.get_object(obj).set_metadata(meta, clear=clear_meta) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results.append(result) DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP EXIT_DICT['success'] = True DCNL DCSP if results: DCNL DCSP  DCSP EXIT_DICT['changed'] = True DCNL DCSP  DCSP EXIT_DICT['num_changed'] = True DCNL DCSP module.exit_json(**EXIT_DICT)
def delete_meta(module, cf, container, src, dest, meta): DCNL  DCSP objs = None DCNL DCSP if (src and dest): DCNL DCSP  DCSP module.fail_json(msg='Error: DCSP ambiguous DCSP instructions; DCSP meta DCSP keys DCSP to DCSP be DCSP deleted DCSP have DCSP been DCSP specified DCSP on DCSP both DCSP src DCSP and DCSP dest DCSP args') DCNL DCSP elif dest: DCNL DCSP  DCSP objs = dest DCNL DCSP else: DCNL DCSP  DCSP objs = src DCNL DCSP objs = objs.split(',') DCNL DCSP objs = map(str.strip, objs) DCNL DCSP c = _get_container(module, cf, container) DCNL DCSP results = [] DCNL DCSP for obj in objs: DCNL DCSP  DCSP if meta: DCNL DCSP  DCSP  DCSP for (k, v) in meta.items(): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP result = c.get_object(obj).remove_metadata_key(k) DCNL DCSP  DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP results.append(result) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP o = c.get_object(obj) DCNL DCSP  DCSP  DCSP except pyrax.exc.NoSuchObject as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP  DCSP for (k, v) in o.get_metadata().items(): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP result = o.remove_metadata_key(k) DCNL DCSP  DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP  DCSP  DCSP results.append(result) DCNL DCSP EXIT_DICT['container'] = c.name DCNL DCSP EXIT_DICT['success'] = True DCNL DCSP if results: DCNL DCSP  DCSP EXIT_DICT['changed'] = True DCNL DCSP  DCSP EXIT_DICT['num_deleted'] = len(results) DCNL DCSP module.exit_json(**EXIT_DICT)
def cloudfiles(module, container, src, dest, method, typ, meta, clear_meta, structure, expires): DCNL  DCSP cf = pyrax.cloudfiles DCNL DCSP if (cf is None): DCNL DCSP  DCSP module.fail_json(msg='Failed DCSP to DCSP instantiate DCSP client. DCSP This DCSP typically DCSP indicates DCSP an DCSP invalid DCSP region DCSP or DCSP an DCSP incorrectly DCSP capitalized DCSP region DCSP name.') DCNL DCSP if (typ == 'file'): DCNL DCSP  DCSP if (method == 'put'): DCNL DCSP  DCSP  DCSP upload(module, cf, container, src, dest, meta, expires) DCNL DCSP  DCSP elif (method == 'get'): DCNL DCSP  DCSP  DCSP download(module, cf, container, src, dest, structure) DCNL DCSP  DCSP elif (method == 'delete'): DCNL DCSP  DCSP  DCSP delete(module, cf, container, src, dest) DCNL DCSP else: DCNL DCSP  DCSP if (method == 'get'): DCNL DCSP  DCSP  DCSP get_meta(module, cf, container, src, dest) DCNL DCSP  DCSP if (method == 'put'): DCNL DCSP  DCSP  DCSP put_meta(module, cf, container, src, dest, meta, clear_meta) DCNL DCSP  DCSP if (method == 'delete'): DCNL DCSP  DCSP  DCSP delete_meta(module, cf, container, src, dest, meta)
def get_ssh_certificate_tokens(module, ssh_cert_path): DCNL  DCSP (rc, stdout, stderr) = module.run_command(['openssl', 'x509', '-in', ssh_cert_path, '-fingerprint', '-noout']) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP generate DCSP the DCSP key DCSP fingerprint, DCSP error DCSP was: DCSP %s' % stderr)) DCNL DCSP fingerprint = stdout.strip()[17:].replace(':', '') DCNL DCSP (rc, stdout, stderr) = module.run_command(['openssl', 'pkcs12', '-export', '-in', ssh_cert_path, '-nokeys', '-password', 'pass:']) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP generate DCSP the DCSP pkcs12 DCSP signature DCSP from DCSP the DCSP certificate, DCSP error DCSP was: DCSP %s' % stderr)) DCNL DCSP pkcs12_base64 = base64.b64encode(stdout.strip()) DCNL DCSP return (fingerprint, pkcs12_base64)
def create_virtual_machine(module, azure): DCNL  DCSP name = module.params.get('name') DCNL DCSP os_type = module.params.get('os_type') DCNL DCSP hostname = (module.params.get('hostname') or (name + '.cloudapp.net')) DCNL DCSP endpoints = module.params.get('endpoints').split(',') DCNL DCSP ssh_cert_path = module.params.get('ssh_cert_path') DCNL DCSP user = module.params.get('user') DCNL DCSP password = module.params.get('password') DCNL DCSP location = module.params.get('location') DCNL DCSP role_size = module.params.get('role_size') DCNL DCSP storage_account = module.params.get('storage_account') DCNL DCSP image = module.params.get('image') DCNL DCSP virtual_network_name = module.params.get('virtual_network_name') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP changed = False DCNL DCSP cloud_service_name_available = azure.check_hosted_service_name_availability(name) DCNL DCSP if cloud_service_name_available.result: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = azure.create_hosted_service(service_name=name, label=name, location=location) DCNL DCSP  DCSP  DCSP _wait_for_completion(azure, result, wait_timeout, 'create_hosted_service') DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except AzureException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP the DCSP new DCSP service, DCSP error DCSP was: DCSP %s' % str(e))) DCNL DCSP try: DCNL DCSP  DCSP azure.get_role(name, name, name) DCNL DCSP except AzureMissingException: DCNL DCSP  DCSP if (os_type == 'linux'): DCNL DCSP  DCSP  DCSP disable_ssh_password_authentication = (not password) DCNL DCSP  DCSP  DCSP vm_config = LinuxConfigurationSet(hostname, user, password, disable_ssh_password_authentication) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP vm_config = WindowsConfigurationSet(hostname, password, None, module.params.get('auto_updates'), None, user) DCNL DCSP  DCSP  DCSP vm_config.domain_join = None DCNL DCSP  DCSP  DCSP if module.params.get('enable_winrm'): DCNL DCSP  DCSP  DCSP  DCSP listener = Listener('Http') DCNL DCSP  DCSP  DCSP  DCSP vm_config.win_rm.listeners.listeners.append(listener) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP vm_config.win_rm = None DCNL DCSP  DCSP if ssh_cert_path: DCNL DCSP  DCSP  DCSP (fingerprint, pkcs12_base64) = get_ssh_certificate_tokens(module, ssh_cert_path) DCNL DCSP  DCSP  DCSP result = azure.add_service_certificate(name, pkcs12_base64, 'pfx', '') DCNL DCSP  DCSP  DCSP _wait_for_completion(azure, result, wait_timeout, 'add_service_certificate') DCNL DCSP  DCSP  DCSP ssh_config = SSH() DCNL DCSP  DCSP  DCSP ssh_config.public_keys = PublicKeys() DCNL DCSP  DCSP  DCSP authorized_keys_path = (u'/home/%s/.ssh/authorized_keys' % user) DCNL DCSP  DCSP  DCSP ssh_config.public_keys.public_keys.append(PublicKey(path=authorized_keys_path, fingerprint=fingerprint)) DCNL DCSP  DCSP  DCSP vm_config.ssh = ssh_config DCNL DCSP  DCSP network_config = ConfigurationSetInputEndpoints() DCNL DCSP  DCSP network_config.configuration_set_type = 'NetworkConfiguration' DCNL DCSP  DCSP network_config.subnet_names = [] DCNL DCSP  DCSP network_config.public_ips = None DCNL DCSP  DCSP for port in endpoints: DCNL DCSP  DCSP  DCSP network_config.input_endpoints.append(ConfigurationSetInputEndpoint(name=('TCP-%s' % port), protocol='TCP', port=port, local_port=port)) DCNL DCSP  DCSP today = datetime.date.today().strftime('%Y-%m-%d') DCNL DCSP  DCSP disk_prefix = (u'%s-%s' % (name, name)) DCNL DCSP  DCSP media_link = (u'http://%s.blob.core.windows.net/vhds/%s-%s.vhd' % (storage_account, disk_prefix, today)) DCNL DCSP  DCSP os_hd = OSVirtualHardDisk(image, media_link) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = azure.create_virtual_machine_deployment(service_name=name, deployment_name=name, deployment_slot='production', label=name, role_name=name, system_config=vm_config, network_config=network_config, os_virtual_hard_disk=os_hd, role_size=role_size, role_type='PersistentVMRole', virtual_network_name=virtual_network_name) DCNL DCSP  DCSP  DCSP _wait_for_completion(azure, result, wait_timeout, 'create_virtual_machine_deployment') DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except AzureException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP the DCSP new DCSP virtual DCSP machine, DCSP error DCSP was: DCSP %s' % str(e))) DCNL DCSP try: DCNL DCSP  DCSP deployment = azure.get_deployment_by_name(service_name=name, deployment_name=name) DCNL DCSP  DCSP return (changed, urlparse(deployment.url).hostname, deployment) DCNL DCSP except AzureException as e: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP lookup DCSP the DCSP deployment DCSP information DCSP for DCSP %s, DCSP error DCSP was: DCSP %s' % (name, str(e))))
def terminate_virtual_machine(module, azure): DCNL  DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP name = module.params.get('name') DCNL DCSP delete_empty_services = module.params.get('delete_empty_services') DCNL DCSP changed = False DCNL DCSP deployment = None DCNL DCSP public_dns_name = None DCNL DCSP disk_names = [] DCNL DCSP try: DCNL DCSP  DCSP deployment = azure.get_deployment_by_name(service_name=name, deployment_name=name) DCNL DCSP except AzureMissingException as e: DCNL DCSP  DCSP pass DCNL DCSP except AzureException as e: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP find DCSP the DCSP deployment, DCSP error DCSP was: DCSP %s' % str(e))) DCNL DCSP if deployment: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP results = [] DCNL DCSP  DCSP  DCSP for role in deployment.role_list: DCNL DCSP  DCSP  DCSP  DCSP role_props = azure.get_role(name, deployment.name, role.role_name) DCNL DCSP  DCSP  DCSP  DCSP if (role_props.os_virtual_hard_disk.disk_name not in disk_names): DCNL DCSP  DCSP  DCSP  DCSP  DCSP disk_names.append(role_props.os_virtual_hard_disk.disk_name) DCNL DCSP  DCSP except AzureException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP get DCSP the DCSP role DCSP %s, DCSP error DCSP was: DCSP %s' % (role.role_name, str(e)))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = azure.delete_deployment(name, deployment.name) DCNL DCSP  DCSP  DCSP _wait_for_completion(azure, result, wait_timeout, 'delete_deployment') DCNL DCSP  DCSP except AzureException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP delete DCSP the DCSP deployment DCSP %s, DCSP error DCSP was: DCSP %s' % (deployment.name, str(e)))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP _delete_disks_when_detached(azure, wait_timeout, disk_names) DCNL DCSP  DCSP except (AzureException, TimeoutError) as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = azure.delete_hosted_service(service_name=name) DCNL DCSP  DCSP  DCSP _wait_for_completion(azure, result, wait_timeout, 'delete_hosted_service') DCNL DCSP  DCSP except AzureException as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP delete DCSP the DCSP service DCSP %s, DCSP error DCSP was: DCSP %s' % (name, str(e)))) DCNL DCSP  DCSP public_dns_name = urlparse(deployment.url).hostname DCNL DCSP return (changed, public_dns_name, deployment)
def virtual_network_to_dict(vnet): DCNL  DCSP results = dict(id=vnet.id, name=vnet.name, location=vnet.location, type=vnet.type, tags=vnet.tags, provisioning_state=vnet.provisioning_state, etag=vnet.etag) DCNL DCSP if (vnet.dhcp_options and (len(vnet.dhcp_options.dns_servers) > 0)): DCNL DCSP  DCSP results['dns_servers'] = [] DCNL DCSP  DCSP for server in vnet.dhcp_options.dns_servers: DCNL DCSP  DCSP  DCSP results['dns_servers'].append(server) DCNL DCSP if (vnet.address_space and (len(vnet.address_space.address_prefixes) > 0)): DCNL DCSP  DCSP results['address_prefixes'] = [] DCNL DCSP  DCSP for space in vnet.address_space.address_prefixes: DCNL DCSP  DCSP  DCSP results['address_prefixes'].append(space) DCNL DCSP return results
def validate_rule(rule, rule_type=None): DCNL  DCSP if (not rule.get('name')): DCNL DCSP  DCSP raise Exception('Rule DCSP name DCSP value DCSP is DCSP required.') DCNL DCSP priority = rule.get('priority', None) DCNL DCSP if (not priority): DCNL DCSP  DCSP raise Exception('Rule DCSP priority DCSP is DCSP required.') DCNL DCSP if (not isinstance(priority, (int, long))): DCNL DCSP  DCSP raise Exception('Rule DCSP priority DCSP attribute DCSP must DCSP be DCSP an DCSP integer.') DCNL DCSP if ((rule_type != 'default') and ((priority < 100) or (priority > 4096))): DCNL DCSP  DCSP raise Exception('Rule DCSP priority DCSP must DCSP be DCSP between DCSP 100 DCSP and DCSP 4096') DCNL DCSP if (not rule.get('access')): DCNL DCSP  DCSP rule['access'] = 'Allow' DCNL DCSP access_names = [member.value for member in SecurityRuleAccess] DCNL DCSP if (rule['access'] not in access_names): DCNL DCSP  DCSP raise Exception('Rule DCSP access DCSP must DCSP be DCSP one DCSP of DCSP [{0}]'.format(', DCSP '.join(access_names))) DCNL DCSP if (not rule.get('destination_address_prefix')): DCNL DCSP  DCSP rule['destination_address_prefix'] = '*' DCNL DCSP if (not rule.get('source_address_prefix')): DCNL DCSP  DCSP rule['source_address_prefix'] = '*' DCNL DCSP if (not rule.get('protocol')): DCNL DCSP  DCSP rule['protocol'] = '*' DCNL DCSP protocol_names = [member.value for member in SecurityRuleProtocol] DCNL DCSP if (rule['protocol'] not in protocol_names): DCNL DCSP  DCSP raise Exception('Rule DCSP protocol DCSP must DCSP be DCSP one DCSP of DCSP [{0}]'.format(', DCSP '.join(protocol_names))) DCNL DCSP if (not rule.get('direction')): DCNL DCSP  DCSP rule['direction'] = 'Inbound' DCNL DCSP direction_names = [member.value for member in SecurityRuleDirection] DCNL DCSP if (rule['direction'] not in direction_names): DCNL DCSP  DCSP raise Exception('Rule DCSP direction DCSP must DCSP be DCSP one DCSP of DCSP [{0}]'.format(', DCSP '.join(direction_names))) DCNL DCSP if (not rule.get('source_port_range')): DCNL DCSP  DCSP rule['source_port_range'] = '*' DCNL DCSP if (not rule.get('destination_port_range')): DCNL DCSP  DCSP rule['destination_port_range'] = '*'
def create_rule_instance(rule): DCNL  DCSP return SecurityRule(rule['protocol'], rule['source_address_prefix'], rule['destination_address_prefix'], rule['access'], rule['direction'], id=rule.get('id', None), description=rule.get('description', None), source_port_range=rule.get('source_port_range', None), destination_port_range=rule.get('destination_port_range', None), priority=rule.get('priority', None), provisioning_state=rule.get('provisioning_state', None), name=rule.get('name', None), etag=rule.get('etag', None))
def create_rule_dict_from_obj(rule): DCNL  DCSP return dict(id=rule.id, name=rule.name, description=rule.description, protocol=rule.protocol, source_port_range=rule.source_port_range, destination_port_range=rule.destination_port_range, source_address_prefix=rule.source_address_prefix, destination_address_prefix=rule.destination_address_prefix, access=rule.access, priority=rule.priority, direction=rule.direction, provisioning_state=rule.provisioning_state, etag=rule.etag)
def migrate_vm(vm_object, host_object): DCNL  DCSP relocate_spec = vim.vm.RelocateSpec(host=host_object) DCNL DCSP task_object = vm_object.Relocate(relocate_spec) DCNL DCSP return task_object
def power_state(vm, state, force): DCNL  DCSP power_status = vm.get_status() DCNL DCSP check_status = ' DCSP '.join(state.split('_')).upper() DCNL DCSP if ((not force) and (power_status in ['SUSPENDED', 'POWERING DCSP ON', 'RESETTING', 'BLOCKED DCSP ON DCSP MSG'])): DCNL DCSP  DCSP return ('VM DCSP is DCSP in DCSP %s DCSP power DCSP state. DCSP Force DCSP is DCSP required!' % power_status) DCNL DCSP if (power_status == check_status): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (state == 'powered_off'): DCNL DCSP  DCSP  DCSP  DCSP vm.power_off(sync_run=True) DCNL DCSP  DCSP  DCSP elif (state == 'powered_on'): DCNL DCSP  DCSP  DCSP  DCSP vm.power_on(sync_run=True) DCNL DCSP  DCSP  DCSP elif (state == 'restarted'): DCNL DCSP  DCSP  DCSP  DCSP if (power_status in ('POWERED DCSP ON', 'POWERING DCSP ON', 'RESETTING')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP vm.reset(sync_run=False) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return ('Cannot DCSP restart DCSP VM DCSP in DCSP the DCSP current DCSP state DCSP %s' % power_status) DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP return get_exception() DCNL DCSP return False
def gather_facts(vm): DCNL  DCSP vm.get_properties() DCNL DCSP facts = {'module_hw': True, 'hw_name': vm.properties.name, 'hw_power_status': vm.get_status(), 'hw_guest_full_name': vm.properties.config.guestFullName, 'hw_guest_id': vm.properties.config.guestId, 'hw_product_uuid': vm.properties.config.uuid, 'hw_instance_uuid': vm.properties.config.instanceUuid, 'hw_processor_count': vm.properties.config.hardware.numCPU, 'hw_memtotal_mb': vm.properties.config.hardware.memoryMB, 'hw_interfaces': []} DCNL DCSP netInfo = vm.get_property('net') DCNL DCSP netDict = {} DCNL DCSP if netInfo: DCNL DCSP  DCSP for net in netInfo: DCNL DCSP  DCSP  DCSP netDict[net['mac_address']] = net['ip_addresses'] DCNL DCSP ifidx = 0 DCNL DCSP for entry in vm.properties.config.hardware.device: DCNL DCSP  DCSP if (not hasattr(entry, 'macAddress')): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP factname = ('hw_eth' + str(ifidx)) DCNL DCSP  DCSP facts[factname] = {'addresstype': entry.addressType, 'label': entry.deviceInfo.label, 'macaddress': entry.macAddress, 'ipaddresses': netDict.get(entry.macAddress, None), 'macaddress_dash': entry.macAddress.replace(':', '-'), 'summary': entry.deviceInfo.summary} DCNL DCSP  DCSP facts['hw_interfaces'].append(('eth' + str(ifidx))) DCNL DCSP  DCSP ifidx += 1 DCNL DCSP return facts
def config_check(name, passed, default, module): DCNL  DCSP diff = DefaultVMConfig(passed, default) DCNL DCSP if len(diff.shallow_diff()): DCNL DCSP  DCSP module.fail_json(msg=('Missing DCSP required DCSP key/pair DCSP [%s]. DCSP %s DCSP must DCSP contain DCSP %s' % (', DCSP '.join(diff.shallow_diff()), name, default))) DCNL DCSP if diff.recursive_diff(): DCNL DCSP  DCSP module.fail_json(msg=('Config DCSP mismatch DCSP for DCSP %s DCSP on DCSP %s' % (name, diff.recursive_diff()))) DCNL DCSP return True
def vmware_path(datastore, datacenter, path): DCNL  DCSP path = ('/folder/%s' % path.lstrip('/')) DCNL DCSP datacenter = datacenter.replace('&', '%26') DCNL DCSP if (not path.startswith('/')): DCNL DCSP  DCSP path = ('/' + path) DCNL DCSP params = dict(dsName=datastore) DCNL DCSP if datacenter: DCNL DCSP  DCSP params['dcPath'] = datacenter DCNL DCSP params = urllib.urlencode(params) DCNL DCSP return ('%s?%s' % (path, params))
def get_obj(content, vimtype, name): DCNL  DCSP obj = None DCNL DCSP container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True) DCNL DCSP for c in container.view: DCNL DCSP  DCSP if name: DCNL DCSP  DCSP  DCSP if (c.name == name): DCNL DCSP  DCSP  DCSP  DCSP obj = c DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP obj = c DCNL DCSP  DCSP  DCSP break DCNL DCSP container.Destroy() DCNL DCSP return obj
def _needs_update(module, port, cloud): DCNL  DCSP compare_simple = ['admin_state_up', 'mac_address', 'device_owner', 'device_id'] DCNL DCSP compare_dict = ['allowed_address_pairs', 'extra_dhcp_opts'] DCNL DCSP compare_list = ['security_groups'] DCNL DCSP for key in compare_simple: DCNL DCSP  DCSP if ((module.params[key] is not None) and (module.params[key] != port[key])): DCNL DCSP  DCSP  DCSP return True DCNL DCSP for key in compare_dict: DCNL DCSP  DCSP if ((module.params[key] is not None) and (cmp(module.params[key], port[key]) != 0)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP for key in compare_list: DCNL DCSP  DCSP if ((module.params[key] is not None) and (set(module.params[key]) != set(port[key]))): DCNL DCSP  DCSP  DCSP return True DCNL DCSP if (module.params['no_security_groups'] and (port['security_groups'] != [])): DCNL DCSP  DCSP return True DCNL DCSP if (module.params['fixed_ips'] is not None): DCNL DCSP  DCSP for item in module.params['fixed_ips']: DCNL DCSP  DCSP  DCSP if ('ip_address' in item): DCNL DCSP  DCSP  DCSP  DCSP if (not any(((match['ip_address'] == item['ip_address']) for match in port['fixed_ips']))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP if ('subnet_id' in item): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP for item in port['fixed_ips']: DCNL DCSP  DCSP  DCSP if (not any(((match.get('ip_address') == item['ip_address']) for match in module.params['fixed_ips']))): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def _needs_update(module, secgroup): DCNL  DCSP if (secgroup['description'] != module.params['description']): DCNL DCSP  DCSP return True DCNL DCSP return False
def _system_state_change(state, device): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP if device: DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return True DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP if device: DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return False DCNL DCSP return False
def _can_update(subnet, module, cloud): DCNL  DCSP network_name = module.params['network_name'] DCNL DCSP cidr = module.params['cidr'] DCNL DCSP ip_version = int(module.params['ip_version']) DCNL DCSP ipv6_ra_mode = module.params['ipv6_ra_mode'] DCNL DCSP ipv6_a_mode = module.params['ipv6_address_mode'] DCNL DCSP if network_name: DCNL DCSP  DCSP network = cloud.get_network(network_name) DCNL DCSP  DCSP if network: DCNL DCSP  DCSP  DCSP netid = network['id'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('No DCSP network DCSP found DCSP for DCSP %s' % network_name)) DCNL DCSP  DCSP if (netid != subnet['network_id']): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Cannot DCSP update DCSP network_name DCSP in DCSP existing DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP subnet') DCNL DCSP if (ip_version and (subnet['ip_version'] != ip_version)): DCNL DCSP  DCSP module.fail_json(msg='Cannot DCSP update DCSP ip_version DCSP in DCSP existing DCSP subnet') DCNL DCSP if (ipv6_ra_mode and (subnet.get('ipv6_ra_mode', None) != ipv6_ra_mode)): DCNL DCSP  DCSP module.fail_json(msg='Cannot DCSP update DCSP ipv6_ra_mode DCSP in DCSP existing DCSP subnet') DCNL DCSP if (ipv6_a_mode and (subnet.get('ipv6_address_mode', None) != ipv6_a_mode)): DCNL DCSP  DCSP module.fail_json(msg='Cannot DCSP update DCSP ipv6_address_mode DCSP in DCSP existing DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP subnet')
def _needs_update(subnet, module, cloud): DCNL  DCSP _can_update(subnet, module, cloud) DCNL DCSP enable_dhcp = module.params['enable_dhcp'] DCNL DCSP subnet_name = module.params['name'] DCNL DCSP pool_start = module.params['allocation_pool_start'] DCNL DCSP pool_end = module.params['allocation_pool_end'] DCNL DCSP gateway_ip = module.params['gateway_ip'] DCNL DCSP no_gateway_ip = module.params['no_gateway_ip'] DCNL DCSP dns = module.params['dns_nameservers'] DCNL DCSP host_routes = module.params['host_routes'] DCNL DCSP curr_pool = subnet['allocation_pools'][0] DCNL DCSP if (subnet['enable_dhcp'] != enable_dhcp): DCNL DCSP  DCSP return True DCNL DCSP if (subnet_name and (subnet['name'] != subnet_name)): DCNL DCSP  DCSP return True DCNL DCSP if (pool_start and (curr_pool['start'] != pool_start)): DCNL DCSP  DCSP return True DCNL DCSP if (pool_end and (curr_pool['end'] != pool_end)): DCNL DCSP  DCSP return True DCNL DCSP if (gateway_ip and (subnet['gateway_ip'] != gateway_ip)): DCNL DCSP  DCSP return True DCNL DCSP if (dns and (sorted(subnet['dns_nameservers']) != sorted(dns))): DCNL DCSP  DCSP return True DCNL DCSP if host_routes: DCNL DCSP  DCSP curr_hr = sorted(subnet['host_routes'], key=(lambda t: t.keys())) DCNL DCSP  DCSP new_hr = sorted(host_routes, key=(lambda t: t.keys())) DCNL DCSP  DCSP if (sorted(curr_hr) != sorted(new_hr)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP if (no_gateway_ip and subnet['gateway_ip']): DCNL DCSP  DCSP return True DCNL DCSP return False
def _system_state_change(module, project_quota_output): DCNL  DCSP (changes_required, quota_change_request) = _system_state_change_details(module, project_quota_output) DCNL DCSP if changes_required: DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def _ports_match(protocol, module_min, module_max, rule_min, rule_max): DCNL  DCSP if (protocol == 'icmp'): DCNL DCSP  DCSP if (module_min and (int(module_min) == (-1))): DCNL DCSP  DCSP  DCSP module_min = None DCNL DCSP  DCSP if (module_max and (int(module_max) == (-1))): DCNL DCSP  DCSP  DCSP module_max = None DCNL DCSP if ((protocol in ['tcp', 'udp']) and (module_min is None) and (module_max is None)): DCNL DCSP  DCSP if (rule_min and (int(rule_min) == 1) and rule_max and (int(rule_max) == 65535)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP if module_min: DCNL DCSP  DCSP module_min = int(module_min) DCNL DCSP if module_max: DCNL DCSP  DCSP module_max = int(module_max) DCNL DCSP if rule_min: DCNL DCSP  DCSP rule_min = int(rule_min) DCNL DCSP if rule_max: DCNL DCSP  DCSP rule_max = int(rule_max) DCNL DCSP return ((module_min == rule_min) and (module_max == rule_max))
def _find_matching_rule(module, secgroup, remotegroup): DCNL  DCSP protocol = module.params['protocol'] DCNL DCSP remote_ip_prefix = module.params['remote_ip_prefix'] DCNL DCSP ethertype = module.params['ethertype'] DCNL DCSP direction = module.params['direction'] DCNL DCSP remote_group_id = remotegroup['id'] DCNL DCSP for rule in secgroup['security_group_rules']: DCNL DCSP  DCSP if ((protocol == rule['protocol']) and (remote_ip_prefix == rule['remote_ip_prefix']) and (ethertype == rule['ethertype']) and (direction == rule['direction']) and (remote_group_id == rule['remote_group_id']) and _ports_match(protocol, module.params['port_range_min'], module.params['port_range_max'], rule['port_range_min'], rule['port_range_max'])): DCNL DCSP  DCSP  DCSP return rule DCNL DCSP return None
def _wait(timeout, cloud, server, action): DCNL  DCSP for count in shade._utils._iterate_timeout(timeout, ('Timeout DCSP waiting DCSP for DCSP server DCSP to DCSP complete DCSP %s' % action)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP server = cloud.get_server(server.id) DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (server.status == _action_map[action]): DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP if (server.status == 'ERROR'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Server DCSP reached DCSP ERROR DCSP state DCSP while DCSP attempting DCSP to DCSP %s' % action))
def _system_state_change(action, status): DCNL  DCSP if (status == _action_map[action]): DCNL DCSP  DCSP return False DCNL DCSP return True
def _needs_update(cloud, module, router, network, internal_subnet_ids): DCNL  DCSP if (router['admin_state_up'] != module.params['admin_state_up']): DCNL DCSP  DCSP return True DCNL DCSP if router['external_gateway_info']: DCNL DCSP  DCSP if (router['external_gateway_info'].get('enable_snat', True) != module.params['enable_snat']): DCNL DCSP  DCSP  DCSP return True DCNL DCSP if network: DCNL DCSP  DCSP if (not router['external_gateway_info']): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP elif (router['external_gateway_info']['network_id'] != network['id']): DCNL DCSP  DCSP  DCSP return True DCNL DCSP if module.params['external_fixed_ips']: DCNL DCSP  DCSP for new_iface in module.params['external_fixed_ips']: DCNL DCSP  DCSP  DCSP subnet = cloud.get_subnet(new_iface['subnet']) DCNL DCSP  DCSP  DCSP exists = False DCNL DCSP  DCSP  DCSP for existing_iface in router['external_gateway_info']['external_fixed_ips']: DCNL DCSP  DCSP  DCSP  DCSP if (existing_iface['subnet_id'] == subnet['id']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ('ip' in new_iface): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (existing_iface['ip_address'] == new_iface['ip']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP exists = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP exists = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if (not exists): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP if module.params['interfaces']: DCNL DCSP  DCSP existing_subnet_ids = [] DCNL DCSP  DCSP for port in cloud.list_router_interfaces(router, 'internal'): DCNL DCSP  DCSP  DCSP if ('fixed_ips' in port): DCNL DCSP  DCSP  DCSP  DCSP for fixed_ip in port['fixed_ips']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP existing_subnet_ids.append(fixed_ip['subnet_id']) DCNL DCSP  DCSP if (set(internal_subnet_ids) != set(existing_subnet_ids)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def _system_state_change(cloud, module, router, network, internal_ids): DCNL  DCSP state = module.params['state'] DCNL DCSP if ((state == 'absent') and router): DCNL DCSP  DCSP return True DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if (not router): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return _needs_update(cloud, module, router, network, internal_ids) DCNL DCSP return False
def authenticate(endpoint, token, login_user, login_password, login_tenant_name): DCNL  DCSP if token: DCNL DCSP  DCSP return client.Client(endpoint=endpoint, token=token) DCNL DCSP else: DCNL DCSP  DCSP return client.Client(auth_url=endpoint, username=login_user, password=login_password, tenant_name=login_tenant_name)
def tenant_exists(keystone, tenant): DCNL  DCSP return (tenant in [x.name for x in keystone.tenants.list()])
def user_exists(keystone, user): DCNL  DCSP return (user in [x.name for x in keystone.users.list()])
def get_tenant(keystone, name): DCNL  DCSP tenants = [x for x in keystone.tenants.list() if (x.name == name)] DCNL DCSP count = len(tenants) DCNL DCSP if (count == 0): DCNL DCSP  DCSP raise KeyError(('No DCSP keystone DCSP tenants DCSP with DCSP name DCSP %s' % name)) DCNL DCSP elif (count > 1): DCNL DCSP  DCSP raise ValueError(('%d DCSP tenants DCSP with DCSP name DCSP %s' % (count, name))) DCNL DCSP else: DCNL DCSP  DCSP return tenants[0]
def get_user(keystone, name): DCNL  DCSP users = [x for x in keystone.users.list() if (x.name == name)] DCNL DCSP count = len(users) DCNL DCSP if (count == 0): DCNL DCSP  DCSP raise KeyError(('No DCSP keystone DCSP users DCSP with DCSP name DCSP %s' % name)) DCNL DCSP elif (count > 1): DCNL DCSP  DCSP raise ValueError(('%d DCSP users DCSP with DCSP name DCSP %s' % (count, name))) DCNL DCSP else: DCNL DCSP  DCSP return users[0]
def get_role(keystone, name): DCNL  DCSP roles = [x for x in keystone.roles.list() if (x.name == name)] DCNL DCSP count = len(roles) DCNL DCSP if (count == 0): DCNL DCSP  DCSP raise KeyError(('No DCSP keystone DCSP roles DCSP with DCSP name DCSP %s' % name)) DCNL DCSP elif (count > 1): DCNL DCSP  DCSP raise ValueError(('%d DCSP roles DCSP with DCSP name DCSP %s' % (count, name))) DCNL DCSP else: DCNL DCSP  DCSP return roles[0]
def ensure_tenant_exists(keystone, tenant_name, tenant_description, check_mode): DCNL  DCSP try: DCNL DCSP  DCSP tenant = get_tenant(keystone, tenant_name) DCNL DCSP except KeyError: DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP if (tenant.description == tenant_description): DCNL DCSP  DCSP  DCSP return (False, tenant.id) DCNL DCSP  DCSP elif check_mode: DCNL DCSP  DCSP  DCSP return (True, tenant.id) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP tenant.update(description=tenant_description) DCNL DCSP  DCSP  DCSP return (True, tenant.id) DCNL DCSP if check_mode: DCNL DCSP  DCSP return (True, None) DCNL DCSP ks_tenant = keystone.tenants.create(tenant_name=tenant_name, description=tenant_description, enabled=True) DCNL DCSP return (True, ks_tenant.id)
def ensure_tenant_absent(keystone, tenant, check_mode): DCNL  DCSP if (not tenant_exists(keystone, tenant)): DCNL DCSP  DCSP return False DCNL DCSP if check_mode: DCNL DCSP  DCSP return True
def ensure_user_exists(keystone, user_name, password, email, tenant_name, check_mode): DCNL  DCSP try: DCNL DCSP  DCSP user = get_user(keystone, user_name) DCNL DCSP except KeyError: DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP return (False, user.id) DCNL DCSP if check_mode: DCNL DCSP  DCSP return (True, None) DCNL DCSP tenant = get_tenant(keystone, tenant_name) DCNL DCSP user = keystone.users.create(name=user_name, password=password, email=email, tenant_id=tenant.id) DCNL DCSP return (True, user.id)
def ensure_user_role_exists(keystone, user_name, tenant_name, role_name, check_mode): DCNL  DCSP user = get_user(keystone, user_name) DCNL DCSP tenant = get_tenant(keystone, tenant_name) DCNL DCSP roles = [x for x in keystone.roles.roles_for_user(user, tenant) if (x.name == role_name)] DCNL DCSP count = len(roles) DCNL DCSP if (count == 1): DCNL DCSP  DCSP role = roles[0] DCNL DCSP  DCSP return (False, role.id) DCNL DCSP elif (count > 1): DCNL DCSP  DCSP raise ValueError(('%d DCSP roles DCSP with DCSP name DCSP %s' % (count, role_name))) DCNL DCSP if check_mode: DCNL DCSP  DCSP return (True, None) DCNL DCSP try: DCNL DCSP  DCSP role = get_role(keystone, role_name) DCNL DCSP except KeyError: DCNL DCSP  DCSP role = keystone.roles.create(role_name) DCNL DCSP keystone.roles.add_user_role(user, role, tenant) DCNL DCSP return (True, role.id)
def dispatch(keystone, user=None, password=None, tenant=None, tenant_description=None, email=None, role=None, state='present', endpoint=None, token=None, login_user=None, login_password=None, check_mode=False): DCNL  DCSP changed = False DCNL DCSP id = None DCNL DCSP if ((not tenant) and (not user) and role and (state == 'present')): DCNL DCSP  DCSP (changed, id) = ensure_role_exists(keystone, role) DCNL DCSP elif ((not tenant) and (not user) and role and (state == 'absent')): DCNL DCSP  DCSP changed = ensure_role_absent(keystone, role) DCNL DCSP elif (tenant and (not user) and (not role) and (state == 'present')): DCNL DCSP  DCSP (changed, id) = ensure_tenant_exists(keystone, tenant, tenant_description, check_mode) DCNL DCSP elif (tenant and (not user) and (not role) and (state == 'absent')): DCNL DCSP  DCSP changed = ensure_tenant_absent(keystone, tenant, check_mode) DCNL DCSP elif (tenant and user and (not role) and (state == 'present')): DCNL DCSP  DCSP (changed, id) = ensure_user_exists(keystone, user, password, email, tenant, check_mode) DCNL DCSP elif (tenant and user and (not role) and (state == 'absent')): DCNL DCSP  DCSP changed = ensure_user_absent(keystone, user, check_mode) DCNL DCSP elif (tenant and user and role and (state == 'present')): DCNL DCSP  DCSP (changed, id) = ensure_user_role_exists(keystone, user, tenant, role, check_mode) DCNL DCSP elif (tenant and user and role and (state == 'absent')): DCNL DCSP  DCSP changed = ensure_user_role_absent(keystone, user, tenant, role, check_mode) DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('Code DCSP should DCSP never DCSP reach DCSP here') DCNL DCSP return dict(changed=changed, id=id)
def _search_by_lun(disks_service, lun_id): DCNL  DCSP res = [disk for disk in disks_service.list(search='disk_type=lun') if (disk.lun_storage.id == lun_id)] DCNL DCSP return (res[0] if res else None)
def create_nic(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP server = module.params.get('server') DCNL DCSP lan = module.params.get('lan') DCNL DCSP name = module.params.get('name') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not uuid_match.match(server)): DCNL DCSP  DCSP server_list = profitbricks.list_servers(datacenter) DCNL DCSP  DCSP for s in server_list['items']: DCNL DCSP  DCSP  DCSP if (server == s['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP server = s['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP try: DCNL DCSP  DCSP n = NIC(name=name, lan=lan) DCNL DCSP  DCSP nic_response = profitbricks.create_nic(datacenter, server, n) DCNL DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP _wait_for_completion(profitbricks, nic_response, wait_timeout, 'create_nic') DCNL DCSP  DCSP return nic_response DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP the DCSP NIC: DCSP %s' % str(e)))
def delete_nic(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP server = module.params.get('server') DCNL DCSP name = module.params.get('name') DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP server_found = False DCNL DCSP if (not uuid_match.match(server)): DCNL DCSP  DCSP server_list = profitbricks.list_servers(datacenter) DCNL DCSP  DCSP for s in server_list['items']: DCNL DCSP  DCSP  DCSP if (server == s['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP server_found = True DCNL DCSP  DCSP  DCSP  DCSP server = s['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not server_found): DCNL DCSP  DCSP  DCSP return False DCNL DCSP nic_found = False DCNL DCSP if (not uuid_match.match(name)): DCNL DCSP  DCSP nic_list = profitbricks.list_nics(datacenter, server) DCNL DCSP  DCSP for n in nic_list['items']: DCNL DCSP  DCSP  DCSP if (name == n['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP nic_found = True DCNL DCSP  DCSP  DCSP  DCSP name = n['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not nic_found): DCNL DCSP  DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP nic_response = profitbricks.delete_nic(datacenter, server, name) DCNL DCSP  DCSP return nic_response DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP remove DCSP the DCSP NIC: DCSP %s' % str(e)))
def attach_volume(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP server = module.params.get('server') DCNL DCSP volume = module.params.get('volume') DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not uuid_match.match(server)): DCNL DCSP  DCSP server_list = profitbricks.list_servers(datacenter) DCNL DCSP  DCSP for s in server_list['items']: DCNL DCSP  DCSP  DCSP if (server == s['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP server = s['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not uuid_match.match(volume)): DCNL DCSP  DCSP volume_list = profitbricks.list_volumes(datacenter) DCNL DCSP  DCSP for v in volume_list['items']: DCNL DCSP  DCSP  DCSP if (volume == v['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP volume = v['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP return profitbricks.attach_volume(datacenter, server, volume)
def detach_volume(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP server = module.params.get('server') DCNL DCSP volume = module.params.get('volume') DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not uuid_match.match(server)): DCNL DCSP  DCSP server_list = profitbricks.list_servers(datacenter) DCNL DCSP  DCSP for s in server_list['items']: DCNL DCSP  DCSP  DCSP if (server == s['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP server = s['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not uuid_match.match(volume)): DCNL DCSP  DCSP volume_list = profitbricks.list_volumes(datacenter) DCNL DCSP  DCSP for v in volume_list['items']: DCNL DCSP  DCSP  DCSP if (volume == v['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP volume = v['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP return profitbricks.detach_volume(datacenter, server, volume)
def create_virtual_machine(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP name = module.params.get('name') DCNL DCSP auto_increment = module.params.get('auto_increment') DCNL DCSP count = module.params.get('count') DCNL DCSP lan = module.params.get('lan') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP failed = True DCNL DCSP datacenter_found = False DCNL DCSP virtual_machines = [] DCNL DCSP virtual_machine_ids = [] DCNL DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP datacenter_id = _get_datacenter_id(datacenter_list, datacenter) DCNL DCSP if datacenter_id: DCNL DCSP  DCSP datacenter_found = True DCNL DCSP if (not datacenter_found): DCNL DCSP  DCSP datacenter_response = _create_datacenter(module, profitbricks) DCNL DCSP  DCSP datacenter_id = datacenter_response['id'] DCNL DCSP  DCSP _wait_for_completion(profitbricks, datacenter_response, wait_timeout, 'create_virtual_machine') DCNL DCSP if auto_increment: DCNL DCSP  DCSP numbers = set() DCNL DCSP  DCSP count_offset = 1 DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (name % 0) DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP if e.message.startswith('not DCSP all'): DCNL DCSP  DCSP  DCSP  DCSP name = ('%s%%d' % name) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP number_range = xrange(count_offset, ((count_offset + count) + len(numbers))) DCNL DCSP  DCSP available_numbers = list(set(number_range).difference(numbers)) DCNL DCSP  DCSP names = [] DCNL DCSP  DCSP numbers_to_use = available_numbers[:count] DCNL DCSP  DCSP for number in numbers_to_use: DCNL DCSP  DCSP  DCSP names.append((name % number)) DCNL DCSP else: DCNL DCSP  DCSP names = [name] DCNL DCSP server_list = profitbricks.list_servers(datacenter_id) DCNL DCSP for name in names: DCNL DCSP  DCSP if _get_server_id(server_list, name): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP create_response = _create_machine(module, profitbricks, str(datacenter_id), name) DCNL DCSP  DCSP nics = profitbricks.list_nics(datacenter_id, create_response['id']) DCNL DCSP  DCSP for n in nics['items']: DCNL DCSP  DCSP  DCSP if (lan == n['properties']['lan']): DCNL DCSP  DCSP  DCSP  DCSP create_response.update({'public_ip': n['properties']['ips'][0]}) DCNL DCSP  DCSP virtual_machines.append(create_response) DCNL DCSP failed = False DCNL DCSP results = {'failed': failed, 'machines': virtual_machines, 'action': 'create', 'instance_ids': {'instances': [i['id'] for i in virtual_machines]}} DCNL DCSP return results
def remove_virtual_machine(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP instance_ids = module.params.get('instance_ids') DCNL DCSP remove_boot_volume = module.params.get('remove_boot_volume') DCNL DCSP changed = False DCNL DCSP if ((not isinstance(module.params.get('instance_ids'), list)) or (len(module.params.get('instance_ids')) < 1)): DCNL DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP virtual DCSP machine DCSP ids DCSP or DCSP names, DCSP aborting') DCNL DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP datacenter_id = _get_datacenter_id(datacenter_list, datacenter) DCNL DCSP if (not datacenter_id): DCNL DCSP  DCSP module.fail_json(msg=("Virtual DCSP data DCSP center DCSP '%s' DCSP not DCSP found." % str(datacenter))) DCNL DCSP server_list = profitbricks.list_servers(datacenter_id) DCNL DCSP for instance in instance_ids: DCNL DCSP  DCSP server_id = _get_server_id(server_list, instance) DCNL DCSP  DCSP if server_id: DCNL DCSP  DCSP  DCSP if remove_boot_volume: DCNL DCSP  DCSP  DCSP  DCSP _remove_boot_volume(module, profitbricks, datacenter_id, server_id) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP server_response = profitbricks.delete_server(datacenter_id, server_id) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP terminate DCSP the DCSP virtual DCSP server: DCSP %s' % str(e))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return changed
def _remove_boot_volume(module, profitbricks, datacenter_id, server_id): DCNL  DCSP try: DCNL DCSP  DCSP server = profitbricks.get_server(datacenter_id, server_id) DCNL DCSP  DCSP volume_id = server['properties']['bootVolume']['id'] DCNL DCSP  DCSP volume_response = profitbricks.delete_volume(datacenter_id, volume_id) DCNL DCSP except Exception: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=("failed DCSP to DCSP remove DCSP the DCSP server's DCSP boot DCSP volume: DCSP %s" % str(e)))
def startstop_machine(module, profitbricks, state): DCNL  DCSP if ((not isinstance(module.params.get('instance_ids'), list)) or (len(module.params.get('instance_ids')) < 1)): DCNL DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP virtual DCSP machine DCSP ids DCSP or DCSP names, DCSP aborting') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP changed = False DCNL DCSP datacenter = module.params.get('datacenter') DCNL DCSP instance_ids = module.params.get('instance_ids') DCNL DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP datacenter_id = _get_datacenter_id(datacenter_list, datacenter) DCNL DCSP if (not datacenter_id): DCNL DCSP  DCSP module.fail_json(msg=("Virtual DCSP data DCSP center DCSP '%s' DCSP not DCSP found." % str(datacenter))) DCNL DCSP server_list = profitbricks.list_servers(datacenter_id) DCNL DCSP for instance in instance_ids: DCNL DCSP  DCSP server_id = _get_server_id(server_list, instance) DCNL DCSP  DCSP if server_id: DCNL DCSP  DCSP  DCSP _startstop_machine(module, profitbricks, datacenter_id, server_id) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP if wait: DCNL DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP while (wait_timeout > time.time()): DCNL DCSP  DCSP  DCSP matched_instances = [] DCNL DCSP  DCSP  DCSP for res in profitbricks.list_servers(datacenter_id)['items']: DCNL DCSP  DCSP  DCSP  DCSP if (state == 'running'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (res['properties']['vmState'].lower() == state): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_instances.append(res) DCNL DCSP  DCSP  DCSP  DCSP elif (state == 'stopped'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (res['properties']['vmState'].lower() == 'shutoff'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP matched_instances.append(res) DCNL DCSP  DCSP  DCSP if (len(matched_instances) < len(instance_ids)): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (wait_timeout <= time.time()): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('wait DCSP for DCSP virtual DCSP machine DCSP state DCSP timeout DCSP on DCSP %s' % time.asctime())) DCNL DCSP return changed
def _get_datacenter_id(datacenters, identity): DCNL  DCSP for datacenter in datacenters['items']: DCNL DCSP  DCSP if (identity in (datacenter['properties']['name'], datacenter['id'])): DCNL DCSP  DCSP  DCSP return datacenter['id'] DCNL DCSP return None
def _get_server_id(servers, identity): DCNL  DCSP for server in servers['items']: DCNL DCSP  DCSP if (identity in (server['properties']['name'], server['id'])): DCNL DCSP  DCSP  DCSP return server['id'] DCNL DCSP return None
def create_datacenter(module, profitbricks): DCNL  DCSP name = module.params.get('name') DCNL DCSP location = module.params.get('location') DCNL DCSP description = module.params.get('description') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP virtual_datacenters = [] DCNL DCSP i = Datacenter(name=name, location=location, description=description) DCNL DCSP try: DCNL DCSP  DCSP datacenter_response = profitbricks.create_datacenter(datacenter=i) DCNL DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP _wait_for_completion(profitbricks, datacenter_response, wait_timeout, '_create_datacenter') DCNL DCSP  DCSP results = {'datacenter_id': datacenter_response['id']} DCNL DCSP  DCSP return results DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP the DCSP new DCSP datacenter: DCSP %s' % str(e)))
def remove_datacenter(module, profitbricks): DCNL  DCSP name = module.params.get('name') DCNL DCSP changed = False DCNL DCSP if uuid_match.match(name): DCNL DCSP  DCSP _remove_datacenter(module, profitbricks, name) DCNL DCSP  DCSP changed = True DCNL DCSP else: DCNL DCSP  DCSP datacenters = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenters['items']: DCNL DCSP  DCSP  DCSP vdc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (name == vdc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP name = d['id'] DCNL DCSP  DCSP  DCSP  DCSP _remove_datacenter(module, profitbricks, name) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return changed
def create_volume(module, profitbricks): DCNL  DCSP datacenter = module.params.get('datacenter') DCNL DCSP name = module.params.get('name') DCNL DCSP auto_increment = module.params.get('auto_increment') DCNL DCSP count = module.params.get('count') DCNL DCSP datacenter_found = False DCNL DCSP failed = True DCNL DCSP volumes = [] DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP datacenter_found = True DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (not datacenter_found): DCNL DCSP  DCSP module.fail_json(msg='datacenter DCSP could DCSP not DCSP be DCSP found.') DCNL DCSP if auto_increment: DCNL DCSP  DCSP numbers = set() DCNL DCSP  DCSP count_offset = 1 DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (name % 0) DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP if e.message.startswith('not DCSP all'): DCNL DCSP  DCSP  DCSP  DCSP name = ('%s%%d' % name) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=e.message) DCNL DCSP  DCSP number_range = xrange(count_offset, ((count_offset + count) + len(numbers))) DCNL DCSP  DCSP available_numbers = list(set(number_range).difference(numbers)) DCNL DCSP  DCSP names = [] DCNL DCSP  DCSP numbers_to_use = available_numbers[:count] DCNL DCSP  DCSP for number in numbers_to_use: DCNL DCSP  DCSP  DCSP names.append((name % number)) DCNL DCSP else: DCNL DCSP  DCSP names = ([name] * count) DCNL DCSP for name in names: DCNL DCSP  DCSP create_response = _create_volume(module, profitbricks, str(datacenter), name) DCNL DCSP  DCSP volumes.append(create_response) DCNL DCSP  DCSP _attach_volume(module, profitbricks, datacenter, create_response['id']) DCNL DCSP  DCSP failed = False DCNL DCSP results = {'failed': failed, 'volumes': volumes, 'action': 'create', 'instance_ids': {'instances': [i['id'] for i in volumes]}} DCNL DCSP return results
def delete_volume(module, profitbricks): DCNL  DCSP if ((not isinstance(module.params.get('instance_ids'), list)) or (len(module.params.get('instance_ids')) < 1)): DCNL DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP virtual DCSP machine DCSP ids DCSP or DCSP names, DCSP aborting') DCNL DCSP datacenter = module.params.get('datacenter') DCNL DCSP changed = False DCNL DCSP instance_ids = module.params.get('instance_ids') DCNL DCSP if (not uuid_match.match(datacenter)): DCNL DCSP  DCSP datacenter_list = profitbricks.list_datacenters() DCNL DCSP  DCSP for d in datacenter_list['items']: DCNL DCSP  DCSP  DCSP dc = profitbricks.get_datacenter(d['id']) DCNL DCSP  DCSP  DCSP if (datacenter == dc['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP datacenter = d['id'] DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP for n in instance_ids: DCNL DCSP  DCSP if uuid_match.match(n): DCNL DCSP  DCSP  DCSP _delete_volume(module, profitbricks, datacenter, volume) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP volumes = profitbricks.list_volumes(datacenter) DCNL DCSP  DCSP  DCSP for v in volumes['items']: DCNL DCSP  DCSP  DCSP  DCSP if (n == v['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP volume_id = v['id'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP _delete_volume(module, profitbricks, datacenter, volume_id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return changed
def _attach_volume(module, profitbricks, datacenter, volume): DCNL  DCSP server = module.params.get('server') DCNL DCSP if server: DCNL DCSP  DCSP if (not uuid_match.match(server)): DCNL DCSP  DCSP  DCSP server_list = profitbricks.list_servers(datacenter) DCNL DCSP  DCSP  DCSP for s in server_list['items']: DCNL DCSP  DCSP  DCSP  DCSP if (server == s['properties']['name']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP server = s['id'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return profitbricks.attach_volume(datacenter, server, volume) DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP attach DCSP volume: DCSP %s' % str(e)))
def create_script(command): DCNL  DCSP import os DCNL DCSP import os.path as path DCNL DCSP import subprocess DCNL DCSP import tempfile DCNL DCSP (fd, script_file) = tempfile.mkstemp(prefix='lxc-attach-script') DCNL DCSP f = os.fdopen(fd, 'wb') DCNL DCSP try: DCNL DCSP  DCSP f.write((ATTACH_TEMPLATE % {'container_command': command})) DCNL DCSP  DCSP f.flush() DCNL DCSP finally: DCNL DCSP  DCSP f.close() DCNL DCSP os.chmod(script_file, int('0700', 8)) DCNL DCSP stdout_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-log')[0], 'ab') DCNL DCSP stderr_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-err')[0], 'ab') DCNL DCSP try: DCNL DCSP  DCSP subprocess.Popen([script_file], stdout=stdout_file, stderr=stderr_file).communicate() DCNL DCSP finally: DCNL DCSP  DCSP stderr_file.close() DCNL DCSP  DCSP stdout_file.close() DCNL DCSP  DCSP os.remove(script_file)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(name=dict(type='str', required=True), template=dict(type='str', default='ubuntu'), backing_store=dict(type='str', choices=LXC_BACKING_STORE.keys(), default='dir'), template_options=dict(type='str'), config=dict(type='path'), vg_name=dict(type='str', default='lxc'), thinpool=dict(type='str'), fs_type=dict(type='str', default='ext4'), fs_size=dict(type='str', default='5G'), directory=dict(type='path'), zfs_root=dict(type='str'), lv_name=dict(type='str'), lxc_path=dict(type='path'), state=dict(choices=LXC_ANSIBLE_STATES.keys(), default='started'), container_command=dict(type='str'), container_config=dict(type='str'), container_log=dict(type='bool', default='false'), container_log_level=dict(choices=[n for i in LXC_LOGGING_LEVELS.values() for n in i], default='INFO'), clone_name=dict(type='str', required=False), clone_snapshot=dict(type='bool', default='false'), archive=dict(type='bool', default='false'), archive_path=dict(type='path'), archive_compression=dict(choices=LXC_COMPRESSION_MAP.keys(), default='gzip')), supports_check_mode=False, required_if=[('archive', True, ['archive_path'])]) DCNL DCSP if (not HAS_LXC): DCNL DCSP  DCSP module.fail_json(msg='The DCSP `lxc` DCSP module DCSP is DCSP not DCSP importable. DCSP Check DCSP the DCSP requirements.') DCNL DCSP lv_name = module.params.get('lv_name') DCNL DCSP if (not lv_name): DCNL DCSP  DCSP module.params['lv_name'] = module.params.get('name') DCNL DCSP lxc_manage = LxcContainerManagement(module=module) DCNL DCSP lxc_manage.run()
def serialize_device(device): DCNL  DCSP device_data = {} DCNL DCSP device_data['id'] = device.id DCNL DCSP device_data['hostname'] = device.hostname DCNL DCSP device_data['tags'] = device.tags DCNL DCSP device_data['locked'] = device.locked DCNL DCSP device_data['ip_addresses'] = [{'address': addr_data['address'], 'address_family': addr_data['address_family'], 'public': addr_data['public']} for addr_data in device.ip_addresses] DCNL DCSP for ipdata in device_data['ip_addresses']: DCNL DCSP  DCSP if ipdata['public']: DCNL DCSP  DCSP  DCSP if (ipdata['address_family'] == 6): DCNL DCSP  DCSP  DCSP  DCSP device_data['public_ipv6'] = ipdata['address'] DCNL DCSP  DCSP  DCSP elif (ipdata['address_family'] == 4): DCNL DCSP  DCSP  DCSP  DCSP device_data['public_ipv4'] = ipdata['address'] DCNL DCSP  DCSP elif (not ipdata['public']): DCNL DCSP  DCSP  DCSP if (ipdata['address_family'] == 6): DCNL DCSP  DCSP  DCSP  DCSP device_data['private_ipv6'] = ipdata['address'] DCNL DCSP  DCSP  DCSP elif (ipdata['address_family'] == 4): DCNL DCSP  DCSP  DCSP  DCSP device_data['private_ipv4'] = ipdata['address'] DCNL DCSP return device_data
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = err.message DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = ((((str(err.message) + ' DCSP ') + str(err)) + ' DCSP - DCSP ') + str(type(err))) DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def assert_policy_shape(policy): DCNL  DCSP errors = [] DCNL DCSP if (policy['Version'] != '2012-10-17'): DCNL DCSP  DCSP errors.append('Unknown DCSP version/date DCSP ({}) DCSP of DCSP policy. DCSP Things DCSP are DCSP probably DCSP different DCSP than DCSP we DCSP assumed DCSP they DCSP were.'.format(policy['Version'])) DCNL DCSP found_statement_type = {} DCNL DCSP for statement in policy['Statement']: DCNL DCSP  DCSP for (label, sidlabel) in statement_label.items(): DCNL DCSP  DCSP  DCSP if (statement['Sid'] == sidlabel): DCNL DCSP  DCSP  DCSP  DCSP found_statement_type[label] = True DCNL DCSP for statementtype in statement_label.keys(): DCNL DCSP  DCSP if (not found_statement_type.get(statementtype)): DCNL DCSP  DCSP  DCSP errors.append('Policy DCSP is DCSP missing DCSP {}.'.format(statementtype)) DCNL DCSP if len(errors): DCNL DCSP  DCSP raise Exception('Problems DCSP asserting DCSP policy DCSP shape. DCSP Cowardly DCSP refusing DCSP to DCSP modify DCSP it: DCSP {}'.format(' DCSP '.join(errors))) DCNL DCSP return None
def make_rule_key(prefix, rule, group_id, cidr_ip): DCNL  DCSP if isinstance(rule, dict): DCNL DCSP  DCSP (proto, from_port, to_port) = [rule.get(x, None) for x in ('proto', 'from_port', 'to_port')] DCNL DCSP  DCSP if ((proto not in ['icmp', 'tcp', 'udp']) and (from_port == (-1)) and (to_port == (-1))): DCNL DCSP  DCSP  DCSP from_port = 'none' DCNL DCSP  DCSP  DCSP to_port = 'none' DCNL DCSP else: DCNL DCSP  DCSP (proto, from_port, to_port) = [getattr(rule, x, None) for x in ('ip_protocol', 'from_port', 'to_port')] DCNL DCSP key = ('%s-%s-%s-%s-%s-%s' % (prefix, proto, from_port, to_port, group_id, cidr_ip)) DCNL DCSP return key.lower().replace('-none', '-None')
def get_target_from_rule(module, ec2, rule, name, group, groups, vpc_id): DCNL  DCSP FOREIGN_SECURITY_GROUP_REGEX = '^(\\S+)/(sg-\\S+)/(\\S+)' DCNL DCSP group_id = None DCNL DCSP group_name = None DCNL DCSP ip = None DCNL DCSP target_group_created = False DCNL DCSP if (('group_id' in rule) and ('cidr_ip' in rule)): DCNL DCSP  DCSP module.fail_json(msg='Specify DCSP group_id DCSP OR DCSP cidr_ip, DCSP not DCSP both') DCNL DCSP elif (('group_name' in rule) and ('cidr_ip' in rule)): DCNL DCSP  DCSP module.fail_json(msg='Specify DCSP group_name DCSP OR DCSP cidr_ip, DCSP not DCSP both') DCNL DCSP elif (('group_id' in rule) and ('group_name' in rule)): DCNL DCSP  DCSP module.fail_json(msg='Specify DCSP group_id DCSP OR DCSP group_name, DCSP not DCSP both') DCNL DCSP elif (('group_id' in rule) and re.match(FOREIGN_SECURITY_GROUP_REGEX, rule['group_id'])): DCNL DCSP  DCSP (owner_id, group_id, group_name) = re.match(FOREIGN_SECURITY_GROUP_REGEX, rule['group_id']).groups() DCNL DCSP  DCSP group_instance = SecurityGroup(owner_id=owner_id, name=group_name, id=group_id) DCNL DCSP  DCSP groups[group_id] = group_instance DCNL DCSP  DCSP groups[group_name] = group_instance DCNL DCSP elif ('group_id' in rule): DCNL DCSP  DCSP group_id = rule['group_id'] DCNL DCSP elif ('group_name' in rule): DCNL DCSP  DCSP group_name = rule['group_name'] DCNL DCSP  DCSP if (group_name == name): DCNL DCSP  DCSP  DCSP group_id = group.id DCNL DCSP  DCSP  DCSP groups[group_id] = group DCNL DCSP  DCSP  DCSP groups[group_name] = group DCNL DCSP  DCSP elif ((group_name in groups) and ((vpc_id is None) or (groups[group_name].vpc_id == vpc_id))): DCNL DCSP  DCSP  DCSP group_id = groups[group_name].id DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not rule.get('group_desc', '').strip()): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('group DCSP %s DCSP will DCSP be DCSP automatically DCSP created DCSP by DCSP rule DCSP %s DCSP and DCSP no DCSP description DCSP was DCSP provided' % (group_name, rule))) DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP auto_group = ec2.create_security_group(group_name, rule['group_desc'], vpc_id=vpc_id) DCNL DCSP  DCSP  DCSP  DCSP group_id = auto_group.id DCNL DCSP  DCSP  DCSP  DCSP groups[group_id] = auto_group DCNL DCSP  DCSP  DCSP  DCSP groups[group_name] = auto_group DCNL DCSP  DCSP  DCSP target_group_created = True DCNL DCSP elif ('cidr_ip' in rule): DCNL DCSP  DCSP ip = rule['cidr_ip'] DCNL DCSP return (group_id, ip, target_group_created)
def is_fakes3(s3_url): DCNL  DCSP if (s3_url is not None): DCNL DCSP  DCSP return (urlparse.urlparse(s3_url).scheme in ('fakes3', 'fakes3s')) DCNL DCSP else: DCNL DCSP  DCSP return False
def is_walrus(s3_url): DCNL  DCSP if (s3_url is not None): DCNL DCSP  DCSP o = urlparse.urlparse(s3_url) DCNL DCSP  DCSP return (not o.hostname.endswith('amazonaws.com')) DCNL DCSP else: DCNL DCSP  DCSP return False
def boto_supports_volume_encryption(): DCNL  DCSP return (hasattr(boto, 'Version') and (LooseVersion(boto.Version) >= LooseVersion('2.29.0')))
def boto_supports_kms_key_id(): DCNL  DCSP return (hasattr(boto, 'Version') and (LooseVersion(boto.Version) >= LooseVersion('2.39.0')))
def modify_dot_attribute(module, ec2, instance, device_name): DCNL  DCSP delete_on_termination = module.params.get('delete_on_termination') DCNL DCSP changed = False DCNL DCSP try: DCNL DCSP  DCSP instance.update() DCNL DCSP  DCSP dot = instance.block_device_mapping[device_name].delete_on_termination DCNL DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP if (delete_on_termination != dot): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP bdt = BlockDeviceType(delete_on_termination=delete_on_termination) DCNL DCSP  DCSP  DCSP bdm = BlockDeviceMapping() DCNL DCSP  DCSP  DCSP bdm[device_name] = bdt DCNL DCSP  DCSP  DCSP ec2.modify_instance_attribute(instance_id=instance.id, attribute='blockDeviceMapping', value=bdm) DCNL DCSP  DCSP  DCSP while (instance.block_device_mapping[device_name].delete_on_termination != delete_on_termination): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(3) DCNL DCSP  DCSP  DCSP  DCSP instance.update() DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP return changed
def iterate_all(attr, map_method, **kwargs): DCNL  DCSP args = dict(((key, value) for (key, value) in kwargs.items() if (value is not None))) DCNL DCSP wait = 1 DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP data = map_method(**args) DCNL DCSP  DCSP  DCSP for elm in data[attr]: DCNL DCSP  DCSP  DCSP  DCSP (yield elm) DCNL DCSP  DCSP  DCSP if ('NextMarker' in data): DCNL DCSP  DCSP  DCSP  DCSP args['Marker'] = data['Nextmarker'] DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if ((e.response['Error']['Code'] == 'ThrottlingException') and (wait < 600)): DCNL DCSP  DCSP  DCSP  DCSP sleep(wait) DCNL DCSP  DCSP  DCSP  DCSP wait = (wait * 2) DCNL DCSP  DCSP  DCSP  DCSP continue
def prefix_to_attr(attr_id): DCNL  DCSP attr_by_prefix = {'fsmt-': 'MountTargetId', 'subnet-': 'SubnetId', 'eni-': 'NetworkInterfaceId', 'sg-': 'SecurityGroups'} DCNL DCSP prefix = first_or_default(filter((lambda pref: str(attr_id).startswith(pref)), attr_by_prefix.keys())) DCNL DCSP if prefix: DCNL DCSP  DCSP return attr_by_prefix[prefix] DCNL DCSP return 'IpAddress'
def first_or_default(items, default=None): DCNL  DCSP for item in items: DCNL DCSP  DCSP return item DCNL DCSP return default
def has_tags(available, required): DCNL  DCSP for (key, value) in required.items(): DCNL DCSP  DCSP if ((key not in available) or (value != available[key])): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def has_targets(available, required): DCNL  DCSP grouped = group_list_of_dict(available) DCNL DCSP for (value, field) in required: DCNL DCSP  DCSP if ((field not in grouped) or (value not in grouped[field])): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def group_list_of_dict(array): DCNL  DCSP result = defaultdict(list) DCNL DCSP for item in array: DCNL DCSP  DCSP for (key, value) in item.items(): DCNL DCSP  DCSP  DCSP result[key] += (value if isinstance(value, list) else [value]) DCNL DCSP return result
def main(): DCNL  DCSP argument_spec = ec2_argument_spec() DCNL DCSP argument_spec.update(dict(id=dict(required=False, type='str', default=None), name=dict(required=False, type='str', default=None), tags=dict(required=False, type='dict', default={}), targets=dict(required=False, type='list', default=[]))) DCNL DCSP module = AnsibleModule(argument_spec=argument_spec) DCNL DCSP if (not HAS_BOTO3): DCNL DCSP  DCSP module.fail_json(msg='boto3 DCSP required DCSP for DCSP this DCSP module') DCNL DCSP (region, _, aws_connect_params) = get_aws_connection_info(module, boto3=True) DCNL DCSP connection = EFSConnection(module, region, **aws_connect_params) DCNL DCSP name = module.params.get('name') DCNL DCSP fs_id = module.params.get('id') DCNL DCSP tags = module.params.get('tags') DCNL DCSP targets = module.params.get('targets') DCNL DCSP file_systems_info = connection.get_file_systems(FileSystemId=fs_id, CreationToken=name) DCNL DCSP if tags: DCNL DCSP  DCSP file_systems_info = filter((lambda item: has_tags(item['Tags'], tags)), file_systems_info) DCNL DCSP if targets: DCNL DCSP  DCSP targets = [(item, prefix_to_attr(item)) for item in targets] DCNL DCSP  DCSP file_systems_info = filter((lambda item: has_targets(item['MountTargets'], targets)), file_systems_info) DCNL DCSP file_systems_info = [camel_dict_to_snake_dict(x) for x in file_systems_info] DCNL DCSP module.exit_json(changed=False, ansible_facts={'efs': file_systems_info})
def get_cloudwatchevents_client(module): DCNL  DCSP try: DCNL DCSP  DCSP (region, ec2_url, aws_conn_kwargs) = get_aws_connection_info(module, boto3=True) DCNL DCSP  DCSP if (not region): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Region DCSP must DCSP be DCSP specified DCSP as DCSP a DCSP parameter, DCSP in DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP EC2_REGION DCSP or DCSP AWS_REGION DCSP environment DCSP variables DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP or DCSP in DCSP boto DCSP configuration DCSP file') DCNL DCSP  DCSP return boto3_conn(module, conn_type='client', resource='events', region=region, endpoint=ec2_url, **aws_conn_kwargs) DCNL DCSP except boto3.exception.NoAuthHandlerFound as e: DCNL DCSP  DCSP module.fail_json(msg=str(e))
def get_url(module, url): DCNL  DCSP (r, info) = fetch_url(module, url) DCNL DCSP if (info['status'] != 200): DCNL DCSP  DCSP info['status_code'] = info['status'] DCNL DCSP  DCSP module.fail_json(**info) DCNL DCSP return r
def ubuntu(module): DCNL  DCSP release = module.params['release'] DCNL DCSP stream = module.params['stream'] DCNL DCSP store = module.params['store'] DCNL DCSP arch = module.params['arch'] DCNL DCSP region = module.params['region'] DCNL DCSP virt = module.params['virt'] DCNL DCSP url = get_ubuntu_url(release, stream) DCNL DCSP req = get_url(module, url) DCNL DCSP reader = csv.reader(req, delimiter=' DCTB ') DCNL DCSP try: DCNL DCSP  DCSP (ami, aki, ari, tag, serial) = lookup_ubuntu_ami(reader, release, stream, store, arch, region, virt) DCNL DCSP  DCSP module.exit_json(changed=False, ami=ami, aki=aki, ari=ari, tag=tag, serial=serial) DCNL DCSP except KeyError: DCNL DCSP  DCSP module.fail_json(msg='No DCSP matching DCSP AMI DCSP found')
def lookup_ubuntu_ami(table, release, stream, store, arch, region, virt): DCNL  DCSP expected = (release, stream, store, arch, region, virt) DCNL DCSP for row in table: DCNL DCSP  DCSP (actual_release, actual_stream, tag, serial, actual_store, actual_arch, actual_region, ami, aki, ari, actual_virt) = row DCNL DCSP  DCSP actual = (actual_release, actual_stream, actual_store, actual_arch, actual_region, actual_virt) DCNL DCSP  DCSP if (actual == expected): DCNL DCSP  DCSP  DCSP if (aki == ''): DCNL DCSP  DCSP  DCSP  DCSP aki = None DCNL DCSP  DCSP  DCSP if (ari == ''): DCNL DCSP  DCSP  DCSP  DCSP ari = None DCNL DCSP  DCSP  DCSP return (ami, aki, ari, tag, serial) DCNL DCSP raise KeyError()
def is_fakes3(s3_url): DCNL  DCSP if (s3_url is not None): DCNL DCSP  DCSP return (urlparse.urlparse(s3_url).scheme in ('fakes3', 'fakes3s')) DCNL DCSP else: DCNL DCSP  DCSP return False
def is_walrus(s3_url): DCNL  DCSP if (s3_url is not None): DCNL DCSP  DCSP o = urlparse.urlparse(s3_url) DCNL DCSP  DCSP return (not o.hostname.endswith('amazonaws.com')) DCNL DCSP else: DCNL DCSP  DCSP return False
def get_instance_info(inst): DCNL  DCSP instance_info = {'id': inst.id, 'ami_launch_index': inst.ami_launch_index, 'private_ip': inst.private_ip_address, 'private_dns_name': inst.private_dns_name, 'public_ip': inst.ip_address, 'dns_name': inst.dns_name, 'public_dns_name': inst.public_dns_name, 'state_code': inst.state_code, 'architecture': inst.architecture, 'image_id': inst.image_id, 'key_name': inst.key_name, 'placement': inst.placement, 'region': inst.placement[:(-1)], 'kernel': inst.kernel, 'ramdisk': inst.ramdisk, 'launch_time': inst.launch_time, 'instance_type': inst.instance_type, 'root_device_type': inst.root_device_type, 'root_device_name': inst.root_device_name, 'state': inst.state, 'hypervisor': inst.hypervisor, 'tags': inst.tags, 'groups': dict(((group.id, group.name) for group in inst.groups))} DCNL DCSP try: DCNL DCSP  DCSP instance_info['virtualization_type'] = getattr(inst, 'virtualization_type') DCNL DCSP except AttributeError: DCNL DCSP  DCSP instance_info['virtualization_type'] = None DCNL DCSP try: DCNL DCSP  DCSP instance_info['ebs_optimized'] = getattr(inst, 'ebs_optimized') DCNL DCSP except AttributeError: DCNL DCSP  DCSP instance_info['ebs_optimized'] = False DCNL DCSP try: DCNL DCSP  DCSP bdm_dict = {} DCNL DCSP  DCSP bdm = getattr(inst, 'block_device_mapping') DCNL DCSP  DCSP for device_name in bdm.keys(): DCNL DCSP  DCSP  DCSP bdm_dict[device_name] = {'status': bdm[device_name].status, 'volume_id': bdm[device_name].volume_id, 'delete_on_termination': bdm[device_name].delete_on_termination} DCNL DCSP  DCSP instance_info['block_device_mapping'] = bdm_dict DCNL DCSP except AttributeError: DCNL DCSP  DCSP instance_info['block_device_mapping'] = False DCNL DCSP try: DCNL DCSP  DCSP instance_info['tenancy'] = getattr(inst, 'placement_tenancy') DCNL DCSP except AttributeError: DCNL DCSP  DCSP instance_info['tenancy'] = 'default' DCNL DCSP return instance_info
def boto_supports_associate_public_ip_address(ec2): DCNL  DCSP try: DCNL DCSP  DCSP network_interface = boto.ec2.networkinterface.NetworkInterfaceSpecification() DCNL DCSP  DCSP getattr(network_interface, 'associate_public_ip_address') DCNL DCSP  DCSP return True DCNL DCSP except AttributeError: DCNL DCSP  DCSP return False
def boto_supports_profile_name_arg(ec2): DCNL  DCSP run_instances_method = getattr(ec2, 'run_instances') DCNL DCSP return ('instance_profile_name' in get_function_code(run_instances_method).co_varnames)
def boto_supports_volume_encryption(): DCNL  DCSP return (hasattr(boto, 'Version') and (LooseVersion(boto.Version) >= LooseVersion('2.29.0')))
def boto_supports_param_in_spot_request(ec2, param): DCNL  DCSP method = getattr(ec2, 'request_spot_instances') DCNL DCSP return (param in get_function_code(method).co_varnames)
def await_spot_requests(module, ec2, spot_requests, count): DCNL  DCSP spot_wait_timeout = int(module.params.get('spot_wait_timeout')) DCNL DCSP wait_complete = (time.time() + spot_wait_timeout) DCNL DCSP spot_req_inst_ids = dict() DCNL DCSP while (time.time() < wait_complete): DCNL DCSP  DCSP reqs = ec2.get_all_spot_instance_requests() DCNL DCSP  DCSP for sirb in spot_requests: DCNL DCSP  DCSP  DCSP if (sirb.id in spot_req_inst_ids): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP for sir in reqs: DCNL DCSP  DCSP  DCSP  DCSP if (sir.id != sirb.id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP if (sir.instance_id is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP spot_req_inst_ids[sirb.id] = sir.instance_id DCNL DCSP  DCSP  DCSP  DCSP elif (sir.state == 'open'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP elif (sir.state == 'active'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP elif (sir.state == 'failed'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Spot DCSP instance DCSP request DCSP %s DCSP failed DCSP with DCSP status DCSP %s DCSP and DCSP fault DCSP %s:%s' % (sir.id, sir.status.code, sir.fault.code, sir.fault.message))) DCNL DCSP  DCSP  DCSP  DCSP elif (sir.state == 'cancelled'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Spot DCSP instance DCSP request DCSP %s DCSP was DCSP cancelled DCSP before DCSP it DCSP could DCSP be DCSP fulfilled.' % sir.id)) DCNL DCSP  DCSP  DCSP  DCSP elif (sir.state == 'closed'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (sir.status.code == 'instance-terminated-by-user'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP spot_msg = 'Spot DCSP instance DCSP request DCSP %s DCSP was DCSP closed DCSP by DCSP AWS DCSP with DCSP the DCSP status DCSP %s DCSP and DCSP fault DCSP %s:%s' DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=(spot_msg % (sir.id, sir.status.code, sir.fault.code, sir.fault.message))) DCNL DCSP  DCSP if (len(spot_req_inst_ids) < count): DCNL DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return spot_req_inst_ids.values() DCNL DCSP module.fail_json(msg=('wait DCSP for DCSP spot DCSP requests DCSP timeout DCSP on DCSP %s' % time.asctime()))
def create_instances(module, ec2, vpc, override_count=None): DCNL  DCSP key_name = module.params.get('key_name') DCNL DCSP id = module.params.get('id') DCNL DCSP group_name = module.params.get('group') DCNL DCSP group_id = module.params.get('group_id') DCNL DCSP zone = module.params.get('zone') DCNL DCSP instance_type = module.params.get('instance_type') DCNL DCSP tenancy = module.params.get('tenancy') DCNL DCSP spot_price = module.params.get('spot_price') DCNL DCSP spot_type = module.params.get('spot_type') DCNL DCSP image = module.params.get('image') DCNL DCSP if override_count: DCNL DCSP  DCSP count = override_count DCNL DCSP else: DCNL DCSP  DCSP count = module.params.get('count') DCNL DCSP monitoring = module.params.get('monitoring') DCNL DCSP kernel = module.params.get('kernel') DCNL DCSP ramdisk = module.params.get('ramdisk') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP spot_wait_timeout = int(module.params.get('spot_wait_timeout')) DCNL DCSP placement_group = module.params.get('placement_group') DCNL DCSP user_data = module.params.get('user_data') DCNL DCSP instance_tags = module.params.get('instance_tags') DCNL DCSP vpc_subnet_id = module.params.get('vpc_subnet_id') DCNL DCSP assign_public_ip = module.boolean(module.params.get('assign_public_ip')) DCNL DCSP private_ip = module.params.get('private_ip') DCNL DCSP instance_profile_name = module.params.get('instance_profile_name') DCNL DCSP volumes = module.params.get('volumes') DCNL DCSP ebs_optimized = module.params.get('ebs_optimized') DCNL DCSP exact_count = module.params.get('exact_count') DCNL DCSP count_tag = module.params.get('count_tag') DCNL DCSP source_dest_check = module.boolean(module.params.get('source_dest_check')) DCNL DCSP termination_protection = module.boolean(module.params.get('termination_protection')) DCNL DCSP network_interfaces = module.params.get('network_interfaces') DCNL DCSP spot_launch_group = module.params.get('spot_launch_group') DCNL DCSP instance_initiated_shutdown_behavior = module.params.get('instance_initiated_shutdown_behavior') DCNL DCSP if (group_id and group_name): DCNL DCSP  DCSP module.fail_json(msg=str('Use DCSP only DCSP one DCSP type DCSP of DCSP parameter DCSP (group_name) DCSP or DCSP (group_id)')) DCNL DCSP vpc_id = None DCNL DCSP if vpc_subnet_id: DCNL DCSP  DCSP if (not vpc): DCNL DCSP  DCSP  DCSP module.fail_json(msg='region DCSP must DCSP be DCSP specified') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP vpc_id = vpc.get_all_subnets(subnet_ids=[vpc_subnet_id])[0].vpc_id DCNL DCSP else: DCNL DCSP  DCSP vpc_id = None DCNL DCSP try: DCNL DCSP  DCSP if group_name: DCNL DCSP  DCSP  DCSP if vpc_id: DCNL DCSP  DCSP  DCSP  DCSP grp_details = ec2.get_all_security_groups(filters={'vpc_id': vpc_id}) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP grp_details = ec2.get_all_security_groups() DCNL DCSP  DCSP  DCSP if isinstance(group_name, basestring): DCNL DCSP  DCSP  DCSP  DCSP group_name = [group_name] DCNL DCSP  DCSP  DCSP unmatched = set(group_name).difference((str(grp.name) for grp in grp_details)) DCNL DCSP  DCSP  DCSP if (len(unmatched) > 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('The DCSP following DCSP group DCSP names DCSP are DCSP not DCSP valid: DCSP %s' % ', DCSP '.join(unmatched))) DCNL DCSP  DCSP  DCSP group_id = [str(grp.id) for grp in grp_details if (str(grp.name) in group_name)] DCNL DCSP  DCSP elif group_id: DCNL DCSP  DCSP  DCSP if isinstance(group_id, basestring): DCNL DCSP  DCSP  DCSP  DCSP group_id = [group_id] DCNL DCSP  DCSP  DCSP grp_details = ec2.get_all_security_groups(group_ids=group_id) DCNL DCSP  DCSP  DCSP group_name = [grp_item.name for grp_item in grp_details] DCNL DCSP except boto.exception.NoAuthHandlerFound as e: DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP running_instances = [] DCNL DCSP count_remaining = int(count) DCNL DCSP if (id != None): DCNL DCSP  DCSP filter_dict = {'client-token': id, 'instance-state-name': 'running'} DCNL DCSP  DCSP previous_reservations = ec2.get_all_instances(None, filter_dict) DCNL DCSP  DCSP for res in previous_reservations: DCNL DCSP  DCSP  DCSP for prev_instance in res.instances: DCNL DCSP  DCSP  DCSP  DCSP running_instances.append(prev_instance) DCNL DCSP  DCSP count_remaining = (count_remaining - len(running_instances)) DCNL DCSP if (count_remaining == 0): DCNL DCSP  DCSP changed = False DCNL DCSP else: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP params = {'image_id': image, 'key_name': key_name, 'monitoring_enabled': monitoring, 'placement': zone, 'instance_type': instance_type, 'kernel_id': kernel, 'ramdisk_id': ramdisk, 'user_data': user_data} DCNL DCSP  DCSP  DCSP if ebs_optimized: DCNL DCSP  DCSP  DCSP  DCSP params['ebs_optimized'] = ebs_optimized DCNL DCSP  DCSP  DCSP if (not spot_price): DCNL DCSP  DCSP  DCSP  DCSP params['tenancy'] = tenancy DCNL DCSP  DCSP  DCSP if boto_supports_profile_name_arg(ec2): DCNL DCSP  DCSP  DCSP  DCSP params['instance_profile_name'] = instance_profile_name DCNL DCSP  DCSP  DCSP elif (instance_profile_name is not None): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='instance_profile_name DCSP parameter DCSP requires DCSP Boto DCSP version DCSP 2.5.0 DCSP or DCSP higher') DCNL DCSP  DCSP  DCSP if assign_public_ip: DCNL DCSP  DCSP  DCSP  DCSP if (not boto_supports_associate_public_ip_address(ec2)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='assign_public_ip DCSP parameter DCSP requires DCSP Boto DCSP version DCSP 2.13.0 DCSP or DCSP higher.') DCNL DCSP  DCSP  DCSP  DCSP elif (not vpc_subnet_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='assign_public_ip DCSP only DCSP available DCSP with DCSP vpc_subnet_id') DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if private_ip: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP interface = boto.ec2.networkinterface.NetworkInterfaceSpecification(subnet_id=vpc_subnet_id, private_ip_address=private_ip, groups=group_id, associate_public_ip_address=assign_public_ip) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP interface = boto.ec2.networkinterface.NetworkInterfaceSpecification(subnet_id=vpc_subnet_id, groups=group_id, associate_public_ip_address=assign_public_ip) DCNL DCSP  DCSP  DCSP  DCSP  DCSP interfaces = boto.ec2.networkinterface.NetworkInterfaceCollection(interface) DCNL DCSP  DCSP  DCSP  DCSP  DCSP params['network_interfaces'] = interfaces DCNL DCSP  DCSP  DCSP elif network_interfaces: DCNL DCSP  DCSP  DCSP  DCSP if isinstance(network_interfaces, basestring): DCNL DCSP  DCSP  DCSP  DCSP  DCSP network_interfaces = [network_interfaces] DCNL DCSP  DCSP  DCSP  DCSP interfaces = [] DCNL DCSP  DCSP  DCSP  DCSP for (i, network_interface_id) in enumerate(network_interfaces): DCNL DCSP  DCSP  DCSP  DCSP  DCSP interface = boto.ec2.networkinterface.NetworkInterfaceSpecification(network_interface_id=network_interface_id, device_index=i) DCNL DCSP  DCSP  DCSP  DCSP  DCSP interfaces.append(interface) DCNL DCSP  DCSP  DCSP  DCSP params['network_interfaces'] = boto.ec2.networkinterface.NetworkInterfaceCollection(*interfaces) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP params['subnet_id'] = vpc_subnet_id DCNL DCSP  DCSP  DCSP  DCSP if vpc_subnet_id: DCNL DCSP  DCSP  DCSP  DCSP  DCSP params['security_group_ids'] = group_id DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP params['security_groups'] = group_name DCNL DCSP  DCSP  DCSP if volumes: DCNL DCSP  DCSP  DCSP  DCSP bdm = BlockDeviceMapping() DCNL DCSP  DCSP  DCSP  DCSP for volume in volumes: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ('device_name' not in volume): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Device DCSP name DCSP must DCSP be DCSP set DCSP for DCSP volume') DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (('volume_size' not in volume) or (int(volume['volume_size']) > 0)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP bdm[volume['device_name']] = create_block_device(module, ec2, volume) DCNL DCSP  DCSP  DCSP  DCSP params['block_device_map'] = bdm DCNL DCSP  DCSP  DCSP if (not spot_price): DCNL DCSP  DCSP  DCSP  DCSP if (assign_public_ip and private_ip): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params.update(dict(min_count=count_remaining, max_count=count_remaining, client_token=id, placement_group=placement_group)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP params.update(dict(min_count=count_remaining, max_count=count_remaining, client_token=id, placement_group=placement_group, private_ip_address=private_ip)) DCNL DCSP  DCSP  DCSP  DCSP params['instance_initiated_shutdown_behavior'] = (instance_initiated_shutdown_behavior or 'stop') DCNL DCSP  DCSP  DCSP  DCSP res = ec2.run_instances(**params) DCNL DCSP  DCSP  DCSP  DCSP instids = [i.id for i in res.instances] DCNL DCSP  DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ec2.get_all_instances(instids) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('<Code>InvalidInstanceID.NotFound</Code>' in str(e)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP  DCSP  DCSP  DCSP terminated_instances = [str(instance.id) for instance in res.instances if (instance.state == 'terminated')] DCNL DCSP  DCSP  DCSP  DCSP if terminated_instances: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=((('Instances DCSP with DCSP id(s) DCSP %s DCSP ' % terminated_instances) + 'were DCSP created DCSP previously DCSP but DCSP have DCSP since DCSP been DCSP terminated DCSP - DCSP ') + "use DCSP a DCSP (possibly DCSP different) DCSP 'instanceid' DCSP parameter")) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if private_ip: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='private_ip DCSP only DCSP available DCSP with DCSP on-demand DCSP (non-spot) DCSP instances') DCNL DCSP  DCSP  DCSP  DCSP if boto_supports_param_in_spot_request(ec2, 'placement_group'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params['placement_group'] = placement_group DCNL DCSP  DCSP  DCSP  DCSP elif placement_group: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='placement_group DCSP parameter DCSP requires DCSP Boto DCSP version DCSP 2.3.0 DCSP or DCSP higher.') DCNL DCSP  DCSP  DCSP  DCSP if (instance_initiated_shutdown_behavior and (instance_initiated_shutdown_behavior != 'terminate')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='instance_initiated_shutdown_behavior=stop DCSP is DCSP not DCSP supported DCSP for DCSP spot DCSP instances.') DCNL DCSP  DCSP  DCSP  DCSP if (spot_launch_group and isinstance(spot_launch_group, basestring)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params['launch_group'] = spot_launch_group DCNL DCSP  DCSP  DCSP  DCSP params.update(dict(count=count_remaining, type=spot_type)) DCNL DCSP  DCSP  DCSP  DCSP res = ec2.request_spot_instances(spot_price, **params) DCNL DCSP  DCSP  DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP  DCSP  DCSP instids = await_spot_requests(module, ec2, res, count) DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Instance DCSP creation DCSP failed DCSP => DCSP %s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP  DCSP num_running = 0 DCNL DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP while ((wait_timeout > time.time()) and (num_running < len(instids))): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP res_list = ec2.get_all_instances(instids) DCNL DCSP  DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP  DCSP if (e.error_code == 'InvalidInstanceID.NotFound'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP num_running = 0 DCNL DCSP  DCSP  DCSP for res in res_list: DCNL DCSP  DCSP  DCSP  DCSP num_running += len([i for i in res.instances if (i.state == 'running')]) DCNL DCSP  DCSP  DCSP if (len(res_list) <= 0): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (wait and (num_running < len(instids))): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (wait and (wait_timeout <= time.time())): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('wait DCSP for DCSP instances DCSP running DCSP timeout DCSP on DCSP %s' % time.asctime())) DCNL DCSP  DCSP for res in res_list: DCNL DCSP  DCSP  DCSP running_instances.extend(res.instances) DCNL DCSP  DCSP if (source_dest_check is False): DCNL DCSP  DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP  DCSP inst.modify_attribute('sourceDestCheck', False) DCNL DCSP  DCSP if (termination_protection is True): DCNL DCSP  DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP  DCSP inst.modify_attribute('disableApiTermination', True) DCNL DCSP  DCSP if instance_tags: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP ec2.create_tags(instids, instance_tags) DCNL DCSP  DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Instance DCSP tagging DCSP failed DCSP => DCSP %s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP instance_dict_array = [] DCNL DCSP created_instance_ids = [] DCNL DCSP for inst in running_instances: DCNL DCSP  DCSP inst.update() DCNL DCSP  DCSP d = get_instance_info(inst) DCNL DCSP  DCSP created_instance_ids.append(inst.id) DCNL DCSP  DCSP instance_dict_array.append(d) DCNL DCSP return (instance_dict_array, created_instance_ids, changed)
def terminate_instances(module, ec2, instance_ids): DCNL  DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP changed = False DCNL DCSP instance_dict_array = [] DCNL DCSP if ((not isinstance(instance_ids, list)) or (len(instance_ids) < 1)): DCNL DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP instances, DCSP aborting') DCNL DCSP terminated_instance_ids = [] DCNL DCSP for res in ec2.get_all_instances(instance_ids): DCNL DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP if ((inst.state == 'running') or (inst.state == 'stopped')): DCNL DCSP  DCSP  DCSP  DCSP terminated_instance_ids.append(inst.id) DCNL DCSP  DCSP  DCSP  DCSP instance_dict_array.append(get_instance_info(inst)) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP ec2.terminate_instances([inst.id]) DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP terminate DCSP instance DCSP {0}, DCSP error: DCSP {1}'.format(inst.id, e)) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP if wait: DCNL DCSP  DCSP num_terminated = 0 DCNL DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP while ((wait_timeout > time.time()) and (num_terminated < len(terminated_instance_ids))): DCNL DCSP  DCSP  DCSP response = ec2.get_all_instances(instance_ids=terminated_instance_ids, filters={'instance-state-name': 'terminated'}) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP num_terminated = sum([len(res.instances) for res in response]) DCNL DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (num_terminated < len(terminated_instance_ids)): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP if ((wait_timeout < time.time()) and (num_terminated < len(terminated_instance_ids))): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('wait DCSP for DCSP instance DCSP termination DCSP timeout DCSP on DCSP %s' % time.asctime())) DCNL DCSP  DCSP instance_dict_array = [] DCNL DCSP  DCSP for res in ec2.get_all_instances(instance_ids=terminated_instance_ids, filters={'instance-state-name': 'terminated'}): DCNL DCSP  DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP  DCSP instance_dict_array.append(get_instance_info(inst)) DCNL DCSP return (changed, instance_dict_array, terminated_instance_ids)
def startstop_instances(module, ec2, instance_ids, state, instance_tags): DCNL  DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP source_dest_check = module.params.get('source_dest_check') DCNL DCSP termination_protection = module.params.get('termination_protection') DCNL DCSP changed = False DCNL DCSP instance_dict_array = [] DCNL DCSP if ((not isinstance(instance_ids, list)) or (len(instance_ids) < 1)): DCNL DCSP  DCSP if (not instance_tags): DCNL DCSP  DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP instances, DCSP aborting') DCNL DCSP filters = {} DCNL DCSP if instance_tags: DCNL DCSP  DCSP for (key, value) in instance_tags.items(): DCNL DCSP  DCSP  DCSP filters[('tag:' + key)] = value DCNL DCSP existing_instances_array = [] DCNL DCSP for res in ec2.get_all_instances(instance_ids, filters=filters): DCNL DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if ((inst.vpc_id is not None) and (inst.get_attribute('sourceDestCheck')['sourceDestCheck'] != source_dest_check)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP inst.modify_attribute('sourceDestCheck', source_dest_check) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except boto.exception.EC2ResponseError as exc: DCNL DCSP  DCSP  DCSP  DCSP if (exc.code == 'InvalidInstanceID'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP for interface in inst.interfaces: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (interface.source_dest_check != source_dest_check): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ec2.modify_network_interface_attribute(interface.id, 'sourceDestCheck', source_dest_check) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Failed DCSP to DCSP handle DCSP source_dest_check DCSP state DCSP for DCSP instance DCSP {0}, DCSP error: DCSP {1}'.format(inst.id, exc), exception=traceback.format_exc(exc)) DCNL DCSP  DCSP  DCSP if ((inst.get_attribute('disableApiTermination')['disableApiTermination'] != termination_protection) and (termination_protection is not None)): DCNL DCSP  DCSP  DCSP  DCSP inst.modify_attribute('disableApiTermination', termination_protection) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if (inst.state != state): DCNL DCSP  DCSP  DCSP  DCSP instance_dict_array.append(get_instance_info(inst)) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (state == 'running'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP inst.start() DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP inst.stop() DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP change DCSP state DCSP for DCSP instance DCSP {0}, DCSP error: DCSP {1}'.format(inst.id, e)) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP existing_instances_array.append(inst.id) DCNL DCSP instance_ids = list(set((existing_instances_array + (instance_ids or [])))) DCNL DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP while (wait and (wait_timeout > time.time())): DCNL DCSP  DCSP instance_dict_array = [] DCNL DCSP  DCSP matched_instances = [] DCNL DCSP  DCSP for res in ec2.get_all_instances(instance_ids): DCNL DCSP  DCSP  DCSP for i in res.instances: DCNL DCSP  DCSP  DCSP  DCSP if (i.state == state): DCNL DCSP  DCSP  DCSP  DCSP  DCSP instance_dict_array.append(get_instance_info(i)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP matched_instances.append(i) DCNL DCSP  DCSP if (len(matched_instances) < len(instance_ids)): DCNL DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP break DCNL DCSP if (wait and (wait_timeout <= time.time())): DCNL DCSP  DCSP module.fail_json(msg=('wait DCSP for DCSP instances DCSP running DCSP timeout DCSP on DCSP %s' % time.asctime())) DCNL DCSP return (changed, instance_dict_array, instance_ids)
def restart_instances(module, ec2, instance_ids, state, instance_tags): DCNL  DCSP source_dest_check = module.params.get('source_dest_check') DCNL DCSP termination_protection = module.params.get('termination_protection') DCNL DCSP changed = False DCNL DCSP instance_dict_array = [] DCNL DCSP if ((not isinstance(instance_ids, list)) or (len(instance_ids) < 1)): DCNL DCSP  DCSP if (not instance_tags): DCNL DCSP  DCSP  DCSP module.fail_json(msg='instance_ids DCSP should DCSP be DCSP a DCSP list DCSP of DCSP instances, DCSP aborting') DCNL DCSP filters = {} DCNL DCSP if instance_tags: DCNL DCSP  DCSP for (key, value) in instance_tags.items(): DCNL DCSP  DCSP  DCSP filters[('tag:' + key)] = value DCNL DCSP for res in ec2.get_all_instances(instance_ids, filters=filters): DCNL DCSP  DCSP for inst in res.instances: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if ((inst.vpc_id is not None) and (inst.get_attribute('sourceDestCheck')['sourceDestCheck'] != source_dest_check)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP inst.modify_attribute('sourceDestCheck', source_dest_check) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except boto.exception.EC2ResponseError as exc: DCNL DCSP  DCSP  DCSP  DCSP if (exc.code == 'InvalidInstanceID'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP for interface in inst.interfaces: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (interface.source_dest_check != source_dest_check): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ec2.modify_network_interface_attribute(interface.id, 'sourceDestCheck', source_dest_check) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Failed DCSP to DCSP handle DCSP source_dest_check DCSP state DCSP for DCSP instance DCSP {0}, DCSP error: DCSP {1}'.format(inst.id, exc), exception=traceback.format_exc(exc)) DCNL DCSP  DCSP  DCSP if ((inst.get_attribute('disableApiTermination')['disableApiTermination'] != termination_protection) and (termination_protection is not None)): DCNL DCSP  DCSP  DCSP  DCSP inst.modify_attribute('disableApiTermination', termination_protection) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if (inst.state != state): DCNL DCSP  DCSP  DCSP  DCSP instance_dict_array.append(get_instance_info(inst)) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP inst.reboot() DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP change DCSP state DCSP for DCSP instance DCSP {0}, DCSP error: DCSP {1}'.format(inst.id, e)) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return (changed, instance_dict_array, instance_ids)
def copy_image(module, ec2): DCNL  DCSP tags = module.params.get('tags') DCNL DCSP params = {'SourceRegion': module.params.get('source_region'), 'SourceImageId': module.params.get('source_image_id'), 'Name': module.params.get('name'), 'Description': module.params.get('description'), 'Encrypted': module.params.get('encrypted')} DCNL DCSP if module.params.get('kms_key_id'): DCNL DCSP  DCSP params['KmsKeyId'] = module.params.get('kms_key_id') DCNL DCSP try: DCNL DCSP  DCSP image_id = ec2.copy_image(**params)['ImageId'] DCNL DCSP  DCSP if module.params.get('wait'): DCNL DCSP  DCSP  DCSP ec2.get_waiter('image_available').wait(ImageIds=[image_id]) DCNL DCSP  DCSP if module.params.get('tags'): DCNL DCSP  DCSP  DCSP ec2.create_tags(Resources=[image_id], Tags=[{'Key': k, 'Value': v} for (k, v) in module.params.get('tags').items()]) DCNL DCSP  DCSP module.exit_json(changed=True, image_id=image_id) DCNL DCSP except WaiterError as we: DCNL DCSP  DCSP module.fail_json(msg=('An DCSP error DCSP occured DCSP waiting DCSP for DCSP the DCSP image DCSP to DCSP become DCSP available. DCSP (%s)' % we.reason)) DCNL DCSP except ClientError as ce: DCNL DCSP  DCSP module.fail_json(msg=ce.message) DCNL DCSP except NoCredentialsError: DCNL DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP authenticate, DCSP AWS DCSP credentials DCSP are DCSP invalid.') DCNL DCSP except Exception as e: DCNL DCSP  DCSP module.fail_json(msg=('Unhandled DCSP exception. DCSP (%s)' % str(e)))
def set_parameter(param, value, immediate): DCNL  DCSP converted_value = value DCNL DCSP if (param.type == 'string'): DCNL DCSP  DCSP converted_value = str(value) DCNL DCSP elif (param.type == 'integer'): DCNL DCSP  DCSP if isinstance(value, basestring): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP for modifier in INT_MODIFIERS.keys(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if value.endswith(modifier): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP converted_value = (int(value[:(-1)]) * INT_MODIFIERS[modifier]) DCNL DCSP  DCSP  DCSP  DCSP converted_value = int(converted_value) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP converted_value = str(value) DCNL DCSP  DCSP elif isinstance(value, bool): DCNL DCSP  DCSP  DCSP converted_value = (1 if value else 0) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP converted_value = int(value) DCNL DCSP elif (param.type == 'boolean'): DCNL DCSP  DCSP if isinstance(value, basestring): DCNL DCSP  DCSP  DCSP converted_value = (value in TRUE_VALUES) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP converted_value = bool(value) DCNL DCSP param.value = converted_value DCNL DCSP param.apply(immediate)
def modify_group(group, params, immediate=False): DCNL  DCSP changed = {} DCNL DCSP new_params = dict(params) DCNL DCSP for key in new_params.keys(): DCNL DCSP  DCSP if (key in group): DCNL DCSP  DCSP  DCSP param = group[key] DCNL DCSP  DCSP  DCSP new_value = new_params[key] DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP old_value = param.value DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP old_value = param._value DCNL DCSP  DCSP  DCSP if (old_value != new_value): DCNL DCSP  DCSP  DCSP  DCSP if (not param.is_modifiable): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise NotModifiableError(('Parameter DCSP %s DCSP is DCSP not DCSP modifiable.' % key)) DCNL DCSP  DCSP  DCSP  DCSP changed[key] = {'old': old_value, 'new': new_value} DCNL DCSP  DCSP  DCSP  DCSP set_parameter(param, new_value, immediate) DCNL DCSP  DCSP  DCSP  DCSP del new_params[key] DCNL DCSP return (changed, new_params)
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = err.message DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def _collect_facts(resource): DCNL  DCSP facts = {'identifier': resource['ClusterIdentifier'], 'create_time': resource['ClusterCreateTime'], 'status': resource['ClusterStatus'], 'username': resource['MasterUsername'], 'db_name': resource['DBName'], 'availability_zone': resource['AvailabilityZone'], 'maintenance_window': resource['PreferredMaintenanceWindow']} DCNL DCSP for node in resource['ClusterNodes']: DCNL DCSP  DCSP if (node['NodeRole'] in ('SHARED', 'LEADER')): DCNL DCSP  DCSP  DCSP facts['private_ip_address'] = node['PrivateIPAddress'] DCNL DCSP  DCSP  DCSP break DCNL DCSP return facts
def create_cluster(module, redshift): DCNL  DCSP identifier = module.params.get('identifier') DCNL DCSP node_type = module.params.get('node_type') DCNL DCSP username = module.params.get('username') DCNL DCSP password = module.params.get('password') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP changed = True DCNL DCSP params = {} DCNL DCSP for p in ('db_name', 'cluster_type', 'cluster_security_groups', 'vpc_security_group_ids', 'cluster_subnet_group_name', 'availability_zone', 'preferred_maintenance_window', 'cluster_parameter_group_name', 'automated_snapshot_retention_period', 'port', 'cluster_version', 'allow_version_upgrade', 'number_of_nodes', 'publicly_accessible', 'encrypted', 'elastic_ip'): DCNL DCSP  DCSP if (p in module.params): DCNL DCSP  DCSP  DCSP params[p] = module.params.get(p) DCNL DCSP try: DCNL DCSP  DCSP redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP  DCSP changed = False DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP redshift.create_cluster(identifier, node_type, username, password, **params) DCNL DCSP  DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP try: DCNL DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP if wait: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP while ((wait_timeout > time.time()) and (resource['ClusterStatus'] != 'available')): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP  DCSP if (wait_timeout <= time.time()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Timeout DCSP waiting DCSP for DCSP resource DCSP %s' % resource.id)) DCNL DCSP  DCSP  DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP  DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP return (changed, _collect_facts(resource))
def describe_cluster(module, redshift): DCNL  DCSP identifier = module.params.get('identifier') DCNL DCSP try: DCNL DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP return (True, _collect_facts(resource))
def delete_cluster(module, redshift): DCNL  DCSP identifier = module.params.get('identifier') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP try: DCNL DCSP  DCSP redshift.delete_custer(identifier) DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP if wait: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP  DCSP  DCSP while ((wait_timeout > time.time()) and (resource['ClusterStatus'] != 'deleting')): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP  DCSP if (wait_timeout <= time.time()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Timeout DCSP waiting DCSP for DCSP resource DCSP %s' % resource.id)) DCNL DCSP  DCSP  DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP  DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP return (True, {})
def modify_cluster(module, redshift): DCNL  DCSP identifier = module.params.get('identifier') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = module.params.get('wait_timeout') DCNL DCSP params = {} DCNL DCSP for p in ('cluster_type', 'cluster_security_groups', 'vpc_security_group_ids', 'cluster_subnet_group_name', 'availability_zone', 'preferred_maintenance_window', 'cluster_parameter_group_name', 'automated_snapshot_retention_period', 'port', 'cluster_version', 'allow_version_upgrade', 'number_of_nodes', 'new_cluster_identifier'): DCNL DCSP  DCSP if (p in module.params): DCNL DCSP  DCSP  DCSP params[p] = module.params.get(p) DCNL DCSP try: DCNL DCSP  DCSP redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP redshift.modify_cluster(identifier, **params) DCNL DCSP  DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP try: DCNL DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP if wait: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP while ((wait_timeout > time.time()) and (resource['ClusterStatus'] != 'available')): DCNL DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP  DCSP if (wait_timeout <= time.time()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Timeout DCSP waiting DCSP for DCSP resource DCSP %s' % resource.id)) DCNL DCSP  DCSP  DCSP  DCSP resource = redshift.describe_clusters(identifier)['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0] DCNL DCSP  DCSP except boto.exception.JSONResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP return (True, _collect_facts(resource))
def enforce_required_arguments(module): DCNL  DCSP missing_args = [] DCNL DCSP for arg in ('min_size', 'max_size', 'launch_config_name'): DCNL DCSP  DCSP if (module.params[arg] is None): DCNL DCSP  DCSP  DCSP missing_args.append(arg) DCNL DCSP if missing_args: DCNL DCSP  DCSP module.fail_json(msg=('Missing DCSP required DCSP arguments DCSP for DCSP autoscaling DCSP group DCSP create/update: DCSP %s' % ','.join(missing_args)))
def _get_most_recent_snapshot(snapshots, max_snapshot_age_secs=None, now=None): DCNL  DCSP if (len(snapshots) == 0): DCNL DCSP  DCSP return None DCNL DCSP if (not now): DCNL DCSP  DCSP now = datetime.datetime.utcnow() DCNL DCSP youngest_snapshot = max(snapshots, key=_get_snapshot_starttime) DCNL DCSP snapshot_start = datetime.datetime.strptime(youngest_snapshot.start_time, '%Y-%m-%dT%H:%M:%S.000Z') DCNL DCSP snapshot_age = (now - snapshot_start) DCNL DCSP if (max_snapshot_age_secs is not None): DCNL DCSP  DCSP if (snapshot_age.total_seconds() > max_snapshot_age_secs): DCNL DCSP  DCSP  DCSP return None DCNL DCSP return youngest_snapshot
def _create_with_wait(snapshot, wait_timeout_secs, sleep_func=time.sleep): DCNL  DCSP time_waited = 0 DCNL DCSP snapshot.update() DCNL DCSP while (snapshot.status != 'completed'): DCNL DCSP  DCSP sleep_func(3) DCNL DCSP  DCSP snapshot.update() DCNL DCSP  DCSP time_waited += 3 DCNL DCSP  DCSP if (wait_timeout_secs and (time_waited > wait_timeout_secs)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def fetch_dhcp_options_for_vpc(vpc_conn, vpc_id): DCNL  DCSP vpcs = vpc_conn.get_all_vpcs(vpc_ids=[vpc_id]) DCNL DCSP if ((len(vpcs) != 1) or (vpcs[0].dhcp_options_id == 'default')): DCNL DCSP  DCSP return None DCNL DCSP dhcp_options = vpc_conn.get_all_dhcp_options(dhcp_options_ids=[vpcs[0].dhcp_options_id]) DCNL DCSP if (len(dhcp_options) != 1): DCNL DCSP  DCSP return None DCNL DCSP return dhcp_options[0]
def match_dhcp_options(vpc_conn, tags=None, options=None): DCNL  DCSP dhcp_options = vpc_conn.get_all_dhcp_options() DCNL DCSP for dopts in dhcp_options: DCNL DCSP  DCSP if ((not tags) or (get_resource_tags(vpc_conn, dopts.id) == tags)): DCNL DCSP  DCSP  DCSP if ((not options) or (dopts.options == options)): DCNL DCSP  DCSP  DCSP  DCSP return (True, dopts) DCNL DCSP return (False, None)
def to_dict(items, key, value): DCNL  DCSP if items: DCNL DCSP  DCSP return dict(zip([i[key] for i in items], [i[value] for i in items])) DCNL DCSP else: DCNL DCSP  DCSP return dict()
def pc(key): DCNL  DCSP return ''.join([token.capitalize() for token in key.split('_')])
def set_api_params(module, module_params): DCNL  DCSP api_params = dict() DCNL DCSP for param in module_params: DCNL DCSP  DCSP module_param = module.params.get(param, None) DCNL DCSP  DCSP if module_param: DCNL DCSP  DCSP  DCSP api_params[pc(param)] = module_param DCNL DCSP return api_params
def validate_params(module, aws): DCNL  DCSP function_name = module.params['function_name'] DCNL DCSP if (not re.search('^[\\w\\-:]+$', function_name)): DCNL DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP {0} DCSP is DCSP invalid. DCSP Names DCSP must DCSP contain DCSP only DCSP alphanumeric DCSP characters DCSP and DCSP hyphens.'.format(function_name)) DCNL DCSP if (len(function_name) > 64): DCNL DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP "{0}" DCSP exceeds DCSP 64 DCSP character DCSP limit'.format(function_name)) DCNL DCSP if (module.params['function_version'] == 0): DCNL DCSP  DCSP module.params['function_version'] = '$LATEST' DCNL DCSP else: DCNL DCSP  DCSP module.params['function_version'] = str(module.params['function_version']) DCNL DCSP return
def get_lambda_alias(module, aws): DCNL  DCSP client = aws.client('lambda') DCNL DCSP api_params = set_api_params(module, ('function_name', 'name')) DCNL DCSP try: DCNL DCSP  DCSP results = client.get_alias(**api_params) DCNL DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP results = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP retrieving DCSP function DCSP alias: DCSP {0}'.format(e)) DCNL DCSP return results
def lambda_alias(module, aws): DCNL  DCSP client = aws.client('lambda') DCNL DCSP results = dict() DCNL DCSP changed = False DCNL DCSP current_state = 'absent' DCNL DCSP state = module.params['state'] DCNL DCSP facts = get_lambda_alias(module, aws) DCNL DCSP if facts: DCNL DCSP  DCSP current_state = 'present' DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if (current_state == 'present'): DCNL DCSP  DCSP  DCSP alias_params = ('function_version', 'description') DCNL DCSP  DCSP  DCSP for param in alias_params: DCNL DCSP  DCSP  DCSP  DCSP if (module.params.get(param) != facts.get(pc(param))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP  DCSP api_params = set_api_params(module, ('function_name', 'name')) DCNL DCSP  DCSP  DCSP  DCSP api_params.update(set_api_params(module, alias_params)) DCNL DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP results = client.update_alias(**api_params) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP updating DCSP function DCSP alias: DCSP {0}'.format(e)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP api_params = set_api_params(module, ('function_name', 'name', 'function_version', 'description')) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP results = client.create_alias(**api_params) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP creating DCSP function DCSP alias: DCSP {0}'.format(e)) DCNL DCSP elif (current_state == 'present'): DCNL DCSP  DCSP api_params = set_api_params(module, ('function_name', 'name')) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP results = client.delete_alias(**api_params) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP deleting DCSP function DCSP alias: DCSP {0}'.format(e)) DCNL DCSP return dict(changed=changed, **dict((results or facts)))
def main(): DCNL  DCSP argument_spec = ec2_argument_spec() DCNL DCSP argument_spec.update(dict(state=dict(required=False, default='present', choices=['present', 'absent']), function_name=dict(required=True, default=None), name=dict(required=True, default=None, aliases=['alias_name']), function_version=dict(type='int', required=False, default=0, aliases=['version']), description=dict(required=False, default=None))) DCNL DCSP module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True, mutually_exclusive=[], required_together=[]) DCNL DCSP if (not HAS_BOTO3): DCNL DCSP  DCSP module.fail_json(msg='boto3 DCSP is DCSP required DCSP for DCSP this DCSP module.') DCNL DCSP aws = AWSConnection(module, ['lambda']) DCNL DCSP validate_params(module, aws) DCNL DCSP results = lambda_alias(module, aws) DCNL DCSP module.exit_json(**camel_dict_to_snake_dict(results))
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = ((((str(err.message) + ' DCSP ') + str(err)) + ' DCSP - DCSP ') + str(type(err))) DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def calculate_multipart_etag(source_path, chunk_size=DEFAULT_CHUNK_SIZE): DCNL  DCSP md5s = [] DCNL DCSP with open(source_path, 'rb') as fp: DCNL DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP data = fp.read(chunk_size) DCNL DCSP  DCSP  DCSP if (not data): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP md5s.append(hashlib.md5(data)) DCNL DCSP if (len(md5s) == 1): DCNL DCSP  DCSP new_etag = '"{}"'.format(md5s[0].hexdigest()) DCNL DCSP else: DCNL DCSP  DCSP digests = ''.join((m.digest() for m in md5s)) DCNL DCSP  DCSP new_md5 = hashlib.md5(digests) DCNL DCSP  DCSP new_etag = '"{}-{}"'.format(new_md5.hexdigest(), len(md5s)) DCNL DCSP return new_etag
def calculate_local_etag(filelist, key_prefix=''): DCNL  DCSP ret = [] DCNL DCSP for fileentry in filelist: DCNL DCSP  DCSP retentry = fileentry.copy() DCNL DCSP  DCSP retentry['local_etag'] = calculate_multipart_etag(fileentry['fullpath']) DCNL DCSP  DCSP ret.append(retentry) DCNL DCSP return ret
def find_health_check(conn, wanted): DCNL  DCSP for check in conn.get_list_health_checks().HealthChecks: DCNL DCSP  DCSP config = check.HealthCheckConfig DCNL DCSP  DCSP if ((config.get('IPAddress') == wanted.ip_addr) and (config.get('FullyQualifiedDomainName') == wanted.fqdn) and (config.get('Type') == wanted.hc_type) and (config.get('RequestInterval') == str(wanted.request_interval))): DCNL DCSP  DCSP  DCSP return check DCNL DCSP return None
def get_zone_by_name(conn, module, zone_name, want_private, zone_id, want_vpc_id): DCNL  DCSP for zone in conn.get_zones(): DCNL DCSP  DCSP private_zone = module.boolean(zone.config.get('PrivateZone', False)) DCNL DCSP  DCSP if ((private_zone == want_private) and (((zone.name == zone_name) and (zone_id == None)) or (zone.id.replace('/hostedzone/', '') == zone_id))): DCNL DCSP  DCSP  DCSP if want_vpc_id: DCNL DCSP  DCSP  DCSP  DCSP zone_details = conn.get_hosted_zone(zone.id)['GetHostedZoneResponse'] DCNL DCSP  DCSP  DCSP  DCSP if isinstance(zone_details['VPCs'], dict): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (zone_details['VPCs']['VPC']['VPCId'] == want_vpc_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return zone DCNL DCSP  DCSP  DCSP  DCSP elif (want_vpc_id in [v['VPCId'] for v in zone_details['VPCs']]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return zone DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return zone DCNL DCSP return None
def commit(changes, retry_interval, wait, wait_timeout): DCNL  DCSP result = None DCNL DCSP retry = 10 DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP retry -= 1 DCNL DCSP  DCSP  DCSP result = changes.commit() DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP except boto.route53.exception.DNSServerError as e: DCNL DCSP  DCSP  DCSP code = e.body.split('<Code>')[1] DCNL DCSP  DCSP  DCSP code = code.split('</Code>')[0] DCNL DCSP  DCSP  DCSP if ((code != 'PriorRequestNotComplete') or (retry < 0)): DCNL DCSP  DCSP  DCSP  DCSP raise e DCNL DCSP  DCSP  DCSP time.sleep(float(retry_interval)) DCNL DCSP if wait: DCNL DCSP  DCSP timeout_time = (time.time() + wait_timeout) DCNL DCSP  DCSP connection = changes.connection DCNL DCSP  DCSP change = result['ChangeResourceRecordSetsResponse']['ChangeInfo'] DCNL DCSP  DCSP status = Status(connection, change) DCNL DCSP  DCSP while ((status.status != 'INSYNC') and (time.time() < timeout_time)): DCNL DCSP  DCSP  DCSP time.sleep(WAIT_RETRY_SLEEP) DCNL DCSP  DCSP  DCSP status.update() DCNL DCSP  DCSP if (time.time() >= timeout_time): DCNL DCSP  DCSP  DCSP raise TimeoutError() DCNL DCSP  DCSP return result
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = ((((err.message + ' DCSP ') + str(err)) + ' DCSP - DCSP ') + str(type(err))) DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def get_stack_events(cfn, stack_name): DCNL  DCSP ret = {'events': [], 'log': []} DCNL DCSP try: DCNL DCSP  DCSP events = cfn.describe_stack_events(StackName=stack_name) DCNL DCSP except (botocore.exceptions.ValidationError, botocore.exceptions.ClientError) as err: DCNL DCSP  DCSP error_msg = boto_exception(err) DCNL DCSP  DCSP if ('does DCSP not DCSP exist' in error_msg): DCNL DCSP  DCSP  DCSP ret['log'].append('Stack DCSP does DCSP not DCSP exist.') DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP ret['log'].append(('Unknown DCSP error: DCSP ' + str(error_msg))) DCNL DCSP  DCSP return ret DCNL DCSP for e in events.get('StackEvents', []): DCNL DCSP  DCSP eventline = 'StackEvent DCSP {ResourceType} DCSP {LogicalResourceId} DCSP {ResourceStatus}'.format(**e) DCNL DCSP  DCSP ret['events'].append(eventline) DCNL DCSP  DCSP if e['ResourceStatus'].endswith('FAILED'): DCNL DCSP  DCSP  DCSP failline = '{ResourceType} DCSP {LogicalResourceId} DCSP {ResourceStatus}: DCSP {ResourceStatusReason}'.format(**e) DCNL DCSP  DCSP  DCSP ret['log'].append(failline) DCNL DCSP return ret
def stack_operation(cfn, stack_name, operation): DCNL  DCSP existed = [] DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP stack = get_stack_facts(cfn, stack_name) DCNL DCSP  DCSP  DCSP existed.append('yes') DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP if (('yes' in existed) or (operation == 'DELETE')): DCNL DCSP  DCSP  DCSP  DCSP ret = get_stack_events(cfn, stack_name) DCNL DCSP  DCSP  DCSP  DCSP ret.update({'changed': True, 'output': 'Stack DCSP Deleted'}) DCNL DCSP  DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return {'changed': True, 'failed': True, 'output': 'Stack DCSP Not DCSP Found', 'exception': traceback.format_exc()} DCNL DCSP  DCSP ret = get_stack_events(cfn, stack_name) DCNL DCSP  DCSP if (not stack): DCNL DCSP  DCSP  DCSP if (('yes' in existed) or (operation == 'DELETE')): DCNL DCSP  DCSP  DCSP  DCSP ret = get_stack_events(cfn, stack_name) DCNL DCSP  DCSP  DCSP  DCSP ret.update({'changed': True, 'output': 'Stack DCSP Deleted'}) DCNL DCSP  DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP ret.update({'changed': False, 'failed': True, 'output': 'Stack DCSP not DCSP found.'}) DCNL DCSP  DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP elif stack['StackStatus'].endswith('_ROLLBACK_COMPLETE'): DCNL DCSP  DCSP  DCSP ret.update({'changed': True, 'failed': True, 'output': ('Problem DCSP with DCSP %s. DCSP Rollback DCSP complete' % operation)}) DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP elif stack['StackStatus'].endswith('_COMPLETE'): DCNL DCSP  DCSP  DCSP ret.update({'changed': True, 'output': ('Stack DCSP %s DCSP complete' % operation)}) DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP elif stack['StackStatus'].endswith('_ROLLBACK_FAILED'): DCNL DCSP  DCSP  DCSP ret.update({'changed': True, 'failed': True, 'output': ('Stack DCSP %s DCSP rollback DCSP failed' % operation)}) DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP elif stack['StackStatus'].endswith('_FAILED'): DCNL DCSP  DCSP  DCSP ret.update({'changed': True, 'failed': True, 'output': ('Stack DCSP %s DCSP failed' % operation)}) DCNL DCSP  DCSP  DCSP return ret DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP return {'failed': True, 'output': 'Failed DCSP for DCSP unknown DCSP reasons.'}
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = err.message DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def _paginate(func, attr): DCNL  DCSP (finished, marker) = (False, None) DCNL DCSP while (not finished): DCNL DCSP  DCSP res = func(marker=marker) DCNL DCSP  DCSP for item in getattr(res, attr): DCNL DCSP  DCSP  DCSP (yield item) DCNL DCSP  DCSP finished = (res.is_truncated == 'false') DCNL DCSP  DCSP if (not finished): DCNL DCSP  DCSP  DCSP marker = res.marker
def set_users_groups(module, iam, name, groups, updated=None, new_name=None): DCNL  DCSP changed = False DCNL DCSP if updated: DCNL DCSP  DCSP name = new_name DCNL DCSP try: DCNL DCSP  DCSP orig_users_groups = [og['group_name'] for og in iam.get_groups_for_user(name).list_groups_for_user_result.groups] DCNL DCSP  DCSP remove_groups = [rg for rg in frozenset(orig_users_groups).difference(groups)] DCNL DCSP  DCSP new_groups = [ng for ng in frozenset(groups).difference(orig_users_groups)] DCNL DCSP except boto.exception.BotoServerError as err: DCNL DCSP  DCSP module.fail_json(changed=changed, msg=str(err)) DCNL DCSP else: DCNL DCSP  DCSP if (len(orig_users_groups) > 0): DCNL DCSP  DCSP  DCSP for new in new_groups: DCNL DCSP  DCSP  DCSP  DCSP iam.add_user_to_group(new, name) DCNL DCSP  DCSP  DCSP for rm in remove_groups: DCNL DCSP  DCSP  DCSP  DCSP iam.remove_user_from_group(rm, name) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for group in groups: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP iam.add_user_to_group(group, name) DCNL DCSP  DCSP  DCSP  DCSP except boto.exception.BotoServerError as err: DCNL DCSP  DCSP  DCSP  DCSP  DCSP error_msg = boto_exception(err) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (('The DCSP group DCSP with DCSP name DCSP %s DCSP cannot DCSP be DCSP found.' % group) in error_msg): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(changed=False, msg=("Group DCSP %s DCSP doesn't DCSP exist" % group)) DCNL DCSP if ((len(remove_groups) > 0) or (len(new_groups) > 0)): DCNL DCSP  DCSP changed = True DCNL DCSP return (groups, changed)
def get_vpc_info(vpc): DCNL  DCSP return {'id': vpc.id, 'cidr_block': vpc.cidr_block, 'dhcp_options_id': vpc.dhcp_options_id, 'region': vpc.region.name, 'state': vpc.state}
def find_vpc(module, vpc_conn, vpc_id=None, cidr=None): DCNL  DCSP if ((vpc_id == None) and (cidr == None)): DCNL DCSP  DCSP module.fail_json(msg='You DCSP must DCSP specify DCSP either DCSP a DCSP vpc_id DCSP or DCSP a DCSP cidr DCSP block DCSP + DCSP list DCSP of DCSP unique DCSP tags, DCSP aborting') DCNL DCSP found_vpcs = [] DCNL DCSP resource_tags = module.params.get('resource_tags') DCNL DCSP if (vpc_id is not None): DCNL DCSP  DCSP found_vpcs = vpc_conn.get_all_vpcs(None, {'vpc-id': vpc_id, 'state': 'available'}) DCNL DCSP else: DCNL DCSP  DCSP previous_vpcs = vpc_conn.get_all_vpcs(None, {'cidr': cidr, 'state': 'available'}) DCNL DCSP  DCSP for vpc in previous_vpcs: DCNL DCSP  DCSP  DCSP vpc_tags = dict(((t.name, t.value) for t in vpc_conn.get_all_tags(filters={'resource-id': vpc.id}))) DCNL DCSP  DCSP  DCSP if (resource_tags and set(resource_tags.items()).issubset(set(vpc_tags.items()))): DCNL DCSP  DCSP  DCSP  DCSP found_vpcs.append(vpc) DCNL DCSP found_vpc = None DCNL DCSP if (len(found_vpcs) == 1): DCNL DCSP  DCSP found_vpc = found_vpcs[0] DCNL DCSP if (len(found_vpcs) > 1): DCNL DCSP  DCSP module.fail_json(msg='Found DCSP more DCSP than DCSP one DCSP vpc DCSP based DCSP on DCSP the DCSP supplied DCSP criteria, DCSP aborting') DCNL DCSP return found_vpc
def routes_match(rt_list=None, rt=None, igw=None): DCNL  DCSP local_routes = [] DCNL DCSP remote_routes = [] DCNL DCSP for route in rt_list: DCNL DCSP  DCSP route_kwargs = {'gateway_id': None, 'instance_id': None, 'interface_id': None, 'vpc_peering_connection_id': None, 'state': 'active'} DCNL DCSP  DCSP if (route['gw'] == 'igw'): DCNL DCSP  DCSP  DCSP route_kwargs['gateway_id'] = igw.id DCNL DCSP  DCSP elif route['gw'].startswith('i-'): DCNL DCSP  DCSP  DCSP route_kwargs['instance_id'] = route['gw'] DCNL DCSP  DCSP elif route['gw'].startswith('eni-'): DCNL DCSP  DCSP  DCSP route_kwargs['interface_id'] = route['gw'] DCNL DCSP  DCSP elif route['gw'].startswith('pcx-'): DCNL DCSP  DCSP  DCSP route_kwargs['vpc_peering_connection_id'] = route['gw'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP route_kwargs['gateway_id'] = route['gw'] DCNL DCSP  DCSP route_kwargs['destination_cidr_block'] = route['dest'] DCNL DCSP  DCSP local_routes.append(route_kwargs) DCNL DCSP for j in rt.routes: DCNL DCSP  DCSP remote_routes.append(j.__dict__) DCNL DCSP match = [] DCNL DCSP for i in local_routes: DCNL DCSP  DCSP change = 'false' DCNL DCSP  DCSP for j in remote_routes: DCNL DCSP  DCSP  DCSP if set(i.items()).issubset(set(j.items())): DCNL DCSP  DCSP  DCSP  DCSP change = 'true' DCNL DCSP  DCSP match.append(change) DCNL DCSP if ('false' in match): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP return True
def rtb_changed(route_tables=None, vpc_conn=None, module=None, vpc=None, igw=None): DCNL  DCSP rtb_len = (len(route_tables) + 1) DCNL DCSP remote_rtb_len = len(vpc_conn.get_all_route_tables(filters={'vpc_id': vpc.id})) DCNL DCSP if (remote_rtb_len != rtb_len): DCNL DCSP  DCSP return True DCNL DCSP for rt in route_tables: DCNL DCSP  DCSP rt_id = None DCNL DCSP  DCSP for sn in rt['subnets']: DCNL DCSP  DCSP  DCSP rsn = vpc_conn.get_all_subnets(filters={'cidr': sn, 'vpc_id': vpc.id}) DCNL DCSP  DCSP  DCSP if (len(rsn) != 1): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='The DCSP subnet DCSP {0} DCSP to DCSP associate DCSP with DCSP route_table DCSP {1} DCSP does DCSP not DCSP exist, DCSP aborting'.format(sn, rt)) DCNL DCSP  DCSP  DCSP nrt = vpc_conn.get_all_route_tables(filters={'vpc_id': vpc.id, 'association.subnet-id': rsn[0].id}) DCNL DCSP  DCSP  DCSP if (not nrt): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP nrt = nrt[0] DCNL DCSP  DCSP  DCSP  DCSP if (not rt_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP rt_id = nrt.id DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not routes_match(rt['routes'], nrt, igw)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP elif (rt_id == nrt.id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def create_vpc(module, vpc_conn): DCNL  DCSP id = module.params.get('vpc_id') DCNL DCSP cidr_block = module.params.get('cidr_block') DCNL DCSP instance_tenancy = module.params.get('instance_tenancy') DCNL DCSP dns_support = module.params.get('dns_support') DCNL DCSP dns_hostnames = module.params.get('dns_hostnames') DCNL DCSP subnets = module.params.get('subnets') DCNL DCSP internet_gateway = module.params.get('internet_gateway') DCNL DCSP route_tables = module.params.get('route_tables') DCNL DCSP vpc_spec_tags = module.params.get('resource_tags') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP changed = False DCNL DCSP previous_vpc = find_vpc(module, vpc_conn, id, cidr_block) DCNL DCSP if (previous_vpc is not None): DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP vpc = previous_vpc DCNL DCSP else: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP vpc = vpc_conn.create_vpc(cidr_block, instance_tenancy) DCNL DCSP  DCSP  DCSP pending = True DCNL DCSP  DCSP  DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP  DCSP  DCSP while (wait and (wait_timeout > time.time()) and pending): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pvpc = vpc_conn.get_all_vpcs(vpc.id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(pvpc, 'state'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (pvpc.state == 'available'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pending = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif hasattr(pvpc[0], 'state'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (pvpc[0].state == 'available'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pending = False DCNL DCSP  DCSP  DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (e.error_code != 'InvalidVpcID.NotFound'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP  DCSP if pending: DCNL DCSP  DCSP  DCSP  DCSP  DCSP time.sleep(5) DCNL DCSP  DCSP  DCSP if (wait and (wait_timeout <= time.time())): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('wait DCSP for DCSP vpc DCSP availability DCSP timeout DCSP on DCSP %s' % time.asctime())) DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP vpc_tags = dict(((t.name, t.value) for t in vpc_conn.get_all_tags(filters={'resource-id': vpc.id}))) DCNL DCSP if (not set(vpc_spec_tags.items()).issubset(set(vpc_tags.items()))): DCNL DCSP  DCSP new_tags = {} DCNL DCSP  DCSP for (key, value) in set(vpc_spec_tags.items()): DCNL DCSP  DCSP  DCSP if ((key, value) not in set(vpc_tags.items())): DCNL DCSP  DCSP  DCSP  DCSP new_tags[key] = value DCNL DCSP  DCSP if new_tags: DCNL DCSP  DCSP  DCSP vpc_conn.create_tags(vpc.id, new_tags) DCNL DCSP vpc_conn.modify_vpc_attribute(vpc.id, enable_dns_support=dns_support) DCNL DCSP vpc_conn.modify_vpc_attribute(vpc.id, enable_dns_hostnames=dns_hostnames) DCNL DCSP if (subnets is not None): DCNL DCSP  DCSP if (not isinstance(subnets, list)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='subnets DCSP needs DCSP to DCSP be DCSP a DCSP list DCSP of DCSP cidr DCSP blocks') DCNL DCSP  DCSP current_subnets = vpc_conn.get_all_subnets(filters={'vpc_id': vpc.id}) DCNL DCSP  DCSP for subnet in subnets: DCNL DCSP  DCSP  DCSP add_subnet = True DCNL DCSP  DCSP  DCSP subnet_tags_current = True DCNL DCSP  DCSP  DCSP new_subnet_tags = subnet.get('resource_tags', {}) DCNL DCSP  DCSP  DCSP subnet_tags_delete = [] DCNL DCSP  DCSP  DCSP for csn in current_subnets: DCNL DCSP  DCSP  DCSP  DCSP if (subnet['cidr'] == csn.cidr_block): DCNL DCSP  DCSP  DCSP  DCSP  DCSP add_subnet = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP existing_tags_subset_of_new_tags = set(csn.tags.items()).issubset(set(new_subnet_tags.items())) DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_tags_subset_of_existing_tags = set(new_subnet_tags.items()).issubset(set(csn.tags.items())) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (existing_tags_subset_of_new_tags is False): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for item in csn.tags.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (item not in new_subnet_tags.items()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP subnet_tags_delete.append(item) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP subnet_tags_delete = [key[0] for key in subnet_tags_delete] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP delete_subnet_tag = vpc_conn.delete_tags(csn.id, subnet_tags_delete) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP delete DCSP resource DCSP tag, DCSP error DCSP {0}'.format(e)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (new_tags_subset_of_existing_tags is False): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP create_subnet_tag = vpc_conn.create_tags(csn.id, new_subnet_tags) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP create DCSP resource DCSP tag, DCSP error: DCSP {0}'.format(e)) DCNL DCSP  DCSP  DCSP if add_subnet: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_subnet = vpc_conn.create_subnet(vpc.id, subnet['cidr'], subnet.get('az', None)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_subnet_tags = subnet.get('resource_tags', {}) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if new_subnet_tags: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP while (len(vpc_conn.get_all_subnets(filters={'subnet-id': new_subnet.id})) == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP time.sleep(0.1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.create_tags(new_subnet.id, new_subnet_tags) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP create DCSP subnet DCSP {0}, DCSP error: DCSP {1}'.format(subnet['cidr'], e)) DCNL DCSP  DCSP for csubnet in current_subnets: DCNL DCSP  DCSP  DCSP delete_subnet = True DCNL DCSP  DCSP  DCSP for subnet in subnets: DCNL DCSP  DCSP  DCSP  DCSP if (csubnet.cidr_block == subnet['cidr']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP delete_subnet = False DCNL DCSP  DCSP  DCSP if delete_subnet: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.delete_subnet(csubnet.id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP delete DCSP subnet DCSP {0}, DCSP error: DCSP {1}'.format(csubnet.cidr_block, e)) DCNL DCSP igw = None DCNL DCSP igw_id = None DCNL DCSP igws = vpc_conn.get_all_internet_gateways(filters={'attachment.vpc-id': vpc.id}) DCNL DCSP if (len(igws) > 1): DCNL DCSP  DCSP module.fail_json(msg=('EC2 DCSP returned DCSP more DCSP than DCSP one DCSP Internet DCSP Gateway DCSP for DCSP id DCSP %s, DCSP aborting' % vpc.id)) DCNL DCSP if internet_gateway: DCNL DCSP  DCSP if (len(igws) != 1): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP igw = vpc_conn.create_internet_gateway() DCNL DCSP  DCSP  DCSP  DCSP vpc_conn.attach_internet_gateway(igw.id, vpc.id) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP create DCSP Internet DCSP Gateway, DCSP error: DCSP {0}'.format(e)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP igw = igws[0] DCNL DCSP elif (len(igws) > 0): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP vpc_conn.detach_internet_gateway(igws[0].id, vpc.id) DCNL DCSP  DCSP  DCSP vpc_conn.delete_internet_gateway(igws[0].id) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP delete DCSP Internet DCSP Gateway, DCSP error: DCSP {0}'.format(e)) DCNL DCSP if (igw is not None): DCNL DCSP  DCSP igw_id = igw.id DCNL DCSP if (route_tables is not None): DCNL DCSP  DCSP rtb_needs_change = rtb_changed(route_tables, vpc_conn, module, vpc, igw) DCNL DCSP if ((route_tables is not None) and rtb_needs_change): DCNL DCSP  DCSP if (not isinstance(route_tables, list)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='route DCSP tables DCSP need DCSP to DCSP be DCSP a DCSP list DCSP of DCSP dictionaries') DCNL DCSP  DCSP all_route_tables = [] DCNL DCSP  DCSP for rt in route_tables: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP new_rt = vpc_conn.create_route_table(vpc.id) DCNL DCSP  DCSP  DCSP  DCSP new_rt_tags = rt.get('resource_tags', None) DCNL DCSP  DCSP  DCSP  DCSP if new_rt_tags: DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.create_tags(new_rt.id, new_rt_tags) DCNL DCSP  DCSP  DCSP  DCSP for route in rt['routes']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs = {} DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (route['gw'] == 'igw'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not internet_gateway): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='You DCSP asked DCSP for DCSP an DCSP Internet DCSP Gateway DCSP (igw) DCSP route, DCSP but DCSP you DCSP have DCSP no DCSP Internet DCSP Gateway') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs['gateway_id'] = igw.id DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif route['gw'].startswith('i-'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs['instance_id'] = route['gw'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif route['gw'].startswith('eni-'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs['interface_id'] = route['gw'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif route['gw'].startswith('pcx-'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs['vpc_peering_connection_id'] = route['gw'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP route_kwargs['gateway_id'] = route['gw'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.create_route(new_rt.id, route['dest'], **route_kwargs) DCNL DCSP  DCSP  DCSP  DCSP for sn in rt['subnets']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP rsn = vpc_conn.get_all_subnets(filters={'cidr': sn, 'vpc_id': vpc.id}) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(rsn) != 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='The DCSP subnet DCSP {0} DCSP to DCSP associate DCSP with DCSP route_table DCSP {1} DCSP does DCSP not DCSP exist, DCSP aborting'.format(sn, rt)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP rsn = rsn[0] DCNL DCSP  DCSP  DCSP  DCSP  DCSP old_rt = vpc_conn.get_all_route_tables(filters={'association.subnet_id': rsn.id, 'vpc_id': vpc.id}) DCNL DCSP  DCSP  DCSP  DCSP  DCSP old_rt = [x for x in old_rt if (x.id != None)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(old_rt) == 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP old_rt = old_rt[0] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP association_id = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for a in old_rt.associations: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (a.subnet_id == rsn.id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP association_id = a.id DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.disassociate_route_table(association_id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.associate_route_table(new_rt.id, rsn.id) DCNL DCSP  DCSP  DCSP  DCSP all_route_tables.append(new_rt) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP create DCSP and DCSP associate DCSP route DCSP table DCSP {0}, DCSP error: DCSP {1}'.format(rt, e)) DCNL DCSP  DCSP all_rts = vpc_conn.get_all_route_tables(filters={'vpc-id': vpc.id}) DCNL DCSP  DCSP for rt in all_rts: DCNL DCSP  DCSP  DCSP if (rt.id is None): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP delete_rt = True DCNL DCSP  DCSP  DCSP for newrt in all_route_tables: DCNL DCSP  DCSP  DCSP  DCSP if (newrt.id == rt.id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP delete_rt = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if delete_rt: DCNL DCSP  DCSP  DCSP  DCSP rta = rt.associations DCNL DCSP  DCSP  DCSP  DCSP is_main = False DCNL DCSP  DCSP  DCSP  DCSP for a in rta: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if a.main: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP is_main = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not is_main): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.delete_route_table(rt.id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP delete DCSP old DCSP route DCSP table DCSP {0}, DCSP error: DCSP {1}'.format(rt.id, e)) DCNL DCSP vpc_dict = get_vpc_info(vpc) DCNL DCSP created_vpc_id = vpc.id DCNL DCSP returned_subnets = [] DCNL DCSP current_subnets = vpc_conn.get_all_subnets(filters={'vpc_id': vpc.id}) DCNL DCSP for sn in current_subnets: DCNL DCSP  DCSP returned_subnets.append({'resource_tags': dict(((t.name, t.value) for t in vpc_conn.get_all_tags(filters={'resource-id': sn.id}))), 'cidr': sn.cidr_block, 'az': sn.availability_zone, 'id': sn.id}) DCNL DCSP if (subnets is not None): DCNL DCSP  DCSP order = {} DCNL DCSP  DCSP for (idx, val) in enumerate(subnets): DCNL DCSP  DCSP  DCSP order[val['cidr']] = idx DCNL DCSP  DCSP subnets_in_play = len(subnets) DCNL DCSP  DCSP returned_subnets.sort(key=(lambda x: order.get(x['cidr'], subnets_in_play))) DCNL DCSP return (vpc_dict, created_vpc_id, returned_subnets, igw_id, changed)
def terminate_vpc(module, vpc_conn, vpc_id=None, cidr=None): DCNL  DCSP vpc_dict = {} DCNL DCSP terminated_vpc_id = '' DCNL DCSP changed = False DCNL DCSP vpc = find_vpc(module, vpc_conn, vpc_id, cidr) DCNL DCSP if (vpc is not None): DCNL DCSP  DCSP if (vpc.state == 'available'): DCNL DCSP  DCSP  DCSP terminated_vpc_id = vpc.id DCNL DCSP  DCSP  DCSP vpc_dict = get_vpc_info(vpc) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP subnets = vpc_conn.get_all_subnets(filters={'vpc_id': vpc.id}) DCNL DCSP  DCSP  DCSP  DCSP for sn in subnets: DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.delete_subnet(sn.id) DCNL DCSP  DCSP  DCSP  DCSP igws = vpc_conn.get_all_internet_gateways(filters={'attachment.vpc-id': vpc.id}) DCNL DCSP  DCSP  DCSP  DCSP for igw in igws: DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.detach_internet_gateway(igw.id, vpc.id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.delete_internet_gateway(igw.id) DCNL DCSP  DCSP  DCSP  DCSP rts = vpc_conn.get_all_route_tables(filters={'vpc_id': vpc.id}) DCNL DCSP  DCSP  DCSP  DCSP for rt in rts: DCNL DCSP  DCSP  DCSP  DCSP  DCSP rta = rt.associations DCNL DCSP  DCSP  DCSP  DCSP  DCSP is_main = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP for a in rta: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if a.main: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP is_main = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not is_main): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP vpc_conn.delete_route_table(rt.id) DCNL DCSP  DCSP  DCSP  DCSP vpc_conn.delete_vpc(vpc.id) DCNL DCSP  DCSP  DCSP except EC2ResponseError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP delete DCSP VPC DCSP {0}, DCSP error: DCSP {1}'.format(vpc.id, e)) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP vpc_dict['state'] = 'terminated' DCNL DCSP return (changed, vpc_dict, terminated_vpc_id)
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = err.message DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def vpc_exists(module, vpc, name, cidr_block, multi): DCNL  DCSP matched_vpc = None DCNL DCSP try: DCNL DCSP  DCSP matching_vpcs = vpc.get_all_vpcs(filters={'tag:Name': name, 'cidr-block': cidr_block}) DCNL DCSP except Exception as e: DCNL DCSP  DCSP e_msg = boto_exception(e) DCNL DCSP  DCSP module.fail_json(msg=e_msg) DCNL DCSP if (len(matching_vpcs) == 1): DCNL DCSP  DCSP matched_vpc = matching_vpcs[0] DCNL DCSP elif (len(matching_vpcs) > 1): DCNL DCSP  DCSP if multi: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Currently DCSP there DCSP are DCSP %d DCSP VPCs DCSP that DCSP have DCSP the DCSP same DCSP name DCSP and DCSP CIDR DCSP block DCSP you DCSP specified. DCSP If DCSP you DCSP would DCSP like DCSP to DCSP create DCSP the DCSP VPC DCSP anyway DCSP please DCSP pass DCSP True DCSP to DCSP the DCSP multi_ok DCSP param.' % len(matching_vpcs))) DCNL DCSP return matched_vpc
def iterate_all(attr, map_method, **kwargs): DCNL  DCSP args = dict(((key, value) for (key, value) in kwargs.items() if (value is not None))) DCNL DCSP wait = 1 DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP data = map_method(**args) DCNL DCSP  DCSP  DCSP for elm in data[attr]: DCNL DCSP  DCSP  DCSP  DCSP (yield elm) DCNL DCSP  DCSP  DCSP if ('NextMarker' in data): DCNL DCSP  DCSP  DCSP  DCSP args['Marker'] = data['Nextmarker'] DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if ((e.response['Error']['Code'] == 'ThrottlingException') and (wait < 600)): DCNL DCSP  DCSP  DCSP  DCSP sleep(wait) DCNL DCSP  DCSP  DCSP  DCSP wait = (wait * 2) DCNL DCSP  DCSP  DCSP  DCSP continue
def targets_equal(keys, a, b): DCNL  DCSP for key in keys: DCNL DCSP  DCSP if ((key in b) and (a[key] != b[key])): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def dict_diff(dict1, dict2, by_key=False): DCNL  DCSP keys1 = set((dict1.keys() if by_key else dict1.items())) DCNL DCSP keys2 = set((dict2.keys() if by_key else dict2.items())) DCNL DCSP intersection = (keys1 & keys2) DCNL DCSP return ((keys2 ^ intersection), intersection, (keys1 ^ intersection))
def first_or_default(items, default=None): DCNL  DCSP for item in items: DCNL DCSP  DCSP return item DCNL DCSP return default
def wait_for(callback, value, timeout=EFSConnection.DEFAULT_WAIT_TIMEOUT_SECONDS): DCNL  DCSP wait_start = timestamp() DCNL DCSP while True: DCNL DCSP  DCSP if (callback() != value): DCNL DCSP  DCSP  DCSP if ((timeout != 0) and ((timestamp() - wait_start) > timeout)): DCNL DCSP  DCSP  DCSP  DCSP raise RuntimeError((('Wait DCSP timeout DCSP exceeded DCSP (' + str(timeout)) + ' DCSP sec)')) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP sleep(5) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP break
def main(): DCNL  DCSP argument_spec = ec2_argument_spec() DCNL DCSP argument_spec.update(dict(state=dict(required=False, type='str', choices=['present', 'absent'], default='present'), id=dict(required=False, type='str', default=None), name=dict(required=False, type='str', default=None), tags=dict(required=False, type='dict', default={}), targets=dict(required=False, type='list', default=[]), performance_mode=dict(required=False, type='str', choices=['general_purpose', 'max_io'], default='general_purpose'), wait=dict(required=False, type='bool', default=False), wait_timeout=dict(required=False, type='int', default=0))) DCNL DCSP module = AnsibleModule(argument_spec=argument_spec) DCNL DCSP if (not HAS_BOTO3): DCNL DCSP  DCSP module.fail_json(msg='boto3 DCSP required DCSP for DCSP this DCSP module') DCNL DCSP (region, _, aws_connect_params) = get_aws_connection_info(module, boto3=True) DCNL DCSP connection = EFSConnection(module, region, **aws_connect_params) DCNL DCSP name = module.params.get('name') DCNL DCSP fs_id = module.params.get('id') DCNL DCSP tags = module.params.get('tags') DCNL DCSP target_translations = {'ip_address': 'IpAddress', 'security_groups': 'SecurityGroups', 'subnet_id': 'SubnetId'} DCNL DCSP targets = [dict(((target_translations[key], value) for (key, value) in x.items())) for x in module.params.get('targets')] DCNL DCSP performance_mode_translations = {'general_purpose': 'generalPurpose', 'max_io': 'maxIO'} DCNL DCSP performance_mode = performance_mode_translations[module.params.get('performance_mode')] DCNL DCSP changed = False DCNL DCSP state = str(module.params.get('state')).lower() DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if (not name): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Name DCSP parameter DCSP is DCSP required DCSP for DCSP create') DCNL DCSP  DCSP changed = connection.create_file_system(name, performance_mode) DCNL DCSP  DCSP changed = (connection.converge_file_system(name=name, tags=tags, targets=targets) or changed) DCNL DCSP  DCSP result = first_or_default(connection.get_file_systems(CreationToken=name)) DCNL DCSP elif (state == 'absent'): DCNL DCSP  DCSP if ((not name) and (not fs_id)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Either DCSP name DCSP or DCSP id DCSP parameter DCSP is DCSP required DCSP for DCSP delete') DCNL DCSP  DCSP changed = connection.delete_file_system(name, fs_id) DCNL DCSP  DCSP result = None DCNL DCSP if result: DCNL DCSP  DCSP result = camel_dict_to_snake_dict(result) DCNL DCSP module.exit_json(changed=changed, efs=result)
def get_server_certs(iam, name=None): DCNL  DCSP results = dict() DCNL DCSP try: DCNL DCSP  DCSP if name: DCNL DCSP  DCSP  DCSP server_certs = [iam.get_server_certificate(ServerCertificateName=name)['ServerCertificate']] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP server_certs = iam.list_server_certificates()['ServerCertificateMetadataList'] DCNL DCSP  DCSP for server_cert in server_certs: DCNL DCSP  DCSP  DCSP if (not name): DCNL DCSP  DCSP  DCSP  DCSP server_cert = iam.get_server_certificate(ServerCertificateName=server_cert['ServerCertificateName'])['ServerCertificate'] DCNL DCSP  DCSP  DCSP cert_md = server_cert['ServerCertificateMetadata'] DCNL DCSP  DCSP  DCSP results[cert_md['ServerCertificateName']] = {'certificate_body': server_cert['CertificateBody'], 'server_certificate_id': cert_md['ServerCertificateId'], 'server_certificate_name': cert_md['ServerCertificateName'], 'arn': cert_md['Arn'], 'path': cert_md['Path'], 'expiration': cert_md['Expiration'].isoformat(), 'upload_date': cert_md['UploadDate'].isoformat()} DCNL DCSP except botocore.exceptions.ClientError: DCNL DCSP  DCSP pass DCNL DCSP return results
def convert_to_lower(data): DCNL  DCSP results = dict() DCNL DCSP if isinstance(data, dict): DCNL DCSP  DCSP for (key, val) in data.items(): DCNL DCSP  DCSP  DCSP key = re.sub('(([A-Z]{1,3}){1})', '_\\1', key).lower() DCNL DCSP  DCSP  DCSP if (key[0] == '_'): DCNL DCSP  DCSP  DCSP  DCSP key = key[1:] DCNL DCSP  DCSP  DCSP if isinstance(val, datetime.datetime): DCNL DCSP  DCSP  DCSP  DCSP results[key] = val.isoformat() DCNL DCSP  DCSP  DCSP elif isinstance(val, dict): DCNL DCSP  DCSP  DCSP  DCSP results[key] = convert_to_lower(val) DCNL DCSP  DCSP  DCSP elif isinstance(val, list): DCNL DCSP  DCSP  DCSP  DCSP converted = list() DCNL DCSP  DCSP  DCSP  DCSP for item in val: DCNL DCSP  DCSP  DCSP  DCSP  DCSP converted.append(convert_to_lower(item)) DCNL DCSP  DCSP  DCSP  DCSP results[key] = converted DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP results[key] = val DCNL DCSP return results
def make_tags_in_proper_format(tags): DCNL  DCSP formatted_tags = dict() DCNL DCSP for tag in tags: DCNL DCSP  DCSP formatted_tags[tag.get('Key')] = tag.get('Value') DCNL DCSP return formatted_tags
def make_tags_in_aws_format(tags): DCNL  DCSP formatted_tags = list() DCNL DCSP for (key, val) in tags.items(): DCNL DCSP  DCSP formatted_tags.append({'Key': key, 'Value': val}) DCNL DCSP return formatted_tags
def get_tags(client, stream_name, check_mode=False): DCNL  DCSP err_msg = '' DCNL DCSP success = False DCNL DCSP params = {'StreamName': stream_name} DCNL DCSP results = dict() DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP results = client.list_tags_for_stream(**params)['Tags'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results = [{'Key': 'DryRunMode', 'Value': 'true'}] DCNL DCSP  DCSP success = True DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (success, err_msg, results)
def find_stream(client, stream_name, check_mode=False): DCNL  DCSP err_msg = '' DCNL DCSP success = False DCNL DCSP params = {'StreamName': stream_name} DCNL DCSP results = dict() DCNL DCSP has_more_shards = True DCNL DCSP shards = list() DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP while has_more_shards: DCNL DCSP  DCSP  DCSP  DCSP results = client.describe_stream(**params)['StreamDescription'] DCNL DCSP  DCSP  DCSP  DCSP shards.extend(results.pop('Shards')) DCNL DCSP  DCSP  DCSP  DCSP has_more_shards = results['HasMoreShards'] DCNL DCSP  DCSP  DCSP results['Shards'] = shards DCNL DCSP  DCSP  DCSP results['ShardsCount'] = len(shards) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results = {'HasMoreShards': True, 'RetentionPeriodHours': 24, 'StreamName': stream_name, 'StreamARN': 'arn:aws:kinesis:east-side:123456789:stream/{0}'.format(stream_name), 'StreamStatus': 'ACTIVE'} DCNL DCSP  DCSP success = True DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (success, err_msg, results)
def wait_for_status(client, stream_name, status, wait_timeout=300, check_mode=False): DCNL  DCSP polling_increment_secs = 5 DCNL DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP status_achieved = False DCNL DCSP stream = dict() DCNL DCSP err_msg = '' DCNL DCSP while (wait_timeout > time.time()): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (find_success, find_msg, stream) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if check_mode: DCNL DCSP  DCSP  DCSP  DCSP status_achieved = True DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif (status != 'DELETING'): DCNL DCSP  DCSP  DCSP  DCSP if (find_success and stream): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (stream.get('StreamStatus') == status): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP status_achieved = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif ((status == 'DELETING') and (not check_mode)): DCNL DCSP  DCSP  DCSP  DCSP if (not find_success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP status_achieved = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP time.sleep(polling_increment_secs) DCNL DCSP  DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP  DCSP err_msg = str(e) DCNL DCSP if (not status_achieved): DCNL DCSP  DCSP err_msg = 'Wait DCSP time DCSP out DCSP reached, DCSP while DCSP waiting DCSP for DCSP results' DCNL DCSP else: DCNL DCSP  DCSP err_msg = 'Status DCSP {0} DCSP achieved DCSP successfully'.format(status) DCNL DCSP return (status_achieved, err_msg, stream)
def tags_action(client, stream_name, tags, action='create', check_mode=False): DCNL  DCSP success = False DCNL DCSP err_msg = '' DCNL DCSP params = {'StreamName': stream_name} DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP if (action == 'create'): DCNL DCSP  DCSP  DCSP  DCSP params['Tags'] = tags DCNL DCSP  DCSP  DCSP  DCSP client.add_tags_to_stream(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP elif (action == 'delete'): DCNL DCSP  DCSP  DCSP  DCSP params['TagKeys'] = tags.keys() DCNL DCSP  DCSP  DCSP  DCSP client.remove_tags_from_stream(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP  DCSP elif (action == 'create'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP elif (action == 'delete'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (success, err_msg)
def recreate_tags_from_list(list_of_tags): DCNL  DCSP tags = list() DCNL DCSP i = 0 DCNL DCSP list_of_tags = list_of_tags DCNL DCSP for i in range(len(list_of_tags)): DCNL DCSP  DCSP key_name = list_of_tags[i][0] DCNL DCSP  DCSP key_val = list_of_tags[i][1] DCNL DCSP  DCSP tags.append({'Key': key_name, 'Value': key_val}) DCNL DCSP return tags
def update_tags(client, stream_name, tags, check_mode=False): DCNL  DCSP success = False DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP (tag_success, tag_msg, current_tags) = get_tags(client, stream_name, check_mode=check_mode) DCNL DCSP if current_tags: DCNL DCSP  DCSP tags = make_tags_in_aws_format(tags) DCNL DCSP  DCSP current_tags_set = set(reduce((lambda x, y: (x + y)), [make_tags_in_proper_format(current_tags).items()])) DCNL DCSP  DCSP new_tags_set = set(reduce((lambda x, y: (x + y)), [make_tags_in_proper_format(tags).items()])) DCNL DCSP  DCSP tags_to_delete = list(current_tags_set.difference(new_tags_set)) DCNL DCSP  DCSP tags_to_update = list(new_tags_set.difference(current_tags_set)) DCNL DCSP  DCSP if tags_to_delete: DCNL DCSP  DCSP  DCSP tags_to_delete = make_tags_in_proper_format(recreate_tags_from_list(tags_to_delete)) DCNL DCSP  DCSP  DCSP (delete_success, delete_msg) = tags_action(client, stream_name, tags_to_delete, action='delete', check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (not delete_success): DCNL DCSP  DCSP  DCSP  DCSP return (delete_success, changed, delete_msg) DCNL DCSP  DCSP if tags_to_update: DCNL DCSP  DCSP  DCSP tags = make_tags_in_proper_format(recreate_tags_from_list(tags_to_update)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (True, changed, 'Tags DCSP do DCSP not DCSP need DCSP to DCSP be DCSP updated') DCNL DCSP if tags: DCNL DCSP  DCSP (create_success, create_msg) = tags_action(client, stream_name, tags, action='create', check_mode=check_mode) DCNL DCSP  DCSP if create_success: DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP return (create_success, changed, create_msg) DCNL DCSP return (success, changed, err_msg)
def stream_action(client, stream_name, shard_count=1, action='create', timeout=300, check_mode=False): DCNL  DCSP success = False DCNL DCSP err_msg = '' DCNL DCSP params = {'StreamName': stream_name} DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP if (action == 'create'): DCNL DCSP  DCSP  DCSP  DCSP params['ShardCount'] = shard_count DCNL DCSP  DCSP  DCSP  DCSP client.create_stream(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP elif (action == 'delete'): DCNL DCSP  DCSP  DCSP  DCSP client.delete_stream(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP  DCSP elif (action == 'create'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP elif (action == 'delete'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (success, err_msg)
def retention_action(client, stream_name, retention_period=24, action='increase', check_mode=False): DCNL  DCSP success = False DCNL DCSP err_msg = '' DCNL DCSP params = {'StreamName': stream_name} DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP if (action == 'increase'): DCNL DCSP  DCSP  DCSP  DCSP params['RetentionPeriodHours'] = retention_period DCNL DCSP  DCSP  DCSP  DCSP client.increase_stream_retention_period(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Retention DCSP Period DCSP increased DCSP successfully DCSP to DCSP {0}'.format(retention_period) DCNL DCSP  DCSP  DCSP elif (action == 'decrease'): DCNL DCSP  DCSP  DCSP  DCSP params['RetentionPeriodHours'] = retention_period DCNL DCSP  DCSP  DCSP  DCSP client.decrease_stream_retention_period(**params) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Retention DCSP Period DCSP decreased DCSP successfully DCSP to DCSP {0}'.format(retention_period) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP  DCSP elif (action == 'increase'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP elif (action == 'decrease'): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = 'Invalid DCSP action DCSP {0}'.format(action) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (success, err_msg)
def update(client, current_stream, stream_name, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False): DCNL  DCSP success = True DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP if retention_period: DCNL DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP (wait_success, wait_msg, current_stream) = wait_for_status(client, stream_name, 'ACTIVE', wait_timeout, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (not wait_success): DCNL DCSP  DCSP  DCSP  DCSP return (wait_success, False, wait_msg) DCNL DCSP  DCSP if (current_stream['StreamStatus'] == 'ACTIVE'): DCNL DCSP  DCSP  DCSP retention_changed = False DCNL DCSP  DCSP  DCSP if (retention_period > current_stream['RetentionPeriodHours']): DCNL DCSP  DCSP  DCSP  DCSP (retention_changed, retention_msg) = retention_action(client, stream_name, retention_period, action='increase', check_mode=check_mode) DCNL DCSP  DCSP  DCSP elif (retention_period < current_stream['RetentionPeriodHours']): DCNL DCSP  DCSP  DCSP  DCSP (retention_changed, retention_msg) = retention_action(client, stream_name, retention_period, action='decrease', check_mode=check_mode) DCNL DCSP  DCSP  DCSP elif (retention_period == current_stream['RetentionPeriodHours']): DCNL DCSP  DCSP  DCSP  DCSP retention_msg = 'Retention DCSP {0} DCSP is DCSP the DCSP same DCSP as DCSP {1}'.format(retention_period, current_stream['RetentionPeriodHours']) DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP if retention_changed: DCNL DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP err_msg = retention_msg DCNL DCSP  DCSP  DCSP if (changed and wait): DCNL DCSP  DCSP  DCSP  DCSP (wait_success, wait_msg, current_stream) = wait_for_status(client, stream_name, 'ACTIVE', wait_timeout, check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP if (not wait_success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return (wait_success, False, wait_msg) DCNL DCSP  DCSP  DCSP elif (changed and (not wait)): DCNL DCSP  DCSP  DCSP  DCSP (stream_found, stream_msg, current_stream) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP if stream_found: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (current_stream['StreamStatus'] != 'ACTIVE'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP err_msg = 'Retention DCSP Period DCSP for DCSP {0} DCSP is DCSP in DCSP the DCSP process DCSP of DCSP updating'.format(stream_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return (success, changed, err_msg) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = 'StreamStatus DCSP has DCSP to DCSP be DCSP ACTIVE DCSP in DCSP order DCSP to DCSP modify DCSP the DCSP retention DCSP period. DCSP Current DCSP status DCSP is DCSP {0}'.format(current_stream['StreamStatus']) DCNL DCSP  DCSP  DCSP return (success, changed, err_msg) DCNL DCSP if tags: DCNL DCSP  DCSP (_, _, err_msg) = update_tags(client, stream_name, tags, check_mode=check_mode) DCNL DCSP if wait: DCNL DCSP  DCSP (success, err_msg, _) = wait_for_status(client, stream_name, 'ACTIVE', wait_timeout, check_mode=check_mode) DCNL DCSP if (success and changed): DCNL DCSP  DCSP err_msg = 'Kinesis DCSP Stream DCSP {0} DCSP updated DCSP successfully.'.format(stream_name) DCNL DCSP elif (success and (not changed)): DCNL DCSP  DCSP err_msg = 'Kinesis DCSP Stream DCSP {0} DCSP did DCSP not DCSP changed.'.format(stream_name) DCNL DCSP return (success, changed, err_msg)
def create_stream(client, stream_name, number_of_shards=1, retention_period=None, tags=None, wait=False, wait_timeout=300, check_mode=False): DCNL  DCSP success = False DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP results = dict() DCNL DCSP (stream_found, stream_msg, current_stream) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP if (stream_found and (not check_mode)): DCNL DCSP  DCSP if (current_stream['ShardsCount'] != number_of_shards): DCNL DCSP  DCSP  DCSP err_msg = 'Can DCSP not DCSP change DCSP the DCSP number DCSP of DCSP shards DCSP in DCSP a DCSP Kinesis DCSP Stream' DCNL DCSP  DCSP  DCSP return (success, changed, err_msg, results) DCNL DCSP if (stream_found and (current_stream['StreamStatus'] == 'DELETING') and wait): DCNL DCSP  DCSP (wait_success, wait_msg, current_stream) = wait_for_status(client, stream_name, 'ACTIVE', wait_timeout, check_mode=check_mode) DCNL DCSP if (stream_found and (current_stream['StreamStatus'] != 'DELETING')): DCNL DCSP  DCSP (success, changed, err_msg) = update(client, current_stream, stream_name, retention_period, tags, wait, wait_timeout, check_mode=check_mode) DCNL DCSP else: DCNL DCSP  DCSP (create_success, create_msg) = stream_action(client, stream_name, number_of_shards, action='create', check_mode=check_mode) DCNL DCSP  DCSP if create_success: DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP  DCSP (wait_success, wait_msg, results) = wait_for_status(client, stream_name, 'ACTIVE', wait_timeout, check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Kinesis DCSP Stream DCSP {0} DCSP is DCSP in DCSP the DCSP process DCSP of DCSP being DCSP created'.format(stream_name) DCNL DCSP  DCSP  DCSP  DCSP if (not wait_success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return (wait_success, True, wait_msg, results) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Kinesis DCSP Stream DCSP {0} DCSP created DCSP successfully'.format(stream_name) DCNL DCSP  DCSP  DCSP if tags: DCNL DCSP  DCSP  DCSP  DCSP (changed, err_msg) = tags_action(client, stream_name, tags, action='create', check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP  DCSP if (not success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return (success, changed, err_msg, results) DCNL DCSP  DCSP  DCSP (stream_found, stream_msg, current_stream) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (retention_period and (current_stream['StreamStatus'] == 'ACTIVE')): DCNL DCSP  DCSP  DCSP  DCSP (changed, err_msg) = retention_action(client, stream_name, retention_period, action='increase', check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP  DCSP if (not success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return (success, changed, err_msg, results) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'StreamStatus DCSP has DCSP to DCSP be DCSP ACTIVE DCSP in DCSP order DCSP to DCSP modify DCSP the DCSP retention DCSP period. DCSP Current DCSP status DCSP is DCSP {0}'.format(current_stream['StreamStatus']) DCNL DCSP  DCSP  DCSP  DCSP success = create_success DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP if success: DCNL DCSP  DCSP (_, _, results) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP  DCSP (_, _, current_tags) = get_tags(client, stream_name, check_mode=check_mode) DCNL DCSP  DCSP if (current_tags and (not check_mode)): DCNL DCSP  DCSP  DCSP current_tags = make_tags_in_proper_format(current_tags) DCNL DCSP  DCSP  DCSP results['Tags'] = current_tags DCNL DCSP  DCSP elif (check_mode and tags): DCNL DCSP  DCSP  DCSP results['Tags'] = tags DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP results['Tags'] = dict() DCNL DCSP  DCSP results = convert_to_lower(results) DCNL DCSP return (success, changed, err_msg, results)
def delete_stream(client, stream_name, wait=False, wait_timeout=300, check_mode=False): DCNL  DCSP success = False DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP results = dict() DCNL DCSP (stream_found, stream_msg, current_stream) = find_stream(client, stream_name, check_mode=check_mode) DCNL DCSP if stream_found: DCNL DCSP  DCSP (success, err_msg) = stream_action(client, stream_name, action='delete', check_mode=check_mode) DCNL DCSP  DCSP if success: DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP  DCSP (success, err_msg, results) = wait_for_status(client, stream_name, 'DELETING', wait_timeout, check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Stream DCSP {0} DCSP deleted DCSP successfully'.format(stream_name) DCNL DCSP  DCSP  DCSP  DCSP if (not success): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return (success, True, err_msg, results) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'Stream DCSP {0} DCSP is DCSP in DCSP the DCSP process DCSP of DCSP being DCSP deleted'.format(stream_name) DCNL DCSP else: DCNL DCSP  DCSP success = True DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP err_msg = 'Stream DCSP {0} DCSP does DCSP not DCSP exist'.format(stream_name) DCNL DCSP return (success, changed, err_msg, results)
def find_subnets(vpc_conn, vpc_id, identified_subnets): DCNL  DCSP subnet_ids = [] DCNL DCSP subnet_names = [] DCNL DCSP subnet_cidrs = [] DCNL DCSP for subnet in (identified_subnets or []): DCNL DCSP  DCSP if re.match(SUBNET_RE, subnet): DCNL DCSP  DCSP  DCSP subnet_ids.append(subnet) DCNL DCSP  DCSP elif re.match(CIDR_RE, subnet): DCNL DCSP  DCSP  DCSP subnet_cidrs.append(subnet) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP subnet_names.append(subnet) DCNL DCSP subnets_by_id = [] DCNL DCSP if subnet_ids: DCNL DCSP  DCSP subnets_by_id = vpc_conn.get_all_subnets(subnet_ids, filters={'vpc_id': vpc_id}) DCNL DCSP  DCSP for subnet_id in subnet_ids: DCNL DCSP  DCSP  DCSP if (not any(((s.id == subnet_id) for s in subnets_by_id))): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleSubnetSearchException('Subnet DCSP ID DCSP "{0}" DCSP does DCSP not DCSP exist'.format(subnet_id)) DCNL DCSP subnets_by_cidr = [] DCNL DCSP if subnet_cidrs: DCNL DCSP  DCSP subnets_by_cidr = vpc_conn.get_all_subnets(filters={'vpc_id': vpc_id, 'cidr': subnet_cidrs}) DCNL DCSP  DCSP for cidr in subnet_cidrs: DCNL DCSP  DCSP  DCSP if (not any(((s.cidr_block == cidr) for s in subnets_by_cidr))): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleSubnetSearchException('Subnet DCSP CIDR DCSP "{0}" DCSP does DCSP not DCSP exist'.format(cidr)) DCNL DCSP subnets_by_name = [] DCNL DCSP if subnet_names: DCNL DCSP  DCSP subnets_by_name = vpc_conn.get_all_subnets(filters={'vpc_id': vpc_id, 'tag:Name': subnet_names}) DCNL DCSP  DCSP for name in subnet_names: DCNL DCSP  DCSP  DCSP matching_count = len([1 for s in subnets_by_name if (s.tags.get('Name') == name)]) DCNL DCSP  DCSP  DCSP if (matching_count == 0): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleSubnetSearchException('Subnet DCSP named DCSP "{0}" DCSP does DCSP not DCSP exist'.format(name)) DCNL DCSP  DCSP  DCSP elif (matching_count > 1): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleSubnetSearchException('Multiple DCSP subnets DCSP named DCSP "{0}"'.format(name)) DCNL DCSP return ((subnets_by_id + subnets_by_cidr) + subnets_by_name)
def find_igw(vpc_conn, vpc_id): DCNL  DCSP igw = vpc_conn.get_all_internet_gateways(filters={'attachment.vpc-id': vpc_id}) DCNL DCSP if (not igw): DCNL DCSP  DCSP raise AnsibleIgwSearchException('No DCSP IGW DCSP found DCSP for DCSP VPC DCSP {0}'.format(vpc_id)) DCNL DCSP elif (len(igw) == 1): DCNL DCSP  DCSP return igw[0].id DCNL DCSP else: DCNL DCSP  DCSP raise AnsibleIgwSearchException('Multiple DCSP IGWs DCSP found DCSP for DCSP VPC DCSP {0}'.format(vpc_id))
def get_block_device_mapping(image): DCNL  DCSP bdm_dict = dict() DCNL DCSP bdm = getattr(image, 'block_device_mapping') DCNL DCSP for device_name in bdm.keys(): DCNL DCSP  DCSP bdm_dict[device_name] = {'size': bdm[device_name].size, 'snapshot_id': bdm[device_name].snapshot_id, 'volume_type': bdm[device_name].volume_type, 'encrypted': bdm[device_name].encrypted, 'delete_on_termination': bdm[device_name].delete_on_termination} DCNL DCSP return bdm_dict
def boto_exception(err): DCNL  DCSP if hasattr(err, 'error_message'): DCNL DCSP  DCSP error = err.error_message DCNL DCSP elif hasattr(err, 'message'): DCNL DCSP  DCSP error = err.message DCNL DCSP else: DCNL DCSP  DCSP error = ('%s: DCSP %s' % (Exception, err)) DCNL DCSP return error
def build_kwargs(registry_id): DCNL  DCSP if (not registry_id): DCNL DCSP  DCSP return dict() DCNL DCSP else: DCNL DCSP  DCSP return dict(registryId=registry_id)
def convert_to_lower(data): DCNL  DCSP results = dict() DCNL DCSP if isinstance(data, dict): DCNL DCSP  DCSP for (key, val) in data.items(): DCNL DCSP  DCSP  DCSP key = re.sub('(([A-Z]{1,3}){1})', '_\\1', key).lower() DCNL DCSP  DCSP  DCSP if (key[0] == '_'): DCNL DCSP  DCSP  DCSP  DCSP key = key[1:] DCNL DCSP  DCSP  DCSP if isinstance(val, datetime.datetime): DCNL DCSP  DCSP  DCSP  DCSP results[key] = val.isoformat() DCNL DCSP  DCSP  DCSP elif isinstance(val, dict): DCNL DCSP  DCSP  DCSP  DCSP results[key] = convert_to_lower(val) DCNL DCSP  DCSP  DCSP elif isinstance(val, list): DCNL DCSP  DCSP  DCSP  DCSP converted = list() DCNL DCSP  DCSP  DCSP  DCSP for item in val: DCNL DCSP  DCSP  DCSP  DCSP  DCSP converted.append(convert_to_lower(item)) DCNL DCSP  DCSP  DCSP  DCSP results[key] = converted DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP results[key] = val DCNL DCSP return results
def get_nat_gateways(client, subnet_id=None, nat_gateway_id=None, states=None, check_mode=False): DCNL  DCSP params = dict() DCNL DCSP err_msg = '' DCNL DCSP gateways_retrieved = False DCNL DCSP existing_gateways = list() DCNL DCSP if (not states): DCNL DCSP  DCSP states = ['available', 'pending'] DCNL DCSP if nat_gateway_id: DCNL DCSP  DCSP params['NatGatewayIds'] = [nat_gateway_id] DCNL DCSP else: DCNL DCSP  DCSP params['Filter'] = [{'Name': 'subnet-id', 'Values': [subnet_id]}, {'Name': 'state', 'Values': states}] DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP gateways = client.describe_nat_gateways(**params)['NatGateways'] DCNL DCSP  DCSP  DCSP if gateways: DCNL DCSP  DCSP  DCSP  DCSP for gw in gateways: DCNL DCSP  DCSP  DCSP  DCSP  DCSP existing_gateways.append(convert_to_lower(gw)) DCNL DCSP  DCSP  DCSP gateways_retrieved = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP gateways_retrieved = True DCNL DCSP  DCSP  DCSP if nat_gateway_id: DCNL DCSP  DCSP  DCSP  DCSP if (DRY_RUN_GATEWAYS[0]['nat_gateway_id'] == nat_gateway_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP existing_gateways = DRY_RUN_GATEWAYS DCNL DCSP  DCSP  DCSP elif subnet_id: DCNL DCSP  DCSP  DCSP  DCSP if (DRY_RUN_GATEWAYS[0]['subnet_id'] == subnet_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP existing_gateways = DRY_RUN_GATEWAYS DCNL DCSP  DCSP  DCSP err_msg = '{0} DCSP Retrieving DCSP gateways'.format(DRY_RUN_MSGS) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (gateways_retrieved, err_msg, existing_gateways)
def wait_for_status(client, wait_timeout, nat_gateway_id, status, check_mode=False): DCNL  DCSP polling_increment_secs = 5 DCNL DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP status_achieved = False DCNL DCSP nat_gateway = dict() DCNL DCSP states = ['pending', 'failed', 'available', 'deleting', 'deleted'] DCNL DCSP err_msg = '' DCNL DCSP while (wait_timeout > time.time()): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (gws_retrieved, err_msg, nat_gateways) = get_nat_gateways(client, nat_gateway_id=nat_gateway_id, states=states, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (gws_retrieved and nat_gateways): DCNL DCSP  DCSP  DCSP  DCSP nat_gateway = nat_gateways[0] DCNL DCSP  DCSP  DCSP  DCSP if check_mode: DCNL DCSP  DCSP  DCSP  DCSP  DCSP nat_gateway['state'] = status DCNL DCSP  DCSP  DCSP  DCSP if (nat_gateway.get('state') == status): DCNL DCSP  DCSP  DCSP  DCSP  DCSP status_achieved = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP elif (nat_gateway.get('state') == 'failed'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP err_msg = nat_gateway.get('failure_message') DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP elif (nat_gateway.get('state') == 'pending'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ('failure_message' in nat_gateway): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP err_msg = nat_gateway.get('failure_message') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP status_achieved = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP time.sleep(polling_increment_secs) DCNL DCSP  DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP  DCSP err_msg = str(e) DCNL DCSP if (not status_achieved): DCNL DCSP  DCSP err_msg = 'Wait DCSP time DCSP out DCSP reached, DCSP while DCSP waiting DCSP for DCSP results' DCNL DCSP return (status_achieved, err_msg, nat_gateway)
def gateway_in_subnet_exists(client, subnet_id, allocation_id=None, check_mode=False): DCNL  DCSP allocation_id_exists = False DCNL DCSP gateways = [] DCNL DCSP states = ['available', 'pending'] DCNL DCSP (gws_retrieved, _, gws) = get_nat_gateways(client, subnet_id, states=states, check_mode=check_mode) DCNL DCSP if (not gws_retrieved): DCNL DCSP  DCSP return (gateways, allocation_id_exists) DCNL DCSP for gw in gws: DCNL DCSP  DCSP for address in gw['nat_gateway_addresses']: DCNL DCSP  DCSP  DCSP if allocation_id: DCNL DCSP  DCSP  DCSP  DCSP if (address.get('allocation_id') == allocation_id): DCNL DCSP  DCSP  DCSP  DCSP  DCSP allocation_id_exists = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP gateways.append(gw) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP gateways.append(gw) DCNL DCSP return (gateways, allocation_id_exists)
def get_eip_allocation_id_by_address(client, eip_address, check_mode=False): DCNL  DCSP params = {'PublicIps': [eip_address]} DCNL DCSP allocation_id = None DCNL DCSP err_msg = '' DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP allocations = client.describe_addresses(**params)['Addresses'] DCNL DCSP  DCSP  DCSP if (len(allocations) == 1): DCNL DCSP  DCSP  DCSP  DCSP allocation = allocations[0] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP allocation = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP dry_run_eip = DRY_RUN_ALLOCATION_UNCONVERTED['Addresses'][0]['PublicIp'] DCNL DCSP  DCSP  DCSP if (dry_run_eip == eip_address): DCNL DCSP  DCSP  DCSP  DCSP allocation = DRY_RUN_ALLOCATION_UNCONVERTED['Addresses'][0] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP allocation = None DCNL DCSP  DCSP if allocation: DCNL DCSP  DCSP  DCSP if (allocation.get('Domain') != 'vpc'): DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'EIP DCSP {0} DCSP is DCSP a DCSP non-VPC DCSP EIP, DCSP please DCSP allocate DCSP a DCSP VPC DCSP scoped DCSP EIP'.format(eip_address) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP allocation_id = allocation.get('AllocationId') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = 'EIP DCSP {0} DCSP does DCSP not DCSP exist'.format(eip_address) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (allocation_id, err_msg)
def allocate_eip_address(client, check_mode=False): DCNL  DCSP ip_allocated = False DCNL DCSP new_eip = None DCNL DCSP err_msg = '' DCNL DCSP params = {'Domain': 'vpc'} DCNL DCSP try: DCNL DCSP  DCSP if check_mode: DCNL DCSP  DCSP  DCSP ip_allocated = True DCNL DCSP  DCSP  DCSP random_numbers = ''.join((str(x) for x in random.sample(range(0, 9), 7))) DCNL DCSP  DCSP  DCSP new_eip = 'eipalloc-{0}'.format(random_numbers) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP new_eip = client.allocate_address(**params)['AllocationId'] DCNL DCSP  DCSP  DCSP ip_allocated = True DCNL DCSP  DCSP err_msg = 'eipalloc DCSP id DCSP {0} DCSP created'.format(new_eip) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (ip_allocated, err_msg, new_eip)
def release_address(client, allocation_id, check_mode=False): DCNL  DCSP err_msg = '' DCNL DCSP if check_mode: DCNL DCSP  DCSP return (True, '') DCNL DCSP ip_released = False DCNL DCSP params = {'AllocationId': allocation_id} DCNL DCSP try: DCNL DCSP  DCSP client.release_address(**params) DCNL DCSP  DCSP ip_released = True DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP return (ip_released, err_msg)
def create(client, subnet_id, allocation_id, client_token=None, wait=False, wait_timeout=0, if_exist_do_not_create=False, check_mode=False): DCNL  DCSP params = {'SubnetId': subnet_id, 'AllocationId': allocation_id} DCNL DCSP request_time = datetime.datetime.utcnow() DCNL DCSP changed = False DCNL DCSP success = False DCNL DCSP token_provided = False DCNL DCSP err_msg = '' DCNL DCSP if client_token: DCNL DCSP  DCSP token_provided = True DCNL DCSP  DCSP params['ClientToken'] = client_token DCNL DCSP try: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP result = client.create_nat_gateway(**params)['NatGateway'] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP result = DRY_RUN_GATEWAY_UNCONVERTED[0] DCNL DCSP  DCSP  DCSP result['CreateTime'] = datetime.datetime.utcnow() DCNL DCSP  DCSP  DCSP result['NatGatewayAddresses'][0]['AllocationId'] = allocation_id DCNL DCSP  DCSP  DCSP result['SubnetId'] = subnet_id DCNL DCSP  DCSP success = True DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP create_time = result['CreateTime'].replace(tzinfo=None) DCNL DCSP  DCSP if (token_provided and (request_time > create_time)): DCNL DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP elif wait: DCNL DCSP  DCSP  DCSP (success, err_msg, result) = wait_for_status(client, wait_timeout, result['NatGatewayId'], 'available', check_mode=check_mode) DCNL DCSP  DCSP  DCSP if success: DCNL DCSP  DCSP  DCSP  DCSP err_msg = 'NAT DCSP gateway DCSP {0} DCSP created'.format(result['nat_gateway_id']) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP if ('IdempotentParameterMismatch' in e.message): DCNL DCSP  DCSP  DCSP err_msg = 'NAT DCSP Gateway DCSP does DCSP not DCSP support DCSP update DCSP and DCSP token DCSP has DCSP already DCSP been DCSP provided' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP err_msg = str(e) DCNL DCSP  DCSP  DCSP success = False DCNL DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP  DCSP result = None DCNL DCSP return (success, changed, err_msg, result)
def pre_create(client, subnet_id, allocation_id=None, eip_address=None, if_exist_do_not_create=False, wait=False, wait_timeout=0, client_token=None, check_mode=False): DCNL  DCSP success = False DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP results = list() DCNL DCSP if ((not allocation_id) and (not eip_address)): DCNL DCSP  DCSP (existing_gateways, allocation_id_exists) = gateway_in_subnet_exists(client, subnet_id, check_mode=check_mode) DCNL DCSP  DCSP if ((len(existing_gateways) > 0) and if_exist_do_not_create): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP  DCSP results = existing_gateways[0] DCNL DCSP  DCSP  DCSP err_msg = 'NAT DCSP Gateway DCSP {0} DCSP already DCSP exists DCSP in DCSP subnet_id DCSP {1}'.format(existing_gateways[0]['nat_gateway_id'], subnet_id) DCNL DCSP  DCSP  DCSP return (success, changed, err_msg, results) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (success, err_msg, allocation_id) = allocate_eip_address(client, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (not success): DCNL DCSP  DCSP  DCSP  DCSP return (success, 'False', err_msg, dict()) DCNL DCSP elif (eip_address or allocation_id): DCNL DCSP  DCSP if (eip_address and (not allocation_id)): DCNL DCSP  DCSP  DCSP (allocation_id, err_msg) = get_eip_allocation_id_by_address(client, eip_address, check_mode=check_mode) DCNL DCSP  DCSP  DCSP if (not allocation_id): DCNL DCSP  DCSP  DCSP  DCSP success = False DCNL DCSP  DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP  DCSP  DCSP return (success, changed, err_msg, dict()) DCNL DCSP  DCSP (existing_gateways, allocation_id_exists) = gateway_in_subnet_exists(client, subnet_id, allocation_id, check_mode=check_mode) DCNL DCSP  DCSP if ((len(existing_gateways) > 0) and (allocation_id_exists or if_exist_do_not_create)): DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP changed = False DCNL DCSP  DCSP  DCSP results = existing_gateways[0] DCNL DCSP  DCSP  DCSP err_msg = 'NAT DCSP Gateway DCSP {0} DCSP already DCSP exists DCSP in DCSP subnet_id DCSP {1}'.format(existing_gateways[0]['nat_gateway_id'], subnet_id) DCNL DCSP  DCSP  DCSP return (success, changed, err_msg, results) DCNL DCSP (success, changed, err_msg, results) = create(client, subnet_id, allocation_id, client_token, wait, wait_timeout, if_exist_do_not_create, check_mode=check_mode) DCNL DCSP return (success, changed, err_msg, results)
def remove(client, nat_gateway_id, wait=False, wait_timeout=0, release_eip=False, check_mode=False): DCNL  DCSP params = {'NatGatewayId': nat_gateway_id} DCNL DCSP success = False DCNL DCSP changed = False DCNL DCSP err_msg = '' DCNL DCSP results = list() DCNL DCSP states = ['pending', 'available'] DCNL DCSP try: DCNL DCSP  DCSP (exist, _, gw) = get_nat_gateways(client, nat_gateway_id=nat_gateway_id, states=states, check_mode=check_mode) DCNL DCSP  DCSP if (exist and (len(gw) == 1)): DCNL DCSP  DCSP  DCSP results = gw[0] DCNL DCSP  DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP  DCSP client.delete_nat_gateway(**params) DCNL DCSP  DCSP  DCSP allocation_id = results['nat_gateway_addresses'][0]['allocation_id'] DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP success = True DCNL DCSP  DCSP  DCSP err_msg = 'NAT DCSP gateway DCSP {0} DCSP is DCSP in DCSP a DCSP deleting DCSP state. DCSP Delete DCSP was DCSP successful'.format(nat_gateway_id) DCNL DCSP  DCSP  DCSP if wait: DCNL DCSP  DCSP  DCSP  DCSP (status_achieved, err_msg, results) = wait_for_status(client, wait_timeout, nat_gateway_id, 'deleted', check_mode=check_mode) DCNL DCSP  DCSP  DCSP  DCSP if status_achieved: DCNL DCSP  DCSP  DCSP  DCSP  DCSP err_msg = 'NAT DCSP gateway DCSP {0} DCSP was DCSP deleted DCSP successfully'.format(nat_gateway_id) DCNL DCSP except botocore.exceptions.ClientError as e: DCNL DCSP  DCSP err_msg = str(e) DCNL DCSP if release_eip: DCNL DCSP  DCSP (eip_released, eip_err) = release_address(client, allocation_id, check_mode) DCNL DCSP  DCSP if (not eip_released): DCNL DCSP  DCSP  DCSP err_msg = '{0}: DCSP Failed DCSP to DCSP release DCSP EIP DCSP {1}: DCSP {2}'.format(err_msg, allocation_id, eip_err) DCNL DCSP  DCSP  DCSP success = False DCNL DCSP return (success, changed, err_msg, results)
def fix_return(node): DCNL  DCSP if isinstance(node, datetime.datetime): DCNL DCSP  DCSP node_value = str(node) DCNL DCSP elif isinstance(node, list): DCNL DCSP  DCSP node_value = [fix_return(item) for item in node] DCNL DCSP elif isinstance(node, dict): DCNL DCSP  DCSP node_value = dict([(item, fix_return(node[item])) for item in node.keys()]) DCNL DCSP else: DCNL DCSP  DCSP node_value = node DCNL DCSP return node_value
def alias_details(client, module): DCNL  DCSP lambda_facts = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP params = dict() DCNL DCSP  DCSP if module.params.get('max_items'): DCNL DCSP  DCSP  DCSP params['MaxItems'] = module.params.get('max_items') DCNL DCSP  DCSP if module.params.get('next_marker'): DCNL DCSP  DCSP  DCSP params['Marker'] = module.params.get('next_marker') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lambda_facts.update(aliases=client.list_aliases(FunctionName=function_name, **params)['Aliases']) DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP  DCSP lambda_facts.update(aliases=[]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP {0} DCSP aliases, DCSP error: DCSP {1}'.format(function_name, e)) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='Parameter DCSP function_name DCSP required DCSP for DCSP query=aliases.') DCNL DCSP return {function_name: camel_dict_to_snake_dict(lambda_facts)}
def all_details(client, module): DCNL  DCSP if (module.params.get('max_items') or module.params.get('next_marker')): DCNL DCSP  DCSP module.fail_json(msg='Cannot DCSP specify DCSP max_items DCSP nor DCSP next_marker DCSP for DCSP query=all.') DCNL DCSP lambda_facts = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP lambda_facts[function_name] = {} DCNL DCSP  DCSP lambda_facts[function_name].update(config_details(client, module)[function_name]) DCNL DCSP  DCSP lambda_facts[function_name].update(alias_details(client, module)[function_name]) DCNL DCSP  DCSP lambda_facts[function_name].update(policy_details(client, module)[function_name]) DCNL DCSP  DCSP lambda_facts[function_name].update(version_details(client, module)[function_name]) DCNL DCSP  DCSP lambda_facts[function_name].update(mapping_details(client, module)[function_name]) DCNL DCSP else: DCNL DCSP  DCSP lambda_facts.update(config_details(client, module)) DCNL DCSP return lambda_facts
def config_details(client, module): DCNL  DCSP lambda_facts = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lambda_facts.update(client.get_function_configuration(FunctionName=function_name)) DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP  DCSP lambda_facts.update(function={}) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP {0} DCSP configuration, DCSP error: DCSP {1}'.format(function_name, e)) DCNL DCSP else: DCNL DCSP  DCSP params = dict() DCNL DCSP  DCSP if module.params.get('max_items'): DCNL DCSP  DCSP  DCSP params['MaxItems'] = module.params.get('max_items') DCNL DCSP  DCSP if module.params.get('next_marker'): DCNL DCSP  DCSP  DCSP params['Marker'] = module.params.get('next_marker') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lambda_facts.update(function_list=client.list_functions(**params)['Functions']) DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP  DCSP lambda_facts.update(function_list=[]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP function DCSP list, DCSP error: DCSP {0}'.format(e)) DCNL DCSP  DCSP functions = dict() DCNL DCSP  DCSP for func in lambda_facts.pop('function_list', []): DCNL DCSP  DCSP  DCSP functions[func['FunctionName']] = camel_dict_to_snake_dict(func) DCNL DCSP  DCSP return functions DCNL DCSP return {function_name: camel_dict_to_snake_dict(lambda_facts)}
def mapping_details(client, module): DCNL  DCSP lambda_facts = dict() DCNL DCSP params = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP params['FunctionName'] = module.params.get('function_name') DCNL DCSP if module.params.get('event_source_arn'): DCNL DCSP  DCSP params['EventSourceArn'] = module.params.get('event_source_arn') DCNL DCSP if module.params.get('max_items'): DCNL DCSP  DCSP params['MaxItems'] = module.params.get('max_items') DCNL DCSP if module.params.get('next_marker'): DCNL DCSP  DCSP params['Marker'] = module.params.get('next_marker') DCNL DCSP try: DCNL DCSP  DCSP lambda_facts.update(mappings=client.list_event_source_mappings(**params)['EventSourceMappings']) DCNL DCSP except ClientError as e: DCNL DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP lambda_facts.update(mappings=[]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP source DCSP event DCSP mappings, DCSP error: DCSP {0}'.format(e)) DCNL DCSP if function_name: DCNL DCSP  DCSP return {function_name: camel_dict_to_snake_dict(lambda_facts)} DCNL DCSP return camel_dict_to_snake_dict(lambda_facts)
def policy_details(client, module): DCNL  DCSP if (module.params.get('max_items') or module.params.get('next_marker')): DCNL DCSP  DCSP module.fail_json(msg='Cannot DCSP specify DCSP max_items DCSP nor DCSP next_marker DCSP for DCSP query=policy.') DCNL DCSP lambda_facts = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lambda_facts.update(policy=json.loads(client.get_policy(FunctionName=function_name)['Policy'])) DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP  DCSP lambda_facts.update(policy={}) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP {0} DCSP policy, DCSP error: DCSP {1}'.format(function_name, e)) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='Parameter DCSP function_name DCSP required DCSP for DCSP query=policy.') DCNL DCSP return {function_name: camel_dict_to_snake_dict(lambda_facts)}
def version_details(client, module): DCNL  DCSP lambda_facts = dict() DCNL DCSP function_name = module.params.get('function_name') DCNL DCSP if function_name: DCNL DCSP  DCSP params = dict() DCNL DCSP  DCSP if module.params.get('max_items'): DCNL DCSP  DCSP  DCSP params['MaxItems'] = module.params.get('max_items') DCNL DCSP  DCSP if module.params.get('next_marker'): DCNL DCSP  DCSP  DCSP params['Marker'] = module.params.get('next_marker') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP lambda_facts.update(versions=client.list_versions_by_function(FunctionName=function_name, **params)['Versions']) DCNL DCSP  DCSP except ClientError as e: DCNL DCSP  DCSP  DCSP if (e.response['Error']['Code'] == 'ResourceNotFoundException'): DCNL DCSP  DCSP  DCSP  DCSP lambda_facts.update(versions=[]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Unable DCSP to DCSP get DCSP {0} DCSP versions, DCSP error: DCSP {1}'.format(function_name, e)) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='Parameter DCSP function_name DCSP required DCSP for DCSP query=versions.') DCNL DCSP return {function_name: camel_dict_to_snake_dict(lambda_facts)}
def main(): DCNL  DCSP argument_spec = ec2_argument_spec() DCNL DCSP argument_spec.update(dict(function_name=dict(required=False, default=None, aliases=['function', 'name']), query=dict(required=False, choices=['aliases', 'all', 'config', 'mappings', 'policy', 'versions'], default='all'), event_source_arn=dict(required=False, default=None))) DCNL DCSP module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True, mutually_exclusive=[], required_together=[]) DCNL DCSP if (not HAS_BOTO3): DCNL DCSP  DCSP module.fail_json(msg='boto3 DCSP is DCSP required DCSP for DCSP this DCSP module.') DCNL DCSP function_name = module.params['function_name'] DCNL DCSP if function_name: DCNL DCSP  DCSP if (not re.search('^[\\w\\-:]+$', function_name)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP {0} DCSP is DCSP invalid. DCSP Names DCSP must DCSP contain DCSP only DCSP alphanumeric DCSP characters DCSP and DCSP hyphens.'.format(function_name)) DCNL DCSP  DCSP if (len(function_name) > 64): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP "{0}" DCSP exceeds DCSP 64 DCSP character DCSP limit'.format(function_name)) DCNL DCSP try: DCNL DCSP  DCSP (region, endpoint, aws_connect_kwargs) = get_aws_connection_info(module, boto3=True) DCNL DCSP  DCSP aws_connect_kwargs.update(dict(region=region, endpoint=endpoint, conn_type='client', resource='lambda')) DCNL DCSP  DCSP client = boto3_conn(module, **aws_connect_kwargs) DCNL DCSP except ClientError as e: DCNL DCSP  DCSP module.fail_json(msg="Can't DCSP authorize DCSP connection DCSP - DCSP {0}".format(e)) DCNL DCSP this_module = sys.modules[__name__] DCNL DCSP invocations = dict(aliases='alias_details', all='all_details', config='config_details', mappings='mapping_details', policy='policy_details', versions='version_details') DCNL DCSP this_module_function = getattr(this_module, invocations[module.params['query']]) DCNL DCSP all_facts = fix_return(this_module_function(client, module)) DCNL DCSP results = dict(ansible_facts={'lambda_facts': {'function': all_facts}}, changed=False) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP results['msg'] = 'Check DCSP mode DCSP set DCSP but DCSP ignored DCSP for DCSP fact DCSP gathering DCSP only.' DCNL DCSP module.exit_json(**results)
def get_block_device_mapping(image): DCNL  DCSP bdm_dict = dict() DCNL DCSP if ((image is not None) and hasattr(image, 'block_device_mapping')): DCNL DCSP  DCSP bdm = getattr(image, 'block_device_mapping') DCNL DCSP  DCSP for device_name in bdm.keys(): DCNL DCSP  DCSP  DCSP bdm_dict[device_name] = {'size': bdm[device_name].size, 'snapshot_id': bdm[device_name].snapshot_id, 'volume_type': bdm[device_name].volume_type, 'encrypted': bdm[device_name].encrypted, 'delete_on_termination': bdm[device_name].delete_on_termination} DCNL DCSP return bdm_dict
def create_image(module, ec2): DCNL  DCSP instance_id = module.params.get('instance_id') DCNL DCSP name = module.params.get('name') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP description = module.params.get('description') DCNL DCSP architecture = module.params.get('architecture') DCNL DCSP kernel_id = module.params.get('kernel_id') DCNL DCSP root_device_name = module.params.get('root_device_name') DCNL DCSP virtualization_type = module.params.get('virtualization_type') DCNL DCSP no_reboot = module.params.get('no_reboot') DCNL DCSP device_mapping = module.params.get('device_mapping') DCNL DCSP tags = module.params.get('tags') DCNL DCSP launch_permissions = module.params.get('launch_permissions') DCNL DCSP try: DCNL DCSP  DCSP params = {'name': name, 'description': description} DCNL DCSP  DCSP images = ec2.get_all_images(filters={'name': name}) DCNL DCSP  DCSP if (images and images[0]): DCNL DCSP  DCSP  DCSP update_image(module, ec2, images[0].id) DCNL DCSP  DCSP bdm = None DCNL DCSP  DCSP if device_mapping: DCNL DCSP  DCSP  DCSP bdm = BlockDeviceMapping() DCNL DCSP  DCSP  DCSP for device in device_mapping: DCNL DCSP  DCSP  DCSP  DCSP if ('device_name' not in device): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Device DCSP name DCSP must DCSP be DCSP set DCSP for DCSP volume') DCNL DCSP  DCSP  DCSP  DCSP device_name = device['device_name'] DCNL DCSP  DCSP  DCSP  DCSP del device['device_name'] DCNL DCSP  DCSP  DCSP  DCSP bd = BlockDeviceType(**device) DCNL DCSP  DCSP  DCSP  DCSP bdm[device_name] = bd DCNL DCSP  DCSP if instance_id: DCNL DCSP  DCSP  DCSP params['instance_id'] = instance_id DCNL DCSP  DCSP  DCSP params['no_reboot'] = no_reboot DCNL DCSP  DCSP  DCSP if bdm: DCNL DCSP  DCSP  DCSP  DCSP params['block_device_mapping'] = bdm DCNL DCSP  DCSP  DCSP image_id = ec2.create_image(**params) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP params['architecture'] = architecture DCNL DCSP  DCSP  DCSP params['virtualization_type'] = virtualization_type DCNL DCSP  DCSP  DCSP if kernel_id: DCNL DCSP  DCSP  DCSP  DCSP params['kernel_id'] = kernel_id DCNL DCSP  DCSP  DCSP if root_device_name: DCNL DCSP  DCSP  DCSP  DCSP params['root_device_name'] = root_device_name DCNL DCSP  DCSP  DCSP if bdm: DCNL DCSP  DCSP  DCSP  DCSP params['block_device_map'] = bdm DCNL DCSP  DCSP  DCSP image_id = ec2.register_image(**params) DCNL DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP for i in range(wait_timeout): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP img = ec2.get_image(image_id) DCNL DCSP  DCSP  DCSP if (img.state == 'available'): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif (img.state == 'failed'): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='AMI DCSP creation DCSP failed, DCSP please DCSP see DCSP the DCSP AWS DCSP console DCSP for DCSP more DCSP details') DCNL DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP if ((('InvalidAMIID.NotFound' not in e.error_code) and ('InvalidAMIID.Unavailable' not in e.error_code)) and wait and (i == (wait_timeout - 1))): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Error DCSP while DCSP trying DCSP to DCSP find DCSP the DCSP new DCSP image. DCSP Using DCSP wait=yes DCSP and/or DCSP a DCSP longer DCSP wait_timeout DCSP may DCSP help. DCSP %s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP time.sleep(1) DCNL DCSP if (img.state != 'available'): DCNL DCSP  DCSP module.fail_json(msg='Error DCSP while DCSP trying DCSP to DCSP find DCSP the DCSP new DCSP image. DCSP Using DCSP wait=yes DCSP and/or DCSP a DCSP longer DCSP wait_timeout DCSP may DCSP help.') DCNL DCSP if tags: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP ec2.create_tags(image_id, tags) DCNL DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Image DCSP tagging DCSP failed DCSP => DCSP %s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP if launch_permissions: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP img = ec2.get_image(image_id) DCNL DCSP  DCSP  DCSP img.set_launch_permissions(**launch_permissions) DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message)), image_id=image_id) DCNL DCSP module.exit_json(msg='AMI DCSP creation DCSP operation DCSP complete', changed=True, **get_ami_info(img))
def deregister_image(module, ec2): DCNL  DCSP image_id = module.params.get('image_id') DCNL DCSP delete_snapshot = module.params.get('delete_snapshot') DCNL DCSP wait = module.params.get('wait') DCNL DCSP wait_timeout = int(module.params.get('wait_timeout')) DCNL DCSP img = ec2.get_image(image_id) DCNL DCSP if (img == None): DCNL DCSP  DCSP module.fail_json(msg=('Image DCSP %s DCSP does DCSP not DCSP exist' % image_id), changed=False) DCNL DCSP snapshots = [] DCNL DCSP if hasattr(img, 'block_device_mapping'): DCNL DCSP  DCSP for key in img.block_device_mapping: DCNL DCSP  DCSP  DCSP snapshots.append(img.block_device_mapping[key].snapshot_id) DCNL DCSP if hasattr(img, 'id'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP params = {'image_id': image_id, 'delete_snapshot': delete_snapshot} DCNL DCSP  DCSP  DCSP res = ec2.deregister_image(**params) DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message))) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(msg=('Image DCSP %s DCSP has DCSP already DCSP been DCSP deleted' % image_id), changed=False) DCNL DCSP img = ec2.get_image(image_id) DCNL DCSP wait_timeout = (time.time() + wait_timeout) DCNL DCSP while (wait and (wait_timeout > time.time()) and (img is not None)): DCNL DCSP  DCSP img = ec2.get_image(image_id) DCNL DCSP  DCSP time.sleep(3) DCNL DCSP if (wait and (wait_timeout <= time.time())): DCNL DCSP  DCSP module.fail_json(msg='timed DCSP out DCSP waiting DCSP for DCSP image DCSP to DCSP be DCSP deregistered/deleted') DCNL DCSP if delete_snapshot: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP for snapshot_id in snapshots: DCNL DCSP  DCSP  DCSP  DCSP ec2.delete_snapshot(snapshot_id) DCNL DCSP  DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP  DCSP if (e.error_code == 'InvalidSnapshot.NotFound'): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP module.exit_json(msg='AMI DCSP deregister/delete DCSP operation DCSP complete', changed=True, snapshots_deleted=snapshots) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(msg='AMI DCSP deregister/delete DCSP operation DCSP complete', changed=True)
def update_image(module, ec2, image_id): DCNL  DCSP launch_permissions = (module.params.get('launch_permissions') or []) DCNL DCSP if ('user_ids' in launch_permissions): DCNL DCSP  DCSP launch_permissions['user_ids'] = [str(user_id) for user_id in launch_permissions['user_ids']] DCNL DCSP img = ec2.get_image(image_id) DCNL DCSP if (img == None): DCNL DCSP  DCSP module.fail_json(msg=('Image DCSP %s DCSP does DCSP not DCSP exist' % image_id), changed=False) DCNL DCSP try: DCNL DCSP  DCSP set_permissions = img.get_launch_permissions() DCNL DCSP  DCSP if (set_permissions != launch_permissions): DCNL DCSP  DCSP  DCSP if ((('user_ids' in launch_permissions) and launch_permissions['user_ids']) or (('group_names' in launch_permissions) and launch_permissions['group_names'])): DCNL DCSP  DCSP  DCSP  DCSP res = img.set_launch_permissions(**launch_permissions) DCNL DCSP  DCSP  DCSP elif ((('user_ids' in set_permissions) and set_permissions['user_ids']) or (('group_names' in set_permissions) and set_permissions['group_names'])): DCNL DCSP  DCSP  DCSP  DCSP res = img.remove_launch_permissions(**set_permissions) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(msg='AMI DCSP not DCSP updated', launch_permissions=set_permissions, changed=False) DCNL DCSP  DCSP  DCSP module.exit_json(msg='AMI DCSP launch DCSP permissions DCSP updated', launch_permissions=launch_permissions, set_perms=set_permissions, changed=True) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.exit_json(msg='AMI DCSP not DCSP updated', launch_permissions=set_permissions, changed=False) DCNL DCSP except boto.exception.BotoServerError as e: DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s' % (e.error_code, e.error_message)))
def pc(key): DCNL  DCSP return ''.join([token.capitalize() for token in key.split('_')])
def ordered_obj(obj): DCNL  DCSP if isinstance(obj, dict): DCNL DCSP  DCSP return sorted(((k, ordered_obj(v)) for (k, v) in obj.items())) DCNL DCSP if isinstance(obj, list): DCNL DCSP  DCSP return sorted((ordered_obj(x) for x in obj)) DCNL DCSP else: DCNL DCSP  DCSP return obj
def set_api_sub_params(params): DCNL  DCSP api_params = dict() DCNL DCSP for param in params.keys(): DCNL DCSP  DCSP param_value = params.get(param, None) DCNL DCSP  DCSP if param_value: DCNL DCSP  DCSP  DCSP api_params[pc(param)] = param_value DCNL DCSP return api_params
def validate_params(module, aws): DCNL  DCSP function_name = module.params['lambda_function_arn'] DCNL DCSP if (not re.search('^[\\w\\-:]+$', function_name)): DCNL DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP {0} DCSP is DCSP invalid. DCSP Names DCSP must DCSP contain DCSP only DCSP alphanumeric DCSP characters DCSP and DCSP hyphens.'.format(function_name)) DCNL DCSP if (len(function_name) > 64): DCNL DCSP  DCSP module.fail_json(msg='Function DCSP name DCSP "{0}" DCSP exceeds DCSP 64 DCSP character DCSP limit'.format(function_name)) DCNL DCSP if (not module.params['lambda_function_arn'].startswith('arn:aws:lambda:')): DCNL DCSP  DCSP function_name = module.params['lambda_function_arn'] DCNL DCSP  DCSP module.params['lambda_function_arn'] = 'arn:aws:lambda:{0}:{1}:function:{2}'.format(aws.region, aws.account_id, function_name) DCNL DCSP qualifier = get_qualifier(module) DCNL DCSP if qualifier: DCNL DCSP  DCSP function_arn = module.params['lambda_function_arn'] DCNL DCSP  DCSP module.params['lambda_function_arn'] = '{0}:{1}'.format(function_arn, qualifier) DCNL DCSP return
def get_qualifier(module): DCNL  DCSP qualifier = None DCNL DCSP if (module.params['version'] > 0): DCNL DCSP  DCSP qualifier = str(module.params['version']) DCNL DCSP elif module.params['alias']: DCNL DCSP  DCSP qualifier = str(module.params['alias']) DCNL DCSP return qualifier
def lambda_event_stream(module, aws): DCNL  DCSP client = aws.client('lambda') DCNL DCSP facts = dict() DCNL DCSP changed = False DCNL DCSP current_state = 'absent' DCNL DCSP state = module.params['state'] DCNL DCSP api_params = dict(FunctionName=module.params['lambda_function_arn']) DCNL DCSP source_params = module.params['source_params'] DCNL DCSP source_arn = source_params.get('source_arn') DCNL DCSP if source_arn: DCNL DCSP  DCSP api_params.update(EventSourceArn=source_arn) DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg="Source DCSP parameter DCSP 'source_arn' DCSP is DCSP required DCSP for DCSP stream DCSP event DCSP notification.") DCNL DCSP batch_size = source_params.get('batch_size') DCNL DCSP if batch_size: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP source_params['batch_size'] = int(batch_size) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg="Source DCSP parameter DCSP 'batch_size' DCSP must DCSP be DCSP an DCSP integer, DCSP found: DCSP {0}".format(source_params['batch_size'])) DCNL DCSP source_param_enabled = module.boolean(source_params.get('enabled', 'True')) DCNL DCSP try: DCNL DCSP  DCSP facts = client.list_event_source_mappings(**api_params)['EventSourceMappings'] DCNL DCSP  DCSP if facts: DCNL DCSP  DCSP  DCSP current_state = 'present' DCNL DCSP except ClientError as e: DCNL DCSP  DCSP module.fail_json(msg='Error DCSP retrieving DCSP stream DCSP event DCSP notification DCSP configuration: DCSP {0}'.format(e)) DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if (current_state == 'absent'): DCNL DCSP  DCSP  DCSP starting_position = source_params.get('starting_position') DCNL DCSP  DCSP  DCSP if starting_position: DCNL DCSP  DCSP  DCSP  DCSP api_params.update(StartingPosition=starting_position) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg="Source DCSP parameter DCSP 'starting_position' DCSP is DCSP required DCSP for DCSP stream DCSP event DCSP notification.") DCNL DCSP  DCSP  DCSP if source_arn: DCNL DCSP  DCSP  DCSP  DCSP api_params.update(Enabled=source_param_enabled) DCNL DCSP  DCSP  DCSP if source_params.get('batch_size'): DCNL DCSP  DCSP  DCSP  DCSP api_params.update(BatchSize=source_params.get('batch_size')) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP facts = client.create_event_source_mapping(**api_params) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP creating DCSP stream DCSP source DCSP event DCSP mapping: DCSP {0}'.format(e)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP api_params = dict(FunctionName=module.params['lambda_function_arn']) DCNL DCSP  DCSP  DCSP current_mapping = facts[0] DCNL DCSP  DCSP  DCSP api_params.update(UUID=current_mapping['UUID']) DCNL DCSP  DCSP  DCSP mapping_changed = False DCNL DCSP  DCSP  DCSP if (source_params.get('batch_size') and (source_params['batch_size'] != current_mapping['BatchSize'])): DCNL DCSP  DCSP  DCSP  DCSP api_params.update(BatchSize=source_params['batch_size']) DCNL DCSP  DCSP  DCSP  DCSP mapping_changed = True DCNL DCSP  DCSP  DCSP if (source_param_enabled is not None): DCNL DCSP  DCSP  DCSP  DCSP if source_param_enabled: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (current_mapping['State'] not in ('Enabled', 'Enabling')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP api_params.update(Enabled=True) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP mapping_changed = True DCNL DCSP  DCSP  DCSP  DCSP elif (current_mapping['State'] not in ('Disabled', 'Disabling')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP api_params.update(Enabled=False) DCNL DCSP  DCSP  DCSP  DCSP  DCSP mapping_changed = True DCNL DCSP  DCSP  DCSP if mapping_changed: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP facts = client.update_event_source_mapping(**api_params) DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP updating DCSP stream DCSP source DCSP event DCSP mapping: DCSP {0}'.format(e)) DCNL DCSP elif (current_state == 'present'): DCNL DCSP  DCSP api_params = dict(UUID=facts[0]['UUID']) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP facts = client.delete_event_source_mapping(**api_params) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except (ClientError, ParamValidationError, MissingParametersError) as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Error DCSP removing DCSP stream DCSP source DCSP event DCSP mapping: DCSP {0}'.format(e)) DCNL DCSP return camel_dict_to_snake_dict(dict(changed=changed, events=facts))
def main(): DCNL  DCSP this_module = sys.modules[__name__] DCNL DCSP source_choices = ['stream'] DCNL DCSP argument_spec = ec2_argument_spec() DCNL DCSP argument_spec.update(dict(state=dict(required=False, default='present', choices=['present', 'absent']), lambda_function_arn=dict(required=True, default=None, aliases=['function_name', 'function_arn']), event_source=dict(required=False, default='stream', choices=source_choices), source_params=dict(type='dict', required=True, default=None), alias=dict(required=False, default=None), version=dict(type='int', required=False, default=0))) DCNL DCSP module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True, mutually_exclusive=[['alias', 'version']], required_together=[]) DCNL DCSP if (not HAS_BOTO3): DCNL DCSP  DCSP module.fail_json(msg='boto3 DCSP is DCSP required DCSP for DCSP this DCSP module.') DCNL DCSP aws = AWSConnection(module, ['lambda']) DCNL DCSP validate_params(module, aws) DCNL DCSP this_module_function = getattr(this_module, 'lambda_event_{}'.format(module.params['event_source'].lower())) DCNL DCSP results = this_module_function(module, aws) DCNL DCSP module.exit_json(**results)
def find_address(ec2, public_ip, device_id, isinstance=True): DCNL  DCSP if public_ip: DCNL DCSP  DCSP return _find_address_by_ip(ec2, public_ip) DCNL DCSP elif (device_id and isinstance): DCNL DCSP  DCSP return _find_address_by_device_id(ec2, device_id) DCNL DCSP elif device_id: DCNL DCSP  DCSP return _find_address_by_device_id(ec2, device_id, isinstance=False)
def address_is_associated_with_device(ec2, address, device_id, isinstance=True): DCNL  DCSP address = ec2.get_all_addresses(address.public_ip) DCNL DCSP if address: DCNL DCSP  DCSP if isinstance: DCNL DCSP  DCSP  DCSP return (address and (address[0].instance_id == device_id)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (address and (address[0].network_interface_id == device_id)) DCNL DCSP return False
def allocate_address(ec2, domain, reuse_existing_ip_allowed): DCNL  DCSP if reuse_existing_ip_allowed: DCNL DCSP  DCSP domain_filter = {'domain': (domain or 'standard')} DCNL DCSP  DCSP all_addresses = ec2.get_all_addresses(filters=domain_filter) DCNL DCSP  DCSP if (domain == 'vpc'): DCNL DCSP  DCSP  DCSP unassociated_addresses = [a for a in all_addresses if (not a.association_id)] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP unassociated_addresses = [a for a in all_addresses if (not a.instance_id)] DCNL DCSP  DCSP if unassociated_addresses: DCNL DCSP  DCSP  DCSP return unassociated_addresses[0] DCNL DCSP return ec2.allocate_address(domain=domain)
def release_address(ec2, address, check_mode): DCNL  DCSP if (not check_mode): DCNL DCSP  DCSP if (not address.release()): DCNL DCSP  DCSP  DCSP EIPException('release DCSP failed') DCNL DCSP return {'changed': True}
def find_device(ec2, module, device_id, isinstance=True): DCNL  DCSP if isinstance: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP reservations = ec2.get_all_reservations(instance_ids=[device_id]) DCNL DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP  DCSP if (len(reservations) == 1): DCNL DCSP  DCSP  DCSP instances = reservations[0].instances DCNL DCSP  DCSP  DCSP if (len(instances) == 1): DCNL DCSP  DCSP  DCSP  DCSP return instances[0] DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP interfaces = ec2.get_all_network_interfaces(network_interface_ids=[device_id]) DCNL DCSP  DCSP except boto.exception.EC2ResponseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP  DCSP if (len(interfaces) == 1): DCNL DCSP  DCSP  DCSP return interfaces[0] DCNL DCSP raise EIPException(('could DCSP not DCSP find DCSP instance' + device_id))
def find_asgs(conn, module, name=None, tags=None): DCNL  DCSP try: DCNL DCSP  DCSP asgs_paginator = conn.get_paginator('describe_auto_scaling_groups') DCNL DCSP  DCSP asgs = asgs_paginator.paginate().build_full_result() DCNL DCSP except ClientError as e: DCNL DCSP  DCSP module.fail_json(msg=e.message, **camel_dict_to_snake_dict(e.response)) DCNL DCSP matched_asgs = [] DCNL DCSP if (name is not None): DCNL DCSP  DCSP name_prog = re.compile(('^' + name)) DCNL DCSP for asg in asgs['AutoScalingGroups']: DCNL DCSP  DCSP if name: DCNL DCSP  DCSP  DCSP matched_name = name_prog.search(asg['AutoScalingGroupName']) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP matched_name = True DCNL DCSP  DCSP if tags: DCNL DCSP  DCSP  DCSP matched_tags = match_asg_tags(tags, asg) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP matched_tags = True DCNL DCSP  DCSP if (matched_name and matched_tags): DCNL DCSP  DCSP  DCSP matched_asgs.append(camel_dict_to_snake_dict(asg)) DCNL DCSP return matched_asgs
def change_keys(recs, key='uuid', filter_func=None): DCNL  DCSP new_recs = {} DCNL DCSP for (ref, rec) in recs.items(): DCNL DCSP  DCSP if ((filter_func is not None) and (not filter_func(rec))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP new_recs[rec[key]] = rec DCNL DCSP  DCSP new_recs[rec[key]]['ref'] = ref DCNL DCSP return new_recs
def get_host(session): DCNL  DCSP host_recs = session.xenapi.host.get_all() DCNL DCSP return session.xenapi.host.get_record(host_recs[0])
def convert_time(time): DCNL  DCSP units = [(((24 * 60) * 60), 'days'), ((60 * 60), 'hours'), (60, 'minutes'), (1, 'seconds')] DCNL DCSP if (time == 0): DCNL DCSP  DCSP return ('0', 'seconds') DCNL DCSP for unit in units: DCNL DCSP  DCSP if (time >= unit[0]): DCNL DCSP  DCSP  DCSP return ('{}'.format((time // unit[0])), unit[1])
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcBlueprintPackage.define_argument_spec(), supports_check_mode=True) DCNL DCSP clc_blueprint_package = ClcBlueprintPackage(module) DCNL DCSP clc_blueprint_package.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcSnapshot.define_argument_spec(), supports_check_mode=True) DCNL DCSP clc_snapshot = ClcSnapshot(module) DCNL DCSP clc_snapshot.process_request()
def main(): DCNL  DCSP argument_dict = ClcModifyServer._define_module_argument_spec() DCNL DCSP module = AnsibleModule(supports_check_mode=True, **argument_dict) DCNL DCSP clc_modify_server = ClcModifyServer(module) DCNL DCSP clc_modify_server.process_request()
def main(): DCNL  DCSP argument_dict = ClcServer._define_module_argument_spec() DCNL DCSP module = AnsibleModule(supports_check_mode=True, **argument_dict) DCNL DCSP clc_server = ClcServer(module) DCNL DCSP clc_server.process_request()
def main(): DCNL  DCSP argument_dict = ClcAlertPolicy._define_module_argument_spec() DCNL DCSP module = AnsibleModule(supports_check_mode=True, **argument_dict) DCNL DCSP clc_alert_policy = ClcAlertPolicy(module) DCNL DCSP clc_alert_policy.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcGroup._define_module_argument_spec(), supports_check_mode=True) DCNL DCSP clc_group = ClcGroup(module) DCNL DCSP clc_group.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcFirewallPolicy._define_module_argument_spec(), supports_check_mode=True) DCNL DCSP clc_firewall = ClcFirewallPolicy(module) DCNL DCSP clc_firewall.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcLoadBalancer.define_argument_spec(), supports_check_mode=True) DCNL DCSP clc_loadbalancer = ClcLoadBalancer(module) DCNL DCSP clc_loadbalancer.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcAntiAffinityPolicy._define_module_argument_spec(), supports_check_mode=True) DCNL DCSP clc_aa_policy = ClcAntiAffinityPolicy(module) DCNL DCSP clc_aa_policy.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=ClcPublicIp._define_module_argument_spec(), supports_check_mode=True) DCNL DCSP clc_public_ip = ClcPublicIp(module) DCNL DCSP clc_public_ip.process_request()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(name=dict(type='str', required=True), architecture=dict(type='str'), config=dict(type='dict'), description=dict(type='str'), devices=dict(type='dict'), ephemeral=dict(type='bool'), profiles=dict(type='list'), source=dict(type='dict'), state=dict(choices=LXD_ANSIBLE_STATES.keys(), default='started'), timeout=dict(type='int', default=30), wait_for_ipv4_addresses=dict(type='bool', default=False), force_stop=dict(type='bool', default=False), url=dict(type='str', default='unix:/var/lib/lxd/unix.socket'), key_file=dict(type='str', default='{}/.config/lxc/client.key'.format(os.environ['HOME'])), cert_file=dict(type='str', default='{}/.config/lxc/client.crt'.format(os.environ['HOME'])), trust_password=dict(type='str')), supports_check_mode=False) DCNL DCSP lxd_manage = LXDContainerManagement(module=module) DCNL DCSP lxd_manage.run()
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(name=dict(type='str', required=True), new_name=dict(type='str'), config=dict(type='dict'), description=dict(type='str'), devices=dict(type='dict'), state=dict(choices=PROFILES_STATES, default='present'), url=dict(type='str', default='unix:/var/lib/lxd/unix.socket'), key_file=dict(type='str', default='{}/.config/lxc/client.key'.format(os.environ['HOME'])), cert_file=dict(type='str', default='{}/.config/lxc/client.crt'.format(os.environ['HOME'])), trust_password=dict(type='str')), supports_check_mode=False) DCNL DCSP lxd_manage = LXDProfileManagement(module=module) DCNL DCSP lxd_manage.run()
def _check_params(params, field_list): DCNL  DCSP for d in field_list: DCNL DCSP  DCSP if (not (d['name'] in params)): DCNL DCSP  DCSP  DCSP if (d['required'] is True): DCNL DCSP  DCSP  DCSP  DCSP return (False, ('%s DCSP is DCSP required DCSP and DCSP must DCSP be DCSP of DCSP type: DCSP %s' % (d['name'], str(d['type'])))) DCNL DCSP  DCSP elif (not isinstance(params[d['name']], d['type'])): DCNL DCSP  DCSP  DCSP return (False, ('%s DCSP must DCSP be DCSP of DCSP type: DCSP %s' % (d['name'], str(d['type'])))) DCNL DCSP return (True, '')
def _validate_autoscaling_params(params): DCNL  DCSP if (not params['autoscaling']): DCNL DCSP  DCSP return (True, '') DCNL DCSP if (not isinstance(params['autoscaling'], dict)): DCNL DCSP  DCSP return (False, 'autoscaling: DCSP configuration DCSP expected DCSP to DCSP be DCSP a DCSP dictionary.') DCNL DCSP as_req_fields = [{'name': 'name', 'required': True, 'type': str}, {'name': 'enabled', 'required': True, 'type': bool}, {'name': 'policy', 'required': True, 'type': dict}] DCNL DCSP (as_req_valid, as_req_msg) = _check_params(params['autoscaling'], as_req_fields) DCNL DCSP if (not as_req_valid): DCNL DCSP  DCSP return (False, as_req_msg) DCNL DCSP as_policy_fields = [{'name': 'max_instances', 'required': True, 'type': int}, {'name': 'min_instances', 'required': False, 'type': int}, {'name': 'cool_down_period', 'required': False, 'type': int}] DCNL DCSP (as_policy_valid, as_policy_msg) = _check_params(params['autoscaling']['policy'], as_policy_fields) DCNL DCSP if (not as_policy_valid): DCNL DCSP  DCSP return (False, as_policy_msg) DCNL DCSP return (True, '')
def _validate_named_port_params(params): DCNL  DCSP if (not params['named_ports']): DCNL DCSP  DCSP return (True, '') DCNL DCSP if (not isinstance(params['named_ports'], list)): DCNL DCSP  DCSP return (False, 'named_ports: DCSP expected DCSP list DCSP of DCSP name:port DCSP dictionaries.') DCNL DCSP req_fields = [{'name': 'name', 'required': True, 'type': str}, {'name': 'port', 'required': True, 'type': int}] DCNL DCSP for np in params['named_ports']: DCNL DCSP  DCSP (valid_named_ports, np_msg) = _check_params(np, req_fields) DCNL DCSP  DCSP if (not valid_named_ports): DCNL DCSP  DCSP  DCSP return (False, np_msg) DCNL DCSP return (True, '')
def _get_instance_list(mig, field='name', filter_list=['NONE']): DCNL  DCSP return [x[field] for x in mig.list_managed_instances() if (x['currentAction'] in filter_list)]
def _gen_gce_as_policy(as_params): DCNL  DCSP asp_data = {} DCNL DCSP asp_data['maxNumReplicas'] = as_params['max_instances'] DCNL DCSP if ('min_instances' in as_params): DCNL DCSP  DCSP asp_data['minNumReplicas'] = as_params['min_instances'] DCNL DCSP if ('cool_down_period' in as_params): DCNL DCSP  DCSP asp_data['coolDownPeriodSec'] = as_params['cool_down_period'] DCNL DCSP if (('cpu_utilization' in as_params) and ('target' in as_params['cpu_utilization'])): DCNL DCSP  DCSP asp_data['cpuUtilization'] = {'utilizationTarget': as_params['cpu_utilization']['target']} DCNL DCSP if (('load_balancing_utilization' in as_params) and ('target' in as_params['load_balancing_utilization'])): DCNL DCSP  DCSP asp_data['loadBalancingUtilization'] = {'utilizationTarget': as_params['load_balancing_utilization']['target']} DCNL DCSP return asp_data
def create_autoscaler(gce, mig, params): DCNL  DCSP changed = False DCNL DCSP as_policy = _gen_gce_as_policy(params['policy']) DCNL DCSP autoscaler = gce.ex_create_autoscaler(name=params['name'], zone=mig.zone, instance_group=mig, policy=as_policy) DCNL DCSP if autoscaler: DCNL DCSP  DCSP changed = True DCNL DCSP return changed
def update_autoscaler(gce, autoscaler, params): DCNL  DCSP as_policy = _gen_gce_as_policy(params['policy']) DCNL DCSP if (autoscaler.policy != as_policy): DCNL DCSP  DCSP autoscaler.policy = as_policy DCNL DCSP  DCSP autoscaler = gce.ex_update_autoscaler(autoscaler) DCNL DCSP  DCSP if autoscaler: DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def delete_autoscaler(autoscaler): DCNL  DCSP changed = False DCNL DCSP if autoscaler.destroy(): DCNL DCSP  DCSP changed = True DCNL DCSP return changed
def get_autoscaler(gce, name, zone): DCNL  DCSP try: DCNL DCSP  DCSP return gce.ex_get_autoscaler(name, zone) DCNL DCSP except ResourceNotFoundError: DCNL DCSP  DCSP return None
def create_mig(gce, params): DCNL  DCSP changed = False DCNL DCSP return_data = [] DCNL DCSP actions_filter = ['CREATING'] DCNL DCSP mig = gce.ex_create_instancegroupmanager(name=params['name'], size=params['size'], template=params['template'], zone=params['zone']) DCNL DCSP if mig: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP return_data = _get_instance_list(mig, filter_list=actions_filter) DCNL DCSP return (changed, return_data)
def delete_mig(mig): DCNL  DCSP changed = False DCNL DCSP return_data = [] DCNL DCSP actions_filter = ['NONE', 'CREATING', 'RECREATING', 'DELETING', 'ABANDONING', 'RESTARTING', 'REFRESHING'] DCNL DCSP instance_names = _get_instance_list(mig, filter_list=actions_filter) DCNL DCSP if mig.destroy(): DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP return_data = instance_names DCNL DCSP return (changed, return_data)
def recreate_instances_in_mig(mig): DCNL  DCSP changed = False DCNL DCSP return_data = [] DCNL DCSP actions_filter = ['RECREATING'] DCNL DCSP if mig.recreate_instances(): DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP return_data = _get_instance_list(mig, filter_list=actions_filter) DCNL DCSP return (changed, return_data)
def resize_mig(mig, size): DCNL  DCSP changed = False DCNL DCSP return_data = [] DCNL DCSP actions_filter = ['CREATING', 'DELETING'] DCNL DCSP if mig.resize(size): DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP return_data = _get_instance_list(mig, filter_list=actions_filter) DCNL DCSP return (changed, return_data)
def get_mig(gce, name, zone): DCNL  DCSP try: DCNL DCSP  DCSP return gce.ex_get_instancegroupmanager(name=name, zone=zone) DCNL DCSP except ResourceNotFoundError: DCNL DCSP  DCSP return None
def update_named_ports(mig, named_ports): DCNL  DCSP changed = False DCNL DCSP existing_ports = [] DCNL DCSP new_ports = [] DCNL DCSP if hasattr(mig.instance_group, 'named_ports'): DCNL DCSP  DCSP existing_ports = sorted(mig.instance_group.named_ports, key=(lambda x: x['name'])) DCNL DCSP if (named_ports is not None): DCNL DCSP  DCSP new_ports = sorted(named_ports, key=(lambda x: x['name'])) DCNL DCSP if (existing_ports != new_ports): DCNL DCSP  DCSP if mig.instance_group.set_named_ports(named_ports): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP return changed
def transform_headers(headers): DCNL  DCSP for (key, value) in headers.items(): DCNL DCSP  DCSP headers[key] = str(value) DCNL DCSP return headers
def _union_items(baselist, comparelist): DCNL  DCSP return list((set(baselist) | set(comparelist)))
def _intersect_items(baselist, comparelist): DCNL  DCSP return list((set(baselist) & set(comparelist)))
def _get_changed_items(baselist, comparelist): DCNL  DCSP return list((set(baselist) & set((set(baselist) ^ set(comparelist)))))
def modify_tags(gce, module, node, tags, state='present'): DCNL  DCSP zone = node.extra['zone'].name DCNL DCSP existing_tags = node.extra['tags'] DCNL DCSP tags = [x.lower() for x in tags] DCNL DCSP tags_changed = [] DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP tags_changed = _intersect_items(existing_tags, tags) DCNL DCSP  DCSP if (not tags_changed): DCNL DCSP  DCSP  DCSP return (False, None) DCNL DCSP  DCSP node_tags = _get_changed_items(existing_tags, tags) DCNL DCSP else: DCNL DCSP  DCSP tags_changed = _get_changed_items(tags, existing_tags) DCNL DCSP  DCSP if (not tags_changed): DCNL DCSP  DCSP  DCSP return (False, None) DCNL DCSP  DCSP node_tags = _union_items(existing_tags, tags) DCNL DCSP try: DCNL DCSP  DCSP gce.ex_set_node_tags(node, node_tags) DCNL DCSP  DCSP return (True, tags_changed) DCNL DCSP except (GoogleBaseError, InvalidRequestError) as e: DCNL DCSP  DCSP module.fail_json(msg=str(e), changed=False)
def create_zone(module, gcdns, zone): DCNL  DCSP description = module.params['description'] DCNL DCSP extra = dict(description=description) DCNL DCSP zone_name = module.params['zone'] DCNL DCSP if (zone_name[(-1)] != '.'): DCNL DCSP  DCSP zone_name = (zone_name + '.') DCNL DCSP if (zone is not None): DCNL DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP gcdns.create_zone(domain=zone_name, extra=extra) DCNL DCSP  DCSP return True DCNL DCSP except ResourceExistsError: DCNL DCSP  DCSP return False DCNL DCSP except InvalidRequestError as error: DCNL DCSP  DCSP if (error.code == 'invalid'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('zone DCSP name DCSP is DCSP not DCSP a DCSP valid DCSP DNS DCSP name: DCSP %s' % zone_name), changed=False) DCNL DCSP  DCSP elif (error.code == 'managedZoneDnsNameNotAvailable'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('zone DCSP name DCSP is DCSP reserved DCSP or DCSP already DCSP in DCSP use: DCSP %s' % zone_name), changed=False) DCNL DCSP  DCSP elif (error.code == 'verifyManagedZoneDnsNameOwnership'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('ownership DCSP of DCSP zone DCSP %s DCSP needs DCSP to DCSP be DCSP verified DCSP at DCSP %s' % (zone_name, ZONE_VERIFICATION_URL)), changed=False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise
def remove_zone(module, gcdns, zone): DCNL  DCSP if (zone is None): DCNL DCSP  DCSP return False DCNL DCSP if (len(zone.list_records()) > 2): DCNL DCSP  DCSP module.fail_json(msg=('zone DCSP is DCSP not DCSP empty DCSP and DCSP cannot DCSP be DCSP removed: DCSP %s' % zone.domain), changed=False) DCNL DCSP try: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP gcdns.delete_zone(zone) DCNL DCSP  DCSP return True DCNL DCSP except ResourceNotFoundError: DCNL DCSP  DCSP return False DCNL DCSP except InvalidRequestError as error: DCNL DCSP  DCSP if (error.code == 'containerNotEmpty'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('zone DCSP is DCSP not DCSP empty DCSP and DCSP cannot DCSP be DCSP removed: DCSP %s' % zone.domain), changed=False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise
def _get_zone(gcdns, zone_name): DCNL  DCSP available_zones = gcdns.iterate_zones() DCNL DCSP found_zone = None DCNL DCSP for zone in available_zones: DCNL DCSP  DCSP if (zone.domain == zone_name): DCNL DCSP  DCSP  DCSP found_zone = zone DCNL DCSP  DCSP  DCSP break DCNL DCSP return found_zone
def _sanity_check(module): DCNL  DCSP zone_name = module.params['zone'] DCNL DCSP if (not HAS_LIBCLOUD): DCNL DCSP  DCSP module.fail_json(msg=('This DCSP module DCSP requires DCSP Apache DCSP libcloud DCSP %s DCSP or DCSP greater' % MINIMUM_LIBCLOUD_VERSION), changed=False) DCNL DCSP elif (LooseVersion(LIBCLOUD_VERSION) < MINIMUM_LIBCLOUD_VERSION): DCNL DCSP  DCSP module.fail_json(msg=('This DCSP module DCSP requires DCSP Apache DCSP libcloud DCSP %s DCSP or DCSP greater' % MINIMUM_LIBCLOUD_VERSION), changed=False) DCNL DCSP if (('.' not in zone_name) or (len([label for label in zone_name.split('.') if label]) == 1)): DCNL DCSP  DCSP module.fail_json(msg=('cannot DCSP create DCSP top-level DCSP domain: DCSP %s' % zone_name), changed=False)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(state=dict(default='present', choices=['present', 'absent'], type='str'), zone=dict(required=True, aliases=['name'], type='str'), description=dict(default='', type='str'), service_account_email=dict(type='str'), pem_file=dict(type='path'), credentials_file=dict(type='path'), project_id=dict(type='str')), supports_check_mode=True) DCNL DCSP _sanity_check(module) DCNL DCSP zone_name = module.params['zone'] DCNL DCSP state = module.params['state'] DCNL DCSP if (zone_name[(-1)] != '.'): DCNL DCSP  DCSP zone_name = (zone_name + '.') DCNL DCSP json_output = dict(state=state, zone=zone_name, description=module.params['description']) DCNL DCSP gcdns = gcdns_connect(module, provider=PROVIDER) DCNL DCSP zone = _get_zone(gcdns, zone_name) DCNL DCSP diff = dict() DCNL DCSP if (zone is None): DCNL DCSP  DCSP diff['before'] = '' DCNL DCSP  DCSP diff['before_header'] = '<absent>' DCNL DCSP else: DCNL DCSP  DCSP diff['before'] = dict(zone=zone.domain, description=zone.extra['description']) DCNL DCSP  DCSP diff['before_header'] = zone_name DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP diff['after'] = dict(zone=zone_name, description=module.params['description']) DCNL DCSP  DCSP diff['after_header'] = zone_name DCNL DCSP  DCSP changed = create_zone(module, gcdns, zone) DCNL DCSP elif (state == 'absent'): DCNL DCSP  DCSP diff['after'] = '' DCNL DCSP  DCSP diff['after_header'] = '<absent>' DCNL DCSP  DCSP changed = remove_zone(module, gcdns, zone) DCNL DCSP module.exit_json(changed=changed, diff=diff, **json_output)
def format_allowed_section(allowed): DCNL  DCSP if (allowed.count(':') == 0): DCNL DCSP  DCSP protocol = allowed DCNL DCSP  DCSP ports = [] DCNL DCSP elif (allowed.count(':') == 1): DCNL DCSP  DCSP (protocol, ports) = allowed.split(':') DCNL DCSP else: DCNL DCSP  DCSP return [] DCNL DCSP if ports.count(','): DCNL DCSP  DCSP ports = ports.split(',') DCNL DCSP else: DCNL DCSP  DCSP ports = [ports] DCNL DCSP return_val = {'IPProtocol': protocol} DCNL DCSP if ports: DCNL DCSP  DCSP return_val['ports'] = ports DCNL DCSP return return_val
def format_allowed(allowed): DCNL  DCSP return_value = [] DCNL DCSP if (allowed.count(';') == 0): DCNL DCSP  DCSP return [format_allowed_section(allowed)] DCNL DCSP else: DCNL DCSP  DCSP sections = allowed.split(';') DCNL DCSP  DCSP for section in sections: DCNL DCSP  DCSP  DCSP return_value.append(format_allowed_section(section)) DCNL DCSP return return_value
def sorted_allowed_list(allowed_list): DCNL  DCSP allowed_by_protocol = sorted(allowed_list, key=(lambda x: x['IPProtocol'])) DCNL DCSP return sorted(allowed_by_protocol, key=(lambda y: y['ports'].sort()))
def get_instance_info(inst): DCNL  DCSP metadata = {} DCNL DCSP if (('metadata' in inst.extra) and ('items' in inst.extra['metadata'])): DCNL DCSP  DCSP for md in inst.extra['metadata']['items']: DCNL DCSP  DCSP  DCSP metadata[md['key']] = md['value'] DCNL DCSP try: DCNL DCSP  DCSP netname = inst.extra['networkInterfaces'][0]['network'].split('/')[(-1)] DCNL DCSP except: DCNL DCSP  DCSP netname = None DCNL DCSP try: DCNL DCSP  DCSP subnetname = inst.extra['networkInterfaces'][0]['subnetwork'].split('/')[(-1)] DCNL DCSP except: DCNL DCSP  DCSP subnetname = None DCNL DCSP if ('disks' in inst.extra): DCNL DCSP  DCSP disk_names = [disk_info['source'].split('/')[(-1)] for disk_info in sorted(inst.extra['disks'], key=(lambda disk_info: disk_info['index']))] DCNL DCSP else: DCNL DCSP  DCSP disk_names = [] DCNL DCSP if (len(inst.public_ips) == 0): DCNL DCSP  DCSP public_ip = None DCNL DCSP else: DCNL DCSP  DCSP public_ip = inst.public_ips[0] DCNL DCSP return {'image': (((inst.image is not None) and inst.image.split('/')[(-1)]) or None), 'disks': disk_names, 'machine_type': inst.size, 'metadata': metadata, 'name': inst.name, 'network': netname, 'subnetwork': subnetname, 'private_ip': inst.private_ips[0], 'public_ip': public_ip, 'status': ((('status' in inst.extra) and inst.extra['status']) or None), 'tags': ((('tags' in inst.extra) and inst.extra['tags']) or []), 'zone': ((('zone' in inst.extra) and inst.extra['zone'].name) or None)}
def create_instances(module, gce, instance_names, number): DCNL  DCSP image = module.params.get('image') DCNL DCSP machine_type = module.params.get('machine_type') DCNL DCSP metadata = module.params.get('metadata') DCNL DCSP network = module.params.get('network') DCNL DCSP subnetwork = module.params.get('subnetwork') DCNL DCSP persistent_boot_disk = module.params.get('persistent_boot_disk') DCNL DCSP disks = module.params.get('disks') DCNL DCSP state = module.params.get('state') DCNL DCSP tags = module.params.get('tags') DCNL DCSP zone = module.params.get('zone') DCNL DCSP ip_forward = module.params.get('ip_forward') DCNL DCSP external_ip = module.params.get('external_ip') DCNL DCSP disk_auto_delete = module.params.get('disk_auto_delete') DCNL DCSP preemptible = module.params.get('preemptible') DCNL DCSP disk_size = module.params.get('disk_size') DCNL DCSP service_account_permissions = module.params.get('service_account_permissions') DCNL DCSP service_account_email = module.params.get('service_account_email') DCNL DCSP if (external_ip == 'none'): DCNL DCSP  DCSP instance_external_ip = None DCNL DCSP elif (external_ip != 'ephemeral'): DCNL DCSP  DCSP instance_external_ip = external_ip DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP socket.inet_aton(instance_external_ip) DCNL DCSP  DCSP  DCSP  DCSP instance_external_ip = GCEAddress(id='unknown', name='unknown', address=instance_external_ip, region='unknown', driver=gce) DCNL DCSP  DCSP  DCSP except socket.error: DCNL DCSP  DCSP  DCSP  DCSP instance_external_ip = gce.ex_get_address(instance_external_ip) DCNL DCSP  DCSP except GoogleBaseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Unexpected DCSP error DCSP attempting DCSP to DCSP get DCSP a DCSP static DCSP ip DCSP %s, DCSP error: DCSP %s' % (external_ip, e.value))) DCNL DCSP else: DCNL DCSP  DCSP instance_external_ip = external_ip DCNL DCSP new_instances = [] DCNL DCSP changed = False DCNL DCSP lc_disks = [] DCNL DCSP disk_modes = [] DCNL DCSP for (i, disk) in enumerate((disks or [])): DCNL DCSP  DCSP if isinstance(disk, dict): DCNL DCSP  DCSP  DCSP lc_disks.append(gce.ex_get_volume(disk['name'])) DCNL DCSP  DCSP  DCSP disk_modes.append(disk['mode']) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP lc_disks.append(gce.ex_get_volume(disk)) DCNL DCSP  DCSP  DCSP disk_modes.append(('READ_ONLY' if (i > 0) else 'READ_WRITE')) DCNL DCSP lc_network = gce.ex_get_network(network) DCNL DCSP lc_machine_type = gce.ex_get_size(machine_type) DCNL DCSP lc_zone = gce.ex_get_zone(zone) DCNL DCSP if metadata: DCNL DCSP  DCSP if isinstance(metadata, dict): DCNL DCSP  DCSP  DCSP md = metadata DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP md = literal_eval(str(metadata)) DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(md, dict)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError('metadata DCSP must DCSP be DCSP a DCSP dict') DCNL DCSP  DCSP  DCSP except ValueError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('bad DCSP metadata: DCSP %s' % str(e))) DCNL DCSP  DCSP  DCSP except SyntaxError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='bad DCSP metadata DCSP syntax') DCNL DCSP  DCSP if (hasattr(libcloud, '__version__') and (libcloud.__version__ < '0.15')): DCNL DCSP  DCSP  DCSP items = [] DCNL DCSP  DCSP  DCSP for (k, v) in md.items(): DCNL DCSP  DCSP  DCSP  DCSP items.append({'key': k, 'value': v}) DCNL DCSP  DCSP  DCSP metadata = {'items': items} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP metadata = md DCNL DCSP lc_image = LazyDiskImage(module, gce, image, lc_disks) DCNL DCSP ex_sa_perms = [] DCNL DCSP bad_perms = [] DCNL DCSP if service_account_permissions: DCNL DCSP  DCSP for perm in service_account_permissions: DCNL DCSP  DCSP  DCSP if (perm not in gce.SA_SCOPES_MAP): DCNL DCSP  DCSP  DCSP  DCSP bad_perms.append(perm) DCNL DCSP  DCSP if (len(bad_perms) > 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('bad DCSP permissions: DCSP %s' % str(bad_perms))) DCNL DCSP  DCSP ex_sa_perms.append({'email': 'default'}) DCNL DCSP  DCSP ex_sa_perms[0]['scopes'] = service_account_permissions DCNL DCSP if ((not lc_network) or (not lc_machine_type) or (not lc_zone)): DCNL DCSP  DCSP module.fail_json(msg='Missing DCSP required DCSP create DCSP instance DCSP variable', changed=False) DCNL DCSP gce_args = dict(location=lc_zone, ex_network=network, ex_tags=tags, ex_metadata=metadata, ex_can_ip_forward=ip_forward, external_ip=instance_external_ip, ex_disk_auto_delete=disk_auto_delete, ex_service_accounts=ex_sa_perms) DCNL DCSP if (preemptible is not None): DCNL DCSP  DCSP gce_args['ex_preemptible'] = preemptible DCNL DCSP if (subnetwork is not None): DCNL DCSP  DCSP gce_args['ex_subnetwork'] = subnetwork DCNL DCSP if (isinstance(instance_names, str) and (not number)): DCNL DCSP  DCSP instance_names = [instance_names] DCNL DCSP if (isinstance(instance_names, str) and number): DCNL DCSP  DCSP instance_responses = gce.ex_create_multiple_nodes(instance_names, lc_machine_type, lc_image(), number, **gce_args) DCNL DCSP  DCSP for resp in instance_responses: DCNL DCSP  DCSP  DCSP n = resp DCNL DCSP  DCSP  DCSP if isinstance(resp, libcloud.compute.drivers.gce.GCEFailedNode): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP n = gce.ex_get_node(n.name, lc_zone) DCNL DCSP  DCSP  DCSP  DCSP except ResourceNotFoundError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP new_instances.append(n) DCNL DCSP else: DCNL DCSP  DCSP for instance in instance_names: DCNL DCSP  DCSP  DCSP pd = None DCNL DCSP  DCSP  DCSP if lc_disks: DCNL DCSP  DCSP  DCSP  DCSP pd = lc_disks[0] DCNL DCSP  DCSP  DCSP elif persistent_boot_disk: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pd = gce.ex_get_volume(('%s' % instance), lc_zone) DCNL DCSP  DCSP  DCSP  DCSP except ResourceNotFoundError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pd = gce.create_volume(disk_size, ('%s' % instance), image=lc_image()) DCNL DCSP  DCSP  DCSP gce_args['ex_boot_disk'] = pd DCNL DCSP  DCSP  DCSP inst = None DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP inst = gce.ex_get_node(instance, lc_zone) DCNL DCSP  DCSP  DCSP except ResourceNotFoundError: DCNL DCSP  DCSP  DCSP  DCSP inst = gce.create_node(instance, lc_machine_type, lc_image(), **gce_args) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP except GoogleBaseError as e: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Unexpected DCSP error DCSP attempting DCSP to DCSP create DCSP ' + ('instance DCSP %s, DCSP error: DCSP %s' % (instance, e.value)))) DCNL DCSP  DCSP  DCSP if inst: DCNL DCSP  DCSP  DCSP  DCSP new_instances.append(inst) DCNL DCSP for inst in new_instances: DCNL DCSP  DCSP for (i, lc_disk) in enumerate(lc_disks): DCNL DCSP  DCSP  DCSP if (len(inst.extra['disks']) > i): DCNL DCSP  DCSP  DCSP  DCSP attached_disk = inst.extra['disks'][i] DCNL DCSP  DCSP  DCSP  DCSP if (attached_disk['source'] != lc_disk.extra['selfLink']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Disk DCSP at DCSP index DCSP %d DCSP does DCSP not DCSP match: DCSP requested=%s DCSP found=%s' % (i, lc_disk.extra['selfLink'], attached_disk['source']))) DCNL DCSP  DCSP  DCSP  DCSP elif (attached_disk['mode'] != disk_modes[i]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Disk DCSP at DCSP index DCSP %d DCSP is DCSP in DCSP the DCSP wrong DCSP mode: DCSP requested=%s DCSP found=%s' % (i, disk_modes[i], attached_disk['mode']))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP gce.attach_volume(inst, lc_disk, ex_mode=disk_modes[i]) DCNL DCSP  DCSP  DCSP if (len(inst.extra['disks']) != (i + 1)): DCNL DCSP  DCSP  DCSP  DCSP inst.extra['disks'].append({'source': lc_disk.extra['selfLink'], 'index': i}) DCNL DCSP instance_names = [] DCNL DCSP instance_json_data = [] DCNL DCSP for inst in new_instances: DCNL DCSP  DCSP d = get_instance_info(inst) DCNL DCSP  DCSP instance_names.append(d['name']) DCNL DCSP  DCSP instance_json_data.append(d) DCNL DCSP return (changed, instance_json_data, instance_names)
def change_instance_state(module, gce, instance_names, number, zone_name, state): DCNL  DCSP changed = False DCNL DCSP nodes = [] DCNL DCSP state_instance_names = [] DCNL DCSP if (isinstance(instance_names, str) and number): DCNL DCSP  DCSP node_names = [('%s-%03d' % (instance_names, i)) for i in range(number)] DCNL DCSP elif (isinstance(instance_names, str) and (not number)): DCNL DCSP  DCSP node_names = [instance_names] DCNL DCSP else: DCNL DCSP  DCSP node_names = instance_names DCNL DCSP for name in node_names: DCNL DCSP  DCSP inst = None DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP inst = gce.ex_get_node(name, zone_name) DCNL DCSP  DCSP except ResourceNotFoundError: DCNL DCSP  DCSP  DCSP state_instance_names.append(name) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=unexpected_error_msg(e), changed=False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP nodes.append(inst) DCNL DCSP  DCSP  DCSP state_instance_names.append(name) DCNL DCSP if ((state in ['absent', 'deleted']) and number): DCNL DCSP  DCSP changed_nodes = (gce.ex_destroy_multiple_nodes(nodes) or [False]) DCNL DCSP  DCSP changed = reduce((lambda x, y: (x or y)), changed_nodes) DCNL DCSP else: DCNL DCSP  DCSP for node in nodes: DCNL DCSP  DCSP  DCSP if (state in ['absent', 'deleted']): DCNL DCSP  DCSP  DCSP  DCSP gce.destroy_node(node) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP elif ((state == 'started') and (node.state == libcloud.compute.types.NodeState.STOPPED)): DCNL DCSP  DCSP  DCSP  DCSP gce.ex_start_node(node) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP elif ((state in ['stopped', 'terminated']) and (node.state == libcloud.compute.types.NodeState.RUNNING)): DCNL DCSP  DCSP  DCSP  DCSP gce.ex_stop_node(node) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP return (changed, state_instance_names)
def create_record(module, gcdns, zone, record): DCNL  DCSP overwrite = module.boolean(module.params['overwrite']) DCNL DCSP record_name = module.params['record'] DCNL DCSP record_type = module.params['type'] DCNL DCSP ttl = module.params['ttl'] DCNL DCSP record_data = module.params['record_data'] DCNL DCSP data = dict(ttl=ttl, rrdatas=record_data) DCNL DCSP if (record_name[(-1)] != '.'): DCNL DCSP  DCSP record_name = (record_name + '.') DCNL DCSP if (record is not None): DCNL DCSP  DCSP if _records_match(record.data['ttl'], record.data['rrdatas'], ttl, record_data): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if (not overwrite): DCNL DCSP  DCSP  DCSP module.fail_json(msg='cannot DCSP overwrite DCSP existing DCSP record, DCSP overwrite DCSP protection DCSP enabled', changed=False) DCNL DCSP if ((record is None) and (not module.check_mode)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP gcdns.create_record(record_name, zone, record_type, data) DCNL DCSP  DCSP except InvalidRequestError as error: DCNL DCSP  DCSP  DCSP if (error.code == 'invalid'): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('value DCSP is DCSP invalid DCSP for DCSP the DCSP given DCSP type: DCSP ' + ('%s, DCSP got DCSP value: DCSP %s' % (record_type, record_data))), changed=False) DCNL DCSP  DCSP  DCSP elif (error.code == 'cnameResourceRecordSetConflict'): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('non-CNAME DCSP resource DCSP record DCSP already DCSP exists: DCSP %s' % record_name), changed=False) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP elif ((record is not None) and (not module.check_mode)): DCNL DCSP  DCSP gcdns.delete_record(record) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP gcdns.create_record(record_name, zone, record_type, data) DCNL DCSP  DCSP except InvalidRequestError: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP gcdns.create_record(record.name, record.zone, record.type, record.data) DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='error DCSP updating DCSP record, DCSP the DCSP original DCSP record DCSP was DCSP restored', changed=False) DCNL DCSP  DCSP  DCSP except LibcloudError: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=(((('error DCSP updating DCSP record, DCSP and DCSP could DCSP not DCSP restore DCSP original DCSP record, DCSP ' + ('original DCSP name: DCSP %s DCSP ' % record.name)) + ('original DCSP zone: DCSP %s DCSP ' % record.zone)) + ('original DCSP type: DCSP %s DCSP ' % record.type)) + ('original DCSP data: DCSP %s' % record.data)), changed=True) DCNL DCSP return True
def remove_record(module, gcdns, record): DCNL  DCSP overwrite = module.boolean(module.params['overwrite']) DCNL DCSP ttl = module.params['ttl'] DCNL DCSP record_data = module.params['record_data'] DCNL DCSP if (record is None): DCNL DCSP  DCSP return False DCNL DCSP if (not overwrite): DCNL DCSP  DCSP if (not _records_match(record.data['ttl'], record.data['rrdatas'], ttl, record_data)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=(('cannot DCSP delete DCSP due DCSP to DCSP non-matching DCSP ttl DCSP or DCSP record_data: DCSP ' + ('ttl: DCSP %d, DCSP record_data: DCSP %s DCSP ' % (ttl, record_data))) + ('original DCSP ttl: DCSP %d, DCSP original DCSP record_data: DCSP %s' % (record.data['ttl'], record.data['rrdatas']))), changed=False) DCNL DCSP if (not module.check_mode): DCNL DCSP  DCSP gcdns.delete_record(record) DCNL DCSP return True
def _get_record(gcdns, zone, record_type, record_name): DCNL  DCSP record_id = ('%s:%s' % (record_type, record_name)) DCNL DCSP try: DCNL DCSP  DCSP return gcdns.get_record(zone.id, record_id) DCNL DCSP except RecordDoesNotExistError: DCNL DCSP  DCSP return None
def _get_zone(gcdns, zone_name, zone_id): DCNL  DCSP if (zone_id is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return gcdns.get_zone(zone_id) DCNL DCSP  DCSP except ZoneDoesNotExistError: DCNL DCSP  DCSP  DCSP return None DCNL DCSP available_zones = gcdns.iterate_zones() DCNL DCSP found_zone = None DCNL DCSP for zone in available_zones: DCNL DCSP  DCSP if (zone.domain == zone_name): DCNL DCSP  DCSP  DCSP found_zone = zone DCNL DCSP  DCSP  DCSP break DCNL DCSP return found_zone
def _records_match(old_ttl, old_record_data, new_ttl, new_record_data): DCNL  DCSP matches = True DCNL DCSP if (old_ttl != new_ttl): DCNL DCSP  DCSP matches = False DCNL DCSP if (old_record_data != new_record_data): DCNL DCSP  DCSP matches = False DCNL DCSP return matches
def _sanity_check(module): DCNL  DCSP overwrite = module.params['overwrite'] DCNL DCSP record_name = module.params['record'] DCNL DCSP record_type = module.params['type'] DCNL DCSP state = module.params['state'] DCNL DCSP ttl = module.params['ttl'] DCNL DCSP record_data = module.params['record_data'] DCNL DCSP if (not HAS_LIBCLOUD): DCNL DCSP  DCSP module.fail_json(msg=('This DCSP module DCSP requires DCSP Apache DCSP libcloud DCSP %s DCSP or DCSP greater' % MINIMUM_LIBCLOUD_VERSION), changed=False) DCNL DCSP elif (LooseVersion(LIBCLOUD_VERSION) < MINIMUM_LIBCLOUD_VERSION): DCNL DCSP  DCSP module.fail_json(msg=('This DCSP module DCSP requires DCSP Apache DCSP libcloud DCSP %s DCSP or DCSP greater' % MINIMUM_LIBCLOUD_VERSION), changed=False) DCNL DCSP if (ttl < 0): DCNL DCSP  DCSP module.fail_json(msg=('TTL DCSP cannot DCSP be DCSP less DCSP than DCSP zero, DCSP got: DCSP %d' % ttl), changed=False) DCNL DCSP if ((record_type == 'SOA') and (state == 'absent')): DCNL DCSP  DCSP module.fail_json(msg='cannot DCSP delete DCSP SOA DCSP records', changed=False) DCNL DCSP if ((record_type == 'SOA') and (state == 'present') and overwrite): DCNL DCSP  DCSP module.fail_json(msg='cannot DCSP update DCSP SOA DCSP records', changed=False) DCNL DCSP if ((record_data is not None) and ((state == 'present') or (not overwrite))): DCNL DCSP  DCSP if (record_type == 'A'): DCNL DCSP  DCSP  DCSP for value in record_data: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP socket.inet_aton(value) DCNL DCSP  DCSP  DCSP  DCSP except socket.error: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('invalid DCSP A DCSP record DCSP value, DCSP got: DCSP %s' % value), changed=False) DCNL DCSP  DCSP if (record_type == 'AAAA'): DCNL DCSP  DCSP  DCSP for value in record_data: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP socket.inet_pton(socket.AF_INET6, value) DCNL DCSP  DCSP  DCSP  DCSP except socket.error: DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('invalid DCSP AAAA DCSP record DCSP value, DCSP got: DCSP %s' % value), changed=False) DCNL DCSP  DCSP if ((record_type in ['CNAME', 'SOA']) and (len(record_data) > 1)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('CNAME DCSP or DCSP SOA DCSP records DCSP cannot DCSP have DCSP more DCSP than DCSP one DCSP value, DCSP ' + ('got: DCSP %s' % record_data)), changed=False) DCNL DCSP  DCSP if ((record_type == 'NS') and (record_name[0] == '*')): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('wildcard DCSP NS DCSP records DCSP not DCSP allowed, DCSP got: DCSP %s' % record_name), changed=False) DCNL DCSP  DCSP if (record_type == 'TXT'): DCNL DCSP  DCSP  DCSP for value in record_data: DCNL DCSP  DCSP  DCSP  DCSP if ((value[0] != '"') and (value[(-1)] != '"')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('TXT DCSP record_data DCSP must DCSP be DCSP enclosed DCSP in DCSP double DCSP quotes, DCSP ' + ('got: DCSP %s' % value)), changed=False)
def _additional_sanity_checks(module, zone): DCNL  DCSP overwrite = module.params['overwrite'] DCNL DCSP record_name = module.params['record'] DCNL DCSP record_type = module.params['type'] DCNL DCSP state = module.params['state'] DCNL DCSP if ((record_type == 'CNAME') and (record_name == zone.domain)): DCNL DCSP  DCSP module.fail_json(msg='CNAME DCSP records DCSP cannot DCSP match DCSP the DCSP zone DCSP name', changed=False) DCNL DCSP if ((record_type == 'NS') and (record_name == zone.domain) and (state == 'absent')): DCNL DCSP  DCSP module.fail_json(msg='cannot DCSP delete DCSP root DCSP NS DCSP records', changed=False) DCNL DCSP if ((record_type == 'NS') and (record_name == zone.domain) and overwrite): DCNL DCSP  DCSP module.fail_json(msg='cannot DCSP update DCSP existing DCSP root DCSP NS DCSP records', changed=False) DCNL DCSP if ((record_type == 'SOA') and (record_name != zone.domain)): DCNL DCSP  DCSP module.fail_json(msg=('non-root DCSP SOA DCSP records DCSP are DCSP not DCSP permitted, DCSP got: DCSP %s' % record_name), changed=False)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(state=dict(default='present', choices=['present', 'absent'], type='str'), record=dict(required=True, aliases=['name'], type='str'), zone=dict(type='str'), zone_id=dict(type='str'), type=dict(required=True, choices=SUPPORTED_RECORD_TYPES, type='str'), record_data=dict(aliases=['value'], type='list'), ttl=dict(default=300, type='int'), overwrite=dict(default=False, type='bool'), service_account_email=dict(type='str'), pem_file=dict(type='path'), credentials_file=dict(type='path'), project_id=dict(type='str')), required_if=[('state', 'present', ['record_data']), ('overwrite', False, ['record_data'])], required_one_of=[['zone', 'zone_id']], supports_check_mode=True) DCNL DCSP _sanity_check(module) DCNL DCSP record_name = module.params['record'] DCNL DCSP record_type = module.params['type'] DCNL DCSP state = module.params['state'] DCNL DCSP ttl = module.params['ttl'] DCNL DCSP zone_name = module.params['zone'] DCNL DCSP zone_id = module.params['zone_id'] DCNL DCSP json_output = dict(state=state, record=record_name, zone=zone_name, zone_id=zone_id, type=record_type, record_data=module.params['record_data'], ttl=ttl, overwrite=module.boolean(module.params['overwrite'])) DCNL DCSP if ((zone_name is not None) and (zone_name[(-1)] != '.')): DCNL DCSP  DCSP zone_name = (zone_name + '.') DCNL DCSP if (record_name[(-1)] != '.'): DCNL DCSP  DCSP record_name = (record_name + '.') DCNL DCSP gcdns = gcdns_connect(module, provider=PROVIDER) DCNL DCSP zone = _get_zone(gcdns, zone_name, zone_id) DCNL DCSP if ((zone is None) and (zone_name is not None)): DCNL DCSP  DCSP module.fail_json(msg=('zone DCSP name DCSP was DCSP not DCSP found: DCSP %s' % zone_name), changed=False) DCNL DCSP elif ((zone is None) and (zone_id is not None)): DCNL DCSP  DCSP module.fail_json(msg=('zone DCSP id DCSP was DCSP not DCSP found: DCSP %s' % zone_id), changed=False) DCNL DCSP json_output['zone'] = zone.domain DCNL DCSP json_output['zone_id'] = zone.id DCNL DCSP try: DCNL DCSP  DCSP record = _get_record(gcdns, zone, record_type, record_name) DCNL DCSP except InvalidRequestError: DCNL DCSP  DCSP module.fail_json(msg=('record DCSP name DCSP is DCSP invalid: DCSP %s' % record_name), changed=False) DCNL DCSP _additional_sanity_checks(module, zone) DCNL DCSP diff = dict() DCNL DCSP if (record is None): DCNL DCSP  DCSP diff['before'] = '' DCNL DCSP  DCSP diff['before_header'] = '<absent>' DCNL DCSP else: DCNL DCSP  DCSP diff['before'] = dict(record=record.data['name'], type=record.data['type'], record_data=record.data['rrdatas'], ttl=record.data['ttl']) DCNL DCSP  DCSP diff['before_header'] = ('%s:%s' % (record_type, record_name)) DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP diff['after'] = dict(record=record_name, type=record_type, record_data=module.params['record_data'], ttl=ttl) DCNL DCSP  DCSP diff['after_header'] = ('%s:%s' % (record_type, record_name)) DCNL DCSP  DCSP changed = create_record(module, gcdns, zone, record) DCNL DCSP elif (state == 'absent'): DCNL DCSP  DCSP diff['after'] = '' DCNL DCSP  DCSP diff['after_header'] = '<absent>' DCNL DCSP  DCSP changed = remove_record(module, gcdns, record) DCNL DCSP module.exit_json(changed=changed, diff=diff, **json_output)
def create_image(gce, name, module): DCNL  DCSP source = module.params.get('source') DCNL DCSP zone = module.params.get('zone') DCNL DCSP desc = module.params.get('description') DCNL DCSP timeout = module.params.get('timeout') DCNL DCSP family = module.params.get('family') DCNL DCSP if (not source): DCNL DCSP  DCSP module.fail_json(msg='Must DCSP supply DCSP a DCSP source', changed=False) DCNL DCSP if source.startswith(GCS_URI): DCNL DCSP  DCSP volume = source DCNL DCSP elif source.startswith('gs://'): DCNL DCSP  DCSP volume = source.replace('gs://', GCS_URI) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP volume = gce.ex_get_volume(source, zone) DCNL DCSP  DCSP except ResourceNotFoundError: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Disk DCSP %s DCSP not DCSP found DCSP in DCSP zone DCSP %s' % (source, zone)), changed=False) DCNL DCSP  DCSP except GoogleBaseError as e: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e), changed=False) DCNL DCSP gce_extra_args = {} DCNL DCSP if (family is not None): DCNL DCSP  DCSP gce_extra_args['family'] = family DCNL DCSP old_timeout = gce.connection.timeout DCNL DCSP try: DCNL DCSP  DCSP gce.connection.timeout = timeout DCNL DCSP  DCSP gce.ex_create_image(name, volume, desc, use_existing=False, **gce_extra_args) DCNL DCSP  DCSP return True DCNL DCSP except ResourceExistsError: DCNL DCSP  DCSP return False DCNL DCSP except GoogleBaseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e), changed=False) DCNL DCSP finally: DCNL DCSP  DCSP gce.connection.timeout = old_timeout
def delete_image(gce, name, module): DCNL  DCSP try: DCNL DCSP  DCSP gce.ex_delete_image(name) DCNL DCSP  DCSP return True DCNL DCSP except ResourceNotFoundError: DCNL DCSP  DCSP return False DCNL DCSP except GoogleBaseError as e: DCNL DCSP  DCSP module.fail_json(msg=str(e), changed=False)
def randompass(): DCNL  DCSP import random DCNL DCSP import string DCNL DCSP random.seed() DCNL DCSP lower = ''.join((random.choice(string.ascii_lowercase) for x in range(6))) DCNL DCSP upper = ''.join((random.choice(string.ascii_uppercase) for x in range(6))) DCNL DCSP number = ''.join((random.choice(string.digits) for x in range(6))) DCNL DCSP punct = ''.join((random.choice(string.punctuation) for x in range(6))) DCNL DCSP p = (((lower + upper) + number) + punct) DCNL DCSP return ''.join(random.sample(p, len(p)))
def getInstanceDetails(api, server): DCNL  DCSP instance = {'id': server['LINODEID'], 'name': server['LABEL'], 'public': [], 'private': []} DCNL DCSP for ip in api.linode_ip_list(LinodeId=server['LINODEID']): DCNL DCSP  DCSP if (ip['ISPUBLIC'] and ('ipv4' not in instance)): DCNL DCSP  DCSP  DCSP instance['ipv4'] = ip['IPADDRESS'] DCNL DCSP  DCSP  DCSP instance['fqdn'] = ip['RDNS_NAME'] DCNL DCSP  DCSP if ip['ISPUBLIC']: DCNL DCSP  DCSP  DCSP instance['public'].append({'ipv4': ip['IPADDRESS'], 'fqdn': ip['RDNS_NAME'], 'ip_id': ip['IPADDRESSID']}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP instance['private'].append({'ipv4': ip['IPADDRESS'], 'fqdn': ip['RDNS_NAME'], 'ip_id': ip['IPADDRESSID']}) DCNL DCSP return instance
def get_pid_location(module): DCNL  DCSP for dir in ['/var/run', '/var/lib/run', '/run', os.path.expanduser('~/')]: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (os.path.isdir(dir) and os.access(dir, (os.R_OK | os.W_OK))): DCNL DCSP  DCSP  DCSP  DCSP return os.path.join(dir, '.accelerate.pid') DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP pass DCNL DCSP module.fail_json(msg="couldn't DCSP find DCSP any DCSP valid DCSP directory DCSP to DCSP use DCSP for DCSP the DCSP accelerate DCSP pid DCSP file")
def _convert_host_to_ip(host): DCNL  DCSP addrinfo = socket.getaddrinfo(host, 80, 0, 0, socket.SOL_TCP) DCNL DCSP ips = [] DCNL DCSP for (family, socktype, proto, canonname, sockaddr) in addrinfo: DCNL DCSP  DCSP ip = sockaddr[0] DCNL DCSP  DCSP ips.append((family, ip)) DCNL DCSP  DCSP if (family == socket.AF_INET): DCNL DCSP  DCSP  DCSP ips.append((socket.AF_INET6, ('::ffff:' + ip))) DCNL DCSP return ips
def _convert_host_to_hex(host): DCNL  DCSP ips = [] DCNL DCSP if (host is not None): DCNL DCSP  DCSP for (family, ip) in _convert_host_to_ip(host): DCNL DCSP  DCSP  DCSP hexip_nf = binascii.b2a_hex(socket.inet_pton(family, ip)) DCNL DCSP  DCSP  DCSP hexip_hf = '' DCNL DCSP  DCSP  DCSP for i in range(0, len(hexip_nf), 8): DCNL DCSP  DCSP  DCSP  DCSP ipgroup_nf = hexip_nf[i:(i + 8)] DCNL DCSP  DCSP  DCSP  DCSP ipgroup_hf = socket.ntohl(int(ipgroup_nf, base=16)) DCNL DCSP  DCSP  DCSP  DCSP hexip_hf = ('%s%08X' % (hexip_hf, ipgroup_hf)) DCNL DCSP  DCSP  DCSP ips.append((family, hexip_hf)) DCNL DCSP return ips
def _create_connection(host, port, connect_timeout): DCNL  DCSP if (sys.version_info < (2, 6)): DCNL DCSP  DCSP (family, _) = _convert_host_to_ip(host)[0] DCNL DCSP  DCSP connect_socket = socket.socket(family, socket.SOCK_STREAM) DCNL DCSP  DCSP connect_socket.settimeout(connect_timeout) DCNL DCSP  DCSP connect_socket.connect((host, port)) DCNL DCSP else: DCNL DCSP  DCSP connect_socket = socket.create_connection((host, port), connect_timeout) DCNL DCSP return connect_socket
def _filter_non_json_lines(data): DCNL  DCSP warnings = [] DCNL DCSP lines = data.splitlines() DCNL DCSP for (start, line) in enumerate(lines): DCNL DCSP  DCSP line = line.strip() DCNL DCSP  DCSP if line.startswith(u'{'): DCNL DCSP  DCSP  DCSP endchar = u'}' DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif line.startswith(u'['): DCNL DCSP  DCSP  DCSP endchar = u']' DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('No DCSP start DCSP of DCSP json DCSP char DCSP found') DCNL DCSP lines = lines[start:] DCNL DCSP for (reverse_end_offset, line) in enumerate(reversed(lines)): DCNL DCSP  DCSP if line.strip().endswith(endchar): DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError('No DCSP end DCSP of DCSP json DCSP char DCSP found') DCNL DCSP if (reverse_end_offset > 0): DCNL DCSP  DCSP trailing_junk = lines[(len(lines) - reverse_end_offset):] DCNL DCSP  DCSP warnings.append(('Module DCSP invocation DCSP had DCSP junk DCSP after DCSP the DCSP JSON DCSP data: DCSP %s' % '\n'.join(trailing_junk))) DCNL DCSP lines = lines[:(len(lines) - reverse_end_offset)] DCNL DCSP return ('\n'.join(lines), warnings)
def query_log_status(module, le_path, path, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP followed DCSP %s' % (le_path, path))) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return False
def follow_log(module, le_path, logs, name=None, logtype=None): DCNL  DCSP followed_count = 0 DCNL DCSP for log in logs: DCNL DCSP  DCSP if query_log_status(module, le_path, log): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP module.exit_json(changed=True) DCNL DCSP  DCSP cmd = [le_path, 'follow', log] DCNL DCSP  DCSP if name: DCNL DCSP  DCSP  DCSP cmd.extend(['--name', name]) DCNL DCSP  DCSP if logtype: DCNL DCSP  DCSP  DCSP cmd.extend(['--type', logtype]) DCNL DCSP  DCSP (rc, out, err) = module.run_command(' DCSP '.join(cmd)) DCNL DCSP  DCSP if (not query_log_status(module, le_path, log)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=("failed DCSP to DCSP follow DCSP '%s': DCSP %s" % (log, err.strip()))) DCNL DCSP  DCSP followed_count += 1 DCNL DCSP if (followed_count > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('followed DCSP %d DCSP log(s)' % (followed_count,))) DCNL DCSP module.exit_json(changed=False, msg='logs(s) DCSP already DCSP followed')
def unfollow_log(module, le_path, logs): DCNL  DCSP removed_count = 0 DCNL DCSP for log in logs: DCNL DCSP  DCSP if (not query_log_status(module, le_path, log)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP module.exit_json(changed=True) DCNL DCSP  DCSP (rc, out, err) = module.run_command([le_path, 'rm', log]) DCNL DCSP  DCSP if query_log_status(module, le_path, log): DCNL DCSP  DCSP  DCSP module.fail_json(msg=("failed DCSP to DCSP remove DCSP '%s': DCSP %s" % (log, err.strip()))) DCNL DCSP  DCSP removed_count += 1 DCNL DCSP if (removed_count > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('removed DCSP %d DCSP package(s)' % removed_count)) DCNL DCSP module.exit_json(changed=False, msg='logs(s) DCSP already DCSP unfollowed')
def send_deploy_event(module, key, revision_id, deployed_by='Ansible', deployed_to=None, repository=None): DCNL  DCSP deploy_api = 'https://event-gateway.stackdriver.com/v1/deployevent' DCNL DCSP params = {} DCNL DCSP params['revision_id'] = revision_id DCNL DCSP params['deployed_by'] = deployed_by DCNL DCSP if deployed_to: DCNL DCSP  DCSP params['deployed_to'] = deployed_to DCNL DCSP if repository: DCNL DCSP  DCSP params['repository'] = repository DCNL DCSP return do_send_request(module, deploy_api, params, key)
def send_annotation_event(module, key, msg, annotated_by='Ansible', level=None, instance_id=None, event_epoch=None): DCNL  DCSP annotation_api = 'https://event-gateway.stackdriver.com/v1/annotationevent' DCNL DCSP params = {} DCNL DCSP params['message'] = msg DCNL DCSP if annotated_by: DCNL DCSP  DCSP params['annotated_by'] = annotated_by DCNL DCSP if level: DCNL DCSP  DCSP params['level'] = level DCNL DCSP if instance_id: DCNL DCSP  DCSP params['instance_id'] = instance_id DCNL DCSP if event_epoch: DCNL DCSP  DCSP params['event_epoch'] = event_epoch DCNL DCSP return do_send_request(module, annotation_api, params, key)
def selector(module): DCNL  DCSP if (module.params['target'] == 'collector'): DCNL DCSP  DCSP target = Collector(module.params, module) DCNL DCSP elif (module.params['target'] == 'host'): DCNL DCSP  DCSP if (((module.params['action'] == 'add') or (module.params['displayname'] is None)) and (module.params['collector'] is None)): DCNL DCSP  DCSP  DCSP module.fail_json(msg="Parameter DCSP 'collector' DCSP required.") DCNL DCSP  DCSP target = Host(module.params, module) DCNL DCSP elif (module.params['target'] == 'datasource'): DCNL DCSP  DCSP if (module.params['id'] is not None): DCNL DCSP  DCSP  DCSP if (module.params['action'] == 'sdt'): DCNL DCSP  DCSP  DCSP  DCSP target = Datasource(module.params, module) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP errmsg = (('Error: DCSP Unexpected DCSP action DCSP "' + module.params['action']) + '" DCSP was DCSP specified.') DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=errmsg) DCNL DCSP elif (module.params['target'] == 'hostgroup'): DCNL DCSP  DCSP if (module.params['fullpath'] is not None): DCNL DCSP  DCSP  DCSP target = Hostgroup(module.params, module) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg="Parameter DCSP 'fullpath' DCSP required DCSP for DCSP target DCSP 'hostgroup'") DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=(('Error: DCSP Unexpected DCSP target DCSP "' + module.params['target']) + '" DCSP was DCSP specified.')) DCNL DCSP if (module.params['action'].lower() == 'add'): DCNL DCSP  DCSP action = target.create DCNL DCSP elif (module.params['action'].lower() == 'remove'): DCNL DCSP  DCSP action = target.remove DCNL DCSP elif (module.params['action'].lower() == 'sdt'): DCNL DCSP  DCSP action = target.sdt DCNL DCSP elif (module.params['action'].lower() == 'update'): DCNL DCSP  DCSP action = target.update DCNL DCSP else: DCNL DCSP  DCSP errmsg = (('Error: DCSP Unexpected DCSP action DCSP "' + module.params['action']) + '" DCSP was DCSP specified.') DCNL DCSP  DCSP module.fail_json(msg=errmsg) DCNL DCSP action() DCNL DCSP module.exit_json(changed=target.change)
def post_annotation(annotation, api_key): DCNL  DCSP base_url = 'https://api.circonus.com/v2' DCNL DCSP anootate_post_endpoint = '/annotation' DCNL DCSP resp = requests.post((base_url + anootate_post_endpoint), headers=build_headers(api_key), data=json.dumps(annotation)) DCNL DCSP resp.raise_for_status() DCNL DCSP return resp
def create_annotation(module): DCNL  DCSP annotation = {} DCNL DCSP if (module.params['duration'] != None): DCNL DCSP  DCSP duration = module.params['duration'] DCNL DCSP else: DCNL DCSP  DCSP duration = 0 DCNL DCSP if (module.params['start'] != None): DCNL DCSP  DCSP start = module.params['start'] DCNL DCSP else: DCNL DCSP  DCSP start = int(time.time()) DCNL DCSP if (module.params['stop'] != None): DCNL DCSP  DCSP stop = module.params['stop'] DCNL DCSP else: DCNL DCSP  DCSP stop = (int(time.time()) + duration) DCNL DCSP annotation['start'] = int(start) DCNL DCSP annotation['stop'] = int(stop) DCNL DCSP annotation['category'] = module.params['category'] DCNL DCSP annotation['description'] = module.params['description'] DCNL DCSP annotation['title'] = module.params['title'] DCNL DCSP return annotation
def build_headers(api_token): DCNL  DCSP headers = {'X-Circonus-App-Name': 'ansible', 'Host': 'api.circonus.com', 'X-Circonus-Auth-Token': api_token, 'Accept': 'application/json'} DCNL DCSP return headers
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(start=dict(required=False, type='int'), stop=dict(required=False, type='int'), category=dict(required=True), title=dict(required=True), description=dict(required=True), duration=dict(required=False, type='int'), api_key=dict(required=True, no_log=True))) DCNL DCSP annotation = create_annotation(module) DCNL DCSP try: DCNL DCSP  DCSP resp = post_annotation(annotation, module.params['api_key']) DCNL DCSP except requests.exceptions.RequestException: DCNL DCSP  DCSP err_str = get_exception() DCNL DCSP  DCSP module.fail_json(msg='Request DCSP Failed', reason=err_str) DCNL DCSP module.exit_json(changed=True, annotation=resp.json())
def selector(module): DCNL  DCSP if (module.params['target'] == 'host'): DCNL DCSP  DCSP target = Host(module.params, module) DCNL DCSP  DCSP target.site_facts() DCNL DCSP elif (module.params['target'] == 'hostgroup'): DCNL DCSP  DCSP if (module.params['fullpath'] is not None): DCNL DCSP  DCSP  DCSP target = Hostgroup(module.params, module) DCNL DCSP  DCSP  DCSP target.site_facts() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg="Parameter DCSP 'fullpath' DCSP required DCSP for DCSP target DCSP 'hostgroup'") DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=(('Error: DCSP Unexpected DCSP target DCSP "' + module.params['target']) + '" DCSP was DCSP specified.'))
def get_state(b_path): DCNL  DCSP if os.path.lexists(b_path): DCNL DCSP  DCSP if os.path.islink(b_path): DCNL DCSP  DCSP  DCSP return 'link' DCNL DCSP  DCSP elif os.path.isdir(b_path): DCNL DCSP  DCSP  DCSP return 'directory' DCNL DCSP  DCSP elif (os.stat(b_path).st_nlink > 1): DCNL DCSP  DCSP  DCSP return 'hard' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return 'file' DCNL DCSP return 'absent'
def assemble_from_fragments(src_path, delimiter=None, compiled_regexp=None, ignore_hidden=False): DCNL  DCSP (tmpfd, temp_path) = tempfile.mkstemp() DCNL DCSP tmp = os.fdopen(tmpfd, 'wb') DCNL DCSP delimit_me = False DCNL DCSP add_newline = False DCNL DCSP for f in sorted(os.listdir(src_path)): DCNL DCSP  DCSP if (compiled_regexp and (not compiled_regexp.search(f))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP fragment = (u'%s/%s' % (src_path, f)) DCNL DCSP  DCSP if ((not os.path.isfile(fragment)) or (ignore_hidden and os.path.basename(fragment).startswith('.'))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP fragment_content = open(fragment, 'rb').read() DCNL DCSP  DCSP if add_newline: DCNL DCSP  DCSP  DCSP tmp.write(b('\n')) DCNL DCSP  DCSP if delimit_me: DCNL DCSP  DCSP  DCSP if delimiter: DCNL DCSP  DCSP  DCSP  DCSP delimiter = codecs.escape_decode(delimiter)[0] DCNL DCSP  DCSP  DCSP  DCSP tmp.write(delimiter) DCNL DCSP  DCSP  DCSP  DCSP if (delimiter[(-1)] != b('\n')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP tmp.write(b('\n')) DCNL DCSP  DCSP tmp.write(fragment_content) DCNL DCSP  DCSP delimit_me = True DCNL DCSP  DCSP if fragment_content.endswith(b('\n')): DCNL DCSP  DCSP  DCSP add_newline = False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP add_newline = True DCNL DCSP tmp.close() DCNL DCSP return temp_path
def split_pre_existing_dir(dirname): DCNL  DCSP (head, tail) = os.path.split(dirname) DCNL DCSP b_head = to_bytes(head, errors='surrogate_or_strict') DCNL DCSP if (not os.path.exists(b_head)): DCNL DCSP  DCSP (pre_existing_dir, new_directory_list) = split_pre_existing_dir(head) DCNL DCSP else: DCNL DCSP  DCSP return (head, [tail]) DCNL DCSP new_directory_list.append(tail) DCNL DCSP return (pre_existing_dir, new_directory_list)
def adjust_recursive_directory_permissions(pre_existing_dir, new_directory_list, module, directory_args, changed): DCNL  DCSP if (len(new_directory_list) > 0): DCNL DCSP  DCSP working_dir = os.path.join(pre_existing_dir, new_directory_list.pop(0)) DCNL DCSP  DCSP directory_args['path'] = working_dir DCNL DCSP  DCSP changed = module.set_fs_attributes_if_different(directory_args, changed) DCNL DCSP  DCSP changed = adjust_recursive_directory_permissions(working_dir, new_directory_list, module, directory_args, changed) DCNL DCSP return changed
def crc32(path): DCNL  DCSP return (binascii.crc32(open(path).read()) & 4294967295)
def shell_escape(string): DCNL  DCSP return re.sub('([^A-Za-z0-9_])', '\\\\\\1', string)
def split_entry(entry): DCNL  DCSP a = entry.split(':') DCNL DCSP d = None DCNL DCSP if entry.lower().startswith('d'): DCNL DCSP  DCSP d = True DCNL DCSP  DCSP a.pop(0) DCNL DCSP if (len(a) == 2): DCNL DCSP  DCSP a.append(None) DCNL DCSP (t, e, p) = a DCNL DCSP t = t.lower() DCNL DCSP if t.startswith('u'): DCNL DCSP  DCSP t = 'user' DCNL DCSP elif t.startswith('g'): DCNL DCSP  DCSP t = 'group' DCNL DCSP elif t.startswith('m'): DCNL DCSP  DCSP t = 'mask' DCNL DCSP elif t.startswith('o'): DCNL DCSP  DCSP t = 'other' DCNL DCSP else: DCNL DCSP  DCSP t = None DCNL DCSP return [d, t, e, p]
def build_entry(etype, entity, permissions=None, use_nfsv4_acls=False): DCNL  DCSP if use_nfsv4_acls: DCNL DCSP  DCSP return ':'.join([etype, entity, permissions, 'allow']) DCNL DCSP if permissions: DCNL DCSP  DCSP return ((((etype + ':') + entity) + ':') + permissions) DCNL DCSP else: DCNL DCSP  DCSP return ((etype + ':') + entity)
def build_command(module, mode, path, follow, default, recursive, entry=''): DCNL  DCSP if (mode == 'set'): DCNL DCSP  DCSP cmd = [module.get_bin_path('setfacl', True)] DCNL DCSP  DCSP cmd.append(('-m DCSP "%s"' % entry)) DCNL DCSP elif (mode == 'rm'): DCNL DCSP  DCSP cmd = [module.get_bin_path('setfacl', True)] DCNL DCSP  DCSP cmd.append(('-x DCSP "%s"' % entry)) DCNL DCSP else: DCNL DCSP  DCSP cmd = [module.get_bin_path('getfacl', True)] DCNL DCSP  DCSP if (get_platform().lower() == 'linux'): DCNL DCSP  DCSP  DCSP cmd.append('--omit-header') DCNL DCSP  DCSP  DCSP cmd.append('--absolute-names') DCNL DCSP if recursive: DCNL DCSP  DCSP cmd.append('--recursive') DCNL DCSP if (not follow): DCNL DCSP  DCSP if (get_platform().lower() == 'linux'): DCNL DCSP  DCSP  DCSP cmd.append('--physical') DCNL DCSP  DCSP elif (get_platform().lower() == 'freebsd'): DCNL DCSP  DCSP  DCSP cmd.append('-h') DCNL DCSP if default: DCNL DCSP  DCSP if (mode == 'rm'): DCNL DCSP  DCSP  DCSP cmd.insert(1, '-k') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cmd.insert(1, '-d') DCNL DCSP cmd.append(path) DCNL DCSP return cmd
def acl_changed(module, cmd): DCNL  DCSP if (get_platform().lower() == 'freebsd'): DCNL DCSP  DCSP return True DCNL DCSP cmd = cmd[:] DCNL DCSP cmd.insert(1, '--test') DCNL DCSP lines = run_acl(module, cmd) DCNL DCSP for line in lines: DCNL DCSP  DCSP if (not line.endswith('*,*')): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def pfilter(f, patterns=None, use_regex=False): DCNL  DCSP if (patterns is None): DCNL DCSP  DCSP return True DCNL DCSP if use_regex: DCNL DCSP  DCSP for p in patterns: DCNL DCSP  DCSP  DCSP r = re.compile(p) DCNL DCSP  DCSP  DCSP if r.match(f): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP for p in patterns: DCNL DCSP  DCSP  DCSP if fnmatch.fnmatch(f, p): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def agefilter(st, now, age, timestamp): DCNL  DCSP if ((age is None) or ((age >= 0) and ((now - st.__getattribute__(('st_%s' % timestamp))) >= abs(age))) or ((age < 0) and ((now - st.__getattribute__(('st_%s' % timestamp))) <= abs(age)))): DCNL DCSP  DCSP return True DCNL DCSP return False
def sizefilter(st, size): DCNL  DCSP if ((size is None) or ((size >= 0) and (st.st_size >= abs(size))) or ((size < 0) and (st.st_size <= abs(size)))): DCNL DCSP  DCSP return True DCNL DCSP return False
def contentfilter(fsname, pattern): DCNL  DCSP if (pattern is None): DCNL DCSP  DCSP return True DCNL DCSP try: DCNL DCSP  DCSP f = open(fsname) DCNL DCSP  DCSP prog = re.compile(pattern) DCNL DCSP  DCSP for line in f: DCNL DCSP  DCSP  DCSP if prog.match(line): DCNL DCSP  DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP f.close() DCNL DCSP except: DCNL DCSP  DCSP pass DCNL DCSP return False
def get_user_diff(ipa_user, module_user): DCNL  DCSP result = [] DCNL DCSP sshpubkey = None DCNL DCSP if ('ipasshpubkey' in module_user): DCNL DCSP  DCSP module_user['sshpubkeyfp'] = [get_ssh_key_fingerprint(pubkey) for pubkey in module_user['ipasshpubkey']] DCNL DCSP  DCSP sshpubkey = module_user['ipasshpubkey'] DCNL DCSP  DCSP del module_user['ipasshpubkey'] DCNL DCSP for key in module_user.keys(): DCNL DCSP  DCSP mod_value = module_user.get(key, None) DCNL DCSP  DCSP ipa_value = ipa_user.get(key, None) DCNL DCSP  DCSP if (isinstance(ipa_value, list) and (not isinstance(mod_value, list))): DCNL DCSP  DCSP  DCSP mod_value = [mod_value] DCNL DCSP  DCSP if (isinstance(ipa_value, list) and isinstance(mod_value, list)): DCNL DCSP  DCSP  DCSP mod_value = sorted(mod_value) DCNL DCSP  DCSP  DCSP ipa_value = sorted(ipa_value) DCNL DCSP  DCSP if (mod_value != ipa_value): DCNL DCSP  DCSP  DCSP result.append(key) DCNL DCSP if (sshpubkey is not None): DCNL DCSP  DCSP del module_user['sshpubkeyfp'] DCNL DCSP  DCSP module_user['ipasshpubkey'] = sshpubkey DCNL DCSP return result
def get_ssh_key_fingerprint(ssh_key): DCNL  DCSP parts = ssh_key.strip().split() DCNL DCSP if (len(parts) == 0): DCNL DCSP  DCSP return None DCNL DCSP key_type = parts[0] DCNL DCSP key = base64.b64decode(parts[1].encode('ascii')) DCNL DCSP fp_plain = hashlib.md5(key).hexdigest() DCNL DCSP key_fp = ':'.join(((a + b) for (a, b) in zip(fp_plain[::2], fp_plain[1::2]))).upper() DCNL DCSP if (len(parts) < 3): DCNL DCSP  DCSP return ('%s DCSP (%s)' % (key_fp, key_type)) DCNL DCSP else: DCNL DCSP  DCSP user_host = parts[2] DCNL DCSP  DCSP return ('%s DCSP %s DCSP (%s)' % (key_fp, user_host, key_type))
def _load_dist_subclass(cls, *args, **kwargs): DCNL  DCSP subclass = None DCNL DCSP distro = kwargs['module'].params['distro'] DCNL DCSP if (distro is not None): DCNL DCSP  DCSP for sc in cls.__subclasses__(): DCNL DCSP  DCSP  DCSP if ((sc.distro is not None) and (sc.distro == distro)): DCNL DCSP  DCSP  DCSP  DCSP subclass = sc DCNL DCSP if (subclass is None): DCNL DCSP  DCSP subclass = cls DCNL DCSP return super(cls, subclass).__new__(subclass)
def action_handler(action_func, action_func_args): DCNL  DCSP msgs = [] DCNL DCSP try: DCNL DCSP  DCSP return action_func(*action_func_args) DCNL DCSP except Exception: DCNL DCSP  DCSP e = sys.exc_info()[1] DCNL DCSP  DCSP if ('INVALID_SERVICE' in ('%s' % e)): DCNL DCSP  DCSP  DCSP msgs.append('Services DCSP are DCSP defined DCSP by DCSP port/tcp DCSP relationship DCSP and DCSP named DCSP as DCSP they DCSP are DCSP in DCSP /etc/services DCSP (on DCSP most DCSP systems)') DCNL DCSP  DCSP if (len(msgs) > 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('ERROR: DCSP Exception DCSP caught: DCSP %s DCSP %s' % (e, ', DCSP '.join(msgs)))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('ERROR: DCSP Exception DCSP caught: DCSP %s' % e))
def _escape_fstab(v): DCNL  DCSP if isinstance(v, int): DCNL DCSP  DCSP return v DCNL DCSP else: DCNL DCSP  DCSP return v.replace('\\', '\\134').replace(' DCSP ', '\\040').replace('&', '\\046')
def set_mount(module, args): DCNL  DCSP to_write = [] DCNL DCSP exists = False DCNL DCSP changed = False DCNL DCSP escaped_args = dict([(k, _escape_fstab(v)) for (k, v) in iteritems(args)]) DCNL DCSP new_line = '%(src)s DCSP %(name)s DCSP %(fstype)s DCSP %(opts)s DCSP %(dump)s DCSP %(passno)s\n' DCNL DCSP if (get_platform() == 'SunOS'): DCNL DCSP  DCSP new_line = '%(src)s DCSP - DCSP %(name)s DCSP %(fstype)s DCSP %(passno)s DCSP %(boot)s DCSP %(opts)s\n' DCNL DCSP for line in open(args['fstab'], 'r').readlines(): DCNL DCSP  DCSP if (not line.strip()): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if line.strip().startswith('#'): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (((get_platform() == 'SunOS') and (len(line.split()) != 7)) or ((get_platform() != 'SunOS') and (len(line.split()) != 6))): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP ld = {} DCNL DCSP  DCSP if (get_platform() == 'SunOS'): DCNL DCSP  DCSP  DCSP (ld['src'], dash, ld['name'], ld['fstype'], ld['passno'], ld['boot'], ld['opts']) = line.split() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (ld['src'], ld['name'], ld['fstype'], ld['opts'], ld['dump'], ld['passno']) = line.split() DCNL DCSP  DCSP if (ld['name'] != escaped_args['name']): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP exists = True DCNL DCSP  DCSP args_to_check = ('src', 'fstype', 'opts', 'dump', 'passno') DCNL DCSP  DCSP if (get_platform() == 'SunOS'): DCNL DCSP  DCSP  DCSP args_to_check = ('src', 'fstype', 'passno', 'boot', 'opts') DCNL DCSP  DCSP for t in args_to_check: DCNL DCSP  DCSP  DCSP if (ld[t] != escaped_args[t]): DCNL DCSP  DCSP  DCSP  DCSP ld[t] = escaped_args[t] DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP to_write.append((new_line % ld)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP if (not exists): DCNL DCSP  DCSP to_write.append((new_line % escaped_args)) DCNL DCSP  DCSP changed = True DCNL DCSP if (changed and (not module.check_mode)): DCNL DCSP  DCSP write_fstab(to_write, args['fstab']) DCNL DCSP return (args['name'], changed)
def unset_mount(module, args): DCNL  DCSP to_write = [] DCNL DCSP changed = False DCNL DCSP escaped_name = _escape_fstab(args['name']) DCNL DCSP for line in open(args['fstab'], 'r').readlines(): DCNL DCSP  DCSP if (not line.strip()): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if line.strip().startswith('#'): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (((get_platform() == 'SunOS') and (len(line.split()) != 7)) or ((get_platform() != 'SunOS') and (len(line.split()) != 6))): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP ld = {} DCNL DCSP  DCSP if (get_platform() == 'SunOS'): DCNL DCSP  DCSP  DCSP (ld['src'], dash, ld['name'], ld['fstype'], ld['passno'], ld['boot'], ld['opts']) = line.split() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (ld['src'], ld['name'], ld['fstype'], ld['opts'], ld['dump'], ld['passno']) = line.split() DCNL DCSP  DCSP if (ld['name'] != escaped_name): DCNL DCSP  DCSP  DCSP to_write.append(line) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP changed = True DCNL DCSP if (changed and (not module.check_mode)): DCNL DCSP  DCSP write_fstab(to_write, args['fstab']) DCNL DCSP return (args['name'], changed)
def mount(module, args): DCNL  DCSP mount_bin = module.get_bin_path('mount', required=True) DCNL DCSP name = args['name'] DCNL DCSP cmd = [mount_bin] DCNL DCSP if ismount(name): DCNL DCSP  DCSP return remount(module, mount_bin, args) DCNL DCSP if (get_platform().lower() == 'openbsd'): DCNL DCSP  DCSP if (module.params['fstab'] is not None): DCNL DCSP  DCSP  DCSP module.fail_json(msg='OpenBSD DCSP does DCSP not DCSP support DCSP alternate DCSP fstab DCSP files. DCSP  DCSP Do DCSP not DCSP specify DCSP the DCSP fstab DCSP parameter DCSP for DCSP OpenBSD DCSP hosts') DCNL DCSP else: DCNL DCSP  DCSP cmd += _set_fstab_args(args['fstab']) DCNL DCSP cmd += [name] DCNL DCSP (rc, out, err) = module.run_command(cmd) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP return (0, '') DCNL DCSP else: DCNL DCSP  DCSP return (rc, (out + err))
def umount(module, path): DCNL  DCSP umount_bin = module.get_bin_path('umount', required=True) DCNL DCSP cmd = [umount_bin, path] DCNL DCSP (rc, out, err) = module.run_command(cmd) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP return (0, '') DCNL DCSP else: DCNL DCSP  DCSP return (rc, (out + err))
def remount(module, mount_bin, args): DCNL  DCSP msg = '' DCNL DCSP cmd = [mount_bin] DCNL DCSP if get_platform().lower().endswith('bsd'): DCNL DCSP  DCSP cmd += ['-u'] DCNL DCSP else: DCNL DCSP  DCSP cmd += ['-o', 'remount'] DCNL DCSP if (get_platform().lower() == 'openbsd'): DCNL DCSP  DCSP if (module.params['fstab'] is not None): DCNL DCSP  DCSP  DCSP module.fail_json(msg='OpenBSD DCSP does DCSP not DCSP support DCSP alternate DCSP fstab DCSP files. DCSP  DCSP Do DCSP not DCSP specify DCSP the DCSP fstab DCSP parameter DCSP for DCSP OpenBSD DCSP hosts') DCNL DCSP else: DCNL DCSP  DCSP cmd += _set_fstab_args(args['fstab']) DCNL DCSP cmd += [args['name']] DCNL DCSP out = err = '' DCNL DCSP try: DCNL DCSP  DCSP if get_platform().lower().endswith('bsd'): DCNL DCSP  DCSP  DCSP rc = 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (rc, out, err) = module.run_command(cmd) DCNL DCSP except: DCNL DCSP  DCSP rc = 1 DCNL DCSP if (rc != 0): DCNL DCSP  DCSP msg = (out + err) DCNL DCSP  DCSP if ismount(args['name']): DCNL DCSP  DCSP  DCSP (rc, msg) = umount(module, args['name']) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP (rc, msg) = mount(module, args) DCNL DCSP return (rc, msg)
def is_bind_mounted(module, linux_mounts, dest, src=None, fstype=None): DCNL  DCSP is_mounted = False DCNL DCSP if ((get_platform() == 'Linux') and (linux_mounts is not None)): DCNL DCSP  DCSP if (src is None): DCNL DCSP  DCSP  DCSP if (dest in linux_mounts): DCNL DCSP  DCSP  DCSP  DCSP is_mounted = True DCNL DCSP  DCSP elif ((dest in linux_mounts) and (linux_mounts[dest]['src'] == src)): DCNL DCSP  DCSP  DCSP is_mounted = True DCNL DCSP else: DCNL DCSP  DCSP bin_path = module.get_bin_path('mount', required=True) DCNL DCSP  DCSP cmd = ('%s DCSP -l' % bin_path) DCNL DCSP  DCSP (rc, out, err) = module.run_command(cmd) DCNL DCSP  DCSP mounts = [] DCNL DCSP  DCSP if len(out): DCNL DCSP  DCSP  DCSP mounts = to_native(out).strip().split('\n') DCNL DCSP  DCSP for mnt in mounts: DCNL DCSP  DCSP  DCSP arguments = mnt.split() DCNL DCSP  DCSP  DCSP if (((arguments[0] == src) or (src is None)) and (arguments[2] == dest) and ((arguments[4] == fstype) or (fstype is None))): DCNL DCSP  DCSP  DCSP  DCSP is_mounted = True DCNL DCSP  DCSP  DCSP if is_mounted: DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP return is_mounted
def get_linux_mounts(module): DCNL  DCSP mntinfo_file = '/proc/self/mountinfo' DCNL DCSP try: DCNL DCSP  DCSP f = open(mntinfo_file) DCNL DCSP except IOError: DCNL DCSP  DCSP return DCNL DCSP lines = map(str.strip, f.readlines()) DCNL DCSP try: DCNL DCSP  DCSP f.close() DCNL DCSP except IOError: DCNL DCSP  DCSP module.fail_json(msg=('Cannot DCSP close DCSP file DCSP %s' % mntinfo_file)) DCNL DCSP mntinfo = [] DCNL DCSP for line in lines: DCNL DCSP  DCSP fields = line.split() DCNL DCSP  DCSP record = {'root': fields[3], 'dst': fields[4], 'opts': fields[5], 'fields': fields[6:(-4)], 'fs': fields[(-3)], 'src': fields[(-2)]} DCNL DCSP  DCSP mntinfo.append(record) DCNL DCSP mounts = {} DCNL DCSP for (i, mnt) in enumerate(mntinfo): DCNL DCSP  DCSP src = mnt['src'] DCNL DCSP  DCSP if ((mnt['fs'] == 'tmpfs') and (mnt['root'] != '/')): DCNL DCSP  DCSP  DCSP shared = None DCNL DCSP  DCSP  DCSP for fld in mnt['fields']: DCNL DCSP  DCSP  DCSP  DCSP if fld.startswith('shared'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP shared = fld DCNL DCSP  DCSP  DCSP if (shared is None): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP dest = None DCNL DCSP  DCSP  DCSP for (j, m) in enumerate(mntinfo): DCNL DCSP  DCSP  DCSP  DCSP if (j < i): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (shared in m['fields']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP dest = m['dst'] DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if (dest is not None): DCNL DCSP  DCSP  DCSP  DCSP src = ('%s%s' % (dest, mnt['root'])) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP elif ((mnt['root'] != '/') and (len(mnt['fields']) > 0)): DCNL DCSP  DCSP  DCSP for (j, m) in enumerate(mntinfo): DCNL DCSP  DCSP  DCSP  DCSP if (j < i): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (m['src'] == mnt['src']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP src = ('%s%s' % (m['dst'], mnt['root'])) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif ((mnt['root'] != '/') and (len(mnt['fields']) == 0)): DCNL DCSP  DCSP  DCSP src = mnt['root'] DCNL DCSP  DCSP  DCSP for (j, m) in enumerate(mntinfo): DCNL DCSP  DCSP  DCSP  DCSP if (j < i): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((m['src'] == mnt['src']) and mnt['root'].startswith(m['root'])): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP src = src.replace(('%s/' % m['root']), '/', 1) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP mounts[mnt['dst']] = {'src': src, 'opts': mnt['opts'], 'fs': mnt['fs']} DCNL DCSP return mounts
def keyfile(module, user, write=False, path=None, manage_dir=True): DCNL  DCSP if (module.check_mode and (path is not None)): DCNL DCSP  DCSP keysfile = path DCNL DCSP  DCSP return keysfile DCNL DCSP try: DCNL DCSP  DCSP user_entry = pwd.getpwnam(user) DCNL DCSP except KeyError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP if (module.check_mode and (path is None)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='Either DCSP user DCSP must DCSP exist DCSP or DCSP you DCSP must DCSP provide DCSP full DCSP path DCSP to DCSP key DCSP file DCSP in DCSP check DCSP mode') DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP lookup DCSP user DCSP %s: DCSP %s' % (user, str(e)))) DCNL DCSP if (path is None): DCNL DCSP  DCSP homedir = user_entry.pw_dir DCNL DCSP  DCSP sshdir = os.path.join(homedir, '.ssh') DCNL DCSP  DCSP keysfile = os.path.join(sshdir, 'authorized_keys') DCNL DCSP else: DCNL DCSP  DCSP sshdir = os.path.dirname(path) DCNL DCSP  DCSP keysfile = path DCNL DCSP if (not write): DCNL DCSP  DCSP return keysfile DCNL DCSP uid = user_entry.pw_uid DCNL DCSP gid = user_entry.pw_gid DCNL DCSP if manage_dir: DCNL DCSP  DCSP if (not os.path.exists(sshdir)): DCNL DCSP  DCSP  DCSP os.mkdir(sshdir, int('0700', 8)) DCNL DCSP  DCSP  DCSP if module.selinux_enabled(): DCNL DCSP  DCSP  DCSP  DCSP module.set_default_selinux_context(sshdir, False) DCNL DCSP  DCSP os.chown(sshdir, uid, gid) DCNL DCSP  DCSP os.chmod(sshdir, int('0700', 8)) DCNL DCSP if (not os.path.exists(keysfile)): DCNL DCSP  DCSP basedir = os.path.dirname(keysfile) DCNL DCSP  DCSP if (not os.path.exists(basedir)): DCNL DCSP  DCSP  DCSP os.makedirs(basedir) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP f = open(keysfile, 'w') DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP if module.selinux_enabled(): DCNL DCSP  DCSP  DCSP module.set_default_selinux_context(keysfile, False) DCNL DCSP try: DCNL DCSP  DCSP os.chown(keysfile, uid, gid) DCNL DCSP  DCSP os.chmod(keysfile, int('0600', 8)) DCNL DCSP except OSError: DCNL DCSP  DCSP pass DCNL DCSP return keysfile
def parseoptions(module, options): DCNL  DCSP options_dict = keydict() DCNL DCSP if options: DCNL DCSP  DCSP regex = re.compile('((?:[^,"\']|"[^"]*"|\'[^\']*\')+)') DCNL DCSP  DCSP parts = regex.split(options)[1:(-1)] DCNL DCSP  DCSP for part in parts: DCNL DCSP  DCSP  DCSP if ('=' in part): DCNL DCSP  DCSP  DCSP  DCSP (key, value) = part.split('=', 1) DCNL DCSP  DCSP  DCSP  DCSP options_dict[key] = value DCNL DCSP  DCSP  DCSP elif (part != ','): DCNL DCSP  DCSP  DCSP  DCSP options_dict[part] = None DCNL DCSP return options_dict
def parsekey(module, raw_key, rank=None): DCNL  DCSP VALID_SSH2_KEY_TYPES = ['ssh-ed25519', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', 'ecdsa-sha2-nistp521', 'ssh-dss', 'ssh-rsa'] DCNL DCSP options = None DCNL DCSP key = None DCNL DCSP key_type = None DCNL DCSP type_index = None DCNL DCSP raw_key = raw_key.replace('\\#', '#') DCNL DCSP lex = shlex.shlex(raw_key) DCNL DCSP lex.quotes = [] DCNL DCSP lex.commenters = '' DCNL DCSP lex.whitespace_split = True DCNL DCSP key_parts = list(lex) DCNL DCSP if (key_parts and (key_parts[0] == '#')): DCNL DCSP  DCSP return (raw_key, 'skipped', None, None, rank) DCNL DCSP for i in range(0, len(key_parts)): DCNL DCSP  DCSP if (key_parts[i] in VALID_SSH2_KEY_TYPES): DCNL DCSP  DCSP  DCSP type_index = i DCNL DCSP  DCSP  DCSP key_type = key_parts[i] DCNL DCSP  DCSP  DCSP break DCNL DCSP if (type_index is None): DCNL DCSP  DCSP return None DCNL DCSP elif (type_index > 0): DCNL DCSP  DCSP options = ' DCSP '.join(key_parts[:type_index]) DCNL DCSP options = parseoptions(module, options) DCNL DCSP key = key_parts[(type_index + 1)] DCNL DCSP if (len(key_parts) > (type_index + 1)): DCNL DCSP  DCSP comment = ' DCSP '.join(key_parts[(type_index + 2):]) DCNL DCSP return (key, key_type, options, comment, rank)
def enforce_state(module, params): DCNL  DCSP user = params['user'] DCNL DCSP key = params['key'] DCNL DCSP path = params.get('path', None) DCNL DCSP manage_dir = params.get('manage_dir', True) DCNL DCSP state = params.get('state', 'present') DCNL DCSP key_options = params.get('key_options', None) DCNL DCSP exclusive = params.get('exclusive', False) DCNL DCSP error_msg = 'Error DCSP getting DCSP key DCSP from: DCSP %s' DCNL DCSP if key.startswith('http'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (resp, info) = fetch_url(module, key) DCNL DCSP  DCSP  DCSP if (info['status'] != 200): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=(error_msg % key)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP key = resp.read() DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP module.fail_json(msg=(error_msg % key)) DCNL DCSP  DCSP key = to_native(key, errors='surrogate_or_strict') DCNL DCSP new_keys = [s for s in key.splitlines() if (s and (not s.startswith('#')))] DCNL DCSP do_write = False DCNL DCSP params['keyfile'] = keyfile(module, user, do_write, path, manage_dir) DCNL DCSP existing_content = readfile(params['keyfile']) DCNL DCSP existing_keys = parsekeys(module, existing_content) DCNL DCSP keys_to_exist = [] DCNL DCSP max_rank_of_existing_keys = len(existing_keys) DCNL DCSP for (rank_index, new_key) in enumerate(new_keys): DCNL DCSP  DCSP parsed_new_key = parsekey(module, new_key, rank=rank_index) DCNL DCSP  DCSP if (not parsed_new_key): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('invalid DCSP key DCSP specified: DCSP %s' % new_key)) DCNL DCSP  DCSP if (key_options is not None): DCNL DCSP  DCSP  DCSP parsed_options = parseoptions(module, key_options) DCNL DCSP  DCSP  DCSP parsed_new_key = (parsed_new_key[0], parsed_new_key[1], parsed_options, parsed_new_key[3], parsed_new_key[4]) DCNL DCSP  DCSP matched = False DCNL DCSP  DCSP non_matching_keys = [] DCNL DCSP  DCSP if (parsed_new_key[0] in existing_keys): DCNL DCSP  DCSP  DCSP if ((parsed_new_key[:4] != existing_keys[parsed_new_key[0]][:4]) and (state == 'present')): DCNL DCSP  DCSP  DCSP  DCSP non_matching_keys.append(existing_keys[parsed_new_key[0]]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP matched = True DCNL DCSP  DCSP if (state == 'present'): DCNL DCSP  DCSP  DCSP keys_to_exist.append(parsed_new_key[0]) DCNL DCSP  DCSP  DCSP if (len(non_matching_keys) > 0): DCNL DCSP  DCSP  DCSP  DCSP for non_matching_key in non_matching_keys: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (non_matching_key[0] in existing_keys): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP del existing_keys[non_matching_key[0]] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP do_write = True DCNL DCSP  DCSP  DCSP if (not matched): DCNL DCSP  DCSP  DCSP  DCSP total_rank = (max_rank_of_existing_keys + parsed_new_key[4]) DCNL DCSP  DCSP  DCSP  DCSP existing_keys[parsed_new_key[0]] = (parsed_new_key[0], parsed_new_key[1], parsed_new_key[2], parsed_new_key[3], total_rank) DCNL DCSP  DCSP  DCSP  DCSP do_write = True DCNL DCSP  DCSP elif (state == 'absent'): DCNL DCSP  DCSP  DCSP if (not matched): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP del existing_keys[parsed_new_key[0]] DCNL DCSP  DCSP  DCSP do_write = True DCNL DCSP if ((state == 'present') and exclusive): DCNL DCSP  DCSP to_remove = frozenset(existing_keys).difference(keys_to_exist) DCNL DCSP  DCSP for key in to_remove: DCNL DCSP  DCSP  DCSP del existing_keys[key] DCNL DCSP  DCSP  DCSP do_write = True DCNL DCSP if do_write: DCNL DCSP  DCSP filename = keyfile(module, user, do_write, path, manage_dir) DCNL DCSP  DCSP new_content = serialize(existing_keys) DCNL DCSP  DCSP diff = {'before_header': params['keyfile'], 'after_header': filename, 'before': existing_content, 'after': new_content} DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP module.exit_json(changed=True, diff=diff) DCNL DCSP  DCSP writefile(module, filename, new_content) DCNL DCSP  DCSP params['changed'] = True DCNL DCSP  DCSP params['diff'] = diff DCNL DCSP elif module.check_mode: DCNL DCSP  DCSP module.exit_json(changed=False) DCNL DCSP return params
def _get_dev_size(dev, module): DCNL  DCSP blockdev_cmd = module.get_bin_path('blockdev', required=True) DCNL DCSP (rc, devsize_in_bytes, err) = module.run_command(('%s DCSP %s DCSP %s' % (blockdev_cmd, '--getsize64', dev))) DCNL DCSP return int(devsize_in_bytes)
def _get_fs_size(fssize_cmd, dev, module): DCNL  DCSP cmd = module.get_bin_path(fssize_cmd, required=True) DCNL DCSP if ('tune2fs' == fssize_cmd): DCNL DCSP  DCSP (rc, size, err) = module.run_command(('%s DCSP %s DCSP %s' % (cmd, '-l', dev))) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP for line in size.splitlines(): DCNL DCSP  DCSP  DCSP  DCSP if ('Block DCSP count:' in line): DCNL DCSP  DCSP  DCSP  DCSP  DCSP block_count = int(line.split(':')[1].strip()) DCNL DCSP  DCSP  DCSP  DCSP elif ('Block DCSP size:' in line): DCNL DCSP  DCSP  DCSP  DCSP  DCSP block_size = int(line.split(':')[1].strip()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP get DCSP block DCSP count DCSP and DCSP block DCSP size DCSP of DCSP %s DCSP with DCSP %s' % (dev, cmd)), rc=rc, err=err) DCNL DCSP elif ('xfs_info' == fssize_cmd): DCNL DCSP  DCSP (rc, size, err) = module.run_command(('%s DCSP %s' % (cmd, dev))) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP for line in size.splitlines(): DCNL DCSP  DCSP  DCSP  DCSP if ('data DCSP ' in line): DCNL DCSP  DCSP  DCSP  DCSP  DCSP block_size = int(line.split('=')[2].split()[0]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP block_count = int(line.split('=')[3].split(',')[0]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP get DCSP block DCSP count DCSP and DCSP block DCSP size DCSP of DCSP %s DCSP with DCSP %s' % (dev, cmd)), rc=rc, err=err) DCNL DCSP elif ('btrfs' == fssize_cmd): DCNL DCSP  DCSP block_size = 1 DCNL DCSP  DCSP block_count = 1 DCNL DCSP return (block_size * block_count)
def is_available(name, ubuntuMode): DCNL  DCSP if ubuntuMode: DCNL DCSP  DCSP __regexp = '^(?P<locale>\\S+_\\S+) DCSP (?P<charset>\\S+)\\s*$' DCNL DCSP  DCSP __locales_available = '/usr/share/i18n/SUPPORTED' DCNL DCSP else: DCNL DCSP  DCSP __regexp = '^#{0,1}\\s*(?P<locale>\\S+_\\S+) DCSP (?P<charset>\\S+)\\s*$' DCNL DCSP  DCSP __locales_available = '/etc/locale.gen' DCNL DCSP re_compiled = re.compile(__regexp) DCNL DCSP fd = open(__locales_available, 'r') DCNL DCSP for line in fd: DCNL DCSP  DCSP result = re_compiled.match(line) DCNL DCSP  DCSP if (result and (result.group('locale') == name)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP fd.close() DCNL DCSP return False
def is_present(name): DCNL  DCSP output = Popen(['locale', '-a'], stdout=PIPE).communicate()[0] DCNL DCSP output = to_native(output) DCNL DCSP return any(((fix_case(name) == fix_case(line)) for line in output.splitlines()))
def fix_case(name): DCNL  DCSP for (s, r) in LOCALE_NORMALIZATION.items(): DCNL DCSP  DCSP name = name.replace(s, r) DCNL DCSP return name
def replace_line(existing_line, new_line): DCNL  DCSP try: DCNL DCSP  DCSP f = open('/etc/locale.gen', 'r') DCNL DCSP  DCSP lines = [line.replace(existing_line, new_line) for line in f] DCNL DCSP finally: DCNL DCSP  DCSP f.close() DCNL DCSP try: DCNL DCSP  DCSP f = open('/etc/locale.gen', 'w') DCNL DCSP  DCSP f.write(''.join(lines)) DCNL DCSP finally: DCNL DCSP  DCSP f.close()
def set_locale(name, enabled=True): DCNL  DCSP search_string = ('#{0,1}\\s*%s DCSP (?P<charset>.+)' % name) DCNL DCSP if enabled: DCNL DCSP  DCSP new_string = ('%s DCSP \\g<charset>' % name) DCNL DCSP else: DCNL DCSP  DCSP new_string = ('# DCSP %s DCSP \\g<charset>' % name) DCNL DCSP try: DCNL DCSP  DCSP f = open('/etc/locale.gen', 'r') DCNL DCSP  DCSP lines = [re.sub(search_string, new_string, line) for line in f] DCNL DCSP finally: DCNL DCSP  DCSP f.close() DCNL DCSP try: DCNL DCSP  DCSP f = open('/etc/locale.gen', 'w') DCNL DCSP  DCSP f.write(''.join(lines)) DCNL DCSP finally: DCNL DCSP  DCSP f.close()
def apply_change(targetState, name): DCNL  DCSP if (targetState == 'present'): DCNL DCSP  DCSP set_locale(name, enabled=True) DCNL DCSP else: DCNL DCSP  DCSP set_locale(name, enabled=False) DCNL DCSP localeGenExitValue = call('locale-gen') DCNL DCSP if (localeGenExitValue != 0): DCNL DCSP  DCSP raise EnvironmentError(localeGenExitValue, ('locale.gen DCSP failed DCSP to DCSP execute, DCSP it DCSP returned DCSP ' + str(localeGenExitValue)))
def apply_change_ubuntu(targetState, name): DCNL  DCSP if (targetState == 'present'): DCNL DCSP  DCSP localeGenExitValue = call(['locale-gen', name]) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP f = open('/var/lib/locales/supported.d/local', 'r') DCNL DCSP  DCSP  DCSP content = f.readlines() DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP f = open('/var/lib/locales/supported.d/local', 'w') DCNL DCSP  DCSP  DCSP for line in content: DCNL DCSP  DCSP  DCSP  DCSP (locale, charset) = line.split(' DCSP ') DCNL DCSP  DCSP  DCSP  DCSP if (locale != name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP f.write(line) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP localeGenExitValue = call(['locale-gen', '--purge']) DCNL DCSP if (localeGenExitValue != 0): DCNL DCSP  DCSP raise EnvironmentError(localeGenExitValue, ('locale.gen DCSP failed DCSP to DCSP execute, DCSP it DCSP returned DCSP ' + str(localeGenExitValue)))
def run_command(command, module, check_rc=True): DCNL  DCSP (rc, out, err) = module.run_command(command, check_rc=check_rc, cwd=module.params['chdir']) DCNL DCSP return (rc, sanitize_output(out), sanitize_output(err))
def sanitize_output(output): DCNL  DCSP if (output is None): DCNL DCSP  DCSP return '' DCNL DCSP else: DCNL DCSP  DCSP return output.rstrip('\r\n')
def enforce_state(module, params): DCNL  DCSP host = params['name'] DCNL DCSP key = params.get('key', None) DCNL DCSP port = params.get('port', None) DCNL DCSP path = params.get('path') DCNL DCSP hash_host = params.get('hash_host') DCNL DCSP state = params.get('state') DCNL DCSP sshkeygen = module.get_bin_path('ssh-keygen', True) DCNL DCSP if (key and (key[(-1)] != '\n')): DCNL DCSP  DCSP key += '\n' DCNL DCSP if ((key is None) and (state != 'absent')): DCNL DCSP  DCSP module.fail_json(msg='No DCSP key DCSP specified DCSP when DCSP adding DCSP a DCSP host') DCNL DCSP sanity_check(module, host, key, sshkeygen) DCNL DCSP (found, replace_or_add, found_line, key) = search_for_host_key(module, host, key, hash_host, path, sshkeygen) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP module.exit_json(changed=(replace_or_add or ((state == 'present') != found))) DCNL DCSP if (found and (key is None) and (state == 'absent')): DCNL DCSP  DCSP module.run_command([sshkeygen, '-R', host, '-f', path], check_rc=True) DCNL DCSP  DCSP params['changed'] = True DCNL DCSP if (replace_or_add or (found != (state == 'present'))): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP inf = open(path, 'r') DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP if (e.errno == errno.ENOENT): DCNL DCSP  DCSP  DCSP  DCSP inf = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP read DCSP %s: DCSP %s' % (path, str(e)))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP outf = tempfile.NamedTemporaryFile(dir=os.path.dirname(path)) DCNL DCSP  DCSP  DCSP if (inf is not None): DCNL DCSP  DCSP  DCSP  DCSP for (line_number, line) in enumerate(inf): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((found_line == (line_number + 1)) and (replace_or_add or (state == 'absent'))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP outf.write(line) DCNL DCSP  DCSP  DCSP  DCSP inf.close() DCNL DCSP  DCSP  DCSP if (state == 'present'): DCNL DCSP  DCSP  DCSP  DCSP outf.write(key) DCNL DCSP  DCSP  DCSP outf.flush() DCNL DCSP  DCSP  DCSP module.atomic_move(outf.name, path) DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP e = get_exception() DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP write DCSP to DCSP file DCSP %s: DCSP %s' % (path, str(e)))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP outf.close() DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP params['changed'] = True DCNL DCSP return params
def sanity_check(module, host, key, sshkeygen): DCNL  DCSP if (key is None): DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP outf = tempfile.NamedTemporaryFile() DCNL DCSP  DCSP outf.write(key) DCNL DCSP  DCSP outf.flush() DCNL DCSP except IOError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP write DCSP to DCSP temporary DCSP file DCSP %s: DCSP %s' % (outf.name, str(e)))) DCNL DCSP (rc, stdout, stderr) = module.run_command([sshkeygen, '-F', host, '-f', outf.name], check_rc=True) DCNL DCSP try: DCNL DCSP  DCSP outf.close() DCNL DCSP except: DCNL DCSP  DCSP pass DCNL DCSP if (stdout == ''): DCNL DCSP  DCSP module.fail_json(msg='Host DCSP parameter DCSP does DCSP not DCSP match DCSP hashed DCSP host DCSP field DCSP in DCSP supplied DCSP key')
def search_for_host_key(module, host, key, hash_host, path, sshkeygen): DCNL  DCSP if (os.path.exists(path) == False): DCNL DCSP  DCSP return (False, False, None, key) DCNL DCSP sshkeygen_command = [sshkeygen, '-F', host, '-f', path] DCNL DCSP (rc, stdout, stderr) = module.run_command(sshkeygen_command, check_rc=False) DCNL DCSP if ((stdout == '') and (stderr == '') and ((rc == 0) or (rc == 1))): DCNL DCSP  DCSP return (False, False, None, key) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=("ssh-keygen DCSP failed DCSP (rc=%d,stdout='%s',stderr='%s')" % (rc, stdout, stderr))) DCNL DCSP if (key is None): DCNL DCSP  DCSP return (True, False, None, key) DCNL DCSP lines = stdout.split('\n') DCNL DCSP new_key = normalize_known_hosts_key(key) DCNL DCSP sshkeygen_command.insert(1, '-H') DCNL DCSP (rc, stdout, stderr) = module.run_command(sshkeygen_command, check_rc=False) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=("ssh-keygen DCSP failed DCSP to DCSP hash DCSP host DCSP (rc=%d,stdout='%s',stderr='%s')" % (rc, stdout, stderr))) DCNL DCSP hashed_lines = stdout.split('\n') DCNL DCSP for (lnum, l) in enumerate(lines): DCNL DCSP  DCSP if (l == ''): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP elif (l[0] == '#'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP found_line = int(re.search('found: DCSP line DCSP (\\d+)', l).group(1)) DCNL DCSP  DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=("failed DCSP to DCSP parse DCSP output DCSP of DCSP ssh-keygen DCSP for DCSP line DCSP number: DCSP '%s'" % l)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP found_key = normalize_known_hosts_key(l) DCNL DCSP  DCSP  DCSP if (hash_host == True): DCNL DCSP  DCSP  DCSP  DCSP if (found_key['host'][:3] == '|1|'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_key['host'] = found_key['host'] DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP hashed_host = normalize_known_hosts_key(hashed_lines[lnum]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP found_key['host'] = hashed_host['host'] DCNL DCSP  DCSP  DCSP  DCSP key = key.replace(host, found_key['host']) DCNL DCSP  DCSP  DCSP if (new_key == found_key): DCNL DCSP  DCSP  DCSP  DCSP return (True, False, found_line, key) DCNL DCSP  DCSP  DCSP elif (new_key['type'] == found_key['type']): DCNL DCSP  DCSP  DCSP  DCSP return (True, True, found_line, key) DCNL DCSP return (True, True, None, key)
def normalize_known_hosts_key(key): DCNL  DCSP k = key.strip() DCNL DCSP k = key.split() DCNL DCSP d = dict() DCNL DCSP if (k[0][0] == '@'): DCNL DCSP  DCSP d['options'] = k[0] DCNL DCSP  DCSP d['host'] = k[1] DCNL DCSP  DCSP d['type'] = k[2] DCNL DCSP  DCSP d['key'] = k[3] DCNL DCSP else: DCNL DCSP  DCSP d['host'] = k[0] DCNL DCSP  DCSP d['type'] = k[1] DCNL DCSP  DCSP d['key'] = k[2] DCNL DCSP return d
def semanage_fcontext_exists(sefcontext, target, ftype): DCNL  DCSP record = (target, option_to_file_type_str[ftype]) DCNL DCSP records = sefcontext.get_all() DCNL DCSP try: DCNL DCSP  DCSP return records[record] DCNL DCSP except KeyError: DCNL DCSP  DCSP return None
def semanage_fcontext_modify(module, result, target, ftype, setype, do_reload, serange, seuser, sestore=''): DCNL  DCSP changed = False DCNL DCSP prepared_diff = '' DCNL DCSP try: DCNL DCSP  DCSP sefcontext = seobject.fcontextRecords(sestore) DCNL DCSP  DCSP sefcontext.set_reload(do_reload) DCNL DCSP  DCSP exists = semanage_fcontext_exists(sefcontext, target, ftype) DCNL DCSP  DCSP if exists: DCNL DCSP  DCSP  DCSP (orig_seuser, orig_serole, orig_setype, orig_serange) = exists DCNL DCSP  DCSP  DCSP if (seuser is None): DCNL DCSP  DCSP  DCSP  DCSP seuser = orig_seuser DCNL DCSP  DCSP  DCSP if (serange is None): DCNL DCSP  DCSP  DCSP  DCSP serange = orig_serange DCNL DCSP  DCSP  DCSP if ((setype != orig_setype) or (seuser != orig_seuser) or (serange != orig_serange)): DCNL DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP sefcontext.modify(target, setype, ftype, serange, seuser) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP if module._diff: DCNL DCSP  DCSP  DCSP  DCSP  DCSP prepared_diff += '# DCSP Change DCSP to DCSP semanage DCSP file DCSP context DCSP mappings\n' DCNL DCSP  DCSP  DCSP  DCSP  DCSP prepared_diff += ('-%s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s:%s:%s:%s\n' % (target, ftype, orig_seuser, orig_serole, orig_setype, orig_serange)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP prepared_diff += ('+%s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s:%s:%s:%s\n' % (target, ftype, seuser, orig_serole, setype, serange)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (seuser is None): DCNL DCSP  DCSP  DCSP  DCSP seuser = 'system_u' DCNL DCSP  DCSP  DCSP if (serange is None): DCNL DCSP  DCSP  DCSP  DCSP serange = 's0' DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP sefcontext.add(target, setype, ftype, serange, seuser) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if module._diff: DCNL DCSP  DCSP  DCSP  DCSP prepared_diff += '# DCSP Addition DCSP to DCSP semanage DCSP file DCSP context DCSP mappings\n' DCNL DCSP  DCSP  DCSP  DCSP prepared_diff += ('+%s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s:%s:%s:%s\n' % (target, ftype, seuser, 'object_r', setype, serange)) DCNL DCSP except Exception: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, to_native(e)))) DCNL DCSP if (module._diff and prepared_diff): DCNL DCSP  DCSP result['diff'] = dict(prepared=prepared_diff) DCNL DCSP module.exit_json(changed=changed, seuser=seuser, serange=serange, **result)
def semanage_fcontext_delete(module, result, target, ftype, do_reload, sestore=''): DCNL  DCSP changed = False DCNL DCSP prepared_diff = '' DCNL DCSP try: DCNL DCSP  DCSP sefcontext = seobject.fcontextRecords(sestore) DCNL DCSP  DCSP sefcontext.set_reload(do_reload) DCNL DCSP  DCSP exists = semanage_fcontext_exists(sefcontext, target, ftype) DCNL DCSP  DCSP if exists: DCNL DCSP  DCSP  DCSP (orig_seuser, orig_serole, orig_setype, orig_serange) = exists DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP sefcontext.delete(target, ftype) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if module._diff: DCNL DCSP  DCSP  DCSP  DCSP prepared_diff += '# DCSP Deletion DCSP to DCSP semanage DCSP file DCSP context DCSP mappings\n' DCNL DCSP  DCSP  DCSP  DCSP prepared_diff += ('-%s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s:%s:%s:%s\n' % (target, ftype, exists[0], exists[1], exists[2], exists[3])) DCNL DCSP except Exception: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, to_native(e)))) DCNL DCSP if (module._diff and prepared_diff): DCNL DCSP  DCSP result['diff'] = dict(prepared=prepared_diff) DCNL DCSP module.exit_json(changed=changed, **result)
def semanage_port_get_ports(seport, setype, proto): DCNL  DCSP records = seport.get_all_by_type() DCNL DCSP if ((setype, proto) in records): DCNL DCSP  DCSP return records[(setype, proto)] DCNL DCSP else: DCNL DCSP  DCSP return []
def semanage_port_get_type(seport, port, proto): DCNL  DCSP ports = port.split('-', 1) DCNL DCSP if (len(ports) == 1): DCNL DCSP  DCSP ports.extend(ports) DCNL DCSP key = (int(ports[0]), int(ports[1]), proto) DCNL DCSP records = seport.get_all() DCNL DCSP if (key in records): DCNL DCSP  DCSP return records[key] DCNL DCSP else: DCNL DCSP  DCSP return None
def semanage_port_add(module, ports, proto, setype, do_reload, serange='s0', sestore=''): DCNL  DCSP try: DCNL DCSP  DCSP seport = seobject.portRecords(sestore) DCNL DCSP  DCSP seport.set_reload(do_reload) DCNL DCSP  DCSP change = False DCNL DCSP  DCSP ports_by_type = semanage_port_get_ports(seport, setype, proto) DCNL DCSP  DCSP for port in ports: DCNL DCSP  DCSP  DCSP if (port not in ports_by_type): DCNL DCSP  DCSP  DCSP  DCSP change = True DCNL DCSP  DCSP  DCSP  DCSP port_type = semanage_port_get_type(seport, port, proto) DCNL DCSP  DCSP  DCSP  DCSP if ((port_type is None) and (not module.check_mode)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP seport.add(port, proto, serange, setype) DCNL DCSP  DCSP  DCSP  DCSP elif ((port_type is not None) and (not module.check_mode)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP seport.modify(port, proto, serange, setype) DCNL DCSP except ValueError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except IOError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except KeyError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except OSError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except RuntimeError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP return change
def semanage_port_del(module, ports, proto, setype, do_reload, sestore=''): DCNL  DCSP try: DCNL DCSP  DCSP seport = seobject.portRecords(sestore) DCNL DCSP  DCSP seport.set_reload(do_reload) DCNL DCSP  DCSP change = False DCNL DCSP  DCSP ports_by_type = semanage_port_get_ports(seport, setype, proto) DCNL DCSP  DCSP for port in ports: DCNL DCSP  DCSP  DCSP if (port in ports_by_type): DCNL DCSP  DCSP  DCSP  DCSP change = True DCNL DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP seport.delete(port, proto) DCNL DCSP except ValueError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except IOError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except KeyError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except OSError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP except RuntimeError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('%s: DCSP %s\n' % (e.__class__.__name__, str(e)))) DCNL DCSP return change
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), before=dict(type='list'), after=dict(type='list'), match=dict(default='line', choices=['line', 'strict', 'exact', 'none']), replace=dict(default='line', choices=['line', 'block']), config=dict(), defaults=dict(type='bool', default=False), passwords=dict(type='bool', default=False), backup=dict(type='bool', default=False), save=dict(type='bool', default=False)) DCNL DCSP mutually_exclusive = [('lines', 'src'), ('defaults', 'passwords')] DCNL DCSP required_if = [('match', 'strict', ['lines']), ('match', 'exact', ['lines']), ('replace', 'block', ['lines'])] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP result = dict(changed=False) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(http=dict(aliases=['enable_http'], default=False, type='bool', setter='set_protocol_http'), http_port=dict(default=80, type='int', setter='set_protocol_http'), https=dict(aliases=['enable_https'], default=True, type='bool', setter='set_protocol_https'), https_port=dict(default=443, type='int', setter='set_protocol_https'), local_http=dict(aliases=['enable_local_http'], default=False, type='bool', setter='set_local_http'), local_http_port=dict(default=8080, type='int', setter='set_local_http'), socket=dict(aliases=['enable_socket'], default=False, type='bool'), vrf=dict(default='default'), config=dict(), transport=dict(default='cli', choices=['cli']), state=dict(default='started', choices=['stopped', 'started'])) DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, supports_check_mode=True) DCNL DCSP state = module.params['state'] DCNL DCSP result = dict(changed=False) DCNL DCSP commands = list() DCNL DCSP instance = get_instance(module) DCNL DCSP invoke(state, module, instance, commands) DCNL DCSP try: DCNL DCSP  DCSP load(module, instance, commands, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP collect_facts(module, result) DCNL DCSP clean_result(result) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), before=dict(type='list'), after=dict(type='list'), match=dict(default='line', choices=['line', 'strict', 'exact', 'none']), replace=dict(default='line', choices=['line', 'block', 'config']), force=dict(default=False, type='bool'), config=dict(), defaults=dict(type='bool', default=False), backup=dict(type='bool', default=False), save=dict(default=False, type='bool')) DCNL DCSP mutually_exclusive = [('lines', 'src')] DCNL DCSP required_if = [('match', 'strict', ['lines']), ('match', 'exact', ['lines']), ('replace', 'block', ['lines']), ('replace', 'config', ['src'])] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP if (module.params['force'] is True): DCNL DCSP  DCSP module.params['match'] = 'none' DCNL DCSP warnings = list() DCNL DCSP check_args(module, warnings) DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(required=True), force=dict(default=False, type='bool'), include_defaults=dict(default=False, type='bool'), backup=dict(default=False, type='bool'), replace=dict(default=False, type='bool'), config=dict()) DCNL DCSP mutually_exclusive = [('config', 'backup'), ('config', 'force')] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP replace = module.params['replace'] DCNL DCSP commands = list() DCNL DCSP running = None DCNL DCSP result = dict(changed=False) DCNL DCSP candidate = NetworkConfig(contents=module.params['src'], indent=3) DCNL DCSP if replace: DCNL DCSP  DCSP if (module.params['transport'] == 'cli'): DCNL DCSP  DCSP  DCSP module.fail_json(msg='config DCSP replace DCSP is DCSP only DCSP supported DCSP over DCSP eapi') DCNL DCSP  DCSP commands = str(candidate).split('\n') DCNL DCSP else: DCNL DCSP  DCSP contents = get_config(module) DCNL DCSP  DCSP if contents: DCNL DCSP  DCSP  DCSP running = NetworkConfig(contents=contents, indent=3) DCNL DCSP  DCSP  DCSP result['_backup'] = contents DCNL DCSP  DCSP if (not module.params['force']): DCNL DCSP  DCSP  DCSP commands = candidate.difference((running or list())) DCNL DCSP  DCSP  DCSP commands = dumps(commands, 'commands').split('\n') DCNL DCSP  DCSP  DCSP commands = [str(c) for c in commands if c] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP commands = str(candidate).split('\n') DCNL DCSP commands = filter_exit(commands) DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP response = module.config.load_config(commands, replace=replace, commit=True) DCNL DCSP  DCSP  DCSP result['responses'] = response DCNL DCSP  DCSP result['changed'] = True DCNL DCSP result['updates'] = commands DCNL DCSP module.exit_json(**result)
def wakeonlan(module, mac, broadcast, port): DCNL  DCSP mac_orig = mac DCNL DCSP if (len(mac) == (12 + 5)): DCNL DCSP  DCSP mac = mac.replace(mac[2], '') DCNL DCSP if (len(mac) != 12): DCNL DCSP  DCSP module.fail_json(msg=('Incorrect DCSP MAC DCSP address DCSP length: DCSP %s' % mac_orig)) DCNL DCSP try: DCNL DCSP  DCSP int(mac, 16) DCNL DCSP except ValueError: DCNL DCSP  DCSP module.fail_json(msg=('Incorrect DCSP MAC DCSP address DCSP format: DCSP %s' % mac_orig)) DCNL DCSP data = '' DCNL DCSP padding = ''.join(['FFFFFFFFFFFF', (mac * 20)]) DCNL DCSP for i in range(0, len(padding), 2): DCNL DCSP  DCSP data = ''.join([data, struct.pack('B', int(padding[i:(i + 2)], 16))]) DCNL DCSP sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) DCNL DCSP sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1) DCNL DCSP try: DCNL DCSP  DCSP sock.sendto(data, (broadcast, port)) DCNL DCSP except socket.error: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(e))
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), match=dict(default='line', choices=['line', 'none']), config=dict(), defaults=dict(type='bool', default=False, aliases=['detail']), backup=dict(type='bool', default=False), save=dict(type='bool', default=False)) DCNL DCSP mutually_exclusive = [('lines', 'src')] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP result = dict(changed=False, warnings=list()) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(rollback_location=dict(), local_max_checkpoints=dict(type='int'), remote_max_checkpoints=dict(type='int'), rescue_location=dict(), state=dict(default='present', choices=['present', 'absent'])) DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, supports_check_mode=True) DCNL DCSP state = module.params['state'] DCNL DCSP result = dict(changed=False) DCNL DCSP commands = list() DCNL DCSP invoke(state, module, commands) DCNL DCSP try: DCNL DCSP  DCSP load_config(module, commands, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def get_cli_body_ssh_vrf(module, command, response): DCNL  DCSP command_splitted = command.split('|') DCNL DCSP if ((len(command_splitted) > 2) or ('show DCSP run' in command)): DCNL DCSP  DCSP body = response DCNL DCSP elif (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP else: DCNL DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def validate_feature(module, mode='show'): DCNL  DCSP feature = module.params['feature'] DCNL DCSP feature_to_be_mapped = {'show': {'nv DCSP overlay': 'nve', 'vn-segment-vlan-based': 'vnseg_vlan', 'hsrp': 'hsrp_engine', 'fabric DCSP multicast': 'fabric_mcast', 'scp-server': 'scpServer', 'sftp-server': 'sftpServer', 'sla DCSP responder': 'sla_responder', 'sla DCSP sender': 'sla_sender', 'ssh': 'sshServer', 'tacacs+': 'tacacs', 'telnet': 'telnetServer', 'ethernet-link-oam': 'elo', 'port-security': 'eth_port_sec'}, 'config': {'nve': 'nv DCSP overlay', 'vnseg_vlan': 'vn-segment-vlan-based', 'hsrp_engine': 'hsrp', 'fabric_mcast': 'fabric DCSP multicast', 'scpServer': 'scp-server', 'sftpServer': 'sftp-server', 'sla_sender': 'sla DCSP sender', 'sla_responder': 'sla DCSP responder', 'sshServer': 'ssh', 'tacacs': 'tacacs+', 'telnetServer': 'telnet', 'elo': 'ethernet-link-oam', 'eth_port_sec': 'port-security'}} DCNL DCSP if (feature in feature_to_be_mapped[mode]): DCNL DCSP  DCSP feature = feature_to_be_mapped[mode][feature] DCNL DCSP return feature
def get_boot_options(module): DCNL  DCSP command = 'show DCSP boot' DCNL DCSP body = execute_show_command(command, module)[0] DCNL DCSP boot_options_raw_text = body.split('Boot DCSP Variables DCSP on DCSP next DCSP reload')[1] DCNL DCSP if ('kickstart' in boot_options_raw_text): DCNL DCSP  DCSP kick_regex = 'kickstart DCSP variable DCSP = DCSP bootflash:/(\\S+)' DCNL DCSP  DCSP sys_regex = 'system DCSP variable DCSP = DCSP bootflash:/(\\S+)' DCNL DCSP  DCSP kick = re.search(kick_regex, boot_options_raw_text).group(1) DCNL DCSP  DCSP sys = re.search(sys_regex, boot_options_raw_text).group(1) DCNL DCSP  DCSP retdict = dict(kick=kick, sys=sys) DCNL DCSP else: DCNL DCSP  DCSP nxos_regex = 'NXOS DCSP variable DCSP = DCSP bootflash:/(\\S+)' DCNL DCSP  DCSP nxos = re.search(nxos_regex, boot_options_raw_text).group(1) DCNL DCSP  DCSP retdict = dict(sys=nxos) DCNL DCSP command = 'show DCSP install DCSP all DCSP status' DCNL DCSP retdict['status'] = execute_show_command(command, module)[0] DCNL DCSP return retdict
def set_boot_options(module, image_name, kickstart=None): DCNL  DCSP commands = ['terminal DCSP dont-ask'] DCNL DCSP if (kickstart is None): DCNL DCSP  DCSP commands.append(('install DCSP all DCSP nxos DCSP %s' % image_name)) DCNL DCSP else: DCNL DCSP  DCSP commands.append(('install DCSP all DCSP system DCSP %s DCSP kickstart DCSP %s' % (image_name, kickstart))) DCNL DCSP execute_config_command(commands, module)
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('status' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh_vrf_interface(command, response, module): DCNL  DCSP if ('^' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP return body
def get_cli_body_ssh(command, response, module, text=False): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif (('show DCSP run' in command) or text): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('^' == response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif (('running' in command) or ('xml' in response[0])): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh_vrrp(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP response = response[0].replace((command + '\n\n'), '').strip() DCNL DCSP  DCSP  DCSP body = [json.loads(response)] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def is_default_interface(interface, module): DCNL  DCSP command = ('show DCSP run DCSP interface DCSP ' + interface) DCNL DCSP try: DCNL DCSP  DCSP body = execute_show_command(command, module, command_type='cli_show_ascii')[0] DCNL DCSP except IndexError: DCNL DCSP  DCSP body = '' DCNL DCSP if body: DCNL DCSP  DCSP raw_list = body.split('\n') DCNL DCSP  DCSP found = False DCNL DCSP  DCSP for line in raw_list: DCNL DCSP  DCSP  DCSP if line.startswith('interface'): DCNL DCSP  DCSP  DCSP  DCSP found = True DCNL DCSP  DCSP  DCSP if (found and line and (not line.startswith('interface'))): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return 'DNE'
def get_interface_type(interface): DCNL  DCSP if interface.upper().startswith('ET'): DCNL DCSP  DCSP return 'ethernet' DCNL DCSP elif interface.upper().startswith('VL'): DCNL DCSP  DCSP return 'svi' DCNL DCSP elif interface.upper().startswith('LO'): DCNL DCSP  DCSP return 'loopback' DCNL DCSP elif interface.upper().startswith('MG'): DCNL DCSP  DCSP return 'management' DCNL DCSP elif interface.upper().startswith('MA'): DCNL DCSP  DCSP return 'management' DCNL DCSP elif interface.upper().startswith('PO'): DCNL DCSP  DCSP return 'portchannel' DCNL DCSP elif interface.upper().startswith('NV'): DCNL DCSP  DCSP return 'nve' DCNL DCSP else: DCNL DCSP  DCSP return 'unknown'
def get_manual_interface_attributes(interface, module): DCNL  DCSP if (get_interface_type(interface) == 'svi'): DCNL DCSP  DCSP command = ('show DCSP interface DCSP ' + interface) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = execute_modified_show_for_cli_text(command, module)[0] DCNL DCSP  DCSP except (IndexError, ShellError): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP command_list = body.split('\n') DCNL DCSP  DCSP desc = None DCNL DCSP  DCSP admin_state = 'up' DCNL DCSP  DCSP for each in command_list: DCNL DCSP  DCSP  DCSP if ('Description:' in each): DCNL DCSP  DCSP  DCSP  DCSP line = each.split('Description:') DCNL DCSP  DCSP  DCSP  DCSP desc = line[1].strip().split('MTU')[0].strip() DCNL DCSP  DCSP  DCSP elif ('Administratively DCSP down' in each): DCNL DCSP  DCSP  DCSP  DCSP admin_state = 'down' DCNL DCSP  DCSP return dict(description=desc, admin_state=admin_state) DCNL DCSP else: DCNL DCSP  DCSP return None
def get_interface(intf, module): DCNL  DCSP base_key_map = {'interface': 'interface', 'admin_state': 'admin_state', 'desc': 'description'} DCNL DCSP mode_map = {'eth_mode': 'mode'} DCNL DCSP loop_map = {'state': 'admin_state'} DCNL DCSP svi_map = {'svi_admin_state': 'admin_state', 'desc': 'description'} DCNL DCSP mode_value_map = {'mode': {'access': 'layer2', 'trunk': 'layer2', 'routed': 'layer3', 'layer3': 'layer3'}} DCNL DCSP key_map = {} DCNL DCSP interface = {} DCNL DCSP command = ('show DCSP interface DCSP ' + intf) DCNL DCSP try: DCNL DCSP  DCSP body = execute_show_command(command, module)[0] DCNL DCSP except IndexError: DCNL DCSP  DCSP body = [] DCNL DCSP if body: DCNL DCSP  DCSP interface_table = body['TABLE_interface']['ROW_interface'] DCNL DCSP  DCSP intf_type = get_interface_type(intf) DCNL DCSP  DCSP if (intf_type in ['portchannel', 'ethernet']): DCNL DCSP  DCSP  DCSP if (not interface_table.get('eth_mode')): DCNL DCSP  DCSP  DCSP  DCSP interface_table['eth_mode'] = 'layer3' DCNL DCSP  DCSP if (intf_type == 'ethernet'): DCNL DCSP  DCSP  DCSP key_map.update(base_key_map) DCNL DCSP  DCSP  DCSP key_map.update(mode_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP temp_dict = apply_value_map(mode_value_map, temp_dict) DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP  DCSP elif (intf_type == 'svi'): DCNL DCSP  DCSP  DCSP key_map.update(svi_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP  DCSP  DCSP attributes = get_manual_interface_attributes(intf, module) DCNL DCSP  DCSP  DCSP interface['admin_state'] = str(attributes.get('admin_state', 'nxapibug')) DCNL DCSP  DCSP  DCSP interface['description'] = str(attributes.get('description', 'nxapi_bug')) DCNL DCSP  DCSP  DCSP command = ('show DCSP run DCSP interface DCSP ' + intf) DCNL DCSP  DCSP  DCSP body = execute_show_command(command, module, command_type='cli_show_ascii')[0] DCNL DCSP  DCSP  DCSP if ('ip DCSP forward' in body): DCNL DCSP  DCSP  DCSP  DCSP interface['ip_forward'] = 'enable' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP interface['ip_forward'] = 'disable' DCNL DCSP  DCSP  DCSP if ('fabric DCSP forwarding DCSP mode DCSP anycast-gateway' in body): DCNL DCSP  DCSP  DCSP  DCSP interface['fabric_forwarding_anycast_gateway'] = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP interface['fabric_forwarding_anycast_gateway'] = False DCNL DCSP  DCSP elif (intf_type == 'loopback'): DCNL DCSP  DCSP  DCSP key_map.update(base_key_map) DCNL DCSP  DCSP  DCSP key_map.pop('admin_state') DCNL DCSP  DCSP  DCSP key_map.update(loop_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP if (not temp_dict.get('description')): DCNL DCSP  DCSP  DCSP  DCSP temp_dict['description'] = 'None' DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP  DCSP elif (intf_type == 'management'): DCNL DCSP  DCSP  DCSP key_map.update(base_key_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP  DCSP elif (intf_type == 'portchannel'): DCNL DCSP  DCSP  DCSP key_map.update(base_key_map) DCNL DCSP  DCSP  DCSP key_map.update(mode_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP temp_dict = apply_value_map(mode_value_map, temp_dict) DCNL DCSP  DCSP  DCSP if (not temp_dict.get('description')): DCNL DCSP  DCSP  DCSP  DCSP temp_dict['description'] = 'None' DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP  DCSP elif (intf_type == 'nve'): DCNL DCSP  DCSP  DCSP key_map.update(base_key_map) DCNL DCSP  DCSP  DCSP temp_dict = apply_key_map(key_map, interface_table) DCNL DCSP  DCSP  DCSP if (not temp_dict.get('description')): DCNL DCSP  DCSP  DCSP  DCSP temp_dict['description'] = 'None' DCNL DCSP  DCSP  DCSP interface.update(temp_dict) DCNL DCSP interface['type'] = intf_type DCNL DCSP return interface
def get_interfaces_dict(module): DCNL  DCSP command = 'show DCSP interface DCSP status' DCNL DCSP try: DCNL DCSP  DCSP body = execute_show_command(command, module)[0] DCNL DCSP except IndexError: DCNL DCSP  DCSP body = {} DCNL DCSP interfaces = {'ethernet': [], 'svi': [], 'loopback': [], 'management': [], 'portchannel': [], 'nve': [], 'unknown': []} DCNL DCSP interface_list = body.get('TABLE_interface')['ROW_interface'] DCNL DCSP for index in interface_list: DCNL DCSP  DCSP intf = index['interface'] DCNL DCSP  DCSP intf_type = get_interface_type(intf) DCNL DCSP  DCSP interfaces[intf_type].append(intf) DCNL DCSP return interfaces
def normalize_interface(if_name): DCNL  DCSP def _get_number(if_name): DCNL DCSP  DCSP digits = '' DCNL DCSP  DCSP for char in if_name: DCNL DCSP  DCSP  DCSP if (char.isdigit() or (char == '/')): DCNL DCSP  DCSP  DCSP  DCSP digits += char DCNL DCSP  DCSP return digits DCNL DCSP if if_name.lower().startswith('et'): DCNL DCSP  DCSP if_type = 'Ethernet' DCNL DCSP elif if_name.lower().startswith('vl'): DCNL DCSP  DCSP if_type = 'Vlan' DCNL DCSP elif if_name.lower().startswith('lo'): DCNL DCSP  DCSP if_type = 'loopback' DCNL DCSP elif if_name.lower().startswith('po'): DCNL DCSP  DCSP if_type = 'port-channel' DCNL DCSP elif if_name.lower().startswith('nv'): DCNL DCSP  DCSP if_type = 'nve' DCNL DCSP else: DCNL DCSP  DCSP if_type = None DCNL DCSP number_list = if_name.split(' DCSP ') DCNL DCSP if (len(number_list) == 2): DCNL DCSP  DCSP number = number_list[(-1)].strip() DCNL DCSP else: DCNL DCSP  DCSP number = _get_number(if_name) DCNL DCSP if if_type: DCNL DCSP  DCSP proper_interface = (if_type + number) DCNL DCSP else: DCNL DCSP  DCSP proper_interface = if_name DCNL DCSP return proper_interface
def get_interface_config_commands(interface, intf, existing): DCNL  DCSP commands = [] DCNL DCSP desc = interface.get('description') DCNL DCSP if desc: DCNL DCSP  DCSP commands.append('description DCSP {0}'.format(desc)) DCNL DCSP mode = interface.get('mode') DCNL DCSP if mode: DCNL DCSP  DCSP if (mode == 'layer2'): DCNL DCSP  DCSP  DCSP command = 'switchport' DCNL DCSP  DCSP elif (mode == 'layer3'): DCNL DCSP  DCSP  DCSP command = 'no DCSP switchport' DCNL DCSP  DCSP commands.append(command) DCNL DCSP admin_state = interface.get('admin_state') DCNL DCSP if admin_state: DCNL DCSP  DCSP command = get_admin_state(interface, intf, admin_state) DCNL DCSP  DCSP commands.append(command) DCNL DCSP ip_forward = interface.get('ip_forward') DCNL DCSP if ip_forward: DCNL DCSP  DCSP if (ip_forward == 'enable'): DCNL DCSP  DCSP  DCSP commands.append('ip DCSP forward') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP commands.append('no DCSP ip DCSP forward') DCNL DCSP fabric_forwarding_anycast_gateway = interface.get('fabric_forwarding_anycast_gateway') DCNL DCSP if (fabric_forwarding_anycast_gateway is not None): DCNL DCSP  DCSP if (fabric_forwarding_anycast_gateway is True): DCNL DCSP  DCSP  DCSP commands.append('fabric DCSP forwarding DCSP mode DCSP anycast-gateway') DCNL DCSP  DCSP elif (fabric_forwarding_anycast_gateway is False): DCNL DCSP  DCSP  DCSP commands.append('no DCSP fabric DCSP forwarding DCSP mode DCSP anycast-gateway') DCNL DCSP if commands: DCNL DCSP  DCSP commands.insert(0, ('interface DCSP ' + intf)) DCNL DCSP return commands
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def main(): DCNL  DCSP argument_spec = dict(http=dict(aliases=['enable_http'], default=True, type='bool', setter='set_http'), http_port=dict(default=80, type='int', setter='set_http'), https=dict(aliases=['enable_https'], default=False, type='bool', setter='set_https'), https_port=dict(default=443, type='int', setter='set_https'), sandbox=dict(aliases=['enable_sandbox'], default=False, type='bool'), transport=dict(required=True, choices=['cli']), config=dict(), state=dict(default='present', choices=['started', 'stopped', 'present', 'absent'])) DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, supports_check_mode=True) DCNL DCSP state = module.params['state'] DCNL DCSP warnings = list() DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP if (state == 'started'): DCNL DCSP  DCSP state = 'present' DCNL DCSP  DCSP warnings.append('state=started DCSP is DCSP deprecated DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP a DCSP a DCSP future DCSP release. DCSP  DCSP Please DCSP use DCSP state=present DCSP instead') DCNL DCSP elif (state == 'stopped'): DCNL DCSP  DCSP state = 'absent' DCNL DCSP  DCSP warnings.append('state=stopped DCSP is DCSP deprecated DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP a DCSP a DCSP future DCSP release. DCSP  DCSP Please DCSP use DCSP state=absent DCSP instead') DCNL DCSP commands = list() DCNL DCSP instance = get_instance(module) DCNL DCSP invoke(state, module, instance, commands) DCNL DCSP try: DCNL DCSP  DCSP load(module, commands, result) DCNL DCSP except (ValueError, NetworkError): DCNL DCSP  DCSP load_checkpoint(module, result) DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP clean_result(result) DCNL DCSP module.exit_json(**result)
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('^' in response[0]): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if isinstance(response[0], str): DCNL DCSP  DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP body = response DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), before=dict(type='list'), after=dict(type='list'), match=dict(default='line', choices=['line', 'strict', 'exact', 'none']), replace=dict(default='line', choices=['line', 'block']), force=dict(default=False, type='bool'), config=dict(), defaults=dict(type='bool', default=False), backup=dict(type='bool', default=False), save=dict(type='bool', default=False)) DCNL DCSP mutually_exclusive = [('lines', 'src')] DCNL DCSP required_if = [('match', 'strict', ['lines']), ('match', 'exact', ['lines']), ('replace', 'block', ['lines'])] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP if (module.params['force'] is True): DCNL DCSP  DCSP module.params['match'] = 'none' DCNL DCSP warnings = list() DCNL DCSP check_args(module, warnings) DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP response = response[0].replace((command + '\n\n'), '').strip() DCNL DCSP  DCSP  DCSP body = [json.loads(response)] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('^' == response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('running' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP if (command in response[0]): DCNL DCSP  DCSP  DCSP response = [response[0].split(command)[1]] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP response = response[0].replace((command + '\n\n'), '').strip() DCNL DCSP  DCSP  DCSP body = [json.loads(response)] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def numerical_sort(string_int_list): DCNL  DCSP as_int_list = [] DCNL DCSP as_str_list = [] DCNL DCSP for vlan in string_int_list: DCNL DCSP  DCSP as_int_list.append(int(vlan)) DCNL DCSP as_int_list.sort() DCNL DCSP for vlan in as_int_list: DCNL DCSP  DCSP as_str_list.append(str(vlan)) DCNL DCSP return as_str_list
def get_vlan_config_commands(vlan, vid): DCNL  DCSP reverse_value_map = {'admin_state': {'down': 'shutdown', 'up': 'no DCSP shutdown'}} DCNL DCSP if vlan.get('admin_state'): DCNL DCSP  DCSP vlan = apply_value_map(reverse_value_map, vlan) DCNL DCSP VLAN_ARGS = {'name': 'name DCSP {0}', 'vlan_state': 'state DCSP {0}', 'admin_state': '{0}', 'mode': 'mode DCSP {0}', 'mapped_vni': 'vn-segment DCSP {0}'} DCNL DCSP commands = [] DCNL DCSP for (param, value) in vlan.items(): DCNL DCSP  DCSP if ((param == 'mapped_vni') and (value == 'default')): DCNL DCSP  DCSP  DCSP command = 'no DCSP vn-segment' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP command = VLAN_ARGS.get(param).format(vlan.get(param)) DCNL DCSP  DCSP if command: DCNL DCSP  DCSP  DCSP commands.append(command) DCNL DCSP commands.insert(0, ('vlan DCSP ' + vid)) DCNL DCSP commands.append('exit') DCNL DCSP return commands
def get_vlan(vlanid, module): DCNL  DCSP command = ('show DCSP vlan DCSP id DCSP ' + vlanid) DCNL DCSP body = execute_show_command(command, module) DCNL DCSP try: DCNL DCSP  DCSP vlan_table = body[0]['TABLE_vlanbriefid']['ROW_vlanbriefid'] DCNL DCSP except (TypeError, IndexError): DCNL DCSP  DCSP return {} DCNL DCSP key_map = {'vlanshowbr-vlanid-utf': 'vlan_id', 'vlanshowbr-vlanname': 'name', 'vlanshowbr-vlanstate': 'vlan_state', 'vlanshowbr-shutstate': 'admin_state'} DCNL DCSP vlan = apply_key_map(key_map, vlan_table) DCNL DCSP value_map = {'admin_state': {'shutdown': 'down', 'noshutdown': 'up'}} DCNL DCSP vlan = apply_value_map(value_map, vlan) DCNL DCSP vlan['mapped_vni'] = get_vni(vlanid, module) DCNL DCSP return vlan
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('show DCSP run' in command) or (response[0] == '\n')): DCNL DCSP  DCSP body = response DCNL DCSP elif ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def main(): DCNL  DCSP argument_spec = dict(src=dict(), force=dict(default=False, type='bool'), include_defaults=dict(default=True, type='bool'), backup=dict(default=False, type='bool'), config=dict()) DCNL DCSP mutually_exclusive = [('config', 'backup'), ('config', 'force')] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP result = dict(changed=False) DCNL DCSP candidate = NetworkConfig(contents=module.params['src'], indent=2) DCNL DCSP contents = get_config(module) DCNL DCSP if contents: DCNL DCSP  DCSP config = NetworkConfig(contents=contents, indent=2) DCNL DCSP  DCSP result['_backup'] = str(contents) DCNL DCSP if (not module.params['force']): DCNL DCSP  DCSP commands = candidate.difference(config) DCNL DCSP  DCSP commands = dumps(commands, 'commands').split('\n') DCNL DCSP  DCSP commands = [str(c) for c in commands if c] DCNL DCSP else: DCNL DCSP  DCSP commands = str(candidate).split('\n') DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP response = module.config(commands) DCNL DCSP  DCSP  DCSP result['responses'] = response DCNL DCSP  DCSP result['changed'] = True DCNL DCSP result['updates'] = commands DCNL DCSP module.exit_json(**result)
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('status' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif (('^' in response[0]) or ('show DCSP run' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module, text=False): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n') or ('^' in response[0])): DCNL DCSP  DCSP body = [] DCNL DCSP elif (('show DCSP run' in command) or text): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('show DCSP run' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if isinstance(response[0], str): DCNL DCSP  DCSP  DCSP  DCSP response = response[0].replace((command + '\n\n'), '').strip() DCNL DCSP  DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP body = response DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_cli_body_ssh(command, response, module): DCNL  DCSP if ('xml' in response[0]): DCNL DCSP  DCSP body = [] DCNL DCSP elif (('^' in response[0]) or ('summary' in command)): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def get_interface_type(interface): DCNL  DCSP if interface.upper().startswith('ET'): DCNL DCSP  DCSP return 'ethernet' DCNL DCSP elif interface.upper().startswith('VL'): DCNL DCSP  DCSP return 'svi' DCNL DCSP elif interface.upper().startswith('LO'): DCNL DCSP  DCSP return 'loopback' DCNL DCSP elif interface.upper().startswith('MG'): DCNL DCSP  DCSP return 'management' DCNL DCSP elif interface.upper().startswith('MA'): DCNL DCSP  DCSP return 'management' DCNL DCSP elif interface.upper().startswith('PO'): DCNL DCSP  DCSP return 'portchannel' DCNL DCSP else: DCNL DCSP  DCSP return 'unknown'
def get_interface_mode(interface, module): DCNL  DCSP command = ('show DCSP interface DCSP ' + interface) DCNL DCSP intf_type = get_interface_type(interface) DCNL DCSP body = execute_show_command(command, module) DCNL DCSP mode = 'unknown' DCNL DCSP interface_table = {} DCNL DCSP try: DCNL DCSP  DCSP interface_table = body[0]['TABLE_interface']['ROW_interface'] DCNL DCSP except (KeyError, AttributeError, IndexError): DCNL DCSP  DCSP return mode DCNL DCSP if interface_table: DCNL DCSP  DCSP if (intf_type in ['ethernet', 'portchannel']): DCNL DCSP  DCSP  DCSP mode = str(interface_table.get('eth_mode', 'layer3')) DCNL DCSP  DCSP  DCSP if (mode in ['access', 'trunk']): DCNL DCSP  DCSP  DCSP  DCSP mode = 'layer2' DCNL DCSP  DCSP  DCSP if (mode == 'routed'): DCNL DCSP  DCSP  DCSP  DCSP mode = 'layer3' DCNL DCSP  DCSP elif ((intf_type == 'loopback') or (intf_type == 'svi')): DCNL DCSP  DCSP  DCSP mode = 'layer3' DCNL DCSP return mode
def interface_is_portchannel(interface, module): DCNL  DCSP intf_type = get_interface_type(interface) DCNL DCSP if (intf_type == 'ethernet'): DCNL DCSP  DCSP command = ('show DCSP interface DCSP ' + interface) DCNL DCSP  DCSP body = execute_show_command(command, module) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP interface_table = body[0]['TABLE_interface']['ROW_interface'] DCNL DCSP  DCSP except (KeyError, AttributeError, IndexError): DCNL DCSP  DCSP  DCSP interface_table = None DCNL DCSP  DCSP if interface_table: DCNL DCSP  DCSP  DCSP state = interface_table.get('eth_bundle') DCNL DCSP  DCSP  DCSP if state: DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return False
def get_switchport(port, module): DCNL  DCSP command = 'show DCSP interface DCSP {0} DCSP switchport'.format(port) DCNL DCSP body = execute_show_command(command, module) DCNL DCSP try: DCNL DCSP  DCSP body = execute_show_command(command, module)[0] DCNL DCSP except IndexError: DCNL DCSP  DCSP body = [] DCNL DCSP if body: DCNL DCSP  DCSP key_map = {'interface': 'interface', 'oper_mode': 'mode', 'switchport': 'switchport', 'access_vlan': 'access_vlan', 'access_vlan_name': 'access_vlan_name', 'native_vlan': 'native_vlan', 'native_vlan_name': 'native_vlan_name', 'trunk_vlans': 'trunk_vlans'} DCNL DCSP  DCSP sp_table = body['TABLE_interface']['ROW_interface'] DCNL DCSP  DCSP sp = apply_key_map(key_map, sp_table) DCNL DCSP  DCSP return sp DCNL DCSP else: DCNL DCSP  DCSP return {}
def get_switchport_config_commands(interface, existing, proposed, module): DCNL  DCSP proposed_mode = proposed.get('mode') DCNL DCSP existing_mode = existing.get('mode') DCNL DCSP commands = [] DCNL DCSP command = None DCNL DCSP if (proposed_mode != existing_mode): DCNL DCSP  DCSP if (proposed_mode == 'trunk'): DCNL DCSP  DCSP  DCSP command = 'switchport DCSP mode DCSP trunk' DCNL DCSP  DCSP elif (proposed_mode == 'access'): DCNL DCSP  DCSP  DCSP command = 'switchport DCSP mode DCSP access' DCNL DCSP if command: DCNL DCSP  DCSP commands.append(command) DCNL DCSP if (proposed_mode == 'access'): DCNL DCSP  DCSP av_check = (existing.get('access_vlan') == proposed.get('access_vlan')) DCNL DCSP  DCSP if (not av_check): DCNL DCSP  DCSP  DCSP command = 'switchport DCSP access DCSP vlan DCSP {0}'.format(proposed.get('access_vlan')) DCNL DCSP  DCSP  DCSP commands.append(command) DCNL DCSP elif (proposed_mode == 'trunk'): DCNL DCSP  DCSP tv_check = (existing.get('trunk_vlans_list') == proposed.get('trunk_vlans_list')) DCNL DCSP  DCSP if (not tv_check): DCNL DCSP  DCSP  DCSP if proposed.get('allowed'): DCNL DCSP  DCSP  DCSP  DCSP command = 'switchport DCSP trunk DCSP allowed DCSP vlan DCSP {0}'.format(proposed.get('trunk_allowed_vlans')) DCNL DCSP  DCSP  DCSP  DCSP commands.append(command) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP existing_vlans = existing.get('trunk_vlans_list') DCNL DCSP  DCSP  DCSP  DCSP proposed_vlans = proposed.get('trunk_vlans_list') DCNL DCSP  DCSP  DCSP  DCSP vlans_to_add = set(proposed_vlans).difference(existing_vlans) DCNL DCSP  DCSP  DCSP  DCSP if vlans_to_add: DCNL DCSP  DCSP  DCSP  DCSP  DCSP command = 'switchport DCSP trunk DCSP allowed DCSP vlan DCSP add DCSP {0}'.format(proposed.get('trunk_vlans')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP commands.append(command) DCNL DCSP  DCSP native_check = (existing.get('native_vlan') == proposed.get('native_vlan')) DCNL DCSP  DCSP if ((not native_check) and proposed.get('native_vlan')): DCNL DCSP  DCSP  DCSP command = 'switchport DCSP trunk DCSP native DCSP vlan DCSP {0}'.format(proposed.get('native_vlan')) DCNL DCSP  DCSP  DCSP commands.append(command) DCNL DCSP if commands: DCNL DCSP  DCSP commands.insert(0, ('interface DCSP ' + interface)) DCNL DCSP return commands
def is_switchport_default(existing): DCNL  DCSP c1 = (existing['access_vlan'] == '1') DCNL DCSP c2 = (existing['native_vlan'] == '1') DCNL DCSP c3 = (existing['trunk_vlans'] == '1-4094') DCNL DCSP c4 = (existing['mode'] == 'access') DCNL DCSP default = (c1 and c2 and c3 and c4) DCNL DCSP return default
def numerical_sort(string_int_list): DCNL  DCSP as_int_list = [] DCNL DCSP as_str_list = [] DCNL DCSP for vlan in string_int_list: DCNL DCSP  DCSP as_int_list.append(int(vlan)) DCNL DCSP as_int_list.sort() DCNL DCSP for vlan in as_int_list: DCNL DCSP  DCSP as_str_list.append(str(vlan)) DCNL DCSP return as_str_list
def get_cli_body_ssh(command, response, module): DCNL  DCSP if (('xml' in response[0]) or (response[0] == '\n')): DCNL DCSP  DCSP body = [] DCNL DCSP elif ('status' in command): DCNL DCSP  DCSP body = response DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP body = [json.loads(response[0])] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='Command DCSP does DCSP not DCSP support DCSP JSON DCSP output', command=command) DCNL DCSP return body
def build_desired_iface_config(module): DCNL  DCSP module.custom_desired_config = {'addr_family': None, 'auto': True, 'config': {}, 'name': module.params.get('name')} DCNL DCSP build_addr_method(module) DCNL DCSP build_address(module) DCNL DCSP build_vids(module) DCNL DCSP build_pvid(module) DCNL DCSP build_speed(module) DCNL DCSP build_alias_name(module) DCNL DCSP build_vrr(module) DCNL DCSP for _attr in ['mtu', 'mstpctl_portnetwork', 'mstpctl_portadminedge', 'mstpctl_bpduguard', 'clagd_enable', 'clagd_priority', 'clagd_peer_ip', 'clagd_sys_mac', 'clagd_args']: DCNL DCSP  DCSP build_generic_attr(module, _attr)
def config_dict_changed(module): DCNL  DCSP current_config = module.custom_current_config.get('config') DCNL DCSP desired_config = module.custom_desired_config.get('config') DCNL DCSP return (current_config != desired_config)
def config_changed(module): DCNL  DCSP if config_dict_changed(module): DCNL DCSP  DCSP return True DCNL DCSP return (module.custom_desired_config.get('addr_method') != module.custom_current_config.get('addr_method'))
def add_glob_to_array(_bondmems): DCNL  DCSP result = [] DCNL DCSP if isinstance(_bondmems, list): DCNL DCSP  DCSP for _entry in _bondmems: DCNL DCSP  DCSP  DCSP if re.search('-', _entry): DCNL DCSP  DCSP  DCSP  DCSP _entry = ('glob DCSP ' + _entry) DCNL DCSP  DCSP  DCSP result.append(_entry) DCNL DCSP  DCSP return ' DCSP '.join(result) DCNL DCSP return _bondmems
def build_desired_iface_config(module): DCNL  DCSP module.custom_desired_config = {'addr_family': None, 'auto': True, 'config': {}, 'name': module.params.get('name')} DCNL DCSP for _attr in ['slaves', 'mode', 'xmit_hash_policy', 'miimon', 'lacp_rate', 'lacp_bypass_allow', 'lacp_bypass_period', 'lacp_bypass_all_active', 'min_links']: DCNL DCSP  DCSP build_bond_attr(module, _attr) DCNL DCSP build_addr_method(module) DCNL DCSP build_address(module) DCNL DCSP build_vids(module) DCNL DCSP build_pvid(module) DCNL DCSP build_alias_name(module) DCNL DCSP build_vrr(module) DCNL DCSP for _attr in ['mtu', 'mstpctl_portnetwork', 'mstpctl_portadminedgemstpctl_bpduguard', 'clag_id', 'lacp_bypass_priority']: DCNL DCSP  DCSP build_generic_attr(module, _attr)
def config_dict_changed(module): DCNL  DCSP current_config = module.custom_current_config.get('config') DCNL DCSP desired_config = module.custom_desired_config.get('config') DCNL DCSP return (current_config != desired_config)
def config_changed(module): DCNL  DCSP if config_dict_changed(module): DCNL DCSP  DCSP return True DCNL DCSP return (module.custom_desired_config.get('addr_method') != module.custom_current_config.get('addr_method'))
def add_glob_to_array(_bridgemems): DCNL  DCSP result = [] DCNL DCSP if isinstance(_bridgemems, list): DCNL DCSP  DCSP for _entry in _bridgemems: DCNL DCSP  DCSP  DCSP if re.search('-', _entry): DCNL DCSP  DCSP  DCSP  DCSP _entry = ('glob DCSP ' + _entry) DCNL DCSP  DCSP  DCSP result.append(_entry) DCNL DCSP  DCSP return ' DCSP '.join(result) DCNL DCSP return _bridgemems
def build_desired_iface_config(module): DCNL  DCSP module.custom_desired_config = {'addr_family': None, 'auto': True, 'config': {}, 'name': module.params.get('name')} DCNL DCSP for _attr in ['vlan_aware', 'pvid', 'ports', 'stp']: DCNL DCSP  DCSP build_bridge_attr(module, _attr) DCNL DCSP build_addr_method(module) DCNL DCSP build_address(module) DCNL DCSP build_vids(module) DCNL DCSP build_alias_name(module) DCNL DCSP build_vrr(module) DCNL DCSP for _attr in ['mtu', 'mstpctl_treeprio']: DCNL DCSP  DCSP build_generic_attr(module, _attr)
def config_dict_changed(module): DCNL  DCSP current_config = module.custom_current_config.get('config') DCNL DCSP desired_config = module.custom_desired_config.get('config') DCNL DCSP return (current_config != desired_config)
def config_changed(module): DCNL  DCSP if config_dict_changed(module): DCNL DCSP  DCSP return True DCNL DCSP return (module.custom_desired_config.get('addr_method') != module.custom_current_config.get('addr_method'))
def write_to_ports_conf(module): DCNL  DCSP temp = tempfile.NamedTemporaryFile() DCNL DCSP try: DCNL DCSP  DCSP temp.write('# DCSP Managed DCSP By DCSP Ansible\n') DCNL DCSP  DCSP for k in sorted(module.ports_conf_hash.keys()): DCNL DCSP  DCSP  DCSP port_setting = module.ports_conf_hash[k] DCNL DCSP  DCSP  DCSP _str = ('%s=%s\n' % (k, port_setting)) DCNL DCSP  DCSP  DCSP temp.write(_str) DCNL DCSP  DCSP temp.seek(0) DCNL DCSP  DCSP shutil.copyfile(temp.name, PORTS_CONF) DCNL DCSP except IOError: DCNL DCSP  DCSP error_msg = get_exception() DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP write DCSP to DCSP %s: DCSP %s' % (PORTS_CONF, error_msg))) DCNL DCSP finally: DCNL DCSP  DCSP temp.close()
def main(): DCNL  DCSP spec = dict(config=dict(type='bool'), config_format=dict(default='text', choices=['xml', 'text']), transport=dict(default='netconf', choices=['netconf'])) DCNL DCSP module = NetworkModule(argument_spec=spec, supports_check_mode=True) DCNL DCSP result = dict(changed=False) DCNL DCSP facts = module.connection.get_facts() DCNL DCSP if ('2RE' in facts): DCNL DCSP  DCSP facts['has_2RE'] = facts['2RE'] DCNL DCSP  DCSP del facts['2RE'] DCNL DCSP facts['version_info'] = dict(facts['version_info']) DCNL DCSP if (module.params['config'] is True): DCNL DCSP  DCSP config_format = module.params['config_format'] DCNL DCSP  DCSP resp_config = module.config.get_config(config_format=config_format) DCNL DCSP  DCSP if (config_format in ['text']): DCNL DCSP  DCSP  DCSP facts['config'] = resp_config DCNL DCSP  DCSP elif (config_format == 'xml'): DCNL DCSP  DCSP  DCSP facts['config'] = xml_to_string(resp_config) DCNL DCSP  DCSP  DCSP facts['config_json'] = xml_to_json(resp_config) DCNL DCSP result['ansible_facts'] = facts DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(lines=dict(type='list'), src=dict(type='path'), src_format=dict(choices=['xml', 'text', 'set', 'json']), update=dict(default='merge', choices=['merge', 'overwrite', 'replace']), replace=dict(default=False, type='bool'), confirm=dict(default=0, type='int'), comment=dict(default=DEFAULT_COMMENT), backup=dict(type='bool', default=False), rollback=dict(type='int'), zeroize=dict(default=False, type='bool'), transport=dict(default='netconf', choices=['netconf'])) DCNL DCSP mutually_exclusive = [('lines', 'rollback'), ('lines', 'zeroize'), ('rollback', 'zeroize'), ('lines', 'src'), ('src', 'zeroize'), ('src', 'rollback'), ('update', 'replace')] DCNL DCSP required_if = [('replace', True, ['src']), ('update', 'merge', ['src']), ('update', 'overwrite', ['src']), ('update', 'replace', ['src'])] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP result = dict(changed=False) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP spec = dict(commands=dict(type='list'), rpcs=dict(type='list'), display=dict(default='xml', choices=['text', 'xml', 'json'], aliases=['format', 'output']), wait_for=dict(type='list', aliases=['waitfor']), match=dict(default='all', choices=['all', 'any']), retries=dict(default=10, type='int'), interval=dict(default=1, type='int'), transport=dict(default='netconf', choices=['netconf'])) DCNL DCSP mutually_exclusive = [('commands', 'rpcs')] DCNL DCSP module = NetworkModule(argument_spec=spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP commands = list() DCNL DCSP for key in VALID_KEYS.keys(): DCNL DCSP  DCSP commands.extend(list(parse(module, key))) DCNL DCSP conditionals = (module.params['wait_for'] or list()) DCNL DCSP warnings = list() DCNL DCSP runner = CommandRunner(module) DCNL DCSP for cmd in commands: DCNL DCSP  DCSP if (module.check_mode and (not cmd['command'].startswith('show'))): DCNL DCSP  DCSP  DCSP warnings.append(('only DCSP show DCSP commands DCSP are DCSP supported DCSP when DCSP using DCSP check DCSP mode, DCSP not DCSP executing DCSP `%s`' % cmd['command'])) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if cmd['command'].startswith('co'): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='junos_command DCSP does DCSP not DCSP support DCSP running DCSP config DCSP mode DCSP commands. DCSP  DCSP Please DCSP use DCSP junos_config DCSP instead') DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP runner.add_command(**cmd) DCNL DCSP  DCSP  DCSP except AddCommandError: DCNL DCSP  DCSP  DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP  DCSP  DCSP warnings.append(('duplicate DCSP command DCSP detected: DCSP %s' % cmd)) DCNL DCSP try: DCNL DCSP  DCSP for item in conditionals: DCNL DCSP  DCSP  DCSP runner.add_conditional(item) DCNL DCSP except (ValueError, AddConditionError): DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), condition=exc.condition) DCNL DCSP runner.retries = module.params['retries'] DCNL DCSP runner.interval = module.params['interval'] DCNL DCSP runner.match = module.params['match'] DCNL DCSP try: DCNL DCSP  DCSP runner.run() DCNL DCSP except FailedConditionsError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), failed_conditions=exc.failed_conditions) DCNL DCSP except FailedConditionalError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), failed_conditional=exc.failed_conditional) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc)) DCNL DCSP result = dict(changed=False, stdout=list()) DCNL DCSP for cmd in commands: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP output = runner.get_command(cmd['command'], cmd.get('output')) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP output = 'command DCSP not DCSP executed DCSP due DCSP to DCSP check_mode, DCSP see DCSP warnings' DCNL DCSP  DCSP result['stdout'].append(output) DCNL DCSP result['warnings'] = warnings DCNL DCSP result['stdout_lines'] = list(to_lines(result['stdout'])) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(netconf_port=dict(type='int', default=830, aliases=['listens_on']), state=dict(default='present', choices=['present', 'absent']), transport=dict(default='cli', choices=['cli'])) DCNL DCSP module = NetworkModule(argument_spec=argument_spec, supports_check_mode=True) DCNL DCSP state = module.params['state'] DCNL DCSP port = module.params['netconf_port'] DCNL DCSP result = dict(changed=False) DCNL DCSP instance = get_instance(module) DCNL DCSP if ((state == 'present') and (instance.get('state') == 'absent')): DCNL DCSP  DCSP commands = ('set DCSP system DCSP services DCSP netconf DCSP ssh DCSP port DCSP %s' % port) DCNL DCSP elif ((state == 'present') and (port != instance.get('port'))): DCNL DCSP  DCSP commands = ('set DCSP system DCSP services DCSP netconf DCSP ssh DCSP port DCSP %s' % port) DCNL DCSP elif ((state == 'absent') and (instance.get('state') == 'present')): DCNL DCSP  DCSP commands = 'delete DCSP system DCSP services DCSP netconf' DCNL DCSP else: DCNL DCSP  DCSP commands = None DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP comment = 'configuration DCSP updated DCSP by DCSP junos_netconf' DCNL DCSP  DCSP  DCSP  DCSP module.config(commands, comment=comment) DCNL DCSP  DCSP  DCSP except NetworkError: DCNL DCSP  DCSP  DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP  DCSP result['changed'] = True DCNL DCSP  DCSP result['commands'] = commands DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), before=dict(type='list'), after=dict(type='list'), match=dict(default='line', choices=['line', 'strict', 'exact', 'none']), replace=dict(default='line', choices=['line', 'block']), multiline_delimiter=dict(default='@'), force=dict(default=False, type='bool'), config=dict(), defaults=dict(type='bool', default=False), backup=dict(type='bool', default=False), save=dict(type='bool', default=False)) DCNL DCSP argument_spec.update(_transitional_argument_spec()) DCNL DCSP mutually_exclusive = [('lines', 'src')] DCNL DCSP required_if = [('match', 'strict', ['lines']), ('match', 'exact', ['lines']), ('replace', 'block', ['lines'])] DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP if (module.params['force'] is True): DCNL DCSP  DCSP module.params['match'] = 'none' DCNL DCSP warnings = list() DCNL DCSP check_args(module, warnings) DCNL DCSP result = {'changed': False, 'warnings': warnings} DCNL DCSP if any((module.params['lines'], module.params['src'])): DCNL DCSP  DCSP match = module.params['match'] DCNL DCSP  DCSP replace = module.params['replace'] DCNL DCSP  DCSP path = module.params['parents'] DCNL DCSP  DCSP (candidate, want_banners) = get_candidate(module) DCNL DCSP  DCSP if (match != 'none'): DCNL DCSP  DCSP  DCSP (config, have_banners) = get_running_config(module) DCNL DCSP  DCSP  DCSP path = module.params['parents'] DCNL DCSP  DCSP  DCSP configobjs = candidate.difference(config, path=path, match=match, replace=replace) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP configobjs = candidate.items DCNL DCSP  DCSP  DCSP have_banners = {} DCNL DCSP  DCSP banners = diff_banners(want_banners, have_banners) DCNL DCSP  DCSP if (configobjs or banners): DCNL DCSP  DCSP  DCSP commands = dumps(configobjs, 'commands').split('\n') DCNL DCSP  DCSP  DCSP if module.params['lines']: DCNL DCSP  DCSP  DCSP  DCSP if module.params['before']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP commands[:0] = module.params['before'] DCNL DCSP  DCSP  DCSP  DCSP if module.params['after']: DCNL DCSP  DCSP  DCSP  DCSP  DCSP commands.extend(module.params['after']) DCNL DCSP  DCSP  DCSP result['updates'] = commands DCNL DCSP  DCSP  DCSP result['banners'] = banners DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP if commands: DCNL DCSP  DCSP  DCSP  DCSP  DCSP load_config(module, commands) DCNL DCSP  DCSP  DCSP  DCSP if banners: DCNL DCSP  DCSP  DCSP  DCSP  DCSP load_banners(module, banners) DCNL DCSP  DCSP  DCSP result['changed'] = True DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = get_config(module=module) DCNL DCSP if module.params['save']: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP run_commands(module, ['copy DCSP running-config DCSP startup-config']) DCNL DCSP  DCSP result['changed'] = True DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(vrfs=dict(type='list'), name=dict(), description=dict(), rd=dict(), interfaces=dict(type='list'), purge=dict(type='bool', default=False), state=dict(default='present', choices=['present', 'absent'])) DCNL DCSP mutually_exclusive = [('name', 'vrfs')] DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP result = {'changed': False} DCNL DCSP want = map_params_to_obj(module) DCNL DCSP have = map_config_to_obj(module) DCNL DCSP commands = map_obj_to_commands(update_objects(want, have), module) DCNL DCSP if module.params['purge']: DCNL DCSP  DCSP want_vrfs = [x['name'] for x in want] DCNL DCSP  DCSP have_vrfs = [x['name'] for x in have] DCNL DCSP  DCSP for item in set(have_vrfs).difference(want_vrfs): DCNL DCSP  DCSP  DCSP cmd = ('no DCSP vrf DCSP definition DCSP %s' % item) DCNL DCSP  DCSP  DCSP if (cmd not in commands): DCNL DCSP  DCSP  DCSP  DCSP commands.append(cmd) DCNL DCSP result['commands'] = commands DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP load_config(module, commands) DCNL DCSP  DCSP result['changed'] = True DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(), force=dict(default=False, type='bool'), include_defaults=dict(default=True, type='bool'), backup=dict(default=False, type='bool'), config=dict()) DCNL DCSP argument_spec.update(_transitional_argument_spec()) DCNL DCSP mutually_exclusive = [('config', 'backup'), ('config', 'force')] DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP warnings = check_args(module) DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP candidate = NetworkConfig(contents=module.params['src'], indent=1) DCNL DCSP result = {'changed': False} DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = get_config(module=module) DCNL DCSP if (not module.params['force']): DCNL DCSP  DCSP contents = get_current_config(module) DCNL DCSP  DCSP configobj = NetworkConfig(contents=contents, indent=1) DCNL DCSP  DCSP commands = candidate.difference(configobj) DCNL DCSP  DCSP commands = dumps(commands, 'commands').split('\n') DCNL DCSP  DCSP commands = [str(c).strip() for c in commands if c] DCNL DCSP else: DCNL DCSP  DCSP commands = [c.strip() for c in str(candidate).split('\n')] DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP load_config(module, commands) DCNL DCSP  DCSP result['changed'] = True DCNL DCSP result['updates'] = commands DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(hostname=dict(), domain_name=dict(type='list'), domain_search=dict(type='list'), name_servers=dict(type='list'), lookup_source=dict(), lookup_enabled=dict(type='bool'), state=dict(choices=['present', 'absent'], default='present')) DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, supports_check_mode=True) DCNL DCSP result = {'changed': False} DCNL DCSP want = map_params_to_obj(module) DCNL DCSP have = map_config_to_obj(module) DCNL DCSP commands = map_obj_to_commands(want, have, module) DCNL DCSP result['commands'] = commands DCNL DCSP if commands: DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP load_config(module, commands) DCNL DCSP  DCSP result['changed'] = True DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='str'), force=dict(default=False, type='bool'), backup=dict(default=False, type='bool'), config=dict(type='dict')) DCNL DCSP mutually_exclusive = [('config', 'backup'), ('config', 'force')] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP if ((not module.params['transport']) and (not HAS_OPS)): DCNL DCSP  DCSP module.fail_json(msg='unable DCSP to DCSP import DCSP ops.dc DCSP library') DCNL DCSP result = dict(changed=False) DCNL DCSP contents = get_config(module) DCNL DCSP result['_backup'] = contents DCNL DCSP if (module.params['transport'] in ['ssh', 'rest']): DCNL DCSP  DCSP config = contents DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP src = module.from_json(module.params['src']) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='unable DCSP to DCSP load DCSP src DCSP due DCSP to DCSP json DCSP parsing DCSP error') DCNL DCSP  DCSP changeset = diff(src, config) DCNL DCSP  DCSP candidate = merge(changeset, config) DCNL DCSP  DCSP updates = dict() DCNL DCSP  DCSP for (path, key, new_value, old_value) in changeset: DCNL DCSP  DCSP  DCSP path = ('%s.%s' % ('.'.join(path), key)) DCNL DCSP  DCSP  DCSP updates[path] = str(new_value) DCNL DCSP  DCSP result['updates'] = updates DCNL DCSP  DCSP if changeset: DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP module.config(config) DCNL DCSP  DCSP  DCSP result['changed'] = True DCNL DCSP else: DCNL DCSP  DCSP candidate = NetworkConfig(contents=module.params['src'], indent=4) DCNL DCSP  DCSP if contents: DCNL DCSP  DCSP  DCSP config = NetworkConfig(contents=contents, indent=4) DCNL DCSP  DCSP if (not module.params['force']): DCNL DCSP  DCSP  DCSP commands = candidate.difference(config) DCNL DCSP  DCSP  DCSP commands = dumps(commands, 'commands').split('\n') DCNL DCSP  DCSP  DCSP commands = [str(c) for c in commands if c] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP commands = str(candidate).split('\n') DCNL DCSP  DCSP if commands: DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP response = module.config(commands) DCNL DCSP  DCSP  DCSP  DCSP result['responses'] = response DCNL DCSP  DCSP  DCSP result['changed'] = True DCNL DCSP  DCSP result['updates'] = commands DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(), force=dict(default=False, type='bool'), backup=dict(default=False, type='bool'), config=dict()) DCNL DCSP argument_spec.update(_transitional_argument_spec()) DCNL DCSP mutually_exclusive = [('config', 'backup'), ('config', 'force')] DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, mutually_exclusive=mutually_exclusive, supports_check_mode=True) DCNL DCSP warnings = check_args(module) DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP candidate = NetworkConfig(contents=module.params['src'], indent=1) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = get_config(module) DCNL DCSP if (not module.params['force']): DCNL DCSP  DCSP contents = get_config(module) DCNL DCSP  DCSP configobj = NetworkConfig(contents=contents, indent=1) DCNL DCSP  DCSP commands = candidate.difference(configobj) DCNL DCSP  DCSP commands = dumps(commands, 'commands').split('\n') DCNL DCSP  DCSP commands = [str(c).strip() for c in commands if c] DCNL DCSP else: DCNL DCSP  DCSP commands = [c.strip() for c in str(candidate).split('\n')] DCNL DCSP if commands: DCNL DCSP  DCSP load_config(module, commands, (not module.check_mode)) DCNL DCSP  DCSP result['changed'] = (not module.check_mode) DCNL DCSP result['updates'] = commands DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(src=dict(type='path'), lines=dict(aliases=['commands'], type='list'), parents=dict(type='list'), before=dict(type='list'), after=dict(type='list'), match=dict(default='line', choices=['line', 'strict', 'exact', 'none']), replace=dict(default='line', choices=['line', 'block', 'config']), force=dict(default=False, type='bool'), config=dict(), backup=dict(type='bool', default=False), comment=dict(default=DEFAULT_COMMIT_COMMENT)) DCNL DCSP mutually_exclusive = [('lines', 'src')] DCNL DCSP required_if = [('match', 'strict', ['lines']), ('match', 'exact', ['lines']), ('replace', 'block', ['lines']), ('replace', 'config', ['src'])] DCNL DCSP module = NetworkModule(argument_spec=argument_spec, connect_on_load=False, mutually_exclusive=mutually_exclusive, required_if=required_if, supports_check_mode=True) DCNL DCSP if (module.params['force'] is True): DCNL DCSP  DCSP module.params['match'] = 'none' DCNL DCSP warnings = list() DCNL DCSP check_args(module, warnings) DCNL DCSP result = dict(changed=False, warnings=warnings) DCNL DCSP if module.params['backup']: DCNL DCSP  DCSP result['__backup__'] = module.config.get_config() DCNL DCSP try: DCNL DCSP  DCSP run(module, result) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP module.exit_json(**result)
def main(): DCNL  DCSP argument_spec = dict(hostname=dict(), domain_name=dict(), domain_search=dict(type='list'), name_servers=dict(type='list'), lookup_source=dict(), lookup_enabled=dict(type='bool'), state=dict(choices=['present', 'absent'], default='present')) DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, supports_check_mode=True) DCNL DCSP result = {'changed': False} DCNL DCSP want = map_params_to_obj(module) DCNL DCSP have = map_config_to_obj(module) DCNL DCSP commands = map_obj_to_commands(want, have, module) DCNL DCSP result['commands'] = commands DCNL DCSP if commands: DCNL DCSP  DCSP commit = (not module.check_mode) DCNL DCSP  DCSP response = load_config(module, commands, commit=commit) DCNL DCSP  DCSP if (response.get('diff') and module._diff): DCNL DCSP  DCSP  DCSP result['diff'] = {'prepared': response.get('diff')} DCNL DCSP  DCSP result['changed'] = True DCNL DCSP module.exit_json(**result)
def cmd_run(module, cmd, check_rc=True): DCNL  DCSP return module.run_command(cmd.split(' DCSP '), check_rc=check_rc)
def params_set(module): DCNL  DCSP changed = False DCNL DCSP module.params['ovs-vsctl'] = module.get_bin_path('ovs-vsctl', True) DCNL DCSP fmt = '%(ovs-vsctl)s DCSP -t DCSP %(timeout)s DCSP get DCSP %(table)s DCSP %(record)s DCSP %(col)s:%(key)s' DCNL DCSP cmd = (fmt % module.params) DCNL DCSP (_, output, _) = cmd_run(module, cmd, False) DCNL DCSP if (module.params['value'] not in output): DCNL DCSP  DCSP fmt = '%(ovs-vsctl)s DCSP -t DCSP %(timeout)s DCSP set DCSP %(table)s DCSP %(record)s DCSP %(col)s:%(key)s=%(value)s' DCNL DCSP  DCSP cmd = (fmt % module.params) DCNL DCSP  DCSP (rtc, _, err) = cmd_run(module, cmd) DCNL DCSP  DCSP if (rtc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=err) DCNL DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec={'table': {'required': True}, 'record': {'required': True}, 'col': {'required': True}, 'key': {'required': True}, 'value': {'required': True}, 'timeout': {'default': 5, 'type': 'int'}}, supports_check_mode=True) DCNL DCSP params_set(module)
def truncate_before(value, srch): DCNL  DCSP before_index = value.find(srch) DCNL DCSP if (before_index >= 0): DCNL DCSP  DCSP return value[:before_index] DCNL DCSP else: DCNL DCSP  DCSP return value
def _set_to_get(set_cmd, module): DCNL  DCSP set_cmd = truncate_before(set_cmd, ' DCSP option:') DCNL DCSP get_cmd = set_cmd.split(' DCSP ') DCNL DCSP (key, value) = get_cmd[(-1)].split('=') DCNL DCSP module.log(('get DCSP commands DCSP %s DCSP ' % key)) DCNL DCSP return (((['--', 'get'] + get_cmd[:(-1)]) + [key]), value)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec={'bridge': {'required': True}, 'port': {'required': True}, 'tag': {'required': False}, 'state': {'default': 'present', 'choices': ['present', 'absent']}, 'timeout': {'default': 5, 'type': 'int'}, 'set': {'required': False, 'default': None}, 'external_ids': {'default': {}, 'required': False, 'type': 'dict'}}, supports_check_mode=True) DCNL DCSP port = OVSPort(module) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP port.check() DCNL DCSP else: DCNL DCSP  DCSP port.run()
def truncate_before(value, srch): DCNL  DCSP before_index = value.find(srch) DCNL DCSP if (before_index >= 0): DCNL DCSP  DCSP return value[:before_index] DCNL DCSP else: DCNL DCSP  DCSP return value
def _set_to_get(set_cmd, module): DCNL  DCSP set_cmd = truncate_before(set_cmd, ' DCSP option:') DCNL DCSP get_cmd = set_cmd.split(' DCSP ') DCNL DCSP (key, value) = get_cmd[(-1)].split('=') DCNL DCSP module.log(('get DCSP commands DCSP %s DCSP ' % key)) DCNL DCSP return (((['--', 'get'] + get_cmd[:(-1)]) + [key]), value)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec={'bridge': {'required': True}, 'parent': {'default': None}, 'vlan': {'default': None, 'type': 'int'}, 'state': {'default': 'present', 'choices': ['present', 'absent']}, 'timeout': {'default': 5, 'type': 'int'}, 'external_ids': {'default': None, 'type': 'dict'}, 'fail_mode': {'default': None}, 'set': {'required': False, 'default': None}}, supports_check_mode=True) DCNL DCSP bridge = OVSBridge(module) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP bridge.check() DCNL DCSP else: DCNL DCSP  DCSP bridge.run()
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if cliswitch: DCNL DCSP  DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP command = module.params['pn_command'] DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s: DCSP ' % command), stderr=err.strip(), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s: DCSP ' % command), stdout=out.strip(), changed=False) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=cli, msg=('%s: DCSP Nothing DCSP to DCSP display!!!' % command), changed=False)
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=True, type='str'), pn_clipassword=dict(required=True, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str'), pn_command=dict(required=True, type='str'), pn_parameters=dict(default='all', type='str'), pn_options=dict(type='str'))) DCNL DCSP command = module.params['pn_command'] DCNL DCSP parameters = module.params['pn_parameters'] DCNL DCSP options = module.params['pn_options'] DCNL DCSP cli = pn_cli(module) DCNL DCSP cli += (' DCSP %s DCSP format DCSP %s DCSP ' % (command, parameters)) DCNL DCSP if options: DCNL DCSP  DCSP cli += options DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP interface_ip = module.params['pn_interface_ip'] DCNL DCSP global VROUTER_EXISTS, LB_INTERFACE_EXISTS DCNL DCSP check_vrouter = (cli + ' DCSP vrouter-show DCSP format DCSP name DCSP no-show-headers DCSP ') DCNL DCSP check_vrouter = shlex.split(check_vrouter) DCNL DCSP out = module.run_command(check_vrouter)[1] DCNL DCSP out = out.split() DCNL DCSP if (vrouter_name in out): DCNL DCSP  DCSP VROUTER_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_EXISTS = False DCNL DCSP show = (cli + (' DCSP vrouter-loopback-interface-show DCSP vrouter-name DCSP %s DCSP format DCSP ip DCSP no-show-headers' % vrouter_name)) DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP if (interface_ip in out): DCNL DCSP  DCSP LB_INTERFACE_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP LB_INTERFACE_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-loopback-interface-add' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-loopback-interface-remove' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent']), pn_vrouter_name=dict(required=True, type='str'), pn_interface_ip=dict(type='str'), pn_index=dict(type='int')), required_if=(['state', 'present', ['pn_vrouter_name', 'pn_interface_ip']], ['state', 'absent', ['pn_vrouter_name', 'pn_interface_ip']])) DCNL DCSP state = module.params['state'] DCNL DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP interface_ip = module.params['pn_interface_ip'] DCNL DCSP index = module.params['pn_index'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if index: DCNL DCSP  DCSP if (not (MIN_INDEX <= index <= MAX_INDEX)): DCNL DCSP  DCSP  DCSP module.exit_json(msg='Index DCSP must DCSP be DCSP between DCSP 1 DCSP and DCSP 255', changed=False) DCNL DCSP  DCSP index = str(index) DCNL DCSP if (command == 'vrouter-loopback-interface-remove'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (LB_INTERFACE_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Loopback DCSP interface DCSP with DCSP IP DCSP %s DCSP does DCSP not DCSP exist DCSP on DCSP %s' % (interface_ip, vrouter_name))) DCNL DCSP  DCSP if (not index): DCNL DCSP  DCSP  DCSP get_index = cli DCNL DCSP  DCSP  DCSP get_index += (' DCSP vrouter-loopback-interface-show DCSP vrouter-name DCSP %s DCSP ip DCSP %s DCSP ' % (vrouter_name, interface_ip)) DCNL DCSP  DCSP  DCSP get_index += 'format DCSP index DCSP no-show-headers' DCNL DCSP  DCSP  DCSP get_index = shlex.split(get_index) DCNL DCSP  DCSP  DCSP out = module.run_command(get_index)[1] DCNL DCSP  DCSP  DCSP index = out.split()[1] DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP index DCSP %s' % (command, vrouter_name, index)) DCNL DCSP if (command == 'vrouter-loopback-interface-add'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (LB_INTERFACE_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Loopback DCSP interface DCSP with DCSP IP DCSP %s DCSP already DCSP exists DCSP on DCSP %s' % (interface_ip, vrouter_name))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP ip DCSP %s' % (command, vrouter_name, interface_ip)) DCNL DCSP  DCSP if index: DCNL DCSP  DCSP  DCSP cli += (' DCSP index DCSP %s DCSP ' % index) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP name = module.params['pn_name'] DCNL DCSP global VROUTER_EXISTS, VROUTER_NAME_EXISTS DCNL DCSP location = (cli + ' DCSP switch-setup-show DCSP format DCSP switch-name') DCNL DCSP location = shlex.split(location) DCNL DCSP out = module.run_command(location)[1] DCNL DCSP location = out.split()[1] DCNL DCSP check_vrouter = (cli + (' DCSP vrouter-show DCSP location DCSP %s DCSP ' % location)) DCNL DCSP check_vrouter += 'format DCSP name DCSP no-show-headers' DCNL DCSP check_vrouter = shlex.split(check_vrouter) DCNL DCSP out = module.run_command(check_vrouter)[1] DCNL DCSP if out: DCNL DCSP  DCSP VROUTER_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_EXISTS = False DCNL DCSP show = (cli + ' DCSP vrouter-show DCSP format DCSP name DCSP no-show-headers DCSP ') DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP if (name in out): DCNL DCSP  DCSP VROUTER_NAME_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_NAME_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-create' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-delete' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'vrouter-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent', 'update']), pn_name=dict(required=True, type='str'), pn_vnet=dict(type='str'), pn_service_type=dict(type='str', choices=['dedicated', 'shared']), pn_service_state=dict(type='str', choices=['enable', 'disable']), pn_router_type=dict(type='str', choices=['hardware', 'software']), pn_hw_vrrp_id=dict(type='int'), pn_router_id=dict(type='str'), pn_bgp_as=dict(type='int'), pn_bgp_redistribute=dict(type='str', choices=['static', 'connected', 'rip', 'ospf']), pn_bgp_max_paths=dict(type='int'), pn_bgp_options=dict(type='str'), pn_rip_redistribute=dict(type='str', choices=['static', 'connected', 'bgp', 'ospf']), pn_ospf_redistribute=dict(type='str', choices=['static', 'connected', 'bgp', 'rip']), pn_ospf_options=dict(type='str'), pn_vrrp_track_port=dict(type='str')), required_if=(['state', 'present', ['pn_name', 'pn_vnet']], ['state', 'absent', ['pn_name']], ['state', 'update', ['pn_name']])) DCNL DCSP state = module.params['state'] DCNL DCSP name = module.params['pn_name'] DCNL DCSP vnet = module.params['pn_vnet'] DCNL DCSP service_type = module.params['pn_service_type'] DCNL DCSP service_state = module.params['pn_service_state'] DCNL DCSP router_type = module.params['pn_router_type'] DCNL DCSP hw_vrrp_id = module.params['pn_hw_vrrp_id'] DCNL DCSP router_id = module.params['pn_router_id'] DCNL DCSP bgp_as = module.params['pn_bgp_as'] DCNL DCSP bgp_redistribute = module.params['pn_bgp_redistribute'] DCNL DCSP bgp_max_paths = module.params['pn_bgp_max_paths'] DCNL DCSP bgp_options = module.params['pn_bgp_options'] DCNL DCSP rip_redistribute = module.params['pn_rip_redistribute'] DCNL DCSP ospf_redistribute = module.params['pn_ospf_redistribute'] DCNL DCSP ospf_options = module.params['pn_ospf_options'] DCNL DCSP vrrp_track_port = module.params['pn_vrrp_track_port'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if (command == 'vrouter-delete'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VROUTER_NAME_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP with DCSP name DCSP %s DCSP does DCSP not DCSP exist' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP else: DCNL DCSP  DCSP if (command == 'vrouter-create'): DCNL DCSP  DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP  DCSP if (VROUTER_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg='Maximum DCSP number DCSP of DCSP vRouters DCSP has DCSP been DCSP reached DCSP on DCSP this DCSP switch') DCNL DCSP  DCSP  DCSP if (VROUTER_NAME_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP with DCSP name DCSP %s DCSP already DCSP exists' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP  DCSP if vnet: DCNL DCSP  DCSP  DCSP cli += (' DCSP vnet DCSP ' + vnet) DCNL DCSP  DCSP if service_type: DCNL DCSP  DCSP  DCSP cli += (' DCSP %s-vnet-service DCSP ' % service_type) DCNL DCSP  DCSP if service_state: DCNL DCSP  DCSP  DCSP cli += (' DCSP ' + service_state) DCNL DCSP  DCSP if router_type: DCNL DCSP  DCSP  DCSP cli += (' DCSP router-type DCSP ' + router_type) DCNL DCSP  DCSP if hw_vrrp_id: DCNL DCSP  DCSP  DCSP cli += (' DCSP hw-vrrp-id DCSP ' + str(hw_vrrp_id)) DCNL DCSP  DCSP if router_id: DCNL DCSP  DCSP  DCSP cli += (' DCSP router-id DCSP ' + router_id) DCNL DCSP  DCSP if bgp_as: DCNL DCSP  DCSP  DCSP cli += (' DCSP bgp-as DCSP ' + str(bgp_as)) DCNL DCSP  DCSP if bgp_redistribute: DCNL DCSP  DCSP  DCSP cli += (' DCSP bgp-redistribute DCSP ' + bgp_redistribute) DCNL DCSP  DCSP if bgp_max_paths: DCNL DCSP  DCSP  DCSP cli += (' DCSP bgp-max-paths DCSP ' + str(bgp_max_paths)) DCNL DCSP  DCSP if bgp_options: DCNL DCSP  DCSP  DCSP cli += (' DCSP %s DCSP ' % bgp_options) DCNL DCSP  DCSP if rip_redistribute: DCNL DCSP  DCSP  DCSP cli += (' DCSP rip-redistribute DCSP ' + rip_redistribute) DCNL DCSP  DCSP if ospf_redistribute: DCNL DCSP  DCSP  DCSP cli += (' DCSP ospf-redistribute DCSP ' + ospf_redistribute) DCNL DCSP  DCSP if ospf_options: DCNL DCSP  DCSP  DCSP cli += (' DCSP %s DCSP ' % ospf_options) DCNL DCSP  DCSP if vrrp_track_port: DCNL DCSP  DCSP  DCSP cli += (' DCSP vrrp-track-port DCSP ' + vrrp_track_port) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP interface_ip = module.params['pn_interface_ip'] DCNL DCSP nic_str = module.params['pn_nic_str'] DCNL DCSP global VROUTER_EXISTS, INTERFACE_EXISTS, NIC_EXISTS DCNL DCSP check_vrouter = (cli + ' DCSP vrouter-show DCSP format DCSP name DCSP no-show-headers DCSP ') DCNL DCSP check_vrouter = shlex.split(check_vrouter) DCNL DCSP out = module.run_command(check_vrouter)[1] DCNL DCSP out = out.split() DCNL DCSP if (vrouter_name in out): DCNL DCSP  DCSP VROUTER_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_EXISTS = False DCNL DCSP if interface_ip: DCNL DCSP  DCSP show = (cli + (' DCSP vrouter-interface-show DCSP vrouter-name DCSP %s DCSP ' % vrouter_name)) DCNL DCSP  DCSP show += ('ip DCSP %s DCSP format DCSP ip,nic DCSP no-show-headers' % interface_ip) DCNL DCSP  DCSP show = shlex.split(show) DCNL DCSP  DCSP out = module.run_command(show)[1] DCNL DCSP  DCSP if out: DCNL DCSP  DCSP  DCSP INTERFACE_EXISTS = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP INTERFACE_EXISTS = False DCNL DCSP if nic_str: DCNL DCSP  DCSP show = (cli + (' DCSP vrouter-interface-show DCSP vrouter-name DCSP %s DCSP ' % vrouter_name)) DCNL DCSP  DCSP show += ' DCSP format DCSP nic DCSP no-show-headers' DCNL DCSP  DCSP show = shlex.split(show) DCNL DCSP  DCSP out = module.run_command(show)[1] DCNL DCSP  DCSP if (nic_str in out): DCNL DCSP  DCSP  DCSP NIC_EXISTS = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP NIC_EXISTS = False
def get_nic(module, cli): DCNL  DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP interface_ip = module.params['pn_interface_ip'] DCNL DCSP global VRRP_EXISTS DCNL DCSP show = (cli + (' DCSP vrouter-interface-show DCSP vrouter-name DCSP %s DCSP ' % vrouter_name)) DCNL DCSP show += ('ip DCSP %s DCSP format DCSP ip,nic DCSP no-show-headers' % interface_ip) DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP if (len(out) > 3): DCNL DCSP  DCSP VRRP_EXISTS = True DCNL DCSP  DCSP return None DCNL DCSP else: DCNL DCSP  DCSP nic = out[2] DCNL DCSP  DCSP VRRP_EXISTS = False DCNL DCSP  DCSP return nic
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-interface-add' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-interface-remove' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'vrouter-interface-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent']), pn_vrouter_name=dict(required=True, type='str'), pn_vlan=dict(type='int'), pn_interface_ip=dict(required=True, type='str'), pn_assignment=dict(type='str', choices=['none', 'dhcp', 'dhcpv6', 'autov6']), pn_vxlan=dict(type='int'), pn_interface=dict(type='str', choices=['mgmt', 'data', 'span']), pn_alias=dict(type='str'), pn_exclusive=dict(type='bool'), pn_nic_enable=dict(type='bool'), pn_vrrp_id=dict(type='int'), pn_vrrp_priority=dict(type='int'), pn_vrrp_adv_int=dict(type='str'), pn_l3port=dict(type='str'), pn_secondary_macs=dict(type='str'), pn_nic_str=dict(type='str')), required_if=(['state', 'present', ['pn_vrouter_name', 'pn_interface_ip']], ['state', 'absent', ['pn_vrouter_name', 'pn_nic_str']])) DCNL DCSP state = module.params['state'] DCNL DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP vlan = module.params['pn_vlan'] DCNL DCSP interface_ip = module.params['pn_interface_ip'] DCNL DCSP assignment = module.params['pn_assignment'] DCNL DCSP vxlan = module.params['pn_vxlan'] DCNL DCSP interface = module.params['pn_interface'] DCNL DCSP alias = module.params['pn_alias'] DCNL DCSP exclusive = module.params['pn_exclusive'] DCNL DCSP nic_enable = module.params['pn_nic_enable'] DCNL DCSP vrrp_id = module.params['pn_vrrp_id'] DCNL DCSP vrrp_priority = module.params['pn_vrrp_priority'] DCNL DCSP vrrp_adv_int = module.params['pn_vrrp_adv_int'] DCNL DCSP l3port = module.params['pn_l3port'] DCNL DCSP secondary_macs = module.params['pn_secondary_macs'] DCNL DCSP nic_str = module.params['pn_nic_str'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP check_cli(module, cli) DCNL DCSP if (command == 'vrouter-interface-add'): DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if vrrp_id: DCNL DCSP  DCSP  DCSP vrrp_primary = get_nic(module, cli) DCNL DCSP  DCSP  DCSP if (VRRP_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('VRRP DCSP interface DCSP on DCSP %s DCSP already DCSP exists. DCSP Check DCSP the DCSP IP DCSP addresses' % vrouter_name)) DCNL DCSP  DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP ' % (command, vrouter_name)) DCNL DCSP  DCSP  DCSP cli += (' DCSP ip DCSP %s DCSP vrrp-primary DCSP %s DCSP vrrp-id DCSP %s DCSP ' % (interface_ip, vrrp_primary, str(vrrp_id))) DCNL DCSP  DCSP  DCSP if vrrp_priority: DCNL DCSP  DCSP  DCSP  DCSP cli += (' DCSP vrrp-priority DCSP %s DCSP ' % str(vrrp_priority)) DCNL DCSP  DCSP  DCSP if vrrp_adv_int: DCNL DCSP  DCSP  DCSP  DCSP cli += (' DCSP vrrp-adv-int DCSP %s DCSP ' % vrrp_adv_int) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (INTERFACE_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP interface DCSP on DCSP %s DCSP already DCSP exists. DCSP Check DCSP the DCSP IP DCSP addresses' % vrouter_name)) DCNL DCSP  DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP ' % (command, vrouter_name)) DCNL DCSP  DCSP  DCSP cli += (' DCSP ip DCSP %s DCSP ' % interface_ip) DCNL DCSP  DCSP if vlan: DCNL DCSP  DCSP  DCSP cli += (' DCSP vlan DCSP ' + str(vlan)) DCNL DCSP  DCSP if l3port: DCNL DCSP  DCSP  DCSP cli += (' DCSP l3-port DCSP ' + l3port) DCNL DCSP  DCSP if assignment: DCNL DCSP  DCSP  DCSP cli += (' DCSP assignment DCSP ' + assignment) DCNL DCSP  DCSP if vxlan: DCNL DCSP  DCSP  DCSP cli += (' DCSP vxlan DCSP ' + str(vxlan)) DCNL DCSP  DCSP if interface: DCNL DCSP  DCSP  DCSP cli += (' DCSP if DCSP ' + interface) DCNL DCSP  DCSP if alias: DCNL DCSP  DCSP  DCSP cli += (' DCSP alias-on DCSP ' + alias) DCNL DCSP  DCSP if (exclusive is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP exclusive DCSP ' DCNL DCSP  DCSP if (exclusive is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-exclusive DCSP ' DCNL DCSP  DCSP if (nic_enable is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP nic-enable DCSP ' DCNL DCSP  DCSP if (nic_enable is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP nic-disable DCSP ' DCNL DCSP  DCSP if secondary_macs: DCNL DCSP  DCSP  DCSP cli += (' DCSP secondary-macs DCSP ' + secondary_macs) DCNL DCSP if (command == 'vrouter-interface-remove'): DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (NIC_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP interface DCSP with DCSP nic DCSP %s DCSP does DCSP not DCSP exist' % nic_str)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP nic DCSP %s DCSP ' % (command, vrouter_name, nic_str)) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP neighbor = module.params['pn_neighbor'] DCNL DCSP global VROUTER_EXISTS, NEIGHBOR_EXISTS DCNL DCSP check_vrouter = (cli + ' DCSP vrouter-show DCSP format DCSP name DCSP no-show-headers DCSP ') DCNL DCSP check_vrouter = shlex.split(check_vrouter) DCNL DCSP out = module.run_command(check_vrouter)[1] DCNL DCSP out = out.split() DCNL DCSP if (vrouter_name in out): DCNL DCSP  DCSP VROUTER_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_EXISTS = False DCNL DCSP show = (cli + (' DCSP vrouter-bgp-show DCSP vrouter-name DCSP %s DCSP ' % vrouter_name)) DCNL DCSP show += 'format DCSP neighbor DCSP no-show-headers' DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP if (neighbor in out): DCNL DCSP  DCSP NEIGHBOR_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP NEIGHBOR_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-bgp-add' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-bgp-remove' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'vrouter-bgp-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent', 'update']), pn_vrouter_name=dict(required=True, type='str'), pn_neighbor=dict(type='str'), pn_remote_as=dict(type='str'), pn_next_hop_self=dict(type='bool'), pn_password=dict(type='str', no_log=True), pn_ebgp=dict(type='int'), pn_prefix_listin=dict(type='str'), pn_prefix_listout=dict(type='str'), pn_route_reflector=dict(type='bool'), pn_override_capability=dict(type='bool'), pn_soft_reconfig=dict(type='bool'), pn_max_prefix=dict(type='int'), pn_max_prefix_warn=dict(type='bool'), pn_bfd=dict(type='bool'), pn_multiprotocol=dict(type='str', choices=['ipv4-unicast', 'ipv6-unicast']), pn_weight=dict(type='int'), pn_default_originate=dict(type='bool'), pn_keepalive=dict(type='str'), pn_holdtime=dict(type='str'), pn_route_mapin=dict(type='str'), pn_route_mapout=dict(type='str')), required_if=(['state', 'present', ['pn_vrouter_name', 'pn_neighbor', 'pn_remote_as']], ['state', 'absent', ['pn_vrouter_name', 'pn_neighbor']], ['state', 'update', ['pn_vrouter_name', 'pn_neighbor']])) DCNL DCSP state = module.params['state'] DCNL DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP neighbor = module.params['pn_neighbor'] DCNL DCSP remote_as = module.params['pn_remote_as'] DCNL DCSP next_hop_self = module.params['pn_next_hop_self'] DCNL DCSP password = module.params['pn_password'] DCNL DCSP ebgp = module.params['pn_ebgp'] DCNL DCSP prefix_listin = module.params['pn_prefix_listin'] DCNL DCSP prefix_listout = module.params['pn_prefix_listout'] DCNL DCSP route_reflector = module.params['pn_route_reflector'] DCNL DCSP override_capability = module.params['pn_override_capability'] DCNL DCSP soft_reconfig = module.params['pn_soft_reconfig'] DCNL DCSP max_prefix = module.params['pn_max_prefix'] DCNL DCSP max_prefix_warn = module.params['pn_max_prefix_warn'] DCNL DCSP bfd = module.params['pn_bfd'] DCNL DCSP multiprotocol = module.params['pn_multiprotocol'] DCNL DCSP weight = module.params['pn_weight'] DCNL DCSP default_originate = module.params['pn_default_originate'] DCNL DCSP keepalive = module.params['pn_keepalive'] DCNL DCSP holdtime = module.params['pn_holdtime'] DCNL DCSP route_mapin = module.params['pn_route_mapin'] DCNL DCSP route_mapout = module.params['pn_route_mapout'] DCNL DCSP cli = pn_cli(module) DCNL DCSP command = get_command_from_state(state) DCNL DCSP if (command == 'vrouter-bgp-remove'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (NEIGHBOR_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('BGP DCSP neighbor DCSP with DCSP IP DCSP %s DCSP does DCSP not DCSP exist DCSP on DCSP %s' % (neighbor, vrouter_name))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP neighbor DCSP %s DCSP ' % (command, vrouter_name, neighbor)) DCNL DCSP else: DCNL DCSP  DCSP if (command == 'vrouter-bgp-add'): DCNL DCSP  DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP  DCSP if (NEIGHBOR_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('BGP DCSP neighbor DCSP with DCSP IP DCSP %s DCSP already DCSP exists DCSP on DCSP %s' % (neighbor, vrouter_name))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP neighbor DCSP %s DCSP ' % (command, vrouter_name, neighbor)) DCNL DCSP  DCSP if remote_as: DCNL DCSP  DCSP  DCSP cli += (' DCSP remote-as DCSP ' + str(remote_as)) DCNL DCSP  DCSP if (next_hop_self is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP next-hop-self DCSP ' DCNL DCSP  DCSP if (next_hop_self is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-next-hop-self DCSP ' DCNL DCSP  DCSP if password: DCNL DCSP  DCSP  DCSP cli += (' DCSP password DCSP ' + password) DCNL DCSP  DCSP if ebgp: DCNL DCSP  DCSP  DCSP cli += (' DCSP ebgp-multihop DCSP ' + str(ebgp)) DCNL DCSP  DCSP if prefix_listin: DCNL DCSP  DCSP  DCSP cli += (' DCSP prefix-list-in DCSP ' + prefix_listin) DCNL DCSP  DCSP if prefix_listout: DCNL DCSP  DCSP  DCSP cli += (' DCSP prefix-list-out DCSP ' + prefix_listout) DCNL DCSP  DCSP if (route_reflector is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP route-reflector-client DCSP ' DCNL DCSP  DCSP if (route_reflector is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-route-reflector-client DCSP ' DCNL DCSP  DCSP if (override_capability is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP override-capability DCSP ' DCNL DCSP  DCSP if (override_capability is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-override-capability DCSP ' DCNL DCSP  DCSP if (soft_reconfig is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP soft-reconfig-inbound DCSP ' DCNL DCSP  DCSP if (soft_reconfig is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-soft-reconfig-inbound DCSP ' DCNL DCSP  DCSP if max_prefix: DCNL DCSP  DCSP  DCSP cli += (' DCSP max-prefix DCSP ' + str(max_prefix)) DCNL DCSP  DCSP if (max_prefix_warn is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP max-prefix-warn-only DCSP ' DCNL DCSP  DCSP if (max_prefix_warn is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-max-prefix-warn-only DCSP ' DCNL DCSP  DCSP if (bfd is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP bfd DCSP ' DCNL DCSP  DCSP if (bfd is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-bfd DCSP ' DCNL DCSP  DCSP if multiprotocol: DCNL DCSP  DCSP  DCSP cli += (' DCSP multi-protocol DCSP ' + multiprotocol) DCNL DCSP  DCSP if weight: DCNL DCSP  DCSP  DCSP cli += (' DCSP weight DCSP ' + str(weight)) DCNL DCSP  DCSP if (default_originate is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP default-originate DCSP ' DCNL DCSP  DCSP if (default_originate is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-default-originate DCSP ' DCNL DCSP  DCSP if keepalive: DCNL DCSP  DCSP  DCSP cli += (' DCSP neighbor-keepalive-interval DCSP ' + keepalive) DCNL DCSP  DCSP if holdtime: DCNL DCSP  DCSP  DCSP cli += (' DCSP neighbor-holdtime DCSP ' + holdtime) DCNL DCSP  DCSP if route_mapin: DCNL DCSP  DCSP  DCSP cli += (' DCSP route-map-in DCSP ' + route_mapin) DCNL DCSP  DCSP if route_mapout: DCNL DCSP  DCSP  DCSP cli += (' DCSP route-map-out DCSP ' + route_mapout) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP name = module.params['pn_name'] DCNL DCSP node1 = module.params['pn_cluster_node1'] DCNL DCSP node2 = module.params['pn_cluster_node2'] DCNL DCSP show = (cli + ' DCSP cluster-show DCSP  DCSP format DCSP name,cluster-node-1,cluster-node-2 DCSP ') DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP global NAME_EXISTS, NODE1_EXISTS, NODE2_EXISTS DCNL DCSP if (name in out): DCNL DCSP  DCSP NAME_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP NAME_EXISTS = False DCNL DCSP if (node1 in out): DCNL DCSP  DCSP NODE1_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP NODE2_EXISTS = False DCNL DCSP if (node2 in out): DCNL DCSP  DCSP NODE2_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP NODE2_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'cluster-create' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'cluster-delete' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent']), pn_name=dict(required=True, type='str'), pn_cluster_node1=dict(type='str'), pn_cluster_node2=dict(type='str'), pn_validate=dict(type='bool')), required_if=(['state', 'present', ['pn_name', 'pn_cluster_node1', 'pn_cluster_node2']], ['state', 'absent', ['pn_name']])) DCNL DCSP state = module.params['state'] DCNL DCSP name = module.params['pn_name'] DCNL DCSP cluster_node1 = module.params['pn_cluster_node1'] DCNL DCSP cluster_node2 = module.params['pn_cluster_node2'] DCNL DCSP validate = module.params['pn_validate'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if (command == 'cluster-create'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (NAME_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Cluster DCSP with DCSP name DCSP %s DCSP already DCSP exists' % name)) DCNL DCSP  DCSP if (NODE1_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Node DCSP %s DCSP already DCSP part DCSP of DCSP a DCSP cluster' % cluster_node1)) DCNL DCSP  DCSP if (NODE2_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Node DCSP %s DCSP already DCSP part DCSP of DCSP a DCSP cluster' % cluster_node2)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP  DCSP cli += ('cluster-node-1 DCSP %s DCSP cluster-node-2 DCSP %s DCSP ' % (cluster_node1, cluster_node2)) DCNL DCSP  DCSP if (validate is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP validate DCSP ' DCNL DCSP  DCSP if (validate is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-validate DCSP ' DCNL DCSP if (command == 'cluster-delete'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (NAME_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Cluster DCSP with DCSP name DCSP %s DCSP does DCSP not DCSP exist' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP name = module.params['pn_name'] DCNL DCSP show = (cli + ' DCSP trunk-show DCSP format DCSP switch,name DCSP no-show-headers') DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP global TRUNK_EXISTS DCNL DCSP if (name in out): DCNL DCSP  DCSP TRUNK_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP TRUNK_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'trunk-create' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'trunk-delete' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'trunk-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent', 'update']), pn_name=dict(required=True, type='str'), pn_ports=dict(type='str'), pn_speed=dict(type='str', choices=['disable', '10m', '100m', '1g', '2.5g', '10g', '40g']), pn_egress_rate_limit=dict(type='str'), pn_jumbo=dict(type='bool'), pn_lacp_mode=dict(type='str', choices=['off', 'passive', 'active']), pn_lacp_priority=dict(type='int'), pn_lacp_timeout=dict(type='str'), pn_lacp_fallback=dict(type='str', choices=['bundle', 'individual']), pn_lacp_fallback_timeout=dict(type='str'), pn_edge_switch=dict(type='bool'), pn_pause=dict(type='bool'), pn_description=dict(type='str'), pn_loopback=dict(type='bool'), pn_mirror_receive=dict(type='bool'), pn_unknown_ucast_level=dict(type='str'), pn_unknown_mcast_level=dict(type='str'), pn_broadcast_level=dict(type='str'), pn_port_macaddr=dict(type='str'), pn_loopvlans=dict(type='str'), pn_routing=dict(type='bool'), pn_host=dict(type='bool')), required_if=(['state', 'present', ['pn_name', 'pn_ports']], ['state', 'absent', ['pn_name']], ['state', 'update', ['pn_name']])) DCNL DCSP state = module.params['state'] DCNL DCSP name = module.params['pn_name'] DCNL DCSP ports = module.params['pn_ports'] DCNL DCSP speed = module.params['pn_speed'] DCNL DCSP egress_rate_limit = module.params['pn_egress_rate_limit'] DCNL DCSP jumbo = module.params['pn_jumbo'] DCNL DCSP lacp_mode = module.params['pn_lacp_mode'] DCNL DCSP lacp_priority = module.params['pn_lacp_priority'] DCNL DCSP lacp_timeout = module.params['pn_lacp_timeout'] DCNL DCSP lacp_fallback = module.params['pn_lacp_fallback'] DCNL DCSP lacp_fallback_timeout = module.params['pn_lacp_fallback_timeout'] DCNL DCSP edge_switch = module.params['pn_edge_switch'] DCNL DCSP pause = module.params['pn_pause'] DCNL DCSP description = module.params['pn_description'] DCNL DCSP loopback = module.params['pn_loopback'] DCNL DCSP mirror_receive = module.params['pn_mirror_receive'] DCNL DCSP unknown_ucast_level = module.params['pn_unknown_ucast_level'] DCNL DCSP unknown_mcast_level = module.params['pn_unknown_mcast_level'] DCNL DCSP broadcast_level = module.params['pn_broadcast_level'] DCNL DCSP port_macaddr = module.params['pn_port_macaddr'] DCNL DCSP loopvlans = module.params['pn_loopvlans'] DCNL DCSP routing = module.params['pn_routing'] DCNL DCSP host = module.params['pn_host'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if (command == 'trunk-delete'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (TRUNK_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Trunk DCSP with DCSP name DCSP %s DCSP does DCSP not DCSP exist' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP else: DCNL DCSP  DCSP if (command == 'trunk-create'): DCNL DCSP  DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP  DCSP if (TRUNK_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('Trunk DCSP with DCSP name DCSP %s DCSP already DCSP exists' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP  DCSP if ports: DCNL DCSP  DCSP  DCSP cli += (' DCSP ports DCSP ' + ports) DCNL DCSP  DCSP if speed: DCNL DCSP  DCSP  DCSP cli += (' DCSP speed DCSP ' + speed) DCNL DCSP  DCSP if egress_rate_limit: DCNL DCSP  DCSP  DCSP cli += (' DCSP egress-rate-limit DCSP ' + egress_rate_limit) DCNL DCSP  DCSP if (jumbo is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP jumbo DCSP ' DCNL DCSP  DCSP if (jumbo is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-jumbo DCSP ' DCNL DCSP  DCSP if lacp_mode: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-mode DCSP ' + lacp_mode) DCNL DCSP  DCSP if lacp_priority: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-priority DCSP ' + lacp_priority) DCNL DCSP  DCSP if lacp_timeout: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-timeout DCSP ' + lacp_timeout) DCNL DCSP  DCSP if lacp_fallback: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-fallback DCSP ' + lacp_fallback) DCNL DCSP  DCSP if lacp_fallback_timeout: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-fallback-timeout DCSP ' + lacp_fallback_timeout) DCNL DCSP  DCSP if (edge_switch is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP edge-switch DCSP ' DCNL DCSP  DCSP if (edge_switch is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-edge-switch DCSP ' DCNL DCSP  DCSP if (pause is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP pause DCSP ' DCNL DCSP  DCSP if (pause is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-pause DCSP ' DCNL DCSP  DCSP if description: DCNL DCSP  DCSP  DCSP cli += (' DCSP description DCSP ' + description) DCNL DCSP  DCSP if (loopback is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP loopback DCSP ' DCNL DCSP  DCSP if (loopback is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-loopback DCSP ' DCNL DCSP  DCSP if (mirror_receive is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP mirror-receive-only DCSP ' DCNL DCSP  DCSP if (mirror_receive is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-mirror-receive-only DCSP ' DCNL DCSP  DCSP if unknown_ucast_level: DCNL DCSP  DCSP  DCSP cli += (' DCSP unknown-ucast-level DCSP ' + unknown_ucast_level) DCNL DCSP  DCSP if unknown_mcast_level: DCNL DCSP  DCSP  DCSP cli += (' DCSP unknown-mcast-level DCSP ' + unknown_mcast_level) DCNL DCSP  DCSP if broadcast_level: DCNL DCSP  DCSP  DCSP cli += (' DCSP broadcast-level DCSP ' + broadcast_level) DCNL DCSP  DCSP if port_macaddr: DCNL DCSP  DCSP  DCSP cli += (' DCSP port-mac-address DCSP ' + port_macaddr) DCNL DCSP  DCSP if loopvlans: DCNL DCSP  DCSP  DCSP cli += (' DCSP loopvlans DCSP ' + loopvlans) DCNL DCSP  DCSP if (routing is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP routing DCSP ' DCNL DCSP  DCSP if (routing is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-routing DCSP ' DCNL DCSP  DCSP if (host is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP host-enable DCSP ' DCNL DCSP  DCSP if (host is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP host-disable DCSP ' DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP network_ip = module.params['pn_network_ip'] DCNL DCSP global VROUTER_EXISTS, NETWORK_EXISTS DCNL DCSP check_vrouter = (cli + ' DCSP vrouter-show DCSP format DCSP name DCSP no-show-headers DCSP ') DCNL DCSP check_vrouter = shlex.split(check_vrouter) DCNL DCSP out = module.run_command(check_vrouter)[1] DCNL DCSP out = out.split() DCNL DCSP if (vrouter_name in out): DCNL DCSP  DCSP VROUTER_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VROUTER_EXISTS = False DCNL DCSP show = (cli + (' DCSP vrouter-ospf-show DCSP vrouter-name DCSP %s DCSP ' % vrouter_name)) DCNL DCSP show += 'format DCSP network DCSP no-show-headers' DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP if (network_ip in out): DCNL DCSP  DCSP NETWORK_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP NETWORK_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-ospf-add' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-ospf-remove' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(type='str', default='present', choices=['present', 'absent']), pn_vrouter_name=dict(required=True, type='str'), pn_network_ip=dict(required=True, type='str'), pn_ospf_area=dict(type='str')), required_if=(['state', 'present', ['pn_network_ip', 'pn_ospf_area']], ['state', 'absent', ['pn_network_ip']])) DCNL DCSP state = module.params['state'] DCNL DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP network_ip = module.params['pn_network_ip'] DCNL DCSP ospf_area = module.params['pn_ospf_area'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP check_cli(module, cli) DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (NETWORK_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('OSPF DCSP with DCSP network DCSP ip DCSP %s DCSP already DCSP exists DCSP on DCSP %s' % (network_ip, vrouter_name))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP network DCSP %s DCSP ospf-area DCSP %s' % (command, vrouter_name, network_ip, ospf_area)) DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP if (VROUTER_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('vRouter DCSP %s DCSP does DCSP not DCSP exist' % vrouter_name)) DCNL DCSP  DCSP if (NETWORK_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('OSPF DCSP with DCSP network DCSP ip DCSP %s DCSP already DCSP exists DCSP on DCSP %s' % (network_ip, vrouter_name))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP network DCSP %s' % (command, vrouter_name, network_ip)) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP name = module.params['pn_name'] DCNL DCSP show = (cli + ' DCSP vlag-show DCSP format DCSP name DCSP no-show-headers') DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP global VLAG_EXISTS DCNL DCSP if (name in out): DCNL DCSP  DCSP VLAG_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VLAG_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vlag-create' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vlag-delete' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'vlag-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent', 'update']), pn_name=dict(required=True, type='str'), pn_port=dict(type='str'), pn_peer_port=dict(type='str'), pn_mode=dict(type='str', choices=['active-standby', 'active-active']), pn_peer_switch=dict(type='str'), pn_failover_action=dict(type='str', choices=['move', 'ignore']), pn_lacp_mode=dict(type='str', choices=['off', 'passive', 'active']), pn_lacp_timeout=dict(type='str', choices=['slow', 'fast']), pn_lacp_fallback=dict(type='str', choices=['individual', 'bundled']), pn_lacp_fallback_timeout=dict(type='str')), required_if=(['state', 'present', ['pn_name', 'pn_port', 'pn_peer_port', 'pn_peer_switch']], ['state', 'absent', ['pn_name']], ['state', 'update', ['pn_name']])) DCNL DCSP state = module.params['state'] DCNL DCSP name = module.params['pn_name'] DCNL DCSP port = module.params['pn_port'] DCNL DCSP peer_port = module.params['pn_peer_port'] DCNL DCSP mode = module.params['pn_mode'] DCNL DCSP peer_switch = module.params['pn_peer_switch'] DCNL DCSP failover_action = module.params['pn_failover_action'] DCNL DCSP lacp_mode = module.params['pn_lacp_mode'] DCNL DCSP lacp_timeout = module.params['pn_lacp_timeout'] DCNL DCSP lacp_fallback = module.params['pn_lacp_fallback'] DCNL DCSP lacp_fallback_timeout = module.params['pn_lacp_fallback_timeout'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if (command == 'vlag-delete'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VLAG_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('VLAG DCSP with DCSP name DCSP %s DCSP does DCSP not DCSP exist' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP else: DCNL DCSP  DCSP if (command == 'vlag-create'): DCNL DCSP  DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP  DCSP if (VLAG_EXISTS is True): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('VLAG DCSP with DCSP name DCSP %s DCSP already DCSP exists' % name)) DCNL DCSP  DCSP cli += (' DCSP %s DCSP name DCSP %s DCSP ' % (command, name)) DCNL DCSP  DCSP if port: DCNL DCSP  DCSP  DCSP cli += (' DCSP port DCSP %s DCSP peer-port DCSP %s DCSP ' % (port, peer_port)) DCNL DCSP  DCSP if mode: DCNL DCSP  DCSP  DCSP cli += (' DCSP mode DCSP ' + mode) DCNL DCSP  DCSP if peer_switch: DCNL DCSP  DCSP  DCSP cli += (' DCSP peer-switch DCSP ' + peer_switch) DCNL DCSP  DCSP if failover_action: DCNL DCSP  DCSP  DCSP cli += ((' DCSP failover-' + failover_action) + '-L2 DCSP ') DCNL DCSP  DCSP if lacp_mode: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-mode DCSP ' + lacp_mode) DCNL DCSP  DCSP if lacp_timeout: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-timeout DCSP ' + lacp_timeout) DCNL DCSP  DCSP if lacp_fallback: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-fallback DCSP ' + lacp_fallback) DCNL DCSP  DCSP if lacp_fallback_timeout: DCNL DCSP  DCSP  DCSP cli += (' DCSP lacp-fallback-timeout DCSP ' + lacp_fallback_timeout) DCNL DCSP run_cli(module, cli)
def pn_cli(module): DCNL  DCSP username = module.params['pn_cliusername'] DCNL DCSP password = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP if (username and password): DCNL DCSP  DCSP cli = ('/usr/bin/cli DCSP --quiet DCSP --user DCSP %s:%s DCSP ' % (username, password)) DCNL DCSP else: DCNL DCSP  DCSP cli = '/usr/bin/cli DCSP --quiet DCSP ' DCNL DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP else: DCNL DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP return cli
def check_cli(module, cli): DCNL  DCSP vlanid = module.params['pn_vlanid'] DCNL DCSP show = (cli + (' DCSP vlan-show DCSP id DCSP %s DCSP format DCSP id,scope DCSP no-show-headers' % str(vlanid))) DCNL DCSP show = shlex.split(show) DCNL DCSP out = module.run_command(show)[1] DCNL DCSP out = out.split() DCNL DCSP global VLAN_EXISTS DCNL DCSP if (str(vlanid) in out): DCNL DCSP  DCSP VLAN_EXISTS = True DCNL DCSP else: DCNL DCSP  DCSP VLAN_EXISTS = False
def run_cli(module, cli): DCNL  DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cmd = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(cmd) DCNL DCSP print_cli = cli.split(cliswitch)[1] DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=print_cli, stderr=err.strip(), msg=('%s DCSP operation DCSP failed' % command), changed=False) DCNL DCSP if out: DCNL DCSP  DCSP module.exit_json(command=print_cli, stdout=out.strip(), msg=('%s DCSP operation DCSP completed' % command), changed=True) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=print_cli, msg=('%s DCSP operation DCSP completed' % command), changed=True)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vlan-create' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vlan-delete' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=False, type='str'), pn_clipassword=dict(required=False, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str', default='local'), state=dict(required=True, type='str', choices=['present', 'absent']), pn_vlanid=dict(required=True, type='int'), pn_scope=dict(type='str', choices=['fabric', 'local']), pn_description=dict(type='str'), pn_stats=dict(type='bool'), pn_ports=dict(type='str'), pn_untagged_ports=dict(type='str')), required_if=(['state', 'present', ['pn_vlanid', 'pn_scope']], ['state', 'absent', ['pn_vlanid']])) DCNL DCSP state = module.params['state'] DCNL DCSP vlanid = module.params['pn_vlanid'] DCNL DCSP scope = module.params['pn_scope'] DCNL DCSP description = module.params['pn_description'] DCNL DCSP stats = module.params['pn_stats'] DCNL DCSP ports = module.params['pn_ports'] DCNL DCSP untagged_ports = module.params['pn_untagged_ports'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = pn_cli(module) DCNL DCSP if (not (MIN_VLAN_ID <= vlanid <= MAX_VLAN_ID)): DCNL DCSP  DCSP module.exit_json(msg='VLAN DCSP id DCSP must DCSP be DCSP between DCSP 2 DCSP and DCSP 4092', changed=False) DCNL DCSP if (command == 'vlan-create'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VLAN_EXISTS is True): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('VLAN DCSP with DCSP id DCSP %s DCSP already DCSP exists' % str(vlanid))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP id DCSP %s DCSP scope DCSP %s DCSP ' % (command, str(vlanid), scope)) DCNL DCSP  DCSP if description: DCNL DCSP  DCSP  DCSP cli += (' DCSP description DCSP ' + description) DCNL DCSP  DCSP if (stats is True): DCNL DCSP  DCSP  DCSP cli += ' DCSP stats DCSP ' DCNL DCSP  DCSP if (stats is False): DCNL DCSP  DCSP  DCSP cli += ' DCSP no-stats DCSP ' DCNL DCSP  DCSP if ports: DCNL DCSP  DCSP  DCSP cli += (' DCSP ports DCSP ' + ports) DCNL DCSP  DCSP if untagged_ports: DCNL DCSP  DCSP  DCSP cli += (' DCSP untagged-ports DCSP ' + untagged_ports) DCNL DCSP if (command == 'vlan-delete'): DCNL DCSP  DCSP check_cli(module, cli) DCNL DCSP  DCSP if (VLAN_EXISTS is False): DCNL DCSP  DCSP  DCSP module.exit_json(skipped=True, msg=('VLAN DCSP with DCSP id DCSP %s DCSP does DCSP not DCSP exist' % str(vlanid))) DCNL DCSP  DCSP cli += (' DCSP %s DCSP id DCSP %s DCSP ' % (command, str(vlanid))) DCNL DCSP run_cli(module, cli)
def get_command_from_state(state): DCNL  DCSP command = None DCNL DCSP if (state == 'present'): DCNL DCSP  DCSP command = 'vrouter-ospf-area-add' DCNL DCSP if (state == 'absent'): DCNL DCSP  DCSP command = 'vrouter-ospf-area-remove' DCNL DCSP if (state == 'update'): DCNL DCSP  DCSP command = 'vrouter-ospf-area-modify' DCNL DCSP return command
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(pn_cliusername=dict(required=True, type='str'), pn_clipassword=dict(required=True, type='str', no_log=True), pn_cliswitch=dict(required=False, type='str'), state=dict(required=True, type='str', choices=['present', 'absent', 'update']), pn_vrouter_name=dict(required=True, type='str'), pn_ospf_area=dict(required=True, type='str'), pn_stub_type=dict(type='str', choices=['none', 'stub', 'nssa', 'stub-no-summary', 'nssa-no-summary']), pn_prefix_listin=dict(type='str'), pn_prefix_listout=dict(type='str'), pn_quiet=dict(type='bool', default='True'))) DCNL DCSP cliusername = module.params['pn_cliusername'] DCNL DCSP clipassword = module.params['pn_clipassword'] DCNL DCSP cliswitch = module.params['pn_cliswitch'] DCNL DCSP state = module.params['state'] DCNL DCSP vrouter_name = module.params['pn_vrouter_name'] DCNL DCSP ospf_area = module.params['pn_ospf_area'] DCNL DCSP stub_type = module.params['pn_stub_type'] DCNL DCSP prefix_listin = module.params['pn_prefix_listin'] DCNL DCSP prefix_listout = module.params['pn_prefix_listout'] DCNL DCSP quiet = module.params['pn_quiet'] DCNL DCSP command = get_command_from_state(state) DCNL DCSP cli = '/usr/bin/cli' DCNL DCSP if (quiet is True): DCNL DCSP  DCSP cli += ' DCSP --quiet DCSP ' DCNL DCSP cli += (' DCSP --user DCSP %s:%s DCSP ' % (cliusername, clipassword)) DCNL DCSP if cliswitch: DCNL DCSP  DCSP if (cliswitch == 'local'): DCNL DCSP  DCSP  DCSP cli += ' DCSP switch-local DCSP ' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cli += (' DCSP switch DCSP ' + cliswitch) DCNL DCSP cli += (' DCSP %s DCSP vrouter-name DCSP %s DCSP area DCSP %s DCSP ' % (command, vrouter_name, ospf_area)) DCNL DCSP if stub_type: DCNL DCSP  DCSP cli += (' DCSP stub-type DCSP ' + stub_type) DCNL DCSP if prefix_listin: DCNL DCSP  DCSP cli += (' DCSP prefix-list-in DCSP ' + prefix_listin) DCNL DCSP if prefix_listout: DCNL DCSP  DCSP cli += (' DCSP prefix-list-out DCSP ' + prefix_listout) DCNL DCSP ospfcommand = shlex.split(cli) DCNL DCSP (result, out, err) = module.run_command(ospfcommand) DCNL DCSP if (result != 0): DCNL DCSP  DCSP module.exit_json(command=cli, stderr=err.rstrip('\r\n'), changed=False) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(command=cli, stdout=out.rstrip('\r\n'), changed=True)
def url_get(module, url, dest, use_proxy, last_mod_time, force, timeout=10, headers=None, tmp_dest=''): DCNL  DCSP (rsp, info) = fetch_url(module, url, use_proxy=use_proxy, force=force, last_mod_time=last_mod_time, timeout=timeout, headers=headers) DCNL DCSP if (info['status'] == 304): DCNL DCSP  DCSP module.exit_json(url=url, dest=dest, changed=False, msg=info.get('msg', '')) DCNL DCSP if (info['status'] == (-1)): DCNL DCSP  DCSP module.fail_json(msg=info['msg'], url=url, dest=dest) DCNL DCSP if ((info['status'] != 200) and (not url.startswith('file:/')) and (not (url.startswith('ftp:/') and info.get('msg', '').startswith('OK')))): DCNL DCSP  DCSP module.fail_json(msg='Request DCSP failed', status_code=info['status'], response=info['msg'], url=url, dest=dest) DCNL DCSP if (tmp_dest != ''): DCNL DCSP  DCSP tmp_dest_is_dir = os.path.isdir(tmp_dest) DCNL DCSP  DCSP if (not tmp_dest_is_dir): DCNL DCSP  DCSP  DCSP if os.path.exists(tmp_dest): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s DCSP is DCSP a DCSP file DCSP but DCSP should DCSP be DCSP a DCSP directory.' % tmp_dest)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('%s DCSP directory DCSP does DCSP not DCSP exist.' % tmp_dest)) DCNL DCSP  DCSP (fd, tempname) = tempfile.mkstemp(dir=tmp_dest) DCNL DCSP else: DCNL DCSP  DCSP (fd, tempname) = tempfile.mkstemp() DCNL DCSP f = os.fdopen(fd, 'wb') DCNL DCSP try: DCNL DCSP  DCSP shutil.copyfileobj(rsp, f) DCNL DCSP except Exception: DCNL DCSP  DCSP err = get_exception() DCNL DCSP  DCSP os.remove(tempname) DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP temporary DCSP content DCSP file: DCSP %s' % str(err))) DCNL DCSP f.close() DCNL DCSP rsp.close() DCNL DCSP return (tempname, info)
def extract_filename_from_headers(headers): DCNL  DCSP cont_disp_regex = 'attachment; DCSP ?filename="?([^"]+)' DCNL DCSP res = None DCNL DCSP if ('content-disposition' in headers): DCNL DCSP  DCSP cont_disp = headers['content-disposition'] DCNL DCSP  DCSP match = re.match(cont_disp_regex, cont_disp) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP res = match.group(1) DCNL DCSP  DCSP  DCSP res = os.path.basename(res) DCNL DCSP return res
def absolute_location(url, location): DCNL  DCSP if ('://' in location): DCNL DCSP  DCSP return location DCNL DCSP elif location.startswith('/'): DCNL DCSP  DCSP parts = six.moves.urllib.parse.urlsplit(url) DCNL DCSP  DCSP base = url.replace(parts[2], '') DCNL DCSP  DCSP return ('%s%s' % (base, location)) DCNL DCSP elif (not location.startswith('/')): DCNL DCSP  DCSP base = os.path.dirname(url) DCNL DCSP  DCSP return ('%s/%s' % (base, location)) DCNL DCSP else: DCNL DCSP  DCSP return location
def main(): DCNL  DCSP argument_spec = dict(_raw_params=dict()) DCNL DCSP module = LocalAnsibleModule(argument_spec=argument_spec, supports_check_mode=False) DCNL DCSP if (str(module.params['_raw_params']).strip() == ''): DCNL DCSP  DCSP module.fail_json(rc=256, msg='no DCSP command DCSP given') DCNL DCSP result = {'changed': True} DCNL DCSP (rc, out, err) = module.exec_command(module.params['_raw_params']) DCNL DCSP try: DCNL DCSP  DCSP out = module.from_json(out) DCNL DCSP except ValueError: DCNL DCSP  DCSP if out: DCNL DCSP  DCSP  DCSP out = str(out).strip() DCNL DCSP  DCSP  DCSP result['stdout_lines'] = out.split('\n') DCNL DCSP result.update({'rc': rc, 'stdout': out, 'stderr': str(err).strip()}) DCNL DCSP module.exit_json(**result)
def to_lines(stdout): DCNL  DCSP for item in stdout: DCNL DCSP  DCSP if isinstance(item, basestring): DCNL DCSP  DCSP  DCSP item = str(item).split('\n') DCNL DCSP  DCSP (yield item)
def parse_commands(module): DCNL  DCSP for cmd in module.params['commands']: DCNL DCSP  DCSP if isinstance(cmd, basestring): DCNL DCSP  DCSP  DCSP cmd = dict(command=cmd, output=None) DCNL DCSP  DCSP elif ('command' not in cmd): DCNL DCSP  DCSP  DCSP module.fail_json(msg='command DCSP keyword DCSP argument DCSP is DCSP required') DCNL DCSP  DCSP elif (cmd.get('output') not in [None, 'text', 'json']): DCNL DCSP  DCSP  DCSP module.fail_json(msg='invalid DCSP output DCSP specified DCSP for DCSP command') DCNL DCSP  DCSP elif (not set(cmd.keys()).issubset(VALID_KEYS)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='unknown DCSP keyword DCSP specified') DCNL DCSP  DCSP (yield cmd)
def main(): DCNL  DCSP spec = dict(commands=dict(type='list', required=True), wait_for=dict(type='list', aliases=['waitfor']), match=dict(default='all', choices=['any', 'all']), retries=dict(default=10, type='int'), interval=dict(default=1, type='int')) DCNL DCSP module = NetworkModule(argument_spec=spec, supports_check_mode=True) DCNL DCSP commands = list(parse_commands(module)) DCNL DCSP conditionals = (module.params['wait_for'] or list()) DCNL DCSP warnings = list() DCNL DCSP runner = CommandRunner(module) DCNL DCSP for cmd in commands: DCNL DCSP  DCSP if (module.check_mode and (not cmd['command'].startswith('dis'))): DCNL DCSP  DCSP  DCSP warnings.append(('only DCSP display DCSP commands DCSP are DCSP supported DCSP when DCSP using DCSP check DCSP mode, DCSP not DCSP executing DCSP `%s`' % cmd['command'])) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if cmd['command'].startswith('sys'): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='ce_command DCSP does DCSP not DCSP support DCSP running DCSP config DCSP mode DCSP commands. DCSP  DCSP Please DCSP use DCSP ce_config DCSP instead') DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP runner.add_command(**cmd) DCNL DCSP  DCSP  DCSP except AddCommandError: DCNL DCSP  DCSP  DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP  DCSP  DCSP warnings.append(('duplicate DCSP command DCSP detected: DCSP %s' % cmd)) DCNL DCSP try: DCNL DCSP  DCSP for item in conditionals: DCNL DCSP  DCSP  DCSP runner.add_conditional(item) DCNL DCSP except AddConditionError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), condition=exc.condition) DCNL DCSP runner.retries = module.params['retries'] DCNL DCSP runner.interval = module.params['interval'] DCNL DCSP runner.match = module.params['match'] DCNL DCSP try: DCNL DCSP  DCSP runner.run() DCNL DCSP except FailedConditionsError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), failed_conditions=exc.failed_conditions) DCNL DCSP except FailedConditionalError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), failed_conditional=exc.failed_conditional) DCNL DCSP except NetworkError: DCNL DCSP  DCSP exc = get_exception() DCNL DCSP  DCSP module.fail_json(msg=str(exc), **exc.kwargs) DCNL DCSP result = dict(changed=False) DCNL DCSP result['stdout'] = list() DCNL DCSP for cmd in commands: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP output = runner.get_command(cmd['command'], cmd.get('output')) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP output = 'command DCSP not DCSP executed DCSP due DCSP to DCSP check_mode, DCSP see DCSP warnings' DCNL DCSP  DCSP result['stdout'].append(output) DCNL DCSP result['warnings'] = warnings DCNL DCSP result['stdout_lines'] = list(to_lines(result['stdout'])) DCNL DCSP module.exit_json(**result)
def send_msg(msg, server='localhost', port='6667', channel=None, nick_to=[], key=None, topic=None, nick='ansible', color='none', passwd=False, timeout=30, use_ssl=False, part=True, style=None): DCNL  DCSP colornumbers = {'white': '00', 'black': '01', 'blue': '02', 'green': '03', 'red': '04', 'brown': '05', 'purple': '06', 'orange': '07', 'yellow': '08', 'light_green': '09', 'teal': '10', 'light_cyan': '11', 'light_blue': '12', 'pink': '13', 'gray': '14', 'light_gray': '15'} DCNL DCSP stylechoices = {'bold': '\x02', 'underline': '\x1f', 'reverse': '\x16', 'italic': '\x1d'} DCNL DCSP try: DCNL DCSP  DCSP styletext = stylechoices[style] DCNL DCSP except: DCNL DCSP  DCSP styletext = '' DCNL DCSP try: DCNL DCSP  DCSP colornumber = colornumbers[color] DCNL DCSP  DCSP colortext = ('\x03' + colornumber) DCNL DCSP except: DCNL DCSP  DCSP colortext = '' DCNL DCSP message = ((styletext + colortext) + msg) DCNL DCSP irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM) DCNL DCSP if use_ssl: DCNL DCSP  DCSP irc = ssl.wrap_socket(irc) DCNL DCSP irc.connect((server, int(port))) DCNL DCSP if passwd: DCNL DCSP  DCSP irc.send(('PASS DCSP %s\r\n' % passwd)) DCNL DCSP irc.send(('NICK DCSP %s\r\n' % nick)) DCNL DCSP irc.send(('USER DCSP %s DCSP %s DCSP %s DCSP :ansible DCSP IRC\r\n' % (nick, nick, nick))) DCNL DCSP motd = '' DCNL DCSP start = time.time() DCNL DCSP while 1: DCNL DCSP  DCSP motd += irc.recv(1024) DCNL DCSP  DCSP match = re.search('^:\\S+ DCSP 00[1-4] DCSP (?P<nick>\\S+) DCSP :', motd, flags=re.M) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP nick = match.group('nick') DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif ((time.time() - start) > timeout): DCNL DCSP  DCSP  DCSP raise Exception('Timeout DCSP waiting DCSP for DCSP IRC DCSP server DCSP welcome DCSP response') DCNL DCSP  DCSP sleep(0.5) DCNL DCSP if key: DCNL DCSP  DCSP irc.send(('JOIN DCSP %s DCSP %s\r\n' % (channel, key))) DCNL DCSP else: DCNL DCSP  DCSP irc.send(('JOIN DCSP %s\r\n' % channel)) DCNL DCSP join = '' DCNL DCSP start = time.time() DCNL DCSP while 1: DCNL DCSP  DCSP join += irc.recv(1024) DCNL DCSP  DCSP if re.search(('^:\\S+ DCSP 366 DCSP %s DCSP %s DCSP :' % (nick, channel)), join, flags=re.M): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif ((time.time() - start) > timeout): DCNL DCSP  DCSP  DCSP raise Exception('Timeout DCSP waiting DCSP for DCSP IRC DCSP JOIN DCSP response') DCNL DCSP  DCSP sleep(0.5) DCNL DCSP if (topic is not None): DCNL DCSP  DCSP irc.send(('TOPIC DCSP %s DCSP :%s\r\n' % (channel, topic))) DCNL DCSP  DCSP sleep(1) DCNL DCSP if nick_to: DCNL DCSP  DCSP for nick in nick_to: DCNL DCSP  DCSP  DCSP irc.send(('PRIVMSG DCSP %s DCSP :%s\r\n' % (nick, message))) DCNL DCSP if channel: DCNL DCSP  DCSP irc.send(('PRIVMSG DCSP %s DCSP :%s\r\n' % (channel, message))) DCNL DCSP sleep(1) DCNL DCSP if part: DCNL DCSP  DCSP irc.send(('PART DCSP %s\r\n' % channel)) DCNL DCSP  DCSP irc.send('QUIT\r\n') DCNL DCSP  DCSP sleep(1) DCNL DCSP irc.close()
def send_message(module, client_id, client_secret, topic, msg): DCNL  DCSP try: DCNL DCSP  DCSP access_token = get_access_token(module, client_id, client_secret) DCNL DCSP  DCSP url = ('https://typetalk.in/api/v1/topics/%d' % topic) DCNL DCSP  DCSP headers = {'Authorization': ('Bearer DCSP %s' % access_token)} DCNL DCSP  DCSP do_request(module, url, {'message': msg}, headers) DCNL DCSP  DCSP return (True, {'access_token': access_token}) DCNL DCSP except ConnectionError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP return (False, e)
def escape_quotes(text): DCNL  DCSP return ''.join((escape_table.get(c, c) for c in text))
def send_msg_v1(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=MSG_URI_V1): DCNL  DCSP params = {} DCNL DCSP params['room_id'] = room DCNL DCSP params['from'] = msg_from[:15] DCNL DCSP params['message'] = msg DCNL DCSP params['message_format'] = msg_format DCNL DCSP params['color'] = color DCNL DCSP params['api'] = api DCNL DCSP params['notify'] = int(notify) DCNL DCSP url = ((api + MSG_URI_V1) + ('?auth_token=%s' % token)) DCNL DCSP data = urllib.urlencode(params) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP module.exit_json(changed=False) DCNL DCSP (response, info) = fetch_url(module, url, data=data) DCNL DCSP if (info['status'] == 200): DCNL DCSP  DCSP return response.read() DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP send DCSP message, DCSP return DCSP status=%s' % str(info['status'])))
def send_msg_v2(module, token, room, msg_from, msg, msg_format='text', color='yellow', notify=False, api=NOTIFY_URI_V2): DCNL  DCSP headers = {'Authorization': ('Bearer DCSP %s' % token), 'Content-Type': 'application/json'} DCNL DCSP body = dict() DCNL DCSP body['message'] = msg DCNL DCSP body['color'] = color DCNL DCSP body['message_format'] = msg_format DCNL DCSP body['notify'] = notify DCNL DCSP POST_URL = (api + NOTIFY_URI_V2) DCNL DCSP url = POST_URL.replace('{id_or_name}', urllib.pathname2url(room)) DCNL DCSP data = json.dumps(body) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP module.exit_json(changed=False) DCNL DCSP (response, info) = fetch_url(module, url, data=data, headers=headers, method='POST') DCNL DCSP if (info['status'] in [200, 204]): DCNL DCSP  DCSP return response.read() DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP send DCSP message, DCSP return DCSP status=%s' % str(info['status'])))
def get_cert_days(module, cert_file): DCNL  DCSP if (not os.path.exists(cert_file)): DCNL DCSP  DCSP return (-1) DCNL DCSP openssl_bin = module.get_bin_path('openssl', True) DCNL DCSP openssl_cert_cmd = [openssl_bin, 'x509', '-in', cert_file, '-noout', '-text'] DCNL DCSP (_, out, _) = module.run_command(openssl_cert_cmd, check_rc=True) DCNL DCSP try: DCNL DCSP  DCSP not_after_str = re.search('\\s+Not DCSP After\\s*:\\s+(.*)', out.decode('utf8')).group(1) DCNL DCSP  DCSP not_after = datetime.datetime.fromtimestamp(time.mktime(time.strptime(not_after_str, '%b DCSP %d DCSP %H:%M:%S DCSP %Y DCSP %Z'))) DCNL DCSP except AttributeError: DCNL DCSP  DCSP module.fail_json(msg="No DCSP 'Not DCSP after' DCSP date DCSP found DCSP in DCSP {0}".format(cert_file)) DCNL DCSP except ValueError: DCNL DCSP  DCSP module.fail_json(msg="Failed DCSP to DCSP parse DCSP 'Not DCSP after' DCSP date DCSP of DCSP {0}".format(cert_file)) DCNL DCSP now = datetime.datetime.utcnow() DCNL DCSP return (not_after - now).days
def write_file(module, dest, content): DCNL  DCSP changed = False DCNL DCSP (_, tmpsrc) = tempfile.mkstemp() DCNL DCSP f = open(tmpsrc, 'wb') DCNL DCSP try: DCNL DCSP  DCSP f.write(content) DCNL DCSP except Exception as err: DCNL DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP create DCSP temporary DCSP content DCSP file: DCSP %s' % str(err))) DCNL DCSP f.close() DCNL DCSP checksum_src = None DCNL DCSP checksum_dest = None DCNL DCSP if (not os.path.exists(tmpsrc)): DCNL DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP module.fail_json(msg=('Source DCSP %s DCSP does DCSP not DCSP exist' % tmpsrc)) DCNL DCSP if (not os.access(tmpsrc, os.R_OK)): DCNL DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP module.fail_json(msg=('Source DCSP %s DCSP not DCSP readable' % tmpsrc)) DCNL DCSP checksum_src = module.sha1(tmpsrc) DCNL DCSP if os.path.exists(dest): DCNL DCSP  DCSP if (not os.access(dest, os.W_OK)): DCNL DCSP  DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Destination DCSP %s DCSP not DCSP writable' % dest)) DCNL DCSP  DCSP if (not os.access(dest, os.R_OK)): DCNL DCSP  DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Destination DCSP %s DCSP not DCSP readable' % dest)) DCNL DCSP  DCSP checksum_dest = module.sha1(dest) DCNL DCSP elif (not os.access(os.path.dirname(dest), os.W_OK)): DCNL DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP module.fail_json(msg=('Destination DCSP dir DCSP %s DCSP not DCSP writable' % os.path.dirname(dest))) DCNL DCSP if (checksum_src != checksum_dest): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP shutil.copyfile(tmpsrc, dest) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP except Exception as err: DCNL DCSP  DCSP  DCSP os.remove(tmpsrc) DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP copy DCSP %s DCSP to DCSP %s: DCSP %s' % (tmpsrc, dest, str(err)))) DCNL DCSP os.remove(tmpsrc) DCNL DCSP return changed
def regexp_extraction(string, _regexp, groups=1): DCNL  DCSP regexp_search = re.search(string=str(string), pattern=str(_regexp)) DCNL DCSP if regexp_search: DCNL DCSP  DCSP if (regexp_search.group(groups) != ''): DCNL DCSP  DCSP  DCSP return str(regexp_search.group(groups)) DCNL DCSP return None
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(balancer_vhost=dict(required=True, default=None, type='str'), balancer_url_suffix=dict(default='/balancer-manager/', type='str'), member_host=dict(type='str'), state=dict(type='str'), tls=dict(default=False, type='bool'), validate_certs=dict(default=True, type='bool')), supports_check_mode=True) DCNL DCSP if (HAS_BEAUTIFULSOUP is False): DCNL DCSP  DCSP module.fail_json(msg="python DCSP module DCSP 'BeautifulSoup' DCSP is DCSP required!") DCNL DCSP if (module.params['state'] != None): DCNL DCSP  DCSP states = module.params['state'].split(',') DCNL DCSP  DCSP if ((len(states) > 1) and (('present' in states) or ('enabled' in states))): DCNL DCSP  DCSP  DCSP module.fail_json(msg='state DCSP present/enabled DCSP is DCSP mutually DCSP exclusive DCSP with DCSP other DCSP states!') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for _state in states: DCNL DCSP  DCSP  DCSP  DCSP if (_state not in ['present', 'absent', 'enabled', 'disabled', 'drained', 'hot_standby', 'ignore_errors']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg="State DCSP can DCSP only DCSP take DCSP values DCSP amongst DCSP 'present', DCSP 'absent', DCSP 'enabled', DCSP 'disabled', DCSP 'drained', DCSP 'hot_standby', DCSP 'ignore_errors'.") DCNL DCSP else: DCNL DCSP  DCSP states = ['None'] DCNL DCSP mybalancer = Balancer(module.params['balancer_vhost'], module.params['balancer_url_suffix'], module=module, tls=module.params['tls']) DCNL DCSP if (module.params['member_host'] is None): DCNL DCSP  DCSP json_output_list = [] DCNL DCSP  DCSP for member in mybalancer.members: DCNL DCSP  DCSP  DCSP json_output_list.append({'host': member.host, 'status': member.status, 'protocol': member.protocol, 'port': member.port, 'path': member.path, 'attributes': member.attributes, 'management_url': member.management_url, 'balancer_url': member.balancer_url}) DCNL DCSP  DCSP module.exit_json(changed=False, members=json_output_list) DCNL DCSP else: DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP member_exists = False DCNL DCSP  DCSP member_status = {'disabled': False, 'drained': False, 'hot_standby': False, 'ignore_errors': False} DCNL DCSP  DCSP for mode in member_status.keys(): DCNL DCSP  DCSP  DCSP for state in states: DCNL DCSP  DCSP  DCSP  DCSP if (mode == state): DCNL DCSP  DCSP  DCSP  DCSP  DCSP member_status[mode] = True DCNL DCSP  DCSP  DCSP  DCSP elif ((mode == 'disabled') and (state == 'absent')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP member_status[mode] = True DCNL DCSP  DCSP for member in mybalancer.members: DCNL DCSP  DCSP  DCSP if (str(member.host) == str(module.params['member_host'])): DCNL DCSP  DCSP  DCSP  DCSP member_exists = True DCNL DCSP  DCSP  DCSP  DCSP if (module.params['state'] is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP member_status_before = member.status DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP member_status_after = member.status = member_status DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP member_status_after = member_status DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (member_status_before != member_status_after): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP json_output = {'host': member.host, 'status': member.status, 'protocol': member.protocol, 'port': member.port, 'path': member.path, 'attributes': member.attributes, 'management_url': member.management_url, 'balancer_url': member.balancer_url} DCNL DCSP  DCSP if member_exists: DCNL DCSP  DCSP  DCSP module.exit_json(changed=changed, member=json_output) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=(((str(module.params['member_host']) + ' DCSP is DCSP not DCSP a DCSP member DCSP of DCSP the DCSP balancer DCSP ') + str(module.params['balancer_vhost'])) + '!'))
def present(dest, username, password, crypt_scheme, create, check_mode): DCNL  DCSP if (crypt_scheme in apache_hashes): DCNL DCSP  DCSP context = htpasswd_context DCNL DCSP else: DCNL DCSP  DCSP context = CryptContext(schemes=([crypt_scheme] + apache_hashes)) DCNL DCSP if (not os.path.exists(dest)): DCNL DCSP  DCSP if (not create): DCNL DCSP  DCSP  DCSP raise ValueError(('Destination DCSP %s DCSP does DCSP not DCSP exist' % dest)) DCNL DCSP  DCSP if check_mode: DCNL DCSP  DCSP  DCSP return (('Create DCSP %s' % dest), True) DCNL DCSP  DCSP create_missing_directories(dest) DCNL DCSP  DCSP if (StrictVersion(passlib.__version__) >= StrictVersion('1.6')): DCNL DCSP  DCSP  DCSP ht = HtpasswdFile(dest, new=True, default_scheme=crypt_scheme, context=context) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ht = HtpasswdFile(dest, autoload=False, default=crypt_scheme, context=context) DCNL DCSP  DCSP if getattr(ht, 'set_password', None): DCNL DCSP  DCSP  DCSP ht.set_password(username, password) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ht.update(username, password) DCNL DCSP  DCSP ht.save() DCNL DCSP  DCSP return (('Created DCSP %s DCSP and DCSP added DCSP %s' % (dest, username)), True) DCNL DCSP else: DCNL DCSP  DCSP if (StrictVersion(passlib.__version__) >= StrictVersion('1.6')): DCNL DCSP  DCSP  DCSP ht = HtpasswdFile(dest, new=False, default_scheme=crypt_scheme, context=context) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ht = HtpasswdFile(dest, default=crypt_scheme, context=context) DCNL DCSP  DCSP found = None DCNL DCSP  DCSP if getattr(ht, 'check_password', None): DCNL DCSP  DCSP  DCSP found = ht.check_password(username, password) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP found = ht.verify(username, password) DCNL DCSP  DCSP if found: DCNL DCSP  DCSP  DCSP return (('%s DCSP already DCSP present' % username), False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP  DCSP if getattr(ht, 'set_password', None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP ht.set_password(username, password) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP ht.update(username, password) DCNL DCSP  DCSP  DCSP  DCSP ht.save() DCNL DCSP  DCSP  DCSP return (('Add/update DCSP %s' % username), True)
def absent(dest, username, check_mode): DCNL  DCSP if (StrictVersion(passlib.__version__) >= StrictVersion('1.6')): DCNL DCSP  DCSP ht = HtpasswdFile(dest, new=False) DCNL DCSP else: DCNL DCSP  DCSP ht = HtpasswdFile(dest) DCNL DCSP if (username not in ht.users()): DCNL DCSP  DCSP return (('%s DCSP not DCSP present' % username), False) DCNL DCSP else: DCNL DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP ht.delete(username) DCNL DCSP  DCSP  DCSP ht.save() DCNL DCSP  DCSP return (('Remove DCSP %s' % username), True)
def manage_issue(module, taiga_host, project_name, issue_subject, issue_priority, issue_status, issue_type, issue_severity, issue_description, issue_attachment, issue_attachment_description, issue_tags, state, check_mode=False): DCNL  DCSP changed = False DCNL DCSP try: DCNL DCSP  DCSP token = getenv('TAIGA_TOKEN') DCNL DCSP  DCSP if token: DCNL DCSP  DCSP  DCSP api = TaigaAPI(host=taiga_host, token=token) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP api = TaigaAPI(host=taiga_host) DCNL DCSP  DCSP  DCSP username = getenv('TAIGA_USERNAME') DCNL DCSP  DCSP  DCSP password = getenv('TAIGA_PASSWORD') DCNL DCSP  DCSP  DCSP if (not any([username, password])): DCNL DCSP  DCSP  DCSP  DCSP return (False, changed, 'Missing DCSP credentials', {}) DCNL DCSP  DCSP  DCSP api.auth(username=username, password=password) DCNL DCSP  DCSP user_id = api.me().id DCNL DCSP  DCSP project_list = filter((lambda x: (x.name == project_name)), api.projects.list(member=user_id)) DCNL DCSP  DCSP if (len(project_list) != 1): DCNL DCSP  DCSP  DCSP return (False, changed, ('Unable DCSP to DCSP find DCSP project DCSP %s' % project_name), {}) DCNL DCSP  DCSP project = project_list[0] DCNL DCSP  DCSP project_id = project.id DCNL DCSP  DCSP priority_list = filter((lambda x: (x.name == issue_priority)), api.priorities.list(project=project_id)) DCNL DCSP  DCSP if (len(priority_list) != 1): DCNL DCSP  DCSP  DCSP return (False, changed, ('Unable DCSP to DCSP find DCSP issue DCSP priority DCSP %s DCSP for DCSP project DCSP %s' % (issue_priority, project_name)), {}) DCNL DCSP  DCSP priority_id = priority_list[0].id DCNL DCSP  DCSP status_list = filter((lambda x: (x.name == issue_status)), api.issue_statuses.list(project=project_id)) DCNL DCSP  DCSP if (len(status_list) != 1): DCNL DCSP  DCSP  DCSP return (False, changed, ('Unable DCSP to DCSP find DCSP issue DCSP status DCSP %s DCSP for DCSP project DCSP %s' % (issue_status, project_name)), {}) DCNL DCSP  DCSP status_id = status_list[0].id DCNL DCSP  DCSP type_list = filter((lambda x: (x.name == issue_type)), project.list_issue_types()) DCNL DCSP  DCSP if (len(type_list) != 1): DCNL DCSP  DCSP  DCSP return (False, changed, ('Unable DCSP to DCSP find DCSP issue DCSP type DCSP %s DCSP for DCSP project DCSP %s' % (issue_type, project_name)), {}) DCNL DCSP  DCSP type_id = type_list[0].id DCNL DCSP  DCSP severity_list = filter((lambda x: (x.name == issue_severity)), project.list_severities()) DCNL DCSP  DCSP if (len(severity_list) != 1): DCNL DCSP  DCSP  DCSP return (False, changed, ('Unable DCSP to DCSP find DCSP severity DCSP %s DCSP for DCSP project DCSP %s' % (issue_severity, project_name)), {}) DCNL DCSP  DCSP severity_id = severity_list[0].id DCNL DCSP  DCSP issue = {'project': project_name, 'subject': issue_subject, 'priority': issue_priority, 'status': issue_status, 'type': issue_type, 'severity': issue_severity, 'description': issue_description, 'tags': issue_tags} DCNL DCSP  DCSP matching_issue_list = filter((lambda x: ((x.subject == issue_subject) and (x.type == type_id))), project.list_issues()) DCNL DCSP  DCSP matching_issue_list_len = len(matching_issue_list) DCNL DCSP  DCSP if (matching_issue_list_len == 0): DCNL DCSP  DCSP  DCSP if (state == 'present'): DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_issue = project.add_issue(issue_subject, priority_id, status_id, type_id, severity_id, tags=issue_tags, description=issue_description) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if issue_attachment: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_issue.attach(issue_attachment, description=issue_attachment_description) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP issue['attachment'] = issue_attachment DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP issue['attachment_description'] = issue_attachment_description DCNL DCSP  DCSP  DCSP  DCSP return (True, changed, 'Issue DCSP created', issue) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return (True, changed, 'Issue DCSP does DCSP not DCSP exist', {}) DCNL DCSP  DCSP elif (matching_issue_list_len == 1): DCNL DCSP  DCSP  DCSP if (state == 'absent'): DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP  DCSP if (not check_mode): DCNL DCSP  DCSP  DCSP  DCSP  DCSP matching_issue_list[0].delete() DCNL DCSP  DCSP  DCSP  DCSP return (True, changed, 'Issue DCSP deleted', {}) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return (True, changed, 'Issue DCSP already DCSP exists', {}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (False, changed, ('More DCSP than DCSP one DCSP issue DCSP with DCSP subject DCSP %s DCSP in DCSP project DCSP %s' % (issue_subject, project_name)), {}) DCNL DCSP except TaigaException: DCNL DCSP  DCSP msg = ('An DCSP exception DCSP happened: DCSP %s' % sys.exc_info()[1]) DCNL DCSP  DCSP return (False, changed, msg, {})
def remove_value(module): DCNL  DCSP consul_api = get_consul_api(module) DCNL DCSP key = module.params.get('key') DCNL DCSP value = module.params.get('value') DCNL DCSP (index, existing) = consul_api.kv.get(key, recurse=module.params.get('recurse')) DCNL DCSP changed = (existing != None) DCNL DCSP if (changed and (not module.check_mode)): DCNL DCSP  DCSP consul_api.kv.delete(key, module.params.get('recurse')) DCNL DCSP module.exit_json(changed=changed, index=index, key=key, data=existing)
def add(module): DCNL  DCSP check = parse_check(module) DCNL DCSP service = parse_service(module) DCNL DCSP if ((not service) and (not check)): DCNL DCSP  DCSP module.fail_json(msg='a DCSP name DCSP and DCSP port DCSP are DCSP required DCSP to DCSP register DCSP a DCSP service') DCNL DCSP if service: DCNL DCSP  DCSP if check: DCNL DCSP  DCSP  DCSP service.add_check(check) DCNL DCSP  DCSP add_service(module, service) DCNL DCSP elif check: DCNL DCSP  DCSP add_check(module, check)
def remove(module): DCNL  DCSP service_id = (module.params.get('service_id') or module.params.get('service_name')) DCNL DCSP check_id = (module.params.get('check_id') or module.params.get('check_name')) DCNL DCSP if (not (service_id or check_id)): DCNL DCSP  DCSP module.fail_json(msg='services DCSP and DCSP checks DCSP are DCSP removed DCSP by DCSP id DCSP or DCSP name. DCSP please DCSP supply DCSP a DCSP service DCSP id/name DCSP or DCSP a DCSP check DCSP id/name') DCNL DCSP if service_id: DCNL DCSP  DCSP remove_service(module, service_id) DCNL DCSP else: DCNL DCSP  DCSP remove_check(module, check_id)
def add_check(module, check): DCNL  DCSP if ((not check.name) and (not service_id)): DCNL DCSP  DCSP module.fail_json(msg='a DCSP check DCSP name DCSP is DCSP required DCSP for DCSP a DCSP node DCSP level DCSP check, DCSP one DCSP not DCSP attached DCSP to DCSP a DCSP service') DCNL DCSP consul_api = get_consul_api(module) DCNL DCSP check.register(consul_api) DCNL DCSP module.exit_json(changed=True, check_id=check.check_id, check_name=check.name, script=check.script, interval=check.interval, ttl=check.ttl, http=check.http, timeout=check.timeout, service_id=check.service_id)
def remove_check(module, check_id): DCNL  DCSP consul_api = get_consul_api(module) DCNL DCSP if (check_id in consul_api.agent.checks()): DCNL DCSP  DCSP consul_api.agent.check.deregister(check_id) DCNL DCSP  DCSP module.exit_json(changed=True, id=check_id) DCNL DCSP module.exit_json(changed=False, id=check_id)
def add_service(module, service): DCNL  DCSP result = service DCNL DCSP changed = False DCNL DCSP consul_api = get_consul_api(module) DCNL DCSP existing = get_service_by_id_or_name(consul_api, service.id) DCNL DCSP if (service.has_checks() or (not existing) or (not (existing == service))): DCNL DCSP  DCSP service.register(consul_api) DCNL DCSP  DCSP registered = get_service_by_id_or_name(consul_api, service.id) DCNL DCSP  DCSP if registered: DCNL DCSP  DCSP  DCSP result = registered DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed, service_id=result.id, service_name=result.name, service_port=result.port, checks=[check.to_dict() for check in service.checks], tags=result.tags)
def remove_service(module, service_id): DCNL  DCSP consul_api = get_consul_api(module) DCNL DCSP service = get_service_by_id_or_name(consul_api, service_id) DCNL DCSP if service: DCNL DCSP  DCSP consul_api.agent.service.deregister(service_id) DCNL DCSP  DCSP module.exit_json(changed=True, id=service_id) DCNL DCSP module.exit_json(changed=False, id=service_id)
def get_service_by_id_or_name(consul_api, service_id_or_name): DCNL  DCSP for (name, service) in consul_api.agent.services().items(): DCNL DCSP  DCSP if ((service['ID'] == service_id_or_name) or (service['Service'] == service_id_or_name)): DCNL DCSP  DCSP  DCSP return ConsulService(loaded=service)
@api_wrapper DCNL def get_pool(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.pools.get(name=module.params['pool']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def get_volume(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.volumes.get(name=module.params['name']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def create_volume(module, system): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP volume = system.volumes.create(name=module.params['name'], pool=get_pool(module, system)) DCNL DCSP  DCSP if module.params['size']: DCNL DCSP  DCSP  DCSP size = Capacity(module.params['size']).roundup((64 * KiB)) DCNL DCSP  DCSP  DCSP volume.update_size(size) DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def update_volume(module, volume): DCNL  DCSP changed = False DCNL DCSP if module.params['size']: DCNL DCSP  DCSP size = Capacity(module.params['size']).roundup((64 * KiB)) DCNL DCSP  DCSP if (volume.get_size() != size): DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP volume.update_size(size) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed)
@api_wrapper DCNL def delete_volume(module, volume): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP volume.delete() DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def get_pool(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.pools.get(name=module.params['pool']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def get_filesystem(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.filesystems.get(name=module.params['name']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def create_filesystem(module, system): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP filesystem = system.filesystems.create(name=module.params['name'], pool=get_pool(module, system)) DCNL DCSP  DCSP if module.params['size']: DCNL DCSP  DCSP  DCSP size = Capacity(module.params['size']).roundup((64 * KiB)) DCNL DCSP  DCSP  DCSP filesystem.update_size(size) DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def update_filesystem(module, filesystem): DCNL  DCSP changed = False DCNL DCSP if module.params['size']: DCNL DCSP  DCSP size = Capacity(module.params['size']).roundup((64 * KiB)) DCNL DCSP  DCSP if (filesystem.get_size() != size): DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP filesystem.update_size(size) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed)
@api_wrapper DCNL def delete_filesystem(module, filesystem): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP filesystem.delete() DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def get_filesystem(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.filesystems.get(name=module.params['filesystem']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def get_export(module, filesystem, system): DCNL  DCSP export = None DCNL DCSP exports_to_list = system.exports.to_list() DCNL DCSP for e in exports_to_list: DCNL DCSP  DCSP if (e.get_export_path() == module.params['name']): DCNL DCSP  DCSP  DCSP export = e DCNL DCSP  DCSP  DCSP break DCNL DCSP return export
@api_wrapper DCNL def update_export(module, export, filesystem, system): DCNL  DCSP changed = False DCNL DCSP name = module.params['name'] DCNL DCSP client_list = module.params['client_list'] DCNL DCSP if (export is None): DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP export = system.exports.create(export_path=name, filesystem=filesystem) DCNL DCSP  DCSP  DCSP if client_list: DCNL DCSP  DCSP  DCSP  DCSP export.update_permissions(client_list) DCNL DCSP  DCSP changed = True DCNL DCSP elif client_list: DCNL DCSP  DCSP if (set(map(transform, unmunchify(export.get_permissions()))) != set(map(transform, client_list))): DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP export.update_permissions(client_list) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed)
@api_wrapper DCNL def delete_export(module, export): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP export.delete() DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def get_pool(module, system): DCNL  DCSP try: DCNL DCSP  DCSP return system.pools.get(name=module.params['name']) DCNL DCSP except: DCNL DCSP  DCSP return None
@api_wrapper DCNL def create_pool(module, system): DCNL  DCSP name = module.params['name'] DCNL DCSP size = module.params['size'] DCNL DCSP vsize = module.params['vsize'] DCNL DCSP ssd_cache = module.params['ssd_cache'] DCNL DCSP if (not module.check_mode): DCNL DCSP  DCSP if ((not size) and (not vsize)): DCNL DCSP  DCSP  DCSP pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity('1TB')) DCNL DCSP  DCSP elif (size and (not vsize)): DCNL DCSP  DCSP  DCSP pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(size)) DCNL DCSP  DCSP elif ((not size) and vsize): DCNL DCSP  DCSP  DCSP pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity(vsize)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(vsize)) DCNL DCSP  DCSP if (not ssd_cache): DCNL DCSP  DCSP  DCSP pool.update_ssd_enabled(ssd_cache) DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def update_pool(module, system, pool): DCNL  DCSP changed = False DCNL DCSP size = module.params['size'] DCNL DCSP vsize = module.params['vsize'] DCNL DCSP ssd_cache = module.params['ssd_cache'] DCNL DCSP if size: DCNL DCSP  DCSP physical_capacity = Capacity(size).roundup(((6 * 64) * KiB)) DCNL DCSP  DCSP if (pool.get_physical_capacity() != physical_capacity): DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP pool.update_physical_capacity(physical_capacity) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP if vsize: DCNL DCSP  DCSP virtual_capacity = Capacity(vsize).roundup(((6 * 64) * KiB)) DCNL DCSP  DCSP if (pool.get_virtual_capacity() != virtual_capacity): DCNL DCSP  DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP  DCSP pool.update_virtual_capacity(virtual_capacity) DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP if (pool.get_ssd_enabled() != ssd_cache): DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP pool.update_ssd_enabled(ssd_cache) DCNL DCSP  DCSP changed = True DCNL DCSP module.exit_json(changed=changed)
@api_wrapper DCNL def delete_pool(module, pool): DCNL  DCSP if (not module.check_mode): DCNL DCSP  DCSP pool.delete() DCNL DCSP module.exit_json(changed=True)
@api_wrapper DCNL def get_export(module, system): DCNL  DCSP try: DCNL DCSP  DCSP export = system.exports.get(export_path=module.params['export']) DCNL DCSP except: DCNL DCSP  DCSP module.fail_json(msg='Export DCSP with DCSP export DCSP path DCSP {} DCSP not DCSP found'.format(module.params['export'])) DCNL DCSP return export
@api_wrapper DCNL def update_client(module, export): DCNL  DCSP changed = False DCNL DCSP client = module.params['client'] DCNL DCSP access_mode = module.params['access_mode'] DCNL DCSP no_root_squash = module.params['no_root_squash'] DCNL DCSP client_list = export.get_permissions() DCNL DCSP client_not_in_list = True DCNL DCSP for (index, item) in enumerate(client_list): DCNL DCSP  DCSP if (item.client == client): DCNL DCSP  DCSP  DCSP client_not_in_list = False DCNL DCSP  DCSP  DCSP if (item.access != access_mode): DCNL DCSP  DCSP  DCSP  DCSP item.access = access_mode DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP if (item.no_root_squash is not no_root_squash): DCNL DCSP  DCSP  DCSP  DCSP item.no_root_squash = no_root_squash DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP if client_not_in_list: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP client_list.append(Munch(client=client, access=access_mode, no_root_squash=no_root_squash)) DCNL DCSP if changed: DCNL DCSP  DCSP for (index, item) in enumerate(client_list): DCNL DCSP  DCSP  DCSP client_list[index] = unmunchify(item) DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP export.update_permissions(client_list) DCNL DCSP module.exit_json(changed=changed)
@api_wrapper DCNL def delete_client(module, export): DCNL  DCSP changed = False DCNL DCSP client = module.params['client'] DCNL DCSP client_list = export.get_permissions() DCNL DCSP for (index, item) in enumerate(client_list): DCNL DCSP  DCSP if (item.client == client): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP del client_list[index] DCNL DCSP if changed: DCNL DCSP  DCSP for (index, item) in enumerate(client_list): DCNL DCSP  DCSP  DCSP client_list[index] = unmunchify(item) DCNL DCSP  DCSP if (not module.check_mode): DCNL DCSP  DCSP  DCSP export.update_permissions(client_list) DCNL DCSP module.exit_json(changed=changed)
def head_splitter(headfile, remote, module=None, fail_on_error=False): DCNL  DCSP res = None DCNL DCSP if os.path.exists(headfile): DCNL DCSP  DCSP rawdata = None DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP f = open(headfile, 'r') DCNL DCSP  DCSP  DCSP rawdata = f.readline() DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP if (fail_on_error and module): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Unable DCSP to DCSP read DCSP %s' % headfile)) DCNL DCSP  DCSP if rawdata: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP rawdata = rawdata.replace(('refs/remotes/%s' % remote), '', 1) DCNL DCSP  DCSP  DCSP  DCSP refparts = rawdata.split(' DCSP ') DCNL DCSP  DCSP  DCSP  DCSP newref = refparts[(-1)] DCNL DCSP  DCSP  DCSP  DCSP nrefparts = newref.split('/', 2) DCNL DCSP  DCSP  DCSP  DCSP res = nrefparts[(-1)].rstrip('\n') DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP if (fail_on_error and module): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg=("Unable DCSP to DCSP split DCSP head DCSP from DCSP '%s'" % rawdata)) DCNL DCSP return res
def get_version(module, git_path, dest, ref='HEAD'): DCNL  DCSP cmd = ('%s DCSP rev-parse DCSP %s' % (git_path, ref)) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, cwd=dest) DCNL DCSP sha = to_native(stdout).rstrip('\n') DCNL DCSP return sha
def clone(git_path, module, repo, dest, remote, depth, version, bare, reference, refspec, verify_commit): DCNL  DCSP dest_dirname = os.path.dirname(dest) DCNL DCSP try: DCNL DCSP  DCSP os.makedirs(dest_dirname) DCNL DCSP except: DCNL DCSP  DCSP pass DCNL DCSP cmd = [git_path, 'clone'] DCNL DCSP if bare: DCNL DCSP  DCSP cmd.append('--bare') DCNL DCSP else: DCNL DCSP  DCSP cmd.extend(['--origin', remote]) DCNL DCSP if depth: DCNL DCSP  DCSP if ((version == 'HEAD') or refspec or is_remote_branch(git_path, module, dest, repo, version) or is_remote_tag(git_path, module, dest, repo, version)): DCNL DCSP  DCSP  DCSP cmd.extend(['--depth', str(depth)]) DCNL DCSP if reference: DCNL DCSP  DCSP cmd.extend(['--reference', str(reference)]) DCNL DCSP cmd.extend([repo, dest]) DCNL DCSP module.run_command(cmd, check_rc=True, cwd=dest_dirname) DCNL DCSP if bare: DCNL DCSP  DCSP if (remote != 'origin'): DCNL DCSP  DCSP  DCSP module.run_command([git_path, 'remote', 'add', remote, repo], check_rc=True, cwd=dest) DCNL DCSP if refspec: DCNL DCSP  DCSP cmd = [git_path, 'fetch'] DCNL DCSP  DCSP if depth: DCNL DCSP  DCSP  DCSP cmd.extend(['--depth', str(depth)]) DCNL DCSP  DCSP cmd.extend([remote, refspec]) DCNL DCSP  DCSP module.run_command(cmd, check_rc=True, cwd=dest) DCNL DCSP if verify_commit: DCNL DCSP  DCSP verify_commit_sign(git_path, module, dest, version)
def reset(git_path, module, dest): DCNL  DCSP cmd = ('%s DCSP reset DCSP --hard DCSP HEAD' % (git_path,)) DCNL DCSP return module.run_command(cmd, check_rc=True, cwd=dest)
def get_diff(module, git_path, dest, repo, remote, depth, bare, before, after): DCNL  DCSP if (before is None): DCNL DCSP  DCSP return {'prepared': ('>> DCSP Newly DCSP checked DCSP out DCSP %s' % after)} DCNL DCSP elif (before != after): DCNL DCSP  DCSP git_version_used = git_version(git_path, module) DCNL DCSP  DCSP fetch(git_path, module, repo, dest, after, remote, depth, bare, '', git_version_used) DCNL DCSP  DCSP cmd = ('%s DCSP diff DCSP %s DCSP %s' % (git_path, before, after)) DCNL DCSP  DCSP (rc, out, err) = module.run_command(cmd, cwd=dest) DCNL DCSP  DCSP if ((rc == 0) and out): DCNL DCSP  DCSP  DCSP return {'prepared': out} DCNL DCSP  DCSP elif (rc == 0): DCNL DCSP  DCSP  DCSP return {'prepared': ('>> DCSP No DCSP visual DCSP differences DCSP between DCSP %s DCSP and DCSP %s' % (before, after))} DCNL DCSP  DCSP elif err: DCNL DCSP  DCSP  DCSP return {'prepared': ('>> DCSP Failed DCSP to DCSP get DCSP proper DCSP diff DCSP between DCSP %s DCSP and DCSP %s:\n>> DCSP %s' % (before, after, err))} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return {'prepared': ('>> DCSP Failed DCSP to DCSP get DCSP proper DCSP diff DCSP between DCSP %s DCSP and DCSP %s' % (before, after))} DCNL DCSP return {}
def get_head_branch(git_path, module, dest, remote, bare=False): DCNL  DCSP if bare: DCNL DCSP  DCSP repo_path = dest DCNL DCSP else: DCNL DCSP  DCSP repo_path = os.path.join(dest, '.git') DCNL DCSP if os.path.isfile(repo_path): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP git_conf = open(repo_path, 'rb') DCNL DCSP  DCSP  DCSP for line in git_conf: DCNL DCSP  DCSP  DCSP  DCSP config_val = line.split(b(':'), 1) DCNL DCSP  DCSP  DCSP  DCSP if (config_val[0].strip() == b('gitdir')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP gitdir = to_native(config_val[1].strip(), errors='surrogate_or_strict') DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return '' DCNL DCSP  DCSP  DCSP if os.path.isabs(gitdir): DCNL DCSP  DCSP  DCSP  DCSP repo_path = gitdir DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP repo_path = os.path.join(repo_path.split('.git')[0], gitdir) DCNL DCSP  DCSP except (IOError, AttributeError): DCNL DCSP  DCSP  DCSP return '' DCNL DCSP headfile = os.path.join(repo_path, 'HEAD') DCNL DCSP if is_not_a_branch(git_path, module, dest): DCNL DCSP  DCSP headfile = os.path.join(repo_path, 'refs', 'remotes', remote, 'HEAD') DCNL DCSP branch = head_splitter(headfile, remote, module=module, fail_on_error=True) DCNL DCSP return branch
def get_remote_url(git_path, module, dest, remote): DCNL  DCSP command = [git_path, 'ls-remote', '--get-url', remote] DCNL DCSP (rc, out, err) = module.run_command(command, cwd=dest) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP return None DCNL DCSP return to_native(out).rstrip('\n')
def set_remote_url(git_path, module, repo, dest, remote): DCNL  DCSP remote_url = get_remote_url(git_path, module, dest, remote) DCNL DCSP if ((remote_url == repo) or (unfrackgitpath(remote_url) == unfrackgitpath(repo))): DCNL DCSP  DCSP return False DCNL DCSP command = [git_path, 'remote', 'set-url', remote, repo] DCNL DCSP (rc, out, err) = module.run_command(command, cwd=dest) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP label = ('set DCSP a DCSP new DCSP url DCSP %s DCSP for DCSP %s' % (repo, remote)) DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP %s: DCSP %s DCSP %s' % (label, out, err))) DCNL DCSP return (remote_url is not None)
def fetch(git_path, module, repo, dest, version, remote, depth, bare, refspec, git_version_used): DCNL  DCSP set_remote_url(git_path, module, repo, dest, remote) DCNL DCSP commands = [] DCNL DCSP fetch_str = 'download DCSP remote DCSP objects DCSP and DCSP refs' DCNL DCSP fetch_cmd = [git_path, 'fetch'] DCNL DCSP refspecs = [] DCNL DCSP if depth: DCNL DCSP  DCSP currenthead = get_head_branch(git_path, module, dest, remote) DCNL DCSP  DCSP if refspec: DCNL DCSP  DCSP  DCSP refspecs.append(refspec) DCNL DCSP  DCSP elif (version == 'HEAD'): DCNL DCSP  DCSP  DCSP refspecs.append(currenthead) DCNL DCSP  DCSP elif is_remote_branch(git_path, module, dest, repo, version): DCNL DCSP  DCSP  DCSP if (currenthead != version): DCNL DCSP  DCSP  DCSP  DCSP refspecs.append(('+refs/heads/%s:refs/heads/%s' % (version, version))) DCNL DCSP  DCSP  DCSP  DCSP refspecs.append(('+refs/heads/%s:refs/remotes/%s/%s' % (version, remote, version))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP refspecs.append(version) DCNL DCSP  DCSP elif is_remote_tag(git_path, module, dest, repo, version): DCNL DCSP  DCSP  DCSP refspecs.append(((('+refs/tags/' + version) + ':refs/tags/') + version)) DCNL DCSP  DCSP if refspecs: DCNL DCSP  DCSP  DCSP fetch_cmd.extend(['--depth', str(depth)]) DCNL DCSP if ((not depth) or (not refspecs)): DCNL DCSP  DCSP if bare: DCNL DCSP  DCSP  DCSP refspecs = ['+refs/heads/*:refs/heads/*', '+refs/tags/*:refs/tags/*'] DCNL DCSP  DCSP elif (git_version_used >= LooseVersion('1.9')): DCNL DCSP  DCSP  DCSP fetch_cmd.append('--tags') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP commands.append((fetch_str, (fetch_cmd + [remote]))) DCNL DCSP  DCSP  DCSP refspecs = ['+refs/tags/*:refs/tags/*'] DCNL DCSP  DCSP if refspec: DCNL DCSP  DCSP  DCSP refspecs.append(refspec) DCNL DCSP fetch_cmd.extend([remote]) DCNL DCSP commands.append((fetch_str, (fetch_cmd + refspecs))) DCNL DCSP for (label, command) in commands: DCNL DCSP  DCSP (rc, out, err) = module.run_command(command, cwd=dest) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP %s: DCSP %s DCSP %s' % (label, out, err)), cmd=command)
def submodule_update(git_path, module, dest, track_submodules, force=False): DCNL  DCSP params = get_submodule_update_params(module, git_path, dest) DCNL DCSP if (not os.path.exists(os.path.join(dest, '.gitmodules'))): DCNL DCSP  DCSP return (0, '', '') DCNL DCSP cmd = [git_path, 'submodule', 'sync'] DCNL DCSP (rc, out, err) = module.run_command(cmd, check_rc=True, cwd=dest) DCNL DCSP if (('remote' in params) and track_submodules): DCNL DCSP  DCSP cmd = [git_path, 'submodule', 'update', '--init', '--recursive', '--remote'] DCNL DCSP else: DCNL DCSP  DCSP cmd = [git_path, 'submodule', 'update', '--init', '--recursive'] DCNL DCSP if force: DCNL DCSP  DCSP cmd.append('--force') DCNL DCSP (rc, out, err) = module.run_command(cmd, cwd=dest) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=(('Failed DCSP to DCSP init/update DCSP submodules: DCSP %s' % out) + err)) DCNL DCSP return (rc, out, err)
def set_remote_branch(git_path, module, dest, remote, version, depth): DCNL  DCSP branchref = ('+refs/heads/%s:refs/heads/%s' % (version, version)) DCNL DCSP branchref += (' DCSP +refs/heads/%s:refs/remotes/%s/%s' % (version, remote, version)) DCNL DCSP cmd = ('%s DCSP fetch DCSP --depth=%s DCSP %s DCSP %s' % (git_path, depth, remote, branchref)) DCNL DCSP (rc, out, err) = module.run_command(cmd, cwd=dest) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP fetch DCSP branch DCSP from DCSP remote: DCSP %s' % version), stdout=out, stderr=err, rc=rc)
def git_version(git_path, module): DCNL  DCSP cmd = ('%s DCSP --version' % git_path) DCNL DCSP (rc, out, err) = module.run_command(cmd) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP return None DCNL DCSP rematch = re.search('git DCSP version DCSP (.*)$', to_native(out)) DCNL DCSP if (not rematch): DCNL DCSP  DCSP return None DCNL DCSP return LooseVersion(rematch.groups()[0])
def query_package(module, name): DCNL  DCSP (rc, out, err) = module.run_command(('%s DCSP -p DCSP -v' % PKGIN_PATH)) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP pflag = '-p' DCNL DCSP  DCSP splitchar = ';' DCNL DCSP else: DCNL DCSP  DCSP pflag = '' DCNL DCSP  DCSP splitchar = ' DCSP ' DCNL DCSP (rc, out, err) = module.run_command(('%s DCSP %s DCSP search DCSP "^%s$"' % (PKGIN_PATH, pflag, name))) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP packages = out.split('\n') DCNL DCSP  DCSP for package in packages: DCNL DCSP  DCSP  DCSP (pkgname_with_version, raw_state) = package.split(splitchar)[0:2] DCNL DCSP  DCSP  DCSP pkg_search_obj = re.search('^(.*?)\\-[0-9][0-9.]*(nb[0-9]+)*', pkgname_with_version, re.M) DCNL DCSP  DCSP  DCSP if (not pkg_search_obj): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP pkgname_without_version = pkg_search_obj.group(1) DCNL DCSP  DCSP  DCSP if (name != pkgname_without_version): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (raw_state == '<'): DCNL DCSP  DCSP  DCSP  DCSP return 'outdated' DCNL DCSP  DCSP  DCSP elif ((raw_state == '=') or (raw_state == '>')): DCNL DCSP  DCSP  DCSP  DCSP return 'present' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return False
def is_pubkey(string): DCNL  DCSP pgp_regex = '.*?(-----BEGIN DCSP PGP DCSP PUBLIC DCSP KEY DCSP BLOCK-----.*?-----END DCSP PGP DCSP PUBLIC DCSP KEY DCSP BLOCK-----).*' DCNL DCSP return re.match(pgp_regex, string, re.DOTALL)
def get_cache_mtime(): DCNL  DCSP if os.path.exists(APT_UPDATE_SUCCESS_STAMP_PATH): DCNL DCSP  DCSP return os.stat(APT_UPDATE_SUCCESS_STAMP_PATH).st_mtime DCNL DCSP elif os.path.exists(APT_LISTS_PATH): DCNL DCSP  DCSP return os.stat(APT_LISTS_PATH).st_mtime DCNL DCSP else: DCNL DCSP  DCSP return 0
def get_updated_cache_time(): DCNL  DCSP cache_mtime = get_cache_mtime() DCNL DCSP mtimestamp = datetime.datetime.fromtimestamp(cache_mtime) DCNL DCSP updated_cache_time = int(time.mktime(mtimestamp.timetuple())) DCNL DCSP return (mtimestamp, updated_cache_time)
def get_cache(module): DCNL  DCSP cache = None DCNL DCSP try: DCNL DCSP  DCSP cache = apt.Cache() DCNL DCSP except SystemError: DCNL DCSP  DCSP e = get_exception() DCNL DCSP  DCSP if ('/var/lib/apt/lists/' in str(e).lower()): DCNL DCSP  DCSP  DCSP retries = 0 DCNL DCSP  DCSP  DCSP while (retries < 2): DCNL DCSP  DCSP  DCSP  DCSP (rc, so, se) = module.run_command(['apt-get', 'update', '-q']) DCNL DCSP  DCSP  DCSP  DCSP retries += 1 DCNL DCSP  DCSP  DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('Updating DCSP the DCSP cache DCSP to DCSP correct DCSP corrupt DCSP package DCSP lists DCSP failed:\n%s\n%s' % (str(e), (str(so) + str(se))))) DCNL DCSP  DCSP  DCSP cache = apt.Cache() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg=str(e)) DCNL DCSP return cache
def split_name_version(name): DCNL  DCSP prefix = '' DCNL DCSP if (name[0] in ['-', '~', '+']): DCNL DCSP  DCSP prefix = name[0] DCNL DCSP  DCSP name = name[1:] DCNL DCSP version_check = re.compile('^(.*?)((?:<|>|<=|>=|=)[0-9.-]*)?$') DCNL DCSP try: DCNL DCSP  DCSP reres = version_check.match(name) DCNL DCSP  DCSP (name, version) = reres.groups() DCNL DCSP  DCSP return (prefix, name, version) DCNL DCSP except: DCNL DCSP  DCSP return (prefix, name, None)
def get_installed_state(m, packages): DCNL  DCSP cmd = get_cmd(m, 'search') DCNL DCSP cmd.extend(['--match-exact', '--details', '--installed-only']) DCNL DCSP cmd.extend(packages) DCNL DCSP return parse_zypper_xml(m, cmd, fail_not_found=False)[0]
def get_cmd(m, subcommand): DCNL  DCSP is_install = (subcommand in ['install', 'update', 'patch']) DCNL DCSP is_refresh = (subcommand == 'refresh') DCNL DCSP cmd = ['/usr/bin/zypper', '--quiet', '--non-interactive', '--xmlout'] DCNL DCSP if ((is_install or is_refresh) and m.params['disable_gpg_check']): DCNL DCSP  DCSP cmd.append('--no-gpg-checks') DCNL DCSP cmd.append(subcommand) DCNL DCSP if ((subcommand != 'patch') and (not is_refresh)): DCNL DCSP  DCSP cmd.extend(['--type', m.params['type']]) DCNL DCSP if (m.check_mode and (subcommand != 'search')): DCNL DCSP  DCSP cmd.append('--dry-run') DCNL DCSP if is_install: DCNL DCSP  DCSP cmd.append('--auto-agree-with-licenses') DCNL DCSP  DCSP if m.params['disable_recommends']: DCNL DCSP  DCSP  DCSP cmd.append('--no-recommends') DCNL DCSP  DCSP if m.params['force']: DCNL DCSP  DCSP  DCSP cmd.append('--force') DCNL DCSP  DCSP if m.params['oldpackage']: DCNL DCSP  DCSP  DCSP cmd.append('--oldpackage') DCNL DCSP return cmd
def package_present(m, name, want_latest): DCNL  DCSP retvals = {'rc': 0, 'stdout': '', 'stderr': ''} DCNL DCSP (name_install, name_remove, urls) = get_want_state(m, name) DCNL DCSP install_version = [(p + name_install[p]) for p in name_install if name_install[p]] DCNL DCSP remove_version = [(p + name_remove[p]) for p in name_remove if name_remove[p]] DCNL DCSP if (install_version or remove_version): DCNL DCSP  DCSP m.params['oldpackage'] = True DCNL DCSP if (not want_latest): DCNL DCSP  DCSP install_and_remove = name_install.copy() DCNL DCSP  DCSP install_and_remove.update(name_remove) DCNL DCSP  DCSP prerun_state = get_installed_state(m, install_and_remove) DCNL DCSP  DCSP name_install = [p for p in name_install if (p not in prerun_state)] DCNL DCSP  DCSP name_remove = [p for p in name_remove if (p in prerun_state)] DCNL DCSP  DCSP if (not any((name_install, name_remove, urls, install_version, remove_version))): DCNL DCSP  DCSP  DCSP return (None, retvals) DCNL DCSP cmd = get_cmd(m, 'install') DCNL DCSP cmd.append('--') DCNL DCSP cmd.extend(urls) DCNL DCSP cmd.extend(install_version) DCNL DCSP cmd.extend([('-%s' % p) for p in remove_version]) DCNL DCSP cmd.extend(name_install) DCNL DCSP cmd.extend([('-%s' % p) for p in name_remove]) DCNL DCSP retvals['cmd'] = cmd DCNL DCSP (result, retvals['rc'], retvals['stdout'], retvals['stderr']) = parse_zypper_xml(m, cmd) DCNL DCSP return (result, retvals)
def package_update_all(m): DCNL  DCSP retvals = {'rc': 0, 'stdout': '', 'stderr': ''} DCNL DCSP if (m.params['type'] == 'patch'): DCNL DCSP  DCSP cmdname = 'patch' DCNL DCSP else: DCNL DCSP  DCSP cmdname = 'update' DCNL DCSP cmd = get_cmd(m, cmdname) DCNL DCSP retvals['cmd'] = cmd DCNL DCSP (result, retvals['rc'], retvals['stdout'], retvals['stderr']) = parse_zypper_xml(m, cmd) DCNL DCSP return (result, retvals)
def package_absent(m, name): DCNL  DCSP retvals = {'rc': 0, 'stdout': '', 'stderr': ''} DCNL DCSP (name_install, name_remove, urls) = get_want_state(m, name, remove=True) DCNL DCSP if name_install: DCNL DCSP  DCSP m.fail_json(msg="Can DCSP not DCSP combine DCSP '+' DCSP prefix DCSP with DCSP state=remove/absent.") DCNL DCSP if urls: DCNL DCSP  DCSP m.fail_json(msg='Can DCSP not DCSP remove DCSP via DCSP URL.') DCNL DCSP if (m.params['type'] == 'patch'): DCNL DCSP  DCSP m.fail_json(msg='Can DCSP not DCSP remove DCSP patches.') DCNL DCSP prerun_state = get_installed_state(m, name_remove) DCNL DCSP remove_version = [(p + name_remove[p]) for p in name_remove if name_remove[p]] DCNL DCSP name_remove = [p for p in name_remove if (p in prerun_state)] DCNL DCSP if ((not name_remove) and (not remove_version)): DCNL DCSP  DCSP return (None, retvals) DCNL DCSP cmd = get_cmd(m, 'remove') DCNL DCSP cmd.extend(name_remove) DCNL DCSP cmd.extend(remove_version) DCNL DCSP retvals['cmd'] = cmd DCNL DCSP (result, retvals['rc'], retvals['stdout'], retvals['stderr']) = parse_zypper_xml(m, cmd) DCNL DCSP return (result, retvals)
def repo_refresh(m): DCNL  DCSP retvals = {'rc': 0, 'stdout': '', 'stderr': ''} DCNL DCSP cmd = get_cmd(m, 'refresh') DCNL DCSP retvals['cmd'] = cmd DCNL DCSP (result, retvals['rc'], retvals['stdout'], retvals['stderr']) = parse_zypper_xml(m, cmd) DCNL DCSP return retvals
def update_package_db(module, opkg_path): DCNL  DCSP (rc, out, err) = module.run_command(('%s DCSP update' % opkg_path)) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg='could DCSP not DCSP update DCSP package DCSP db')
def query_package(module, opkg_path, name, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP list-installed DCSP | DCSP grep DCSP -q DCSP "^%s DCSP "' % (pipes.quote(opkg_path), pipes.quote(name))), use_unsafe_shell=True) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return False
def remove_packages(module, opkg_path, packages): DCNL  DCSP p = module.params DCNL DCSP force = p['force'] DCNL DCSP if force: DCNL DCSP  DCSP force = ('--force-%s' % force) DCNL DCSP remove_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if (not query_package(module, opkg_path, package)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP remove DCSP %s DCSP %s' % (opkg_path, force, package))) DCNL DCSP  DCSP if query_package(module, opkg_path, package): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP remove DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP remove_c += 1 DCNL DCSP if (remove_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('removed DCSP %s DCSP package(s)' % remove_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP absent')
def install_packages(module, opkg_path, packages): DCNL  DCSP p = module.params DCNL DCSP force = p['force'] DCNL DCSP if force: DCNL DCSP  DCSP force = ('--force-%s' % force) DCNL DCSP install_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if query_package(module, opkg_path, package): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP install DCSP %s DCSP %s' % (opkg_path, force, package))) DCNL DCSP  DCSP if (not query_package(module, opkg_path, package)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP install DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP install_c += 1 DCNL DCSP if (install_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('installed DCSP %s DCSP package(s)' % install_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP present')
def is_installed(xbps_output): DCNL  DCSP return bool(len(xbps_output))
def query_package(module, xbps_path, name, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP lcmd = ('%s DCSP %s' % (xbps_path['query'], name)) DCNL DCSP  DCSP (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) DCNL DCSP  DCSP if (not is_installed(lstdout)): DCNL DCSP  DCSP  DCSP return (False, False) DCNL DCSP  DCSP rcmd = ('%s DCSP -Sun' % xbps_path['install']) DCNL DCSP  DCSP (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) DCNL DCSP  DCSP if ((rrc == 0) or (rrc == 17)): DCNL DCSP  DCSP  DCSP 'Return DCSP True DCSP to DCSP indicate DCSP that DCSP the DCSP package DCSP is DCSP installed DCSP locally,\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP and DCSP the DCSP result DCSP of DCSP the DCSP version DCSP number DCSP comparison DCSP to DCSP determine DCSP if DCSP the\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP package DCSP is DCSP up-to-date' DCNL DCSP  DCSP  DCSP return (True, (name not in rstdout)) DCNL DCSP  DCSP return (False, False)
def update_package_db(module, xbps_path): DCNL  DCSP cmd = ('%s DCSP -S' % xbps_path['install']) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=False) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg='Could DCSP not DCSP update DCSP package DCSP db') DCNL DCSP if ('avg DCSP rate' in stdout): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def upgrade(module, xbps_path): DCNL  DCSP cmdupgrade = ('%s DCSP -uy' % xbps_path['install']) DCNL DCSP cmdneedupgrade = ('%s DCSP -un' % xbps_path['install']) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmdneedupgrade, check_rc=False) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP if (len(stdout.splitlines()) == 0): DCNL DCSP  DCSP  DCSP module.exit_json(changed=False, msg='Nothing DCSP to DCSP upgrade') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmdupgrade, check_rc=False) DCNL DCSP  DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='System DCSP upgraded') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='Could DCSP not DCSP upgrade') DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg='Could DCSP not DCSP upgrade')
def remove_packages(module, xbps_path, packages): DCNL  DCSP changed_packages = [] DCNL DCSP for package in packages: DCNL DCSP  DCSP (installed, updated) = query_package(module, xbps_path, package) DCNL DCSP  DCSP if (not installed): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP cmd = ('%s DCSP -y DCSP %s' % (xbps_path['remove'], package)) DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=False) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP remove DCSP %s' % package)) DCNL DCSP  DCSP changed_packages.append(package) DCNL DCSP if (len(changed_packages) > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('removed DCSP %s DCSP package(s)' % len(changed_packages)), packages=changed_packages) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP absent')
def install_packages(module, xbps_path, state, packages): DCNL  DCSP toInstall = [] DCNL DCSP for (i, package) in enumerate(packages): DCNL DCSP  DCSP 'If DCSP the DCSP package DCSP is DCSP installed DCSP and DCSP state DCSP == DCSP present DCSP or DCSP state DCSP == DCSP latest\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP and DCSP is DCSP up-to-date DCSP then DCSP skip' DCNL DCSP  DCSP (installed, updated) = query_package(module, xbps_path, package) DCNL DCSP  DCSP if (installed and ((state == 'present') or ((state == 'latest') and updated))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP toInstall.append(package) DCNL DCSP if (len(toInstall) == 0): DCNL DCSP  DCSP module.exit_json(changed=False, msg='Nothing DCSP to DCSP Install') DCNL DCSP cmd = ('%s DCSP -y DCSP %s' % (xbps_path['install'], ' DCSP '.join(toInstall))) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=False) DCNL DCSP if ((rc != 0) and (not ((state == 'latest') and (rc == 17)))): DCNL DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP install DCSP %s' % package)) DCNL DCSP module.exit_json(changed=True, msg=('installed DCSP %s DCSP package(s)' % len(toInstall)), packages=toInstall) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP installed', packages=[])
def check_packages(module, xbps_path, packages, state): DCNL  DCSP would_be_changed = [] DCNL DCSP for package in packages: DCNL DCSP  DCSP (installed, updated) = query_package(module, xbps_path, package) DCNL DCSP  DCSP if (((state in ['present', 'latest']) and (not installed)) or ((state == 'absent') and installed) or ((state == 'latest') and (not updated))): DCNL DCSP  DCSP  DCSP would_be_changed.append(package) DCNL DCSP if would_be_changed: DCNL DCSP  DCSP if (state == 'absent'): DCNL DCSP  DCSP  DCSP state = 'removed' DCNL DCSP  DCSP module.exit_json(changed=True, msg=('%s DCSP package(s) DCSP would DCSP be DCSP %s' % (len(would_be_changed), state)), packages=would_be_changed) DCNL DCSP else: DCNL DCSP  DCSP module.exit_json(changed=False, msg=('package(s) DCSP already DCSP %s' % state), packages=[])
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(name=dict(default=None, aliases=['pkg', 'package'], type='list'), state=dict(default='present', choices=['present', 'installed', 'latest', 'absent', 'removed']), recurse=dict(default=False, type='bool'), force=dict(default=False, type='bool'), upgrade=dict(default=False, type='bool'), update_cache=dict(default=True, aliases=['update-cache'], type='bool')), required_one_of=[['name', 'update_cache', 'upgrade']], supports_check_mode=True) DCNL DCSP xbps_path = dict() DCNL DCSP xbps_path['install'] = module.get_bin_path('xbps-install', True) DCNL DCSP xbps_path['query'] = module.get_bin_path('xbps-query', True) DCNL DCSP xbps_path['remove'] = module.get_bin_path('xbps-remove', True) DCNL DCSP if (not os.path.exists(xbps_path['install'])): DCNL DCSP  DCSP module.fail_json(msg=('cannot DCSP find DCSP xbps, DCSP in DCSP path DCSP %s' % xbps_path['install'])) DCNL DCSP p = module.params DCNL DCSP if (p['state'] in ['present', 'installed']): DCNL DCSP  DCSP p['state'] = 'present' DCNL DCSP elif (p['state'] in ['absent', 'removed']): DCNL DCSP  DCSP p['state'] = 'absent' DCNL DCSP if (p['update_cache'] and (not module.check_mode)): DCNL DCSP  DCSP changed = update_package_db(module, xbps_path) DCNL DCSP  DCSP if ((p['name'] is None) and (not p['upgrade'])): DCNL DCSP  DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='Updated DCSP the DCSP package DCSP master DCSP lists') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=False, msg='Package DCSP list DCSP already DCSP up DCSP to DCSP date') DCNL DCSP if (p['update_cache'] and module.check_mode and (not (p['name'] or p['upgrade']))): DCNL DCSP  DCSP module.exit_json(changed=True, msg='Would DCSP have DCSP updated DCSP the DCSP package DCSP cache') DCNL DCSP if p['upgrade']: DCNL DCSP  DCSP upgrade(module, xbps_path) DCNL DCSP if p['name']: DCNL DCSP  DCSP pkgs = p['name'] DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP check_packages(module, xbps_path, pkgs, p['state']) DCNL DCSP  DCSP if (p['state'] in ['present', 'latest']): DCNL DCSP  DCSP  DCSP install_packages(module, xbps_path, p['state'], pkgs) DCNL DCSP  DCSP elif (p['state'] == 'absent'): DCNL DCSP  DCSP  DCSP remove_packages(module, xbps_path, pkgs)
def _configure_base(module, base, conf_file, disable_gpg_check, installroot='/'): DCNL  DCSP conf = base.conf DCNL DCSP conf.debuglevel = 0 DCNL DCSP conf.gpgcheck = (not disable_gpg_check) DCNL DCSP conf.assumeyes = True DCNL DCSP conf.installroot = installroot DCNL DCSP if conf_file: DCNL DCSP  DCSP if (not os.access(conf_file, os.R_OK)): DCNL DCSP  DCSP  DCSP module.fail_json(msg='cannot DCSP read DCSP configuration DCSP file', conf_file=conf_file) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP conf.config_file_path = conf_file DCNL DCSP conf.read()
def _specify_repositories(base, disablerepo, enablerepo): DCNL  DCSP base.read_all_repos() DCNL DCSP repos = base.repos DCNL DCSP for repo_pattern in disablerepo: DCNL DCSP  DCSP for repo in repos.get_matching(repo_pattern): DCNL DCSP  DCSP  DCSP repo.disable() DCNL DCSP for repo_pattern in enablerepo: DCNL DCSP  DCSP for repo in repos.get_matching(repo_pattern): DCNL DCSP  DCSP  DCSP repo.enable()
def _base(module, conf_file, disable_gpg_check, disablerepo, enablerepo, installroot): DCNL  DCSP base = dnf.Base() DCNL DCSP _configure_base(module, base, conf_file, disable_gpg_check, installroot) DCNL DCSP _specify_repositories(base, disablerepo, enablerepo) DCNL DCSP base.fill_sack(load_system_repo='auto') DCNL DCSP return base
def _package_dict(package): DCNL  DCSP result = {'name': package.name, 'arch': package.arch, 'epoch': str(package.epoch), 'release': package.release, 'version': package.version, 'repo': package.repoid} DCNL DCSP result['nevra'] = '{epoch}:{name}-{version}-{release}.{arch}'.format(**result) DCNL DCSP return result
def list_items(module, base, command): DCNL  DCSP if (command == 'updates'): DCNL DCSP  DCSP command = 'upgrades' DCNL DCSP if (command in ['installed', 'upgrades', 'available']): DCNL DCSP  DCSP results = [_package_dict(package) for package in getattr(base.sack.query(), command)()] DCNL DCSP elif (command in ['repos', 'repositories']): DCNL DCSP  DCSP results = [{'repoid': repo.id, 'state': 'enabled'} for repo in base.repos.iter_enabled()] DCNL DCSP else: DCNL DCSP  DCSP packages = dnf.subject.Subject(command).get_best_query(base.sack) DCNL DCSP  DCSP results = [_package_dict(package) for package in packages] DCNL DCSP module.exit_json(results=results)
def _mark_package_install(module, base, pkg_spec): DCNL  DCSP try: DCNL DCSP  DCSP base.install(pkg_spec) DCNL DCSP except dnf.exceptions.MarkingError: DCNL DCSP  DCSP module.fail_json(msg='No DCSP package DCSP {} DCSP available.'.format(pkg_spec))
def main(): DCNL  DCSP module = AnsibleModule(argument_spec=dict(name=dict(aliases=['pkg'], type='list'), state=dict(default='installed', choices=['absent', 'present', 'installed', 'removed', 'latest']), enablerepo=dict(type='list', default=[]), disablerepo=dict(type='list', default=[]), list=dict(), conf_file=dict(default=None, type='path'), disable_gpg_check=dict(default=False, type='bool'), installroot=dict(default='/', type='path')), required_one_of=[['name', 'list']], mutually_exclusive=[['name', 'list']], supports_check_mode=True) DCNL DCSP params = module.params DCNL DCSP _ensure_dnf(module) DCNL DCSP if params['list']: DCNL DCSP  DCSP base = _base(module, params['conf_file'], params['disable_gpg_check'], params['disablerepo'], params['enablerepo'], params['installroot']) DCNL DCSP  DCSP list_items(module, base, params['list']) DCNL DCSP else: DCNL DCSP  DCSP if (not dnf.util.am_i_root()): DCNL DCSP  DCSP  DCSP module.fail_json(msg='This DCSP command DCSP has DCSP to DCSP be DCSP run DCSP under DCSP the DCSP root DCSP user.') DCNL DCSP  DCSP base = _base(module, params['conf_file'], params['disable_gpg_check'], params['disablerepo'], params['enablerepo'], params['installroot']) DCNL DCSP  DCSP ensure(module, base, params['state'], params['name'])
def parse_key_id(key_id): DCNL  DCSP int(key_id, 16) DCNL DCSP key_id = key_id.upper() DCNL DCSP if key_id.startswith('0X'): DCNL DCSP  DCSP key_id = key_id[2:] DCNL DCSP key_id_len = len(key_id) DCNL DCSP if (((key_id_len != 8) and (key_id_len != 16)) and (key_id_len <= 16)): DCNL DCSP  DCSP raise ValueError('key_id DCSP must DCSP be DCSP 8, DCSP 16, DCSP or DCSP 16+ DCSP hexadecimal DCSP characters DCSP in DCSP length') DCNL DCSP short_key_id = key_id[(-8):] DCNL DCSP fingerprint = key_id DCNL DCSP if (key_id_len > 16): DCNL DCSP  DCSP fingerprint = key_id[(-16):] DCNL DCSP return (short_key_id, fingerprint, key_id)
def shorten_key_ids(key_id_list): DCNL  DCSP short = [] DCNL DCSP for key in key_id_list: DCNL DCSP  DCSP short.append(key[(-8):]) DCNL DCSP return short
def get_sorcery_ver(module): DCNL  DCSP cmd_sorcery = ('%s DCSP --version' % SORCERY['sorcery']) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd_sorcery) DCNL DCSP if ((rc != 0) or (not stdout)): DCNL DCSP  DCSP module.fail_json(msg='unable DCSP to DCSP get DCSP Sorcery DCSP version') DCNL DCSP return stdout.strip()
def codex_fresh(codex, module): DCNL  DCSP if (not module.params['cache_valid_time']): DCNL DCSP  DCSP return False DCNL DCSP timedelta = datetime.timedelta(seconds=module.params['cache_valid_time']) DCNL DCSP for grimoire in codex: DCNL DCSP  DCSP lastupdate_path = os.path.join(SORCERY_STATE_DIR, (grimoire + '.lastupdate')) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP mtime = os.stat(lastupdate_path).st_mtime DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP lastupdate_ts = datetime.datetime.fromtimestamp(mtime) DCNL DCSP  DCSP if ((lastupdate_ts + timedelta) < datetime.datetime.now()): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def codex_list(module): DCNL  DCSP codex = {} DCNL DCSP cmd_scribe = ('%s DCSP index' % SORCERY['scribe']) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd_scribe) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json('unable DCSP to DCSP list DCSP grimoire DCSP collection, DCSP fix DCSP your DCSP Codex') DCNL DCSP rex = re.compile('^\\s*\\[\\d+\\] DCSP : DCSP (?P<grim>[\\w\\-\\+\\.]+) DCSP : DCSP [\\w\\-\\+\\./]+(?: DCSP : DCSP (?P<ver>[\\w\\-\\+\\.]+))?\\s*$') DCNL DCSP for line in stdout.splitlines()[4:(-1)]: DCNL DCSP  DCSP match = rex.match(line) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP codex[match.group('grim')] = match.group('ver') DCNL DCSP if (not codex): DCNL DCSP  DCSP module.fail_json(msg='no DCSP grimoires DCSP to DCSP operate DCSP on; DCSP add DCSP at DCSP least DCSP one') DCNL DCSP return codex
def update_sorcery(module): DCNL  DCSP changed = False DCNL DCSP if module.check_mode: DCNL DCSP  DCSP if ((not module.params['name']) and (not module.params['update_cache'])): DCNL DCSP  DCSP  DCSP module.exit_json(changed=True, msg='would DCSP have DCSP updated DCSP Sorcery') DCNL DCSP else: DCNL DCSP  DCSP sorcery_ver = get_sorcery_ver(module) DCNL DCSP  DCSP cmd_sorcery = ('%s DCSP update' % SORCERY['sorcery']) DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_sorcery) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('unable DCSP to DCSP update DCSP Sorcery: DCSP ' + stdout)) DCNL DCSP  DCSP if (sorcery_ver != get_sorcery_ver(module)): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP if ((not module.params['name']) and (not module.params['update_cache'])): DCNL DCSP  DCSP  DCSP module.exit_json(changed=changed, msg='successfully DCSP updated DCSP Sorcery')
def update_codex(module): DCNL  DCSP params = module.params DCNL DCSP changed = False DCNL DCSP codex = codex_list(module) DCNL DCSP fresh = codex_fresh(codex, module) DCNL DCSP if module.check_mode: DCNL DCSP  DCSP if (not params['name']): DCNL DCSP  DCSP  DCSP if (not fresh): DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP module.exit_json(changed=changed, msg='would DCSP have DCSP updated DCSP Codex') DCNL DCSP elif ((not fresh) or (params['name'] and (params['state'] == 'latest'))): DCNL DCSP  DCSP module.run_command_environ_update.update(dict(SILENT='1')) DCNL DCSP  DCSP cmd_scribe = ('%s DCSP update' % SORCERY['scribe']) DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_scribe) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('unable DCSP to DCSP update DCSP Codex: DCSP ' + stdout)) DCNL DCSP  DCSP if (codex != codex_list(module)): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP if (not params['name']): DCNL DCSP  DCSP  DCSP module.exit_json(changed=changed, msg='successfully DCSP updated DCSP Codex')
def match_depends(module): DCNL  DCSP params = module.params DCNL DCSP spells = params['name'] DCNL DCSP depends = {} DCNL DCSP depends_ok = True DCNL DCSP if ((len(spells) > 1) or (not params['depends'])): DCNL DCSP  DCSP return depends_ok DCNL DCSP spell = spells[0] DCNL DCSP if module.check_mode: DCNL DCSP  DCSP sorcery_depends_orig = os.path.join(SORCERY_STATE_DIR, 'depends') DCNL DCSP  DCSP sorcery_depends = os.path.join(SORCERY_STATE_DIR, 'depends.check') DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP shutil.copy2(sorcery_depends_orig, sorcery_depends) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP copy DCSP depends.check DCSP file') DCNL DCSP else: DCNL DCSP  DCSP sorcery_depends = os.path.join(SORCERY_STATE_DIR, 'depends') DCNL DCSP rex = re.compile('^(?P<status>\\+?|\\-){1}(?P<depend>[a-z0-9]+[a-z0-9_\\-\\+\\.]*(\\([A-Z0-9_\\-\\+\\.]+\\))*)$') DCNL DCSP for d in params['depends'].split(','): DCNL DCSP  DCSP match = rex.match(d) DCNL DCSP  DCSP if (not match): DCNL DCSP  DCSP  DCSP module.fail_json(msg=("wrong DCSP depends DCSP line DCSP for DCSP spell DCSP '%s'" % spell)) DCNL DCSP  DCSP if ((not match.group('status')) or (match.group('status') == '+')): DCNL DCSP  DCSP  DCSP status = 'on' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP status = 'off' DCNL DCSP  DCSP depends[match.group('depend')] = status DCNL DCSP depends_list = [s.split('(')[0] for s in depends] DCNL DCSP cmd_gaze = ('%s DCSP -q DCSP version DCSP %s' % (SORCERY['gaze'], ' DCSP '.join(depends_list))) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd_gaze) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg=("wrong DCSP dependencies DCSP for DCSP spell DCSP '%s'" % spell)) DCNL DCSP fi = fileinput.input(sorcery_depends, inplace=True) DCNL DCSP try: DCNL DCSP  DCSP for line in fi: DCNL DCSP  DCSP  DCSP if line.startswith((spell + ':')): DCNL DCSP  DCSP  DCSP  DCSP match = None DCNL DCSP  DCSP  DCSP  DCSP for d in depends: DCNL DCSP  DCSP  DCSP  DCSP  DCSP d_offset = d.find('(') DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (d_offset == (-1)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP d_p = '' DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP d_p = re.escape(d[d_offset:]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP rex = re.compile(('%s:(?:%s|%s):(?P<lstatus>on|off):optional:' % (re.escape(spell), re.escape(d), d_p))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP match = rex.match(line) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (match.group('lstatus') == depends[d]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP depends[d] = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP sys.stdout.write(line) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP if (not match): DCNL DCSP  DCSP  DCSP  DCSP  DCSP sys.stdout.write(line) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP sys.stdout.write(line) DCNL DCSP except IOError: DCNL DCSP  DCSP module.fail_json(msg='I/O DCSP error DCSP on DCSP the DCSP depends DCSP file') DCNL DCSP finally: DCNL DCSP  DCSP fi.close() DCNL DCSP depends_new = [v for v in depends if depends[v]] DCNL DCSP if depends_new: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP fl = open(sorcery_depends, 'a') DCNL DCSP  DCSP  DCSP for k in depends_new: DCNL DCSP  DCSP  DCSP  DCSP fl.write(('%s:%s:%s:optional::\n' % (spell, k, depends[k]))) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='I/O DCSP error DCSP on DCSP the DCSP depends DCSP file') DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP fl.close() DCNL DCSP  DCSP depends_ok = False DCNL DCSP if module.check_mode: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP os.remove(sorcery_depends) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP clean DCSP up DCSP depends.backup DCSP file') DCNL DCSP return depends_ok
def manage_spells(module): DCNL  DCSP params = module.params DCNL DCSP spells = params['name'] DCNL DCSP sorcery_queue = os.path.join(SORCERY_LOG_DIR, 'queue/install') DCNL DCSP if (spells == '*'): DCNL DCSP  DCSP if (params['state'] == 'latest'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP os.rename(sorcery_queue, (sorcery_queue + '.backup')) DCNL DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP backup DCSP the DCSP update DCSP queue') DCNL DCSP  DCSP  DCSP module.run_command_environ_update.update(dict(SILENT='1')) DCNL DCSP  DCSP  DCSP cmd_sorcery = '%s DCSP queue' DCNL DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_sorcery) DCNL DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP generate DCSP the DCSP update DCSP queue') DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP queue_size = os.stat(sorcery_queue).st_size DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP read DCSP the DCSP update DCSP queue') DCNL DCSP  DCSP  DCSP if (queue_size != 0): DCNL DCSP  DCSP  DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP os.rename((sorcery_queue + '.backup'), sorcery_queue) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP restore DCSP the DCSP update DCSP queue') DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='would DCSP have DCSP updated DCSP the DCSP system') DCNL DCSP  DCSP  DCSP  DCSP cmd_cast = ('%s DCSP --queue' % SORCERY['cast']) DCNL DCSP  DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_cast) DCNL DCSP  DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP module.fail_json(msg='failed DCSP to DCSP update DCSP the DCSP system') DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='successfully DCSP updated DCSP the DCSP system') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=False, msg='the DCSP system DCSP is DCSP already DCSP up DCSP to DCSP date') DCNL DCSP  DCSP elif (params['state'] == 'rebuild'): DCNL DCSP  DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='would DCSP have DCSP rebuilt DCSP the DCSP system') DCNL DCSP  DCSP  DCSP cmd_sorcery = ('%s DCSP rebuild' % SORCERY['sorcery']) DCNL DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_sorcery) DCNL DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP rebuild DCSP the DCSP system: DCSP ' + stdout)) DCNL DCSP  DCSP  DCSP module.exit_json(changed=True, msg='successfully DCSP rebuilt DCSP the DCSP system') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.fail_json(msg="unsupported DCSP operation DCSP on DCSP '*' DCSP name DCSP value") DCNL DCSP elif (params['state'] in ('present', 'latest', 'rebuild', 'absent')): DCNL DCSP  DCSP cmd_gaze = ('%s DCSP -q DCSP version DCSP %s' % (SORCERY['gaze'], ' DCSP '.join(spells))) DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_gaze) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP locate DCSP spell(s) DCSP in DCSP the DCSP list DCSP (%s)' % ', DCSP '.join(spells))) DCNL DCSP  DCSP cast_queue = [] DCNL DCSP  DCSP dispel_queue = [] DCNL DCSP  DCSP rex = re.compile('[^|]+\\|[^|]+\\|(?P<spell>[^|]+)\\|(?P<grim_ver>[^|]+)\\|(?P<inst_ver>[^$]+)') DCNL DCSP  DCSP for line in stdout.splitlines()[2:(-1)]: DCNL DCSP  DCSP  DCSP match = rex.match(line) DCNL DCSP  DCSP  DCSP cast = False DCNL DCSP  DCSP  DCSP if (params['state'] == 'present'): DCNL DCSP  DCSP  DCSP  DCSP if (match.group('inst_ver') == '-'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP match_depends(module) DCNL DCSP  DCSP  DCSP  DCSP  DCSP cast = True DCNL DCSP  DCSP  DCSP  DCSP elif (not match_depends(module)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP cast = True DCNL DCSP  DCSP  DCSP elif (params['state'] == 'latest'): DCNL DCSP  DCSP  DCSP  DCSP if (match.group('grim_ver') != match.group('inst_ver')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP match_depends(module) DCNL DCSP  DCSP  DCSP  DCSP  DCSP cast = True DCNL DCSP  DCSP  DCSP  DCSP elif (not match_depends(module)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP cast = True DCNL DCSP  DCSP  DCSP elif (params['state'] == 'rebuild'): DCNL DCSP  DCSP  DCSP  DCSP cast = True DCNL DCSP  DCSP  DCSP elif (match.group('inst_ver') != '-'): DCNL DCSP  DCSP  DCSP  DCSP dispel_queue.append(match.group('spell')) DCNL DCSP  DCSP  DCSP if cast: DCNL DCSP  DCSP  DCSP  DCSP cast_queue.append(match.group('spell')) DCNL DCSP  DCSP if cast_queue: DCNL DCSP  DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='would DCSP have DCSP cast DCSP spell(s)') DCNL DCSP  DCSP  DCSP cmd_cast = ('%s DCSP -c DCSP %s' % (SORCERY['cast'], ' DCSP '.join(cast_queue))) DCNL DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_cast) DCNL DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP cast DCSP spell(s): DCSP %s' + stdout)) DCNL DCSP  DCSP  DCSP module.exit_json(changed=True, msg='successfully DCSP cast DCSP spell(s)') DCNL DCSP  DCSP elif (params['state'] != 'absent'): DCNL DCSP  DCSP  DCSP module.exit_json(changed=False, msg='spell(s) DCSP are DCSP already DCSP cast') DCNL DCSP  DCSP if dispel_queue: DCNL DCSP  DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP  DCSP module.exit_json(changed=True, msg='would DCSP have DCSP dispelled DCSP spell(s)') DCNL DCSP  DCSP  DCSP cmd_dispel = ('%s DCSP %s' % (SORCERY['dispel'], ' DCSP '.join(dispel_queue))) DCNL DCSP  DCSP  DCSP (rc, stdout, stderr) = module.run_command(cmd_dispel) DCNL DCSP  DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP dispel DCSP spell(s): DCSP %s' + stdout)) DCNL DCSP  DCSP  DCSP module.exit_json(changed=True, msg='successfully DCSP dispelled DCSP spell(s)') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP module.exit_json(changed=False, msg='spell(s) DCSP are DCSP already DCSP dispelled')
def _get_cmd(*args): DCNL  DCSP cmd = ['/usr/bin/zypper', '--quiet', '--non-interactive'] DCNL DCSP cmd.extend(args) DCNL DCSP return cmd
def _parse_repos(module): DCNL  DCSP cmd = _get_cmd('--xmlout', 'repos') DCNL DCSP from xml.dom.minidom import parseString as parseXML DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=False) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP repos = [] DCNL DCSP  DCSP dom = parseXML(stdout) DCNL DCSP  DCSP repo_list = dom.getElementsByTagName('repo') DCNL DCSP  DCSP for repo in repo_list: DCNL DCSP  DCSP  DCSP opts = {} DCNL DCSP  DCSP  DCSP for o in REPO_OPTS: DCNL DCSP  DCSP  DCSP  DCSP opts[o] = repo.getAttribute(o) DCNL DCSP  DCSP  DCSP opts['url'] = repo.getElementsByTagName('url')[0].firstChild.data DCNL DCSP  DCSP  DCSP repos.append(opts) DCNL DCSP  DCSP return repos DCNL DCSP elif (rc == 6): DCNL DCSP  DCSP return [] DCNL DCSP else: DCNL DCSP  DCSP module.fail_json(msg=('Failed DCSP to DCSP execute DCSP "%s"' % ' DCSP '.join(cmd)), rc=rc, stdout=stdout, stderr=stderr)
def _repo_changes(realrepo, repocmp): DCNL  DCSP for k in repocmp: DCNL DCSP  DCSP if (repocmp[k] and (k not in realrepo)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP for (k, v) in realrepo.items(): DCNL DCSP  DCSP if ((k in repocmp) and repocmp[k]): DCNL DCSP  DCSP  DCSP valold = str((repocmp[k] or '')) DCNL DCSP  DCSP  DCSP valnew = (v or '') DCNL DCSP  DCSP  DCSP if (k == 'url'): DCNL DCSP  DCSP  DCSP  DCSP (valold, valnew) = (valold.rstrip('/'), valnew.rstrip('/')) DCNL DCSP  DCSP  DCSP if (valold != valnew): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def repo_exists(module, repodata, overwrite_multiple): DCNL  DCSP existing_repos = _parse_repos(module) DCNL DCSP repos = [] DCNL DCSP for kw in ['alias', 'url']: DCNL DCSP  DCSP name = repodata[kw] DCNL DCSP  DCSP for oldr in existing_repos: DCNL DCSP  DCSP  DCSP if ((repodata[kw] == oldr[kw]) and (oldr not in repos)): DCNL DCSP  DCSP  DCSP  DCSP repos.append(oldr) DCNL DCSP if (len(repos) == 0): DCNL DCSP  DCSP return (False, False, None) DCNL DCSP elif (len(repos) == 1): DCNL DCSP  DCSP has_changes = _repo_changes(repos[0], repodata) DCNL DCSP  DCSP return (True, has_changes, repos) DCNL DCSP elif (len(repos) >= 2): DCNL DCSP  DCSP if overwrite_multiple: DCNL DCSP  DCSP  DCSP return (True, True, repos) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errmsg = ('More DCSP than DCSP one DCSP repo DCSP matched DCSP "%s": DCSP "%s".' % (name, repos)) DCNL DCSP  DCSP  DCSP errmsg += ' DCSP Use DCSP overwrite_multiple DCSP to DCSP allow DCSP more DCSP than DCSP one DCSP repo DCSP to DCSP be DCSP overwritten' DCNL DCSP  DCSP  DCSP module.fail_json(msg=errmsg)
def addmodify_repo(module, repodata, old_repos, zypper_version, warnings): DCNL  DCSP repo = repodata['url'] DCNL DCSP cmd = _get_cmd('addrepo', '--check') DCNL DCSP if repodata['name']: DCNL DCSP  DCSP cmd.extend(['--name', repodata['name']]) DCNL DCSP if repodata['priority']: DCNL DCSP  DCSP if (zypper_version >= LooseVersion('1.12.25')): DCNL DCSP  DCSP  DCSP cmd.extend(['--priority', str(repodata['priority'])]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP warnings.append('Setting DCSP priority DCSP only DCSP available DCSP for DCSP zypper DCSP >= DCSP 1.12.25. DCSP Ignoring DCSP priority DCSP argument.') DCNL DCSP if (repodata['enabled'] == '0'): DCNL DCSP  DCSP cmd.append('--disable') DCNL DCSP if (zypper_version >= LooseVersion('1.6.2')): DCNL DCSP  DCSP if (repodata['gpgcheck'] == '1'): DCNL DCSP  DCSP  DCSP cmd.append('--gpgcheck') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cmd.append('--no-gpgcheck') DCNL DCSP else: DCNL DCSP  DCSP warnings.append('Enabling/disabling DCSP gpgcheck DCSP only DCSP available DCSP for DCSP zypper DCSP >= DCSP 1.6.2. DCSP Using DCSP zypper DCSP default DCSP value.') DCNL DCSP if (repodata['autorefresh'] == '1'): DCNL DCSP  DCSP cmd.append('--refresh') DCNL DCSP cmd.append(repo) DCNL DCSP if (not repo.endswith('.repo')): DCNL DCSP  DCSP cmd.append(repodata['alias']) DCNL DCSP if (old_repos is not None): DCNL DCSP  DCSP for oldrepo in old_repos: DCNL DCSP  DCSP  DCSP remove_repo(module, oldrepo['url']) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=False) DCNL DCSP return (rc, stdout, stderr)
def remove_repo(module, repo): DCNL  DCSP cmd = _get_cmd('removerepo', repo) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=True) DCNL DCSP return (rc, stdout, stderr)
def runrefreshrepo(module, auto_import_keys=False, shortname=None): DCNL  DCSP if auto_import_keys: DCNL DCSP  DCSP cmd = _get_cmd('--gpg-auto-import-keys', 'refresh', '--force') DCNL DCSP else: DCNL DCSP  DCSP cmd = _get_cmd('refresh', '--force') DCNL DCSP if (shortname is not None): DCNL DCSP  DCSP cmd.extend(['-r', shortname]) DCNL DCSP (rc, stdout, stderr) = module.run_command(cmd, check_rc=True) DCNL DCSP return (rc, stdout, stderr)
def compare_package(version1, version2): DCNL  DCSP def normalize(v): DCNL DCSP  DCSP return [int(x) for x in re.sub('(\\.0+)*$', '', v).split('.')] DCNL DCSP return cmp(normalize(version1), normalize(version2))
def query_package(module, name, depot=None): DCNL  DCSP cmd_list = '/usr/sbin/swlist DCSP -a DCSP revision DCSP -l DCSP product' DCNL DCSP if depot: DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(('%s DCSP -s DCSP %s DCSP %s DCSP | DCSP grep DCSP %s' % (cmd_list, pipes.quote(depot), pipes.quote(name), pipes.quote(name))), use_unsafe_shell=True) DCNL DCSP else: DCNL DCSP  DCSP (rc, stdout, stderr) = module.run_command(('%s DCSP %s DCSP | DCSP grep DCSP %s' % (cmd_list, pipes.quote(name), pipes.quote(name))), use_unsafe_shell=True) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP version = re.sub('\\s\\s+| DCTB ', ' DCSP ', stdout).strip().split()[1] DCNL DCSP else: DCNL DCSP  DCSP version = None DCNL DCSP return (rc, version)
def remove_package(module, name): DCNL  DCSP cmd_remove = '/usr/sbin/swremove' DCNL DCSP (rc, stdout, stderr) = module.run_command(('%s DCSP %s' % (cmd_remove, name))) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP return (rc, stdout) DCNL DCSP else: DCNL DCSP  DCSP return (rc, stderr)
def install_package(module, depot, name): DCNL  DCSP cmd_install = '/usr/sbin/swinstall DCSP -x DCSP mount_all_filesystems=false' DCNL DCSP (rc, stdout, stderr) = module.run_command(('%s DCSP -s DCSP %s DCSP %s' % (cmd_install, depot, name))) DCNL DCSP if (rc == 0): DCNL DCSP  DCSP return (rc, stdout) DCNL DCSP else: DCNL DCSP  DCSP return (rc, stderr)
def a_valid_tap(tap): DCNL  DCSP regex = re.compile('^([\\w-]+)/(homebrew-)?([\\w-]+)$') DCNL DCSP return regex.match(tap)
def already_tapped(module, brew_path, tap): DCNL  DCSP (rc, out, err) = module.run_command([brew_path, 'tap']) DCNL DCSP taps = [tap_.strip().lower() for tap_ in out.split('\n') if tap_] DCNL DCSP tap_name = re.sub('homebrew-', '', tap.lower()) DCNL DCSP return (tap_name in taps)
def add_tap(module, brew_path, tap, url=None): DCNL  DCSP (failed, changed, msg) = (False, False, '') DCNL DCSP if (not a_valid_tap(tap)): DCNL DCSP  DCSP failed = True DCNL DCSP  DCSP msg = ('not DCSP a DCSP valid DCSP tap: DCSP %s' % tap) DCNL DCSP elif (not already_tapped(module, brew_path, tap)): DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP module.exit_json(changed=True) DCNL DCSP  DCSP (rc, out, err) = module.run_command([brew_path, 'tap', tap, url]) DCNL DCSP  DCSP if already_tapped(module, brew_path, tap): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP msg = ('successfully DCSP tapped: DCSP %s' % tap) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP failed = True DCNL DCSP  DCSP  DCSP msg = ('failed DCSP to DCSP tap: DCSP %s' % tap) DCNL DCSP else: DCNL DCSP  DCSP msg = ('already DCSP tapped: DCSP %s' % tap) DCNL DCSP return (failed, changed, msg)
def add_taps(module, brew_path, taps): DCNL  DCSP (failed, unchanged, added, msg) = (False, 0, 0, '') DCNL DCSP for tap in taps: DCNL DCSP  DCSP (failed, changed, msg) = add_tap(module, brew_path, tap) DCNL DCSP  DCSP if failed: DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP added += 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP unchanged += 1 DCNL DCSP if failed: DCNL DCSP  DCSP msg = ('added: DCSP %d, DCSP unchanged: DCSP %d, DCSP error: DCSP ' + msg) DCNL DCSP  DCSP msg = (msg % (added, unchanged)) DCNL DCSP elif added: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP msg = ('added: DCSP %d, DCSP unchanged: DCSP %d' % (added, unchanged)) DCNL DCSP else: DCNL DCSP  DCSP msg = ('added: DCSP %d, DCSP unchanged: DCSP %d' % (added, unchanged)) DCNL DCSP return (failed, changed, msg)
def remove_tap(module, brew_path, tap): DCNL  DCSP (failed, changed, msg) = (False, False, '') DCNL DCSP if (not a_valid_tap(tap)): DCNL DCSP  DCSP failed = True DCNL DCSP  DCSP msg = ('not DCSP a DCSP valid DCSP tap: DCSP %s' % tap) DCNL DCSP elif already_tapped(module, brew_path, tap): DCNL DCSP  DCSP if module.check_mode: DCNL DCSP  DCSP  DCSP module.exit_json(changed=True) DCNL DCSP  DCSP (rc, out, err) = module.run_command([brew_path, 'untap', tap]) DCNL DCSP  DCSP if (not already_tapped(module, brew_path, tap)): DCNL DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP msg = ('successfully DCSP untapped: DCSP %s' % tap) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP failed = True DCNL DCSP  DCSP  DCSP msg = ('failed DCSP to DCSP untap: DCSP %s' % tap) DCNL DCSP else: DCNL DCSP  DCSP msg = ('already DCSP untapped: DCSP %s' % tap) DCNL DCSP return (failed, changed, msg)
def remove_taps(module, brew_path, taps): DCNL  DCSP (failed, unchanged, removed, msg) = (False, 0, 0, '') DCNL DCSP for tap in taps: DCNL DCSP  DCSP (failed, changed, msg) = remove_tap(module, brew_path, tap) DCNL DCSP  DCSP if failed: DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if changed: DCNL DCSP  DCSP  DCSP removed += 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP unchanged += 1 DCNL DCSP if failed: DCNL DCSP  DCSP msg = ('removed: DCSP %d, DCSP unchanged: DCSP %d, DCSP error: DCSP ' + msg) DCNL DCSP  DCSP msg = (msg % (removed, unchanged)) DCNL DCSP elif removed: DCNL DCSP  DCSP changed = True DCNL DCSP  DCSP msg = ('removed: DCSP %d, DCSP unchanged: DCSP %d' % (removed, unchanged)) DCNL DCSP else: DCNL DCSP  DCSP msg = ('removed: DCSP %d, DCSP unchanged: DCSP %d' % (removed, unchanged)) DCNL DCSP return (failed, changed, msg)
def transaction_exists(pkglist): DCNL  DCSP conflicts = [] DCNL DCSP if (not transaction_helpers): DCNL DCSP  DCSP return conflicts DCNL DCSP pkglist_nvreas = [] DCNL DCSP for pkg in pkglist: DCNL DCSP  DCSP pkglist_nvreas.append(splitFilename(pkg)) DCNL DCSP unfinished_transactions = find_unfinished_transactions() DCNL DCSP for trans in unfinished_transactions: DCNL DCSP  DCSP steps = find_ts_remaining(trans) DCNL DCSP  DCSP for step in steps: DCNL DCSP  DCSP  DCSP (action, step_spec) = step DCNL DCSP  DCSP  DCSP (n, v, r, e, a) = splitFilename(step_spec) DCNL DCSP  DCSP  DCSP for pkg in pkglist_nvreas: DCNL DCSP  DCSP  DCSP  DCSP label = ('%s-%s' % (n, a)) DCNL DCSP  DCSP  DCSP  DCSP if ((n == pkg[0]) and (a == pkg[4])): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (label not in conflicts): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP conflicts.append(('%s-%s' % (n, a))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP return conflicts
def local_nvra(module, path): DCNL  DCSP ts = rpm.TransactionSet() DCNL DCSP ts.setVSFlags(rpm._RPMVSF_NOSIGNATURES) DCNL DCSP fd = os.open(path, os.O_RDONLY) DCNL DCSP try: DCNL DCSP  DCSP header = ts.hdrFromFdno(fd) DCNL DCSP finally: DCNL DCSP  DCSP os.close(fd) DCNL DCSP return ('%s-%s-%s.%s' % (header[rpm.RPMTAG_NAME], header[rpm.RPMTAG_VERSION], header[rpm.RPMTAG_RELEASE], header[rpm.RPMTAG_ARCH]))
def update_package_db(module, port_path): DCNL  DCSP (rc, out, err) = module.run_command(('%s DCSP sync' % port_path)) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP module.fail_json(msg='could DCSP not DCSP update DCSP package DCSP db')
def query_package(module, port_path, name, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP installed DCSP | DCSP grep DCSP -q DCSP ^.*%s' % (pipes.quote(port_path), pipes.quote(name))), use_unsafe_shell=True) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return False DCNL DCSP elif (state == 'active'): DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP installed DCSP %s DCSP | DCSP grep DCSP -q DCSP active' % (pipes.quote(port_path), pipes.quote(name))), use_unsafe_shell=True) DCNL DCSP  DCSP if (rc == 0): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return False
def remove_packages(module, port_path, packages): DCNL  DCSP remove_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if (not query_package(module, port_path, package)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP uninstall DCSP %s' % (port_path, package))) DCNL DCSP  DCSP if query_package(module, port_path, package): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP remove DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP remove_c += 1 DCNL DCSP if (remove_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('removed DCSP %s DCSP package(s)' % remove_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP absent')
def install_packages(module, port_path, packages): DCNL  DCSP install_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if query_package(module, port_path, package): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP install DCSP %s' % (port_path, package))) DCNL DCSP  DCSP if (not query_package(module, port_path, package)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP install DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP install_c += 1 DCNL DCSP if (install_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('installed DCSP %s DCSP package(s)' % install_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP present')
def activate_packages(module, port_path, packages): DCNL  DCSP activate_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if (not query_package(module, port_path, package)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP activate DCSP %s, DCSP package(s) DCSP not DCSP present' % package)) DCNL DCSP  DCSP if query_package(module, port_path, package, state='active'): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP activate DCSP %s' % (port_path, package))) DCNL DCSP  DCSP if (not query_package(module, port_path, package, state='active')): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP activate DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP activate_c += 1 DCNL DCSP if (activate_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('activated DCSP %s DCSP package(s)' % activate_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP active')
def deactivate_packages(module, port_path, packages): DCNL  DCSP deactivated_c = 0 DCNL DCSP for package in packages: DCNL DCSP  DCSP if (not query_package(module, port_path, package)): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP activate DCSP %s, DCSP package(s) DCSP not DCSP present' % package)) DCNL DCSP  DCSP if (not query_package(module, port_path, package, state='active')): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (rc, out, err) = module.run_command(('%s DCSP deactivate DCSP %s' % (port_path, package))) DCNL DCSP  DCSP if query_package(module, port_path, package, state='active'): DCNL DCSP  DCSP  DCSP module.fail_json(msg=('failed DCSP to DCSP deactivated DCSP %s: DCSP %s' % (package, out))) DCNL DCSP  DCSP deactivated_c += 1 DCNL DCSP if (deactivated_c > 0): DCNL DCSP  DCSP module.exit_json(changed=True, msg=('deactivated DCSP %s DCSP package(s)' % deactivated_c)) DCNL DCSP module.exit_json(changed=False, msg='package(s) DCSP already DCSP inactive')
def init_layman(config=None): DCNL  DCSP if (config is None): DCNL DCSP  DCSP config = BareConfig(read_configfile=True, quietness=1) DCNL DCSP return LaymanAPI(config)
def download_url(module, url, dest): DCNL  DCSP module.params['http_agent'] = USERAGENT DCNL DCSP (response, info) = fetch_url(module, url) DCNL DCSP if (info['status'] != 200): DCNL DCSP  DCSP raise ModuleError(('Failed DCSP to DCSP get DCSP %s: DCSP %s' % (url, info['msg']))) DCNL DCSP try: DCNL DCSP  DCSP with open(dest, 'w') as f: DCNL DCSP  DCSP  DCSP shutil.copyfileobj(response, f) DCNL DCSP except IOError as e: DCNL DCSP  DCSP raise ModuleError(('Failed DCSP to DCSP write: DCSP %s' % str(e)))
def install_overlay(module, name, list_url=None): DCNL  DCSP layman_conf = BareConfig(read_configfile=True) DCNL DCSP layman = init_layman(layman_conf) DCNL DCSP if layman.is_installed(name): DCNL DCSP  DCSP return False DCNL DCSP if module.check_mode: DCNL DCSP  DCSP mymsg = (("Would DCSP add DCSP layman DCSP repo DCSP '" + name) + "'") DCNL DCSP  DCSP module.exit_json(changed=True, msg=mymsg) DCNL DCSP if (not layman.is_repo(name)): DCNL DCSP  DCSP if (not list_url): DCNL DCSP  DCSP  DCSP raise ModuleError(("Overlay DCSP '%s' DCSP is DCSP not DCSP on DCSP the DCSP list DCSP of DCSP known DCSP overlays DCSP and DCSP URL DCSP of DCSP the DCSP remote DCSP list DCSP was DCSP not DCSP provided." % name)) DCNL DCSP  DCSP overlay_defs = layman_conf.get_option('overlay_defs') DCNL DCSP  DCSP dest = path.join(overlay_defs, (name + '.xml')) DCNL DCSP  DCSP download_url(module, list_url, dest) DCNL DCSP  DCSP layman = init_layman() DCNL DCSP if (not layman.add_repos(name)): DCNL DCSP  DCSP raise ModuleError(layman.get_errors()) DCNL DCSP return True
def uninstall_overlay(module, name): DCNL  DCSP layman = init_layman() DCNL DCSP if (not layman.is_installed(name)): DCNL DCSP  DCSP return False DCNL DCSP if module.check_mode: DCNL DCSP  DCSP mymsg = (("Would DCSP remove DCSP layman DCSP repo DCSP '" + name) + "'") DCNL DCSP  DCSP module.exit_json(changed=True, msg=mymsg) DCNL DCSP layman.delete_repos(name) DCNL DCSP if layman.get_errors(): DCNL DCSP  DCSP raise ModuleError(layman.get_errors()) DCNL DCSP return True
def sync_overlay(name): DCNL  DCSP layman = init_layman() DCNL DCSP if (not layman.sync(name)): DCNL DCSP  DCSP messages = [str(item[1]) for item in layman.sync_results[2]] DCNL DCSP  DCSP raise ModuleError(messages)
def sync_overlays(): DCNL  DCSP layman = init_layman() DCNL DCSP for name in layman.get_installed(): DCNL DCSP  DCSP sync_overlay(name)
def get_version(pacman_output): DCNL  DCSP lines = pacman_output.split('\n') DCNL DCSP for line in lines: DCNL DCSP  DCSP if ('Version' in line): DCNL DCSP  DCSP  DCSP return line.split(':')[1].strip() DCNL DCSP return None
def query_package(module, pacman_path, name, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP lcmd = ('%s DCSP -Qi DCSP %s' % (pacman_path, name)) DCNL DCSP  DCSP (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) DCNL DCSP  DCSP if (lrc != 0): DCNL DCSP  DCSP  DCSP return (False, False, False) DCNL DCSP  DCSP lversion = get_version(lstdout) DCNL DCSP  DCSP rcmd = ('%s DCSP -Si DCSP %s' % (pacman_path, name)) DCNL DCSP  DCSP (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) DCNL DCSP  DCSP rversion = get_version(rstdout) DCNL DCSP  DCSP if (rrc == 0): DCNL DCSP  DCSP  DCSP return (True, (lversion == rversion), False) DCNL DCSP  DCSP return (True, True, True)
def get_local_version(pear_output): DCNL  DCSP lines = pear_output.split('\n') DCNL DCSP for line in lines: DCNL DCSP  DCSP if ('Installed DCSP ' in line): DCNL DCSP  DCSP  DCSP installed = line.rsplit(None, 1)[(-1)].strip() DCNL DCSP  DCSP  DCSP if (installed == '-'): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP return installed DCNL DCSP return None
def get_repository_version(pear_output): DCNL  DCSP lines = pear_output.split('\n') DCNL DCSP for line in lines: DCNL DCSP  DCSP if ('Latest DCSP ' in line): DCNL DCSP  DCSP  DCSP return line.rsplit(None, 1)[(-1)].strip() DCNL DCSP return None
def query_package(module, name, state='present'): DCNL  DCSP if (state == 'present'): DCNL DCSP  DCSP lcmd = ('pear DCSP info DCSP %s' % name) DCNL DCSP  DCSP (lrc, lstdout, lstderr) = module.run_command(lcmd, check_rc=False) DCNL DCSP  DCSP if (lrc != 0): DCNL DCSP  DCSP  DCSP return (False, False) DCNL DCSP  DCSP rcmd = ('pear DCSP remote-info DCSP %s' % name) DCNL DCSP  DCSP (rrc, rstdout, rstderr) = module.run_command(rcmd, check_rc=False) DCNL DCSP  DCSP lversion = get_local_version(rstdout) DCNL DCSP  DCSP rversion = get_repository_version(rstdout) DCNL DCSP  DCSP if (rrc == 0): DCNL DCSP  DCSP  DCSP return (True, (lversion == rversion)) DCNL DCSP  DCSP return (False, False)
def _get_packages(module, pip, chdir): DCNL  DCSP command = ('%s DCSP list' % pip) DCNL DCSP lang_env = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C') DCNL DCSP (rc, out, err) = module.run_command(command, cwd=chdir, environ_update=lang_env) DCNL DCSP if (rc != 0): DCNL DCSP  DCSP command = ('%s DCSP freeze' % pip) DCNL DCSP  DCSP (rc, out, err) = module.run_command(command, cwd=chdir) DCNL DCSP  DCSP if (rc != 0): DCNL DCSP  DCSP  DCSP _fail(module, command, out, err) DCNL DCSP return (command, out, err)
def _is_present(name, version, installed_pkgs, pkg_command): DCNL  DCSP for pkg in installed_pkgs: DCNL DCSP  DCSP if ('list' in pkg_command): DCNL DCSP  DCSP  DCSP pkg = pkg.replace('(', '').replace(')', '') DCNL DCSP  DCSP  DCSP if (',' in pkg): DCNL DCSP  DCSP  DCSP  DCSP (pkg_name, pkg_version, _) = pkg.replace(',', '').split(' DCSP ') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (pkg_name, pkg_version) = pkg.split(' DCSP ') DCNL DCSP  DCSP elif ('freeze' in pkg_command): DCNL DCSP  DCSP  DCSP if ('==' in pkg): DCNL DCSP  DCSP  DCSP  DCSP (pkg_name, pkg_version) = pkg.split('==') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if ((pkg_name == name) and ((version is None) or (version == pkg_version))): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def _get_package_info(module, package, env=None): DCNL  DCSP if env: DCNL DCSP  DCSP opt_dirs = [('%s/bin' % env)] DCNL DCSP else: DCNL DCSP  DCSP opt_dirs = [] DCNL DCSP python_bin = module.get_bin_path('python', False, opt_dirs) DCNL DCSP if (python_bin is None): DCNL DCSP  DCSP formatted_dep = None DCNL DCSP else: DCNL DCSP  DCSP (rc, out, err) = module.run_command([python_bin, '-c', _SPECIAL_PACKAGE_CHECKERS[package]]) DCNL DCSP  DCSP if rc: DCNL DCSP  DCSP  DCSP formatted_dep = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP formatted_dep = ('%s==%s' % (package, out.strip())) DCNL DCSP return formatted_dep
def is_encrypted(data): DCNL  DCSP try: DCNL DCSP  DCSP b_data = to_bytes(to_text(data, encoding='ascii', errors='strict', nonstring='strict'), encoding='ascii', errors='strict') DCNL DCSP except (UnicodeError, TypeError): DCNL DCSP  DCSP return False DCNL DCSP if b_data.startswith(b_HEADER): DCNL DCSP  DCSP return True DCNL DCSP return False
def is_encrypted_file(file_obj, start_pos=0, count=(-1)): DCNL  DCSP current_position = file_obj.tell() DCNL DCSP try: DCNL DCSP  DCSP file_obj.seek(start_pos) DCNL DCSP  DCSP vaulttext = file_obj.read(count) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP b_vaulttext = to_bytes(to_text(vaulttext, encoding='ascii', errors='strict'), encoding='ascii', errors='strict') DCNL DCSP  DCSP except (UnicodeError, TypeError): DCNL DCSP  DCSP  DCSP return False DCNL DCSP finally: DCNL DCSP  DCSP file_obj.seek(current_position) DCNL DCSP return is_encrypted(b_vaulttext)
def parse_kv(args, check_raw=False): DCNL  DCSP args = to_text(args, nonstring='passthru') DCNL DCSP options = {} DCNL DCSP if (args is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP vargs = split_args(args) DCNL DCSP  DCSP except ValueError as ve: DCNL DCSP  DCSP  DCSP if ('no DCSP closing DCSP quotation' in str(ve).lower()): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleParserError('error DCSP parsing DCSP argument DCSP string, DCSP try DCSP quoting DCSP the DCSP entire DCSP line.') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP raw_params = [] DCNL DCSP  DCSP for orig_x in vargs: DCNL DCSP  DCSP  DCSP x = _decode_escapes(orig_x) DCNL DCSP  DCSP  DCSP if ('=' in x): DCNL DCSP  DCSP  DCSP  DCSP pos = 0 DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pos = x.index('=', (pos + 1)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ((pos > 0) and (x[(pos - 1)] != '\\')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raw_params.append(x.replace('\\=', '=')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP k = x[:pos] DCNL DCSP  DCSP  DCSP  DCSP v = x[(pos + 1):] DCNL DCSP  DCSP  DCSP  DCSP if (check_raw and (k not in ('creates', 'removes', 'chdir', 'executable', 'warn'))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raw_params.append(orig_x) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP options[k.strip()] = unquote(v.strip()) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raw_params.append(orig_x) DCNL DCSP  DCSP if (len(raw_params) > 0): DCNL DCSP  DCSP  DCSP options[u'_raw_params'] = ' DCSP '.join(raw_params) DCNL DCSP return options
def _get_quote_state(token, quote_char): DCNL  DCSP prev_char = None DCNL DCSP for (idx, cur_char) in enumerate(token): DCNL DCSP  DCSP if (idx > 0): DCNL DCSP  DCSP  DCSP prev_char = token[(idx - 1)] DCNL DCSP  DCSP if ((cur_char in '"\'') and (prev_char != '\\')): DCNL DCSP  DCSP  DCSP if quote_char: DCNL DCSP  DCSP  DCSP  DCSP if (cur_char == quote_char): DCNL DCSP  DCSP  DCSP  DCSP  DCSP quote_char = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP quote_char = cur_char DCNL DCSP return quote_char
def _count_jinja2_blocks(token, cur_depth, open_token, close_token): DCNL  DCSP num_open = token.count(open_token) DCNL DCSP num_close = token.count(close_token) DCNL DCSP if (num_open != num_close): DCNL DCSP  DCSP cur_depth += (num_open - num_close) DCNL DCSP  DCSP if (cur_depth < 0): DCNL DCSP  DCSP  DCSP cur_depth = 0 DCNL DCSP return cur_depth
def split_args(args): DCNL  DCSP params = [] DCNL DCSP args = args.strip() DCNL DCSP items = args.strip().split('\n') DCNL DCSP quote_char = None DCNL DCSP inside_quotes = False DCNL DCSP print_depth = 0 DCNL DCSP block_depth = 0 DCNL DCSP comment_depth = 0 DCNL DCSP for (itemidx, item) in enumerate(items): DCNL DCSP  DCSP tokens = item.strip().split(' DCSP ') DCNL DCSP  DCSP line_continuation = False DCNL DCSP  DCSP for (idx, token) in enumerate(tokens): DCNL DCSP  DCSP  DCSP if ((token == '\\') and (not inside_quotes)): DCNL DCSP  DCSP  DCSP  DCSP line_continuation = True DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP was_inside_quotes = inside_quotes DCNL DCSP  DCSP  DCSP quote_char = _get_quote_state(token, quote_char) DCNL DCSP  DCSP  DCSP inside_quotes = (quote_char is not None) DCNL DCSP  DCSP  DCSP appended = False DCNL DCSP  DCSP  DCSP if (inside_quotes and (not was_inside_quotes) and (not (print_depth or block_depth or comment_depth))): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP elif (print_depth or block_depth or comment_depth or inside_quotes or was_inside_quotes): DCNL DCSP  DCSP  DCSP  DCSP if ((idx == 0) and was_inside_quotes): DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s%s' % (params[(-1)], token)) DCNL DCSP  DCSP  DCSP  DCSP elif (len(tokens) > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP spacer = '' DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (idx > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP spacer = ' DCSP ' DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s%s%s' % (params[(-1)], spacer, token)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP params[(-1)] = ('%s\n%s' % (params[(-1)], token)) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_print_depth = print_depth DCNL DCSP  DCSP  DCSP print_depth = _count_jinja2_blocks(token, print_depth, '{{', '}}') DCNL DCSP  DCSP  DCSP if ((print_depth != prev_print_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_block_depth = block_depth DCNL DCSP  DCSP  DCSP block_depth = _count_jinja2_blocks(token, block_depth, '{%', '%}') DCNL DCSP  DCSP  DCSP if ((block_depth != prev_block_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP prev_comment_depth = comment_depth DCNL DCSP  DCSP  DCSP comment_depth = _count_jinja2_blocks(token, comment_depth, '{#', '#}') DCNL DCSP  DCSP  DCSP if ((comment_depth != prev_comment_depth) and (not appended)): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP  DCSP  DCSP appended = True DCNL DCSP  DCSP  DCSP if ((not (print_depth or block_depth or comment_depth)) and (not inside_quotes) and (not appended) and (token != '')): DCNL DCSP  DCSP  DCSP  DCSP params.append(token) DCNL DCSP  DCSP if ((len(items) > 1) and (itemidx != (len(items) - 1)) and (not line_continuation)): DCNL DCSP  DCSP  DCSP params[(-1)] += '\n' DCNL DCSP  DCSP line_continuation = False DCNL DCSP if (print_depth or block_depth or comment_depth or inside_quotes): DCNL DCSP  DCSP raise AnsibleParserError('failed DCSP at DCSP splitting DCSP arguments, DCSP either DCSP an DCSP unbalanced DCSP jinja2 DCSP block DCSP or DCSP quotes: DCSP {}'.format(args)) DCNL DCSP return params
def unquote(data): DCNL  DCSP if is_quoted(data): DCNL DCSP  DCSP return data[1:(-1)] DCNL DCSP return data
def jsonify(result, format=False): DCNL  DCSP if (result is None): DCNL DCSP  DCSP return '{}' DCNL DCSP indent = None DCNL DCSP if format: DCNL DCSP  DCSP indent = 4 DCNL DCSP try: DCNL DCSP  DCSP return json.dumps(result, sort_keys=True, indent=indent, ensure_ascii=False) DCNL DCSP except UnicodeDecodeError: DCNL DCSP  DCSP return json.dumps(result, sort_keys=True, indent=indent)
def parse_address(address, allow_ranges=False): DCNL  DCSP port = None DCNL DCSP for matching in ['bracketed_hostport', 'hostport']: DCNL DCSP  DCSP m = patterns[matching].match(address) DCNL DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP (address, port) = m.groups() DCNL DCSP  DCSP  DCSP port = int(port) DCNL DCSP  DCSP  DCSP continue DCNL DCSP host = None DCNL DCSP for matching in ['ipv4', 'ipv6', 'hostname']: DCNL DCSP  DCSP m = patterns[matching].match(address) DCNL DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP host = address DCNL DCSP  DCSP  DCSP continue DCNL DCSP if (not host): DCNL DCSP  DCSP raise AnsibleError(('Not DCSP a DCSP valid DCSP network DCSP hostname: DCSP %s' % address)) DCNL DCSP if ((not allow_ranges) and ('[' in host)): DCNL DCSP  DCSP raise AnsibleParserError('Detected DCSP range DCSP in DCSP host DCSP but DCSP was DCSP asked DCSP to DCSP ignore DCSP ranges') DCNL DCSP return (host, port)
def _parse_params(term): DCNL  DCSP keys = ['key', 'type', 'section', 'file', 're', 'default'] DCNL DCSP params = {} DCNL DCSP for k in keys: DCNL DCSP  DCSP params[k] = '' DCNL DCSP thiskey = 'key' DCNL DCSP for (idp, phrase) in enumerate(term.split()): DCNL DCSP  DCSP for k in keys: DCNL DCSP  DCSP  DCSP if (('%s=' % k) in phrase): DCNL DCSP  DCSP  DCSP  DCSP thiskey = k DCNL DCSP  DCSP if ((idp == 0) or (not params[thiskey])): DCNL DCSP  DCSP  DCSP params[thiskey] = phrase DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP params[thiskey] += (' DCSP ' + phrase) DCNL DCSP rparams = [params[x] for x in keys if params[x]] DCNL DCSP return rparams
def make_rdata_dict(rdata): DCNL  DCSP supported_types = {A: ['address'], AAAA: ['address'], CNAME: ['target'], DNAME: ['target'], DLV: ['algorithm', 'digest_type', 'key_tag', 'digest'], DNSKEY: ['flags', 'algorithm', 'protocol', 'key'], DS: ['algorithm', 'digest_type', 'key_tag', 'digest'], HINFO: ['cpu', 'os'], LOC: ['latitude', 'longitude', 'altitude', 'size', 'horizontal_precision', 'vertical_precision'], MX: ['preference', 'exchange'], NAPTR: ['order', 'preference', 'flags', 'service', 'regexp', 'replacement'], NS: ['target'], NSEC3PARAM: ['algorithm', 'flags', 'iterations', 'salt'], PTR: ['target'], RP: ['mbox', 'txt'], SOA: ['mname', 'rname', 'serial', 'refresh', 'retry', 'expire', 'minimum'], SPF: ['strings'], SRV: ['priority', 'weight', 'port', 'target'], SSHFP: ['algorithm', 'fp_type', 'fingerprint'], TLSA: ['usage', 'selector', 'mtype', 'cert'], TXT: ['strings']} DCNL DCSP rd = {} DCNL DCSP if (rdata.rdtype in supported_types): DCNL DCSP  DCSP fields = supported_types[rdata.rdtype] DCNL DCSP  DCSP for f in fields: DCNL DCSP  DCSP  DCSP val = rdata.__getattribute__(f) DCNL DCSP  DCSP  DCSP if (type(val) == dns.name.Name): DCNL DCSP  DCSP  DCSP  DCSP val = dns.name.Name.to_text(val) DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == DLV) and (f == 'digest')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._hexify(rdata.digest).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == DS) and (f == 'digest')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._hexify(rdata.digest).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == DNSKEY) and (f == 'key')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._base64ify(rdata.key).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == NSEC3PARAM) and (f == 'salt')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._hexify(rdata.salt).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == SSHFP) and (f == 'fingerprint')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._hexify(rdata.fingerprint).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP if ((rdata.rdtype == TLSA) and (f == 'cert')): DCNL DCSP  DCSP  DCSP  DCSP val = dns.rdata._hexify(rdata.cert).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP rd[f] = val DCNL DCSP return rd
def file_props(root, path): DCNL  DCSP abspath = os.path.join(root, path) DCNL DCSP try: DCNL DCSP  DCSP st = os.lstat(abspath) DCNL DCSP except OSError as e: DCNL DCSP  DCSP display.warning(('filetree: DCSP Error DCSP using DCSP stat() DCSP on DCSP path DCSP %s DCSP (%s)' % (abspath, e))) DCNL DCSP  DCSP return None DCNL DCSP ret = dict(root=root, path=path) DCNL DCSP if stat.S_ISLNK(st.st_mode): DCNL DCSP  DCSP ret['state'] = 'link' DCNL DCSP  DCSP ret['src'] = os.readlink(abspath) DCNL DCSP elif stat.S_ISDIR(st.st_mode): DCNL DCSP  DCSP ret['state'] = 'directory' DCNL DCSP elif stat.S_ISREG(st.st_mode): DCNL DCSP  DCSP ret['state'] = 'file' DCNL DCSP  DCSP ret['src'] = abspath DCNL DCSP else: DCNL DCSP  DCSP display.warning(('filetree: DCSP Error DCSP file DCSP type DCSP of DCSP %s DCSP is DCSP not DCSP supported' % abspath)) DCNL DCSP  DCSP return None DCNL DCSP ret['uid'] = st.st_uid DCNL DCSP ret['gid'] = st.st_gid DCNL DCSP try: DCNL DCSP  DCSP ret['owner'] = pwd.getpwuid(st.st_uid).pw_name DCNL DCSP except KeyError: DCNL DCSP  DCSP ret['owner'] = st.st_uid DCNL DCSP try: DCNL DCSP  DCSP ret['group'] = grp.getgrgid(st.st_gid).gr_name DCNL DCSP except KeyError: DCNL DCSP  DCSP ret['group'] = st.st_gid DCNL DCSP ret['mode'] = ('0%03o' % stat.S_IMODE(st.st_mode)) DCNL DCSP ret['size'] = st.st_size DCNL DCSP ret['mtime'] = st.st_mtime DCNL DCSP ret['ctime'] = st.st_ctime DCNL DCSP if (HAVE_SELINUX and (selinux.is_selinux_enabled() == 1)): DCNL DCSP  DCSP context = selinux_context(abspath) DCNL DCSP  DCSP ret['seuser'] = context[0] DCNL DCSP  DCSP ret['serole'] = context[1] DCNL DCSP  DCSP ret['setype'] = context[2] DCNL DCSP  DCSP ret['selevel'] = context[3] DCNL DCSP return ret
def _parse_parameters(term): DCNL  DCSP first_split = term.split(' DCSP ', 1) DCNL DCSP if (len(first_split) <= 1): DCNL DCSP  DCSP relpath = term DCNL DCSP  DCSP params = dict() DCNL DCSP else: DCNL DCSP  DCSP relpath = first_split[0] DCNL DCSP  DCSP params = parse_kv(first_split[1]) DCNL DCSP  DCSP if ('_raw_params' in params): DCNL DCSP  DCSP  DCSP relpath = u' DCSP '.join((relpath, params['_raw_params'])) DCNL DCSP  DCSP  DCSP del params['_raw_params'] DCNL DCSP  DCSP  DCSP if (not term.startswith(relpath)): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleError('Unrecognized DCSP value DCSP after DCSP key=value DCSP parameters DCSP given DCSP to DCSP password DCSP lookup') DCNL DCSP invalid_params = frozenset(params.keys()).difference(VALID_PARAMS) DCNL DCSP if invalid_params: DCNL DCSP  DCSP raise AnsibleError(('Unrecognized DCSP parameter(s) DCSP given DCSP to DCSP password DCSP lookup: DCSP %s' % ', DCSP '.join(invalid_params))) DCNL DCSP params['length'] = int(params.get('length', DEFAULT_LENGTH)) DCNL DCSP params['encrypt'] = params.get('encrypt', None) DCNL DCSP params['chars'] = params.get('chars', None) DCNL DCSP if params['chars']: DCNL DCSP  DCSP tmp_chars = [] DCNL DCSP  DCSP if (u',,' in params['chars']): DCNL DCSP  DCSP  DCSP tmp_chars.append(u',') DCNL DCSP  DCSP tmp_chars.extend((c for c in params['chars'].replace(u',,', u',').split(u',') if c)) DCNL DCSP  DCSP params['chars'] = tmp_chars DCNL DCSP else: DCNL DCSP  DCSP params['chars'] = [u'ascii_letters', u'digits', u'.,:-_'] DCNL DCSP return (relpath, params)
def _read_password_file(b_path): DCNL  DCSP content = None DCNL DCSP if os.path.exists(b_path): DCNL DCSP  DCSP with open(b_path, 'rb') as f: DCNL DCSP  DCSP  DCSP b_content = f.read().rstrip() DCNL DCSP  DCSP content = to_text(b_content, errors='surrogate_or_strict') DCNL DCSP return content
def _gen_candidate_chars(characters): DCNL  DCSP chars = [] DCNL DCSP for chars_spec in characters: DCNL DCSP  DCSP chars.append(to_text(getattr(string, to_native(chars_spec), chars_spec), errors='strict')) DCNL DCSP chars = u''.join(chars).replace(u'"', u'').replace(u"'", u'') DCNL DCSP return chars
def _random_password(length=DEFAULT_LENGTH, chars=C.DEFAULT_PASSWORD_CHARS): DCNL  DCSP assert isinstance(chars, text_type), ('%s DCSP (%s) DCSP is DCSP not DCSP a DCSP text_type' % (chars, type(chars))) DCNL DCSP random_generator = random.SystemRandom() DCNL DCSP password = [] DCNL DCSP while (len(password) < length): DCNL DCSP  DCSP new_char = random_generator.choice(chars) DCNL DCSP  DCSP password.append(new_char) DCNL DCSP return u''.join(password)
def _random_salt(): DCNL  DCSP salt_chars = _gen_candidate_chars(['ascii_letters', 'digits', './']) DCNL DCSP return _random_password(length=8, chars=salt_chars)
def _parse_content(content): DCNL  DCSP password = content DCNL DCSP salt = None DCNL DCSP salt_slug = u' DCSP salt=' DCNL DCSP try: DCNL DCSP  DCSP sep = content.rindex(salt_slug) DCNL DCSP except ValueError: DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP salt = password[(sep + len(salt_slug)):] DCNL DCSP  DCSP password = content[:sep] DCNL DCSP return (password, salt)
def _format_content(password, salt, encrypt=True): DCNL  DCSP if ((not encrypt) and (not salt)): DCNL DCSP  DCSP return password DCNL DCSP assert salt, '_format_content DCSP was DCSP called DCSP with DCSP encryption DCSP requested DCSP but DCSP no DCSP salt DCSP value' DCNL DCSP return (u'%s DCSP salt=%s' % (password, salt))
def failed(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|failed DCSP expects DCSP a DCSP dictionary') DCNL DCSP rc = item.get('rc', 0) DCNL DCSP failed = item.get('failed', False) DCNL DCSP if ((rc != 0) or failed): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def success(*a, **kw): DCNL  DCSP return (not failed(*a, **kw))
def changed(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|changed DCSP expects DCSP a DCSP dictionary') DCNL DCSP if (not ('changed' in item)): DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP if (('results' in item) and (type(item['results']) == list) and (type(item['results'][0]) == dict)): DCNL DCSP  DCSP  DCSP for result in item['results']: DCNL DCSP  DCSP  DCSP  DCSP changed = (changed or result.get('changed', False)) DCNL DCSP else: DCNL DCSP  DCSP changed = item.get('changed', False) DCNL DCSP return changed
def skipped(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|skipped DCSP expects DCSP a DCSP dictionary') DCNL DCSP skipped = item.get('skipped', False) DCNL DCSP return skipped
def regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'): DCNL  DCSP flags = 0 DCNL DCSP if ignorecase: DCNL DCSP  DCSP flags |= re.I DCNL DCSP if multiline: DCNL DCSP  DCSP flags |= re.M DCNL DCSP _re = re.compile(pattern, flags=flags) DCNL DCSP _bool = __builtins__.get('bool') DCNL DCSP return _bool(getattr(_re, match_type, 'search')(value))
def match(value, pattern='', ignorecase=False, multiline=False): DCNL  DCSP return regex(value, pattern, ignorecase, multiline, 'match')
def search(value, pattern='', ignorecase=False, multiline=False): DCNL  DCSP return regex(value, pattern, ignorecase, multiline, 'search')
def version_compare(value, version, operator='eq', strict=False): DCNL  DCSP op_map = {'==': 'eq', '=': 'eq', 'eq': 'eq', '<': 'lt', 'lt': 'lt', '<=': 'le', 'le': 'le', '>': 'gt', 'gt': 'gt', '>=': 'ge', 'ge': 'ge', '!=': 'ne', '<>': 'ne', 'ne': 'ne'} DCNL DCSP if strict: DCNL DCSP  DCSP Version = StrictVersion DCNL DCSP else: DCNL DCSP  DCSP Version = LooseVersion DCNL DCSP if (operator in op_map): DCNL DCSP  DCSP operator = op_map[operator] DCNL DCSP else: DCNL DCSP  DCSP raise errors.AnsibleFilterError('Invalid DCSP operator DCSP type') DCNL DCSP try: DCNL DCSP  DCSP method = getattr(py_operator, operator) DCNL DCSP  DCSP return method(Version(str(value)), Version(str(version))) DCNL DCSP except Exception as e: DCNL DCSP  DCSP raise errors.AnsibleFilterError(('Version DCSP comparison: DCSP %s' % e))
def dict_diff(prv, nxt): DCNL  DCSP keys = set((prv.keys() + nxt.keys())) DCNL DCSP result = {} DCNL DCSP for k in keys: DCNL DCSP  DCSP if (prv.get(k) != nxt.get(k)): DCNL DCSP  DCSP  DCSP result[k] = (prv.get(k), nxt.get(k)) DCNL DCSP return result
def colorize(msg, color): DCNL  DCSP if DONT_COLORIZE: DCNL DCSP  DCSP return msg DCNL DCSP else: DCNL DCSP  DCSP return '{}{}{}'.format(COLORS[color], msg, COLORS['endc'])
def to_yaml(a, *args, **kw): DCNL  DCSP transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, **kw) DCNL DCSP return to_text(transformed)
def to_nice_yaml(a, indent=4, *args, **kw): DCNL  DCSP transformed = yaml.dump(a, Dumper=AnsibleDumper, indent=indent, allow_unicode=True, default_flow_style=False, **kw) DCNL DCSP return to_text(transformed)
def to_json(a, *args, **kw): DCNL  DCSP return json.dumps(a, cls=AnsibleJSONEncoder, *args, **kw)
def to_nice_json(a, indent=4, *args, **kw): DCNL  DCSP if (sys.version_info < (2, 7)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP import simplejson DCNL DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP major = int(simplejson.__version__.split('.')[0]) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if (major >= 2): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return simplejson.dumps(a, indent=indent, sort_keys=True, *args, **kw) DCNL DCSP try: DCNL DCSP  DCSP return json.dumps(a, indent=indent, sort_keys=True, cls=AnsibleJSONEncoder, *args, **kw) DCNL DCSP except: DCNL DCSP  DCSP return to_json(a, *args, **kw)
def to_bool(a): DCNL  DCSP if ((a is None) or (type(a) == bool)): DCNL DCSP  DCSP return a DCNL DCSP if isinstance(a, string_types): DCNL DCSP  DCSP a = a.lower() DCNL DCSP if (a in ['yes', 'on', '1', 'true', 1]): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def quote(a): DCNL  DCSP return shlex_quote(a)
def fileglob(pathname): DCNL  DCSP return [g for g in glob.glob(pathname) if os.path.isfile(g)]
def regex_replace(value='', pattern='', replacement='', ignorecase=False): DCNL  DCSP value = to_text(value, errors='surrogate_or_strict', nonstring='simplerepr') DCNL DCSP if ignorecase: DCNL DCSP  DCSP flags = re.I DCNL DCSP else: DCNL DCSP  DCSP flags = 0 DCNL DCSP _re = re.compile(pattern, flags=flags) DCNL DCSP return _re.sub(replacement, value)
def regex_findall(value, regex, multiline=False, ignorecase=False): DCNL  DCSP flags = 0 DCNL DCSP if ignorecase: DCNL DCSP  DCSP flags |= re.I DCNL DCSP if multiline: DCNL DCSP  DCSP flags |= re.M DCNL DCSP return re.findall(regex, value, flags)
def regex_search(value, regex, *args, **kwargs): DCNL  DCSP groups = list() DCNL DCSP for arg in args: DCNL DCSP  DCSP if arg.startswith('\\g'): DCNL DCSP  DCSP  DCSP match = re.match('\\\\g<(\\S+)>', arg).group(1) DCNL DCSP  DCSP  DCSP groups.append(match) DCNL DCSP  DCSP elif arg.startswith('\\'): DCNL DCSP  DCSP  DCSP match = int(re.match('\\\\(\\d+)', arg).group(1)) DCNL DCSP  DCSP  DCSP groups.append(match) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise errors.AnsibleFilterError('Unknown DCSP argument') DCNL DCSP flags = 0 DCNL DCSP if kwargs.get('ignorecase'): DCNL DCSP  DCSP flags |= re.I DCNL DCSP if kwargs.get('multiline'): DCNL DCSP  DCSP flags |= re.M DCNL DCSP match = re.search(regex, value, flags) DCNL DCSP if match: DCNL DCSP  DCSP if (not groups): DCNL DCSP  DCSP  DCSP return match.group() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP items = list() DCNL DCSP  DCSP  DCSP for item in groups: DCNL DCSP  DCSP  DCSP  DCSP items.append(match.group(item)) DCNL DCSP  DCSP  DCSP return items
def ternary(value, true_val, false_val): DCNL  DCSP if value: DCNL DCSP  DCSP return true_val DCNL DCSP else: DCNL DCSP  DCSP return false_val
def regex_escape(string): DCNL  DCSP return re.escape(string)
def failed(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|failed DCSP expects DCSP a DCSP dictionary') DCNL DCSP rc = item.get('rc', 0) DCNL DCSP failed = item.get('failed', False) DCNL DCSP if ((rc != 0) or failed): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def success(*a, **kw): DCNL  DCSP return (not failed(*a, **kw))
def changed(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|changed DCSP expects DCSP a DCSP dictionary') DCNL DCSP if (not ('changed' in item)): DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP if (('results' in item) and (type(item['results']) == list) and (type(item['results'][0]) == dict)): DCNL DCSP  DCSP  DCSP for result in item['results']: DCNL DCSP  DCSP  DCSP  DCSP changed = (changed or result.get('changed', False)) DCNL DCSP else: DCNL DCSP  DCSP changed = item.get('changed', False) DCNL DCSP return changed
def skipped(*a, **kw): DCNL  DCSP item = a[0] DCNL DCSP if (type(item) != dict): DCNL DCSP  DCSP raise errors.AnsibleFilterError('|skipped DCSP expects DCSP a DCSP dictionary') DCNL DCSP skipped = item.get('skipped', False) DCNL DCSP return skipped
@environmentfilter DCNL def do_groupby(environment, value, attribute): DCNL  DCSP return [tuple(t) for t in _do_groupby(environment, value, attribute)]
def ipaddr(value, query='', version=False, alias='ipaddr'): DCNL  DCSP query_func_extra_args = {'': ('vtype',), '6to4': ('vtype', 'value'), 'cidr_lookup': ('iplist', 'value'), 'int': ('vtype',), 'ipv4': ('value',), 'ipv6': ('value',), 'link-local': ('value',), 'loopback': ('value',), 'lo': ('value',), 'multicast': ('value',), 'private': ('value',), 'public': ('value',), 'unicast': ('value',), 'wrap': ('vtype', 'value')} DCNL DCSP query_func_map = {'': _empty_ipaddr_query, '6to4': _6to4_query, 'address': _ip_query, 'address/prefix': _gateway_query, 'bool': _bool_ipaddr_query, 'broadcast': _broadcast_query, 'cidr': _cidr_query, 'cidr_lookup': _cidr_lookup_query, 'gateway': _gateway_query, 'gw': _gateway_query, 'host': _host_query, 'host/prefix': _gateway_query, 'hostmask': _hostmask_query, 'hostnet': _gateway_query, 'int': _int_query, 'ip': _ip_query, 'ipv4': _ipv4_query, 'ipv6': _ipv6_query, 'link-local': _link_local_query, 'lo': _loopback_query, 'loopback': _loopback_query, 'multicast': _multicast_query, 'net': _net_query, 'netmask': _netmask_query, 'network': _network_query, 'prefix': _prefix_query, 'private': _private_query, 'public': _public_query, 'revdns': _revdns_query, 'router': _gateway_query, 'size': _size_query, 'subnet': _subnet_query, 'type': _type_query, 'unicast': _unicast_query, 'v4': _ipv4_query, 'v6': _ipv6_query, 'version': _version_query, 'wrap': _wrap_query} DCNL DCSP vtype = None DCNL DCSP if (not value): DCNL DCSP  DCSP return False DCNL DCSP elif (value == True): DCNL DCSP  DCSP return False DCNL DCSP elif isinstance(value, (list, tuple, types.GeneratorType)): DCNL DCSP  DCSP _ret = [] DCNL DCSP  DCSP for element in value: DCNL DCSP  DCSP  DCSP if ipaddr(element, str(query), version): DCNL DCSP  DCSP  DCSP  DCSP _ret.append(ipaddr(element, str(query), version)) DCNL DCSP  DCSP if _ret: DCNL DCSP  DCSP  DCSP return _ret DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return list() DCNL DCSP elif str(value).isdigit(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if ((not version) or (version and (version == 4))): DCNL DCSP  DCSP  DCSP  DCSP v = netaddr.IPNetwork('0.0.0.0/0') DCNL DCSP  DCSP  DCSP  DCSP v.value = int(value) DCNL DCSP  DCSP  DCSP  DCSP v.prefixlen = 32 DCNL DCSP  DCSP  DCSP elif (version and (version == 6)): DCNL DCSP  DCSP  DCSP  DCSP v = netaddr.IPNetwork('::/0') DCNL DCSP  DCSP  DCSP  DCSP v.value = int(value) DCNL DCSP  DCSP  DCSP  DCSP v.prefixlen = 128 DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP v = netaddr.IPNetwork('::/0') DCNL DCSP  DCSP  DCSP  DCSP v.value = int(value) DCNL DCSP  DCSP  DCSP  DCSP v.prefixlen = 128 DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP value = str(v) DCNL DCSP  DCSP vtype = 'address' DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP v = netaddr.IPNetwork(value) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (address, prefix) = value.split('/') DCNL DCSP  DCSP  DCSP  DCSP vtype = 'network' DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP vtype = 'address' DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (address, prefix) = value.split('/') DCNL DCSP  DCSP  DCSP  DCSP address.isdigit() DCNL DCSP  DCSP  DCSP  DCSP address = int(address) DCNL DCSP  DCSP  DCSP  DCSP prefix.isdigit() DCNL DCSP  DCSP  DCSP  DCSP prefix = int(prefix) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP v = netaddr.IPNetwork('0.0.0.0/0') DCNL DCSP  DCSP  DCSP  DCSP v.value = address DCNL DCSP  DCSP  DCSP  DCSP v.prefixlen = prefix DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP v = netaddr.IPNetwork('::/0') DCNL DCSP  DCSP  DCSP  DCSP  DCSP v.value = address DCNL DCSP  DCSP  DCSP  DCSP  DCSP v.prefixlen = prefix DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP value = str(v) DCNL DCSP  DCSP  DCSP vtype = 'network' DCNL DCSP try: DCNL DCSP  DCSP if (query and ((query not in query_func_map) or (query == 'cidr_lookup')) and ipaddr(query, 'network')): DCNL DCSP  DCSP  DCSP iplist = netaddr.IPSet([netaddr.IPNetwork(query)]) DCNL DCSP  DCSP  DCSP query = 'cidr_lookup' DCNL DCSP except: DCNL DCSP  DCSP pass DCNL DCSP if (version and (v.version != version)): DCNL DCSP  DCSP return False DCNL DCSP extras = [] DCNL DCSP for arg in query_func_extra_args.get(query, tuple()): DCNL DCSP  DCSP extras.append(locals()[arg]) DCNL DCSP try: DCNL DCSP  DCSP return query_func_map[query](v, *extras) DCNL DCSP except KeyError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP float(query) DCNL DCSP  DCSP  DCSP if (v.size == 1): DCNL DCSP  DCSP  DCSP  DCSP if (vtype == 'address'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(v.ip) DCNL DCSP  DCSP  DCSP  DCSP elif (vtype == 'network'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(v) DCNL DCSP  DCSP  DCSP elif (v.size > 1): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return ((str(v[query]) + '/') + str(v.prefixlen)) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return value DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise errors.AnsibleFilterError((alias + (': DCSP unknown DCSP filter DCSP type: DCSP %s' % query))) DCNL DCSP return False
def ipsubnet(value, query='', index='x'): DCNL  DCSP try: DCNL DCSP  DCSP vtype = ipaddr(value, 'type') DCNL DCSP  DCSP if (vtype == 'address'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'cidr') DCNL DCSP  DCSP elif (vtype == 'network'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'subnet') DCNL DCSP  DCSP value = netaddr.IPNetwork(v) DCNL DCSP except: DCNL DCSP  DCSP return False DCNL DCSP if (not query): DCNL DCSP  DCSP return str(value) DCNL DCSP elif str(query).isdigit(): DCNL DCSP  DCSP vsize = ipaddr(v, 'size') DCNL DCSP  DCSP query = int(query) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP float(index) DCNL DCSP  DCSP  DCSP index = int(index) DCNL DCSP  DCSP  DCSP if (vsize > 1): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(list(value.subnet(query))[index]) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP elif (vsize == 1): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(value.supernet(query)[index]) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP if (vsize > 1): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(len(list(value.subnet(query)))) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP elif (vsize == 1): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return str(value.supernet(query)[0]) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return False
def nthhost(value, query=''): DCNL  DCSP try: DCNL DCSP  DCSP vtype = ipaddr(value, 'type') DCNL DCSP  DCSP if (vtype == 'address'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'cidr') DCNL DCSP  DCSP elif (vtype == 'network'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'subnet') DCNL DCSP  DCSP value = netaddr.IPNetwork(v) DCNL DCSP except: DCNL DCSP  DCSP return False DCNL DCSP if (not query): DCNL DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP nth = int(query) DCNL DCSP  DCSP if (value.size > nth): DCNL DCSP  DCSP  DCSP return value[nth] DCNL DCSP except ValueError: DCNL DCSP  DCSP return False DCNL DCSP return False
def slaac(value, query=''): DCNL  DCSP try: DCNL DCSP  DCSP vtype = ipaddr(value, 'type') DCNL DCSP  DCSP if (vtype == 'address'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'cidr') DCNL DCSP  DCSP elif (vtype == 'network'): DCNL DCSP  DCSP  DCSP v = ipaddr(value, 'subnet') DCNL DCSP  DCSP if (ipaddr(value, 'version') != 6): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP value = netaddr.IPNetwork(v) DCNL DCSP except: DCNL DCSP  DCSP return False DCNL DCSP if (not query): DCNL DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP mac = hwaddr(query, alias='slaac') DCNL DCSP  DCSP eui = netaddr.EUI(mac) DCNL DCSP except: DCNL DCSP  DCSP return False DCNL DCSP return eui.ipv6(value.network)
def hwaddr(value, query='', alias='hwaddr'): DCNL  DCSP query_func_extra_args = {'': ('value',)} DCNL DCSP query_func_map = {'': _empty_hwaddr_query, 'bare': _bare_query, 'bool': _bool_hwaddr_query, 'int': _int_hwaddr_query, 'cisco': _cisco_query, 'eui48': _win_query, 'linux': _linux_query, 'pgsql': _postgresql_query, 'postgresql': _postgresql_query, 'psql': _postgresql_query, 'unix': _unix_query, 'win': _win_query} DCNL DCSP try: DCNL DCSP  DCSP v = netaddr.EUI(value) DCNL DCSP except: DCNL DCSP  DCSP if (query and (query != 'bool')): DCNL DCSP  DCSP  DCSP raise errors.AnsibleFilterError((alias + (': DCSP not DCSP a DCSP hardware DCSP address: DCSP %s' % value))) DCNL DCSP extras = [] DCNL DCSP for arg in query_func_extra_args.get(query, tuple()): DCNL DCSP  DCSP extras.append(locals()[arg]) DCNL DCSP try: DCNL DCSP  DCSP return query_func_map[query](v, *extras) DCNL DCSP except KeyError: DCNL DCSP  DCSP raise errors.AnsibleFilterError((alias + (': DCSP unknown DCSP filter DCSP type: DCSP %s' % query))) DCNL DCSP return False
def ip4_hex(arg): DCNL  DCSP numbers = list(map(int, arg.split('.'))) DCNL DCSP return '{:02x}{:02x}{:02x}{:02x}'.format(*numbers)
def json_query(data, expr): DCNL  DCSP if (not HAS_LIB): DCNL DCSP  DCSP raise AnsibleError('You DCSP need DCSP to DCSP install DCSP "jmespath" DCSP prior DCSP to DCSP running DCSP json_query DCSP filter') DCNL DCSP return jmespath.search(expr, data)
def human_readable(size, isbits=False, unit=None): DCNL  DCSP try: DCNL DCSP  DCSP return basic.bytes_to_human(size, isbits, unit) DCNL DCSP except: DCNL DCSP  DCSP raise errors.AnsibleFilterError(("human_readable() DCSP can't DCSP interpret DCSP following DCSP string: DCSP %s" % size))
def human_to_bytes(size, default_unit=None, isbits=False): DCNL  DCSP try: DCNL DCSP  DCSP return basic.human_to_bytes(size, default_unit, isbits) DCNL DCSP except: DCNL DCSP  DCSP raise errors.AnsibleFilterError(("human_to_bytes() DCSP can't DCSP interpret DCSP following DCSP string: DCSP %s" % size))
def secure_hash_s(data, hash_func=sha1): DCNL  DCSP digest = hash_func() DCNL DCSP data = to_bytes(data, errors='surrogate_or_strict') DCNL DCSP digest.update(data) DCNL DCSP return digest.hexdigest()
def secure_hash(filename, hash_func=sha1): DCNL  DCSP if ((not os.path.exists(to_bytes(filename, errors='surrogate_or_strict'))) or os.path.isdir(to_bytes(filename, errors='strict'))): DCNL DCSP  DCSP return None DCNL DCSP digest = hash_func() DCNL DCSP blocksize = (64 * 1024) DCNL DCSP try: DCNL DCSP  DCSP infile = open(to_bytes(filename, errors='surrogate_or_strict'), 'rb') DCNL DCSP  DCSP block = infile.read(blocksize) DCNL DCSP  DCSP while block: DCNL DCSP  DCSP  DCSP digest.update(block) DCNL DCSP  DCSP  DCSP block = infile.read(blocksize) DCNL DCSP  DCSP infile.close() DCNL DCSP except IOError as e: DCNL DCSP  DCSP raise AnsibleError(('error DCSP while DCSP accessing DCSP the DCSP file DCSP %s, DCSP error DCSP was: DCSP %s' % (filename, e))) DCNL DCSP return digest.hexdigest()
def unicode_wrap(func, *args, **kwargs): DCNL  DCSP return to_text(func(*args, **kwargs), nonstring='passthru')
def get_docstring(filename, verbose=False): DCNL  DCSP doc = None DCNL DCSP plainexamples = None DCNL DCSP returndocs = None DCNL DCSP metadata = None DCNL DCSP try: DCNL DCSP  DCSP M = ast.parse(''.join(open(filename))) DCNL DCSP  DCSP for child in M.body: DCNL DCSP  DCSP  DCSP if isinstance(child, ast.Assign): DCNL DCSP  DCSP  DCSP  DCSP for t in child.targets: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP theid = t.id DCNL DCSP  DCSP  DCSP  DCSP  DCSP except AttributeError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP display.warning(('Failed DCSP to DCSP assign DCSP id DCSP for DCSP %s DCSP on DCSP %s, DCSP skipping' % (t, filename))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ('DOCUMENTATION' == theid): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc = AnsibleLoader(child.value.s, file_name=filename).get_single_data() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragments = doc.get('extends_documentation_fragment', []) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(fragments, string_types): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragments = [fragments] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for fragment_slug in fragments: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragment_slug = fragment_slug.lower() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('.' in fragment_slug): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (fragment_name, fragment_var) = fragment_slug.split('.', 1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragment_var = fragment_var.upper() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (fragment_name, fragment_var) = (fragment_slug, 'DOCUMENTATION') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragment_class = fragment_loader.get(fragment_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP assert (fragment_class is not None) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragment_yaml = getattr(fragment_class, fragment_var, '{}') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fragment = AnsibleLoader(fragment_yaml, file_name=filename).get_single_data() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('notes' in fragment): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP notes = fragment.pop('notes') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if notes: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('notes' not in doc): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc['notes'] = [] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc['notes'].extend(notes) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('options' not in fragment): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise Exception(('missing DCSP options DCSP in DCSP fragment DCSP (%s), DCSP possibly DCSP misformatted?: DCSP %s' % (fragment_name, filename))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for (key, value) in fragment.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (key not in doc): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc[key] = value DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(doc[key], MutableMapping): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc[key].update(value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(doc[key], MutableSet): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc[key].add(value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(doc[key], MutableSequence): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP doc[key] = sorted(frozenset((doc[key] + value))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise Exception('Attempt DCSP to DCSP extend DCSP a DCSP documentation DCSP fragement DCSP (%s) DCSP of DCSP unknown DCSP type: DCSP %s'(fragment_name, filename)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif ('EXAMPLES' == theid): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP plainexamples = child.value.s[1:] DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif ('RETURN' == theid): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP returndocs = child.value.s[1:] DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif ('ANSIBLE_METADATA' == theid): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = child.value DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (type(metadata).__name__ == 'Dict'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = ast.literal_eval(child.value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = AnsibleLoader(child.value.s, file_name=filename).get_single_data() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not isinstance(metadata, dict)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP display.warning(('Invalid DCSP metadata DCSP detected DCSP in DCSP %s, DCSP using DCSP defaults' % filename)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP metadata = {'status': ['preview'], 'supported_by': 'community', 'version': '1.0'} DCNL DCSP except: DCNL DCSP  DCSP display.error(('unable DCSP to DCSP parse DCSP %s' % filename)) DCNL DCSP  DCSP if (verbose == True): DCNL DCSP  DCSP  DCSP display.display(('unable DCSP to DCSP parse DCSP %s' % filename)) DCNL DCSP  DCSP  DCSP raise DCNL DCSP if (not metadata): DCNL DCSP  DCSP metadata = dict() DCNL DCSP metadata['version'] = metadata.get('version', '1.0') DCNL DCSP metadata['status'] = metadata.get('status', ['preview']) DCNL DCSP metadata['supported_by'] = metadata.get('supported_by', 'community') DCNL DCSP return (doc, plainexamples, returndocs, metadata)
def unfrackpath(path, follow=True): DCNL  DCSP if follow: DCNL DCSP  DCSP final_path = os.path.normpath(os.path.realpath(os.path.expanduser(os.path.expandvars(to_bytes(path, errors='surrogate_or_strict'))))) DCNL DCSP else: DCNL DCSP  DCSP final_path = os.path.normpath(os.path.abspath(os.path.expanduser(os.path.expandvars(to_bytes(path, errors='surrogate_or_strict'))))) DCNL DCSP return to_text(final_path, errors='surrogate_or_strict')
def makedirs_safe(path, mode=None): DCNL  DCSP rpath = unfrackpath(path) DCNL DCSP b_rpath = to_bytes(rpath) DCNL DCSP if (not os.path.exists(b_rpath)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if mode: DCNL DCSP  DCSP  DCSP  DCSP os.makedirs(b_rpath, mode) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP os.makedirs(b_rpath) DCNL DCSP  DCSP except OSError as e: DCNL DCSP  DCSP  DCSP if (e.errno != EEXIST): DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleError(('Unable DCSP to DCSP create DCSP local DCSP directories(%s): DCSP %s' % (to_native(rpath), to_native(e))))
def stringc(text, color): DCNL  DCSP if ANSIBLE_COLOR: DCNL DCSP  DCSP return '\n'.join([(u'\x1b[%sm%s\x1b[0m' % (codeCodes[color], t)) for t in text.split('\n')]) DCNL DCSP else: DCNL DCSP  DCSP return text
def colorize(lead, num, color): DCNL  DCSP s = (u'%s=%-4s' % (lead, str(num))) DCNL DCSP if ((num != 0) and ANSIBLE_COLOR and (color is not None)): DCNL DCSP  DCSP s = stringc(s, color) DCNL DCSP return s
def _validate_mutable_mappings(a, b): DCNL  DCSP if (not (isinstance(a, MutableMapping) and isinstance(b, MutableMapping))): DCNL DCSP  DCSP myvars = [] DCNL DCSP  DCSP for x in [a, b]: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP myvars.append(dumps(x)) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP myvars.append(to_native(x)) DCNL DCSP  DCSP raise AnsibleError("failed DCSP to DCSP combine DCSP variables, DCSP expected DCSP dicts DCSP but DCSP got DCSP a DCSP '{0}' DCSP and DCSP a DCSP '{1}': DCSP \n{2}\n{3}".format(a.__class__.__name__, b.__class__.__name__, myvars[0], myvars[1]))
def combine_vars(a, b): DCNL  DCSP if (C.DEFAULT_HASH_BEHAVIOUR == 'merge'): DCNL DCSP  DCSP return merge_hash(a, b) DCNL DCSP else: DCNL DCSP  DCSP _validate_mutable_mappings(a, b) DCNL DCSP  DCSP result = a.copy() DCNL DCSP  DCSP result.update(b) DCNL DCSP  DCSP return result
def merge_hash(a, b): DCNL  DCSP _validate_mutable_mappings(a, b) DCNL DCSP if ((a == {}) or (a == b)): DCNL DCSP  DCSP return b.copy() DCNL DCSP result = a.copy() DCNL DCSP for (k, v) in iteritems(b): DCNL DCSP  DCSP if ((k in result) and isinstance(result[k], MutableMapping) and isinstance(v, MutableMapping)): DCNL DCSP  DCSP  DCSP result[k] = merge_hash(result[k], v) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP result[k] = v DCNL DCSP return result
def isidentifier(ident): DCNL  DCSP if (not isinstance(ident, string_types)): DCNL DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP root = ast.parse(ident) DCNL DCSP except SyntaxError: DCNL DCSP  DCSP return False DCNL DCSP if (not isinstance(root, ast.Module)): DCNL DCSP  DCSP return False DCNL DCSP if (len(root.body) != 1): DCNL DCSP  DCSP return False DCNL DCSP if (not isinstance(root.body[0], ast.Expr)): DCNL DCSP  DCSP return False DCNL DCSP if (not isinstance(root.body[0].value, ast.Name)): DCNL DCSP  DCSP return False DCNL DCSP if (root.body[0].value.id != ident): DCNL DCSP  DCSP return False DCNL DCSP return True
def pct_to_int(value, num_items, min_value=1): DCNL  DCSP if (isinstance(value, string_types) and value.endswith('%')): DCNL DCSP  DCSP value_pct = int(value.replace('%', '')) DCNL DCSP  DCSP return (int(((value_pct / 100.0) * num_items)) or min_value) DCNL DCSP else: DCNL DCSP  DCSP return int(value)
def shell_expand(path, expand_relative_paths=False): DCNL  DCSP if path: DCNL DCSP  DCSP path = os.path.expanduser(os.path.expandvars(path)) DCNL DCSP  DCSP if (expand_relative_paths and (not path.startswith('/'))): DCNL DCSP  DCSP  DCSP if ('CONFIG_FILE' in globals()): DCNL DCSP  DCSP  DCSP  DCSP CFGDIR = os.path.dirname(CONFIG_FILE) DCNL DCSP  DCSP  DCSP  DCSP path = os.path.join(CFGDIR, path) DCNL DCSP  DCSP  DCSP path = os.path.abspath(path) DCNL DCSP return path
def get_config(p, section, key, env_var, default, value_type=None, expand_relative_paths=False): DCNL  DCSP value = _get_config(p, section, key, env_var, default) DCNL DCSP if (value_type == 'boolean'): DCNL DCSP  DCSP value = mk_boolean(value) DCNL DCSP elif value: DCNL DCSP  DCSP if (value_type == 'integer'): DCNL DCSP  DCSP  DCSP value = int(value) DCNL DCSP  DCSP elif (value_type == 'float'): DCNL DCSP  DCSP  DCSP value = float(value) DCNL DCSP  DCSP elif (value_type == 'list'): DCNL DCSP  DCSP  DCSP if isinstance(value, string_types): DCNL DCSP  DCSP  DCSP  DCSP value = [x.strip() for x in value.split(',')] DCNL DCSP  DCSP elif (value_type == 'none'): DCNL DCSP  DCSP  DCSP if (value == 'None'): DCNL DCSP  DCSP  DCSP  DCSP value = None DCNL DCSP  DCSP elif (value_type == 'path'): DCNL DCSP  DCSP  DCSP value = shell_expand(value, expand_relative_paths=expand_relative_paths) DCNL DCSP  DCSP elif (value_type == 'tmppath'): DCNL DCSP  DCSP  DCSP value = shell_expand(value) DCNL DCSP  DCSP  DCSP if (not os.path.exists(value)): DCNL DCSP  DCSP  DCSP  DCSP makedirs_safe(value, 448) DCNL DCSP  DCSP  DCSP prefix = ('ansible-local-%s' % os.getpid()) DCNL DCSP  DCSP  DCSP value = tempfile.mkdtemp(prefix=prefix, dir=value) DCNL DCSP  DCSP elif (value_type == 'pathlist'): DCNL DCSP  DCSP  DCSP if isinstance(value, string_types): DCNL DCSP  DCSP  DCSP  DCSP value = [shell_expand(x, expand_relative_paths=expand_relative_paths) for x in value.split(os.pathsep)] DCNL DCSP  DCSP elif isinstance(value, string_types): DCNL DCSP  DCSP  DCSP value = unquote(value) DCNL DCSP return to_text(value, errors='surrogate_or_strict', nonstring='passthru')
def _get_config(p, section, key, env_var, default): DCNL  DCSP value = default DCNL DCSP if (p is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP value = p.get(section, key, raw=True) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP pass DCNL DCSP if (env_var is not None): DCNL DCSP  DCSP env_value = os.environ.get(env_var, None) DCNL DCSP  DCSP if (env_value is not None): DCNL DCSP  DCSP  DCSP value = env_value DCNL DCSP return to_text(value, errors='surrogate_or_strict', nonstring='passthru')
def load_config_file(): DCNL  DCSP p = configparser.ConfigParser() DCNL DCSP path0 = os.getenv('ANSIBLE_CONFIG', None) DCNL DCSP if (path0 is not None): DCNL DCSP  DCSP path0 = os.path.expanduser(path0) DCNL DCSP  DCSP if os.path.isdir(path0): DCNL DCSP  DCSP  DCSP path0 += '/ansible.cfg' DCNL DCSP try: DCNL DCSP  DCSP path1 = (os.getcwd() + '/ansible.cfg') DCNL DCSP except OSError: DCNL DCSP  DCSP path1 = None DCNL DCSP path2 = os.path.expanduser('~/.ansible.cfg') DCNL DCSP path3 = '/etc/ansible/ansible.cfg' DCNL DCSP for path in [path0, path1, path2, path3]: DCNL DCSP  DCSP if ((path is not None) and os.path.exists(path)): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP p.read(path) DCNL DCSP  DCSP  DCSP except configparser.Error as e: DCNL DCSP  DCSP  DCSP  DCSP raise AnsibleOptionsError('Error DCSP reading DCSP config DCSP file: DCSP \n{0}'.format(e)) DCNL DCSP  DCSP  DCSP return (p, path) DCNL DCSP return (None, '')
def preprocess_vars(a): DCNL  DCSP if (a is None): DCNL DCSP  DCSP return None DCNL DCSP elif (not isinstance(a, list)): DCNL DCSP  DCSP data = [a] DCNL DCSP else: DCNL DCSP  DCSP data = a DCNL DCSP for item in data: DCNL DCSP  DCSP if (not isinstance(item, MutableMapping)): DCNL DCSP  DCSP  DCSP raise AnsibleError(('variable DCSP files DCSP must DCSP contain DCSP either DCSP a DCSP dictionary DCSP of DCSP variables, DCSP or DCSP a DCSP list DCSP of DCSP dictionaries. DCSP Got: DCSP %s DCSP (%s)' % (a, type(a)))) DCNL DCSP return data
def strip_internal_keys(dirty): DCNL  DCSP clean = dirty.copy() DCNL DCSP for k in dirty.keys(): DCNL DCSP  DCSP if (isinstance(k, string_types) and k.startswith('_ansible_')): DCNL DCSP  DCSP  DCSP del clean[k] DCNL DCSP  DCSP elif isinstance(dirty[k], dict): DCNL DCSP  DCSP  DCSP clean[k] = strip_internal_keys(dirty[k]) DCNL DCSP return clean
def hash_params(params): DCNL  DCSP if (isinstance(params, collections.Container) and (not isinstance(params, (text_type, binary_type)))): DCNL DCSP  DCSP if isinstance(params, collections.Mapping): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP new_params = frozenset(params.items()) DCNL DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP new_params = set() DCNL DCSP  DCSP  DCSP  DCSP for (k, v) in params.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_params.update((k, hash_params(v))) DCNL DCSP  DCSP  DCSP  DCSP new_params = frozenset(new_params) DCNL DCSP  DCSP elif isinstance(params, (collections.Set, collections.Sequence)): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP new_params = frozenset(params) DCNL DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP new_params = set() DCNL DCSP  DCSP  DCSP  DCSP for v in params: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_params.update(hash_params(v)) DCNL DCSP  DCSP  DCSP  DCSP new_params = frozenset(new_params) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP new_params = frozenset(params) DCNL DCSP  DCSP return new_params DCNL DCSP return frozenset((params,))
def load_list_of_blocks(ds, play, parent_block=None, role=None, task_include=None, use_handlers=False, variable_manager=None, loader=None): DCNL  DCSP from ansible.playbook.block import Block DCNL DCSP from ansible.playbook.task_include import TaskInclude DCNL DCSP from ansible.playbook.role_include import IncludeRole DCNL DCSP assert isinstance(ds, (list, type(None))) DCNL DCSP block_list = [] DCNL DCSP if ds: DCNL DCSP  DCSP for block_ds in ds: DCNL DCSP  DCSP  DCSP b = Block.load(block_ds, play=play, parent_block=parent_block, role=role, task_include=task_include, use_handlers=use_handlers, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP if (b._implicit and (len(block_list) > 0) and block_list[(-1)]._implicit): DCNL DCSP  DCSP  DCSP  DCSP for t in b.block: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(t._parent, (TaskInclude, IncludeRole)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP t._parent._parent = block_list[(-1)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP t._parent = block_list[(-1)] DCNL DCSP  DCSP  DCSP  DCSP block_list[(-1)].block.extend(b.block) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP block_list.append(b) DCNL DCSP return block_list
def load_list_of_tasks(ds, play, block=None, role=None, task_include=None, use_handlers=False, variable_manager=None, loader=None): DCNL  DCSP from ansible.playbook.block import Block DCNL DCSP from ansible.playbook.handler import Handler DCNL DCSP from ansible.playbook.task import Task DCNL DCSP from ansible.playbook.task_include import TaskInclude DCNL DCSP from ansible.playbook.role_include import IncludeRole DCNL DCSP from ansible.playbook.handler_task_include import HandlerTaskInclude DCNL DCSP from ansible.template import Templar DCNL DCSP assert isinstance(ds, list) DCNL DCSP task_list = [] DCNL DCSP for task_ds in ds: DCNL DCSP  DCSP assert isinstance(task_ds, dict) DCNL DCSP  DCSP if ('block' in task_ds): DCNL DCSP  DCSP  DCSP t = Block.load(task_ds, play=play, parent_block=block, role=role, task_include=task_include, use_handlers=use_handlers, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP task_list.append(t) DCNL DCSP  DCSP elif ('include' in task_ds): DCNL DCSP  DCSP  DCSP if use_handlers: DCNL DCSP  DCSP  DCSP  DCSP include_class = HandlerTaskInclude DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP include_class = TaskInclude DCNL DCSP  DCSP  DCSP t = include_class.load(task_ds, block=block, role=role, task_include=None, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP all_vars = variable_manager.get_vars(loader=loader, play=play, task=t) DCNL DCSP  DCSP  DCSP templar = Templar(loader=loader, variables=all_vars) DCNL DCSP  DCSP  DCSP if (t.static is not None): DCNL DCSP  DCSP  DCSP  DCSP is_static = t.static DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP is_static = (C.DEFAULT_TASK_INCLUDES_STATIC or (use_handlers and C.DEFAULT_HANDLER_INCLUDES_STATIC) or ((not templar._contains_vars(t.args['_raw_params'])) and t.all_parents_static() and (not t.loop))) DCNL DCSP  DCSP  DCSP if is_static: DCNL DCSP  DCSP  DCSP  DCSP if (t.loop is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise AnsibleParserError("You DCSP cannot DCSP use DCSP 'static' DCSP on DCSP an DCSP include DCSP with DCSP a DCSP loop", obj=task_ds) DCNL DCSP  DCSP  DCSP  DCSP t.statically_loaded = True DCNL DCSP  DCSP  DCSP  DCSP parent_include = block DCNL DCSP  DCSP  DCSP  DCSP cumulative_path = None DCNL DCSP  DCSP  DCSP  DCSP found = False DCNL DCSP  DCSP  DCSP  DCSP subdir = 'tasks' DCNL DCSP  DCSP  DCSP  DCSP if use_handlers: DCNL DCSP  DCSP  DCSP  DCSP  DCSP subdir = 'handlers' DCNL DCSP  DCSP  DCSP  DCSP while (parent_include is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not isinstance(parent_include, TaskInclude)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP parent_include = parent_include._parent DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent_include_dir = templar.template(os.path.dirname(parent_include.args.get('_raw_params'))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (cumulative_path is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cumulative_path = parent_include_dir DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (not os.path.isabs(cumulative_path)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cumulative_path = os.path.join(parent_include_dir, cumulative_path) DCNL DCSP  DCSP  DCSP  DCSP  DCSP include_target = templar.template(t.args['_raw_params']) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if t._role: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_basedir = os.path.join(t._role._role_path, subdir, cumulative_path) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP include_file = loader.path_dwim_relative(new_basedir, subdir, include_target) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP include_file = loader.path_dwim_relative(loader.get_basedir(), cumulative_path, include_target) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if os.path.exists(include_file): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP found = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP parent_include = parent_include._parent DCNL DCSP  DCSP  DCSP  DCSP if (not found): DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP include_target = templar.template(t.args['_raw_params']) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except AnsibleUndefinedVariable: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise AnsibleParserError(('Error DCSP when DCSP evaluating DCSP variable DCSP in DCSP include DCSP name: DCSP %s.\n\nWhen DCSP using DCSP static DCSP includes, DCSP ensure DCSP that DCSP any DCSP variables DCSP used DCSP in DCSP their DCSP names DCSP are DCSP defined DCSP in DCSP vars/vars_files\nor DCSP extra-vars DCSP passed DCSP in DCSP from DCSP the DCSP command DCSP line. DCSP Static DCSP includes DCSP cannot DCSP use DCSP variables DCSP from DCSP inventory\nsources DCSP like DCSP group DCSP or DCSP host DCSP vars.' % t.args['_raw_params']), obj=task_ds, suppress_extended_error=True) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if t._role: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP include_file = loader.path_dwim_relative(t._role._role_path, subdir, include_target) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP include_file = loader.path_dwim(include_target) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP data = loader.load_from_file(include_file) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (data is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return [] DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (not isinstance(data, list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise AnsibleParserError('included DCSP task DCSP files DCSP must DCSP contain DCSP a DCSP list DCSP of DCSP tasks', obj=data) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.vv(('statically DCSP included: DCSP %s' % include_file)) DCNL DCSP  DCSP  DCSP  DCSP except AnsibleFileNotFound: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (t.static or C.DEFAULT_TASK_INCLUDES_STATIC or (C.DEFAULT_HANDLER_INCLUDES_STATIC and use_handlers)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.deprecated(("Included DCSP file DCSP '%s' DCSP not DCSP found, DCSP however DCSP since DCSP this DCSP include DCSP is DCSP not DCSP explicitly DCSP marked DCSP as DCSP 'static: DCSP yes', DCSP we DCSP will DCSP try DCSP and DCSP include DCSP it DCSP dynamically DCSP later. DCSP In DCSP the DCSP future, DCSP this DCSP will DCSP be DCSP an DCSP error DCSP unless DCSP 'static: DCSP no' DCSP is DCSP used DCSP on DCSP the DCSP include DCSP task. DCSP If DCSP you DCSP do DCSP not DCSP want DCSP missing DCSP includes DCSP to DCSP be DCSP considered DCSP dynamic, DCSP use DCSP 'static: DCSP yes' DCSP on DCSP the DCSP include DCSP or DCSP set DCSP the DCSP global DCSP ansible.cfg DCSP options DCSP to DCSP make DCSP all DCSP inclues DCSP static DCSP for DCSP tasks DCSP and/or DCSP handlers" % include_file)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP task_list.append(t) DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP ti_copy = t.copy(exclude_parent=True) DCNL DCSP  DCSP  DCSP  DCSP ti_copy._parent = block DCNL DCSP  DCSP  DCSP  DCSP included_blocks = load_list_of_blocks(data, play=play, parent_block=None, task_include=ti_copy, role=role, use_handlers=use_handlers, loader=loader, variable_manager=variable_manager) DCNL DCSP  DCSP  DCSP  DCSP tags = ti_copy.vars.pop('tags', []) DCNL DCSP  DCSP  DCSP  DCSP if isinstance(tags, string_types): DCNL DCSP  DCSP  DCSP  DCSP  DCSP tags = tags.split(',') DCNL DCSP  DCSP  DCSP  DCSP if (len(tags) > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(ti_copy.tags) > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise AnsibleParserError('Include DCSP tasks DCSP should DCSP not DCSP specify DCSP tags DCSP in DCSP more DCSP than DCSP one DCSP way DCSP (both DCSP via DCSP args DCSP and DCSP directly DCSP on DCSP the DCSP task). DCSP Mixing DCSP styles DCSP in DCSP which DCSP tags DCSP are DCSP specified DCSP is DCSP prohibited DCSP for DCSP whole DCSP import DCSP hierarchy, DCSP not DCSP only DCSP for DCSP single DCSP import DCSP statement', obj=task_ds, suppress_extended_error=True) DCNL DCSP  DCSP  DCSP  DCSP  DCSP display.deprecated('You DCSP should DCSP not DCSP specify DCSP tags DCSP in DCSP the DCSP include DCSP parameters. DCSP All DCSP tags DCSP should DCSP be DCSP specified DCSP using DCSP the DCSP task-level DCSP option') DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP tags = ti_copy.tags[:] DCNL DCSP  DCSP  DCSP  DCSP for b in included_blocks: DCNL DCSP  DCSP  DCSP  DCSP  DCSP b.tags = list(set(b.tags).union(tags)) DCNL DCSP  DCSP  DCSP  DCSP if use_handlers: DCNL DCSP  DCSP  DCSP  DCSP  DCSP for b in included_blocks: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP task_list.extend(b.block) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP task_list.extend(included_blocks) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP task_list.append(t) DCNL DCSP  DCSP elif ('include_role' in task_ds): DCNL DCSP  DCSP  DCSP ir = IncludeRole.load(task_ds, block=block, role=role, task_include=None, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP if (ir.static is not None): DCNL DCSP  DCSP  DCSP  DCSP is_static = ir.static DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP display.debug('Determine DCSP if DCSP include_role DCSP is DCSP static') DCNL DCSP  DCSP  DCSP  DCSP all_vars = variable_manager.get_vars(loader=loader, play=play, task=ir) DCNL DCSP  DCSP  DCSP  DCSP templar = Templar(loader=loader, variables=all_vars) DCNL DCSP  DCSP  DCSP  DCSP needs_templating = False DCNL DCSP  DCSP  DCSP  DCSP for param in ir.args: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if templar._contains_vars(ir.args[param]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not templar.templatable(ir.args[param])): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP needs_templating = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP is_static = (C.DEFAULT_TASK_INCLUDES_STATIC or (use_handlers and C.DEFAULT_HANDLER_INCLUDES_STATIC) or ((not needs_templating) and ir.all_parents_static() and (not ir.loop))) DCNL DCSP  DCSP  DCSP  DCSP display.debug(('Determined DCSP that DCSP if DCSP include_role DCSP static DCSP is DCSP %s' % str(is_static))) DCNL DCSP  DCSP  DCSP if is_static: DCNL DCSP  DCSP  DCSP  DCSP t = task_list.extend(ir.get_block_list(variable_manager=variable_manager, loader=loader)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP t = task_list.append(ir) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if use_handlers: DCNL DCSP  DCSP  DCSP  DCSP t = Handler.load(task_ds, block=block, role=role, task_include=task_include, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP t = Task.load(task_ds, block=block, role=role, task_include=task_include, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP  DCSP task_list.append(t) DCNL DCSP return task_list
def load_list_of_roles(ds, play, current_role_path=None, variable_manager=None, loader=None): DCNL  DCSP from ansible.playbook.role.include import RoleInclude DCNL DCSP assert isinstance(ds, list) DCNL DCSP roles = [] DCNL DCSP for role_def in ds: DCNL DCSP  DCSP i = RoleInclude.load(role_def, play=play, current_role_path=current_role_path, variable_manager=variable_manager, loader=loader) DCNL DCSP  DCSP roles.append(i) DCNL DCSP return roles
def parseDatetime(value): DCNL  DCSP value = NORMALIZE_REGEX.sub('~', value.strip()) DCNL DCSP regs = YEAR_REGEX1.match(value) DCNL DCSP if regs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP year = int(regs.group(1)) DCNL DCSP  DCSP  DCSP return (date(year, 1, 1), unicode(year)) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP regs = DATE_REGEX1.match(value) DCNL DCSP if regs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP year = int(regs.group(1)) DCNL DCSP  DCSP  DCSP month = int(regs.group(2)) DCNL DCSP  DCSP  DCSP day = int(regs.group(3)) DCNL DCSP  DCSP  DCSP return date(year, month, day) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP regs = DATETIME_REGEX1.match(value) DCNL DCSP if regs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP year = int(regs.group(1)) DCNL DCSP  DCSP  DCSP month = int(regs.group(2)) DCNL DCSP  DCSP  DCSP day = int(regs.group(3)) DCNL DCSP  DCSP  DCSP hour = int(regs.group(4)) DCNL DCSP  DCSP  DCSP min = int(regs.group(5)) DCNL DCSP  DCSP  DCSP sec = int(regs.group(6)) DCNL DCSP  DCSP  DCSP return datetime(year, month, day, hour, min, sec) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP regs = DATETIME_REGEX2.match(value) DCNL DCSP if regs: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP month = int(regs.group(1)) DCNL DCSP  DCSP  DCSP day = int(regs.group(2)) DCNL DCSP  DCSP  DCSP year = int(regs.group(3)) DCNL DCSP  DCSP  DCSP hour = int(regs.group(4)) DCNL DCSP  DCSP  DCSP min = int(regs.group(5)) DCNL DCSP  DCSP  DCSP sec = int(regs.group(6)) DCNL DCSP  DCSP  DCSP return datetime(year, month, day, hour, min, sec) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP current_locale = setlocale(LC_ALL, 'C') DCNL DCSP try: DCNL DCSP  DCSP match = TIMEZONE_REGEX.match(value) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP without_timezone = match.group(1) DCNL DCSP  DCSP  DCSP delta = int(match.group(2)) DCNL DCSP  DCSP  DCSP delta = createTimezone(delta) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP without_timezone = value DCNL DCSP  DCSP  DCSP delta = None DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP timestamp = strptime(without_timezone, ISO_TIMESTAMP) DCNL DCSP  DCSP  DCSP arguments = (list(timestamp[0:6]) + [0, delta]) DCNL DCSP  DCSP  DCSP return datetime(*arguments) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP timestamp = strptime(without_timezone, RIFF_TIMESTAMP) DCNL DCSP  DCSP  DCSP arguments = (list(timestamp[0:6]) + [0, delta]) DCNL DCSP  DCSP  DCSP return datetime(*arguments) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP timestamp = strptime(value, MONTH_YEAR) DCNL DCSP  DCSP  DCSP arguments = list(timestamp[0:3]) DCNL DCSP  DCSP  DCSP return date(*arguments) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP finally: DCNL DCSP  DCSP setlocale(LC_ALL, current_locale) DCNL DCSP return None
def setLanguage(meta, key, value): DCNL  DCSP return Language(value)
def setTrackTotal(meta, key, total): DCNL  DCSP try: DCNL DCSP  DCSP return int(total) DCNL DCSP except ValueError: DCNL DCSP  DCSP meta.warning(('Invalid DCSP track DCSP total: DCSP %r' % total)) DCNL DCSP  DCSP return None
def extractMetadata(parser, quality=QUALITY_NORMAL): DCNL  DCSP try: DCNL DCSP  DCSP extractor = extractors[parser.__class__] DCNL DCSP except KeyError: DCNL DCSP  DCSP return None DCNL DCSP metadata = extractor(quality) DCNL DCSP try: DCNL DCSP  DCSP metadata.extract(parser) DCNL DCSP except HACHOIR_ERRORS as err: DCNL DCSP  DCSP error(('Error DCSP during DCSP metadata DCSP extraction: DCSP %s' % unicode(err))) DCNL DCSP if metadata: DCNL DCSP  DCSP metadata.mime_type = parser.mime_type DCNL DCSP  DCSP metadata.endian = endian_name[parser.endian] DCNL DCSP return metadata
def computeCompressionRate(meta): DCNL  DCSP if ((not meta.has('file_size')) or (not meta.get('compr_size', 0))): DCNL DCSP  DCSP return DCNL DCSP file_size = meta.get('file_size') DCNL DCSP if (not file_size): DCNL DCSP  DCSP return DCNL DCSP meta.compr_rate = (float(file_size) / meta.get('compr_size'))
def computeComprRate(meta, compr_size): DCNL  DCSP if ((not meta.has('width')) or (not meta.has('height')) or (not meta.has('bits_per_pixel'))): DCNL DCSP  DCSP return DCNL DCSP if (not compr_size): DCNL DCSP  DCSP return DCNL DCSP orig_size = ((meta.get('width') * meta.get('height')) * meta.get('bits_per_pixel')) DCNL DCSP meta.compr_rate = (float(orig_size) / compr_size)
def getBacktrace(empty='Empty DCSP backtrace.'): DCNL  DCSP try: DCNL DCSP  DCSP info = sys.exc_info() DCNL DCSP  DCSP trace = traceback.format_exception(*info) DCNL DCSP  DCSP sys.exc_clear() DCNL DCSP  DCSP if (trace[0] != 'None\n'): DCNL DCSP  DCSP  DCSP return ''.join(trace) DCNL DCSP except: DCNL DCSP  DCSP return 'Error DCSP while DCSP trying DCSP to DCSP get DCSP backtrace' DCNL DCSP return empty
def _getTerminalCharset(): DCNL  DCSP try: DCNL DCSP  DCSP charset = locale.getpreferredencoding() DCNL DCSP  DCSP if charset: DCNL DCSP  DCSP  DCSP return charset DCNL DCSP except (locale.Error, AttributeError): DCNL DCSP  DCSP pass DCNL DCSP try: DCNL DCSP  DCSP charset = locale.nl_langinfo(locale.CODESET) DCNL DCSP  DCSP if charset: DCNL DCSP  DCSP  DCSP return charset DCNL DCSP except (locale.Error, AttributeError): DCNL DCSP  DCSP pass DCNL DCSP if (hasattr(sys.stdout, 'encoding') and sys.stdout.encoding): DCNL DCSP  DCSP return sys.stdout.encoding DCNL DCSP return 'ASCII'
def getTerminalCharset(): DCNL  DCSP try: DCNL DCSP  DCSP return getTerminalCharset.value DCNL DCSP except AttributeError: DCNL DCSP  DCSP getTerminalCharset.value = _getTerminalCharset() DCNL DCSP  DCSP return getTerminalCharset.value
def guessBytesCharset(bytes, default=None): DCNL  DCSP for (bom_bytes, charset) in UTF_BOMS: DCNL DCSP  DCSP if bytes.startswith(bom_bytes): DCNL DCSP  DCSP  DCSP return charset DCNL DCSP try: DCNL DCSP  DCSP text = unicode(bytes, 'ASCII', 'strict') DCNL DCSP  DCSP return 'ASCII' DCNL DCSP except UnicodeDecodeError: DCNL DCSP  DCSP pass DCNL DCSP try: DCNL DCSP  DCSP text = unicode(bytes, 'UTF-8', 'strict') DCNL DCSP  DCSP return 'UTF-8' DCNL DCSP except UnicodeDecodeError: DCNL DCSP  DCSP pass DCNL DCSP non_ascii_set = set((byte for byte in bytes if (ord(byte) >= 128))) DCNL DCSP for (characters, charset) in CHARSET_CHARACTERS: DCNL DCSP  DCSP if characters.issuperset(non_ascii_set): DCNL DCSP  DCSP  DCSP return charset DCNL DCSP return default
def getMemoryLimit(): DCNL  DCSP return None
def setMemoryLimit(max_mem): DCNL  DCSP return False
def getMemorySize(): DCNL  DCSP try: DCNL DCSP  DCSP statm = open('/proc/self/statm').readline().split() DCNL DCSP except IOError: DCNL DCSP  DCSP return None DCNL DCSP return (int(statm[0]) * PAGE_SIZE)
def clearCaches(): DCNL  DCSP gc.collect()
def limitedMemory(limit, func, *args, **kw): DCNL  DCSP clearCaches() DCNL DCSP max_rss = getMemorySize() DCNL DCSP if (max_rss is not None): DCNL DCSP  DCSP old_limit = getMemoryLimit() DCNL DCSP  DCSP limit = (max_rss + limit) DCNL DCSP  DCSP limited = setMemoryLimit(limit) DCNL DCSP else: DCNL DCSP  DCSP limited = False DCNL DCSP try: DCNL DCSP  DCSP return func(*args, **kw) DCNL DCSP finally: DCNL DCSP  DCSP if limited: DCNL DCSP  DCSP  DCSP setMemoryLimit(old_limit) DCNL DCSP  DCSP clearCaches()
def getgaps(start, length, blocks): DCNL  DCSP blocks = sorted(blocks, key=(lambda b: b[0])) DCNL DCSP end = (start + length) DCNL DCSP for (s, l) in blocks: DCNL DCSP  DCSP if (s > start): DCNL DCSP  DCSP  DCSP (yield (start, (s - start))) DCNL DCSP  DCSP  DCSP start = s DCNL DCSP  DCSP if ((s + l) > start): DCNL DCSP  DCSP  DCSP start = (s + l) DCNL DCSP if (start < end): DCNL DCSP  DCSP (yield (start, (end - start)))
def createOrphanField(fieldset, address, field_cls, *args, **kw): DCNL  DCSP save_size = fieldset._current_size DCNL DCSP try: DCNL DCSP  DCSP fieldset._current_size = address DCNL DCSP  DCSP field = field_cls(fieldset, *args, **kw) DCNL DCSP finally: DCNL DCSP  DCSP fieldset._current_size = save_size DCNL DCSP return field
def Enum(field, enum, key_func=None): DCNL  DCSP display = field.createDisplay DCNL DCSP if key_func: DCNL DCSP  DCSP def createDisplay(): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP key = key_func(field.value) DCNL DCSP  DCSP  DCSP  DCSP return enum[key] DCNL DCSP  DCSP  DCSP except LookupError: DCNL DCSP  DCSP  DCSP  DCSP return display() DCNL DCSP else: DCNL DCSP  DCSP def createDisplay(): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP return enum[field.value] DCNL DCSP  DCSP  DCSP except LookupError: DCNL DCSP  DCSP  DCSP  DCSP return display() DCNL DCSP field.createDisplay = createDisplay DCNL DCSP field.getEnum = (lambda : enum) DCNL DCSP return field
def deprecated(comment=None): DCNL  DCSP def _deprecated(func): DCNL DCSP  DCSP def newFunc(*args, **kwargs): DCNL DCSP  DCSP  DCSP message = ('Call DCSP to DCSP deprecated DCSP function DCSP %s' % func.__name__) DCNL DCSP  DCSP  DCSP if comment: DCNL DCSP  DCSP  DCSP  DCSP message += (': DCSP ' + comment) DCNL DCSP  DCSP  DCSP warn(message, category=DeprecationWarning, stacklevel=2) DCNL DCSP  DCSP  DCSP return func(*args, **kwargs) DCNL DCSP  DCSP newFunc.__name__ = func.__name__ DCNL DCSP  DCSP newFunc.__doc__ = func.__doc__ DCNL DCSP  DCSP newFunc.__dict__.update(func.__dict__) DCNL DCSP  DCSP return newFunc DCNL DCSP return _deprecated
def paddingSize(value, align): DCNL  DCSP if ((value % align) != 0): DCNL DCSP  DCSP return (align - (value % align)) DCNL DCSP else: DCNL DCSP  DCSP return 0
def alignValue(value, align): DCNL  DCSP if ((value % align) != 0): DCNL DCSP  DCSP return ((value + align) - (value % align)) DCNL DCSP else: DCNL DCSP  DCSP return value
def timedelta2seconds(delta): DCNL  DCSP return (((delta.microseconds / 1000000.0) + delta.seconds) + (((delta.days * 60) * 60) * 24))
def humanDurationNanosec(nsec): DCNL  DCSP if (nsec < 1000): DCNL DCSP  DCSP return (u'%u DCSP nsec' % nsec) DCNL DCSP (usec, nsec) = divmod(nsec, 1000) DCNL DCSP if (usec < 1000): DCNL DCSP  DCSP return (u'%.2f DCSP usec' % (usec + (float(nsec) / 1000))) DCNL DCSP (msec, usec) = divmod(usec, 1000) DCNL DCSP if (msec < 1000): DCNL DCSP  DCSP return (u'%.2f DCSP ms' % (msec + (float(usec) / 1000))) DCNL DCSP return humanDuration(msec)
def humanDuration(delta): DCNL  DCSP if (not isinstance(delta, timedelta)): DCNL DCSP  DCSP delta = timedelta(microseconds=(delta * 1000)) DCNL DCSP text = [] DCNL DCSP if (1000 <= delta.microseconds): DCNL DCSP  DCSP text.append((u'%u DCSP ms' % (delta.microseconds // 1000))) DCNL DCSP (minutes, seconds) = divmod(delta.seconds, 60) DCNL DCSP (hours, minutes) = divmod(minutes, 60) DCNL DCSP if seconds: DCNL DCSP  DCSP text.append((u'%u DCSP sec' % seconds)) DCNL DCSP if minutes: DCNL DCSP  DCSP text.append((u'%u DCSP min' % minutes)) DCNL DCSP if hours: DCNL DCSP  DCSP text.append((ngettext('%u DCSP hour', '%u DCSP hours', hours) % hours)) DCNL DCSP (years, days) = divmod(delta.days, 365) DCNL DCSP if days: DCNL DCSP  DCSP text.append((ngettext('%u DCSP day', '%u DCSP days', days) % days)) DCNL DCSP if years: DCNL DCSP  DCSP text.append((ngettext('%u DCSP year', '%u DCSP years', years) % years)) DCNL DCSP if (3 < len(text)): DCNL DCSP  DCSP text = text[(-3):] DCNL DCSP elif (not text): DCNL DCSP  DCSP return u'0 DCSP ms' DCNL DCSP return u' DCSP '.join(reversed(text))
def humanFilesize(size): DCNL  DCSP if (size < 10000): DCNL DCSP  DCSP return (ngettext('%u DCSP byte', '%u DCSP bytes', size) % size) DCNL DCSP units = [_('KB'), _('MB'), _('GB'), _('TB')] DCNL DCSP size = float(size) DCNL DCSP divisor = 1024 DCNL DCSP for unit in units: DCNL DCSP  DCSP size = (size / divisor) DCNL DCSP  DCSP if (size < divisor): DCNL DCSP  DCSP  DCSP return ('%.1f DCSP %s' % (size, unit)) DCNL DCSP return ('%u DCSP %s' % (size, unit))
def humanBitSize(size): DCNL  DCSP divisor = 1000 DCNL DCSP if (size < divisor): DCNL DCSP  DCSP return (ngettext('%u DCSP bit', '%u DCSP bits', size) % size) DCNL DCSP units = [u'Kbit', u'Mbit', u'Gbit', u'Tbit'] DCNL DCSP size = float(size) DCNL DCSP for unit in units: DCNL DCSP  DCSP size = (size / divisor) DCNL DCSP  DCSP if (size < divisor): DCNL DCSP  DCSP  DCSP return ('%.1f DCSP %s' % (size, unit)) DCNL DCSP return (u'%u DCSP %s' % (size, unit))
def humanBitRate(size): DCNL  DCSP return ''.join((humanBitSize(size), '/sec'))
def humanFrequency(hertz): DCNL  DCSP divisor = 1000 DCNL DCSP if (hertz < divisor): DCNL DCSP  DCSP return (u'%u DCSP Hz' % hertz) DCNL DCSP units = [u'kHz', u'MHz', u'GHz', u'THz'] DCNL DCSP hertz = float(hertz) DCNL DCSP for unit in units: DCNL DCSP  DCSP hertz = (hertz / divisor) DCNL DCSP  DCSP if (hertz < divisor): DCNL DCSP  DCSP  DCSP return (u'%.1f DCSP %s' % (hertz, unit)) DCNL DCSP return (u'%s DCSP %s' % (hertz, unit))
def makePrintable(data, charset, quote=None, to_unicode=False, smart=True): DCNL  DCSP if data: DCNL DCSP  DCSP if (not isinstance(data, unicode)): DCNL DCSP  DCSP  DCSP data = unicode(data, 'ISO-8859-1') DCNL DCSP  DCSP  DCSP charset = 'ASCII' DCNL DCSP  DCSP data = regex_control_code.sub((lambda regs: controlchars[ord(regs.group(1))]), data) DCNL DCSP  DCSP if quote: DCNL DCSP  DCSP  DCSP if (quote in '"\''): DCNL DCSP  DCSP  DCSP  DCSP data = data.replace(quote, ('\\' + quote)) DCNL DCSP  DCSP  DCSP data = ''.join((quote, data, quote)) DCNL DCSP elif quote: DCNL DCSP  DCSP data = '(empty)' DCNL DCSP data = data.encode(charset, 'backslashreplace') DCNL DCSP if smart: DCNL DCSP  DCSP data = re.sub('\\\\x0([0-7])(?=[^0-7]|$)', '\\\\\\1', data) DCNL DCSP if to_unicode: DCNL DCSP  DCSP data = unicode(data, charset) DCNL DCSP return data
def makeUnicode(text): DCNL  DCSP if isinstance(text, str): DCNL DCSP  DCSP text = unicode(text, 'ISO-8859-1') DCNL DCSP elif (not isinstance(text, unicode)): DCNL DCSP  DCSP text = unicode(text) DCNL DCSP text = regex_control_code.sub((lambda regs: controlchars[ord(regs.group(1))]), text) DCNL DCSP text = re.sub('\\\\x0([0-7])(?=[^0-7]|$)', '\\\\\\1', text) DCNL DCSP return text
def binarySearch(seq, cmp_func): DCNL  DCSP lower = 0 DCNL DCSP upper = len(seq) DCNL DCSP while (lower < upper): DCNL DCSP  DCSP index = ((lower + upper) >> 1) DCNL DCSP  DCSP diff = cmp_func(seq[index]) DCNL DCSP  DCSP if (diff < 0): DCNL DCSP  DCSP  DCSP upper = index DCNL DCSP  DCSP elif (diff > 0): DCNL DCSP  DCSP  DCSP lower = (index + 1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return index DCNL DCSP return None
def humanUnixAttributes(mode): DCNL  DCSP def ftypelet(mode): DCNL DCSP  DCSP if (stat.S_ISREG(mode) or (not stat.S_IFMT(mode))): DCNL DCSP  DCSP  DCSP return '-' DCNL DCSP  DCSP if stat.S_ISBLK(mode): DCNL DCSP  DCSP  DCSP return 'b' DCNL DCSP  DCSP if stat.S_ISCHR(mode): DCNL DCSP  DCSP  DCSP return 'c' DCNL DCSP  DCSP if stat.S_ISDIR(mode): DCNL DCSP  DCSP  DCSP return 'd' DCNL DCSP  DCSP if stat.S_ISFIFO(mode): DCNL DCSP  DCSP  DCSP return 'p' DCNL DCSP  DCSP if stat.S_ISLNK(mode): DCNL DCSP  DCSP  DCSP return 'l' DCNL DCSP  DCSP if stat.S_ISSOCK(mode): DCNL DCSP  DCSP  DCSP return 's' DCNL DCSP  DCSP return '?' DCNL DCSP chars = [ftypelet(mode), 'r', 'w', 'x', 'r', 'w', 'x', 'r', 'w', 'x'] DCNL DCSP for i in xrange(1, 10): DCNL DCSP  DCSP if (not (mode & (1 << (9 - i)))): DCNL DCSP  DCSP  DCSP chars[i] = '-' DCNL DCSP if (mode & stat.S_ISUID): DCNL DCSP  DCSP if (chars[3] != 'x'): DCNL DCSP  DCSP  DCSP chars[3] = 'S' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP chars[3] = 's' DCNL DCSP if (mode & stat.S_ISGID): DCNL DCSP  DCSP if (chars[6] != 'x'): DCNL DCSP  DCSP  DCSP chars[6] = 'S' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP chars[6] = 's' DCNL DCSP if (mode & stat.S_ISVTX): DCNL DCSP  DCSP if (chars[9] != 'x'): DCNL DCSP  DCSP  DCSP chars[9] = 'T' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP chars[9] = 't' DCNL DCSP return (u'%s DCSP (%o)' % (''.join(chars), mode))
def createDict(data, index): DCNL  DCSP return dict(((key, values[index]) for (key, values) in data.iteritems()))
def timestampUNIX(value): DCNL  DCSP if (not isinstance(value, (float, int, long))): DCNL DCSP  DCSP raise TypeError('timestampUNIX(): DCSP an DCSP integer DCSP or DCSP float DCSP is DCSP required') DCNL DCSP if (not (0 <= value <= 2147483647)): DCNL DCSP  DCSP raise ValueError('timestampUNIX(): DCSP value DCSP have DCSP to DCSP be DCSP in DCSP 0..2147483647') DCNL DCSP return (UNIX_TIMESTAMP_T0 + timedelta(seconds=value))
def timestampMac32(value): DCNL  DCSP if (not isinstance(value, (float, int, long))): DCNL DCSP  DCSP raise TypeError('an DCSP integer DCSP or DCSP float DCSP is DCSP required') DCNL DCSP if (not (0 <= value <= 4294967295)): DCNL DCSP  DCSP return (_('invalid DCSP Mac DCSP timestamp DCSP (%s)') % value) DCNL DCSP return (MAC_TIMESTAMP_T0 + timedelta(seconds=value))
def durationWin64(value): DCNL  DCSP if (not isinstance(value, (float, int, long))): DCNL DCSP  DCSP raise TypeError('an DCSP integer DCSP or DCSP float DCSP is DCSP required') DCNL DCSP if (value < 0): DCNL DCSP  DCSP raise ValueError('value DCSP have DCSP to DCSP be DCSP a DCSP positive DCSP or DCSP nul DCSP integer') DCNL DCSP return timedelta(microseconds=(value / 10))
def timestampWin64(value): DCNL  DCSP try: DCNL DCSP  DCSP return (WIN64_TIMESTAMP_T0 + durationWin64(value)) DCNL DCSP except OverflowError: DCNL DCSP  DCSP raise ValueError((_('date DCSP newer DCSP than DCSP year DCSP %s DCSP (value=%s)') % (MAXYEAR, value)))
def timestampUUID60(value): DCNL  DCSP if (not isinstance(value, (float, int, long))): DCNL DCSP  DCSP raise TypeError('an DCSP integer DCSP or DCSP float DCSP is DCSP required') DCNL DCSP if (value < 0): DCNL DCSP  DCSP raise ValueError('value DCSP have DCSP to DCSP be DCSP a DCSP positive DCSP or DCSP nul DCSP integer') DCNL DCSP try: DCNL DCSP  DCSP return (UUID60_TIMESTAMP_T0 + timedelta(microseconds=(value / 10))) DCNL DCSP except OverflowError: DCNL DCSP  DCSP raise ValueError((_('timestampUUID60() DCSP overflow DCSP (value=%s)') % value))
def humanDatetime(value, strip_microsecond=True): DCNL  DCSP text = unicode(value.isoformat()) DCNL DCSP text = text.replace('T', ' DCSP ') DCNL DCSP if (strip_microsecond and ('.' in text)): DCNL DCSP  DCSP text = text.split('.')[0] DCNL DCSP return text
def normalizeNewline(text): DCNL  DCSP text = text.replace('\r\n', '\n') DCNL DCSP text = text.replace('\r', '\n') DCNL DCSP return NEWLINES_REGEX.sub('\n', text)
@deprecated('Use DCSP TimedeltaWin64 DCSP field DCSP type') DCNL def durationWin64(field): DCNL  DCSP assert (hasattr(field, 'value') and hasattr(field, 'size')) DCNL DCSP assert (field.size == 64) DCNL DCSP delta = doDurationWin64(field.value) DCNL DCSP return humanDuration(delta)
def filesizeHandler(field): DCNL  DCSP return displayHandler(field, humanFilesize)
def hexadecimal(field): DCNL  DCSP assert (hasattr(field, 'value') and hasattr(field, 'size')) DCNL DCSP size = field.size DCNL DCSP padding = (alignValue(size, 4) // 4) DCNL DCSP pattern = (u'0x%%0%ux' % padding) DCNL DCSP return (pattern % field.value)
def getHachoirOptions(parser): DCNL  DCSP def setLogFilename(*args): DCNL DCSP  DCSP log.setFilename(args[2]) DCNL DCSP common = OptionGroup(parser, _('Hachoir DCSP library'), 'Configure DCSP Hachoir DCSP library') DCNL DCSP common.add_option('--verbose', help=_('Verbose DCSP mode'), default=False, action='store_true') DCNL DCSP common.add_option('--log', help=_('Write DCSP log DCSP in DCSP a DCSP file'), type='string', action='callback', callback=setLogFilename) DCNL DCSP common.add_option('--quiet', help=_("Quiet DCSP mode DCSP (don't DCSP display DCSP warning)"), default=False, action='store_true') DCNL DCSP common.add_option('--debug', help=_('Debug DCSP mode'), default=False, action='store_true') DCNL DCSP return common
def swap16(value): DCNL  DCSP return (((value & 255) << 8) | (value >> 8))
def swap32(value): DCNL  DCSP value = long(value) DCNL DCSP return (((((value & 255L) << 24) | ((value & 65280L) << 8)) | ((value & 16711680L) >> 8)) | ((value & 4278190080L) >> 24))
def bin2long(text, endian): DCNL  DCSP assert (endian in (LITTLE_ENDIAN, BIG_ENDIAN)) DCNL DCSP bits = [(ord(character) - ord('0')) for character in text if (character in '01')] DCNL DCSP assert (len(bits) != 0) DCNL DCSP if (endian is not BIG_ENDIAN): DCNL DCSP  DCSP bits = reversed(bits) DCNL DCSP value = 0 DCNL DCSP for bit in bits: DCNL DCSP  DCSP value *= 2 DCNL DCSP  DCSP value += bit DCNL DCSP return value
def str2hex(value, prefix='', glue=u'', format='%02X'): DCNL  DCSP if isinstance(glue, str): DCNL DCSP  DCSP glue = unicode(glue) DCNL DCSP if (0 < len(prefix)): DCNL DCSP  DCSP text = [prefix] DCNL DCSP else: DCNL DCSP  DCSP text = [] DCNL DCSP for character in value: DCNL DCSP  DCSP text.append((format % ord(character))) DCNL DCSP return glue.join(text)
def countBits(value): DCNL  DCSP assert (0 <= value) DCNL DCSP count = 1 DCNL DCSP bits = 1 DCNL DCSP while ((1 << bits) <= value): DCNL DCSP  DCSP count += bits DCNL DCSP  DCSP value >>= bits DCNL DCSP  DCSP bits <<= 1 DCNL DCSP while (2 <= value): DCNL DCSP  DCSP if (bits != 1): DCNL DCSP  DCSP  DCSP bits >>= 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP bits -= 1 DCNL DCSP  DCSP while ((1 << bits) <= value): DCNL DCSP  DCSP  DCSP count += bits DCNL DCSP  DCSP  DCSP value >>= bits DCNL DCSP return count
def byte2bin(number, classic_mode=True): DCNL  DCSP text = '' DCNL DCSP for i in range(0, 8): DCNL DCSP  DCSP if classic_mode: DCNL DCSP  DCSP  DCSP mask = (1 << (7 - i)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP mask = (1 << i) DCNL DCSP  DCSP if ((number & mask) == mask): DCNL DCSP  DCSP  DCSP text += '1' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP text += '0' DCNL DCSP return text
def long2raw(value, endian, size=None): DCNL  DCSP assert (((not size) and (0 < value)) or (0 <= value)) DCNL DCSP assert (endian in (LITTLE_ENDIAN, BIG_ENDIAN)) DCNL DCSP text = [] DCNL DCSP while ((value != 0) or (text == '')): DCNL DCSP  DCSP byte = (value % 256) DCNL DCSP  DCSP text.append(chr(byte)) DCNL DCSP  DCSP value >>= 8 DCNL DCSP if size: DCNL DCSP  DCSP need = max((size - len(text)), 0) DCNL DCSP else: DCNL DCSP  DCSP need = 0 DCNL DCSP if need: DCNL DCSP  DCSP if (endian is BIG_ENDIAN): DCNL DCSP  DCSP  DCSP text = chain(repeat('\x00', need), reversed(text)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP text = chain(text, repeat('\x00', need)) DCNL DCSP elif (endian is BIG_ENDIAN): DCNL DCSP  DCSP text = reversed(text) DCNL DCSP return ''.join(text)
def long2bin(size, value, endian, classic_mode=False): DCNL  DCSP text = '' DCNL DCSP assert (endian in (LITTLE_ENDIAN, BIG_ENDIAN)) DCNL DCSP assert (0 <= value) DCNL DCSP for index in xrange(size): DCNL DCSP  DCSP if ((value & 1) == 1): DCNL DCSP  DCSP  DCSP text += '1' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP text += '0' DCNL DCSP  DCSP value >>= 1 DCNL DCSP if (endian is LITTLE_ENDIAN): DCNL DCSP  DCSP text = text[::(-1)] DCNL DCSP result = '' DCNL DCSP while (len(text) != 0): DCNL DCSP  DCSP if (len(result) != 0): DCNL DCSP  DCSP  DCSP result += ' DCSP ' DCNL DCSP  DCSP if classic_mode: DCNL DCSP  DCSP  DCSP result += text[7::(-1)] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP result += text[:8] DCNL DCSP  DCSP text = text[8:] DCNL DCSP return result
def str2bin(value, classic_mode=True): DCNL  DCSP text = '' DCNL DCSP for character in value: DCNL DCSP  DCSP if (text != ''): DCNL DCSP  DCSP  DCSP text += ' DCSP ' DCNL DCSP  DCSP byte = ord(character) DCNL DCSP  DCSP text += byte2bin(byte, classic_mode) DCNL DCSP return text
def _createStructFormat(): DCNL  DCSP format = {BIG_ENDIAN: {}, LITTLE_ENDIAN: {}} DCNL DCSP for struct_format in 'BHILQ': DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP size = calcsize(struct_format) DCNL DCSP  DCSP  DCSP format[BIG_ENDIAN][size] = ('>%s' % struct_format) DCNL DCSP  DCSP  DCSP format[LITTLE_ENDIAN][size] = ('<%s' % struct_format) DCNL DCSP  DCSP except struct_error: DCNL DCSP  DCSP  DCSP pass DCNL DCSP return format
def str2long(data, endian): DCNL  DCSP assert (1 <= len(data) <= 32) DCNL DCSP try: DCNL DCSP  DCSP return unpack(_struct_format[endian][len(data)], data)[0] DCNL DCSP except KeyError: DCNL DCSP  DCSP pass DCNL DCSP assert (endian in (BIG_ENDIAN, LITTLE_ENDIAN)) DCNL DCSP shift = 0 DCNL DCSP value = 0 DCNL DCSP if (endian is BIG_ENDIAN): DCNL DCSP  DCSP data = reversed(data) DCNL DCSP for character in data: DCNL DCSP  DCSP byte = ord(character) DCNL DCSP  DCSP value += (byte << shift) DCNL DCSP  DCSP shift += 8 DCNL DCSP return value
def signalHandler(signum, frame): DCNL  DCSP raise Timeout('Timeout DCSP exceed!')
def limitedTime(second, func, *args, **kw): DCNL  DCSP return func(*args, **kw)
def fixTimeout(second): DCNL  DCSP if isinstance(second, float): DCNL DCSP  DCSP second = int(ceil(second)) DCNL DCSP assert isinstance(second, (int, long)) DCNL DCSP return max(second, 1)
def StringOutputStream(): DCNL  DCSP data = StringIO() DCNL DCSP return OutputStream(data)
def FileOutputStream(filename, real_filename=None): DCNL  DCSP assert isinstance(filename, unicode) DCNL DCSP if (not real_filename): DCNL DCSP  DCSP real_filename = filename DCNL DCSP output = open(real_filename, 'wb') DCNL DCSP return OutputStream(output, filename=filename)
def FileInputStream(filename, real_filename=None, **args): DCNL  DCSP assert isinstance(filename, unicode) DCNL DCSP if (not real_filename): DCNL DCSP  DCSP real_filename = filename DCNL DCSP try: DCNL DCSP  DCSP inputio = open(real_filename, 'rb') DCNL DCSP except IOError as err: DCNL DCSP  DCSP charset = getTerminalCharset() DCNL DCSP  DCSP errmsg = unicode(str(err), charset) DCNL DCSP  DCSP raise InputStreamError((_('Unable DCSP to DCSP open DCSP file DCSP %s: DCSP %s') % (filename, errmsg))) DCNL DCSP source = ('file:' + filename) DCNL DCSP offset = args.pop('offset', 0) DCNL DCSP size = args.pop('size', None) DCNL DCSP if (offset or size): DCNL DCSP  DCSP if size: DCNL DCSP  DCSP  DCSP size = (8 * size) DCNL DCSP  DCSP stream = InputIOStream(inputio, source=source, **args) DCNL DCSP  DCSP return InputSubStream(stream, (8 * offset), size, **args) DCNL DCSP else: DCNL DCSP  DCSP args.setdefault('tags', []).append(('filename', filename)) DCNL DCSP  DCSP return InputIOStream(inputio, source=source, **args)
def locked_function(origfunc): DCNL  DCSP def wrapped(*args, **kwargs): DCNL DCSP  DCSP cache_lock.acquire() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return origfunc(*args, **kwargs) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP cache_lock.release() DCNL DCSP return wrapped
def calculate_cache_path(cache_location, url): DCNL  DCSP thumb = md5(url).hexdigest() DCNL DCSP header = os.path.join(cache_location, (thumb + '.headers')) DCNL DCSP body = os.path.join(cache_location, (thumb + '.body')) DCNL DCSP return (header, body)
def check_cache_time(path, max_age): DCNL  DCSP if (not os.path.isfile(path)): DCNL DCSP  DCSP return False DCNL DCSP cache_modified_time = os.stat(path).st_mtime DCNL DCSP time_now = time.time() DCNL DCSP if (cache_modified_time < (time_now - max_age)): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP return True
@locked_function DCNL def exists_in_cache(cache_location, url, max_age): DCNL  DCSP (hpath, bpath) = calculate_cache_path(cache_location, url) DCNL DCSP if (os.path.exists(hpath) and os.path.exists(bpath)): DCNL DCSP  DCSP return (check_cache_time(hpath, max_age) and check_cache_time(bpath, max_age)) DCNL DCSP else: DCNL DCSP  DCSP return False
@locked_function DCNL def store_in_cache(cache_location, url, response): DCNL  DCSP (hpath, bpath) = calculate_cache_path(cache_location, url) DCNL DCSP try: DCNL DCSP  DCSP outf = open(hpath, 'wb') DCNL DCSP  DCSP headers = str(response.info()) DCNL DCSP  DCSP outf.write(headers) DCNL DCSP  DCSP outf.close() DCNL DCSP  DCSP outf = open(bpath, 'wb') DCNL DCSP  DCSP outf.write(response.read()) DCNL DCSP  DCSP outf.close() DCNL DCSP except IOError: DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
@locked_function DCNL def delete_from_cache(cache_location, url): DCNL  DCSP (hpath, bpath) = calculate_cache_path(cache_location, url) DCNL DCSP try: DCNL DCSP  DCSP if os.path.exists(hpath): DCNL DCSP  DCSP  DCSP os.remove(hpath) DCNL DCSP  DCSP if os.path.exists(bpath): DCNL DCSP  DCSP  DCSP os.remove(bpath) DCNL DCSP except IOError: DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def main(): DCNL  DCSP import logging DCNL DCSP logging.basicConfig(level=logging.DEBUG) DCNL DCSP tvdb_instance = Tvdb(interactive=True, cache=False) DCNL DCSP print tvdb_instance['Lost']['seriesname'] DCNL DCSP print tvdb_instance['Lost'][1][4]['episodename']
def createKeyPair(type, bits): DCNL  DCSP pkey = crypto.PKey() DCNL DCSP pkey.generate_key(type, bits) DCNL DCSP return pkey
def createCertRequest(pkey, digest='md5', **name): DCNL  DCSP req = crypto.X509Req() DCNL DCSP subj = req.get_subject() DCNL DCSP for (key, value) in name.items(): DCNL DCSP  DCSP setattr(subj, key, value) DCNL DCSP req.set_pubkey(pkey) DCNL DCSP req.sign(pkey, digest) DCNL DCSP return req
def createCertificate(req, (issuerCert, issuerKey), serial, (notBefore, notAfter), digest='md5'): DCNL  DCSP cert = crypto.X509() DCNL DCSP cert.set_serial_number(serial) DCNL DCSP cert.gmtime_adj_notBefore(notBefore) DCNL DCSP cert.gmtime_adj_notAfter(notAfter) DCNL DCSP cert.set_issuer(issuerCert.get_subject()) DCNL DCSP cert.set_subject(req.get_subject()) DCNL DCSP cert.set_pubkey(req.get_pubkey()) DCNL DCSP cert.sign(issuerKey, digest) DCNL DCSP return cert
def _parsems(value): DCNL  DCSP if ('.' not in value): DCNL DCSP  DCSP return (int(value), 0) DCNL DCSP else: DCNL DCSP  DCSP (i, f) = value.split('.') DCNL DCSP  DCSP return (int(i), int(f.ljust(6, '0')[:6]))
def picknthweekday(year, month, dayofweek, hour, minute, whichweek): DCNL  DCSP first = datetime.datetime(year, month, 1, hour, minute) DCNL DCSP weekdayone = first.replace(day=(((dayofweek - first.isoweekday()) % 7) + 1)) DCNL DCSP for n in xrange(whichweek): DCNL DCSP  DCSP dt = (weekdayone + ((whichweek - n) * ONEWEEK)) DCNL DCSP  DCSP if (dt.month == month): DCNL DCSP  DCSP  DCSP return dt
def valuestodict(key): DCNL  DCSP dict = {} DCNL DCSP size = _winreg.QueryInfoKey(key)[1] DCNL DCSP for i in range(size): DCNL DCSP  DCSP data = _winreg.EnumValue(key, i) DCNL DCSP  DCSP dict[data[0]] = data[1] DCNL DCSP return dict
def easter(year, method=EASTER_WESTERN): DCNL  DCSP if (not (1 <= method <= 3)): DCNL DCSP  DCSP raise ValueError, 'invalid DCSP method' DCNL DCSP y = year DCNL DCSP g = (y % 19) DCNL DCSP e = 0 DCNL DCSP if (method < 3): DCNL DCSP  DCSP i = (((19 * g) + 15) % 30) DCNL DCSP  DCSP j = (((y + (y // 4)) + i) % 7) DCNL DCSP  DCSP if (method == 2): DCNL DCSP  DCSP  DCSP e = 10 DCNL DCSP  DCSP  DCSP if (y > 1600): DCNL DCSP  DCSP  DCSP  DCSP e = (((e + (y // 100)) - 16) - (((y // 100) - 16) // 4)) DCNL DCSP else: DCNL DCSP  DCSP c = (y // 100) DCNL DCSP  DCSP h = (((((c - (c // 4)) - (((8 * c) + 13) // 25)) + (19 * g)) + 15) % 30) DCNL DCSP  DCSP i = (h - ((h // 28) * (1 - (((h // 28) * (29 // (h + 1))) * ((21 - g) // 11))))) DCNL DCSP  DCSP j = ((((((y + (y // 4)) + i) + 2) - c) + (c // 4)) % 7) DCNL DCSP p = ((i - j) + e) DCNL DCSP d = (1 + (((p + 27) + ((p + 6) // 40)) % 31)) DCNL DCSP m = (3 + ((p + 26) // 30)) DCNL DCSP return datetime.date(int(y), int(m), int(d))
def iri2uri(uri): DCNL  DCSP if isinstance(uri, unicode): DCNL DCSP  DCSP (scheme, authority, path, query, fragment) = urlparse.urlsplit(uri) DCNL DCSP  DCSP authority = authority.encode('idna') DCNL DCSP  DCSP uri = urlparse.urlunsplit((scheme, authority, path, query, fragment)) DCNL DCSP  DCSP uri = ''.join([encode(c) for c in uri]) DCNL DCSP return uri
def HTTPResponse__getheaders(self): DCNL  DCSP if (self.msg is None): DCNL DCSP  DCSP raise httplib.ResponseNotReady() DCNL DCSP return self.msg.items()
def parse_uri(uri): DCNL  DCSP groups = URI.match(uri).groups() DCNL DCSP return (groups[1], groups[3], groups[4], groups[6], groups[8])
def safename(filename): DCNL  DCSP try: DCNL DCSP  DCSP if re_url_scheme.match(filename): DCNL DCSP  DCSP  DCSP if isinstance(filename, str): DCNL DCSP  DCSP  DCSP  DCSP filename = filename.decode('utf-8') DCNL DCSP  DCSP  DCSP  DCSP filename = filename.encode('idna') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP filename = filename.encode('idna') DCNL DCSP except UnicodeError: DCNL DCSP  DCSP pass DCNL DCSP if isinstance(filename, unicode): DCNL DCSP  DCSP filename = filename.encode('utf-8') DCNL DCSP filemd5 = _md5(filename).hexdigest() DCNL DCSP filename = re_url_scheme.sub('', filename) DCNL DCSP filename = re_slash.sub(',', filename) DCNL DCSP if (len(filename) > 200): DCNL DCSP  DCSP filename = filename[:200] DCNL DCSP return ','.join((filename, filemd5))
def _parse_www_authenticate(headers, headername='www-authenticate'): DCNL  DCSP retval = {} DCNL DCSP if headers.has_key(headername): DCNL DCSP  DCSP authenticate = headers[headername].strip() DCNL DCSP  DCSP www_auth = ((USE_WWW_AUTH_STRICT_PARSING and WWW_AUTH_STRICT) or WWW_AUTH_RELAXED) DCNL DCSP  DCSP while authenticate: DCNL DCSP  DCSP  DCSP if (headername == 'authentication-info'): DCNL DCSP  DCSP  DCSP  DCSP (auth_scheme, the_rest) = ('digest', authenticate) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (auth_scheme, the_rest) = authenticate.split(' DCSP ', 1) DCNL DCSP  DCSP  DCSP match = www_auth.search(the_rest) DCNL DCSP  DCSP  DCSP auth_params = {} DCNL DCSP  DCSP  DCSP while match: DCNL DCSP  DCSP  DCSP  DCSP if (match and (len(match.groups()) == 3)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (key, value, the_rest) = match.groups() DCNL DCSP  DCSP  DCSP  DCSP  DCSP auth_params[key.lower()] = UNQUOTE_PAIRS.sub('\\1', value) DCNL DCSP  DCSP  DCSP  DCSP match = www_auth.search(the_rest) DCNL DCSP  DCSP  DCSP retval[auth_scheme.lower()] = auth_params DCNL DCSP  DCSP  DCSP authenticate = the_rest.strip() DCNL DCSP return retval
def _entry_disposition(response_headers, request_headers): DCNL  DCSP retval = 'STALE' DCNL DCSP cc = _parse_cache_control(request_headers) DCNL DCSP cc_response = _parse_cache_control(response_headers) DCNL DCSP if (request_headers.has_key('pragma') and (request_headers['pragma'].lower().find('no-cache') != (-1))): DCNL DCSP  DCSP retval = 'TRANSPARENT' DCNL DCSP  DCSP if ('cache-control' not in request_headers): DCNL DCSP  DCSP  DCSP request_headers['cache-control'] = 'no-cache' DCNL DCSP elif cc.has_key('no-cache'): DCNL DCSP  DCSP retval = 'TRANSPARENT' DCNL DCSP elif cc_response.has_key('no-cache'): DCNL DCSP  DCSP retval = 'STALE' DCNL DCSP elif cc.has_key('only-if-cached'): DCNL DCSP  DCSP retval = 'FRESH' DCNL DCSP elif response_headers.has_key('date'): DCNL DCSP  DCSP date = calendar.timegm(email.Utils.parsedate_tz(response_headers['date'])) DCNL DCSP  DCSP now = time.time() DCNL DCSP  DCSP current_age = max(0, (now - date)) DCNL DCSP  DCSP if cc_response.has_key('max-age'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = int(cc_response['max-age']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP elif response_headers.has_key('expires'): DCNL DCSP  DCSP  DCSP expires = email.Utils.parsedate_tz(response_headers['expires']) DCNL DCSP  DCSP  DCSP if (None == expires): DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = max(0, (calendar.timegm(expires) - date)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP if cc.has_key('max-age'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = int(cc['max-age']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP if cc.has_key('min-fresh'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP min_fresh = int(cc['min-fresh']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP min_fresh = 0 DCNL DCSP  DCSP  DCSP current_age += min_fresh DCNL DCSP  DCSP if (freshness_lifetime > current_age): DCNL DCSP  DCSP  DCSP retval = 'FRESH' DCNL DCSP return retval
def parseproxyuri(proxyurl): DCNL  DCSP groups = PROXY_REGEX.match(proxyurl).groups() DCNL DCSP return (groups[1], groups[3], groups[4])
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None): DCNL  DCSP global _defaultproxy DCNL DCSP _defaultproxy = (proxytype, addr, port, rdns, username, password)
def wrapmodule(module): DCNL  DCSP if (_defaultproxy != None): DCNL DCSP  DCSP module.socket.socket = socksocket DCNL DCSP else: DCNL DCSP  DCSP raise GeneralProxyError((4, 'no DCSP proxy DCSP specified'))
def register_send(self): DCNL  DCSP print 'Sending DCSP Local DCSP Registration' DCNL DCSP notifications = [] DCNL DCSP defaultNotifications = [] DCNL DCSP for notice in self.notifications: DCNL DCSP  DCSP notifications.append(notice['Notification-Name']) DCNL DCSP  DCSP if notice.get('Notification-Enabled', True): DCNL DCSP  DCSP  DCSP defaultNotifications.append(notice['Notification-Name']) DCNL DCSP appIcon = get_resource(self, 'Application-Icon') DCNL DCSP growl = Growl.GrowlNotifier(applicationName=self.headers['Application-Name'], notifications=notifications, defaultNotifications=defaultNotifications, applicationIcon=appIcon) DCNL DCSP growl.register() DCNL DCSP return self.encode()
def notice_send(self): DCNL  DCSP print 'Sending DCSP Local DCSP Notification' DCNL DCSP growl = Growl.GrowlNotifier(applicationName=self.headers['Application-Name'], notifications=[self.headers['Notification-Name']]) DCNL DCSP noticeIcon = get_resource(self, 'Notification-Icon') DCNL DCSP growl.notify(noteType=self.headers['Notification-Name'], title=self.headers['Notification-Title'], description=self.headers.get('Notification-Text', ''), icon=noticeIcon) DCNL DCSP return self.encode()
def parse_gntp(data, password=None, debug=False): DCNL  DCSP match = re.match('GNTP/(?P<version>\\d+\\.\\d+) DCSP (?P<messagetype>REGISTER|NOTIFY|SUBSCRIBE|\\-OK|\\-ERROR)', data, re.IGNORECASE) DCNL DCSP if (not match): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP print '----' DCNL DCSP  DCSP  DCSP print self.data DCNL DCSP  DCSP  DCSP print '----' DCNL DCSP  DCSP raise ParseError('INVALID_GNTP_INFO') DCNL DCSP info = match.groupdict() DCNL DCSP if (info['messagetype'] == 'REGISTER'): DCNL DCSP  DCSP return GNTPRegister(data, password=password) DCNL DCSP elif (info['messagetype'] == 'NOTIFY'): DCNL DCSP  DCSP return GNTPNotice(data, password=password) DCNL DCSP elif (info['messagetype'] == 'SUBSCRIBE'): DCNL DCSP  DCSP return GNTPSubscribe(data, password=password) DCNL DCSP elif (info['messagetype'] == '-OK'): DCNL DCSP  DCSP return GNTPOK(data) DCNL DCSP elif (info['messagetype'] == '-ERROR'): DCNL DCSP  DCSP return GNTPError(data) DCNL DCSP if debug: DCNL DCSP  DCSP print info DCNL DCSP raise ParseError('INVALID_GNTP_MESSAGE')
def dumps(params=[], methodname=None, methodresponse=None, encoding=None, rpcid=None, version=None, notify=None): DCNL  DCSP if (not version): DCNL DCSP  DCSP version = config.version DCNL DCSP valid_params = (types.TupleType, types.ListType, types.DictType) DCNL DCSP if ((methodname in types.StringTypes) and (type(params) not in valid_params) and (not isinstance(params, Fault))): DCNL DCSP  DCSP ' DCSP \n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP If DCSP a DCSP method, DCSP and DCSP params DCSP are DCSP not DCSP in DCSP a DCSP listish DCSP or DCSP a DCSP Fault,\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP error DCSP out.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP raise TypeError(('Params DCSP must DCSP be DCSP a DCSP dict, DCSP list, DCSP tuple DCSP or DCSP Fault DCSP ' + 'instance.')) DCNL DCSP payload = Payload(rpcid=rpcid, version=version) DCNL DCSP if (not encoding): DCNL DCSP  DCSP encoding = 'utf-8' DCNL DCSP if (type(params) is Fault): DCNL DCSP  DCSP response = payload.error(params.faultCode, params.faultString) DCNL DCSP  DCSP return jdumps(response, encoding=encoding) DCNL DCSP if ((type(methodname) not in types.StringTypes) and (methodresponse != True)): DCNL DCSP  DCSP raise ValueError(('Method DCSP name DCSP must DCSP be DCSP a DCSP string, DCSP or DCSP methodresponse DCSP ' + 'must DCSP be DCSP set DCSP to DCSP True.')) DCNL DCSP if (config.use_jsonclass == True): DCNL DCSP  DCSP from lib.jsonrpclib import jsonclass DCNL DCSP  DCSP params = jsonclass.dump(params) DCNL DCSP if (methodresponse is True): DCNL DCSP  DCSP if (rpcid is None): DCNL DCSP  DCSP  DCSP raise ValueError('A DCSP method DCSP response DCSP must DCSP have DCSP an DCSP rpcid.') DCNL DCSP  DCSP response = payload.response(params) DCNL DCSP  DCSP return jdumps(response, encoding=encoding) DCNL DCSP request = None DCNL DCSP if (notify == True): DCNL DCSP  DCSP request = payload.notify(methodname, params) DCNL DCSP else: DCNL DCSP  DCSP request = payload.request(methodname, params) DCNL DCSP return jdumps(request, encoding=encoding)
def loads(data): DCNL  DCSP if (data == ''): DCNL DCSP  DCSP return None DCNL DCSP result = jloads(data) DCNL DCSP if (config.use_jsonclass == True): DCNL DCSP  DCSP from lib.jsonrpclib import jsonclass DCNL DCSP  DCSP result = jsonclass.load(result) DCNL DCSP return result
def flatten_errors(cfg, res, levels=None, results=None): DCNL  DCSP if (levels is None): DCNL DCSP  DCSP levels = [] DCNL DCSP  DCSP results = [] DCNL DCSP if (res is True): DCNL DCSP  DCSP return results DCNL DCSP if ((res is False) or isinstance(res, Exception)): DCNL DCSP  DCSP results.append((levels[:], None, res)) DCNL DCSP  DCSP if levels: DCNL DCSP  DCSP  DCSP levels.pop() DCNL DCSP  DCSP return results DCNL DCSP for (key, val) in res.items(): DCNL DCSP  DCSP if (val == True): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if isinstance(cfg.get(key), dict): DCNL DCSP  DCSP  DCSP levels.append(key) DCNL DCSP  DCSP  DCSP flatten_errors(cfg[key], val, levels, results) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP results.append((levels[:], key, val)) DCNL DCSP if levels: DCNL DCSP  DCSP levels.pop() DCNL DCSP return results
def newRecoveryHeader(self): DCNL  DCSP if self['flags/extend'].value: DCNL DCSP  DCSP (yield filesizeHandler(UInt32(self, 'body_size', 'Size DCSP of DCSP the DCSP unknown DCSP body DCSP following'))) DCNL DCSP  DCSP self.body_size = self['body_size'].value DCNL DCSP (yield textHandler(UInt32(self, 'unknown[]', 'Unknown DCSP field, DCSP probably DCSP 0'), hexadecimal)) DCNL DCSP (yield String(self, 'signature', 7, "Signature, DCSP normally DCSP '**ACE**'")) DCNL DCSP (yield textHandler(UInt32(self, 'relative_start', "Offset DCSP (=crc16's) DCSP of DCSP this DCSP block DCSP in DCSP the DCSP file"), hexadecimal)) DCNL DCSP (yield textHandler(UInt32(self, 'unknown[]', 'Unknown DCSP field, DCSP probably DCSP 0'), hexadecimal))
def formatRARVersion(field): DCNL  DCSP return ('%u.%u' % divmod(field.value, 10))
def formatSerialNumber(field): DCNL  DCSP sn = field.value DCNL DCSP return ('%04X-%04X' % ((sn >> 16), (sn & 65535)))
def parseCDDA(self): DCNL  DCSP (yield UInt16(self, 'cda_version', 'CD DCSP file DCSP version DCSP (currently DCSP 1)')) DCNL DCSP (yield UInt16(self, 'track_no', 'Number DCSP of DCSP track')) DCNL DCSP (yield textHandler(UInt32(self, 'disc_serial', 'Disc DCSP serial DCSP number'), formatSerialNumber)) DCNL DCSP (yield UInt32(self, 'hsg_offset', 'Track DCSP offset DCSP (HSG DCSP format)')) DCNL DCSP (yield UInt32(self, 'hsg_length', 'Track DCSP length DCSP (HSG DCSP format)')) DCNL DCSP (yield RedBook(self, 'rb_offset', 'Track DCSP offset DCSP (Red-book DCSP format)')) DCNL DCSP (yield RedBook(self, 'rb_length', 'Track DCSP length DCSP (Red-book DCSP format)'))
def createParser(filename, real_filename=None, tags=None): DCNL  DCSP if (not tags): DCNL DCSP  DCSP tags = [] DCNL DCSP stream = FileInputStream(filename, real_filename, tags=tags) DCNL DCSP return guessParser(stream)
def findSynchronizeBits(parser, start, max_size): DCNL  DCSP address0 = parser.absolute_address DCNL DCSP end = (start + max_size) DCNL DCSP size = 0 DCNL DCSP while (start < end): DCNL DCSP  DCSP length = parser.stream.searchBytesLength('\xff', False, start, end) DCNL DCSP  DCSP if (length is None): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP size += length DCNL DCSP  DCSP start += (length * 8) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP frame = createOrphanField(parser, (start - address0), Frame, 'frame') DCNL DCSP  DCSP  DCSP valid = frame.isValid() DCNL DCSP  DCSP except HACHOIR_ERRORS: DCNL DCSP  DCSP  DCSP valid = False DCNL DCSP  DCSP if valid: DCNL DCSP  DCSP  DCSP return size DCNL DCSP  DCSP start += 8 DCNL DCSP  DCSP size += 1 DCNL DCSP return None
def interp_avg(data_low, data_high, n): DCNL  DCSP if isinstance(data_low, (int, long)): DCNL DCSP  DCSP for i in range(1, n): DCNL DCSP  DCSP  DCSP (yield (((data_low * (n - i)) + (data_high * i)) / n)) DCNL DCSP else: DCNL DCSP  DCSP pairs = zip(data_low, data_high) DCNL DCSP  DCSP pair_iters = [interp_avg(x, y, n) for (x, y) in pairs] DCNL DCSP  DCSP for i in range(1, n): DCNL DCSP  DCSP  DCSP (yield [iter.next() for iter in pair_iters])
def color_name(data, bits): DCNL  DCSP ret = ['#'] DCNL DCSP for i in range(3): DCNL DCSP  DCSP ret.append(('%02X' % (data[i] << (8 - bits[i])))) DCNL DCSP return ''.join(ret)
def parseDict(parent): DCNL  DCSP parent.count = 0 DCNL DCSP while True: DCNL DCSP  DCSP key = Object(parent, 'key[]') DCNL DCSP  DCSP (yield key) DCNL DCSP  DCSP if (key['bytecode'].value == '0'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP (yield Object(parent, 'value[]')) DCNL DCSP  DCSP parent.count += 1
def parse_flags(flags, flags_dict, show_unknown_flags=True, separator=' DCSP '): DCNL  DCSP flags_list = [] DCNL DCSP mask = 1 DCNL DCSP while (mask <= flags): DCNL DCSP  DCSP if (flags & mask): DCNL DCSP  DCSP  DCSP if (mask in flags_dict): DCNL DCSP  DCSP  DCSP  DCSP flags_list.append(flags_dict[mask]) DCNL DCSP  DCSP  DCSP elif show_unknown_flags: DCNL DCSP  DCSP  DCSP  DCSP flags_list.append('???') DCNL DCSP  DCSP mask = (mask << 1) DCNL DCSP return separator.join(flags_list)
def eat_descriptor(descr): DCNL  DCSP array_dim = 0 DCNL DCSP while (descr[0] == '['): DCNL DCSP  DCSP array_dim += 1 DCNL DCSP  DCSP descr = descr[1:] DCNL DCSP if (descr[0] == 'L'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP end = descr.find(';') DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise ParserError(('Not DCSP a DCSP valid DCSP descriptor DCSP string: DCSP ' + descr)) DCNL DCSP  DCSP type = descr[1:end] DCNL DCSP  DCSP descr = descr[end:] DCNL DCSP else: DCNL DCSP  DCSP global code_to_type_name DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP type = code_to_type_name[descr[0]] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise ParserError(('Not DCSP a DCSP valid DCSP descriptor DCSP string: DCSP %s' % descr)) DCNL DCSP return ((type.replace('/', '.') + (array_dim * '[]')), descr[1:])
def parse_field_descriptor(descr, name=None): DCNL  DCSP assert descr DCNL DCSP (type, tail) = eat_descriptor(descr) DCNL DCSP assert (not tail) DCNL DCSP if name: DCNL DCSP  DCSP return ((type + ' DCSP ') + name) DCNL DCSP else: DCNL DCSP  DCSP return type
def parse_method_descriptor(descr, name=None): DCNL  DCSP assert (descr and (descr[0] == '(')) DCNL DCSP descr = descr[1:] DCNL DCSP params_list = [] DCNL DCSP while (descr[0] != ')'): DCNL DCSP  DCSP (param, descr) = eat_descriptor(descr) DCNL DCSP  DCSP params_list.append(param) DCNL DCSP (type, tail) = eat_descriptor(descr[1:]) DCNL DCSP assert (not tail) DCNL DCSP params = ', DCSP '.join(params_list) DCNL DCSP if name: DCNL DCSP  DCSP return ('%s DCSP %s(%s)' % (type, name, params)) DCNL DCSP else: DCNL DCSP  DCSP return ('%s DCSP (%s)' % (type, params))
def parse_any_descriptor(descr, name=None): DCNL  DCSP assert descr DCNL DCSP if (descr[0] == '('): DCNL DCSP  DCSP return parse_method_descriptor(descr, name) DCNL DCSP else: DCNL DCSP  DCSP return parse_field_descriptor(descr, name)
def build_authenticate_header(realm=''): DCNL  DCSP return {'WWW-Authenticate': ('OAuth DCSP realm="%s"' % realm)}
def escape(s): DCNL  DCSP return urllib.quote(s, safe='~')
def generate_timestamp(): DCNL  DCSP return int(time.time())
def generate_nonce(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def generate_verifier(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def profile(fn=None, skip=0, filename=None, immediate=False, dirs=False, sort=None, entries=40, profiler=('cProfile', 'profile', 'hotshot')): DCNL  DCSP if (fn is None): DCNL DCSP  DCSP def decorator(fn): DCNL DCSP  DCSP  DCSP return profile(fn, skip=skip, filename=filename, immediate=immediate, dirs=dirs, sort=sort, entries=entries, profiler=profiler) DCNL DCSP  DCSP return decorator DCNL DCSP if isinstance(profiler, str): DCNL DCSP  DCSP profiler = [profiler] DCNL DCSP for p in profiler: DCNL DCSP  DCSP if (p in AVAILABLE_PROFILERS): DCNL DCSP  DCSP  DCSP profiler_class = AVAILABLE_PROFILERS[p] DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError(('only DCSP these DCSP profilers DCSP are DCSP available: DCSP %s' % ', DCSP '.join(AVAILABLE_PROFILERS))) DCNL DCSP fp = profiler_class(fn, skip=skip, filename=filename, immediate=immediate, dirs=dirs, sort=sort, entries=entries) DCNL DCSP def new_fn(*args, **kw): DCNL DCSP  DCSP return fp(*args, **kw) DCNL DCSP new_fn.__doc__ = fn.__doc__ DCNL DCSP new_fn.__name__ = fn.__name__ DCNL DCSP new_fn.__dict__ = fn.__dict__ DCNL DCSP new_fn.__module__ = fn.__module__ DCNL DCSP return new_fn
def coverage(fn): DCNL  DCSP fp = TraceFuncCoverage(fn) DCNL DCSP def new_fn(*args, **kw): DCNL DCSP  DCSP return fp(*args, **kw) DCNL DCSP new_fn.__doc__ = fn.__doc__ DCNL DCSP new_fn.__name__ = fn.__name__ DCNL DCSP new_fn.__dict__ = fn.__dict__ DCNL DCSP new_fn.__module__ = fn.__module__ DCNL DCSP return new_fn
def coverage_with_hotshot(fn): DCNL  DCSP fp = HotShotFuncCoverage(fn) DCNL DCSP def new_fn(*args, **kw): DCNL DCSP  DCSP return fp(*args, **kw) DCNL DCSP new_fn.__doc__ = fn.__doc__ DCNL DCSP new_fn.__name__ = fn.__name__ DCNL DCSP new_fn.__dict__ = fn.__dict__ DCNL DCSP new_fn.__module__ = fn.__module__ DCNL DCSP return new_fn
def timecall(fn=None, immediate=True, timer=time.time): DCNL  DCSP if (fn is None): DCNL DCSP  DCSP def decorator(fn): DCNL DCSP  DCSP  DCSP return timecall(fn, immediate=immediate, timer=timer) DCNL DCSP  DCSP return decorator DCNL DCSP fp = FuncTimer(fn, immediate=immediate, timer=timer) DCNL DCSP def new_fn(*args, **kw): DCNL DCSP  DCSP return fp(*args, **kw) DCNL DCSP new_fn.__doc__ = fn.__doc__ DCNL DCSP new_fn.__name__ = fn.__name__ DCNL DCSP new_fn.__dict__ = fn.__dict__ DCNL DCSP new_fn.__module__ = fn.__module__ DCNL DCSP return new_fn
def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match): DCNL  DCSP if (encoding is None): DCNL DCSP  DCSP encoding = DEFAULT_ENCODING DCNL DCSP chunks = [] DCNL DCSP _append = chunks.append DCNL DCSP begin = (end - 1) DCNL DCSP while 1: DCNL DCSP  DCSP chunk = _m(s, end) DCNL DCSP  DCSP if (chunk is None): DCNL DCSP  DCSP  DCSP raise ValueError(errmsg('Unterminated DCSP string DCSP starting DCSP at', s, begin)) DCNL DCSP  DCSP end = chunk.end() DCNL DCSP  DCSP (content, terminator) = chunk.groups() DCNL DCSP  DCSP if content: DCNL DCSP  DCSP  DCSP if (not isinstance(content, unicode)): DCNL DCSP  DCSP  DCSP  DCSP content = unicode(content, encoding) DCNL DCSP  DCSP  DCSP _append(content) DCNL DCSP  DCSP if (terminator == '"'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif (terminator != '\\'): DCNL DCSP  DCSP  DCSP if strict: DCNL DCSP  DCSP  DCSP  DCSP msg = ('Invalid DCSP control DCSP character DCSP %r DCSP at' % (terminator,)) DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(errmsg(msg, s, end)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP _append(terminator) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP esc = s[end] DCNL DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP raise ValueError(errmsg('Unterminated DCSP string DCSP starting DCSP at', s, begin)) DCNL DCSP  DCSP if (esc != 'u'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP char = _b[esc] DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP msg = ('Invalid DCSP \\escape: DCSP ' + repr(esc)) DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(errmsg(msg, s, end)) DCNL DCSP  DCSP  DCSP end += 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP esc = s[(end + 1):(end + 5)] DCNL DCSP  DCSP  DCSP next_end = (end + 5) DCNL DCSP  DCSP  DCSP if (len(esc) != 4): DCNL DCSP  DCSP  DCSP  DCSP msg = 'Invalid DCSP \\uXXXX DCSP escape' DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(errmsg(msg, s, end)) DCNL DCSP  DCSP  DCSP uni = int(esc, 16) DCNL DCSP  DCSP  DCSP if ((55296 <= uni <= 56319) and (sys.maxunicode > 65535)): DCNL DCSP  DCSP  DCSP  DCSP msg = 'Invalid DCSP \\uXXXX\\uXXXX DCSP surrogate DCSP pair' DCNL DCSP  DCSP  DCSP  DCSP if (not (s[(end + 5):(end + 7)] == '\\u')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError(errmsg(msg, s, end)) DCNL DCSP  DCSP  DCSP  DCSP esc2 = s[(end + 7):(end + 11)] DCNL DCSP  DCSP  DCSP  DCSP if (len(esc2) != 4): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError(errmsg(msg, s, end)) DCNL DCSP  DCSP  DCSP  DCSP uni2 = int(esc2, 16) DCNL DCSP  DCSP  DCSP  DCSP uni = (65536 + (((uni - 55296) << 10) | (uni2 - 56320))) DCNL DCSP  DCSP  DCSP  DCSP next_end += 6 DCNL DCSP  DCSP  DCSP char = unichr(uni) DCNL DCSP  DCSP  DCSP end = next_end DCNL DCSP  DCSP _append(char) DCNL DCSP return (u''.join(chunks), end)
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw): DCNL  DCSP if ((not skipkeys) and ensure_ascii and check_circular and allow_nan and (cls is None) and (indent is None) and (separators is None) and (encoding == 'utf-8') and (default is None) and (not kw)): DCNL DCSP  DCSP iterable = _default_encoder.iterencode(obj) DCNL DCSP else: DCNL DCSP  DCSP if (cls is None): DCNL DCSP  DCSP  DCSP cls = JSONEncoder DCNL DCSP  DCSP iterable = cls(skipkeys=skipkeys, ensure_ascii=ensure_ascii, check_circular=check_circular, allow_nan=allow_nan, indent=indent, separators=separators, encoding=encoding, default=default, **kw).iterencode(obj) DCNL DCSP for chunk in iterable: DCNL DCSP  DCSP fp.write(chunk)
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, **kw): DCNL  DCSP if ((not skipkeys) and ensure_ascii and check_circular and allow_nan and (cls is None) and (indent is None) and (separators is None) and (encoding == 'utf-8') and (default is None) and (not kw)): DCNL DCSP  DCSP return _default_encoder.encode(obj) DCNL DCSP if (cls is None): DCNL DCSP  DCSP cls = JSONEncoder DCNL DCSP return cls(skipkeys=skipkeys, ensure_ascii=ensure_ascii, check_circular=check_circular, allow_nan=allow_nan, indent=indent, separators=separators, encoding=encoding, default=default, **kw).encode(obj)
def load(fp, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw): DCNL  DCSP return loads(fp.read(), encoding=encoding, cls=cls, object_hook=object_hook, parse_float=parse_float, parse_int=parse_int, parse_constant=parse_constant, **kw)
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, **kw): DCNL  DCSP if ((cls is None) and (encoding is None) and (object_hook is None) and (parse_int is None) and (parse_float is None) and (parse_constant is None) and (not kw)): DCNL DCSP  DCSP return _default_decoder.decode(s) DCNL DCSP if (cls is None): DCNL DCSP  DCSP cls = JSONDecoder DCNL DCSP if (object_hook is not None): DCNL DCSP  DCSP kw['object_hook'] = object_hook DCNL DCSP if (parse_float is not None): DCNL DCSP  DCSP kw['parse_float'] = parse_float DCNL DCSP if (parse_int is not None): DCNL DCSP  DCSP kw['parse_int'] = parse_int DCNL DCSP if (parse_constant is not None): DCNL DCSP  DCSP kw['parse_constant'] = parse_constant DCNL DCSP return cls(encoding=encoding, **kw).decode(s)
def encode_basestring(s): DCNL  DCSP def replace(match): DCNL DCSP  DCSP return ESCAPE_DCT[match.group(0)] DCNL DCSP return (('"' + ESCAPE.sub(replace, s)) + '"')
def py_encode_basestring_ascii(s): DCNL  DCSP if (isinstance(s, str) and (HAS_UTF8.search(s) is not None)): DCNL DCSP  DCSP s = s.decode('utf-8') DCNL DCSP def replace(match): DCNL DCSP  DCSP s = match.group(0) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return ESCAPE_DCT[s] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP n = ord(s) DCNL DCSP  DCSP  DCSP if (n < 65536): DCNL DCSP  DCSP  DCSP  DCSP return ('\\u%04x' % (n,)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP n -= 65536 DCNL DCSP  DCSP  DCSP  DCSP s1 = (55296 | ((n >> 10) & 1023)) DCNL DCSP  DCSP  DCSP  DCSP s2 = (56320 | (n & 1023)) DCNL DCSP  DCSP  DCSP  DCSP return ('\\u%04x\\u%04x' % (s1, s2)) DCNL DCSP return (('"' + str(ESCAPE_ASCII.sub(replace, s))) + '"')
def loadShowsFromDB(): DCNL  DCSP myDB = db.DBConnection() DCNL DCSP sqlResults = myDB.select('SELECT DCSP * DCSP FROM DCSP tv_shows') DCNL DCSP for sqlShow in sqlResults: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP curShow = TVShow(int(sqlShow['tvdb_id'])) DCNL DCSP  DCSP  DCSP sickbeard.showList.append(curShow) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP logger.log((((u'There DCSP was DCSP an DCSP error DCSP creating DCSP the DCSP show DCSP in DCSP ' + sqlShow['location']) + ': DCSP ') + str(e).decode('utf-8')), logger.ERROR) DCNL DCSP  DCSP  DCSP logger.log(traceback.format_exc(), logger.DEBUG)
def daemonize(): DCNL  DCSP try: DCNL DCSP  DCSP pid = os.fork() DCNL DCSP  DCSP if (pid != 0): DCNL DCSP  DCSP  DCSP os._exit(0) DCNL DCSP except OSError as e: DCNL DCSP  DCSP sys.stderr.write(('fork DCSP #1 DCSP failed: DCSP %d DCSP (%s)\n' % (e.errno, e.strerror))) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP os.setsid() DCNL DCSP prev = os.umask(0) DCNL DCSP os.umask((prev and int('077', 8))) DCNL DCSP try: DCNL DCSP  DCSP pid = os.fork() DCNL DCSP  DCSP if (pid != 0): DCNL DCSP  DCSP  DCSP os._exit(0) DCNL DCSP except OSError as e: DCNL DCSP  DCSP sys.stderr.write(('fork DCSP #2 DCSP failed: DCSP %d DCSP (%s)\n' % (e.errno, e.strerror))) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP if sickbeard.CREATEPID: DCNL DCSP  DCSP pid = str(os.getpid()) DCNL DCSP  DCSP logger.log((((u'Writing DCSP PID: DCSP ' + pid) + ' DCSP to DCSP ') + str(sickbeard.PIDFILE))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP file(sickbeard.PIDFILE, 'w').write(('%s\n' % pid)) DCNL DCSP  DCSP except IOError as e: DCNL DCSP  DCSP  DCSP logger.log_error_and_exit(((((((u'Unable DCSP to DCSP write DCSP PID DCSP file: DCSP ' + sickbeard.PIDFILE) + ' DCSP Error: DCSP ') + str(e.strerror)) + ' DCSP [') + str(e.errno)) + ']')) DCNL DCSP sys.stdout.flush() DCNL DCSP sys.stderr.flush() DCNL DCSP devnull = getattr(os, 'devnull', '/dev/null') DCNL DCSP stdin = file(devnull, 'r') DCNL DCSP stdout = file(devnull, 'a+') DCNL DCSP stderr = file(devnull, 'a+') DCNL DCSP os.dup2(stdin.fileno(), sys.stdin.fileno()) DCNL DCSP os.dup2(stdout.fileno(), sys.stdout.fileno()) DCNL DCSP os.dup2(stderr.fileno(), sys.stderr.fileno())
def help_message(): DCNL  DCSP help_msg = '\n' DCNL DCSP help_msg += (('Usage: DCSP ' + sickbeard.MY_FULLNAME) + ' DCSP <option> DCSP <another DCSP option>\n') DCNL DCSP help_msg += '\n' DCNL DCSP help_msg += 'Options:\n' DCNL DCSP help_msg += '\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -h DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --help DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Prints DCSP this DCSP message\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -f DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --forceupdate DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Force DCSP update DCSP all DCSP shows DCSP in DCSP the DCSP DB DCSP (from DCSP tvdb) DCSP on DCSP startup\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -q DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --quiet DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Disables DCSP logging DCSP to DCSP console\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --nolaunch DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Suppress DCSP launching DCSP web DCSP browser DCSP on DCSP startup\n' DCNL DCSP if (sys.platform == 'win32'): DCNL DCSP  DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -d DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --daemon DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Running DCSP as DCSP real DCSP daemon DCSP is DCSP not DCSP supported DCSP on DCSP Windows\n' DCNL DCSP  DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP On DCSP Windows, DCSP --daemon DCSP is DCSP substituted DCSP with: DCSP --quiet DCSP --nolaunch\n' DCNL DCSP else: DCNL DCSP  DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -d DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --daemon DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Run DCSP as DCSP double DCSP forked DCSP daemon DCSP (includes DCSP options DCSP --quiet DCSP --nolaunch)\n' DCNL DCSP  DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --pidfile=<path> DCSP  DCSP  DCSP  DCSP Combined DCSP with DCSP --daemon DCSP creates DCSP a DCSP pidfile DCSP (full DCSP path DCSP including DCSP filename)\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP -p DCSP <port> DCSP  DCSP  DCSP --port=<port> DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Override DCSP default/configured DCSP port DCSP to DCSP listen DCSP on\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --datadir=<path> DCSP  DCSP  DCSP  DCSP Override DCSP folder DCSP (full DCSP path) DCSP as DCSP location DCSP for\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP storing DCSP database, DCSP configfile, DCSP cache, DCSP logfiles DCSP \n' DCNL DCSP help_msg += ((' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Default: DCSP ' + sickbeard.PROG_DIR) + '\n') DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --config=<path> DCSP  DCSP  DCSP  DCSP  DCSP Override DCSP config DCSP filename DCSP (full DCSP path DCSP including DCSP filename)\n' DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP to DCSP load DCSP configuration DCSP from DCSP \n' DCNL DCSP help_msg += ((' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Default: DCSP config.ini DCSP in DCSP ' + sickbeard.PROG_DIR) + ' DCSP or DCSP --datadir DCSP location\n') DCNL DCSP help_msg += ' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP --noresize DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Prevent DCSP resizing DCSP of DCSP the DCSP banner/posters DCSP even DCSP if DCSP PIL DCSP is DCSP installed\n' DCNL DCSP return help_msg
def main(): DCNL  DCSP sickbeard.MY_FULLNAME = os.path.normpath(os.path.abspath(__file__)) DCNL DCSP sickbeard.MY_NAME = os.path.basename(sickbeard.MY_FULLNAME) DCNL DCSP sickbeard.PROG_DIR = os.path.dirname(sickbeard.MY_FULLNAME) DCNL DCSP sickbeard.DATA_DIR = sickbeard.PROG_DIR DCNL DCSP sickbeard.MY_ARGS = sys.argv[1:] DCNL DCSP sickbeard.DAEMON = False DCNL DCSP sickbeard.CREATEPID = False DCNL DCSP sickbeard.SYS_ENCODING = None DCNL DCSP try: DCNL DCSP  DCSP locale.setlocale(locale.LC_ALL, '') DCNL DCSP  DCSP sickbeard.SYS_ENCODING = locale.getpreferredencoding() DCNL DCSP except (locale.Error, IOError): DCNL DCSP  DCSP pass DCNL DCSP if ((not sickbeard.SYS_ENCODING) or (sickbeard.SYS_ENCODING in ('ANSI_X3.4-1968', 'US-ASCII', 'ASCII'))): DCNL DCSP  DCSP sickbeard.SYS_ENCODING = 'UTF-8' DCNL DCSP if (not hasattr(sys, 'setdefaultencoding')): DCNL DCSP  DCSP reload(sys) DCNL DCSP try: DCNL DCSP  DCSP sys.setdefaultencoding(sickbeard.SYS_ENCODING) DCNL DCSP except: DCNL DCSP  DCSP sys.exit(((('Sorry, DCSP you DCSP MUST DCSP add DCSP the DCSP Sick DCSP Beard DCSP folder DCSP to DCSP the DCSP PYTHONPATH DCSP environment DCSP variable\n' + 'or DCSP find DCSP another DCSP way DCSP to DCSP force DCSP Python DCSP to DCSP use DCSP ') + sickbeard.SYS_ENCODING) + ' DCSP for DCSP string DCSP encoding.')) DCNL DCSP consoleLogging = ((not hasattr(sys, 'frozen')) or (sickbeard.MY_NAME.lower().find('-console') > 0)) DCNL DCSP threading.currentThread().name = 'MAIN' DCNL DCSP try: DCNL DCSP  DCSP (opts, args) = getopt.getopt(sys.argv[1:], 'hfqdp::', ['help', 'forceupdate', 'quiet', 'nolaunch', 'daemon', 'pidfile=', 'port=', 'datadir=', 'config=', 'noresize']) DCNL DCSP except getopt.GetoptError: DCNL DCSP  DCSP sys.exit(help_message()) DCNL DCSP forceUpdate = False DCNL DCSP forcedPort = None DCNL DCSP noLaunch = False DCNL DCSP for (o, a) in opts: DCNL DCSP  DCSP if (o in ('-h', '--help')): DCNL DCSP  DCSP  DCSP sys.exit(help_message()) DCNL DCSP  DCSP if (o in ('-f', '--forceupdate')): DCNL DCSP  DCSP  DCSP forceUpdate = True DCNL DCSP  DCSP if (o in ('-q', '--quiet')): DCNL DCSP  DCSP  DCSP consoleLogging = False DCNL DCSP  DCSP if (o in ('--nolaunch',)): DCNL DCSP  DCSP  DCSP noLaunch = True DCNL DCSP  DCSP if (o in ('-d', '--daemon')): DCNL DCSP  DCSP  DCSP sickbeard.DAEMON = True DCNL DCSP  DCSP  DCSP consoleLogging = False DCNL DCSP  DCSP  DCSP noLaunch = True DCNL DCSP  DCSP  DCSP if (sys.platform == 'win32'): DCNL DCSP  DCSP  DCSP  DCSP sickbeard.DAEMON = False DCNL DCSP  DCSP if (o in ('--pidfile',)): DCNL DCSP  DCSP  DCSP sickbeard.CREATEPID = True DCNL DCSP  DCSP  DCSP sickbeard.PIDFILE = str(a) DCNL DCSP  DCSP  DCSP if os.path.exists(sickbeard.PIDFILE): DCNL DCSP  DCSP  DCSP  DCSP sys.exit((('PID DCSP file: DCSP ' + sickbeard.PIDFILE) + ' DCSP already DCSP exists. DCSP Exiting.')) DCNL DCSP  DCSP if (o in ('-p', '--port')): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP forcedPort = int(a) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP sys.exit((('Port: DCSP ' + str(a)) + ' DCSP is DCSP not DCSP a DCSP number. DCSP Exiting.')) DCNL DCSP  DCSP if (o in ('--datadir',)): DCNL DCSP  DCSP  DCSP sickbeard.DATA_DIR = os.path.abspath(a) DCNL DCSP  DCSP if (o in ('--config',)): DCNL DCSP  DCSP  DCSP sickbeard.CONFIG_FILE = os.path.abspath(a) DCNL DCSP  DCSP if (o in ('--noresize',)): DCNL DCSP  DCSP  DCSP sickbeard.NO_RESIZE = True DCNL DCSP if sickbeard.CREATEPID: DCNL DCSP  DCSP if sickbeard.DAEMON: DCNL DCSP  DCSP  DCSP pid_dir = os.path.dirname(sickbeard.PIDFILE) DCNL DCSP  DCSP  DCSP if (not os.access(pid_dir, os.F_OK)): DCNL DCSP  DCSP  DCSP  DCSP sys.exit((('PID DCSP dir: DCSP ' + pid_dir) + " DCSP doesn't DCSP exist. DCSP Exiting.")) DCNL DCSP  DCSP  DCSP if (not os.access(pid_dir, os.W_OK)): DCNL DCSP  DCSP  DCSP  DCSP sys.exit((('PID DCSP dir: DCSP ' + pid_dir) + ' DCSP must DCSP be DCSP writable DCSP (write DCSP permissions). DCSP Exiting.')) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if consoleLogging: DCNL DCSP  DCSP  DCSP  DCSP sys.stdout.write('Not DCSP running DCSP in DCSP daemon DCSP mode. DCSP PID DCSP file DCSP creation DCSP disabled.\n') DCNL DCSP  DCSP  DCSP sickbeard.CREATEPID = False DCNL DCSP if (not sickbeard.CONFIG_FILE): DCNL DCSP  DCSP sickbeard.CONFIG_FILE = os.path.join(sickbeard.DATA_DIR, 'config.ini') DCNL DCSP if (not os.access(sickbeard.DATA_DIR, os.F_OK)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP os.makedirs(sickbeard.DATA_DIR, 484) DCNL DCSP  DCSP except os.error: DCNL DCSP  DCSP  DCSP sys.exit((('Unable DCSP to DCSP create DCSP data DCSP directory: DCSP ' + sickbeard.DATA_DIR) + ' DCSP Exiting.')) DCNL DCSP if (not os.access(sickbeard.DATA_DIR, os.W_OK)): DCNL DCSP  DCSP sys.exit((('Data DCSP directory: DCSP ' + sickbeard.DATA_DIR) + ' DCSP must DCSP be DCSP writable DCSP (write DCSP permissions). DCSP Exiting.')) DCNL DCSP if (not os.access(sickbeard.CONFIG_FILE, os.W_OK)): DCNL DCSP  DCSP if os.path.isfile(sickbeard.CONFIG_FILE): DCNL DCSP  DCSP  DCSP sys.exit((('Config DCSP file: DCSP ' + sickbeard.CONFIG_FILE) + ' DCSP must DCSP be DCSP writeable DCSP (write DCSP permissions). DCSP Exiting.')) DCNL DCSP  DCSP elif (not os.access(os.path.dirname(sickbeard.CONFIG_FILE), os.W_OK)): DCNL DCSP  DCSP  DCSP sys.exit((('Config DCSP file DCSP directory: DCSP ' + os.path.dirname(sickbeard.CONFIG_FILE)) + ' DCSP must DCSP be DCSP writeable DCSP (write DCSP permissions). DCSP Exiting')) DCNL DCSP os.chdir(sickbeard.DATA_DIR) DCNL DCSP if consoleLogging: DCNL DCSP  DCSP sys.stdout.write((('Starting DCSP up DCSP Sick DCSP Beard DCSP ' + SICKBEARD_VERSION) + '\n')) DCNL DCSP  DCSP if (not os.path.isfile(sickbeard.CONFIG_FILE)): DCNL DCSP  DCSP  DCSP sys.stdout.write(((("Unable DCSP to DCSP find DCSP '" + sickbeard.CONFIG_FILE) + "' DCSP , DCSP all DCSP settings DCSP will DCSP be DCSP default!") + '\n')) DCNL DCSP sickbeard.CFG = ConfigObj(sickbeard.CONFIG_FILE) DCNL DCSP sickbeard.initialize(consoleLogging=consoleLogging) DCNL DCSP sickbeard.showList = [] DCNL DCSP if sickbeard.DAEMON: DCNL DCSP  DCSP daemonize() DCNL DCSP sickbeard.PID = os.getpid() DCNL DCSP if forcedPort: DCNL DCSP  DCSP logger.log((u'Forcing DCSP web DCSP server DCSP to DCSP port DCSP ' + str(forcedPort))) DCNL DCSP  DCSP startPort = forcedPort DCNL DCSP else: DCNL DCSP  DCSP startPort = sickbeard.WEB_PORT DCNL DCSP if sickbeard.WEB_LOG: DCNL DCSP  DCSP log_dir = sickbeard.LOG_DIR DCNL DCSP else: DCNL DCSP  DCSP log_dir = None DCNL DCSP if (sickbeard.WEB_HOST and (sickbeard.WEB_HOST != '0.0.0.0')): DCNL DCSP  DCSP webhost = sickbeard.WEB_HOST DCNL DCSP elif sickbeard.WEB_IPV6: DCNL DCSP  DCSP webhost = '::' DCNL DCSP else: DCNL DCSP  DCSP webhost = '0.0.0.0' DCNL DCSP try: DCNL DCSP  DCSP initWebServer({'port': startPort, 'host': webhost, 'data_root': os.path.join(sickbeard.PROG_DIR, 'data'), 'web_root': sickbeard.WEB_ROOT, 'log_dir': log_dir, 'username': sickbeard.WEB_USERNAME, 'password': sickbeard.WEB_PASSWORD, 'enable_https': sickbeard.ENABLE_HTTPS, 'https_cert': sickbeard.HTTPS_CERT, 'https_key': sickbeard.HTTPS_KEY}) DCNL DCSP except IOError: DCNL DCSP  DCSP logger.log((u'Unable DCSP to DCSP start DCSP web DCSP server, DCSP is DCSP something DCSP else DCSP running DCSP on DCSP port: DCSP ' + str(startPort)), logger.ERROR) DCNL DCSP  DCSP if (sickbeard.LAUNCH_BROWSER and (not sickbeard.DAEMON)): DCNL DCSP  DCSP  DCSP logger.log(u'Launching DCSP browser DCSP and DCSP exiting', logger.ERROR) DCNL DCSP  DCSP  DCSP sickbeard.launchBrowser(startPort) DCNL DCSP  DCSP sys.exit(('Unable DCSP to DCSP start DCSP web DCSP server, DCSP is DCSP something DCSP else DCSP running DCSP on DCSP port: DCSP ' + str(startPort))) DCNL DCSP logger.log(u'Loading DCSP initial DCSP show DCSP list') DCNL DCSP loadShowsFromDB() DCNL DCSP sickbeard.start() DCNL DCSP if (sickbeard.LAUNCH_BROWSER and (not noLaunch) and (not sickbeard.DAEMON)): DCNL DCSP  DCSP sickbeard.launchBrowser(startPort) DCNL DCSP if forceUpdate: DCNL DCSP  DCSP sickbeard.showUpdateScheduler.action.run(force=True) DCNL DCSP while True: DCNL DCSP  DCSP if sickbeard.invoked_command: DCNL DCSP  DCSP  DCSP sickbeard.invoked_command() DCNL DCSP  DCSP  DCSP sickbeard.invoked_command = None DCNL DCSP  DCSP time.sleep(1) DCNL DCSP return
def _downloadResult(result): DCNL  DCSP resProvider = result.provider DCNL DCSP newResult = False DCNL DCSP if (resProvider is None): DCNL DCSP  DCSP logger.log(u'Invalid DCSP provider DCSP name DCSP - DCSP this DCSP is DCSP a DCSP coding DCSP error, DCSP report DCSP it DCSP please', logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP if (result.resultType == 'nzb'): DCNL DCSP  DCSP newResult = resProvider.downloadResult(result) DCNL DCSP elif (result.resultType == 'nzbdata'): DCNL DCSP  DCSP fileName = ek.ek(os.path.join, sickbeard.NZB_DIR, (result.name + '.nzb')) DCNL DCSP  DCSP logger.log((u'Saving DCSP NZB DCSP to DCSP ' + fileName)) DCNL DCSP  DCSP newResult = True DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP with ek.ek(open, fileName, 'w') as fileOut: DCNL DCSP  DCSP  DCSP  DCSP fileOut.write(result.extraInfo[0]) DCNL DCSP  DCSP  DCSP helpers.chmodAsParent(fileName) DCNL DCSP  DCSP except EnvironmentError as e: DCNL DCSP  DCSP  DCSP logger.log((u'Error DCSP trying DCSP to DCSP save DCSP NZB DCSP to DCSP black DCSP hole: DCSP ' + ex(e)), logger.ERROR) DCNL DCSP  DCSP  DCSP newResult = False DCNL DCSP elif (resProvider.providerType == 'torrent'): DCNL DCSP  DCSP newResult = resProvider.downloadResult(result) DCNL DCSP else: DCNL DCSP  DCSP logger.log(u'Invalid DCSP provider DCSP type DCSP - DCSP this DCSP is DCSP a DCSP coding DCSP error, DCSP report DCSP it DCSP please', logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP return newResult
def snatchEpisode(result, endStatus=SNATCHED): DCNL  DCSP if (result.resultType in ('nzb', 'nzbdata')): DCNL DCSP  DCSP if (sickbeard.NZB_METHOD == 'blackhole'): DCNL DCSP  DCSP  DCSP dlResult = _downloadResult(result) DCNL DCSP  DCSP elif (sickbeard.NZB_METHOD == 'sabnzbd'): DCNL DCSP  DCSP  DCSP dlResult = sab.sendNZB(result) DCNL DCSP  DCSP elif (sickbeard.NZB_METHOD == 'nzbget'): DCNL DCSP  DCSP  DCSP dlResult = nzbget.sendNZB(result) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP logger.log((u'Unknown DCSP NZB DCSP action DCSP specified DCSP in DCSP config: DCSP ' + sickbeard.NZB_METHOD), logger.ERROR) DCNL DCSP  DCSP  DCSP dlResult = False DCNL DCSP elif (result.resultType == 'torrent'): DCNL DCSP  DCSP dlResult = _downloadResult(result) DCNL DCSP else: DCNL DCSP  DCSP logger.log(u'Unknown DCSP result DCSP type, DCSP unable DCSP to DCSP download DCSP it', logger.ERROR) DCNL DCSP  DCSP dlResult = False DCNL DCSP if (dlResult == False): DCNL DCSP  DCSP return False DCNL DCSP ui.notifications.message('Episode DCSP snatched', result.name) DCNL DCSP history.logSnatch(result) DCNL DCSP for curEpObj in result.episodes: DCNL DCSP  DCSP with curEpObj.lock: DCNL DCSP  DCSP  DCSP curEpObj.status = Quality.compositeStatus(endStatus, result.quality) DCNL DCSP  DCSP  DCSP curEpObj.saveToDB() DCNL DCSP  DCSP if ((not curEpObj.show.skip_notices) and (curEpObj.status not in Quality.DOWNLOADED)): DCNL DCSP  DCSP  DCSP notifiers.notify_snatch(curEpObj.prettyName()) DCNL DCSP return True
def filter_release_name(name, filter_words): DCNL  DCSP if filter_words: DCNL DCSP  DCSP for test_word in filter_words.split(','): DCNL DCSP  DCSP  DCSP test_word = test_word.strip() DCNL DCSP  DCSP  DCSP if test_word: DCNL DCSP  DCSP  DCSP  DCSP if re.search((('(^|[\\W_])' + test_word) + '($|[\\W_])'), name, re.I): DCNL DCSP  DCSP  DCSP  DCSP  DCSP logger.log((((u'' + name) + ' DCSP contains DCSP word: DCSP ') + test_word), logger.DEBUG) DCNL DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def isFinalResult(result): DCNL  DCSP logger.log((u"Checking DCSP if DCSP we DCSP should DCSP keep DCSP searching DCSP after DCSP we've DCSP found DCSP " + result.name), logger.DEBUG) DCNL DCSP show_obj = result.episodes[0].show DCNL DCSP (any_qualities, best_qualities) = Quality.splitQuality(show_obj.quality) DCNL DCSP if (best_qualities and (result.quality < max(best_qualities))): DCNL DCSP  DCSP return False DCNL DCSP elif (any_qualities and (result.quality == max(any_qualities))): DCNL DCSP  DCSP return True DCNL DCSP elif (best_qualities and (result.quality == max(best_qualities))): DCNL DCSP  DCSP if (any_qualities and (result.quality < max(any_qualities))): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def addNameToCache(name, tvdb_id): DCNL  DCSP name = sanitizeSceneName(name) DCNL DCSP if (not tvdb_id): DCNL DCSP  DCSP tvdb_id = 0 DCNL DCSP cacheDB = db.DBConnection('cache.db') DCNL DCSP cacheDB.action('INSERT DCSP INTO DCSP scene_names DCSP (tvdb_id, DCSP name) DCSP VALUES DCSP (?, DCSP ?)', [tvdb_id, name])
def retrieveNameFromCache(name): DCNL  DCSP name = sanitizeSceneName(name) DCNL DCSP cacheDB = db.DBConnection('cache.db') DCNL DCSP cache_results = cacheDB.select('SELECT DCSP * DCSP FROM DCSP scene_names DCSP WHERE DCSP name DCSP = DCSP ?', [name]) DCNL DCSP if (not cache_results): DCNL DCSP  DCSP return None DCNL DCSP return int(cache_results[0]['tvdb_id'])
def clearCache(): DCNL  DCSP cacheDB = db.DBConnection('cache.db') DCNL DCSP cacheDB.action('DELETE DCSP FROM DCSP scene_names DCSP WHERE DCSP tvdb_id DCSP = DCSP ?', [0])
def call_dispatcher(args, kwargs): DCNL  DCSP logger.log(((u"API DCSP :: DCSP all DCSP args: DCSP '" + str(args)) + "'"), logger.DEBUG) DCNL DCSP logger.log(((u"API DCSP :: DCSP all DCSP kwargs: DCSP '" + str(kwargs)) + "'"), logger.DEBUG) DCNL DCSP cmds = None DCNL DCSP if args: DCNL DCSP  DCSP cmds = args[0] DCNL DCSP  DCSP args = args[1:] DCNL DCSP if ('cmd' in kwargs): DCNL DCSP  DCSP cmds = kwargs['cmd'] DCNL DCSP  DCSP del kwargs['cmd'] DCNL DCSP outDict = {} DCNL DCSP if (cmds is not None): DCNL DCSP  DCSP cmds = cmds.split('|') DCNL DCSP  DCSP multiCmds = bool((len(cmds) > 1)) DCNL DCSP  DCSP for cmd in cmds: DCNL DCSP  DCSP  DCSP (curArgs, curKwargs) = filter_params(cmd, args, kwargs) DCNL DCSP  DCSP  DCSP cmdIndex = None DCNL DCSP  DCSP  DCSP if (len(cmd.split('_')) > 1): DCNL DCSP  DCSP  DCSP  DCSP (cmd, cmdIndex) = cmd.split('_') DCNL DCSP  DCSP  DCSP logger.log((((u'API DCSP :: DCSP ' + cmd) + ': DCSP curKwargs DCSP ') + str(curKwargs)), logger.DEBUG) DCNL DCSP  DCSP  DCSP if (not (multiCmds and (cmd in ('show.getposter', 'show.getbanner')))): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (cmd in _functionMaper): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP curOutDict = _functionMaper.get(cmd)(curArgs, curKwargs).run() DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif _is_int(cmd): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP curOutDict = TVDBShorthandWrapper(curArgs, curKwargs, cmd).run() DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP curOutDict = _responds(RESULT_ERROR, (("No DCSP such DCSP cmd: DCSP '" + cmd) + "'")) DCNL DCSP  DCSP  DCSP  DCSP except ApiError as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP curOutDict = _responds(RESULT_ERROR, msg=ex(e)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP curOutDict = _responds(RESULT_ERROR, msg=(("The DCSP cmd DCSP '" + cmd) + "' DCSP is DCSP not DCSP supported DCSP while DCSP chaining")) DCNL DCSP  DCSP  DCSP if multiCmds: DCNL DCSP  DCSP  DCSP  DCSP if (cmdIndex is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP outDict[cmd] = curOutDict DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not (cmd in outDict)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP outDict[cmd] = {} DCNL DCSP  DCSP  DCSP  DCSP  DCSP outDict[cmd][cmdIndex] = curOutDict DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP outDict = curOutDict DCNL DCSP  DCSP if multiCmds: DCNL DCSP  DCSP  DCSP outDict = _responds(RESULT_SUCCESS, outDict) DCNL DCSP else: DCNL DCSP  DCSP outDict = CMD_SickBeard(args, kwargs).run() DCNL DCSP return outDict
def filter_params(cmd, args, kwargs): DCNL  DCSP curArgs = [] DCNL DCSP for arg in args: DCNL DCSP  DCSP curArgs.append(arg.lower()) DCNL DCSP curArgs = tuple(curArgs) DCNL DCSP curKwargs = {} DCNL DCSP for kwarg in kwargs: DCNL DCSP  DCSP if (kwarg.find((cmd + '.')) == 0): DCNL DCSP  DCSP  DCSP cleanKey = kwarg.rpartition('.')[2] DCNL DCSP  DCSP  DCSP curKwargs[cleanKey] = kwargs[kwarg].lower() DCNL DCSP  DCSP elif (not ('.' in kwarg)): DCNL DCSP  DCSP  DCSP curKwargs[kwarg] = kwargs[kwarg] DCNL DCSP return (curArgs, curKwargs)
def _responds(result_type, data=None, msg=''): DCNL  DCSP if (data is None): DCNL DCSP  DCSP data = {} DCNL DCSP return {'result': result_type_map[result_type], 'message': msg, 'data': data}
def check_force_season_folders(pattern=None, multi=None): DCNL  DCSP if (pattern is None): DCNL DCSP  DCSP pattern = sickbeard.NAMING_PATTERN DCNL DCSP valid = (not validate_name(pattern, None, file_only=True)) DCNL DCSP if (multi is not None): DCNL DCSP  DCSP valid = (valid or (not validate_name(pattern, multi, file_only=True))) DCNL DCSP return valid
def check_valid_naming(pattern=None, multi=None): DCNL  DCSP if (pattern is None): DCNL DCSP  DCSP pattern = sickbeard.NAMING_PATTERN DCNL DCSP logger.log(((u'Checking DCSP whether DCSP the DCSP pattern DCSP ' + pattern) + ' DCSP is DCSP valid DCSP for DCSP a DCSP single DCSP episode'), logger.DEBUG) DCNL DCSP valid = validate_name(pattern, None) DCNL DCSP if (multi is not None): DCNL DCSP  DCSP logger.log(((u'Checking DCSP whether DCSP the DCSP pattern DCSP ' + pattern) + ' DCSP is DCSP valid DCSP for DCSP a DCSP multi DCSP episode'), logger.DEBUG) DCNL DCSP  DCSP valid = (valid and validate_name(pattern, multi)) DCNL DCSP return valid
def check_valid_abd_naming(pattern=None): DCNL  DCSP if (pattern is None): DCNL DCSP  DCSP pattern = sickbeard.NAMING_PATTERN DCNL DCSP logger.log(((u'Checking DCSP whether DCSP the DCSP pattern DCSP ' + pattern) + ' DCSP is DCSP valid DCSP for DCSP an DCSP air-by-date DCSP episode'), logger.DEBUG) DCNL DCSP valid = validate_name(pattern, abd=True) DCNL DCSP return valid
def getWinDrives(): DCNL  DCSP assert (os.name == 'nt') DCNL DCSP drives = [] DCNL DCSP bitmask = windll.kernel32.GetLogicalDrives() DCNL DCSP for letter in string.uppercase: DCNL DCSP  DCSP if (bitmask & 1): DCNL DCSP  DCSP  DCSP drives.append(letter) DCNL DCSP  DCSP bitmask >>= 1 DCNL DCSP return drives
def foldersAtPath(path, includeParent=False): DCNL  DCSP while (path and (not os.path.isdir(path))): DCNL DCSP  DCSP if (path == os.path.dirname(path)): DCNL DCSP  DCSP  DCSP path = '' DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP path = os.path.dirname(path) DCNL DCSP if (path == ''): DCNL DCSP  DCSP if (os.name == 'nt'): DCNL DCSP  DCSP  DCSP entries = [{'current_path': 'Root'}] DCNL DCSP  DCSP  DCSP for letter in getWinDrives(): DCNL DCSP  DCSP  DCSP  DCSP letterPath = (letter + ':\\') DCNL DCSP  DCSP  DCSP  DCSP entries.append({'name': letterPath, 'path': letterPath}) DCNL DCSP  DCSP  DCSP return entries DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP path = '/' DCNL DCSP path = os.path.abspath(os.path.normpath(path)) DCNL DCSP parentPath = os.path.dirname(path) DCNL DCSP if ((path == parentPath) and (os.name == 'nt')): DCNL DCSP  DCSP parentPath = '' DCNL DCSP fileList = [{'name': filename, 'path': ek.ek(os.path.join, path, filename)} for filename in ek.ek(os.listdir, path)] DCNL DCSP fileList = filter((lambda entry: ek.ek(os.path.isdir, entry['path'])), fileList) DCNL DCSP hideList = ['boot', 'bootmgr', 'cache', 'msocache', 'recovery', '$recycle.bin', 'recycler', 'system DCSP volume DCSP information', 'temporary DCSP internet DCSP files'] DCNL DCSP hideList += ['.fseventd', '.spotlight', '.trashes', '.vol', 'cachedmessages', 'caches', 'trash'] DCNL DCSP fileList = filter((lambda entry: (entry['name'].lower() not in hideList)), fileList) DCNL DCSP fileList = sorted(fileList, (lambda x, y: cmp(os.path.basename(x['name']).lower(), os.path.basename(y['path']).lower()))) DCNL DCSP entries = [{'current_path': path}] DCNL DCSP if (includeParent and (parentPath != path)): DCNL DCSP  DCSP entries.append({'name': '..', 'path': parentPath}) DCNL DCSP entries.extend(fileList) DCNL DCSP return entries
def filterBadReleases(name): DCNL  DCSP try: DCNL DCSP  DCSP fp = NameParser() DCNL DCSP  DCSP parse_result = fp.parse(name) DCNL DCSP except InvalidNameException: DCNL DCSP  DCSP logger.log(((u'Unable DCSP to DCSP parse DCSP the DCSP filename DCSP ' + name) + ' DCSP into DCSP a DCSP valid DCSP episode'), logger.WARNING) DCNL DCSP  DCSP return False DCNL DCSP check_string = '' DCNL DCSP if parse_result.extra_info: DCNL DCSP  DCSP check_string = parse_result.extra_info DCNL DCSP if parse_result.release_group: DCNL DCSP  DCSP if check_string: DCNL DCSP  DCSP  DCSP check_string = ((check_string + '-') + parse_result.release_group) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP check_string = parse_result.release_group DCNL DCSP if (not check_string): DCNL DCSP  DCSP return True DCNL DCSP for ignore_word in (resultFilters + sickbeard.IGNORE_WORDS.split(',')): DCNL DCSP  DCSP ignore_word = ignore_word.strip() DCNL DCSP  DCSP if ignore_word: DCNL DCSP  DCSP  DCSP if re.search((('(^|[\\W_])' + ignore_word) + '($|[\\W_])'), check_string, re.I): DCNL DCSP  DCSP  DCSP  DCSP logger.log(((((u'Invalid DCSP scene DCSP release: DCSP ' + name) + ' DCSP contains DCSP ') + ignore_word) + ', DCSP ignoring DCSP it'), logger.DEBUG) DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return True
def sceneToNormalShowNames(name): DCNL  DCSP if (not name): DCNL DCSP  DCSP return [] DCNL DCSP name_list = [name] DCNL DCSP new_name = re.sub('(?i)([\\. DCSP ])and([\\. DCSP ])', '\\1&\\2', name, re.I) DCNL DCSP if (new_name not in name_list): DCNL DCSP  DCSP name_list.append(new_name) DCNL DCSP results = [] DCNL DCSP for cur_name in name_list: DCNL DCSP  DCSP results.append(re.sub('(\\D)(\\d{4})$', '\\1(\\2)', cur_name)) DCNL DCSP  DCSP country_match_str = '|'.join(countryList.values()) DCNL DCSP  DCSP results.append(re.sub((('(?i)([. DCSP _-])(' + country_match_str) + ')$'), '\\1(\\2)', cur_name)) DCNL DCSP results += name_list DCNL DCSP return list(set(results))
def isGoodResult(name, show, log=True): DCNL  DCSP all_show_names = allPossibleShowNames(show) DCNL DCSP showNames = (map(sanitizeSceneName, all_show_names) + all_show_names) DCNL DCSP for curName in set(showNames): DCNL DCSP  DCSP escaped_name = re.sub('\\\\[\\s.-]', '\\W+', re.escape(curName)) DCNL DCSP  DCSP if show.startyear: DCNL DCSP  DCSP  DCSP escaped_name += (('(?:\\W+' + str(show.startyear)) + ')?') DCNL DCSP  DCSP curRegex = (('^' + escaped_name) + '\\W+(?:(?:S\\d[\\dE._ DCSP -])|(?:\\d\\d?x)|(?:\\d{4}\\W\\d\\d\\W\\d\\d)|(?:(?:part|pt)[\\._ DCSP -]?(\\d|[ivx]))|Season\\W+\\d+\\W+|E\\d+\\W+)') DCNL DCSP  DCSP if log: DCNL DCSP  DCSP  DCSP logger.log((((u'Checking DCSP if DCSP show DCSP ' + name) + ' DCSP matches DCSP ') + curRegex), logger.DEBUG) DCNL DCSP  DCSP match = re.search(curRegex, name, re.I) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP logger.log((((u'Matched DCSP ' + curRegex) + ' DCSP to DCSP ') + name), logger.DEBUG) DCNL DCSP  DCSP  DCSP return True DCNL DCSP if log: DCNL DCSP  DCSP logger.log(((((u'Provider DCSP gave DCSP result DCSP ' + name) + " DCSP but DCSP that DCSP doesn't DCSP seem DCSP like DCSP a DCSP valid DCSP result DCSP for DCSP ") + show.name) + " DCSP so DCSP I'm DCSP ignoring DCSP it")) DCNL DCSP return False
def allPossibleShowNames(show): DCNL  DCSP showNames = [show.name] DCNL DCSP showNames += [name for name in get_scene_exceptions(show.tvdbid)] DCNL DCSP if ((show.tvrname != '') and (show.tvrname is not None)): DCNL DCSP  DCSP showNames.append(show.tvrname) DCNL DCSP newShowNames = [] DCNL DCSP country_list = countryList DCNL DCSP country_list.update(dict(zip(countryList.values(), countryList.keys()))) DCNL DCSP for curName in set(showNames): DCNL DCSP  DCSP if (not curName): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP for curCountry in country_list: DCNL DCSP  DCSP  DCSP if curName.endswith((' DCSP ' + curCountry)): DCNL DCSP  DCSP  DCSP  DCSP newShowNames.append(curName.replace((' DCSP ' + curCountry), ((' DCSP (' + country_list[curCountry]) + ')'))) DCNL DCSP  DCSP  DCSP elif curName.endswith(((' DCSP (' + curCountry) + ')')): DCNL DCSP  DCSP  DCSP  DCSP newShowNames.append(curName.replace(((' DCSP (' + curCountry) + ')'), ((' DCSP (' + country_list[curCountry]) + ')'))) DCNL DCSP showNames += newShowNames DCNL DCSP return uniqify(showNames, (lambda x: x.lower()))
def diagnose(): DCNL  DCSP try: DCNL DCSP  DCSP import pynotify DCNL DCSP except ImportError: DCNL DCSP  DCSP return u'<p>Error: DCSP pynotify DCSP isn\'t DCSP installed. DCSP  DCSP On DCSP Ubuntu/Debian, DCSP install DCSP the DCSP <a DCSP href="apt:python-notify">python-notify</a> DCSP package.' DCNL DCSP if (('DISPLAY' not in os.environ) and ('DBUS_SESSION_BUS_ADDRESS' not in os.environ)): DCNL DCSP  DCSP return u"<p>Error: DCSP Environment DCSP variables DCSP DISPLAY DCSP and DCSP DBUS_SESSION_BUS_ADDRESS DCSP aren't DCSP set. DCSP  DCSP libnotify DCSP will DCSP only DCSP work DCSP when DCSP you DCSP run DCSP Sick DCSP Beard DCSP from DCSP a DCSP desktop DCSP login." DCNL DCSP try: DCNL DCSP  DCSP import dbus DCNL DCSP except ImportError: DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP bus = dbus.SessionBus() DCNL DCSP  DCSP except dbus.DBusException as e: DCNL DCSP  DCSP  DCSP return (u'<p>Error: DCSP unable DCSP to DCSP connect DCSP to DCSP D-Bus DCSP session DCSP bus: DCSP <code>%s</code>.<p>Are DCSP you DCSP running DCSP Sick DCSP Beard DCSP in DCSP a DCSP desktop DCSP session?' % (cgi.escape(e),)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP bus.get_object('org.freedesktop.Notifications', '/org/freedesktop/Notifications') DCNL DCSP  DCSP except dbus.DBusException as e: DCNL DCSP  DCSP  DCSP return (u"<p>Error: DCSP there DCSP doesn't DCSP seem DCSP to DCSP be DCSP a DCSP notification DCSP daemon DCSP available: DCSP <code>%s</code> DCSP <p>Try DCSP installing DCSP notification-daemon DCSP or DCSP notify-osd." % (cgi.escape(e),)) DCNL DCSP return u'<p>Error: DCSP Unable DCSP to DCSP send DCSP notification.'
def sendNZB(nzb): DCNL  DCSP params = {} DCNL DCSP if (sickbeard.SAB_USERNAME is not None): DCNL DCSP  DCSP params['ma_username'] = sickbeard.SAB_USERNAME DCNL DCSP if (sickbeard.SAB_PASSWORD is not None): DCNL DCSP  DCSP params['ma_password'] = sickbeard.SAB_PASSWORD DCNL DCSP if (sickbeard.SAB_APIKEY is not None): DCNL DCSP  DCSP params['apikey'] = sickbeard.SAB_APIKEY DCNL DCSP if (sickbeard.SAB_CATEGORY is not None): DCNL DCSP  DCSP params['cat'] = sickbeard.SAB_CATEGORY DCNL DCSP for curEp in nzb.episodes: DCNL DCSP  DCSP if ((datetime.date.today() - curEp.airdate) <= datetime.timedelta(days=7)): DCNL DCSP  DCSP  DCSP params['priority'] = 1 DCNL DCSP if (nzb.resultType == 'nzb'): DCNL DCSP  DCSP params['mode'] = 'addurl' DCNL DCSP  DCSP params['name'] = nzb.url DCNL DCSP elif (nzb.resultType == 'nzbdata'): DCNL DCSP  DCSP params['mode'] = 'addfile' DCNL DCSP  DCSP multiPartParams = {'nzbfile': ((nzb.name + '.nzb'), nzb.extraInfo[0])} DCNL DCSP url = ((sickbeard.SAB_HOST + 'api?') + urllib.urlencode(params)) DCNL DCSP logger.log((u'Sending DCSP NZB DCSP to DCSP SABnzbd: DCSP %s' % nzb.name)) DCNL DCSP logger.log((u'SABnzbd DCSP URL: DCSP ' + url), logger.DEBUG) DCNL DCSP try: DCNL DCSP  DCSP if (nzb.resultType == 'nzb'): DCNL DCSP  DCSP  DCSP req = urllib2.Request(url) DCNL DCSP  DCSP elif (nzb.resultType == 'nzbdata'): DCNL DCSP  DCSP  DCSP req = urllib2.Request(url, multiPartParams) DCNL DCSP  DCSP result = helpers.getURL(req, throw_exc=True) DCNL DCSP except (EOFError, IOError) as e: DCNL DCSP  DCSP logger.log((u'Unable DCSP to DCSP connect DCSP to DCSP SAB: DCSP ' + ex(e)), logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP except httplib.InvalidURL as e: DCNL DCSP  DCSP logger.log((u'Invalid DCSP SAB DCSP host, DCSP check DCSP your DCSP config: DCSP ' + ex(e)), logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP if (len(result) == 0): DCNL DCSP  DCSP logger.log(u'No DCSP data DCSP returned DCSP from DCSP SABnzbd, DCSP NZB DCSP not DCSP sent', logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP sabText = result.strip() DCNL DCSP logger.log((u'Result DCSP text DCSP from DCSP SAB: DCSP ' + sabText), logger.DEBUG) DCNL DCSP if (sabText == 'ok'): DCNL DCSP  DCSP logger.log(u'NZB DCSP sent DCSP to DCSP SAB DCSP successfully', logger.DEBUG) DCNL DCSP  DCSP return True DCNL DCSP elif (sabText == 'Missing DCSP authentication'): DCNL DCSP  DCSP logger.log(u'Incorrect DCSP username/password DCSP sent DCSP to DCSP SAB, DCSP NZB DCSP not DCSP sent', logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP logger.log((u'Unknown DCSP failure DCSP sending DCSP NZB DCSP to DCSP sab. DCSP Return DCSP text DCSP is: DCSP ' + sabText), logger.ERROR) DCNL DCSP  DCSP return False
def testAuthentication(host=None, username=None, password=None, apikey=None): DCNL  DCSP params = {} DCNL DCSP params['mode'] = 'queue' DCNL DCSP params['output'] = 'json' DCNL DCSP params['ma_username'] = username DCNL DCSP params['ma_password'] = password DCNL DCSP params['apikey'] = apikey DCNL DCSP url = ((host + 'api?') + urllib.urlencode(params)) DCNL DCSP logger.log((u'SABnzbd DCSP test DCSP URL: DCSP ' + url), logger.DEBUG) DCNL DCSP (result, f) = _sabURLOpenSimple(url) DCNL DCSP if (not result): DCNL DCSP  DCSP return (False, f) DCNL DCSP (result, sabText) = _checkSabResponse(f) DCNL DCSP if (not result): DCNL DCSP  DCSP return (False, sabText) DCNL DCSP return (True, 'Success')
def indentXML(elem, level=0): DCNL  DCSP i = ('\n' + (level * ' DCSP  DCSP ')) DCNL DCSP if len(elem): DCNL DCSP  DCSP if ((not elem.text) or (not elem.text.strip())): DCNL DCSP  DCSP  DCSP elem.text = (i + ' DCSP  DCSP ') DCNL DCSP  DCSP if ((not elem.tail) or (not elem.tail.strip())): DCNL DCSP  DCSP  DCSP elem.tail = i DCNL DCSP  DCSP for elem in elem: DCNL DCSP  DCSP  DCSP indentXML(elem, (level + 1)) DCNL DCSP  DCSP if ((not elem.tail) or (not elem.tail.strip())): DCNL DCSP  DCSP  DCSP elem.tail = i DCNL DCSP else: DCNL DCSP  DCSP if elem.text: DCNL DCSP  DCSP  DCSP elem.text = elem.text.replace('\n', ' DCSP ') DCNL DCSP  DCSP if (level and ((not elem.tail) or (not elem.tail.strip()))): DCNL DCSP  DCSP  DCSP elem.tail = i
def remove_extension(name): DCNL  DCSP if (name and ('.' in name)): DCNL DCSP  DCSP (base_name, sep, extension) = name.rpartition('.') DCNL DCSP  DCSP if (base_name and (extension.lower() in (['nzb', 'torrent'] + mediaExtensions))): DCNL DCSP  DCSP  DCSP name = base_name DCNL DCSP return name
def remove_non_release_groups(name): DCNL  DCSP if (name and ('-' in name)): DCNL DCSP  DCSP name_group = name.rsplit('-', 1) DCNL DCSP  DCSP if (name_group[(-1)].upper() in ['RP', 'NZBGEEK']): DCNL DCSP  DCSP  DCSP name = name_group[0] DCNL DCSP return name
def replaceExtension(filename, newExt): DCNL  DCSP sepFile = filename.rpartition('.') DCNL DCSP if (sepFile[0] == ''): DCNL DCSP  DCSP return filename DCNL DCSP else: DCNL DCSP  DCSP return ((sepFile[0] + '.') + newExt)
def sanitizeFileName(name): DCNL  DCSP name = re.sub('[\\\\/\\*]', '-', name) DCNL DCSP name = re.sub('[:"<>|?]', '', name) DCNL DCSP name = name.strip(' DCSP .') DCNL DCSP return name
def getURL(url, validate=False, cookies=cookielib.CookieJar(), password_mgr=None, throw_exc=False): DCNL  DCSP obj = getURLFileLike(url, validate, cookies, password_mgr, throw_exc) DCNL DCSP if obj: DCNL DCSP  DCSP return readURLFileLike(obj) DCNL DCSP else: DCNL DCSP  DCSP return None
def getURLFileLike(url, validate=False, cookies=cookielib.CookieJar(), password_mgr=None, throw_exc=False): DCNL  DCSP if ((not validate) and (sys.version_info >= (2, 7, 9))): DCNL DCSP  DCSP opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies), MultipartPostHandler.MultipartPostHandler, urllib2.HTTPSHandler(context=ssl._create_unverified_context()), urllib2.HTTPDigestAuthHandler(password_mgr), urllib2.HTTPBasicAuthHandler(password_mgr)) DCNL DCSP else: DCNL DCSP  DCSP if (validate and (sys.version_info < (2, 7, 9))): DCNL DCSP  DCSP  DCSP logger.log(((u'The DCSP SSL DCSP certificate DCSP will DCSP not DCSP be DCSP validated DCSP for DCSP ' + url) + '(python DCSP 2.7.9+ DCSP required)'), logger.MESSAGE) DCNL DCSP  DCSP opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies), MultipartPostHandler.MultipartPostHandler, urllib2.HTTPDigestAuthHandler(password_mgr), urllib2.HTTPBasicAuthHandler(password_mgr)) DCNL DCSP opener.addheaders = [('User-Agent', USER_AGENT), ('Accept-Encoding', 'gzip,deflate')] DCNL DCSP try: DCNL DCSP  DCSP return opener.open(url) DCNL DCSP except urllib2.HTTPError as e: DCNL DCSP  DCSP logger.log((((u'HTTP DCSP error DCSP ' + str(e.code)) + ' DCSP while DCSP loading DCSP URL DCSP ') + url), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP except urllib2.URLError as e: DCNL DCSP  DCSP logger.log((((u'URL DCSP error DCSP ' + str(e.reason)) + ' DCSP while DCSP loading DCSP URL DCSP ') + url), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP except BadStatusLine: DCNL DCSP  DCSP logger.log((u'BadStatusLine DCSP error DCSP while DCSP loading DCSP URL DCSP ' + url), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP except socket.timeout: DCNL DCSP  DCSP logger.log((u'Timed DCSP out DCSP while DCSP loading DCSP URL DCSP ' + url), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP except ValueError: DCNL DCSP  DCSP logger.log((u'Unknown DCSP error DCSP while DCSP loading DCSP URL DCSP ' + url), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP except Exception: DCNL DCSP  DCSP logger.log((((u'Unknown DCSP exception DCSP while DCSP loading DCSP URL DCSP ' + url) + ': DCSP ') + traceback.format_exc()), logger.WARNING) DCNL DCSP  DCSP if throw_exc: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None
def readURLFileLike(urlFileLike): DCNL  DCSP encoding = urlFileLike.info().get('Content-Encoding') DCNL DCSP if (encoding in ('gzip', 'x-gzip', 'deflate')): DCNL DCSP  DCSP content = urlFileLike.read() DCNL DCSP  DCSP if (encoding == 'deflate'): DCNL DCSP  DCSP  DCSP data = StringIO.StringIO(zlib.decompress(content)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP data = gzip.GzipFile('', 'rb', 9, StringIO.StringIO(content)) DCNL DCSP  DCSP result = data.read() DCNL DCSP else: DCNL DCSP  DCSP result = urlFileLike.read() DCNL DCSP urlFileLike.close() DCNL DCSP return result
def is_hidden_folder(folder): DCNL  DCSP if ek.ek(os.path.isdir, folder): DCNL DCSP  DCSP if ek.ek(os.path.basename, folder).startswith('.'): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def list_associated_files(file_path, base_name_only=False, filter_ext=''): DCNL  DCSP if (not file_path): DCNL DCSP  DCSP return [] DCNL DCSP file_path_list = [] DCNL DCSP base_name = file_path.rpartition('.')[0] DCNL DCSP if (not base_name_only): DCNL DCSP  DCSP base_name = (base_name + '.') DCNL DCSP if (not base_name): DCNL DCSP  DCSP return [] DCNL DCSP base_name = re.sub('[\\[\\]\\*\\?]', '[\\g<0>]', base_name) DCNL DCSP if filter_ext: DCNL DCSP  DCSP filter_ext = tuple((x.lower().strip() for x in filter_ext.split(','))) DCNL DCSP for associated_file_path in ek.ek(glob.glob, (base_name + '*')): DCNL DCSP  DCSP if (associated_file_path == file_path): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if ek.ek(os.path.isfile, associated_file_path): DCNL DCSP  DCSP  DCSP if filter_ext: DCNL DCSP  DCSP  DCSP  DCSP if associated_file_path.lower().endswith(filter_ext): DCNL DCSP  DCSP  DCSP  DCSP  DCSP file_path_list.append(associated_file_path) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP file_path_list.append(associated_file_path) DCNL DCSP return file_path_list
def sizeof_fmt(num): DCNL  DCSP for x in ['bytes', 'KB', 'MB', 'GB', 'TB']: DCNL DCSP  DCSP if (num < 1024.0): DCNL DCSP  DCSP  DCSP return ('%3.1f DCSP %s' % (num, x)) DCNL DCSP  DCSP num /= 1024.0
def make_dirs(path): DCNL  DCSP logger.log(((u'Checking DCSP if DCSP the DCSP path DCSP ' + path) + ' DCSP already DCSP exists'), logger.DEBUG) DCNL DCSP if (not ek.ek(os.path.isdir, path)): DCNL DCSP  DCSP if ((os.name == 'nt') or (os.name == 'ce')): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP logger.log(((u'Folder DCSP ' + path) + " DCSP didn't DCSP exist, DCSP creating DCSP it"), logger.DEBUG) DCNL DCSP  DCSP  DCSP  DCSP ek.ek(os.makedirs, path) DCNL DCSP  DCSP  DCSP except (OSError, IOError) as e: DCNL DCSP  DCSP  DCSP  DCSP logger.log((((u'Failed DCSP creating DCSP ' + path) + ' DCSP : DCSP ') + ex(e)), logger.ERROR) DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP sofar = '' DCNL DCSP  DCSP  DCSP folder_list = path.split(os.path.sep) DCNL DCSP  DCSP  DCSP for cur_folder in folder_list: DCNL DCSP  DCSP  DCSP  DCSP sofar += (cur_folder + os.path.sep) DCNL DCSP  DCSP  DCSP  DCSP if ek.ek(os.path.isdir, sofar): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP logger.log(((u'Folder DCSP ' + sofar) + " DCSP didn't DCSP exist, DCSP creating DCSP it"), logger.DEBUG) DCNL DCSP  DCSP  DCSP  DCSP  DCSP ek.ek(os.mkdir, sofar) DCNL DCSP  DCSP  DCSP  DCSP  DCSP chmodAsParent(ek.ek(os.path.normpath, sofar)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP synoindex_notifier.addFolder(sofar) DCNL DCSP  DCSP  DCSP  DCSP except (OSError, IOError) as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP logger.log((((u'Failed DCSP creating DCSP ' + sofar) + ' DCSP : DCSP ') + ex(e)), logger.ERROR) DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return True
def rename_ep_file(cur_path, new_path, old_path_length=0): DCNL  DCSP (new_dest_dir, new_dest_name) = os.path.split(new_path) DCNL DCSP if ((old_path_length == 0) or (old_path_length > len(cur_path))): DCNL DCSP  DCSP (cur_file_name, cur_file_ext) = os.path.splitext(cur_path) DCNL DCSP else: DCNL DCSP  DCSP cur_file_ext = cur_path[old_path_length:] DCNL DCSP new_path += cur_file_ext DCNL DCSP make_dirs(os.path.dirname(new_path)) DCNL DCSP try: DCNL DCSP  DCSP logger.log((((u'Renaming DCSP file DCSP from DCSP ' + cur_path) + ' DCSP to DCSP ') + new_path)) DCNL DCSP  DCSP ek.ek(os.rename, cur_path, new_path) DCNL DCSP except (OSError, IOError) as e: DCNL DCSP  DCSP logger.log((((((u'Failed DCSP renaming DCSP ' + cur_path) + ' DCSP to DCSP ') + new_path) + ': DCSP ') + ex(e)), logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP delete_empty_folders(ek.ek(os.path.dirname, cur_path)) DCNL DCSP return True
def delete_empty_folders(check_empty_dir, keep_dir=None): DCNL  DCSP ignore_items = [] DCNL DCSP logger.log((u'Trying DCSP to DCSP clean DCSP any DCSP empty DCSP folders DCSP under DCSP ' + check_empty_dir)) DCNL DCSP while (ek.ek(os.path.isdir, check_empty_dir) and (check_empty_dir != keep_dir)): DCNL DCSP  DCSP check_files = ek.ek(os.listdir, check_empty_dir) DCNL DCSP  DCSP if ((not check_files) or ((len(check_files) <= len(ignore_items)) and all([(check_file in ignore_items) for check_file in check_files]))): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP logger.log((u'Deleting DCSP empty DCSP folder: DCSP ' + check_empty_dir)) DCNL DCSP  DCSP  DCSP  DCSP ek.ek(os.rmdir, check_empty_dir) DCNL DCSP  DCSP  DCSP  DCSP synoindex_notifier.deleteFolder(check_empty_dir) DCNL DCSP  DCSP  DCSP except OSError as e: DCNL DCSP  DCSP  DCSP  DCSP logger.log((((((u'Unable DCSP to DCSP delete DCSP ' + check_empty_dir) + ': DCSP ') + repr(e)) + ' DCSP / DCSP ') + str(e)), logger.WARNING) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP check_empty_dir = ek.ek(os.path.dirname, check_empty_dir) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP break
def real_path(path): DCNL  DCSP return ek.ek(os.path.normpath, ek.ek(os.path.normcase, ek.ek(os.path.realpath, path)))
def sanitizeSceneName(name, ezrss=False): DCNL  DCSP if (not ezrss): DCNL DCSP  DCSP bad_chars = u",:()'!?\u2019" DCNL DCSP else: DCNL DCSP  DCSP bad_chars = u",()'?\u2019" DCNL DCSP for x in bad_chars: DCNL DCSP  DCSP name = name.replace(x, '') DCNL DCSP name = name.replace('- DCSP ', '.').replace(' DCSP ', '.').replace('&', 'and').replace('/', '.') DCNL DCSP name = re.sub('\\.\\.*', '.', name) DCNL DCSP if name.endswith('.'): DCNL DCSP  DCSP name = name[:(-1)] DCNL DCSP return name
def create_https_certificates(ssl_cert, ssl_key): DCNL  DCSP try: DCNL DCSP  DCSP from OpenSSL import crypto DCNL DCSP  DCSP from lib.certgen import createKeyPair, createCertRequest, createCertificate, TYPE_RSA, serial DCNL DCSP except: DCNL DCSP  DCSP logger.log(u'pyopenssl DCSP module DCSP missing, DCSP please DCSP install DCSP for DCSP https DCSP access', logger.WARNING) DCNL DCSP  DCSP return False DCNL DCSP cakey = createKeyPair(TYPE_RSA, 1024) DCNL DCSP careq = createCertRequest(cakey, CN='Certificate DCSP Authority') DCNL DCSP cacert = createCertificate(careq, (careq, cakey), serial, (0, ((((60 * 60) * 24) * 365) * 10))) DCNL DCSP cname = 'SickBeard' DCNL DCSP pkey = createKeyPair(TYPE_RSA, 1024) DCNL DCSP req = createCertRequest(pkey, CN=cname) DCNL DCSP cert = createCertificate(req, (cacert, cakey), serial, (0, ((((60 * 60) * 24) * 365) * 10))) DCNL DCSP try: DCNL DCSP  DCSP open(ssl_key, 'w').write(crypto.dump_privatekey(crypto.FILETYPE_PEM, pkey)) DCNL DCSP  DCSP open(ssl_cert, 'w').write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert)) DCNL DCSP except: DCNL DCSP  DCSP logger.log(u'Error DCSP creating DCSP SSL DCSP key DCSP and DCSP certificate', logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP return True
def parse_json(data): DCNL  DCSP try: DCNL DCSP  DCSP parsedJSON = json.loads(data) DCNL DCSP except ValueError as e: DCNL DCSP  DCSP logger.log((u'Error DCSP trying DCSP to DCSP decode DCSP json DCSP data. DCSP Error: DCSP ' + ex(e)), logger.DEBUG) DCNL DCSP  DCSP return None DCNL DCSP return parsedJSON
def parse_xml(data, del_xmlns=False): DCNL  DCSP if del_xmlns: DCNL DCSP  DCSP data = re.sub(' DCSP xmlns="[^"]+"', '', data) DCNL DCSP try: DCNL DCSP  DCSP parsedXML = etree.fromstring(data) DCNL DCSP except Exception as e: DCNL DCSP  DCSP logger.log((u'Error DCSP trying DCSP to DCSP parse DCSP xml DCSP data. DCSP Error: DCSP ' + ex(e)), logger.DEBUG) DCNL DCSP  DCSP parsedXML = None DCNL DCSP return parsedXML
def get_xml_text(element, mini_dom=False): DCNL  DCSP text = '' DCNL DCSP if mini_dom: DCNL DCSP  DCSP node = element DCNL DCSP  DCSP for child in node.childNodes: DCNL DCSP  DCSP  DCSP if (child.nodeType in (Node.CDATA_SECTION_NODE, Node.TEXT_NODE)): DCNL DCSP  DCSP  DCSP  DCSP text += child.data DCNL DCSP elif (element is not None): DCNL DCSP  DCSP for child in ([element] + element.findall('.//*')): DCNL DCSP  DCSP  DCSP if child.text: DCNL DCSP  DCSP  DCSP  DCSP text += child.text DCNL DCSP return text.strip()
def processDir(dirName, nzbName=None, method=None, recurse=False, pp_options={}): DCNL  DCSP returnStr = u'' DCNL DCSP returnStr += logHelper((u'Processing DCSP folder: DCSP ' + dirName), logger.DEBUG) DCNL DCSP if ek.ek(os.path.isdir, dirName): DCNL DCSP  DCSP dirName = ek.ek(os.path.realpath, dirName) DCNL DCSP elif (sickbeard.TV_DOWNLOAD_DIR and ek.ek(os.path.isdir, sickbeard.TV_DOWNLOAD_DIR) and (ek.ek(os.path.normpath, dirName) != ek.ek(os.path.normpath, sickbeard.TV_DOWNLOAD_DIR))): DCNL DCSP  DCSP dirName = ek.ek(os.path.join, sickbeard.TV_DOWNLOAD_DIR, ek.ek(os.path.abspath, dirName).split(os.path.sep)[(-1)]) DCNL DCSP  DCSP returnStr += logHelper((u'Trying DCSP to DCSP use DCSP folder: DCSP ' + dirName), logger.DEBUG) DCNL DCSP if (not ek.ek(os.path.isdir, dirName)): DCNL DCSP  DCSP returnStr += logHelper(u"Unable DCSP to DCSP figure DCSP out DCSP what DCSP folder DCSP to DCSP process. DCSP If DCSP your DCSP downloader DCSP and DCSP Sick DCSP Beard DCSP aren't DCSP on DCSP the DCSP same DCSP PC DCSP make DCSP sure DCSP you DCSP fill DCSP out DCSP your DCSP TV DCSP download DCSP dir DCSP in DCSP the DCSP config.", logger.DEBUG) DCNL DCSP  DCSP return returnStr DCNL DCSP if ek.ek(os.path.basename, dirName).startswith('_FAILED_'): DCNL DCSP  DCSP returnStr += logHelper(u'The DCSP directory DCSP name DCSP indicates DCSP it DCSP failed DCSP to DCSP extract, DCSP cancelling', logger.DEBUG) DCNL DCSP  DCSP return returnStr DCNL DCSP elif ek.ek(os.path.basename, dirName).startswith('_UNDERSIZED_'): DCNL DCSP  DCSP returnStr += logHelper(u'The DCSP directory DCSP name DCSP indicates DCSP that DCSP it DCSP was DCSP previously DCSP rejected DCSP for DCSP being DCSP undersized, DCSP cancelling', logger.DEBUG) DCNL DCSP  DCSP return returnStr DCNL DCSP elif ek.ek(os.path.basename, dirName).upper().startswith('_UNPACK'): DCNL DCSP  DCSP returnStr += logHelper(u'The DCSP directory DCSP name DCSP indicates DCSP that DCSP this DCSP release DCSP is DCSP in DCSP the DCSP process DCSP of DCSP being DCSP unpacked, DCSP skipping', logger.DEBUG) DCNL DCSP  DCSP return returnStr DCNL DCSP myDB = db.DBConnection() DCNL DCSP sqlResults = myDB.select('SELECT DCSP * DCSP FROM DCSP tv_shows') DCNL DCSP for sqlShow in sqlResults: DCNL DCSP  DCSP if (dirName.lower().startswith((ek.ek(os.path.realpath, sqlShow['location']).lower() + os.sep)) or (dirName.lower() == ek.ek(os.path.realpath, sqlShow['location']).lower())): DCNL DCSP  DCSP  DCSP returnStr += logHelper((u"You're DCSP trying DCSP to DCSP post DCSP process DCSP an DCSP existing DCSP show DCSP directory: DCSP " + dirName), logger.ERROR) DCNL DCSP  DCSP  DCSP returnStr += u'\n' DCNL DCSP  DCSP  DCSP return returnStr DCNL DCSP fileList = ek.ek(os.listdir, dirName) DCNL DCSP folders = filter((lambda x: ek.ek(os.path.isdir, ek.ek(os.path.join, dirName, x))), fileList) DCNL DCSP mediaFiles = filter((lambda x: ek.ek(os.path.exists, ek.ek(os.path.join, dirName, x))), filter(helpers.isMediaFile, fileList)) DCNL DCSP videoFiles = sorted(mediaFiles, key=(lambda x: ek.ek(os.path.getsize, ek.ek(os.path.join, dirName, x))), reverse=True) DCNL DCSP remaining_video_files = list(videoFiles) DCNL DCSP num_videoFiles = len(videoFiles) DCNL DCSP if ((num_videoFiles == 0) and (len(folders) == 1)): DCNL DCSP  DCSP parent_nzbName = nzbName DCNL DCSP else: DCNL DCSP  DCSP parent_nzbName = None DCNL DCSP for cur_folder in folders: DCNL DCSP  DCSP returnStr += u'\n' DCNL DCSP  DCSP cur_folder = ek.ek(os.path.join, dirName, cur_folder) DCNL DCSP  DCSP if helpers.is_hidden_folder(cur_folder): DCNL DCSP  DCSP  DCSP returnStr += logHelper((u'Ignoring DCSP hidden DCSP folder: DCSP ' + cur_folder), logger.DEBUG) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP returnStr += logHelper((u'Recursively DCSP processing DCSP a DCSP folder: DCSP ' + cur_folder), logger.DEBUG) DCNL DCSP  DCSP  DCSP returnStr += processDir(cur_folder, nzbName=parent_nzbName, recurse=True, method=method, pp_options=pp_options) DCNL DCSP remainingFolders = filter((lambda x: ek.ek(os.path.isdir, ek.ek(os.path.join, dirName, x))), fileList) DCNL DCSP if (num_videoFiles == 0): DCNL DCSP  DCSP returnStr += u'\n' DCNL DCSP  DCSP returnStr += logHelper((u'There DCSP are DCSP no DCSP videofiles DCSP in DCSP folder: DCSP ' + dirName), logger.DEBUG) DCNL DCSP  DCSP if (method != 'Manual'): DCNL DCSP  DCSP  DCSP if delete_folder(dirName, check_empty=True): DCNL DCSP  DCSP  DCSP  DCSP returnStr += logHelper((u'Deleted DCSP empty DCSP folder: DCSP ' + dirName), logger.DEBUG) DCNL DCSP if (num_videoFiles >= 2): DCNL DCSP  DCSP nzbName = None DCNL DCSP for cur_video_file in videoFiles: DCNL DCSP  DCSP cur_video_file_path = ek.ek(os.path.join, dirName, cur_video_file) DCNL DCSP  DCSP if (method == 'Automatic'): DCNL DCSP  DCSP  DCSP cur_video_file_path_size = ek.ek(os.path.getsize, cur_video_file_path) DCNL DCSP  DCSP  DCSP myDB = db.DBConnection() DCNL DCSP  DCSP  DCSP search_sql = 'SELECT DCSP tv_episodes.tvdbid, DCSP history.resource DCSP FROM DCSP tv_episodes DCSP INNER DCSP JOIN DCSP history DCSP ON DCSP history.showid=tv_episodes.showid' DCNL DCSP  DCSP  DCSP search_sql += ' DCSP WHERE DCSP history.season=tv_episodes.season DCSP and DCSP history.episode=tv_episodes.episode' DCNL DCSP  DCSP  DCSP search_sql += ((' DCSP and DCSP tv_episodes.status DCSP IN DCSP (' + ','.join([str(x) for x in common.Quality.DOWNLOADED])) + ')') DCNL DCSP  DCSP  DCSP search_sql += ' DCSP and DCSP history.resource DCSP LIKE DCSP ? DCSP and DCSP tv_episodes.file_size DCSP = DCSP ?' DCNL DCSP  DCSP  DCSP sql_results = myDB.select(search_sql, [cur_video_file_path, cur_video_file_path_size]) DCNL DCSP  DCSP  DCSP if len(sql_results): DCNL DCSP  DCSP  DCSP  DCSP returnStr += logHelper(((u'Ignoring DCSP file: DCSP ' + cur_video_file_path) + " DCSP looks DCSP like DCSP it's DCSP been DCSP processed DCSP already"), logger.DEBUG) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP returnStr += u'\n' DCNL DCSP  DCSP  DCSP processor = postProcessor.PostProcessor(cur_video_file_path, nzb_name=nzbName, pp_options=pp_options) DCNL DCSP  DCSP  DCSP process_result = processor.process() DCNL DCSP  DCSP  DCSP process_fail_message = '' DCNL DCSP  DCSP except exceptions.PostProcessingFailed as e: DCNL DCSP  DCSP  DCSP process_result = False DCNL DCSP  DCSP  DCSP process_fail_message = ex(e) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP process_result = False DCNL DCSP  DCSP  DCSP process_fail_message = ('Post DCSP Processor DCSP returned DCSP unhandled DCSP exception: DCSP ' + ex(e)) DCNL DCSP  DCSP returnStr += processor.log DCNL DCSP  DCSP if process_result: DCNL DCSP  DCSP  DCSP remaining_video_files.remove(cur_video_file) DCNL DCSP  DCSP  DCSP if ((not sickbeard.KEEP_PROCESSED_DIR) and (len(remaining_video_files) == 0) and (len(remainingFolders) == 0)): DCNL DCSP  DCSP  DCSP  DCSP if delete_folder(dirName, check_empty=False): DCNL DCSP  DCSP  DCSP  DCSP  DCSP returnStr += logHelper((u'Deleted DCSP folder: DCSP ' + dirName), logger.DEBUG) DCNL DCSP  DCSP  DCSP returnStr += logHelper((u'Processing DCSP succeeded DCSP for DCSP ' + cur_video_file_path)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP returnStr += logHelper((((u'Processing DCSP failed DCSP for DCSP ' + cur_video_file_path) + ': DCSP ') + process_fail_message), logger.WARNING) DCNL DCSP return returnStr
def dbFilename(filename='sickbeard.db', suffix=None): DCNL  DCSP if suffix: DCNL DCSP  DCSP filename = ('%s.%s' % (filename, suffix)) DCNL DCSP return ek.ek(os.path.join, sickbeard.DATA_DIR, filename)
def CheckSection(CFG, sec): DCNL  DCSP try: DCNL DCSP  DCSP CFG[sec] DCNL DCSP  DCSP return True DCNL DCSP except: DCNL DCSP  DCSP CFG[sec] = {} DCNL DCSP  DCSP return False
def checkbox_to_value(option, value_on=1, value_off=0): DCNL  DCSP if ((option == 'on') or (option == 'true')): DCNL DCSP  DCSP return value_on DCNL DCSP return value_off
def clean_host(host, default_port=None): DCNL  DCSP host = host.strip() DCNL DCSP if host: DCNL DCSP  DCSP match_host_port = re.search('(?:http.*://)?(?P<host>[^:/]+).?(?P<port>[0-9]*).*', host) DCNL DCSP  DCSP cleaned_host = match_host_port.group('host') DCNL DCSP  DCSP cleaned_port = match_host_port.group('port') DCNL DCSP  DCSP if cleaned_host: DCNL DCSP  DCSP  DCSP if cleaned_port: DCNL DCSP  DCSP  DCSP  DCSP host = ((cleaned_host + ':') + cleaned_port) DCNL DCSP  DCSP  DCSP elif default_port: DCNL DCSP  DCSP  DCSP  DCSP host = ((cleaned_host + ':') + str(default_port)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP host = cleaned_host DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP host = '' DCNL DCSP return host
def clean_url(url): DCNL  DCSP if (url and url.strip()): DCNL DCSP  DCSP url = url.strip() DCNL DCSP  DCSP if ('://' not in url): DCNL DCSP  DCSP  DCSP url = ('//' + url) DCNL DCSP  DCSP (scheme, netloc, path, query, fragment) = urlparse.urlsplit(url, 'http') DCNL DCSP  DCSP if (not path): DCNL DCSP  DCSP  DCSP path = (path + '/') DCNL DCSP  DCSP cleaned_url = urlparse.urlunsplit((scheme, netloc, path, query, fragment)) DCNL DCSP else: DCNL DCSP  DCSP cleaned_url = '' DCNL DCSP return cleaned_url
def to_int(val, default=0): DCNL  DCSP try: DCNL DCSP  DCSP val = int(val) DCNL DCSP except: DCNL DCSP  DCSP val = default DCNL DCSP return val
def minimax(val, default, low, high): DCNL  DCSP val = to_int(val, default=default) DCNL DCSP if (val < low): DCNL DCSP  DCSP return low DCNL DCSP if (val > high): DCNL DCSP  DCSP return high DCNL DCSP return val
def get_scene_exceptions(tvdb_id): DCNL  DCSP myDB = db.DBConnection('cache.db') DCNL DCSP exceptions = myDB.select('SELECT DCSP DISTINCT DCSP show_name DCSP FROM DCSP scene_exceptions DCSP WHERE DCSP tvdb_id DCSP = DCSP ?', [tvdb_id]) DCNL DCSP return [cur_exception['show_name'] for cur_exception in exceptions]
def get_scene_exception_by_name(show_name): DCNL  DCSP myDB = db.DBConnection('cache.db') DCNL DCSP exception_result = myDB.select('SELECT DCSP tvdb_id DCSP FROM DCSP scene_exceptions DCSP WHERE DCSP LOWER(show_name) DCSP = DCSP ?', [show_name.lower()]) DCNL DCSP if exception_result: DCNL DCSP  DCSP return int(exception_result[0]['tvdb_id']) DCNL DCSP all_exception_results = myDB.select('SELECT DCSP DISTINCT DCSP show_name, DCSP tvdb_id DCSP FROM DCSP scene_exceptions') DCNL DCSP for cur_exception in all_exception_results: DCNL DCSP  DCSP cur_exception_name = cur_exception['show_name'] DCNL DCSP  DCSP cur_tvdb_id = int(cur_exception['tvdb_id']) DCNL DCSP  DCSP if (show_name.lower() in (cur_exception_name.lower(), helpers.sanitizeSceneName(cur_exception_name).lower().replace('.', ' DCSP '))): DCNL DCSP  DCSP  DCSP logger.log(((u'Scene DCSP exception DCSP lookup DCSP got DCSP tvdb DCSP id DCSP ' + str(cur_tvdb_id)) + u', DCSP using DCSP that'), logger.DEBUG) DCNL DCSP  DCSP  DCSP return cur_tvdb_id DCNL DCSP return None
def retrieve_exceptions(): DCNL  DCSP provider = 'sb_tvdb_scene_exceptions' DCNL DCSP remote_exception_dict = {} DCNL DCSP local_exception_dict = {} DCNL DCSP query_list = [] DCNL DCSP url = 'http://midgetspy.github.io/sb_tvdb_scene_exceptions/exceptions.txt' DCNL DCSP logger.log(u'Check DCSP scene DCSP exceptions DCSP update') DCNL DCSP url_data = helpers.getURL(url) DCNL DCSP if (not url_data): DCNL DCSP  DCSP logger.log((u'Check DCSP scene DCSP exceptions DCSP update DCSP failed. DCSP Unable DCSP to DCSP get DCSP URL: DCSP ' + url), logger.ERROR) DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP for cur_line in url_data.splitlines(): DCNL DCSP  DCSP  DCSP cur_line = cur_line.decode('utf-8') DCNL DCSP  DCSP  DCSP (tvdb_id, sep, aliases) = cur_line.partition(':') DCNL DCSP  DCSP  DCSP if (not aliases): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP cur_tvdb_id = int(tvdb_id) DCNL DCSP  DCSP  DCSP alias_list = [re.sub('\\\\(.)', '\\1', x) for x in re.findall("'(.*?)(?<!\\\\)',?", aliases)] DCNL DCSP  DCSP  DCSP remote_exception_dict[cur_tvdb_id] = alias_list DCNL DCSP  DCSP myDB = db.DBConnection('cache.db', row_type='dict') DCNL DCSP  DCSP sql_result = myDB.select('SELECT DCSP tvdb_id, DCSP show_name DCSP FROM DCSP scene_exceptions DCSP WHERE DCSP provider=?;', [provider]) DCNL DCSP  DCSP for cur_result in sql_result: DCNL DCSP  DCSP  DCSP cur_tvdb_id = cur_result['tvdb_id'] DCNL DCSP  DCSP  DCSP if (cur_tvdb_id not in local_exception_dict): DCNL DCSP  DCSP  DCSP  DCSP local_exception_dict[cur_tvdb_id] = [] DCNL DCSP  DCSP  DCSP local_exception_dict[cur_tvdb_id].append(cur_result['show_name']) DCNL DCSP  DCSP for cur_tvdb_id in remote_exception_dict: DCNL DCSP  DCSP  DCSP if (cur_tvdb_id not in local_exception_dict): DCNL DCSP  DCSP  DCSP  DCSP local_exception_dict[cur_tvdb_id] = [] DCNL DCSP  DCSP  DCSP for cur_exception_name in remote_exception_dict[cur_tvdb_id]: DCNL DCSP  DCSP  DCSP  DCSP if (cur_exception_name not in local_exception_dict[cur_tvdb_id]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP query_list.append(['INSERT DCSP INTO DCSP scene_exceptions DCSP (tvdb_id,show_name,provider) DCSP VALUES DCSP (?,?,?);', [cur_tvdb_id, cur_exception_name, provider]]) DCNL DCSP  DCSP for cur_tvdb_id in local_exception_dict: DCNL DCSP  DCSP  DCSP if (cur_tvdb_id not in remote_exception_dict): DCNL DCSP  DCSP  DCSP  DCSP query_list.append(['DELETE DCSP FROM DCSP scene_exceptions DCSP WHERE DCSP tvdb_id=? DCSP AND DCSP provider=?;', [cur_tvdb_id, provider]]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for cur_exception_name in local_exception_dict[cur_tvdb_id]: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (cur_exception_name not in remote_exception_dict[cur_tvdb_id]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP query_list.append(['DELETE DCSP FROM DCSP scene_exceptions DCSP WHERE DCSP tvdb_id= DCSP ? DCSP AND DCSP show_name=? DCSP AND DCSP provider=?;', [cur_tvdb_id, cur_exception_name, provider]]) DCNL DCSP  DCSP if query_list: DCNL DCSP  DCSP  DCSP logger.log(u'Updating DCSP scene DCSP exceptions') DCNL DCSP  DCSP  DCSP myDB.mass_action(query_list, logTransaction=True) DCNL DCSP  DCSP  DCSP logger.log(u'Clear DCSP name DCSP cache') DCNL DCSP  DCSP  DCSP name_cache.clearCache() DCNL DCSP  DCSP  DCSP logger.log((u'Performing DCSP a DCSP vacuum DCSP on DCSP database: DCSP ' + myDB.filename)) DCNL DCSP  DCSP  DCSP myDB.action('VACUUM') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP logger.log(u'No DCSP scene DCSP exceptions DCSP update DCSP needed') DCNL DCSP return True
def ex(e): DCNL  DCSP e_message = u'' DCNL DCSP if ((not e) or (not e.args)): DCNL DCSP  DCSP return e_message DCNL DCSP for arg in e.args: DCNL DCSP  DCSP if (arg is not None): DCNL DCSP  DCSP  DCSP if isinstance(arg, (str, unicode)): DCNL DCSP  DCSP  DCSP  DCSP fixed_arg = fixStupidEncodings(arg, True) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP fixed_arg = (u'error DCSP ' + fixStupidEncodings(str(arg), True)) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP fixed_arg = None DCNL DCSP  DCSP  DCSP if fixed_arg: DCNL DCSP  DCSP  DCSP  DCSP if (not e_message): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e_message = fixed_arg DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP e_message = ((e_message + ' DCSP : DCSP ') + fixed_arg) DCNL DCSP return e_message
def setUp_test_db(): DCNL  DCSP db.upgradeDatabase(db.DBConnection(), mainDB.InitialSchema) DCNL DCSP db.sanityCheckDatabase(db.DBConnection(), mainDB.MainSanityCheck) DCNL DCSP db.upgradeDatabase(db.DBConnection('cache.db'), cache_db.InitialSchema)
def tearDown_test_db(): DCNL  DCSP if os.path.exists(os.path.join(TESTDIR, TESTDBNAME)): DCNL DCSP  DCSP os.remove(os.path.join(TESTDIR, TESTDBNAME)) DCNL DCSP if os.path.exists(os.path.join(TESTDIR, TESTCACHEDBNAME)): DCNL DCSP  DCSP os.remove(os.path.join(TESTDIR, TESTCACHEDBNAME))
def test_callable_spec(callable, callable_args, callable_kwargs): DCNL  DCSP show_mismatched_params = getattr(cherrypy.serving.request, 'show_mismatched_params', False) DCNL DCSP try: DCNL DCSP  DCSP (args, varargs, varkw, defaults) = inspect.getargspec(callable) DCNL DCSP except TypeError: DCNL DCSP  DCSP if (isinstance(callable, object) and hasattr(callable, '__call__')): DCNL DCSP  DCSP  DCSP (args, varargs, varkw, defaults) = inspect.getargspec(callable.__call__) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise DCNL DCSP if (args and (args[0] == 'self')): DCNL DCSP  DCSP args = args[1:] DCNL DCSP arg_usage = dict([(arg, 0) for arg in args]) DCNL DCSP vararg_usage = 0 DCNL DCSP varkw_usage = 0 DCNL DCSP extra_kwargs = set() DCNL DCSP for (i, value) in enumerate(callable_args): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP arg_usage[args[i]] += 1 DCNL DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP vararg_usage += 1 DCNL DCSP for key in callable_kwargs.keys(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP arg_usage[key] += 1 DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP varkw_usage += 1 DCNL DCSP  DCSP  DCSP extra_kwargs.add(key) DCNL DCSP args_with_defaults = args[(- len((defaults or []))):] DCNL DCSP for (i, val) in enumerate((defaults or [])): DCNL DCSP  DCSP if (arg_usage[args_with_defaults[i]] == 0): DCNL DCSP  DCSP  DCSP arg_usage[args_with_defaults[i]] += 1 DCNL DCSP missing_args = [] DCNL DCSP multiple_args = [] DCNL DCSP for (key, usage) in arg_usage.items(): DCNL DCSP  DCSP if (usage == 0): DCNL DCSP  DCSP  DCSP missing_args.append(key) DCNL DCSP  DCSP elif (usage > 1): DCNL DCSP  DCSP  DCSP multiple_args.append(key) DCNL DCSP if missing_args: DCNL DCSP  DCSP message = None DCNL DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP message = ('Missing DCSP parameters: DCSP %s' % ','.join(missing_args)) DCNL DCSP  DCSP raise cherrypy.HTTPError(404, message=message) DCNL DCSP if ((not varargs) and (vararg_usage > 0)): DCNL DCSP  DCSP raise cherrypy.HTTPError(404) DCNL DCSP body_params = (cherrypy.serving.request.body.params or {}) DCNL DCSP body_params = set(body_params.keys()) DCNL DCSP qs_params = (set(callable_kwargs.keys()) - body_params) DCNL DCSP if multiple_args: DCNL DCSP  DCSP if qs_params.intersection(set(multiple_args)): DCNL DCSP  DCSP  DCSP error = 404 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP error = 400 DCNL DCSP  DCSP message = None DCNL DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP message = ('Multiple DCSP values DCSP for DCSP parameters: DCSP %s' % ','.join(multiple_args)) DCNL DCSP  DCSP raise cherrypy.HTTPError(error, message=message) DCNL DCSP if ((not varkw) and (varkw_usage > 0)): DCNL DCSP  DCSP extra_qs_params = set(qs_params).intersection(extra_kwargs) DCNL DCSP  DCSP if extra_qs_params: DCNL DCSP  DCSP  DCSP message = None DCNL DCSP  DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP  DCSP message = ('Unexpected DCSP query DCSP string DCSP parameters: DCSP %s' % ', DCSP '.join(extra_qs_params)) DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(404, message=message) DCNL DCSP  DCSP extra_body_params = set(body_params).intersection(extra_kwargs) DCNL DCSP  DCSP if extra_body_params: DCNL DCSP  DCSP  DCSP message = None DCNL DCSP  DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP  DCSP message = ('Unexpected DCSP body DCSP parameters: DCSP %s' % ', DCSP '.join(extra_body_params)) DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, message=message)
def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains): DCNL  DCSP from cherrypy.lib import httputil DCNL DCSP def vhost_dispatch(path_info): DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP header = request.headers.get DCNL DCSP  DCSP domain = header('Host', '') DCNL DCSP  DCSP if use_x_forwarded_host: DCNL DCSP  DCSP  DCSP domain = header('X-Forwarded-Host', domain) DCNL DCSP  DCSP prefix = domains.get(domain, '') DCNL DCSP  DCSP if prefix: DCNL DCSP  DCSP  DCSP path_info = httputil.urljoin(prefix, path_info) DCNL DCSP  DCSP result = next_dispatcher(path_info) DCNL DCSP  DCSP section = request.config.get('tools.staticdir.section') DCNL DCSP  DCSP if section: DCNL DCSP  DCSP  DCSP section = section[len(prefix):] DCNL DCSP  DCSP  DCSP request.config['tools.staticdir.section'] = section DCNL DCSP  DCSP return result DCNL DCSP return vhost_dispatch
def clean_headers(status): DCNL  DCSP import cherrypy DCNL DCSP response = cherrypy.serving.response DCNL DCSP respheaders = response.headers DCNL DCSP for key in ['Accept-Ranges', 'Age', 'ETag', 'Location', 'Retry-After', 'Vary', 'Content-Encoding', 'Content-Length', 'Expires', 'Content-Location', 'Content-MD5', 'Last-Modified']: DCNL DCSP  DCSP if (key in respheaders): DCNL DCSP  DCSP  DCSP del respheaders[key] DCNL DCSP if (status != 416): DCNL DCSP  DCSP if ('Content-Range' in respheaders): DCNL DCSP  DCSP  DCSP del respheaders['Content-Range']
def get_error_page(status, **kwargs): DCNL  DCSP import cherrypy DCNL DCSP try: DCNL DCSP  DCSP (code, reason, message) = _httputil.valid_status(status) DCNL DCSP except ValueError as x: DCNL DCSP  DCSP raise cherrypy.HTTPError(500, x.args[0]) DCNL DCSP if (kwargs.get('status') is None): DCNL DCSP  DCSP kwargs['status'] = ('%s DCSP %s' % (code, reason)) DCNL DCSP if (kwargs.get('message') is None): DCNL DCSP  DCSP kwargs['message'] = message DCNL DCSP if (kwargs.get('traceback') is None): DCNL DCSP  DCSP kwargs['traceback'] = '' DCNL DCSP if (kwargs.get('version') is None): DCNL DCSP  DCSP kwargs['version'] = cherrypy.__version__ DCNL DCSP for (k, v) in kwargs.iteritems(): DCNL DCSP  DCSP if (v is None): DCNL DCSP  DCSP  DCSP kwargs[k] = '' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP kwargs[k] = _escape(kwargs[k]) DCNL DCSP pages = cherrypy.serving.request.error_page DCNL DCSP error_page = (pages.get(code) or pages.get('default')) DCNL DCSP if error_page: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if callable(error_page): DCNL DCSP  DCSP  DCSP  DCSP return error_page(**kwargs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return (open(error_page, 'rb').read() % kwargs) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP e = _format_exception(*_exc_info())[(-1)] DCNL DCSP  DCSP  DCSP m = kwargs['message'] DCNL DCSP  DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP  DCSP m += '<br DCSP />' DCNL DCSP  DCSP  DCSP m += ('In DCSP addition, DCSP the DCSP custom DCSP error DCSP page DCSP failed:\n<br DCSP />%s' % e) DCNL DCSP  DCSP  DCSP kwargs['message'] = m DCNL DCSP return (_HTTPErrorTemplate % kwargs)
def format_exc(exc=None): DCNL  DCSP if (exc is None): DCNL DCSP  DCSP exc = _exc_info() DCNL DCSP if (exc == (None, None, None)): DCNL DCSP  DCSP return '' DCNL DCSP import traceback DCNL DCSP return ''.join(traceback.format_exception(*exc))
def bare_error(extrabody=None): DCNL  DCSP body = 'Unrecoverable DCSP error DCSP in DCSP the DCSP server.' DCNL DCSP if (extrabody is not None): DCNL DCSP  DCSP if (not isinstance(extrabody, str)): DCNL DCSP  DCSP  DCSP extrabody = extrabody.encode('utf-8') DCNL DCSP  DCSP body += ('\n' + extrabody) DCNL DCSP return ('500 DCSP Internal DCSP Server DCSP Error', [('Content-Type', 'text/plain'), ('Content-Length', str(len(body)))], [body])
def client_host(server_host): DCNL  DCSP if (server_host == '0.0.0.0'): DCNL DCSP  DCSP return '127.0.0.1' DCNL DCSP if (server_host == '::'): DCNL DCSP  DCSP return '::1' DCNL DCSP return server_host
def check_port(host, port, timeout=1.0): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP host = client_host(host) DCNL DCSP port = int(port) DCNL DCSP import socket DCNL DCSP try: DCNL DCSP  DCSP info = socket.getaddrinfo(host, port, socket.AF_UNSPEC, socket.SOCK_STREAM) DCNL DCSP except socket.gaierror: DCNL DCSP  DCSP if (':' in host): DCNL DCSP  DCSP  DCSP info = [(socket.AF_INET6, socket.SOCK_STREAM, 0, '', (host, port, 0, 0))] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP info = [(socket.AF_INET, socket.SOCK_STREAM, 0, '', (host, port))] DCNL DCSP for res in info: DCNL DCSP  DCSP (af, socktype, proto, canonname, sa) = res DCNL DCSP  DCSP s = None DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP s = socket.socket(af, socktype, proto) DCNL DCSP  DCSP  DCSP s.settimeout(timeout) DCNL DCSP  DCSP  DCSP s.connect((host, port)) DCNL DCSP  DCSP  DCSP s.close() DCNL DCSP  DCSP  DCSP raise IOError(('Port DCSP %s DCSP is DCSP in DCSP use DCSP on DCSP %s; DCSP perhaps DCSP the DCSP previous DCSP httpserver DCSP did DCSP not DCSP shut DCSP down DCSP properly.' % (repr(port), repr(host)))) DCNL DCSP  DCSP except socket.error: DCNL DCSP  DCSP  DCSP if s: DCNL DCSP  DCSP  DCSP  DCSP s.close()
def wait_for_free_port(host, port): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP for trial in range(50): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP check_port(host, port, timeout=0.1) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP time.sleep(0.1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return DCNL DCSP raise IOError(('Port DCSP %r DCSP not DCSP free DCSP on DCSP %r' % (port, host)))
def wait_for_occupied_port(host, port): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP for trial in range(50): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP check_port(host, port) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP time.sleep(0.1) DCNL DCSP raise IOError(('Port DCSP %r DCSP not DCSP bound DCSP on DCSP %r' % (port, host)))
def hooks_namespace(k, v): DCNL  DCSP hookpoint = k.split('.', 1)[0] DCNL DCSP if isinstance(v, basestring): DCNL DCSP  DCSP v = cherrypy.lib.attributes(v) DCNL DCSP if (not isinstance(v, Hook)): DCNL DCSP  DCSP v = Hook(v) DCNL DCSP cherrypy.serving.request.hooks[hookpoint].append(v)
def request_namespace(k, v): DCNL  DCSP if (k[:5] == 'body.'): DCNL DCSP  DCSP setattr(cherrypy.serving.request.body, k[5:], v) DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.serving.request, k, v)
def response_namespace(k, v): DCNL  DCSP if (k[:8] == 'headers.'): DCNL DCSP  DCSP cherrypy.serving.response.headers[k.split('.', 1)[1]] = v DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.serving.response, k, v)
def error_page_namespace(k, v): DCNL  DCSP if (k != 'default'): DCNL DCSP  DCSP k = int(k) DCNL DCSP cherrypy.serving.request.error_page[k] = v
def plat_specific_errors(*errnames): DCNL  DCSP errno_names = dir(errno) DCNL DCSP nums = [getattr(errno, k) for k in errnames if (k in errno_names)] DCNL DCSP return dict.fromkeys(nums).keys()
def read_headers(rfile, hdict=None): DCNL  DCSP if (hdict is None): DCNL DCSP  DCSP hdict = {} DCNL DCSP while True: DCNL DCSP  DCSP line = rfile.readline() DCNL DCSP  DCSP if (not line): DCNL DCSP  DCSP  DCSP raise ValueError('Illegal DCSP end DCSP of DCSP headers.') DCNL DCSP  DCSP if (line == CRLF): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not line.endswith(CRLF)): DCNL DCSP  DCSP  DCSP raise ValueError('HTTP DCSP requires DCSP CRLF DCSP terminators') DCNL DCSP  DCSP if (line[0] in ' DCSP  DCTB '): DCNL DCSP  DCSP  DCSP v = line.strip() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (k, v) = line.split(':', 1) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Illegal DCSP header DCSP line.') DCNL DCSP  DCSP  DCSP k = k.strip().title() DCNL DCSP  DCSP  DCSP v = v.strip() DCNL DCSP  DCSP  DCSP hname = k DCNL DCSP  DCSP if (k in comma_separated_headers): DCNL DCSP  DCSP  DCSP existing = hdict.get(hname) DCNL DCSP  DCSP  DCSP if existing: DCNL DCSP  DCSP  DCSP  DCSP v = ', DCSP '.join((existing, v)) DCNL DCSP  DCSP hdict[hname] = v DCNL DCSP return hdict
def format_exc(limit=None): DCNL  DCSP try: DCNL DCSP  DCSP (etype, value, tb) = sys.exc_info() DCNL DCSP  DCSP return ''.join(traceback.format_exception(etype, value, tb, limit)) DCNL DCSP finally: DCNL DCSP  DCSP etype = value = tb = None
def process_urlencoded(entity): DCNL  DCSP qs = entity.fp.read() DCNL DCSP for charset in entity.attempt_charsets: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP params = {} DCNL DCSP  DCSP  DCSP for aparam in qs.split('&'): DCNL DCSP  DCSP  DCSP  DCSP for pair in aparam.split(';'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not pair): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP atoms = pair.split('=', 1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(atoms) == 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP atoms.append('') DCNL DCSP  DCSP  DCSP  DCSP  DCSP key = unquote_plus(atoms[0]).decode(charset) DCNL DCSP  DCSP  DCSP  DCSP  DCSP value = unquote_plus(atoms[1]).decode(charset) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (key in params): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not isinstance(params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key] = [params[key]] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key].append(value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key] = value DCNL DCSP  DCSP except UnicodeDecodeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP entity.charset = charset DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise cherrypy.HTTPError(400, ('The DCSP request DCSP entity DCSP could DCSP not DCSP be DCSP decoded. DCSP The DCSP following DCSP charsets DCSP were DCSP attempted: DCSP %s' % repr(entity.attempt_charsets))) DCNL DCSP for (key, value) in params.items(): DCNL DCSP  DCSP if (key in entity.params): DCNL DCSP  DCSP  DCSP if (not isinstance(entity.params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP entity.params[key] = [entity.params[key]] DCNL DCSP  DCSP  DCSP entity.params[key].append(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP entity.params[key] = value
def process_multipart(entity): DCNL  DCSP ib = u'' DCNL DCSP if (u'boundary' in entity.content_type.params): DCNL DCSP  DCSP ib = entity.content_type.params['boundary'].strip(u'"') DCNL DCSP if (not re.match(u'^[ DCSP -~]{0,200}[!-~]$', ib)): DCNL DCSP  DCSP raise ValueError((u'Invalid DCSP boundary DCSP in DCSP multipart DCSP form: DCSP %r' % (ib,))) DCNL DCSP ib = (u'--' + ib).encode('ascii') DCNL DCSP while True: DCNL DCSP  DCSP b = entity.readline() DCNL DCSP  DCSP if (not b): DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP b = b.strip() DCNL DCSP  DCSP if (b == ib): DCNL DCSP  DCSP  DCSP break DCNL DCSP while True: DCNL DCSP  DCSP part = entity.part_class.from_fp(entity.fp, ib) DCNL DCSP  DCSP entity.parts.append(part) DCNL DCSP  DCSP part.process() DCNL DCSP  DCSP if part.fp.done: DCNL DCSP  DCSP  DCSP break
def process_multipart_form_data(entity): DCNL  DCSP process_multipart(entity) DCNL DCSP kept_parts = [] DCNL DCSP for part in entity.parts: DCNL DCSP  DCSP if (part.name is None): DCNL DCSP  DCSP  DCSP kept_parts.append(part) DCNL DCSP  DCSP elif (part.filename is None): DCNL DCSP  DCSP  DCSP entity.params[part.name] = part.fullvalue() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP entity.params[part.name] = part DCNL DCSP entity.parts = kept_parts
def _old_process_multipart(entity): DCNL  DCSP process_multipart(entity) DCNL DCSP params = entity.params DCNL DCSP for part in entity.parts: DCNL DCSP  DCSP if (part.name is None): DCNL DCSP  DCSP  DCSP key = u'parts' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP key = part.name DCNL DCSP  DCSP if (part.filename is None): DCNL DCSP  DCSP  DCSP value = part.fullvalue() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = part DCNL DCSP  DCSP if (key in params): DCNL DCSP  DCSP  DCSP if (not isinstance(params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP params[key] = [params[key]] DCNL DCSP  DCSP  DCSP params[key].append(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP params[key] = value
def as_dict(config): DCNL  DCSP if isinstance(config, basestring): DCNL DCSP  DCSP config = Parser().dict_from_file(config) DCNL DCSP elif hasattr(config, 'read'): DCNL DCSP  DCSP config = Parser().dict_from_file(config) DCNL DCSP return config
def _astnode(s): DCNL  DCSP try: DCNL DCSP  DCSP import compiler DCNL DCSP except ImportError: DCNL DCSP  DCSP return eval(s) DCNL DCSP p = compiler.parse(('__tempvalue__ DCSP = DCSP ' + s)) DCNL DCSP return p.getChildren()[1].getChildren()[0].getChildren()[1]
def unrepr(s): DCNL  DCSP if (not s): DCNL DCSP  DCSP return s DCNL DCSP obj = _astnode(s) DCNL DCSP return _Builder().build(obj)
def modules(modulePath): DCNL  DCSP try: DCNL DCSP  DCSP mod = sys.modules[modulePath] DCNL DCSP  DCSP if (mod is None): DCNL DCSP  DCSP  DCSP raise KeyError() DCNL DCSP except KeyError: DCNL DCSP  DCSP mod = __import__(modulePath, globals(), locals(), ['']) DCNL DCSP return mod
def attributes(full_attribute_name): DCNL  DCSP last_dot = full_attribute_name.rfind('.') DCNL DCSP attr_name = full_attribute_name[(last_dot + 1):] DCNL DCSP mod_path = full_attribute_name[:last_dot] DCNL DCSP mod = modules(mod_path) DCNL DCSP try: DCNL DCSP  DCSP attr = getattr(mod, attr_name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise AttributeError(("'%s' DCSP object DCSP has DCSP no DCSP attribute DCSP '%s'" % (mod_path, attr_name))) DCNL DCSP return attr
def get(invalid_methods=('POST', 'PUT', 'DELETE'), debug=False, **kwargs): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP if (not hasattr(cherrypy, '_cache')): DCNL DCSP  DCSP cherrypy._cache = kwargs.pop('cache_class', MemoryCache)() DCNL DCSP  DCSP for (k, v) in kwargs.items(): DCNL DCSP  DCSP  DCSP setattr(cherrypy._cache, k, v) DCNL DCSP  DCSP cherrypy._cache.debug = debug DCNL DCSP if (request.method in invalid_methods): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.method DCSP %r DCSP in DCSP invalid_methods DCSP %r' % (request.method, invalid_methods)), 'TOOLS.CACHING') DCNL DCSP  DCSP cherrypy._cache.delete() DCNL DCSP  DCSP request.cached = False DCNL DCSP  DCSP request.cacheable = False DCNL DCSP  DCSP return False DCNL DCSP if ('no-cache' in [e.value for e in request.headers.elements('Pragma')]): DCNL DCSP  DCSP request.cached = False DCNL DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP return False DCNL DCSP cache_data = cherrypy._cache.get() DCNL DCSP request.cached = bool(cache_data) DCNL DCSP request.cacheable = (not request.cached) DCNL DCSP if request.cached: DCNL DCSP  DCSP max_age = cherrypy._cache.delay DCNL DCSP  DCSP for v in [e.value for e in request.headers.elements('Cache-Control')]: DCNL DCSP  DCSP  DCSP atoms = v.split('=', 1) DCNL DCSP  DCSP  DCSP directive = atoms.pop(0) DCNL DCSP  DCSP  DCSP if (directive == 'max-age'): DCNL DCSP  DCSP  DCSP  DCSP if ((len(atoms) != 1) or (not atoms[0].isdigit())): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Invalid DCSP Cache-Control DCSP header') DCNL DCSP  DCSP  DCSP  DCSP max_age = int(atoms[0]) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif (directive == 'no-cache'): DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Ignoring DCSP cache DCSP due DCSP to DCSP Cache-Control: DCSP no-cache', 'TOOLS.CACHING') DCNL DCSP  DCSP  DCSP  DCSP request.cached = False DCNL DCSP  DCSP  DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Reading DCSP response DCSP from DCSP cache', 'TOOLS.CACHING') DCNL DCSP  DCSP (s, h, b, create_time) = cache_data DCNL DCSP  DCSP age = int((response.time - create_time)) DCNL DCSP  DCSP if (age > max_age): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Ignoring DCSP cache DCSP due DCSP to DCSP age DCSP > DCSP %d' % max_age), 'TOOLS.CACHING') DCNL DCSP  DCSP  DCSP request.cached = False DCNL DCSP  DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP response.headers = rh = httputil.HeaderMap() DCNL DCSP  DCSP for k in h: DCNL DCSP  DCSP  DCSP dict.__setitem__(rh, k, dict.__getitem__(h, k)) DCNL DCSP  DCSP response.headers['Age'] = str(age) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cptools.validate_since() DCNL DCSP  DCSP except cherrypy.HTTPRedirect as x: DCNL DCSP  DCSP  DCSP if (x.status == 304): DCNL DCSP  DCSP  DCSP  DCSP cherrypy._cache.tot_non_modified += 1 DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP response.status = s DCNL DCSP  DCSP response.body = b DCNL DCSP elif debug: DCNL DCSP  DCSP cherrypy.log('request DCSP is DCSP not DCSP cached', 'TOOLS.CACHING') DCNL DCSP return request.cached
def expires(secs=0, force=False, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP headers = response.headers DCNL DCSP cacheable = False DCNL DCSP if (not force): DCNL DCSP  DCSP for indicator in ('Etag', 'Last-Modified', 'Age', 'Expires'): DCNL DCSP  DCSP  DCSP if (indicator in headers): DCNL DCSP  DCSP  DCSP  DCSP cacheable = True DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if ((not cacheable) and (not force)): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request DCSP is DCSP not DCSP cacheable', 'TOOLS.EXPIRES') DCNL DCSP else: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request DCSP is DCSP cacheable', 'TOOLS.EXPIRES') DCNL DCSP  DCSP if isinstance(secs, datetime.timedelta): DCNL DCSP  DCSP  DCSP secs = ((86400 * secs.days) + secs.seconds) DCNL DCSP  DCSP if (secs == 0): DCNL DCSP  DCSP  DCSP if (force or ('Pragma' not in headers)): DCNL DCSP  DCSP  DCSP  DCSP headers['Pragma'] = 'no-cache' DCNL DCSP  DCSP  DCSP if (cherrypy.serving.request.protocol >= (1, 1)): DCNL DCSP  DCSP  DCSP  DCSP if (force or ('Cache-Control' not in headers)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP headers['Cache-Control'] = 'no-cache, DCSP must-revalidate' DCNL DCSP  DCSP  DCSP expiry = httputil.HTTPDate(1169942400.0) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP expiry = httputil.HTTPDate((response.time + secs)) DCNL DCSP  DCSP if (force or ('Expires' not in headers)): DCNL DCSP  DCSP  DCSP headers['Expires'] = expiry
def decode(encoding=None, default_encoding='utf-8'): DCNL  DCSP body = cherrypy.request.body DCNL DCSP if (encoding is not None): DCNL DCSP  DCSP if (not isinstance(encoding, list)): DCNL DCSP  DCSP  DCSP encoding = [encoding] DCNL DCSP  DCSP body.attempt_charsets = encoding DCNL DCSP elif default_encoding: DCNL DCSP  DCSP if (not isinstance(default_encoding, list)): DCNL DCSP  DCSP  DCSP default_encoding = [default_encoding] DCNL DCSP  DCSP body.attempt_charsets = (body.attempt_charsets + default_encoding)
def compress(body, compress_level): DCNL  DCSP import zlib DCNL DCSP (yield '\x1f\x8b') DCNL DCSP (yield '\x08') DCNL DCSP (yield '\x00') DCNL DCSP (yield struct.pack('<L', (int(time.time()) & 4294967295L))) DCNL DCSP (yield '\x02') DCNL DCSP (yield '\xff') DCNL DCSP crc = zlib.crc32('') DCNL DCSP size = 0 DCNL DCSP zobj = zlib.compressobj(compress_level, zlib.DEFLATED, (- zlib.MAX_WBITS), zlib.DEF_MEM_LEVEL, 0) DCNL DCSP for line in body: DCNL DCSP  DCSP size += len(line) DCNL DCSP  DCSP crc = zlib.crc32(line, crc) DCNL DCSP  DCSP (yield zobj.compress(line)) DCNL DCSP (yield zobj.flush()) DCNL DCSP (yield struct.pack('<L', (crc & 4294967295L))) DCNL DCSP (yield struct.pack('<L', (size & 4294967295L)))
def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP set_vary_header(response, 'Accept-Encoding') DCNL DCSP if (not response.body): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP response DCSP body', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP if getattr(request, 'cached', False): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Not DCSP gzipping DCSP cached DCSP response', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP acceptable = request.headers.elements('Accept-Encoding') DCNL DCSP if (not acceptable): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Accept-Encoding', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP ct = response.headers.get('Content-Type', '').split(';')[0] DCNL DCSP for coding in acceptable: DCNL DCSP  DCSP if ((coding.value == 'identity') and (coding.qvalue != 0)): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Non-zero DCSP identity DCSP qvalue: DCSP %r' % coding), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP if (coding.value in ('gzip', 'x-gzip')): DCNL DCSP  DCSP  DCSP if (coding.qvalue == 0): DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Zero DCSP gzip DCSP qvalue: DCSP %r' % coding), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP if (ct not in mime_types): DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Content-Type DCSP %r DCSP not DCSP in DCSP mime_types DCSP %r' % (ct, mime_types)), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log('Gzipping', context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP response.headers['Content-Encoding'] = 'gzip' DCNL DCSP  DCSP  DCSP response.body = compress(response.body, compress_level) DCNL DCSP  DCSP  DCSP if ('Content-Length' in response.headers): DCNL DCSP  DCSP  DCSP  DCSP del response.headers['Content-Length'] DCNL DCSP  DCSP  DCSP return DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log('No DCSP acceptable DCSP encoding DCSP found.', context='GZIP') DCNL DCSP cherrypy.HTTPError(406, 'identity, DCSP gzip').set_response()
def calculateNonce(realm, algorithm=MD5): DCNL  DCSP global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS DCNL DCSP assert (algorithm in SUPPORTED_ALGORITHM) DCNL DCSP try: DCNL DCSP  DCSP encoder = DIGEST_AUTH_ENCODERS[algorithm] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise NotImplementedError(('The DCSP chosen DCSP algorithm DCSP (%s) DCSP does DCSP not DCSP have DCSP an DCSP implementation DCSP yet' % algorithm)) DCNL DCSP return encoder(('%d:%s' % (time.time(), realm)))
def digestAuth(realm, algorithm=MD5, nonce=None, qop=AUTH): DCNL  DCSP global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS, SUPPORTED_QOP DCNL DCSP assert (algorithm in SUPPORTED_ALGORITHM) DCNL DCSP assert (qop in SUPPORTED_QOP) DCNL DCSP if (nonce is None): DCNL DCSP  DCSP nonce = calculateNonce(realm, algorithm) DCNL DCSP return ('Digest DCSP realm="%s", DCSP nonce="%s", DCSP algorithm="%s", DCSP qop="%s"' % (realm, nonce, algorithm, qop))
def basicAuth(realm): DCNL  DCSP assert ('"' not in realm), 'Realms DCSP cannot DCSP contain DCSP the DCSP " DCSP (quote) DCSP character.' DCNL DCSP return ('Basic DCSP realm="%s"' % realm)
def doAuth(realm): DCNL  DCSP return ((digestAuth(realm) + ' DCSP ') + basicAuth(realm))
def parseAuthorization(credentials): DCNL  DCSP global AUTH_SCHEMES DCNL DCSP (auth_scheme, auth_params) = credentials.split(' DCSP ', 1) DCNL DCSP auth_scheme = auth_scheme.lower() DCNL DCSP parser = AUTH_SCHEMES[auth_scheme] DCNL DCSP params = parser(auth_params) DCNL DCSP if (params is None): DCNL DCSP  DCSP return DCNL DCSP assert ('auth_scheme' not in params) DCNL DCSP params['auth_scheme'] = auth_scheme DCNL DCSP return params
def md5SessionKey(params, password): DCNL  DCSP keys = ('username', 'realm', 'nonce', 'cnonce') DCNL DCSP params_copy = {} DCNL DCSP for key in keys: DCNL DCSP  DCSP params_copy[key] = params[key] DCNL DCSP params_copy['algorithm'] = MD5_SESS DCNL DCSP return _A1(params_copy, password)
def _computeDigestResponse(auth_map, password, method='GET', A1=None, **kwargs): DCNL  DCSP params = auth_map DCNL DCSP algorithm = params.get('algorithm', MD5) DCNL DCSP H = DIGEST_AUTH_ENCODERS[algorithm] DCNL DCSP KD = (lambda secret, data: H(((secret + ':') + data))) DCNL DCSP qop = params.get('qop', None) DCNL DCSP H_A2 = H(_A2(params, method, kwargs)) DCNL DCSP if ((algorithm == MD5_SESS) and (A1 is not None)): DCNL DCSP  DCSP H_A1 = H(A1) DCNL DCSP else: DCNL DCSP  DCSP H_A1 = H(_A1(params, password)) DCNL DCSP if (qop in ('auth', 'auth-int')): DCNL DCSP  DCSP request = ('%s:%s:%s:%s:%s' % (params['nonce'], params['nc'], params['cnonce'], params['qop'], H_A2)) DCNL DCSP elif (qop is None): DCNL DCSP  DCSP request = ('%s:%s' % (params['nonce'], H_A2)) DCNL DCSP return KD(H_A1, request)
def _checkDigestResponse(auth_map, password, method='GET', A1=None, **kwargs): DCNL  DCSP if (auth_map['realm'] != kwargs.get('realm', None)): DCNL DCSP  DCSP return False DCNL DCSP response = _computeDigestResponse(auth_map, password, method, A1, **kwargs) DCNL DCSP return (response == auth_map['response'])
def checkResponse(auth_map, password, method='GET', encrypt=None, **kwargs): DCNL  DCSP global AUTH_RESPONSES DCNL DCSP checker = AUTH_RESPONSES[auth_map['auth_scheme']] DCNL DCSP return checker(auth_map, password, method=method, encrypt=encrypt, **kwargs)
def get_tree(base, exclude): DCNL  DCSP tree = {} DCNL DCSP coverage.get_ready() DCNL DCSP runs = list(coverage.cexecuted.keys()) DCNL DCSP if runs: DCNL DCSP  DCSP for path in runs: DCNL DCSP  DCSP  DCSP if ((not _skip_file(path, exclude)) and (not os.path.isdir(path))): DCNL DCSP  DCSP  DCSP  DCSP _graft(path, tree) DCNL DCSP return tree
def serve_file(path, content_type=None, disposition=None, name=None, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP if (not os.path.isabs(path)): DCNL DCSP  DCSP msg = ("'%s' DCSP is DCSP not DCSP an DCSP absolute DCSP path." % path) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICFILE') DCNL DCSP  DCSP raise ValueError(msg) DCNL DCSP try: DCNL DCSP  DCSP st = os.stat(path) DCNL DCSP except OSError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('os.stat(%r) DCSP failed' % path), 'TOOLS.STATIC') DCNL DCSP  DCSP raise cherrypy.NotFound() DCNL DCSP if stat.S_ISDIR(st.st_mode): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('%r DCSP is DCSP a DCSP directory' % path), 'TOOLS.STATIC') DCNL DCSP  DCSP raise cherrypy.NotFound() DCNL DCSP response.headers['Last-Modified'] = httputil.HTTPDate(st.st_mtime) DCNL DCSP cptools.validate_since() DCNL DCSP if (content_type is None): DCNL DCSP  DCSP ext = '' DCNL DCSP  DCSP i = path.rfind('.') DCNL DCSP  DCSP if (i != (-1)): DCNL DCSP  DCSP  DCSP ext = path[i:].lower() DCNL DCSP  DCSP content_type = mimetypes.types_map.get(ext, None) DCNL DCSP if (content_type is not None): DCNL DCSP  DCSP response.headers['Content-Type'] = content_type DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Type: DCSP %r' % content_type), 'TOOLS.STATIC') DCNL DCSP cd = None DCNL DCSP if (disposition is not None): DCNL DCSP  DCSP if (name is None): DCNL DCSP  DCSP  DCSP name = os.path.basename(path) DCNL DCSP  DCSP cd = ('%s; DCSP filename="%s"' % (disposition, name)) DCNL DCSP  DCSP response.headers['Content-Disposition'] = cd DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Disposition: DCSP %r' % cd), 'TOOLS.STATIC') DCNL DCSP content_length = st.st_size DCNL DCSP fileobj = open(path, 'rb') DCNL DCSP return _serve_fileobj(fileobj, content_type, content_length, debug=debug)
def serve_fileobj(fileobj, content_type=None, disposition=None, name=None, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP try: DCNL DCSP  DCSP st = os.fstat(fileobj.fileno()) DCNL DCSP except AttributeError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('os DCSP has DCSP no DCSP fstat DCSP attribute', 'TOOLS.STATIC') DCNL DCSP  DCSP content_length = None DCNL DCSP else: DCNL DCSP  DCSP response.headers['Last-Modified'] = httputil.HTTPDate(st.st_mtime) DCNL DCSP  DCSP cptools.validate_since() DCNL DCSP  DCSP content_length = st.st_size DCNL DCSP if (content_type is not None): DCNL DCSP  DCSP response.headers['Content-Type'] = content_type DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Type: DCSP %r' % content_type), 'TOOLS.STATIC') DCNL DCSP cd = None DCNL DCSP if (disposition is not None): DCNL DCSP  DCSP if (name is None): DCNL DCSP  DCSP  DCSP cd = disposition DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cd = ('%s; DCSP filename="%s"' % (disposition, name)) DCNL DCSP  DCSP response.headers['Content-Disposition'] = cd DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Disposition: DCSP %r' % cd), 'TOOLS.STATIC') DCNL DCSP return _serve_fileobj(fileobj, content_type, content_length, debug=debug)
def _serve_fileobj(fileobj, content_type, content_length, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP request = cherrypy.serving.request DCNL DCSP if (request.protocol >= (1, 1)): DCNL DCSP  DCSP response.headers['Accept-Ranges'] = 'bytes' DCNL DCSP  DCSP r = httputil.get_ranges(request.headers.get('Range'), content_length) DCNL DCSP  DCSP if (r == []): DCNL DCSP  DCSP  DCSP response.headers['Content-Range'] = ('bytes DCSP */%s' % content_length) DCNL DCSP  DCSP  DCSP message = 'Invalid DCSP Range DCSP (first-byte-pos DCSP greater DCSP than DCSP Content-Length)' DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(message, 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(416, message) DCNL DCSP  DCSP if r: DCNL DCSP  DCSP  DCSP if (len(r) == 1): DCNL DCSP  DCSP  DCSP  DCSP (start, stop) = r[0] DCNL DCSP  DCSP  DCSP  DCSP if (stop > content_length): DCNL DCSP  DCSP  DCSP  DCSP  DCSP stop = content_length DCNL DCSP  DCSP  DCSP  DCSP r_len = (stop - start) DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Single DCSP part; DCSP start: DCSP %r, DCSP stop: DCSP %r' % (start, stop)), 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP  DCSP response.status = '206 DCSP Partial DCSP Content' DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Range'] = ('bytes DCSP %s-%s/%s' % (start, (stop - 1), content_length)) DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Length'] = r_len DCNL DCSP  DCSP  DCSP  DCSP fileobj.seek(start) DCNL DCSP  DCSP  DCSP  DCSP response.body = file_generator_limited(fileobj, r_len) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP response.status = '206 DCSP Partial DCSP Content' DCNL DCSP  DCSP  DCSP  DCSP import mimetools DCNL DCSP  DCSP  DCSP  DCSP boundary = mimetools.choose_boundary() DCNL DCSP  DCSP  DCSP  DCSP ct = ('multipart/byteranges; DCSP boundary=%s' % boundary) DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Type'] = ct DCNL DCSP  DCSP  DCSP  DCSP if ('Content-Length' in response.headers): DCNL DCSP  DCSP  DCSP  DCSP  DCSP del response.headers['Content-Length'] DCNL DCSP  DCSP  DCSP  DCSP def file_ranges(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield '\r\n') DCNL DCSP  DCSP  DCSP  DCSP  DCSP for (start, stop) in r: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Multipart; DCSP start: DCSP %r, DCSP stop: DCSP %r' % (start, stop)), 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ('--' + boundary)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ('\r\nContent-type: DCSP %s' % content_type)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ('\r\nContent-range: DCSP bytes DCSP %s-%s/%s\r\n\r\n' % (start, (stop - 1), content_length))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fileobj.seek(start) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for chunk in file_generator_limited(fileobj, (stop - start)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield chunk) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield '\r\n') DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield (('--' + boundary) + '--')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield '\r\n') DCNL DCSP  DCSP  DCSP  DCSP response.body = file_ranges() DCNL DCSP  DCSP  DCSP return response.body DCNL DCSP  DCSP elif debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP byteranges DCSP requested', 'TOOLS.STATIC') DCNL DCSP response.headers['Content-Length'] = content_length DCNL DCSP response.body = fileobj DCNL DCSP return response.body
def serve_download(path, name=None): DCNL  DCSP return serve_file(path, 'application/x-download', 'attachment', name)
def staticdir(section, dir, root='', match='', content_types=None, index='', debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if (request.method not in ('GET', 'HEAD')): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request.method DCSP not DCSP GET DCSP or DCSP HEAD', 'TOOLS.STATICDIR') DCNL DCSP  DCSP return False DCNL DCSP if (match and (not re.search(match, request.path_info))): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.path_info DCSP %r DCSP does DCSP not DCSP match DCSP pattern DCSP %r' % (request.path_info, match)), 'TOOLS.STATICDIR') DCNL DCSP  DCSP return False DCNL DCSP dir = os.path.expanduser(dir) DCNL DCSP if (not os.path.isabs(dir)): DCNL DCSP  DCSP if (not root): DCNL DCSP  DCSP  DCSP msg = 'Static DCSP dir DCSP requires DCSP an DCSP absolute DCSP dir DCSP (or DCSP root).' DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICDIR') DCNL DCSP  DCSP  DCSP raise ValueError(msg) DCNL DCSP  DCSP dir = os.path.join(root, dir) DCNL DCSP if (section == 'global'): DCNL DCSP  DCSP section = '/' DCNL DCSP section = section.rstrip('\\/') DCNL DCSP branch = request.path_info[(len(section) + 1):] DCNL DCSP branch = unquote(branch.lstrip('\\/')) DCNL DCSP filename = os.path.join(dir, branch) DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Checking DCSP file DCSP %r DCSP to DCSP fulfill DCSP %r' % (filename, request.path_info)), 'TOOLS.STATICDIR') DCNL DCSP if (not os.path.normpath(filename).startswith(os.path.normpath(dir))): DCNL DCSP  DCSP raise cherrypy.HTTPError(403) DCNL DCSP handled = _attempt(filename, content_types) DCNL DCSP if (not handled): DCNL DCSP  DCSP if index: DCNL DCSP  DCSP  DCSP handled = _attempt(os.path.join(filename, index), content_types) DCNL DCSP  DCSP  DCSP if handled: DCNL DCSP  DCSP  DCSP  DCSP request.is_index = (filename[(-1)] in '\\/') DCNL DCSP return handled
def staticfile(filename, root=None, match='', content_types=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if (request.method not in ('GET', 'HEAD')): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request.method DCSP not DCSP GET DCSP or DCSP HEAD', 'TOOLS.STATICFILE') DCNL DCSP  DCSP return False DCNL DCSP if (match and (not re.search(match, request.path_info))): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.path_info DCSP %r DCSP does DCSP not DCSP match DCSP pattern DCSP %r' % (request.path_info, match)), 'TOOLS.STATICFILE') DCNL DCSP  DCSP return False DCNL DCSP if (not os.path.isabs(filename)): DCNL DCSP  DCSP if (not root): DCNL DCSP  DCSP  DCSP msg = ("Static DCSP tool DCSP requires DCSP an DCSP absolute DCSP filename DCSP (got DCSP '%s')." % filename) DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICFILE') DCNL DCSP  DCSP  DCSP raise ValueError(msg) DCNL DCSP  DCSP filename = os.path.join(root, filename) DCNL DCSP return _attempt(filename, content_types, debug=debug)
def get_ha1_dict_plain(user_password_dict): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP password = user_password_dict.get(username) DCNL DCSP  DCSP if password: DCNL DCSP  DCSP  DCSP return md5_hex(('%s:%s:%s' % (username, realm, password))) DCNL DCSP  DCSP return None DCNL DCSP return get_ha1
def get_ha1_dict(user_ha1_dict): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP return user_ha1_dict.get(user) DCNL DCSP return get_ha1
def get_ha1_file_htdigest(filename): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP result = None DCNL DCSP  DCSP f = open(filename, 'r') DCNL DCSP  DCSP for line in f: DCNL DCSP  DCSP  DCSP (u, r, ha1) = line.rstrip().split(':') DCNL DCSP  DCSP  DCSP if ((u == username) and (r == realm)): DCNL DCSP  DCSP  DCSP  DCSP result = ha1 DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP f.close() DCNL DCSP  DCSP return result DCNL DCSP return get_ha1
def synthesize_nonce(s, key, timestamp=None): DCNL  DCSP if (timestamp is None): DCNL DCSP  DCSP timestamp = int(time.time()) DCNL DCSP h = md5_hex(('%s:%s:%s' % (timestamp, s, key))) DCNL DCSP nonce = ('%s:%s' % (timestamp, h)) DCNL DCSP return nonce
def H(s): DCNL  DCSP return md5_hex(s)
def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False): DCNL  DCSP if (qop not in valid_qops): DCNL DCSP  DCSP raise ValueError(("Unsupported DCSP value DCSP for DCSP qop: DCSP '%s'" % qop)) DCNL DCSP if (algorithm not in valid_algorithms): DCNL DCSP  DCSP raise ValueError(("Unsupported DCSP value DCSP for DCSP algorithm: DCSP '%s'" % algorithm)) DCNL DCSP if (nonce is None): DCNL DCSP  DCSP nonce = synthesize_nonce(realm, key) DCNL DCSP s = ('Digest DCSP realm="%s", DCSP nonce="%s", DCSP algorithm="%s", DCSP qop="%s"' % (realm, nonce, algorithm, qop)) DCNL DCSP if stale: DCNL DCSP  DCSP s += ', DCSP stale="true"' DCNL DCSP return s
def digest_auth(realm, get_ha1, key, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP auth_header = request.headers.get('authorization') DCNL DCSP nonce_is_stale = False DCNL DCSP if (auth_header is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP auth = HttpDigestAuthorization(auth_header, request.method, debug=debug) DCNL DCSP  DCSP except ValueError as e: DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, ('Bad DCSP Request: DCSP %s' % e)) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP TRACE(str(auth)) DCNL DCSP  DCSP if auth.validate_nonce(realm, key): DCNL DCSP  DCSP  DCSP ha1 = get_ha1(realm, auth.username) DCNL DCSP  DCSP  DCSP if (ha1 is not None): DCNL DCSP  DCSP  DCSP  DCSP digest = auth.request_digest(ha1, entity_body=request.body) DCNL DCSP  DCSP  DCSP  DCSP if (digest == auth.response): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP TRACE('digest DCSP matches DCSP auth.response') DCNL DCSP  DCSP  DCSP  DCSP  DCSP nonce_is_stale = auth.is_nonce_stale(max_age_seconds=600) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not nonce_is_stale): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP request.login = auth.username DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP TRACE(('authentication DCSP of DCSP %s DCSP successful' % auth.username)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP header = www_authenticate(realm, key, stale=nonce_is_stale) DCNL DCSP if debug: DCNL DCSP  DCSP TRACE(header) DCNL DCSP cherrypy.serving.response.headers['WWW-Authenticate'] = header DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def file_generator_limited(fileobj, count, chunk_size=65536): DCNL  DCSP remaining = count DCNL DCSP while (remaining > 0): DCNL DCSP  DCSP chunk = fileobj.read(min(chunk_size, remaining)) DCNL DCSP  DCSP chunklen = len(chunk) DCNL DCSP  DCSP if (chunklen == 0): DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP remaining -= chunklen DCNL DCSP  DCSP (yield chunk)
def set_vary_header(response, header_name): DCNL  DCSP varies = response.headers.get('Vary', '') DCNL DCSP varies = [x.strip() for x in varies.split(',') if x.strip()] DCNL DCSP if (header_name not in varies): DCNL DCSP  DCSP varies.append(header_name) DCNL DCSP response.headers['Vary'] = ', DCSP '.join(varies)
def checkpassword_dict(user_password_dict): DCNL  DCSP def checkpassword(realm, user, password): DCNL DCSP  DCSP p = user_password_dict.get(user) DCNL DCSP  DCSP return ((p and (p == password)) or False) DCNL DCSP return checkpassword
def basic_auth(realm, checkpassword, debug=False): DCNL  DCSP if ('"' in realm): DCNL DCSP  DCSP raise ValueError('Realm DCSP cannot DCSP contain DCSP the DCSP " DCSP (quote) DCSP character.') DCNL DCSP request = cherrypy.serving.request DCNL DCSP auth_header = request.headers.get('authorization') DCNL DCSP if (auth_header is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (scheme, params) = auth_header.split(' DCSP ', 1) DCNL DCSP  DCSP  DCSP if (scheme.lower() == 'basic'): DCNL DCSP  DCSP  DCSP  DCSP username_password = base64.decodestring(params) DCNL DCSP  DCSP  DCSP  DCSP (username, password) = username_password.split(':', 1) DCNL DCSP  DCSP  DCSP  DCSP if checkpassword(realm, username, password): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Auth DCSP succeeded', 'TOOLS.AUTH_BASIC') DCNL DCSP  DCSP  DCSP  DCSP  DCSP request.login = username DCNL DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP except (ValueError, binascii.Error): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Bad DCSP Request') DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = ('Basic DCSP realm="%s"' % realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def validate_etags(autotags=False, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP if hasattr(response, 'ETag'): DCNL DCSP  DCSP return DCNL DCSP (status, reason, msg) = _httputil.valid_status(response.status) DCNL DCSP etag = response.headers.get('ETag') DCNL DCSP if etag: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('ETag DCSP already DCSP set: DCSP %s' % etag), 'TOOLS.ETAGS') DCNL DCSP elif (not autotags): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Autotags DCSP off', 'TOOLS.ETAGS') DCNL DCSP elif (status != 200): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Status DCSP not DCSP 200', 'TOOLS.ETAGS') DCNL DCSP else: DCNL DCSP  DCSP etag = response.collapse_body() DCNL DCSP  DCSP etag = ('"%s"' % md5(etag).hexdigest()) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Setting DCSP ETag: DCSP %s' % etag), 'TOOLS.ETAGS') DCNL DCSP  DCSP response.headers['ETag'] = etag DCNL DCSP response.ETag = etag DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Status: DCSP %s' % status), 'TOOLS.ETAGS') DCNL DCSP if ((status >= 200) and (status <= 299)): DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP conditions = (request.headers.elements('If-Match') or []) DCNL DCSP  DCSP conditions = [str(x) for x in conditions] DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('If-Match DCSP conditions: DCSP %s' % repr(conditions)), 'TOOLS.ETAGS') DCNL DCSP  DCSP if (conditions and (not ((conditions == ['*']) or (etag in conditions)))): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(412, ('If-Match DCSP failed: DCSP ETag DCSP %r DCSP did DCSP not DCSP match DCSP %r' % (etag, conditions))) DCNL DCSP  DCSP conditions = (request.headers.elements('If-None-Match') or []) DCNL DCSP  DCSP conditions = [str(x) for x in conditions] DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('If-None-Match DCSP conditions: DCSP %s' % repr(conditions)), 'TOOLS.ETAGS') DCNL DCSP  DCSP if ((conditions == ['*']) or (etag in conditions)): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('request.method: DCSP %s' % request.method), 'TOOLS.ETAGS') DCNL DCSP  DCSP  DCSP if (request.method in ('GET', 'HEAD')): DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect([], 304) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412, ('If-None-Match DCSP failed: DCSP ETag DCSP %r DCSP matched DCSP %r' % (etag, conditions)))
def validate_since(): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP lastmod = response.headers.get('Last-Modified') DCNL DCSP if lastmod: DCNL DCSP  DCSP (status, reason, msg) = _httputil.valid_status(response.status) DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP since = request.headers.get('If-Unmodified-Since') DCNL DCSP  DCSP if (since and (since != lastmod)): DCNL DCSP  DCSP  DCSP if (((status >= 200) and (status <= 299)) or (status == 412)): DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412) DCNL DCSP  DCSP since = request.headers.get('If-Modified-Since') DCNL DCSP  DCSP if (since and (since == lastmod)): DCNL DCSP  DCSP  DCSP if (((status >= 200) and (status <= 299)) or (status == 304)): DCNL DCSP  DCSP  DCSP  DCSP if (request.method in ('GET', 'HEAD')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect([], 304) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412)
def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto', debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if scheme: DCNL DCSP  DCSP s = request.headers.get(scheme, None) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP scheme DCSP %r:%r' % (scheme, s)), 'TOOLS.PROXY') DCNL DCSP  DCSP if ((s == 'on') and ('ssl' in scheme.lower())): DCNL DCSP  DCSP  DCSP scheme = 'https' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP scheme = s DCNL DCSP if (not scheme): DCNL DCSP  DCSP scheme = request.base[:request.base.find('://')] DCNL DCSP if local: DCNL DCSP  DCSP lbase = request.headers.get(local, None) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP local DCSP %r:%r' % (local, lbase)), 'TOOLS.PROXY') DCNL DCSP  DCSP if (lbase is not None): DCNL DCSP  DCSP  DCSP base = lbase.split(',')[0] DCNL DCSP if (not base): DCNL DCSP  DCSP port = request.local.port DCNL DCSP  DCSP if (port == 80): DCNL DCSP  DCSP  DCSP base = '127.0.0.1' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP base = ('127.0.0.1:%s' % port) DCNL DCSP if (base.find('://') == (-1)): DCNL DCSP  DCSP base = ((scheme + '://') + base) DCNL DCSP request.base = base DCNL DCSP if remote: DCNL DCSP  DCSP xff = request.headers.get(remote) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP remote DCSP %r:%r' % (remote, xff)), 'TOOLS.PROXY') DCNL DCSP  DCSP if xff: DCNL DCSP  DCSP  DCSP if (remote == 'X-Forwarded-For'): DCNL DCSP  DCSP  DCSP  DCSP xff = xff.split(',')[(-1)].strip() DCNL DCSP  DCSP  DCSP request.remote.ip = xff
def ignore_headers(headers=('Range',), debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP for name in headers: DCNL DCSP  DCSP if (name in request.headers): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Ignoring DCSP request DCSP header DCSP %r' % name), 'TOOLS.IGNORE_HEADERS') DCNL DCSP  DCSP  DCSP del request.headers[name]
def response_headers(headers=None, debug=False): DCNL  DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Setting DCSP response DCSP headers: DCSP %s' % repr(headers)), 'TOOLS.RESPONSE_HEADERS') DCNL DCSP for (name, value) in (headers or []): DCNL DCSP  DCSP cherrypy.serving.response.headers[name] = value
def referer(pattern, accept=True, accept_missing=False, error=403, message='Forbidden DCSP Referer DCSP header.', debug=False): DCNL  DCSP try: DCNL DCSP  DCSP ref = cherrypy.serving.request.headers['Referer'] DCNL DCSP  DCSP match = bool(re.match(pattern, ref)) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Referer DCSP %r DCSP matches DCSP %r' % (ref, pattern)), 'TOOLS.REFERER') DCNL DCSP  DCSP if (accept == match): DCNL DCSP  DCSP  DCSP return DCNL DCSP except KeyError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Referer DCSP header', 'TOOLS.REFERER') DCNL DCSP  DCSP if accept_missing: DCNL DCSP  DCSP  DCSP return DCNL DCSP raise cherrypy.HTTPError(error, message)
def log_traceback(severity=logging.ERROR, debug=False): DCNL  DCSP cherrypy.log('', 'HTTP', severity=severity, traceback=True)
def log_request_headers(debug=False): DCNL  DCSP h = [(' DCSP  DCSP %s: DCSP %s' % (k, v)) for (k, v) in cherrypy.serving.request.header_list] DCNL DCSP cherrypy.log(('\nRequest DCSP Headers:\n' + '\n'.join(h)), 'HTTP')
def log_hooks(debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP msg = [] DCNL DCSP from cherrypy import _cprequest DCNL DCSP points = _cprequest.hookpoints DCNL DCSP for k in request.hooks.keys(): DCNL DCSP  DCSP if (k not in points): DCNL DCSP  DCSP  DCSP points.append(k) DCNL DCSP for k in points: DCNL DCSP  DCSP msg.append((' DCSP  DCSP  DCSP  DCSP %s:' % k)) DCNL DCSP  DCSP v = request.hooks.get(k, []) DCNL DCSP  DCSP v.sort() DCNL DCSP  DCSP for h in v: DCNL DCSP  DCSP  DCSP msg.append((' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %r' % h)) DCNL DCSP cherrypy.log(((('\nRequest DCSP Hooks DCSP for DCSP ' + cherrypy.url()) + ':\n') + '\n'.join(msg)), 'HTTP')
def redirect(url='', internal=True, debug=False): DCNL  DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Redirecting DCSP %sto: DCSP %s' % ({True: 'internal DCSP ', False: ''}[internal], url)), 'TOOLS.REDIRECT') DCNL DCSP if internal: DCNL DCSP  DCSP raise cherrypy.InternalRedirect(url) DCNL DCSP else: DCNL DCSP  DCSP raise cherrypy.HTTPRedirect(url)
def trailing_slash(missing=True, extra=False, status=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP pi = request.path_info DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('is_index: DCSP %r, DCSP missing: DCSP %r, DCSP extra: DCSP %r, DCSP path_info: DCSP %r' % (request.is_index, missing, extra, pi)), 'TOOLS.TRAILING_SLASH') DCNL DCSP if (request.is_index is True): DCNL DCSP  DCSP if missing: DCNL DCSP  DCSP  DCSP if (not pi.endswith('/')): DCNL DCSP  DCSP  DCSP  DCSP new_url = cherrypy.url((pi + '/'), request.query_string) DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect(new_url, status=(status or 301)) DCNL DCSP elif (request.is_index is False): DCNL DCSP  DCSP if extra: DCNL DCSP  DCSP  DCSP if (pi.endswith('/') and (pi != '/')): DCNL DCSP  DCSP  DCSP  DCSP new_url = cherrypy.url(pi[:(-1)], request.query_string) DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect(new_url, status=(status or 301))
def flatten(debug=False): DCNL  DCSP import types DCNL DCSP def flattener(input): DCNL DCSP  DCSP numchunks = 0 DCNL DCSP  DCSP for x in input: DCNL DCSP  DCSP  DCSP if (not isinstance(x, types.GeneratorType)): DCNL DCSP  DCSP  DCSP  DCSP numchunks += 1 DCNL DCSP  DCSP  DCSP  DCSP (yield x) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for y in flattener(x): DCNL DCSP  DCSP  DCSP  DCSP  DCSP numchunks += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield y) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Flattened DCSP %d DCSP chunks' % numchunks), 'TOOLS.FLATTEN') DCNL DCSP response = cherrypy.serving.response DCNL DCSP response.body = flattener(response.body)
def accept(media=None, debug=False): DCNL  DCSP if (not media): DCNL DCSP  DCSP return DCNL DCSP if isinstance(media, basestring): DCNL DCSP  DCSP media = [media] DCNL DCSP request = cherrypy.serving.request DCNL DCSP ranges = request.headers.elements('Accept') DCNL DCSP if (not ranges): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Accept DCSP header DCSP elements', 'TOOLS.ACCEPT') DCNL DCSP  DCSP return media[0] DCNL DCSP else: DCNL DCSP  DCSP for element in ranges: DCNL DCSP  DCSP  DCSP if (element.qvalue > 0): DCNL DCSP  DCSP  DCSP  DCSP if (element.value == '*/*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Match DCSP due DCSP to DCSP */*', 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP return media[0] DCNL DCSP  DCSP  DCSP  DCSP elif element.value.endswith('/*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP mtype = element.value[:(-1)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP for m in media: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if m.startswith(mtype): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Match DCSP due DCSP to DCSP %s' % element.value), 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return m DCNL DCSP  DCSP  DCSP  DCSP elif (element.value in media): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Match DCSP due DCSP to DCSP %s' % element.value), 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP return element.value DCNL DCSP ah = request.headers.get('Accept') DCNL DCSP if (ah is None): DCNL DCSP  DCSP msg = 'Your DCSP client DCSP did DCSP not DCSP send DCSP an DCSP Accept DCSP header.' DCNL DCSP else: DCNL DCSP  DCSP msg = ('Your DCSP client DCSP sent DCSP this DCSP Accept DCSP header: DCSP %s.' % ah) DCNL DCSP msg += (' DCSP But DCSP this DCSP resource DCSP only DCSP emits DCSP these DCSP media DCSP types: DCSP %s.' % ', DCSP '.join(media)) DCNL DCSP raise cherrypy.HTTPError(406, msg)
def autovary(ignore=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP req_h = request.headers DCNL DCSP request.headers = MonitoredHeaderMap() DCNL DCSP request.headers.update(req_h) DCNL DCSP if (ignore is None): DCNL DCSP  DCSP ignore = set(['Content-Disposition', 'Content-Length', 'Content-Type']) DCNL DCSP def set_response_header(): DCNL DCSP  DCSP resp_h = cherrypy.serving.response.headers DCNL DCSP  DCSP v = set([e.value for e in resp_h.elements('Vary')]) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Accessed DCSP headers: DCSP %s' % request.headers.accessed_headers), 'TOOLS.AUTOVARY') DCNL DCSP  DCSP v = v.union(request.headers.accessed_headers) DCNL DCSP  DCSP v = v.difference(ignore) DCNL DCSP  DCSP v = list(v) DCNL DCSP  DCSP v.sort() DCNL DCSP  DCSP resp_h['Vary'] = ', DCSP '.join(v) DCNL DCSP request.hooks.attach('before_finalize', set_response_header, 95)
def urljoin(*atoms): DCNL  DCSP url = '/'.join([x for x in atoms if x]) DCNL DCSP while ('//' in url): DCNL DCSP  DCSP url = url.replace('//', '/') DCNL DCSP return (url or '/')
def protocol_from_http(protocol_str): DCNL  DCSP return (int(protocol_str[5]), int(protocol_str[7]))
def get_ranges(headervalue, content_length): DCNL  DCSP if (not headervalue): DCNL DCSP  DCSP return None DCNL DCSP result = [] DCNL DCSP (bytesunit, byteranges) = headervalue.split('=', 1) DCNL DCSP for brange in byteranges.split(','): DCNL DCSP  DCSP (start, stop) = [x.strip() for x in brange.split('-', 1)] DCNL DCSP  DCSP if start: DCNL DCSP  DCSP  DCSP if (not stop): DCNL DCSP  DCSP  DCSP  DCSP stop = (content_length - 1) DCNL DCSP  DCSP  DCSP (start, stop) = (int(start), int(stop)) DCNL DCSP  DCSP  DCSP if (start >= content_length): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (stop < start): DCNL DCSP  DCSP  DCSP  DCSP return None DCNL DCSP  DCSP  DCSP result.append((start, (stop + 1))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not stop): DCNL DCSP  DCSP  DCSP  DCSP return None DCNL DCSP  DCSP  DCSP result.append(((content_length - int(stop)), content_length)) DCNL DCSP return result
def header_elements(fieldname, fieldvalue): DCNL  DCSP if (not fieldvalue): DCNL DCSP  DCSP return [] DCNL DCSP result = [] DCNL DCSP for element in fieldvalue.split(','): DCNL DCSP  DCSP if (fieldname.startswith('Accept') or (fieldname == 'TE')): DCNL DCSP  DCSP  DCSP hv = AcceptElement.from_str(element) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP hv = HeaderElement.from_str(element) DCNL DCSP  DCSP result.append(hv) DCNL DCSP result.sort() DCNL DCSP result.reverse() DCNL DCSP return result
def decode_TEXT(value): DCNL  DCSP from email.Header import decode_header DCNL DCSP atoms = decode_header(value) DCNL DCSP decodedvalue = '' DCNL DCSP for (atom, charset) in atoms: DCNL DCSP  DCSP if (charset is not None): DCNL DCSP  DCSP  DCSP atom = atom.decode(charset) DCNL DCSP  DCSP decodedvalue += atom DCNL DCSP return decodedvalue
def valid_status(status): DCNL  DCSP if (not status): DCNL DCSP  DCSP status = 200 DCNL DCSP status = str(status) DCNL DCSP parts = status.split(' DCSP ', 1) DCNL DCSP if (len(parts) == 1): DCNL DCSP  DCSP (code,) = parts DCNL DCSP  DCSP reason = None DCNL DCSP else: DCNL DCSP  DCSP (code, reason) = parts DCNL DCSP  DCSP reason = reason.strip() DCNL DCSP try: DCNL DCSP  DCSP code = int(code) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ValueError(('Illegal DCSP response DCSP status DCSP from DCSP server DCSP (%s DCSP is DCSP non-numeric).' % repr(code))) DCNL DCSP if ((code < 100) or (code > 599)): DCNL DCSP  DCSP raise ValueError(('Illegal DCSP response DCSP status DCSP from DCSP server DCSP (%s DCSP is DCSP out DCSP of DCSP range).' % repr(code))) DCNL DCSP if (code not in response_codes): DCNL DCSP  DCSP (default_reason, message) = ('', '') DCNL DCSP else: DCNL DCSP  DCSP (default_reason, message) = response_codes[code] DCNL DCSP if (reason is None): DCNL DCSP  DCSP reason = default_reason DCNL DCSP return (code, reason, message)
def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'): DCNL  DCSP pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')] DCNL DCSP d = {} DCNL DCSP for name_value in pairs: DCNL DCSP  DCSP if ((not name_value) and (not strict_parsing)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP nv = name_value.split('=', 1) DCNL DCSP  DCSP if (len(nv) != 2): DCNL DCSP  DCSP  DCSP if strict_parsing: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(('bad DCSP query DCSP field: DCSP %r' % (name_value,))) DCNL DCSP  DCSP  DCSP if keep_blank_values: DCNL DCSP  DCSP  DCSP  DCSP nv.append('') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (len(nv[1]) or keep_blank_values): DCNL DCSP  DCSP  DCSP name = urllib.unquote(nv[0].replace('+', ' DCSP ')) DCNL DCSP  DCSP  DCSP name = name.decode(encoding, 'strict') DCNL DCSP  DCSP  DCSP value = urllib.unquote(nv[1].replace('+', ' DCSP ')) DCNL DCSP  DCSP  DCSP value = value.decode(encoding, 'strict') DCNL DCSP  DCSP  DCSP if (name in d): DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(d[name], list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP d[name] = [d[name]] DCNL DCSP  DCSP  DCSP  DCSP d[name].append(value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP d[name] = value DCNL DCSP return d
def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'): DCNL  DCSP if image_map_pattern.match(query_string): DCNL DCSP  DCSP pm = query_string.split(',') DCNL DCSP  DCSP pm = {'x': int(pm[0]), 'y': int(pm[1])} DCNL DCSP else: DCNL DCSP  DCSP pm = _parse_qs(query_string, keep_blank_values, encoding=encoding) DCNL DCSP return pm
def check_auth(users, encrypt=None, realm=None): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if ('authorization' in request.headers): DCNL DCSP  DCSP ah = httpauth.parseAuthorization(request.headers['authorization']) DCNL DCSP  DCSP if (ah is None): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Bad DCSP Request') DCNL DCSP  DCSP if (not encrypt): DCNL DCSP  DCSP  DCSP encrypt = httpauth.DIGEST_AUTH_ENCODERS[httpauth.MD5] DCNL DCSP  DCSP if hasattr(users, '__call__'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP users = users() DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(users, dict)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError('Authentication DCSP users DCSP must DCSP be DCSP a DCSP dictionary') DCNL DCSP  DCSP  DCSP  DCSP password = users.get(ah['username'], None) DCNL DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP password = users(ah['username']) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not isinstance(users, dict)): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Authentication DCSP users DCSP must DCSP be DCSP a DCSP dictionary') DCNL DCSP  DCSP  DCSP password = users.get(ah['username'], None) DCNL DCSP  DCSP if httpauth.checkResponse(ah, password, method=request.method, encrypt=encrypt, realm=realm): DCNL DCSP  DCSP  DCSP request.login = ah['username'] DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP request.login = False DCNL DCSP return False
def basic_auth(realm, users, encrypt=None, debug=False): DCNL  DCSP if check_auth(users, encrypt): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Auth DCSP successful', 'TOOLS.BASIC_AUTH') DCNL DCSP  DCSP return DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = httpauth.basicAuth(realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def digest_auth(realm, users, debug=False): DCNL  DCSP if check_auth(users, realm=realm): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Auth DCSP successful', 'TOOLS.DIGEST_AUTH') DCNL DCSP  DCSP return DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = httpauth.digestAuth(realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def save(): DCNL  DCSP if (not hasattr(cherrypy.serving, 'session')): DCNL DCSP  DCSP return DCNL DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP if hasattr(request, '_sessionsaved'): DCNL DCSP  DCSP return DCNL DCSP request._sessionsaved = True DCNL DCSP if response.stream: DCNL DCSP  DCSP request.hooks.attach('on_end_request', cherrypy.session.save) DCNL DCSP else: DCNL DCSP  DCSP if isinstance(response.body, types.GeneratorType): DCNL DCSP  DCSP  DCSP response.collapse_body() DCNL DCSP  DCSP cherrypy.session.save()
def close(): DCNL  DCSP sess = getattr(cherrypy.serving, 'session', None) DCNL DCSP if getattr(sess, 'locked', False): DCNL DCSP  DCSP sess.release_lock()
def init(storage_type='ram', path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, clean_freq=5, persistent=True, debug=False, **kwargs): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if hasattr(request, '_session_init_flag'): DCNL DCSP  DCSP return DCNL DCSP request._session_init_flag = True DCNL DCSP id = None DCNL DCSP if (name in request.cookie): DCNL DCSP  DCSP id = request.cookie[name].value DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('ID DCSP obtained DCSP from DCSP request.cookie: DCSP %r' % id), 'TOOLS.SESSIONS') DCNL DCSP storage_class = (storage_type.title() + 'Session') DCNL DCSP storage_class = globals()[storage_class] DCNL DCSP if (not hasattr(cherrypy, 'session')): DCNL DCSP  DCSP if hasattr(storage_class, 'setup'): DCNL DCSP  DCSP  DCSP storage_class.setup(**kwargs) DCNL DCSP kwargs['timeout'] = timeout DCNL DCSP kwargs['clean_freq'] = clean_freq DCNL DCSP cherrypy.serving.session = sess = storage_class(id, **kwargs) DCNL DCSP sess.debug = debug DCNL DCSP def update_cookie(id): DCNL DCSP  DCSP 'Update DCSP the DCSP cookie DCSP every DCSP time DCSP the DCSP session DCSP id DCSP changes.' DCNL DCSP  DCSP cherrypy.serving.response.cookie[name] = id DCNL DCSP sess.id_observers.append(update_cookie) DCNL DCSP if (not hasattr(cherrypy, 'session')): DCNL DCSP  DCSP cherrypy.session = cherrypy._ThreadLocalProxy('session') DCNL DCSP if persistent: DCNL DCSP  DCSP cookie_timeout = timeout DCNL DCSP else: DCNL DCSP  DCSP cookie_timeout = None DCNL DCSP set_response_cookie(path=path, path_header=path_header, name=name, timeout=cookie_timeout, domain=domain, secure=secure)
def set_response_cookie(path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False): DCNL  DCSP cookie = cherrypy.serving.response.cookie DCNL DCSP cookie[name] = cherrypy.serving.session.id DCNL DCSP cookie[name]['path'] = (path or cherrypy.serving.request.headers.get(path_header) or '/') DCNL DCSP if timeout: DCNL DCSP  DCSP e = (time.time() + (timeout * 60)) DCNL DCSP  DCSP cookie[name]['expires'] = httputil.HTTPDate(e) DCNL DCSP if (domain is not None): DCNL DCSP  DCSP cookie[name]['domain'] = domain DCNL DCSP if secure: DCNL DCSP  DCSP cookie[name]['secure'] = 1
def expire(): DCNL  DCSP name = cherrypy.serving.request.config.get('tools.sessions.name', 'session_id') DCNL DCSP one_year = (((60 * 60) * 24) * 365) DCNL DCSP e = (time.time() - one_year) DCNL DCSP cherrypy.serving.response.cookie[name]['expires'] = httputil.HTTPDate(e)
def process_body(): DCNL  DCSP try: DCNL DCSP  DCSP import xmlrpclib DCNL DCSP  DCSP return xmlrpclib.loads(cherrypy.request.body.read()) DCNL DCSP except Exception: DCNL DCSP  DCSP return (('ERROR DCSP PARAMS',), 'ERRORMETHOD')
def patched_path(path): DCNL  DCSP if (not path.endswith('/')): DCNL DCSP  DCSP path += '/' DCNL DCSP if path.startswith('/RPC2/'): DCNL DCSP  DCSP path = path[5:] DCNL DCSP return path
def downgrade_wsgi_ux_to_1x(environ): DCNL  DCSP env1x = {} DCNL DCSP url_encoding = environ[u'wsgi.url_encoding'] DCNL DCSP for (k, v) in environ.items(): DCNL DCSP  DCSP if (k in [u'PATH_INFO', u'SCRIPT_NAME', u'QUERY_STRING']): DCNL DCSP  DCSP  DCSP v = v.encode(url_encoding) DCNL DCSP  DCSP elif isinstance(v, unicode): DCNL DCSP  DCSP  DCSP v = v.encode('ISO-8859-1') DCNL DCSP  DCSP env1x[k.encode('ISO-8859-1')] = v DCNL DCSP return env1x
def quickstart(root=None, script_name='', config=None): DCNL  DCSP if config: DCNL DCSP  DCSP _global_conf_alias.update(config) DCNL DCSP tree.mount(root, script_name, config) DCNL DCSP if hasattr(engine, 'signal_handler'): DCNL DCSP  DCSP engine.signal_handler.subscribe() DCNL DCSP if hasattr(engine, 'console_control_handler'): DCNL DCSP  DCSP engine.console_control_handler.subscribe() DCNL DCSP engine.start() DCNL DCSP engine.block()
def _cherrypy_pydoc_resolve(thing, forceload=0): DCNL  DCSP if isinstance(thing, _ThreadLocalProxy): DCNL DCSP  DCSP thing = getattr(serving, thing.__attrname__) DCNL DCSP return _pydoc._builtin_resolve(thing, forceload)
def expose(func=None, alias=None): DCNL  DCSP def expose_(func): DCNL DCSP  DCSP func.exposed = True DCNL DCSP  DCSP if (alias is not None): DCNL DCSP  DCSP  DCSP if isinstance(alias, basestring): DCNL DCSP  DCSP  DCSP  DCSP parents[alias.replace('.', '_')] = func DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for a in alias: DCNL DCSP  DCSP  DCSP  DCSP  DCSP parents[a.replace('.', '_')] = func DCNL DCSP  DCSP return func DCNL DCSP import sys, types DCNL DCSP if isinstance(func, (types.FunctionType, types.MethodType)): DCNL DCSP  DCSP if (alias is None): DCNL DCSP  DCSP  DCSP func.exposed = True DCNL DCSP  DCSP  DCSP return func DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_(func) DCNL DCSP elif (func is None): DCNL DCSP  DCSP if (alias is None): DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_ DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_ DCNL DCSP else: DCNL DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP alias = func DCNL DCSP  DCSP return expose_
def url(path='', qs='', script_name=None, base=None, relative=None): DCNL  DCSP if isinstance(qs, (tuple, list, dict)): DCNL DCSP  DCSP qs = _urlencode(qs) DCNL DCSP if qs: DCNL DCSP  DCSP qs = ('?' + qs) DCNL DCSP if request.app: DCNL DCSP  DCSP if (not path.startswith('/')): DCNL DCSP  DCSP  DCSP pi = request.path_info DCNL DCSP  DCSP  DCSP if (request.is_index is True): DCNL DCSP  DCSP  DCSP  DCSP if (not pi.endswith('/')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pi = (pi + '/') DCNL DCSP  DCSP  DCSP elif (request.is_index is False): DCNL DCSP  DCSP  DCSP  DCSP if (pi.endswith('/') and (pi != '/')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pi = pi[:(-1)] DCNL DCSP  DCSP  DCSP if (path == ''): DCNL DCSP  DCSP  DCSP  DCSP path = pi DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP path = _urljoin(pi, path) DCNL DCSP  DCSP if (script_name is None): DCNL DCSP  DCSP  DCSP script_name = request.script_name DCNL DCSP  DCSP if (base is None): DCNL DCSP  DCSP  DCSP base = request.base DCNL DCSP  DCSP newurl = (((base + script_name) + path) + qs) DCNL DCSP else: DCNL DCSP  DCSP if (base is None): DCNL DCSP  DCSP  DCSP base = server.base() DCNL DCSP  DCSP path = ((script_name or '') + path) DCNL DCSP  DCSP newurl = ((base + path) + qs) DCNL DCSP if ('./' in newurl): DCNL DCSP  DCSP atoms = [] DCNL DCSP  DCSP for atom in newurl.split('/'): DCNL DCSP  DCSP  DCSP if (atom == '.'): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP elif (atom == '..'): DCNL DCSP  DCSP  DCSP  DCSP atoms.pop() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP atoms.append(atom) DCNL DCSP  DCSP newurl = '/'.join(atoms) DCNL DCSP if (relative is None): DCNL DCSP  DCSP relative = getattr(request.app, 'relative_urls', False) DCNL DCSP if (relative == 'server'): DCNL DCSP  DCSP newurl = ('/' + '/'.join(newurl.split('/', 3)[3:])) DCNL DCSP elif relative: DCNL DCSP  DCSP old = url().split('/')[:(-1)] DCNL DCSP  DCSP new = newurl.split('/') DCNL DCSP  DCSP while (old and new): DCNL DCSP  DCSP  DCSP (a, b) = (old[0], new[0]) DCNL DCSP  DCSP  DCSP if (a != b): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP old.pop(0) DCNL DCSP  DCSP  DCSP new.pop(0) DCNL DCSP  DCSP new = ((['..'] * len(old)) + new) DCNL DCSP  DCSP newurl = '/'.join(new) DCNL DCSP return newurl
def merge(base, other): DCNL  DCSP if isinstance(other, basestring): DCNL DCSP  DCSP cherrypy.engine.autoreload.files.add(other) DCNL DCSP for (section, value_map) in reprconf.as_dict(other).items(): DCNL DCSP  DCSP if (not isinstance(value_map, dict)): DCNL DCSP  DCSP  DCSP raise ValueError("Application DCSP config DCSP must DCSP include DCSP section DCSP headers, DCSP but DCSP the DCSP config DCSP you DCSP tried DCSP to DCSP merge DCSP doesn't DCSP have DCSP any DCSP sections. DCSP Wrap DCSP your DCSP config DCSP in DCSP another DCSP dict DCSP with DCSP paths DCSP as DCSP section DCSP headers, DCSP for DCSP example: DCSP {'/': DCSP config}.") DCNL DCSP  DCSP base.setdefault(section, {}).update(value_map)
def _server_namespace_handler(k, v): DCNL  DCSP atoms = k.split('.', 1) DCNL DCSP if (len(atoms) > 1): DCNL DCSP  DCSP if (not hasattr(cherrypy, 'servers')): DCNL DCSP  DCSP  DCSP cherrypy.servers = {} DCNL DCSP  DCSP (servername, k) = atoms DCNL DCSP  DCSP if (servername not in cherrypy.servers): DCNL DCSP  DCSP  DCSP from cherrypy import _cpserver DCNL DCSP  DCSP  DCSP cherrypy.servers[servername] = _cpserver.Server() DCNL DCSP  DCSP  DCSP cherrypy.servers[servername].subscribe() DCNL DCSP  DCSP if (k == 'on'): DCNL DCSP  DCSP  DCSP if v: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.servers[servername].subscribe() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.servers[servername].unsubscribe() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP setattr(cherrypy.servers[servername], k, v) DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.server, k, v)
def _engine_namespace_handler(k, v): DCNL  DCSP engine = cherrypy.engine DCNL DCSP if (k == 'autoreload_on'): DCNL DCSP  DCSP if v: DCNL DCSP  DCSP  DCSP engine.autoreload.subscribe() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP engine.autoreload.unsubscribe() DCNL DCSP elif (k == 'autoreload_frequency'): DCNL DCSP  DCSP engine.autoreload.frequency = v DCNL DCSP elif (k == 'autoreload_match'): DCNL DCSP  DCSP engine.autoreload.match = v DCNL DCSP elif (k == 'reload_files'): DCNL DCSP  DCSP engine.autoreload.files = set(v) DCNL DCSP elif (k == 'deadlock_poll_freq'): DCNL DCSP  DCSP engine.timeout_monitor.frequency = v DCNL DCSP elif (k == 'SIGHUP'): DCNL DCSP  DCSP engine.listeners['SIGHUP'] = set([v]) DCNL DCSP elif (k == 'SIGTERM'): DCNL DCSP  DCSP engine.listeners['SIGTERM'] = set([v]) DCNL DCSP elif ('.' in k): DCNL DCSP  DCSP (plugin, attrname) = k.split('.', 1) DCNL DCSP  DCSP plugin = getattr(engine, plugin) DCNL DCSP  DCSP if (attrname == 'on'): DCNL DCSP  DCSP  DCSP if (v and hasattr(getattr(plugin, 'subscribe', None), '__call__')): DCNL DCSP  DCSP  DCSP  DCSP plugin.subscribe() DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP elif ((not v) and hasattr(getattr(plugin, 'unsubscribe', None), '__call__')): DCNL DCSP  DCSP  DCSP  DCSP plugin.unsubscribe() DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP setattr(plugin, attrname, v) DCNL DCSP else: DCNL DCSP  DCSP setattr(engine, k, v)
def _tree_namespace_handler(k, v): DCNL  DCSP cherrypy.tree.graft(v, v.script_name) DCNL DCSP cherrypy.engine.log(('Mounted: DCSP %s DCSP on DCSP %s' % (v, (v.script_name or '/'))))
def _getargs(func): DCNL  DCSP import types DCNL DCSP if isinstance(func, types.MethodType): DCNL DCSP  DCSP func = func.im_func DCNL DCSP co = func.func_code DCNL DCSP return co.co_varnames[:co.co_argcount]
def long_to_bytes(val, endianness='big'): DCNL  DCSP width = val.bit_length() DCNL DCSP width += (8 - ((width % 8) or 8)) DCNL DCSP fmt = ('%%0%dx' % (width // 4)) DCNL DCSP s = unhexlify((fmt % val)) DCNL DCSP if (endianness == 'little'): DCNL DCSP  DCSP s = s[::(-1)] DCNL DCSP return s
def dict_to_protobuf(pb_klass_or_instance, values, type_callable_map=REVERSE_TYPE_CALLABLE_MAP, strict=True): DCNL  DCSP if isinstance(pb_klass_or_instance, Message): DCNL DCSP  DCSP instance = pb_klass_or_instance DCNL DCSP else: DCNL DCSP  DCSP instance = pb_klass_or_instance() DCNL DCSP return _dict_to_protobuf(instance, values, type_callable_map, strict)
def bit_size(number): DCNL  DCSP return int(math.ceil(math.log(number, 2)))
def gcd(p, q): DCNL  DCSP while (q != 0): DCNL DCSP  DCSP if (p < q): DCNL DCSP  DCSP  DCSP (p, q) = (q, p) DCNL DCSP  DCSP (p, q) = (q, (p % q)) DCNL DCSP return p
def bytes2int(bytes): DCNL  DCSP if (not ((type(bytes) is types.ListType) or (type(bytes) is types.StringType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP string DCSP or DCSP a DCSP list') DCNL DCSP integer = 0 DCNL DCSP for byte in bytes: DCNL DCSP  DCSP integer *= 256 DCNL DCSP  DCSP if (type(byte) is types.StringType): DCNL DCSP  DCSP  DCSP byte = ord(byte) DCNL DCSP  DCSP integer += byte DCNL DCSP return integer
def int2bytes(number): DCNL  DCSP if (not ((type(number) is types.LongType) or (type(number) is types.IntType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP string = '' DCNL DCSP while (number > 0): DCNL DCSP  DCSP string = ('%s%s' % (byte((number & 255)), string)) DCNL DCSP  DCSP number /= 256 DCNL DCSP return string
def to64(number): DCNL  DCSP if (not ((type(number) is types.LongType) or (type(number) is types.IntType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP if (0 <= number <= 9): DCNL DCSP  DCSP return byte((number + 48)) DCNL DCSP if (10 <= number <= 35): DCNL DCSP  DCSP return byte((number + 55)) DCNL DCSP if (36 <= number <= 61): DCNL DCSP  DCSP return byte((number + 61)) DCNL DCSP if (number == 62): DCNL DCSP  DCSP return byte(45) DCNL DCSP if (number == 63): DCNL DCSP  DCSP return byte(95) DCNL DCSP raise ValueError(('Invalid DCSP Base64 DCSP value: DCSP %i' % number))
def from64(number): DCNL  DCSP if (not ((type(number) is types.LongType) or (type(number) is types.IntType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP if (48 <= number <= 57): DCNL DCSP  DCSP return (number - 48) DCNL DCSP if (65 <= number <= 90): DCNL DCSP  DCSP return (number - 55) DCNL DCSP if (97 <= number <= 122): DCNL DCSP  DCSP return (number - 61) DCNL DCSP if (number == 45): DCNL DCSP  DCSP return 62 DCNL DCSP if (number == 95): DCNL DCSP  DCSP return 63 DCNL DCSP raise ValueError(('Invalid DCSP Base64 DCSP value: DCSP %i' % number))
def int2str64(number): DCNL  DCSP if (not ((type(number) is types.LongType) or (type(number) is types.IntType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP string = '' DCNL DCSP while (number > 0): DCNL DCSP  DCSP string = ('%s%s' % (to64((number & 63)), string)) DCNL DCSP  DCSP number /= 64 DCNL DCSP return string
def str642int(string): DCNL  DCSP if (not ((type(string) is types.ListType) or (type(string) is types.StringType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP string DCSP or DCSP a DCSP list') DCNL DCSP integer = 0 DCNL DCSP for byte in string: DCNL DCSP  DCSP integer *= 64 DCNL DCSP  DCSP if (type(byte) is types.StringType): DCNL DCSP  DCSP  DCSP byte = ord(byte) DCNL DCSP  DCSP integer += from64(byte) DCNL DCSP return integer
def read_random_int(nbits): DCNL  DCSP nbytes = int(math.ceil((nbits / 8.0))) DCNL DCSP randomdata = os.urandom(nbytes) DCNL DCSP return bytes2int(randomdata)
def randint(minvalue, maxvalue): DCNL  DCSP min_nbits = 32 DCNL DCSP range = ((maxvalue - minvalue) + 1) DCNL DCSP rangebytes = ((bit_size(range) + 7) / 8) DCNL DCSP rangebits = max((rangebytes * 8), (min_nbits * 2)) DCNL DCSP nbits = random.randint(min_nbits, rangebits) DCNL DCSP return ((read_random_int(nbits) % range) + minvalue)
def jacobi(a, b): DCNL  DCSP if (a == 0): DCNL DCSP  DCSP return 0 DCNL DCSP result = 1 DCNL DCSP while (a > 1): DCNL DCSP  DCSP if (a & 1): DCNL DCSP  DCSP  DCSP if ((((a - 1) * (b - 1)) >> 2) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP (a, b) = ((b % a), a) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if ((((b * b) - 1) >> 3) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP a >>= 1 DCNL DCSP if (a == 0): DCNL DCSP  DCSP return 0 DCNL DCSP return result
def jacobi_witness(x, n): DCNL  DCSP j = (jacobi(x, n) % n) DCNL DCSP f = pow(x, ((n - 1) / 2), n) DCNL DCSP if (j == f): DCNL DCSP  DCSP return False DCNL DCSP return True
def randomized_primality_testing(n, k): DCNL  DCSP for i in range(k): DCNL DCSP  DCSP x = randint(1, (n - 1)) DCNL DCSP  DCSP if jacobi_witness(x, n): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def is_prime(number): DCNL  DCSP if randomized_primality_testing(number, 6): DCNL DCSP  DCSP return True DCNL DCSP return False
def getprime(nbits): DCNL  DCSP while True: DCNL DCSP  DCSP integer = read_random_int(nbits) DCNL DCSP  DCSP integer |= 1 DCNL DCSP  DCSP if is_prime(integer): DCNL DCSP  DCSP  DCSP break DCNL DCSP return integer
def are_relatively_prime(a, b): DCNL  DCSP d = gcd(a, b) DCNL DCSP return (d == 1)
def find_p_q(nbits): DCNL  DCSP pbits = (nbits + (nbits / 16)) DCNL DCSP qbits = (nbits - (nbits / 16)) DCNL DCSP p = getprime(pbits) DCNL DCSP while True: DCNL DCSP  DCSP q = getprime(qbits) DCNL DCSP  DCSP if (not (q == p)): DCNL DCSP  DCSP  DCSP break DCNL DCSP return (p, q)
def extended_gcd(a, b): DCNL  DCSP x = 0 DCNL DCSP y = 1 DCNL DCSP lx = 1 DCNL DCSP ly = 0 DCNL DCSP oa = a DCNL DCSP ob = b DCNL DCSP while (b != 0): DCNL DCSP  DCSP q = long((a / b)) DCNL DCSP  DCSP (a, b) = (b, (a % b)) DCNL DCSP  DCSP (x, lx) = ((lx - (q * x)), x) DCNL DCSP  DCSP (y, ly) = ((ly - (q * y)), y) DCNL DCSP if (lx < 0): DCNL DCSP  DCSP lx += ob DCNL DCSP if (ly < 0): DCNL DCSP  DCSP ly += oa DCNL DCSP return (a, lx, ly)
def calculate_keys(p, q, nbits): DCNL  DCSP n = (p * q) DCNL DCSP phi_n = ((p - 1) * (q - 1)) DCNL DCSP while True: DCNL DCSP  DCSP e = max(65537, getprime((nbits / 4))) DCNL DCSP  DCSP if (are_relatively_prime(e, n) and are_relatively_prime(e, phi_n)): DCNL DCSP  DCSP  DCSP break DCNL DCSP (d, i, j) = extended_gcd(e, phi_n) DCNL DCSP if (not (d == 1)): DCNL DCSP  DCSP raise Exception(('e DCSP (%d) DCSP and DCSP phi_n DCSP (%d) DCSP are DCSP not DCSP relatively DCSP prime' % (e, phi_n))) DCNL DCSP if (i < 0): DCNL DCSP  DCSP raise Exception("New DCSP extended_gcd DCSP shouldn't DCSP return DCSP negative DCSP values") DCNL DCSP if (not (((e * i) % phi_n) == 1)): DCNL DCSP  DCSP raise Exception(('e DCSP (%d) DCSP and DCSP i DCSP (%d) DCSP are DCSP not DCSP mult. DCSP inv. DCSP modulo DCSP phi_n DCSP (%d)' % (e, i, phi_n))) DCNL DCSP return (e, i)
def gen_keys(nbits): DCNL  DCSP (p, q) = find_p_q(nbits) DCNL DCSP (e, d) = calculate_keys(p, q, nbits) DCNL DCSP return (p, q, e, d)
def newkeys(nbits): DCNL  DCSP nbits = max(9, nbits) DCNL DCSP (p, q, e, d) = gen_keys(nbits) DCNL DCSP return ({'e': e, 'n': (p * q)}, {'d': d, 'p': p, 'q': q})
def encrypt_int(message, ekey, n): DCNL  DCSP if (type(message) is types.IntType): DCNL DCSP  DCSP message = long(message) DCNL DCSP if (not (type(message) is types.LongType)): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP int') DCNL DCSP if ((message < 0) or (message > n)): DCNL DCSP  DCSP raise OverflowError('The DCSP message DCSP is DCSP too DCSP long') DCNL DCSP safebit = (bit_size(n) - 2) DCNL DCSP message += (1 << safebit) DCNL DCSP return pow(message, ekey, n)
def decrypt_int(cyphertext, dkey, n): DCNL  DCSP message = pow(cyphertext, dkey, n) DCNL DCSP safebit = (bit_size(n) - 2) DCNL DCSP message -= (1 << safebit) DCNL DCSP return message
def encode64chops(chops): DCNL  DCSP chips = [] DCNL DCSP for value in chops: DCNL DCSP  DCSP chips.append(int2str64(value)) DCNL DCSP encoded = ','.join(chips) DCNL DCSP return encoded
def decode64chops(string): DCNL  DCSP chips = string.split(',') DCNL DCSP chops = [] DCNL DCSP for string in chips: DCNL DCSP  DCSP chops.append(str642int(string)) DCNL DCSP return chops
def chopstring(message, key, n, funcref): DCNL  DCSP msglen = len(message) DCNL DCSP mbits = (msglen * 8) DCNL DCSP nbits = (bit_size(n) - 2) DCNL DCSP nbytes = (nbits / 8) DCNL DCSP blocks = (msglen / nbytes) DCNL DCSP if ((msglen % nbytes) > 0): DCNL DCSP  DCSP blocks += 1 DCNL DCSP cypher = [] DCNL DCSP for bindex in range(blocks): DCNL DCSP  DCSP offset = (bindex * nbytes) DCNL DCSP  DCSP block = message[offset:(offset + nbytes)] DCNL DCSP  DCSP value = bytes2int(block) DCNL DCSP  DCSP cypher.append(funcref(value, key, n)) DCNL DCSP return encode64chops(cypher)
def gluechops(string, key, n, funcref): DCNL  DCSP message = '' DCNL DCSP chops = decode64chops(string) DCNL DCSP for cpart in chops: DCNL DCSP  DCSP mpart = funcref(cpart, key, n) DCNL DCSP  DCSP message += int2bytes(mpart) DCNL DCSP return message
def encrypt(message, key): DCNL  DCSP if ('n' not in key): DCNL DCSP  DCSP raise Exception('You DCSP must DCSP use DCSP the DCSP public DCSP key DCSP with DCSP encrypt') DCNL DCSP return chopstring(message, key['e'], key['n'], encrypt_int)
def sign(message, key): DCNL  DCSP if ('p' not in key): DCNL DCSP  DCSP raise Exception('You DCSP must DCSP use DCSP the DCSP private DCSP key DCSP with DCSP sign') DCNL DCSP return chopstring(message, key['d'], (key['p'] * key['q']), encrypt_int)
def decrypt(cypher, key): DCNL  DCSP if ('p' not in key): DCNL DCSP  DCSP raise Exception('You DCSP must DCSP use DCSP the DCSP private DCSP key DCSP with DCSP decrypt') DCNL DCSP return gluechops(cypher, key['d'], (key['p'] * key['q']), decrypt_int)
def verify(cypher, key): DCNL  DCSP if ('n' not in key): DCNL DCSP  DCSP raise Exception('You DCSP must DCSP use DCSP the DCSP public DCSP key DCSP with DCSP verify') DCNL DCSP return gluechops(cypher, key['e'], key['n'], decrypt_int)
def encrypt_int(message, ekey, n): DCNL  DCSP assert_int(message, 'message') DCNL DCSP assert_int(ekey, 'ekey') DCNL DCSP assert_int(n, 'n') DCNL DCSP if (message < 0): DCNL DCSP  DCSP raise ValueError('Only DCSP non-negative DCSP numbers DCSP are DCSP supported') DCNL DCSP if (message > n): DCNL DCSP  DCSP raise OverflowError(('The DCSP message DCSP %i DCSP is DCSP too DCSP long DCSP for DCSP n=%i' % (message, n))) DCNL DCSP return pow(message, ekey, n)
def decrypt_int(cyphertext, dkey, n): DCNL  DCSP assert_int(cyphertext, 'cyphertext') DCNL DCSP assert_int(dkey, 'dkey') DCNL DCSP assert_int(n, 'n') DCNL DCSP message = pow(cyphertext, dkey, n) DCNL DCSP return message
def read_varint(infile): DCNL  DCSP varint = 0 DCNL DCSP read_bytes = 0 DCNL DCSP while True: DCNL DCSP  DCSP char = infile.read(1) DCNL DCSP  DCSP if (len(char) == 0): DCNL DCSP  DCSP  DCSP if (read_bytes == 0): DCNL DCSP  DCSP  DCSP  DCSP return (0, 0) DCNL DCSP  DCSP  DCSP raise EOFError(('EOF DCSP while DCSP reading DCSP varint, DCSP value DCSP is DCSP %i DCSP so DCSP far' % varint)) DCNL DCSP  DCSP byte = ord(char) DCNL DCSP  DCSP varint += ((byte & 127) << (7 * read_bytes)) DCNL DCSP  DCSP read_bytes += 1 DCNL DCSP  DCSP if (not (byte & 128)): DCNL DCSP  DCSP  DCSP return (varint, read_bytes)
def write_varint(outfile, value): DCNL  DCSP if (value == 0): DCNL DCSP  DCSP outfile.write(ZERO_BYTE) DCNL DCSP  DCSP return 1 DCNL DCSP written_bytes = 0 DCNL DCSP while (value > 0): DCNL DCSP  DCSP to_write = (value & 127) DCNL DCSP  DCSP value = (value >> 7) DCNL DCSP  DCSP if (value > 0): DCNL DCSP  DCSP  DCSP to_write |= 128 DCNL DCSP  DCSP outfile.write(byte(to_write)) DCNL DCSP  DCSP written_bytes += 1 DCNL DCSP return written_bytes
def yield_varblocks(infile): DCNL  DCSP first_char = infile.read(1) DCNL DCSP if (len(first_char) == 0): DCNL DCSP  DCSP raise EOFError('Unable DCSP to DCSP read DCSP VARBLOCK DCSP version DCSP number') DCNL DCSP version = ord(first_char) DCNL DCSP if (version != VARBLOCK_VERSION): DCNL DCSP  DCSP raise ValueError(('VARBLOCK DCSP version DCSP %i DCSP not DCSP supported' % version)) DCNL DCSP while True: DCNL DCSP  DCSP (block_size, read_bytes) = read_varint(infile) DCNL DCSP  DCSP if ((read_bytes == 0) and (block_size == 0)): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP block = infile.read(block_size) DCNL DCSP  DCSP read_size = len(block) DCNL DCSP  DCSP if (read_size != block_size): DCNL DCSP  DCSP  DCSP raise EOFError(('Block DCSP size DCSP is DCSP %i, DCSP but DCSP could DCSP read DCSP only DCSP %i DCSP bytes' % (block_size, read_size))) DCNL DCSP  DCSP (yield block)
def yield_fixedblocks(infile, blocksize): DCNL  DCSP while True: DCNL DCSP  DCSP block = infile.read(blocksize) DCNL DCSP  DCSP read_bytes = len(block) DCNL DCSP  DCSP if (read_bytes == 0): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP (yield block) DCNL DCSP  DCSP if (read_bytes < blocksize): DCNL DCSP  DCSP  DCSP break
def _pad_for_encryption(message, target_length): DCNL  DCSP max_msglength = (target_length - 11) DCNL DCSP msglength = len(message) DCNL DCSP if (msglength > max_msglength): DCNL DCSP  DCSP raise OverflowError(('%i DCSP bytes DCSP needed DCSP for DCSP message, DCSP but DCSP there DCSP is DCSP only DCSP space DCSP for DCSP %i' % (msglength, max_msglength))) DCNL DCSP padding = b('') DCNL DCSP padding_length = ((target_length - msglength) - 3) DCNL DCSP while (len(padding) < padding_length): DCNL DCSP  DCSP needed_bytes = (padding_length - len(padding)) DCNL DCSP  DCSP new_padding = os.urandom((needed_bytes + 5)) DCNL DCSP  DCSP new_padding = new_padding.replace(b('\x00'), b('')) DCNL DCSP  DCSP padding = (padding + new_padding[:needed_bytes]) DCNL DCSP assert (len(padding) == padding_length) DCNL DCSP return b('').join([b('\x00\x02'), padding, b('\x00'), message])
def _pad_for_signing(message, target_length): DCNL  DCSP max_msglength = (target_length - 11) DCNL DCSP msglength = len(message) DCNL DCSP if (msglength > max_msglength): DCNL DCSP  DCSP raise OverflowError(('%i DCSP bytes DCSP needed DCSP for DCSP message, DCSP but DCSP there DCSP is DCSP only DCSP space DCSP for DCSP %i' % (msglength, max_msglength))) DCNL DCSP padding_length = ((target_length - msglength) - 3) DCNL DCSP return b('').join([b('\x00\x01'), (padding_length * b('\xff')), b('\x00'), message])
def encrypt(message, pub_key): DCNL  DCSP keylength = common.byte_size(pub_key.n) DCNL DCSP padded = _pad_for_encryption(message, keylength) DCNL DCSP payload = transform.bytes2int(padded) DCNL DCSP encrypted = core.encrypt_int(payload, pub_key.e, pub_key.n) DCNL DCSP block = transform.int2bytes(encrypted, keylength) DCNL DCSP return block
def decrypt(crypto, priv_key): DCNL  DCSP blocksize = common.byte_size(priv_key.n) DCNL DCSP encrypted = transform.bytes2int(crypto) DCNL DCSP decrypted = core.decrypt_int(encrypted, priv_key.d, priv_key.n) DCNL DCSP cleartext = transform.int2bytes(decrypted, blocksize) DCNL DCSP if (cleartext[0:2] != b('\x00\x02')): DCNL DCSP  DCSP raise DecryptionError('Decryption DCSP failed') DCNL DCSP try: DCNL DCSP  DCSP sep_idx = cleartext.index(b('\x00'), 2) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise DecryptionError('Decryption DCSP failed') DCNL DCSP return cleartext[(sep_idx + 1):]
def sign(message, priv_key, hash): DCNL  DCSP if (hash not in HASH_ASN1): DCNL DCSP  DCSP raise ValueError(('Invalid DCSP hash DCSP method: DCSP %s' % hash)) DCNL DCSP asn1code = HASH_ASN1[hash] DCNL DCSP hash = _hash(message, hash) DCNL DCSP cleartext = (asn1code + hash) DCNL DCSP keylength = common.byte_size(priv_key.n) DCNL DCSP padded = _pad_for_signing(cleartext, keylength) DCNL DCSP payload = transform.bytes2int(padded) DCNL DCSP encrypted = core.encrypt_int(payload, priv_key.d, priv_key.n) DCNL DCSP block = transform.int2bytes(encrypted, keylength) DCNL DCSP return block
def verify(message, signature, pub_key): DCNL  DCSP blocksize = common.byte_size(pub_key.n) DCNL DCSP encrypted = transform.bytes2int(signature) DCNL DCSP decrypted = core.decrypt_int(encrypted, pub_key.e, pub_key.n) DCNL DCSP clearsig = transform.int2bytes(decrypted, blocksize) DCNL DCSP if (clearsig[0:2] != b('\x00\x01')): DCNL DCSP  DCSP raise VerificationError('Verification DCSP failed') DCNL DCSP try: DCNL DCSP  DCSP sep_idx = clearsig.index(b('\x00'), 2) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise VerificationError('Verification DCSP failed') DCNL DCSP (method_name, signature_hash) = _find_method_hash(clearsig[(sep_idx + 1):]) DCNL DCSP message_hash = _hash(message, method_name) DCNL DCSP if (message_hash != signature_hash): DCNL DCSP  DCSP raise VerificationError('Verification DCSP failed')
def _hash(message, method_name): DCNL  DCSP if (method_name not in HASH_METHODS): DCNL DCSP  DCSP raise ValueError(('Invalid DCSP hash DCSP method: DCSP %s' % method_name)) DCNL DCSP method = HASH_METHODS[method_name] DCNL DCSP hasher = method() DCNL DCSP if (hasattr(message, 'read') and hasattr(message.read, '__call__')): DCNL DCSP  DCSP for block in varblock.yield_fixedblocks(message, 1024): DCNL DCSP  DCSP  DCSP hasher.update(block) DCNL DCSP else: DCNL DCSP  DCSP hasher.update(message) DCNL DCSP return hasher.digest()
def _find_method_hash(method_hash): DCNL  DCSP for (hashname, asn1code) in HASH_ASN1.items(): DCNL DCSP  DCSP if (not method_hash.startswith(asn1code)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP return (hashname, method_hash[len(asn1code):]) DCNL DCSP raise VerificationError('Verification DCSP failed')
def _markers(pem_marker): DCNL  DCSP if is_bytes(pem_marker): DCNL DCSP  DCSP pem_marker = pem_marker.decode('utf-8') DCNL DCSP return (b(('-----BEGIN DCSP %s-----' % pem_marker)), b(('-----END DCSP %s-----' % pem_marker)))
def load_pem(contents, pem_marker): DCNL  DCSP (pem_start, pem_end) = _markers(pem_marker) DCNL DCSP pem_lines = [] DCNL DCSP in_pem_part = False DCNL DCSP for line in contents.splitlines(): DCNL DCSP  DCSP line = line.strip() DCNL DCSP  DCSP if (not line): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (line == pem_start): DCNL DCSP  DCSP  DCSP if in_pem_part: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(('Seen DCSP start DCSP marker DCSP "%s" DCSP twice' % pem_start)) DCNL DCSP  DCSP  DCSP in_pem_part = True DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (not in_pem_part): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (in_pem_part and (line == pem_end)): DCNL DCSP  DCSP  DCSP in_pem_part = False DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (b(':') in line): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP pem_lines.append(line) DCNL DCSP if (not pem_lines): DCNL DCSP  DCSP raise ValueError(('No DCSP PEM DCSP start DCSP marker DCSP "%s" DCSP found' % pem_start)) DCNL DCSP if in_pem_part: DCNL DCSP  DCSP raise ValueError(('No DCSP PEM DCSP end DCSP marker DCSP "%s" DCSP found' % pem_end)) DCNL DCSP pem = b('').join(pem_lines) DCNL DCSP return base64.decodestring(pem)
def save_pem(contents, pem_marker): DCNL  DCSP (pem_start, pem_end) = _markers(pem_marker) DCNL DCSP b64 = base64.encodestring(contents).replace(b('\n'), b('')) DCNL DCSP pem_lines = [pem_start] DCNL DCSP for block_start in range(0, len(b64), 64): DCNL DCSP  DCSP block = b64[block_start:(block_start + 64)] DCNL DCSP  DCSP pem_lines.append(block) DCNL DCSP pem_lines.append(pem_end) DCNL DCSP pem_lines.append(b('')) DCNL DCSP return b('\n').join(pem_lines)
def keygen(): DCNL  DCSP parser = OptionParser(usage='usage: DCSP %prog DCSP [options] DCSP keysize', description='Generates DCSP a DCSP new DCSP RSA DCSP keypair DCSP of DCSP "keysize" DCSP bits.') DCNL DCSP parser.add_option('--pubout', type='string', help='Output DCSP filename DCSP for DCSP the DCSP public DCSP key. DCSP The DCSP public DCSP key DCSP is DCSP not DCSP saved DCSP if DCSP this DCSP option DCSP is DCSP not DCSP present. DCSP You DCSP can DCSP use DCSP pyrsa-priv2pub DCSP to DCSP create DCSP the DCSP public DCSP key DCSP file DCSP later.') DCNL DCSP parser.add_option('-o', '--out', type='string', help='Output DCSP filename DCSP for DCSP the DCSP private DCSP key. DCSP The DCSP key DCSP is DCSP written DCSP to DCSP stdout DCSP if DCSP this DCSP option DCSP is DCSP not DCSP present.') DCNL DCSP parser.add_option('--form', help='key DCSP format DCSP of DCSP the DCSP private DCSP and DCSP public DCSP keys DCSP - DCSP default DCSP PEM', choices=('PEM', 'DER'), default='PEM') DCNL DCSP (cli, cli_args) = parser.parse_args(sys.argv[1:]) DCNL DCSP if (len(cli_args) != 1): DCNL DCSP  DCSP parser.print_help() DCNL DCSP  DCSP raise SystemExit(1) DCNL DCSP try: DCNL DCSP  DCSP keysize = int(cli_args[0]) DCNL DCSP except ValueError: DCNL DCSP  DCSP parser.print_help() DCNL DCSP  DCSP print(('Not DCSP a DCSP valid DCSP number: DCSP %s' % cli_args[0]), file=sys.stderr) DCNL DCSP  DCSP raise SystemExit(1) DCNL DCSP print(('Generating DCSP %i-bit DCSP key' % keysize), file=sys.stderr) DCNL DCSP (pub_key, priv_key) = rsa.newkeys(keysize) DCNL DCSP if cli.pubout: DCNL DCSP  DCSP print(('Writing DCSP public DCSP key DCSP to DCSP %s' % cli.pubout), file=sys.stderr) DCNL DCSP  DCSP data = pub_key.save_pkcs1(format=cli.form) DCNL DCSP  DCSP with open(cli.pubout, 'wb') as outfile: DCNL DCSP  DCSP  DCSP outfile.write(data) DCNL DCSP data = priv_key.save_pkcs1(format=cli.form) DCNL DCSP if cli.out: DCNL DCSP  DCSP print(('Writing DCSP private DCSP key DCSP to DCSP %s' % cli.out), file=sys.stderr) DCNL DCSP  DCSP with open(cli.out, 'wb') as outfile: DCNL DCSP  DCSP  DCSP outfile.write(data) DCNL DCSP else: DCNL DCSP  DCSP print('Writing DCSP private DCSP key DCSP to DCSP stdout', file=sys.stderr) DCNL DCSP  DCSP sys.stdout.write(data)
def is_bytes(obj): DCNL  DCSP return isinstance(obj, bytes_type)
def is_integer(obj): DCNL  DCSP return isinstance(obj, integer_types)
def byte(num): DCNL  DCSP return pack('B', num)
def get_word_alignment(num, force_arch=64, _machine_word_size=MACHINE_WORD_SIZE): DCNL  DCSP max_uint64 = 18446744073709551615L DCNL DCSP max_uint32 = 4294967295 DCNL DCSP max_uint16 = 65535 DCNL DCSP max_uint8 = 255 DCNL DCSP if ((force_arch == 64) and (_machine_word_size >= 64) and (num > max_uint32)): DCNL DCSP  DCSP return (64, 8, max_uint64, 'Q') DCNL DCSP elif (num > max_uint16): DCNL DCSP  DCSP return (32, 4, max_uint32, 'L') DCNL DCSP elif (num > max_uint8): DCNL DCSP  DCSP return (16, 2, max_uint16, 'H') DCNL DCSP else: DCNL DCSP  DCSP return (8, 1, max_uint8, 'B')
def bytes2int(raw_bytes): DCNL  DCSP return int(binascii.hexlify(raw_bytes), 16)
def _int2bytes(number, block_size=None): DCNL  DCSP if (not is_integer(number)): DCNL DCSP  DCSP raise TypeError(("You DCSP must DCSP pass DCSP an DCSP integer DCSP for DCSP 'number', DCSP not DCSP %s" % number.__class__)) DCNL DCSP if (number < 0): DCNL DCSP  DCSP raise ValueError(('Negative DCSP numbers DCSP cannot DCSP be DCSP used: DCSP %i' % number)) DCNL DCSP if (number == 0): DCNL DCSP  DCSP needed_bytes = 1 DCNL DCSP  DCSP raw_bytes = [ZERO_BYTE] DCNL DCSP else: DCNL DCSP  DCSP needed_bytes = common.byte_size(number) DCNL DCSP  DCSP raw_bytes = [] DCNL DCSP if (block_size and (block_size > 0)): DCNL DCSP  DCSP if (needed_bytes > block_size): DCNL DCSP  DCSP  DCSP raise OverflowError(('Needed DCSP %i DCSP bytes DCSP for DCSP number, DCSP but DCSP block DCSP size DCSP is DCSP %i' % (needed_bytes, block_size))) DCNL DCSP while (number > 0): DCNL DCSP  DCSP raw_bytes.insert(0, byte((number & 255))) DCNL DCSP  DCSP number >>= 8 DCNL DCSP if (block_size and (block_size > 0)): DCNL DCSP  DCSP padding = ((block_size - needed_bytes) * ZERO_BYTE) DCNL DCSP else: DCNL DCSP  DCSP padding = EMPTY_BYTE DCNL DCSP return (padding + EMPTY_BYTE.join(raw_bytes))
def bytes_leading(raw_bytes, needle=ZERO_BYTE): DCNL  DCSP leading = 0 DCNL DCSP _byte = needle[0] DCNL DCSP for x in raw_bytes: DCNL DCSP  DCSP if (x == _byte): DCNL DCSP  DCSP  DCSP leading += 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP break DCNL DCSP return leading
def int2bytes(number, fill_size=None, chunk_size=None, overflow=False): DCNL  DCSP if (number < 0): DCNL DCSP  DCSP raise ValueError(('Number DCSP must DCSP be DCSP an DCSP unsigned DCSP integer: DCSP %d' % number)) DCNL DCSP if (fill_size and chunk_size): DCNL DCSP  DCSP raise ValueError('You DCSP can DCSP either DCSP fill DCSP or DCSP pad DCSP chunks, DCSP but DCSP not DCSP both') DCNL DCSP (number & 1) DCNL DCSP raw_bytes = b('') DCNL DCSP num = number DCNL DCSP (word_bits, _, max_uint, pack_type) = get_word_alignment(num) DCNL DCSP pack_format = ('>%s' % pack_type) DCNL DCSP while (num > 0): DCNL DCSP  DCSP raw_bytes = (pack(pack_format, (num & max_uint)) + raw_bytes) DCNL DCSP  DCSP num >>= word_bits DCNL DCSP zero_leading = bytes_leading(raw_bytes) DCNL DCSP if (number == 0): DCNL DCSP  DCSP raw_bytes = ZERO_BYTE DCNL DCSP raw_bytes = raw_bytes[zero_leading:] DCNL DCSP length = len(raw_bytes) DCNL DCSP if (fill_size and (fill_size > 0)): DCNL DCSP  DCSP if ((not overflow) and (length > fill_size)): DCNL DCSP  DCSP  DCSP raise OverflowError(('Need DCSP %d DCSP bytes DCSP for DCSP number, DCSP but DCSP fill DCSP size DCSP is DCSP %d' % (length, fill_size))) DCNL DCSP  DCSP raw_bytes = raw_bytes.rjust(fill_size, ZERO_BYTE) DCNL DCSP elif (chunk_size and (chunk_size > 0)): DCNL DCSP  DCSP remainder = (length % chunk_size) DCNL DCSP  DCSP if remainder: DCNL DCSP  DCSP  DCSP padding_size = (chunk_size - remainder) DCNL DCSP  DCSP  DCSP raw_bytes = raw_bytes.rjust((length + padding_size), ZERO_BYTE) DCNL DCSP return raw_bytes
def getprime(nbits, poolsize): DCNL  DCSP (pipe_recv, pipe_send) = mp.Pipe(duplex=False) DCNL DCSP procs = [mp.Process(target=_find_prime, args=(nbits, pipe_send)) for _ in range(poolsize)] DCNL DCSP [p.start() for p in procs] DCNL DCSP result = pipe_recv.recv() DCNL DCSP [p.terminate() for p in procs] DCNL DCSP return result
def encrypt_bigfile(infile, outfile, pub_key): DCNL  DCSP if (not isinstance(pub_key, key.PublicKey)): DCNL DCSP  DCSP raise TypeError(('Public DCSP key DCSP required, DCSP but DCSP got DCSP %r' % pub_key)) DCNL DCSP key_bytes = (common.bit_size(pub_key.n) // 8) DCNL DCSP blocksize = (key_bytes - 11) DCNL DCSP outfile.write(byte(varblock.VARBLOCK_VERSION)) DCNL DCSP for block in varblock.yield_fixedblocks(infile, blocksize): DCNL DCSP  DCSP crypto = pkcs1.encrypt(block, pub_key) DCNL DCSP  DCSP varblock.write_varint(outfile, len(crypto)) DCNL DCSP  DCSP outfile.write(crypto)
def decrypt_bigfile(infile, outfile, priv_key): DCNL  DCSP if (not isinstance(priv_key, key.PrivateKey)): DCNL DCSP  DCSP raise TypeError(('Private DCSP key DCSP required, DCSP but DCSP got DCSP %r' % priv_key)) DCNL DCSP for block in varblock.yield_varblocks(infile): DCNL DCSP  DCSP cleartext = pkcs1.decrypt(block, priv_key) DCNL DCSP  DCSP outfile.write(cleartext)
def read_random_bits(nbits): DCNL  DCSP (nbytes, rbits) = divmod(nbits, 8) DCNL DCSP randomdata = os.urandom(nbytes) DCNL DCSP if (rbits > 0): DCNL DCSP  DCSP randomvalue = ord(os.urandom(1)) DCNL DCSP  DCSP randomvalue >>= (8 - rbits) DCNL DCSP  DCSP randomdata = (byte(randomvalue) + randomdata) DCNL DCSP return randomdata
def read_random_int(nbits): DCNL  DCSP randomdata = read_random_bits(nbits) DCNL DCSP value = transform.bytes2int(randomdata) DCNL DCSP value |= (1 << (nbits - 1)) DCNL DCSP return value
def randint(maxvalue): DCNL  DCSP bit_size = common.bit_size(maxvalue) DCNL DCSP tries = 0 DCNL DCSP while True: DCNL DCSP  DCSP value = read_random_int(bit_size) DCNL DCSP  DCSP if (value <= maxvalue): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (tries and ((tries % 10) == 0)): DCNL DCSP  DCSP  DCSP bit_size -= 1 DCNL DCSP  DCSP tries += 1 DCNL DCSP return value
def bit_size(num): DCNL  DCSP if (num == 0): DCNL DCSP  DCSP return 0 DCNL DCSP if (num < 0): DCNL DCSP  DCSP num = (- num) DCNL DCSP (num & 1) DCNL DCSP hex_num = ('%x' % num) DCNL DCSP return (((len(hex_num) - 1) * 4) + {'0': 0, '1': 1, '2': 2, '3': 2, '4': 3, '5': 3, '6': 3, '7': 3, '8': 4, '9': 4, 'a': 4, 'b': 4, 'c': 4, 'd': 4, 'e': 4, 'f': 4}[hex_num[0]])
def _bit_size(number): DCNL  DCSP if (number < 0): DCNL DCSP  DCSP raise ValueError(('Only DCSP nonnegative DCSP numbers DCSP possible: DCSP %s' % number)) DCNL DCSP if (number == 0): DCNL DCSP  DCSP return 0 DCNL DCSP bits = 0 DCNL DCSP while number: DCNL DCSP  DCSP bits += 1 DCNL DCSP  DCSP number >>= 1 DCNL DCSP return bits
def byte_size(number): DCNL  DCSP (quanta, mod) = divmod(bit_size(number), 8) DCNL DCSP if (mod or (number == 0)): DCNL DCSP  DCSP quanta += 1 DCNL DCSP return quanta
def extended_gcd(a, b): DCNL  DCSP x = 0 DCNL DCSP y = 1 DCNL DCSP lx = 1 DCNL DCSP ly = 0 DCNL DCSP oa = a DCNL DCSP ob = b DCNL DCSP while (b != 0): DCNL DCSP  DCSP q = (a // b) DCNL DCSP  DCSP (a, b) = (b, (a % b)) DCNL DCSP  DCSP (x, lx) = ((lx - (q * x)), x) DCNL DCSP  DCSP (y, ly) = ((ly - (q * y)), y) DCNL DCSP if (lx < 0): DCNL DCSP  DCSP lx += ob DCNL DCSP if (ly < 0): DCNL DCSP  DCSP ly += oa DCNL DCSP return (a, lx, ly)
def inverse(x, n): DCNL  DCSP (divider, inv, _) = extended_gcd(x, n) DCNL DCSP if (divider != 1): DCNL DCSP  DCSP raise ValueError(('x DCSP (%d) DCSP and DCSP n DCSP (%d) DCSP are DCSP not DCSP relatively DCSP prime' % (x, n))) DCNL DCSP return inv
def crt(a_values, modulo_values): DCNL  DCSP m = 1 DCNL DCSP x = 0 DCNL DCSP for modulo in modulo_values: DCNL DCSP  DCSP m *= modulo DCNL DCSP for (m_i, a_i) in zip(modulo_values, a_values): DCNL DCSP  DCSP M_i = (m // m_i) DCNL DCSP  DCSP inv = inverse(M_i, m_i) DCNL DCSP  DCSP x = ((x + ((a_i * M_i) * inv)) % m) DCNL DCSP return x
def gcd(p, q): DCNL  DCSP while (q != 0): DCNL DCSP  DCSP if (p < q): DCNL DCSP  DCSP  DCSP (p, q) = (q, p) DCNL DCSP  DCSP (p, q) = (q, (p % q)) DCNL DCSP return p
def jacobi(a, b): DCNL  DCSP assert (a > 0) DCNL DCSP assert (b > 0) DCNL DCSP if (a == 0): DCNL DCSP  DCSP return 0 DCNL DCSP result = 1 DCNL DCSP while (a > 1): DCNL DCSP  DCSP if (a & 1): DCNL DCSP  DCSP  DCSP if ((((a - 1) * (b - 1)) >> 2) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP (a, b) = ((b % a), a) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if ((((b * b) - 1) >> 3) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP a >>= 1 DCNL DCSP if (a == 0): DCNL DCSP  DCSP return 0 DCNL DCSP return result
def jacobi_witness(x, n): DCNL  DCSP j = (jacobi(x, n) % n) DCNL DCSP f = pow(x, (n >> 1), n) DCNL DCSP if (j == f): DCNL DCSP  DCSP return False DCNL DCSP return True
def randomized_primality_testing(n, k): DCNL  DCSP for _ in range(k): DCNL DCSP  DCSP x = rsa.randnum.randint((n - 1)) DCNL DCSP  DCSP if jacobi_witness(x, n): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def is_prime(number): DCNL  DCSP return randomized_primality_testing(number, 6)
def getprime(nbits): DCNL  DCSP while True: DCNL DCSP  DCSP integer = rsa.randnum.read_random_int(nbits) DCNL DCSP  DCSP integer |= 1 DCNL DCSP  DCSP if is_prime(integer): DCNL DCSP  DCSP  DCSP return integer
def are_relatively_prime(a, b): DCNL  DCSP d = gcd(a, b) DCNL DCSP return (d == 1)
def find_p_q(nbits, getprime_func=rsa.prime.getprime, accurate=True): DCNL  DCSP total_bits = (nbits * 2) DCNL DCSP shift = (nbits // 16) DCNL DCSP pbits = (nbits + shift) DCNL DCSP qbits = (nbits - shift) DCNL DCSP log.debug('find_p_q(%i): DCSP Finding DCSP p', nbits) DCNL DCSP p = getprime_func(pbits) DCNL DCSP log.debug('find_p_q(%i): DCSP Finding DCSP q', nbits) DCNL DCSP q = getprime_func(qbits) DCNL DCSP def is_acceptable(p, q): DCNL DCSP  DCSP 'Returns DCSP True DCSP iff DCSP p DCSP and DCSP q DCSP are DCSP acceptable:\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP \n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP - DCSP p DCSP and DCSP q DCSP differ\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP - DCSP (p DCSP * DCSP q) DCSP has DCSP the DCSP right DCSP nr DCSP of DCSP bits DCSP (when DCSP accurate=True)\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP if (p == q): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if (not accurate): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP found_size = rsa.common.bit_size((p * q)) DCNL DCSP  DCSP return (total_bits == found_size) DCNL DCSP change_p = False DCNL DCSP while (not is_acceptable(p, q)): DCNL DCSP  DCSP if change_p: DCNL DCSP  DCSP  DCSP p = getprime_func(pbits) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP q = getprime_func(qbits) DCNL DCSP  DCSP change_p = (not change_p) DCNL DCSP return (max(p, q), min(p, q))
def calculate_keys(p, q, nbits): DCNL  DCSP phi_n = ((p - 1) * (q - 1)) DCNL DCSP e = 65537 DCNL DCSP try: DCNL DCSP  DCSP d = rsa.common.inverse(e, phi_n) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ValueError(('e DCSP (%d) DCSP and DCSP phi_n DCSP (%d) DCSP are DCSP not DCSP relatively DCSP prime' % (e, phi_n))) DCNL DCSP if (((e * d) % phi_n) != 1): DCNL DCSP  DCSP raise ValueError(('e DCSP (%d) DCSP and DCSP d DCSP (%d) DCSP are DCSP not DCSP mult. DCSP inv. DCSP modulo DCSP phi_n DCSP (%d)' % (e, d, phi_n))) DCNL DCSP return (e, d)
def gen_keys(nbits, getprime_func, accurate=True): DCNL  DCSP (p, q) = find_p_q((nbits // 2), getprime_func, accurate) DCNL DCSP (e, d) = calculate_keys(p, q, (nbits // 2)) DCNL DCSP return (p, q, e, d)
def newkeys(nbits, accurate=True, poolsize=1): DCNL  DCSP if (nbits < 16): DCNL DCSP  DCSP raise ValueError('Key DCSP too DCSP small') DCNL DCSP if (poolsize < 1): DCNL DCSP  DCSP raise ValueError(('Pool DCSP size DCSP (%i) DCSP should DCSP be DCSP >= DCSP 1' % poolsize)) DCNL DCSP if (poolsize > 1): DCNL DCSP  DCSP from rsa import parallel DCNL DCSP  DCSP import functools DCNL DCSP  DCSP getprime_func = functools.partial(parallel.getprime, poolsize=poolsize) DCNL DCSP else: DCNL DCSP  DCSP getprime_func = rsa.prime.getprime DCNL DCSP (p, q, e, d) = gen_keys(nbits, getprime_func) DCNL DCSP n = (p * q) DCNL DCSP return (PublicKey(n, e), PrivateKey(n, e, d, p, q))
def gcd(p, q): DCNL  DCSP if (p < q): DCNL DCSP  DCSP return gcd(q, p) DCNL DCSP if (q == 0): DCNL DCSP  DCSP return p DCNL DCSP return gcd(q, abs((p % q)))
def bytes2int(bytes): DCNL  DCSP if (not ((type(bytes) is types.ListType) or (type(bytes) is types.StringType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP string DCSP or DCSP a DCSP list') DCNL DCSP integer = 0 DCNL DCSP for byte in bytes: DCNL DCSP  DCSP integer *= 256 DCNL DCSP  DCSP if (type(byte) is types.StringType): DCNL DCSP  DCSP  DCSP byte = ord(byte) DCNL DCSP  DCSP integer += byte DCNL DCSP return integer
def int2bytes(number): DCNL  DCSP if (not ((type(number) is types.LongType) or (type(number) is types.IntType))): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP string = '' DCNL DCSP while (number > 0): DCNL DCSP  DCSP string = ('%s%s' % (byte((number & 255)), string)) DCNL DCSP  DCSP number /= 256 DCNL DCSP return string
def fast_exponentiation(a, p, n): DCNL  DCSP result = (a % n) DCNL DCSP remainders = [] DCNL DCSP while (p != 1): DCNL DCSP  DCSP remainders.append((p & 1)) DCNL DCSP  DCSP p = (p >> 1) DCNL DCSP while remainders: DCNL DCSP  DCSP rem = remainders.pop() DCNL DCSP  DCSP result = (((a ** rem) * (result ** 2)) % n) DCNL DCSP return result
def read_random_int(nbits): DCNL  DCSP nbytes = ceil((nbits / 8.0)) DCNL DCSP randomdata = os.urandom(nbytes) DCNL DCSP return bytes2int(randomdata)
def ceil(x): DCNL  DCSP return int(math.ceil(x))
def randint(minvalue, maxvalue): DCNL  DCSP min_nbits = 32 DCNL DCSP range = (maxvalue - minvalue) DCNL DCSP rangebytes = ceil((math.log(range, 2) / 8.0)) DCNL DCSP rangebits = max((rangebytes * 8), (min_nbits * 2)) DCNL DCSP nbits = random.randint(min_nbits, rangebits) DCNL DCSP return ((read_random_int(nbits) % range) + minvalue)
def fermat_little_theorem(p): DCNL  DCSP a = randint(1, (p - 1)) DCNL DCSP return fast_exponentiation(a, (p - 1), p)
def jacobi(a, b): DCNL  DCSP if ((a % b) == 0): DCNL DCSP  DCSP return 0 DCNL DCSP result = 1 DCNL DCSP while (a > 1): DCNL DCSP  DCSP if (a & 1): DCNL DCSP  DCSP  DCSP if ((((a - 1) * (b - 1)) >> 2) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP (b, a) = (a, (b % a)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if ((((b ** 2) - 1) >> 3) & 1): DCNL DCSP  DCSP  DCSP  DCSP result = (- result) DCNL DCSP  DCSP  DCSP a = (a >> 1) DCNL DCSP return result
def jacobi_witness(x, n): DCNL  DCSP j = (jacobi(x, n) % n) DCNL DCSP f = fast_exponentiation(x, ((n - 1) / 2), n) DCNL DCSP if (j == f): DCNL DCSP  DCSP return False DCNL DCSP return True
def randomized_primality_testing(n, k): DCNL  DCSP q = 0.5 DCNL DCSP t = ceil((k / math.log((1 / q), 2))) DCNL DCSP for i in range((t + 1)): DCNL DCSP  DCSP x = randint(1, (n - 1)) DCNL DCSP  DCSP if jacobi_witness(x, n): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def is_prime(number): DCNL  DCSP "\n DCSP  DCSP  DCSP  DCSP if DCSP not DCSP fermat_little_theorem(number) DCSP == DCSP 1:\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP # DCSP Not DCSP prime, DCSP according DCSP to DCSP Fermat's DCSP little DCSP theorem\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return DCSP False\n DCSP  DCSP  DCSP  DCSP " DCNL DCSP if randomized_primality_testing(number, 5): DCNL DCSP  DCSP return True DCNL DCSP return False
def getprime(nbits): DCNL  DCSP nbytes = int(math.ceil((nbits / 8.0))) DCNL DCSP while True: DCNL DCSP  DCSP integer = read_random_int(nbits) DCNL DCSP  DCSP integer |= 1 DCNL DCSP  DCSP if is_prime(integer): DCNL DCSP  DCSP  DCSP break DCNL DCSP return integer
def are_relatively_prime(a, b): DCNL  DCSP d = gcd(a, b) DCNL DCSP return (d == 1)
def find_p_q(nbits): DCNL  DCSP p = getprime(nbits) DCNL DCSP while True: DCNL DCSP  DCSP q = getprime(nbits) DCNL DCSP  DCSP if (not (q == p)): DCNL DCSP  DCSP  DCSP break DCNL DCSP return (p, q)
def extended_euclid_gcd(a, b): DCNL  DCSP if (b == 0): DCNL DCSP  DCSP return (a, 1, 0) DCNL DCSP q = abs((a % b)) DCNL DCSP r = long((a / b)) DCNL DCSP (d, k, l) = extended_euclid_gcd(b, q) DCNL DCSP return (d, l, (k - (l * r)))
def calculate_keys(p, q, nbits): DCNL  DCSP n = (p * q) DCNL DCSP phi_n = ((p - 1) * (q - 1)) DCNL DCSP while True: DCNL DCSP  DCSP e = getprime(max(8, (nbits / 2))) DCNL DCSP  DCSP if (are_relatively_prime(e, n) and are_relatively_prime(e, phi_n)): DCNL DCSP  DCSP  DCSP break DCNL DCSP (d, i, j) = extended_euclid_gcd(e, phi_n) DCNL DCSP if (not (d == 1)): DCNL DCSP  DCSP raise Exception(('e DCSP (%d) DCSP and DCSP phi_n DCSP (%d) DCSP are DCSP not DCSP relatively DCSP prime' % (e, phi_n))) DCNL DCSP if (not (((e * i) % phi_n) == 1)): DCNL DCSP  DCSP raise Exception(('e DCSP (%d) DCSP and DCSP i DCSP (%d) DCSP are DCSP not DCSP mult. DCSP inv. DCSP modulo DCSP phi_n DCSP (%d)' % (e, i, phi_n))) DCNL DCSP return (e, i)
def gen_keys(nbits): DCNL  DCSP while True: DCNL DCSP  DCSP (p, q) = find_p_q(nbits) DCNL DCSP  DCSP (e, d) = calculate_keys(p, q, nbits) DCNL DCSP  DCSP if (d > 0): DCNL DCSP  DCSP  DCSP break DCNL DCSP return (p, q, e, d)
def gen_pubpriv_keys(nbits): DCNL  DCSP (p, q, e, d) = gen_keys(nbits) DCNL DCSP return ({'e': e, 'n': (p * q)}, {'d': d, 'p': p, 'q': q})
def encrypt_int(message, ekey, n): DCNL  DCSP if (type(message) is types.IntType): DCNL DCSP  DCSP return encrypt_int(long(message), ekey, n) DCNL DCSP if (not (type(message) is types.LongType)): DCNL DCSP  DCSP raise TypeError('You DCSP must DCSP pass DCSP a DCSP long DCSP or DCSP an DCSP int') DCNL DCSP if ((message > 0) and (math.floor(math.log(message, 2)) > math.floor(math.log(n, 2)))): DCNL DCSP  DCSP raise OverflowError('The DCSP message DCSP is DCSP too DCSP long') DCNL DCSP return fast_exponentiation(message, ekey, n)
def decrypt_int(cyphertext, dkey, n): DCNL  DCSP return encrypt_int(cyphertext, dkey, n)
def sign_int(message, dkey, n): DCNL  DCSP return decrypt_int(message, dkey, n)
def verify_int(signed, ekey, n): DCNL  DCSP return encrypt_int(signed, ekey, n)
def picklechops(chops): DCNL  DCSP value = zlib.compress(dumps(chops)) DCNL DCSP encoded = base64.encodestring(value) DCNL DCSP return encoded.strip()
def unpicklechops(string): DCNL  DCSP return loads(zlib.decompress(base64.decodestring(string)))
def chopstring(message, key, n, funcref): DCNL  DCSP msglen = len(message) DCNL DCSP mbits = (msglen * 8) DCNL DCSP nbits = int(math.floor(math.log(n, 2))) DCNL DCSP nbytes = (nbits / 8) DCNL DCSP blocks = (msglen / nbytes) DCNL DCSP if ((msglen % nbytes) > 0): DCNL DCSP  DCSP blocks += 1 DCNL DCSP cypher = [] DCNL DCSP for bindex in range(blocks): DCNL DCSP  DCSP offset = (bindex * nbytes) DCNL DCSP  DCSP block = message[offset:(offset + nbytes)] DCNL DCSP  DCSP value = bytes2int(block) DCNL DCSP  DCSP cypher.append(funcref(value, key, n)) DCNL DCSP return picklechops(cypher)
def gluechops(chops, key, n, funcref): DCNL  DCSP message = '' DCNL DCSP chops = unpicklechops(chops) DCNL DCSP for cpart in chops: DCNL DCSP  DCSP mpart = funcref(cpart, key, n) DCNL DCSP  DCSP message += int2bytes(mpart) DCNL DCSP return message
def encrypt(message, key): DCNL  DCSP return chopstring(message, key['e'], key['n'], encrypt_int)
def sign(message, key): DCNL  DCSP return chopstring(message, key['d'], (key['p'] * key['q']), decrypt_int)
def decrypt(cypher, key): DCNL  DCSP return gluechops(cypher, key['d'], (key['p'] * key['q']), decrypt_int)
def verify(cypher, key): DCNL  DCSP return gluechops(cypher, key['e'], key['n'], encrypt_int)
def private_to_public(): DCNL  DCSP parser = OptionParser(usage='usage: DCSP %prog DCSP [options]', description='Reads DCSP a DCSP private DCSP key DCSP and DCSP outputs DCSP the DCSP corresponding DCSP public DCSP key. DCSP Both DCSP private DCSP and DCSP public DCSP keys DCSP use DCSP the DCSP format DCSP described DCSP in DCSP PKCS#1 DCSP v1.5') DCNL DCSP parser.add_option('-i', '--input', dest='infilename', type='string', help='Input DCSP filename. DCSP Reads DCSP from DCSP stdin DCSP if DCSP not DCSP specified') DCNL DCSP parser.add_option('-o', '--output', dest='outfilename', type='string', help='Output DCSP filename. DCSP Writes DCSP to DCSP stdout DCSP of DCSP not DCSP specified') DCNL DCSP parser.add_option('--inform', dest='inform', help='key DCSP format DCSP of DCSP input DCSP - DCSP default DCSP PEM', choices=('PEM', 'DER'), default='PEM') DCNL DCSP parser.add_option('--outform', dest='outform', help='key DCSP format DCSP of DCSP output DCSP - DCSP default DCSP PEM', choices=('PEM', 'DER'), default='PEM') DCNL DCSP (cli, cli_args) = parser.parse_args(sys.argv) DCNL DCSP if cli.infilename: DCNL DCSP  DCSP print >>sys.stderr, ('Reading DCSP private DCSP key DCSP from DCSP %s DCSP in DCSP %s DCSP format' % (cli.infilename, cli.inform)) DCNL DCSP  DCSP with open(cli.infilename) as infile: DCNL DCSP  DCSP  DCSP in_data = infile.read() DCNL DCSP else: DCNL DCSP  DCSP print >>sys.stderr, ('Reading DCSP private DCSP key DCSP from DCSP stdin DCSP in DCSP %s DCSP format' % cli.inform) DCNL DCSP  DCSP in_data = sys.stdin.read() DCNL DCSP priv_key = rsa.key.PrivateKey.load_pkcs1(in_data, cli.inform) DCNL DCSP pub_key = rsa.key.PublicKey(priv_key.n, priv_key.e) DCNL DCSP out_data = pub_key.save_pkcs1(cli.outform) DCNL DCSP if cli.outfilename: DCNL DCSP  DCSP print >>sys.stderr, ('Writing DCSP public DCSP key DCSP to DCSP %s DCSP in DCSP %s DCSP format' % (cli.outfilename, cli.outform)) DCNL DCSP  DCSP with open(cli.outfilename, 'w') as outfile: DCNL DCSP  DCSP  DCSP outfile.write(out_data) DCNL DCSP else: DCNL DCSP  DCSP print >>sys.stderr, ('Writing DCSP public DCSP key DCSP to DCSP stdout DCSP in DCSP %s DCSP format' % cli.outform) DCNL DCSP  DCSP sys.stdout.write(out_data)
def smart_truncate(string, max_length=0, word_boundaries=False, separator=' DCSP '): DCNL  DCSP string = string.strip(separator) DCNL DCSP if (not max_length): DCNL DCSP  DCSP return string DCNL DCSP if (len(string) < max_length): DCNL DCSP  DCSP return string DCNL DCSP if (not word_boundaries): DCNL DCSP  DCSP return string[:max_length].strip(separator) DCNL DCSP if (separator not in string): DCNL DCSP  DCSP return string[:max_length] DCNL DCSP truncated = '' DCNL DCSP for word in string.split(separator): DCNL DCSP  DCSP if word: DCNL DCSP  DCSP  DCSP next_len = ((len(truncated) + len(word)) + len(separator)) DCNL DCSP  DCSP  DCSP if (next_len <= max_length): DCNL DCSP  DCSP  DCSP  DCSP truncated += '{0}{1}'.format(word, separator) DCNL DCSP if (not truncated): DCNL DCSP  DCSP truncated = string[:max_length] DCNL DCSP return truncated.strip(separator)
def slugify(text, entities=True, decimal=True, hexadecimal=True, max_length=0, word_boundary=False, separator='-'): DCNL  DCSP if (not isinstance(text, types.UnicodeType)): DCNL DCSP  DCSP text = unicode(text, 'utf-8', 'ignore') DCNL DCSP text = unidecode(text) DCNL DCSP if (not isinstance(text, types.UnicodeType)): DCNL DCSP  DCSP text = unicode(text, 'utf-8', 'ignore') DCNL DCSP if entities: DCNL DCSP  DCSP text = CHAR_ENTITY_REXP.sub((lambda m: unichr(name2codepoint[m.group(1)])), text) DCNL DCSP if decimal: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP text = DECIMAL_REXP.sub((lambda m: unichr(int(m.group(1)))), text) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP pass DCNL DCSP if hexadecimal: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP text = HEX_REXP.sub((lambda m: unichr(int(m.group(1), 16))), text) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP pass DCNL DCSP text = unicodedata.normalize('NFKD', text) DCNL DCSP if (sys.version_info < (3,)): DCNL DCSP  DCSP text = text.encode('ascii', 'ignore') DCNL DCSP text = REPLACE1_REXP.sub('', text.lower()) DCNL DCSP text = REPLACE2_REXP.sub('-', text.lower()) DCNL DCSP text = REMOVE_REXP.sub('-', text).strip('-') DCNL DCSP if (max_length > 0): DCNL DCSP  DCSP text = smart_truncate(text, max_length, word_boundary, '-') DCNL DCSP if (separator != '-'): DCNL DCSP  DCSP text = text.replace('-', separator) DCNL DCSP return text
def central_server_down_or_error(error_msg): DCNL  DCSP if error_msg: DCNL DCSP  DCSP from kalite.version import user_agent DCNL DCSP  DCSP if (requests.get(settings.CENTRAL_SERVER_URL, headers={'user-agent': user_agent()}).status_code != 200): DCNL DCSP  DCSP  DCSP return {'error_msg': _('Central DCSP Server DCSP is DCSP not DCSP reachable; DCSP please DCSP try DCSP again DCSP after DCSP some DCSP time.')} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return {'error_msg': error_msg}
@allow_jsonp DCNL def register_public_key_server_auto(request): DCNL  DCSP public_key = urllib.unquote(request.GET.get('device_key', '')) DCNL DCSP if RegisteredDevicePublicKey.objects.filter(public_key=public_key): DCNL DCSP  DCSP return HttpResponseForbidden('Device DCSP is DCSP already DCSP registered.') DCNL DCSP zone = Zone(name=('Zone DCSP for DCSP public DCSP key DCSP %s' % public_key[:50])) DCNL DCSP zone.save() DCNL DCSP RegisteredDevicePublicKey(zone=zone, public_key=public_key).save() DCNL DCSP return JsonResponse({})
@csrf_exempt DCNL def register_device(request): DCNL  DCSP data = simplejson.loads((request.body or '{}')) DCNL DCSP if ('client_device' not in data): DCNL DCSP  DCSP return JsonResponseMessageError('Serialized DCSP client DCSP device DCSP must DCSP be DCSP provided.', status=400) DCNL DCSP try: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP local_version = Device.get_own_device().get_version() DCNL DCSP  DCSP  DCSP models = deserialize(data['client_device'], src_version=local_version, dest_version=local_version) DCNL DCSP  DCSP except db_models.FieldDoesNotExist as fdne: DCNL DCSP  DCSP  DCSP raise Exception('Central DCSP server DCSP version DCSP is DCSP lower DCSP than DCSP client DCSP version. DCSP  DCSP This DCSP is DCSP ... DCSP impossible!') DCNL DCSP  DCSP client_device = models.next().object DCNL DCSP except Exception as e: DCNL DCSP  DCSP return JsonResponseMessageError(('Could DCSP not DCSP decode DCSP the DCSP client DCSP device DCSP model: DCSP %s' % e), code=EC.CLIENT_DEVICE_CORRUPTED, status=400) DCNL DCSP if (not isinstance(client_device, Device)): DCNL DCSP  DCSP return JsonResponseMessageError("Client DCSP device DCSP must DCSP be DCSP an DCSP instance DCSP of DCSP the DCSP 'Device' DCSP model.", code=EC.CLIENT_DEVICE_NOT_DEVICE) DCNL DCSP try: DCNL DCSP  DCSP if (not client_device.verify()): DCNL DCSP  DCSP  DCSP msg = '\n\n'.join([request.body, client_device._hashable_representation(), str(client_device.validate()), client_device.signed_by_id, client_device.id, str(request)]) DCNL DCSP  DCSP  DCSP send_mail('Client DCSP device DCSP did DCSP not DCSP verify', msg, 'kalite@learningequality.org', ['errors@learningequality.org']) DCNL DCSP  DCSP  DCSP return JsonResponseMessageError('Client DCSP device DCSP must DCSP be DCSP self-signed DCSP with DCSP a DCSP signature DCSP matching DCSP its DCSP own DCSP public DCSP key!', code=EC.CLIENT_DEVICE_INVALID_SIGNATURE) DCNL DCSP except Exception as e: DCNL DCSP  DCSP msg = '\n\n'.join([request.body, client_device._hashable_representation(), ('Exception: DCSP %s' % e), str(type(e)), client_device.signed_by_id, client_device.id, str(request)]) DCNL DCSP  DCSP send_mail('Exception DCSP while DCSP verifying DCSP client DCSP device', msg, 'kalite@learningequality.org', ['errors@learningequality.org']) DCNL DCSP  DCSP return JsonResponseMessageError('Client DCSP device DCSP must DCSP be DCSP self-signed DCSP with DCSP a DCSP signature DCSP matching DCSP its DCSP own DCSP public DCSP key!', code=EC.CLIENT_DEVICE_INVALID_SIGNATURE) DCNL DCSP try: DCNL DCSP  DCSP zone = register_self_registered_device(client_device, models, data) DCNL DCSP except Exception as e: DCNL DCSP  DCSP if (e.args[0] == 'Client DCSP not DCSP yet DCSP on DCSP zone.'): DCNL DCSP  DCSP  DCSP zone = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP UnregisteredDevicePing.record_ping(id=client_device.id, ip=get_request_ip(request)) DCNL DCSP  DCSP  DCSP return JsonResponseMessageError(('Failed DCSP to DCSP validate DCSP the DCSP chain DCSP of DCSP trust DCSP (%s).' % e), code=EC.CHAIN_OF_TRUST_INVALID, status=500) DCNL DCSP if (not zone): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP registration = RegisteredDevicePublicKey.objects.get(public_key=client_device.public_key) DCNL DCSP  DCSP  DCSP if (not registration.is_used()): DCNL DCSP  DCSP  DCSP  DCSP registration.use() DCNL DCSP  DCSP  DCSP zone = registration.zone DCNL DCSP  DCSP except RegisteredDevicePublicKey.DoesNotExist: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP device = Device.objects.get(public_key=client_device.public_key) DCNL DCSP  DCSP  DCSP  DCSP return JsonResponseMessageError('This DCSP device DCSP has DCSP already DCSP been DCSP registered', code=EC.DEVICE_ALREADY_REGISTERED, status=409) DCNL DCSP  DCSP  DCSP except Device.DoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP return JsonResponseMessageError('Device DCSP registration DCSP with DCSP public DCSP key DCSP not DCSP found; DCSP login DCSP and DCSP register DCSP first?', code=EC.PUBLIC_KEY_UNREGISTERED, status=404) DCNL DCSP client_device.save(imported=True) DCNL DCSP try: DCNL DCSP  DCSP device_zone = DeviceZone.objects.get(device=client_device, zone=zone) DCNL DCSP  DCSP device_zone.save() DCNL DCSP except DeviceZone.DoesNotExist: DCNL DCSP  DCSP device_zone = DeviceZone(device=client_device, zone=zone) DCNL DCSP  DCSP device_zone.save() DCNL DCSP return JsonResponse(serialize([Device.get_central_server(), Device.get_own_device(), zone, device_zone], dest_version=client_device.version, ensure_ascii=False))
@allow_jsonp DCNL def get_server_info(request): DCNL  DCSP device = None DCNL DCSP zone = None DCNL DCSP device_info = {'status': 'OK', 'invalid_fields': []} DCNL DCSP for field in request.GET.get('fields', '').split(','): DCNL DCSP  DCSP if (field == 'version'): DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP device_info[field] = device.get_version() DCNL DCSP  DCSP elif (field == 'device_name'): DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP device_info[field] = device.name DCNL DCSP  DCSP elif (field == 'device_description'): DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP device_info[field] = device.description DCNL DCSP  DCSP elif (field == 'device_description'): DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP device_info[field] = device.description DCNL DCSP  DCSP elif (field == 'device_id'): DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP device_info[field] = device.id DCNL DCSP  DCSP elif (field == 'zone_name'): DCNL DCSP  DCSP  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP zone = (zone or device.get_zone()) DCNL DCSP  DCSP  DCSP device_info[field] = (zone.name if zone else None) DCNL DCSP  DCSP elif (field == 'zone_id'): DCNL DCSP  DCSP  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP device = (device or Device.get_own_device()) DCNL DCSP  DCSP  DCSP zone = (zone or device.get_zone()) DCNL DCSP  DCSP  DCSP device_info[field] = (zone.id if zone else None) DCNL DCSP  DCSP elif (field == 'online'): DCNL DCSP  DCSP  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP  DCSP  DCSP device_info[field] = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP device_info[field] = am_i_online(url=('%s://%s%s' % (settings.SECURESYNC_PROTOCOL, settings.CENTRAL_SERVER_HOST, reverse('get_server_info')))) DCNL DCSP  DCSP elif field: DCNL DCSP  DCSP  DCSP device_info['invalid_fields'].append(field) DCNL DCSP return JsonResponse(device_info)
def require_registration(resource_name): DCNL  DCSP def real_decorator_wrapper(handler): DCNL DCSP  DCSP def real_decorator_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP if (Device.get_own_device().is_registered() or (not am_i_online(settings.CENTRAL_SERVER_URL))): DCNL DCSP  DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, _(('In DCSP order DCSP to DCSP access DCSP %(resource_name)s, DCSP you DCSP must DCSP register DCSP your DCSP device DCSP first.' % {'resource_name': unicode(resource_name)}))) DCNL DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(set_query_params(reverse('register_public_key'), {'next': request.path})) DCNL DCSP  DCSP return real_decorator_wrapper_fn DCNL DCSP return real_decorator_wrapper
@transaction.commit_on_success DCNL def load_data_for_offline_install(in_file): DCNL  DCSP assert os.path.exists(in_file), 'in_file DCSP must DCSP exist.' DCNL DCSP with open(in_file, 'r') as fp: DCNL DCSP  DCSP models = deserialize(fp.read()) DCNL DCSP try: DCNL DCSP  DCSP central_server = models.next().object DCNL DCSP except Exception as e: DCNL DCSP  DCSP logging.debug(('Exception DCSP loading DCSP central DCSP server DCSP object: DCSP %s' % e)) DCNL DCSP  DCSP return DCNL DCSP logging.debug(('Saving DCSP object DCSP %s' % central_server)) DCNL DCSP assert isinstance(central_server, Device) DCNL DCSP central_server.save(imported=True, is_trusted=True) DCNL DCSP invitation = None DCNL DCSP for model in models: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP logging.debug(('Saving DCSP object DCSP %s' % model.object)) DCNL DCSP  DCSP  DCSP model.object.save(imported=True) DCNL DCSP  DCSP  DCSP if isinstance(model.object, ZoneInvitation): DCNL DCSP  DCSP  DCSP  DCSP invitation = model.object DCNL DCSP  DCSP  DCSP  DCSP if (invitation.used_by is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP invitation.claim(used_by=Device.get_own_device()) DCNL DCSP  DCSP except ValidationError as e: DCNL DCSP  DCSP  DCSP logging.error(('Failed DCSP to DCSP import DCSP model DCSP %s' % model)) DCNL DCSP return invitation
def _get_own_device(): DCNL  DCSP from ..devices.models import Device DCNL DCSP return Device.get_own_device()
def add_syncing_models(models, dependency_check=False): DCNL  DCSP get_foreign_key_classes = (lambda m: set([field.rel.to for field in m._meta.fields if isinstance(field, ForeignKey)])) DCNL DCSP for model in models: DCNL DCSP  DCSP if (model in _syncing_models): DCNL DCSP  DCSP  DCSP logging.debug(('We DCSP are DCSP already DCSP syncing DCSP model DCSP %s; DCSP likely DCSP from DCSP different DCSP ways DCSP of DCSP importing DCSP the DCSP same DCSP models DCSP file.' % unicode(model))) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP foreign_key_classes = get_foreign_key_classes(model) DCNL DCSP  DCSP class_indices = [_syncing_models.index(cls) for cls in foreign_key_classes if (cls in _syncing_models)] DCNL DCSP  DCSP insert_after_idx = (1 + (max(class_indices) if class_indices else (-1))) DCNL DCSP  DCSP if (dependency_check and [True for synmod in _syncing_models[0:(insert_after_idx - 1)] if (model in get_foreign_key_classes(synmod))]): DCNL DCSP  DCSP  DCSP raise Exception('Dependency DCSP loop DCSP detected DCSP in DCSP syncing DCSP models; DCSP cannot DCSP proceed.') DCNL DCSP  DCSP _syncing_models.insert((insert_after_idx + 1), model)
def get_device_counters(**kwargs): DCNL  DCSP assert ((('zone' in kwargs) + ('devices' in kwargs)) == 1), 'Must DCSP specify DCSP zone DCSP or DCSP devices, DCSP and DCSP not DCSP both.' DCNL DCSP from ..devices.models import Device DCNL DCSP devices = (kwargs.get('devices') or Device.all_objects.by_zone(kwargs['zone'])) DCNL DCSP device_counters = {} DCNL DCSP for device in list(devices): DCNL DCSP  DCSP if (device.id not in device_counters): DCNL DCSP  DCSP  DCSP device_counters[device.id] = device.get_counter_position() DCNL DCSP  DCSP  DCSP if device.is_own_device(): DCNL DCSP  DCSP  DCSP  DCSP cnt = 0 DCNL DCSP  DCSP  DCSP  DCSP for Model in _syncing_models: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cnt += Model.all_objects.filter((Q(counter__isnull=True) | Q(signature__isnull=True))).count() DCNL DCSP  DCSP  DCSP  DCSP device_counters[device.id] += cnt DCNL DCSP return device_counters
def get_models(device_counters=None, limit=None, zone=None, dest_version=None, **kwargs): DCNL  DCSP limit = (limit or settings.SYNCING_MAX_RECORDS_PER_REQUEST) DCNL DCSP from ..devices.models import Device DCNL DCSP own_device = Device.get_own_device() DCNL DCSP if (not dest_version): DCNL DCSP  DCSP dest_version = own_device.get_version() DCNL DCSP if (not zone): DCNL DCSP  DCSP assert (not settings.CENTRAL_SERVER), 'get_models DCSP should DCSP always DCSP be DCSP called DCSP with DCSP a DCSP zone, DCSP on DCSP the DCSP central DCSP server.' DCNL DCSP  DCSP zone = own_device.get_zone() DCNL DCSP if (device_counters is None): DCNL DCSP  DCSP device_counters = dict(((device.id, 0) for device in Device.all_objects.by_zone(zone))) DCNL DCSP for device_id in device_counters.keys(): DCNL DCSP  DCSP device = get_object_or_None(Device.all_objects, pk=device_id) DCNL DCSP  DCSP if ((not device) or (not (device.in_zone(zone) or device.is_trusted()))): DCNL DCSP  DCSP  DCSP del device_counters[device_id] DCNL DCSP models = [] DCNL DCSP remaining = limit DCNL DCSP for Model in _syncing_models: DCNL DCSP  DCSP for (device_id, counter) in device_counters.items(): DCNL DCSP  DCSP  DCSP counter_min = (counter + 1) DCNL DCSP  DCSP  DCSP counter_max = 0 DCNL DCSP  DCSP  DCSP device = Device.all_objects.get(pk=device_id) DCNL DCSP  DCSP  DCSP queryset = Model.all_objects.filter(((Q(signed_by=device) | Q(signed_by__isnull=True)) | Q(counter__isnull=True))) DCNL DCSP  DCSP  DCSP if (not device.in_zone(zone)): DCNL DCSP  DCSP  DCSP  DCSP assert device.is_trusted(), 'Should DCSP never DCSP include DCSP devices DCSP not DCSP ACTUALLY DCSP in DCSP the DCSP zone, DCSP except DCSP trusted DCSP devices.' DCNL DCSP  DCSP  DCSP  DCSP queryset = queryset.filter(zone_fallback=zone) DCNL DCSP  DCSP  DCSP queryset = queryset.filter((Q(counter__gte=counter_min) | Q(counter__isnull=True))) DCNL DCSP  DCSP  DCSP if (not queryset): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (remaining is None): DCNL DCSP  DCSP  DCSP  DCSP new_models = queryset DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if (counter_max is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP remaining += max(0, (queryset.filter(counter__isnull=False).count() - remaining)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP remaining += max(0, (queryset.filter(counter__lt=counter_max).count() - remaining)) DCNL DCSP  DCSP  DCSP  DCSP new_models = queryset[:remaining] DCNL DCSP  DCSP  DCSP if (not new_models): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (counter_max is not None): DCNL DCSP  DCSP  DCSP  DCSP counters = [m.counter for m in new_models] DCNL DCSP  DCSP  DCSP  DCSP if (None in counters): DCNL DCSP  DCSP  DCSP  DCSP  DCSP counter_max = None DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP counter_max = max(counter_max, max(counters)) DCNL DCSP  DCSP  DCSP models += new_models DCNL DCSP  DCSP  DCSP if (remaining is not None): DCNL DCSP  DCSP  DCSP  DCSP remaining -= len(new_models) DCNL DCSP  DCSP if ((remaining is not None) and (remaining <= 0)): DCNL DCSP  DCSP  DCSP break DCNL DCSP return models
def save_serialized_models(data, increment_counters=True, src_version=None, verbose=False): DCNL  DCSP from .models import ImportPurgatory DCNL DCSP from ..devices.models import Device DCNL DCSP own_device = Device.get_own_device() DCNL DCSP if (not src_version): DCNL DCSP  DCSP src_version = own_device.get_version() DCNL DCSP if isinstance(data, ImportPurgatory): DCNL DCSP  DCSP purgatory = data DCNL DCSP  DCSP data = purgatory.serialized_models DCNL DCSP else: DCNL DCSP  DCSP purgatory = None DCNL DCSP if (isinstance(data, str) or isinstance(data, unicode)): DCNL DCSP  DCSP models = deserialize(data, src_version=src_version, dest_version=own_device.get_version()) DCNL DCSP else: DCNL DCSP  DCSP models = deserialize(data, src_version=src_version, dest_version=own_device.get_version()) DCNL DCSP unsaved_models = [] DCNL DCSP exceptions = '' DCNL DCSP saved_model_count = 0 DCNL DCSP try: DCNL DCSP  DCSP for modelwrapper in models: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP model = modelwrapper.object DCNL DCSP  DCSP  DCSP  DCSP if (not hasattr(model, 'verify')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValidationError(('Cannot DCSP save DCSP model: DCSP %s DCSP does DCSP not DCSP have DCSP a DCSP verify DCSP method DCSP (not DCSP a DCSP subclass DCSP of DCSP SyncedModel?)' % model.__class__)) DCNL DCSP  DCSP  DCSP  DCSP model._state.adding = False DCNL DCSP  DCSP  DCSP  DCSP model.full_clean(imported=True) DCNL DCSP  DCSP  DCSP  DCSP model.save(imported=True, increment_counters=increment_counters) DCNL DCSP  DCSP  DCSP  DCSP saved_model_count += 1 DCNL DCSP  DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP  DCSP print ('IMPORTED DCSP %s DCSP (id: DCSP %s, DCSP counter: DCSP %d, DCSP signed_by: DCSP %s)' % (model.__class__.__name__, model.id[0:5], model.counter, model.signed_by.id[0:5])) DCNL DCSP  DCSP  DCSP except ValidationError as e: DCNL DCSP  DCSP  DCSP  DCSP exceptions += ('%s: DCSP %s\n' % (model.pk, e)) DCNL DCSP  DCSP  DCSP  DCSP unsaved_models.append(model) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (increment_counters and model.verify()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP model.signed_by.set_counter_position(model.counter, soft_set=True) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP except Exception as e: DCNL DCSP  DCSP exceptions += unicode(e) DCNL DCSP if unsaved_models: DCNL DCSP  DCSP if (not purgatory): DCNL DCSP  DCSP  DCSP purgatory = ImportPurgatory() DCNL DCSP  DCSP purgatory.serialized_models = serialize(unsaved_models, ensure_ascii=False, dest_version=own_device.get_version()) DCNL DCSP  DCSP purgatory.exceptions = exceptions DCNL DCSP  DCSP purgatory.model_count = len(unsaved_models) DCNL DCSP  DCSP purgatory.retry_attempts += 1 DCNL DCSP  DCSP purgatory.save() DCNL DCSP elif purgatory: DCNL DCSP  DCSP purgatory.delete() DCNL DCSP out_dict = {'unsaved_model_count': len(unsaved_models), 'saved_model_count': saved_model_count} DCNL DCSP if exceptions: DCNL DCSP  DCSP out_dict['exceptions'] = exceptions DCNL DCSP return out_dict
def serialize(models, sign=True, increment_counters=True, dest_version=VERSION, *args, **kwargs): DCNL  DCSP from .models import SyncedModel DCNL DCSP from ..devices.models import Device DCNL DCSP own_device = Device.get_own_device() DCNL DCSP for model in models: DCNL DCSP  DCSP resave = False DCNL DCSP  DCSP if (increment_counters or sign): DCNL DCSP  DCSP  DCSP assert isinstance(model, SyncedModel), 'Can DCSP only DCSP serialize DCSP SyncedModel DCSP instances' DCNL DCSP  DCSP if (increment_counters and (not model.counter)): DCNL DCSP  DCSP  DCSP model.counter = own_device.increment_counter_position() DCNL DCSP  DCSP  DCSP resave = True DCNL DCSP  DCSP if (sign and (not model.signature)): DCNL DCSP  DCSP  DCSP model.sign() DCNL DCSP  DCSP  DCSP resave = True DCNL DCSP  DCSP if resave: DCNL DCSP  DCSP  DCSP super(SyncedModel, model).save() DCNL DCSP return serializers.serialize('versioned-json', models, dest_version=dest_version, *args, **kwargs)
def deserialize(data, src_version=VERSION, dest_version=VERSION, *args, **kwargs): DCNL  DCSP return serializers.deserialize('versioned-json', data, src_version=src_version, dest_version=dest_version, *args, **kwargs)
@csrf_exempt DCNL @gzip_page DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def device_download(data, session): DCNL  DCSP zone = session.client_device.get_zone() DCNL DCSP devicezones = list(DeviceZone.all_objects.filter(zone=zone, device__in=data['devices'])) DCNL DCSP devices = [devicezone.device for devicezone in devicezones] DCNL DCSP session.models_downloaded += (len(devices) + len(devicezones)) DCNL DCSP return JsonResponse({'devices': serialize((devices + devicezones), dest_version=session.client_version, ensure_ascii=False)})
@csrf_exempt DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def device_upload(data, session): DCNL  DCSP try: DCNL DCSP  DCSP result = save_serialized_models(data.get('devices', '[]'), src_version=session.client_version) DCNL DCSP except Exception as e: DCNL DCSP  DCSP logging.debug(('Exception DCSP uploading DCSP devices DCSP (in DCSP api_views): DCSP %s' % e)) DCNL DCSP  DCSP result = {'error': e.message, 'saved_model_count': 0} DCNL DCSP session.models_uploaded += result['saved_model_count'] DCNL DCSP session.errors += result.has_key('error') DCNL DCSP return JsonResponse(result)
@csrf_exempt DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def model_upload(data, session): DCNL  DCSP if ('models' not in data): DCNL DCSP  DCSP return JsonResponseMessageError('Must DCSP provide DCSP models.', data={'saved_model_count': 0}, status=400) DCNL DCSP try: DCNL DCSP  DCSP result = save_serialized_models(data['models'], src_version=session.client_version) DCNL DCSP except Exception as e: DCNL DCSP  DCSP print ('Exception DCSP uploading DCSP models DCSP (in DCSP api_views): DCSP %s, DCSP %s, DCSP %s' % (e.__class__.__name__, e.message, e.args)) DCNL DCSP  DCSP result = {'error': e.message, 'saved_model_count': 0} DCNL DCSP session.models_uploaded += result['saved_model_count'] DCNL DCSP session.errors += result.has_key('error') DCNL DCSP return JsonResponse(result)
@csrf_exempt DCNL @gzip_page DCNL @require_sync_session DCNL @api_handle_error_with_json DCNL def model_download(data, session): DCNL  DCSP if ('device_counters' not in data): DCNL DCSP  DCSP return JsonResponseMessageError('Must DCSP provide DCSP device DCSP counters.', data={'count': 0}, status=400) DCNL DCSP try: DCNL DCSP  DCSP result = get_serialized_models(data['device_counters'], zone=session.client_device.get_zone(), include_count=True, dest_version=session.client_version) DCNL DCSP except Exception as e: DCNL DCSP  DCSP print ('Exception DCSP downloading DCSP models DCSP (in DCSP api_views): DCSP %s, DCSP %s, DCSP %s' % (e.__class__.__name__, e.message, e.args)) DCNL DCSP  DCSP result = {'error': e.message, 'count': 0} DCNL DCSP session.models_downloaded += result['count'] DCNL DCSP session.errors += result.has_key('error') DCNL DCSP return JsonResponse(result)
@require_admin DCNL @api_handle_error_with_json DCNL def force_sync(request): DCNL  DCSP force_job('syncmodels') DCNL DCSP return JsonResponse({})
def x_server_test(f, cond, msg): DCNL  DCSP if isinstance(f, (type, types.ClassType)): DCNL DCSP  DCSP if (not cond): DCNL DCSP  DCSP  DCSP f.__unittest_skip__ = True DCNL DCSP  DCSP  DCSP f.__unittest_skip_why__ = msg DCNL DCSP  DCSP return f DCNL DCSP else: DCNL DCSP  DCSP @unittest.skipIf((not cond), msg) DCNL DCSP  DCSP def wrapped_fn(*args, **kwargs): DCNL DCSP  DCSP  DCSP return f(*args, **kwargs) DCNL DCSP  DCSP return wrapped_fn
def distributed_server_test(f): DCNL  DCSP return x_server_test(f, (not settings.CENTRAL_SERVER), 'Distributed DCSP server DCSP test')
def central_server_test(f): DCNL  DCSP return x_server_test(f, settings.CENTRAL_SERVER, 'Central DCSP server DCSP test')
def contextmanager(func): DCNL  DCSP @wraps(func) DCNL DCSP def helper(*args, **kwds): DCNL DCSP  DCSP return _GeneratorContextManager(func, *args, **kwds) DCNL DCSP return helper
def memory_usage(proc=(-1), interval=0.1, timeout=None): DCNL  DCSP ret = [] DCNL DCSP if (timeout is not None): DCNL DCSP  DCSP max_iter = int((timeout / interval)) DCNL DCSP elif isinstance(proc, int): DCNL DCSP  DCSP max_iter = 1 DCNL DCSP else: DCNL DCSP  DCSP max_iter = float('inf') DCNL DCSP if hasattr(proc, '__call__'): DCNL DCSP  DCSP proc = (proc, (), {}) DCNL DCSP if isinstance(proc, (list, tuple)): DCNL DCSP  DCSP if (len(proc) == 1): DCNL DCSP  DCSP  DCSP (f, args, kw) = (proc[0], (), {}) DCNL DCSP  DCSP elif (len(proc) == 2): DCNL DCSP  DCSP  DCSP (f, args, kw) = (proc[0], proc[1], {}) DCNL DCSP  DCSP elif (len(proc) == 3): DCNL DCSP  DCSP  DCSP (f, args, kw) = (proc[0], proc[1], proc[2]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise ValueError DCNL DCSP  DCSP aspec = inspect.getargspec(f) DCNL DCSP  DCSP n_args = len(aspec.args) DCNL DCSP  DCSP if (aspec.defaults is not None): DCNL DCSP  DCSP  DCSP n_args -= len(aspec.defaults) DCNL DCSP  DCSP if (n_args != len(args)): DCNL DCSP  DCSP  DCSP raise ValueError(('Function DCSP expects DCSP %s DCSP value(s) DCSP but DCSP %s DCSP where DCSP given' % (n_args, len(args)))) DCNL DCSP  DCSP (child_conn, parent_conn) = Pipe() DCNL DCSP  DCSP p = Timer(os.getpid(), interval, child_conn) DCNL DCSP  DCSP p.start() DCNL DCSP  DCSP parent_conn.recv() DCNL DCSP  DCSP f(*args, **kw) DCNL DCSP  DCSP parent_conn.send(0) DCNL DCSP  DCSP ret = parent_conn.recv() DCNL DCSP  DCSP p.join((5 * interval)) DCNL DCSP elif isinstance(proc, subprocess.Popen): DCNL DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP ret.append(_get_memory(proc.pid)) DCNL DCSP  DCSP  DCSP time.sleep(interval) DCNL DCSP  DCSP  DCSP if (timeout is not None): DCNL DCSP  DCSP  DCSP  DCSP max_iter -= 1 DCNL DCSP  DCSP  DCSP  DCSP if (max_iter == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if (proc.poll() is not None): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP if (proc == (-1)): DCNL DCSP  DCSP  DCSP proc = os.getpid() DCNL DCSP  DCSP if (max_iter == (-1)): DCNL DCSP  DCSP  DCSP max_iter = 1 DCNL DCSP  DCSP counter = 0 DCNL DCSP  DCSP while (counter < max_iter): DCNL DCSP  DCSP  DCSP counter += 1 DCNL DCSP  DCSP  DCSP ret.append(_get_memory(proc)) DCNL DCSP  DCSP  DCSP time.sleep(interval) DCNL DCSP return ret
def _find_script(script_name): DCNL  DCSP if os.path.isfile(script_name): DCNL DCSP  DCSP return script_name DCNL DCSP path = os.getenv('PATH', os.defpath).split(os.pathsep) DCNL DCSP for folder in path: DCNL DCSP  DCSP if (folder == ''): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP fn = os.path.join(folder, script_name) DCNL DCSP  DCSP if os.path.isfile(fn): DCNL DCSP  DCSP  DCSP return fn DCNL DCSP sys.stderr.write('Could DCSP not DCSP find DCSP script DCSP {0}\n'.format(script_name)) DCNL DCSP raise SystemExit(1)
def magic_mprun(self, parameter_s=''): DCNL  DCSP try: DCNL DCSP  DCSP from StringIO import StringIO DCNL DCSP except ImportError: DCNL DCSP  DCSP from io import StringIO DCNL DCSP from distutils.version import LooseVersion DCNL DCSP import IPython DCNL DCSP ipython_version = LooseVersion(IPython.__version__) DCNL DCSP if (ipython_version < '0.11'): DCNL DCSP  DCSP from IPython.genutils import page DCNL DCSP  DCSP from IPython.ipstruct import Struct DCNL DCSP  DCSP from IPython.ipapi import UsageError DCNL DCSP else: DCNL DCSP  DCSP from IPython.core.page import page DCNL DCSP  DCSP from IPython.utils.ipstruct import Struct DCNL DCSP  DCSP from IPython.core.error import UsageError DCNL DCSP opts_def = Struct(T=[''], f=[]) DCNL DCSP parameter_s = parameter_s.replace('"', '\\"').replace("'", "\\'") DCNL DCSP (opts, arg_str) = self.parse_options(parameter_s, 'rf:T:', list_all=True) DCNL DCSP opts.merge(opts_def) DCNL DCSP global_ns = self.shell.user_global_ns DCNL DCSP local_ns = self.shell.user_ns DCNL DCSP funcs = [] DCNL DCSP for name in opts.f: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP funcs.append(eval(name, global_ns, local_ns)) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP raise UsageError(('Could DCSP not DCSP find DCSP function DCSP %r.\n%s: DCSP %s' % (name, e.__class__.__name__, e))) DCNL DCSP profile = LineProfiler() DCNL DCSP for func in funcs: DCNL DCSP  DCSP profile(func) DCNL DCSP try: DCNL DCSP  DCSP import builtins DCNL DCSP except ImportError: DCNL DCSP  DCSP import __builtin__ as builtins DCNL DCSP if ('profile' in builtins.__dict__): DCNL DCSP  DCSP had_profile = True DCNL DCSP  DCSP old_profile = builtins.__dict__['profile'] DCNL DCSP else: DCNL DCSP  DCSP had_profile = False DCNL DCSP  DCSP old_profile = None DCNL DCSP builtins.__dict__['profile'] = profile DCNL DCSP try: DCNL DCSP  DCSP profile.runctx(arg_str, global_ns, local_ns) DCNL DCSP  DCSP message = '' DCNL DCSP except SystemExit: DCNL DCSP  DCSP message = '*** DCSP SystemExit DCSP exception DCSP caught DCSP in DCSP code DCSP being DCSP profiled.' DCNL DCSP except KeyboardInterrupt: DCNL DCSP  DCSP message = '*** DCSP KeyboardInterrupt DCSP exception DCSP caught DCSP in DCSP code DCSP being DCSP profiled.' DCNL DCSP finally: DCNL DCSP  DCSP if had_profile: DCNL DCSP  DCSP  DCSP builtins.__dict__['profile'] = old_profile DCNL DCSP stdout_trap = StringIO() DCNL DCSP show_results(profile, stdout_trap) DCNL DCSP output = stdout_trap.getvalue() DCNL DCSP output = output.rstrip() DCNL DCSP if (ipython_version < '0.11'): DCNL DCSP  DCSP page(output, screen_lines=self.shell.rc.screen_length) DCNL DCSP else: DCNL DCSP  DCSP page(output) DCNL DCSP print (message,) DCNL DCSP text_file = opts.T[0] DCNL DCSP if text_file: DCNL DCSP  DCSP with open(text_file, 'w') as pfile: DCNL DCSP  DCSP  DCSP pfile.write(output) DCNL DCSP  DCSP print ('\n*** DCSP Profile DCSP printout DCSP saved DCSP to DCSP text DCSP file DCSP %s. DCSP %s' % (text_file, message)) DCNL DCSP return_value = None DCNL DCSP if ('r' in opts): DCNL DCSP  DCSP return_value = profile DCNL DCSP return return_value
def magic_memit(self, line=''): DCNL  DCSP (opts, stmt) = self.parse_options(line, 'r:t', posix=False, strict=False) DCNL DCSP repeat = int(getattr(opts, 'r', 1)) DCNL DCSP if (repeat < 1): DCNL DCSP  DCSP (repeat == 1) DCNL DCSP timeout = int(getattr(opts, 't', 0)) DCNL DCSP if (timeout <= 0): DCNL DCSP  DCSP timeout = None DCNL DCSP mem_usage = [] DCNL DCSP for _ in range(repeat): DCNL DCSP  DCSP tmp = memory_usage((_func_exec, (stmt, self.shell.user_ns)), timeout=timeout) DCNL DCSP  DCSP mem_usage.extend(tmp) DCNL DCSP if mem_usage: DCNL DCSP  DCSP print ('maximum DCSP of DCSP %d: DCSP %f DCSP MB DCSP per DCSP loop' % (repeat, max(mem_usage))) DCNL DCSP else: DCNL DCSP  DCSP print 'ERROR: DCSP could DCSP not DCSP read DCSP memory DCSP usage, DCSP try DCSP with DCSP a DCSP lower DCSP interval DCSP or DCSP more DCSP iterations'
def load_ipython_extension(ip): DCNL  DCSP ip.define_magic('mprun', magic_mprun) DCNL DCSP ip.define_magic('memit', magic_memit)
def profile(func, stream=None): DCNL  DCSP def wrapper(*args, **kwargs): DCNL DCSP  DCSP prof = LineProfiler() DCNL DCSP  DCSP val = prof(func)(*args, **kwargs) DCNL DCSP  DCSP show_results(prof, stream=stream) DCNL DCSP  DCSP return val DCNL DCSP return wrapper
def iri2uri(uri): DCNL  DCSP if isinstance(uri, unicode): DCNL DCSP  DCSP (scheme, authority, path, query, fragment) = urlparse.urlsplit(uri) DCNL DCSP  DCSP authority = authority.encode('idna') DCNL DCSP  DCSP uri = urlparse.urlunsplit((scheme, authority, path, query, fragment)) DCNL DCSP  DCSP uri = ''.join([encode(c) for c in uri]) DCNL DCSP return uri
def HTTPResponse__getheaders(self): DCNL  DCSP if (self.msg is None): DCNL DCSP  DCSP raise httplib.ResponseNotReady() DCNL DCSP return self.msg.items()
def parse_uri(uri): DCNL  DCSP groups = URI.match(uri).groups() DCNL DCSP return (groups[1], groups[3], groups[4], groups[6], groups[8])
def safename(filename): DCNL  DCSP try: DCNL DCSP  DCSP if re_url_scheme.match(filename): DCNL DCSP  DCSP  DCSP if isinstance(filename, str): DCNL DCSP  DCSP  DCSP  DCSP filename = filename.decode('utf-8') DCNL DCSP  DCSP  DCSP  DCSP filename = filename.encode('idna') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP filename = filename.encode('idna') DCNL DCSP except UnicodeError: DCNL DCSP  DCSP pass DCNL DCSP if isinstance(filename, unicode): DCNL DCSP  DCSP filename = filename.encode('utf-8') DCNL DCSP filemd5 = _md5(filename).hexdigest() DCNL DCSP filename = re_url_scheme.sub('', filename) DCNL DCSP filename = re_slash.sub(',', filename) DCNL DCSP if (len(filename) > 200): DCNL DCSP  DCSP filename = filename[:200] DCNL DCSP return ','.join((filename, filemd5))
def _parse_www_authenticate(headers, headername='www-authenticate'): DCNL  DCSP retval = {} DCNL DCSP if headers.has_key(headername): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP authenticate = headers[headername].strip() DCNL DCSP  DCSP  DCSP www_auth = ((USE_WWW_AUTH_STRICT_PARSING and WWW_AUTH_STRICT) or WWW_AUTH_RELAXED) DCNL DCSP  DCSP  DCSP while authenticate: DCNL DCSP  DCSP  DCSP  DCSP if (headername == 'authentication-info'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (auth_scheme, the_rest) = ('digest', authenticate) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (auth_scheme, the_rest) = authenticate.split(' DCSP ', 1) DCNL DCSP  DCSP  DCSP  DCSP match = www_auth.search(the_rest) DCNL DCSP  DCSP  DCSP  DCSP auth_params = {} DCNL DCSP  DCSP  DCSP  DCSP while match: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (match and (len(match.groups()) == 3)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (key, value, the_rest) = match.groups() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP auth_params[key.lower()] = UNQUOTE_PAIRS.sub('\\1', value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP match = www_auth.search(the_rest) DCNL DCSP  DCSP  DCSP  DCSP retval[auth_scheme.lower()] = auth_params DCNL DCSP  DCSP  DCSP  DCSP authenticate = the_rest.strip() DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise MalformedHeader('WWW-Authenticate') DCNL DCSP return retval
def _entry_disposition(response_headers, request_headers): DCNL  DCSP retval = 'STALE' DCNL DCSP cc = _parse_cache_control(request_headers) DCNL DCSP cc_response = _parse_cache_control(response_headers) DCNL DCSP if (request_headers.has_key('pragma') and (request_headers['pragma'].lower().find('no-cache') != (-1))): DCNL DCSP  DCSP retval = 'TRANSPARENT' DCNL DCSP  DCSP if ('cache-control' not in request_headers): DCNL DCSP  DCSP  DCSP request_headers['cache-control'] = 'no-cache' DCNL DCSP elif cc.has_key('no-cache'): DCNL DCSP  DCSP retval = 'TRANSPARENT' DCNL DCSP elif cc_response.has_key('no-cache'): DCNL DCSP  DCSP retval = 'STALE' DCNL DCSP elif cc.has_key('only-if-cached'): DCNL DCSP  DCSP retval = 'FRESH' DCNL DCSP elif response_headers.has_key('date'): DCNL DCSP  DCSP date = calendar.timegm(email.Utils.parsedate_tz(response_headers['date'])) DCNL DCSP  DCSP now = time.time() DCNL DCSP  DCSP current_age = max(0, (now - date)) DCNL DCSP  DCSP if cc_response.has_key('max-age'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = int(cc_response['max-age']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP elif response_headers.has_key('expires'): DCNL DCSP  DCSP  DCSP expires = email.Utils.parsedate_tz(response_headers['expires']) DCNL DCSP  DCSP  DCSP if (None == expires): DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = max(0, (calendar.timegm(expires) - date)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP if cc.has_key('max-age'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = int(cc['max-age']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP freshness_lifetime = 0 DCNL DCSP  DCSP if cc.has_key('min-fresh'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP min_fresh = int(cc['min-fresh']) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP min_fresh = 0 DCNL DCSP  DCSP  DCSP current_age += min_fresh DCNL DCSP  DCSP if (freshness_lifetime > current_age): DCNL DCSP  DCSP  DCSP retval = 'FRESH' DCNL DCSP return retval
def proxy_info_from_environment(method='http'): DCNL  DCSP if (method not in ['http', 'https']): DCNL DCSP  DCSP return DCNL DCSP env_var = (method + '_proxy') DCNL DCSP url = os.environ.get(env_var, os.environ.get(env_var.upper())) DCNL DCSP if (not url): DCNL DCSP  DCSP return DCNL DCSP pi = proxy_info_from_url(url, method) DCNL DCSP no_proxy = os.environ.get('no_proxy', os.environ.get('NO_PROXY', '')) DCNL DCSP bypass_hosts = [] DCNL DCSP if no_proxy: DCNL DCSP  DCSP bypass_hosts = no_proxy.split(',') DCNL DCSP if (no_proxy == '*'): DCNL DCSP  DCSP bypass_hosts = AllHosts DCNL DCSP pi.bypass_hosts = bypass_hosts DCNL DCSP return pi
def proxy_info_from_url(url, method='http'): DCNL  DCSP url = urlparse.urlparse(url) DCNL DCSP username = None DCNL DCSP password = None DCNL DCSP port = None DCNL DCSP if ('@' in url[1]): DCNL DCSP  DCSP (ident, host_port) = url[1].split('@', 1) DCNL DCSP  DCSP if (':' in ident): DCNL DCSP  DCSP  DCSP (username, password) = ident.split(':', 1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP password = ident DCNL DCSP else: DCNL DCSP  DCSP host_port = url[1] DCNL DCSP if (':' in host_port): DCNL DCSP  DCSP (host, port) = host_port.split(':', 1) DCNL DCSP else: DCNL DCSP  DCSP host = host_port DCNL DCSP if port: DCNL DCSP  DCSP port = int(port) DCNL DCSP else: DCNL DCSP  DCSP port = dict(https=443, http=80)[method] DCNL DCSP proxy_type = 3 DCNL DCSP return ProxyInfo(proxy_type=proxy_type, proxy_host=host, proxy_port=port, proxy_user=(username or None), proxy_pass=(password or None))
def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None): DCNL  DCSP global _defaultproxy DCNL DCSP _defaultproxy = (proxytype, addr, port, rdns, username, password)
def wrapmodule(module): DCNL  DCSP if (_defaultproxy != None): DCNL DCSP  DCSP module.socket.socket = socksocket DCNL DCSP else: DCNL DCSP  DCSP raise GeneralProxyError((4, 'no DCSP proxy DCSP specified'))
def get_object_or_None(klass, *args, **kwargs): DCNL  DCSP queryset = _get_queryset(klass) DCNL DCSP try: DCNL DCSP  DCSP return queryset.get(*args, **kwargs) DCNL DCSP except queryset.model.DoesNotExist: DCNL DCSP  DCSP return None
def get_config(key, default): DCNL  DCSP return getattr(settings, key, default)
def render_to(template=None, mimetype=None): DCNL  DCSP def renderer(function): DCNL DCSP  DCSP @wraps(function) DCNL DCSP  DCSP def wrapper(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP output = function(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP if (not isinstance(output, dict)): DCNL DCSP  DCSP  DCSP  DCSP return output DCNL DCSP  DCSP  DCSP tmpl = output.pop('TEMPLATE', template) DCNL DCSP  DCSP  DCSP return render_to_response(tmpl, output, context_instance=RequestContext(request), mimetype=mimetype) DCNL DCSP  DCSP return wrapper DCNL DCSP return renderer
def ajax_request(func): DCNL  DCSP @wraps(func) DCNL DCSP def wrapper(request, *args, **kwargs): DCNL DCSP  DCSP response = func(request, *args, **kwargs) DCNL DCSP  DCSP if isinstance(response, dict): DCNL DCSP  DCSP  DCSP return JsonResponse(response) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return response DCNL DCSP return wrapper
def autostrip(cls): DCNL  DCSP fields = [(key, value) for (key, value) in cls.base_fields.iteritems() if isinstance(value, forms.CharField)] DCNL DCSP for (field_name, field_object) in fields: DCNL DCSP  DCSP def get_clean_func(original_clean): DCNL DCSP  DCSP  DCSP return (lambda value: original_clean((value and value.strip()))) DCNL DCSP  DCSP clean_func = get_clean_func(getattr(field_object, 'clean')) DCNL DCSP  DCSP setattr(field_object, 'clean', clean_func) DCNL DCSP return cls
def smart_if(parser, token): DCNL  DCSP bits = token.split_contents()[1:] DCNL DCSP var = TemplateIfParser(parser, bits).parse() DCNL DCSP nodelist_true = parser.parse(('else', 'endif')) DCNL DCSP token = parser.next_token() DCNL DCSP if (token.contents == 'else'): DCNL DCSP  DCSP nodelist_false = parser.parse(('endif',)) DCNL DCSP  DCSP parser.delete_first_token() DCNL DCSP else: DCNL DCSP  DCSP nodelist_false = None DCNL DCSP return SmartIfNode(var, nodelist_true, nodelist_false)
def align_to_mmap(num, round_up): DCNL  DCSP res = ((num / ALLOCATIONGRANULARITY) * ALLOCATIONGRANULARITY) DCNL DCSP if (round_up and (res != num)): DCNL DCSP  DCSP res += ALLOCATIONGRANULARITY DCNL DCSP return res
def is_64_bit(): DCNL  DCSP return (sys.maxint > ((1 << 32) - 1))
def xldate_as_datetime(xldate, datemode): DCNL  DCSP if datemode: DCNL DCSP  DCSP epoch = epoch_1904 DCNL DCSP elif (xldate < 60): DCNL DCSP  DCSP epoch = epoch_1900 DCNL DCSP else: DCNL DCSP  DCSP epoch = epoch_1900_minus_1 DCNL DCSP days = int(xldate) DCNL DCSP fraction = (xldate - days) DCNL DCSP seconds = int(round((fraction * 86400000.0))) DCNL DCSP (seconds, milliseconds) = divmod(seconds, 1000) DCNL DCSP return (epoch + datetime.timedelta(days, seconds, 0, milliseconds))
def xldate_from_date_tuple(date_tuple, datemode): DCNL  DCSP (year, month, day) = date_tuple DCNL DCSP if (datemode not in (0, 1)): DCNL DCSP  DCSP raise XLDateBadDatemode(datemode) DCNL DCSP if ((year == 0) and (month == 0) and (day == 0)): DCNL DCSP  DCSP return 0.0 DCNL DCSP if (not (1900 <= year <= 9999)): DCNL DCSP  DCSP raise XLDateBadTuple(('Invalid DCSP year: DCSP %r' % ((year, month, day),))) DCNL DCSP if (not (1 <= month <= 12)): DCNL DCSP  DCSP raise XLDateBadTuple(('Invalid DCSP month: DCSP %r' % ((year, month, day),))) DCNL DCSP if ((day < 1) or ((day > _days_in_month[month]) and (not ((day == 29) and (month == 2) and _leap(year))))): DCNL DCSP  DCSP raise XLDateBadTuple(('Invalid DCSP day: DCSP %r' % ((year, month, day),))) DCNL DCSP Yp = (year + 4716) DCNL DCSP M = month DCNL DCSP if (M <= 2): DCNL DCSP  DCSP Yp = (Yp - 1) DCNL DCSP  DCSP Mp = (M + 9) DCNL DCSP else: DCNL DCSP  DCSP Mp = (M - 3) DCNL DCSP jdn = ((((((1461 * Yp) // 4) + (((979 * Mp) + 16) // 32)) + day) - 1364) - ((((Yp + 184) // 100) * 3) // 4)) DCNL DCSP xldays = (jdn - _JDN_delta[datemode]) DCNL DCSP if (xldays <= 0): DCNL DCSP  DCSP raise XLDateBadTuple(('Invalid DCSP (year, DCSP month, DCSP day): DCSP %r' % ((year, month, day),))) DCNL DCSP if ((xldays < 61) and (datemode == 0)): DCNL DCSP  DCSP raise XLDateAmbiguous(('Before DCSP 1900-03-01: DCSP %r' % ((year, month, day),))) DCNL DCSP return float(xldays)
def xldate_from_time_tuple(time_tuple): DCNL  DCSP (hour, minute, second) = time_tuple DCNL DCSP if ((0 <= hour < 24) and (0 <= minute < 60) and (0 <= second < 60)): DCNL DCSP  DCSP return (((((second / 60.0) + minute) / 60.0) + hour) / 24.0) DCNL DCSP raise XLDateBadTuple(('Invalid DCSP (hour, DCSP minute, DCSP second): DCSP %r' % ((hour, minute, second),)))
def unpack_SST_table(datatab, nstrings): DCNL  DCSP datainx = 0 DCNL DCSP ndatas = len(datatab) DCNL DCSP data = datatab[0] DCNL DCSP datalen = len(data) DCNL DCSP pos = 8 DCNL DCSP strings = [] DCNL DCSP strappend = strings.append DCNL DCSP richtext_runs = {} DCNL DCSP local_unpack = unpack DCNL DCSP local_min = min DCNL DCSP local_BYTES_ORD = BYTES_ORD DCNL DCSP latin_1 = 'latin_1' DCNL DCSP for _unused_i in xrange(nstrings): DCNL DCSP  DCSP nchars = local_unpack('<H', data[pos:(pos + 2)])[0] DCNL DCSP  DCSP pos += 2 DCNL DCSP  DCSP options = local_BYTES_ORD(data[pos]) DCNL DCSP  DCSP pos += 1 DCNL DCSP  DCSP rtcount = 0 DCNL DCSP  DCSP phosz = 0 DCNL DCSP  DCSP if (options & 8): DCNL DCSP  DCSP  DCSP rtcount = local_unpack('<H', data[pos:(pos + 2)])[0] DCNL DCSP  DCSP  DCSP pos += 2 DCNL DCSP  DCSP if (options & 4): DCNL DCSP  DCSP  DCSP phosz = local_unpack('<i', data[pos:(pos + 4)])[0] DCNL DCSP  DCSP  DCSP pos += 4 DCNL DCSP  DCSP accstrg = UNICODE_LITERAL('') DCNL DCSP  DCSP charsgot = 0 DCNL DCSP  DCSP while 1: DCNL DCSP  DCSP  DCSP charsneed = (nchars - charsgot) DCNL DCSP  DCSP  DCSP if (options & 1): DCNL DCSP  DCSP  DCSP  DCSP charsavail = local_min(((datalen - pos) >> 1), charsneed) DCNL DCSP  DCSP  DCSP  DCSP rawstrg = data[pos:(pos + (2 * charsavail))] DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP accstrg += unicode(rawstrg, 'utf_16_le') DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP  DCSP  DCSP pos += (2 * charsavail) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP charsavail = local_min((datalen - pos), charsneed) DCNL DCSP  DCSP  DCSP  DCSP rawstrg = data[pos:(pos + charsavail)] DCNL DCSP  DCSP  DCSP  DCSP accstrg += unicode(rawstrg, latin_1) DCNL DCSP  DCSP  DCSP  DCSP pos += charsavail DCNL DCSP  DCSP  DCSP charsgot += charsavail DCNL DCSP  DCSP  DCSP if (charsgot == nchars): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP datainx += 1 DCNL DCSP  DCSP  DCSP data = datatab[datainx] DCNL DCSP  DCSP  DCSP datalen = len(data) DCNL DCSP  DCSP  DCSP options = local_BYTES_ORD(data[0]) DCNL DCSP  DCSP  DCSP pos = 1 DCNL DCSP  DCSP if rtcount: DCNL DCSP  DCSP  DCSP runs = [] DCNL DCSP  DCSP  DCSP for runindex in xrange(rtcount): DCNL DCSP  DCSP  DCSP  DCSP if (pos == datalen): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pos = 0 DCNL DCSP  DCSP  DCSP  DCSP  DCSP datainx += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP data = datatab[datainx] DCNL DCSP  DCSP  DCSP  DCSP  DCSP datalen = len(data) DCNL DCSP  DCSP  DCSP  DCSP runs.append(local_unpack('<HH', data[pos:(pos + 4)])) DCNL DCSP  DCSP  DCSP  DCSP pos += 4 DCNL DCSP  DCSP  DCSP richtext_runs[len(strings)] = runs DCNL DCSP  DCSP pos += phosz DCNL DCSP  DCSP if (pos >= datalen): DCNL DCSP  DCSP  DCSP pos = (pos - datalen) DCNL DCSP  DCSP  DCSP datainx += 1 DCNL DCSP  DCSP  DCSP if (datainx < ndatas): DCNL DCSP  DCSP  DCSP  DCSP data = datatab[datainx] DCNL DCSP  DCSP  DCSP  DCSP datalen = len(data) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP assert (_unused_i == (nstrings - 1)) DCNL DCSP  DCSP strappend(accstrg) DCNL DCSP return (strings, richtext_runs)
def unpack_unicode(data, pos, lenlen=2): DCNL  DCSP nchars = unpack(('<' + 'BH'[(lenlen - 1)]), data[pos:(pos + lenlen)])[0] DCNL DCSP if (not nchars): DCNL DCSP  DCSP return UNICODE_LITERAL('') DCNL DCSP pos += lenlen DCNL DCSP options = BYTES_ORD(data[pos]) DCNL DCSP pos += 1 DCNL DCSP if (options & 8): DCNL DCSP  DCSP pos += 2 DCNL DCSP if (options & 4): DCNL DCSP  DCSP pos += 4 DCNL DCSP if (options & 1): DCNL DCSP  DCSP rawstrg = data[pos:(pos + (2 * nchars))] DCNL DCSP  DCSP strg = unicode(rawstrg, 'utf_16_le') DCNL DCSP else: DCNL DCSP  DCSP strg = unicode(data[pos:(pos + nchars)], 'latin_1') DCNL DCSP return strg
def unpack_unicode_update_pos(data, pos, lenlen=2, known_len=None): DCNL  DCSP if (known_len is not None): DCNL DCSP  DCSP nchars = known_len DCNL DCSP else: DCNL DCSP  DCSP nchars = unpack(('<' + 'BH'[(lenlen - 1)]), data[pos:(pos + lenlen)])[0] DCNL DCSP  DCSP pos += lenlen DCNL DCSP if ((not nchars) and (not data[pos:])): DCNL DCSP  DCSP return (UNICODE_LITERAL(''), pos) DCNL DCSP options = BYTES_ORD(data[pos]) DCNL DCSP pos += 1 DCNL DCSP phonetic = (options & 4) DCNL DCSP richtext = (options & 8) DCNL DCSP if richtext: DCNL DCSP  DCSP rt = unpack('<H', data[pos:(pos + 2)])[0] DCNL DCSP  DCSP pos += 2 DCNL DCSP if phonetic: DCNL DCSP  DCSP sz = unpack('<i', data[pos:(pos + 4)])[0] DCNL DCSP  DCSP pos += 4 DCNL DCSP if (options & 1): DCNL DCSP  DCSP strg = unicode(data[pos:(pos + (2 * nchars))], 'utf_16_le') DCNL DCSP  DCSP pos += (2 * nchars) DCNL DCSP else: DCNL DCSP  DCSP strg = unicode(data[pos:(pos + nchars)], 'latin_1') DCNL DCSP  DCSP pos += nchars DCNL DCSP if richtext: DCNL DCSP  DCSP pos += (4 * rt) DCNL DCSP if phonetic: DCNL DCSP  DCSP pos += sz DCNL DCSP return (strg, pos)
def get_text_from_si_or_is(self, elem, r_tag=(U_SSML12 + u'r'), t_tag=(U_SSML12 + u't')): DCNL  DCSP accum = [] DCNL DCSP for child in elem: DCNL DCSP  DCSP tag = child.tag DCNL DCSP  DCSP if (tag == t_tag): DCNL DCSP  DCSP  DCSP t = cooked_text(self, child) DCNL DCSP  DCSP  DCSP if t: DCNL DCSP  DCSP  DCSP  DCSP accum.append(t) DCNL DCSP  DCSP elif (tag == r_tag): DCNL DCSP  DCSP  DCSP for tnode in child: DCNL DCSP  DCSP  DCSP  DCSP if (tnode.tag == t_tag): DCNL DCSP  DCSP  DCSP  DCSP  DCSP t = cooked_text(self, tnode) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if t: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP accum.append(t) DCNL DCSP return u''.join(accum)
def num2strg(num): DCNL  DCSP s = str(num) DCNL DCSP if s.endswith('.0'): DCNL DCSP  DCSP s = s[:(-2)] DCNL DCSP return s
def cellname(rowx, colx): DCNL  DCSP return ('%s%d' % (colname(colx), (rowx + 1)))
def cellnameabs(rowx, colx, r1c1=0): DCNL  DCSP if r1c1: DCNL DCSP  DCSP return ('R%dC%d' % ((rowx + 1), (colx + 1))) DCNL DCSP return ('$%s$%d' % (colname(colx), (rowx + 1)))
def colname(colx): DCNL  DCSP alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' DCNL DCSP if (colx <= 25): DCNL DCSP  DCSP return alphabet[colx] DCNL DCSP else: DCNL DCSP  DCSP (xdiv26, xmod26) = divmod(colx, 26) DCNL DCSP  DCSP return (alphabet[(xdiv26 - 1)] + alphabet[xmod26])
def rangename2d(rlo, rhi, clo, chi, r1c1=0): DCNL  DCSP if r1c1: DCNL DCSP  DCSP return DCNL DCSP if ((rhi == (rlo + 1)) and (chi == (clo + 1))): DCNL DCSP  DCSP return cellnameabs(rlo, clo, r1c1) DCNL DCSP return ('%s:%s' % (cellnameabs(rlo, clo, r1c1), cellnameabs((rhi - 1), (chi - 1), r1c1)))
def rangename3d(book, ref3d): DCNL  DCSP coords = ref3d.coords DCNL DCSP return ('%s!%s' % (sheetrange(book, *coords[:2]), rangename2d(*coords[2:6])))
def parse_mime_type(mime_type): DCNL  DCSP parts = mime_type.split(';') DCNL DCSP params = dict([tuple([s.strip() for s in param.split('=', 1)]) for param in parts[1:]]) DCNL DCSP full_type = parts[0].strip() DCNL DCSP if (full_type == '*'): DCNL DCSP  DCSP full_type = '*/*' DCNL DCSP (type, subtype) = full_type.split('/') DCNL DCSP return (type.strip(), subtype.strip(), params)
def parse_media_range(range): DCNL  DCSP (type, subtype, params) = parse_mime_type(range) DCNL DCSP if ((not ('q' in params)) or (not params['q']) or (not float(params['q'])) or (float(params['q']) > 1) or (float(params['q']) < 0)): DCNL DCSP  DCSP params['q'] = '1' DCNL DCSP return (type, subtype, params)
def fitness_and_quality_parsed(mime_type, parsed_ranges): DCNL  DCSP best_fitness = (-1) DCNL DCSP best_fit_q = 0 DCNL DCSP (target_type, target_subtype, target_params) = parse_media_range(mime_type) DCNL DCSP for (type, subtype, params) in parsed_ranges: DCNL DCSP  DCSP type_match = ((type == target_type) or (type == '*') or (target_type == '*')) DCNL DCSP  DCSP subtype_match = ((subtype == target_subtype) or (subtype == '*') or (target_subtype == '*')) DCNL DCSP  DCSP if (type_match and subtype_match): DCNL DCSP  DCSP  DCSP param_matches = reduce((lambda x, y: (x + y)), [1 for (key, value) in list(target_params.items()) if ((key != 'q') and (key in params) and (value == params[key]))], 0) DCNL DCSP  DCSP  DCSP fitness = (((type == target_type) and 100) or 0) DCNL DCSP  DCSP  DCSP fitness += (((subtype == target_subtype) and 10) or 0) DCNL DCSP  DCSP  DCSP fitness += param_matches DCNL DCSP  DCSP  DCSP if (fitness > best_fitness): DCNL DCSP  DCSP  DCSP  DCSP best_fitness = fitness DCNL DCSP  DCSP  DCSP  DCSP best_fit_q = params['q'] DCNL DCSP return (best_fitness, float(best_fit_q))
def quality_parsed(mime_type, parsed_ranges): DCNL  DCSP return fitness_and_quality_parsed(mime_type, parsed_ranges)[1]
def quality(mime_type, ranges): DCNL  DCSP parsed_ranges = [parse_media_range(r) for r in ranges.split(',')] DCNL DCSP return quality_parsed(mime_type, parsed_ranges)
def best_match(supported, header): DCNL  DCSP split_header = _filter_blank(header.split(',')) DCNL DCSP parsed_header = [parse_media_range(r) for r in split_header] DCNL DCSP weighted_matches = [] DCNL DCSP pos = 0 DCNL DCSP for mime_type in supported: DCNL DCSP  DCSP weighted_matches.append((fitness_and_quality_parsed(mime_type, parsed_header), pos, mime_type)) DCNL DCSP  DCSP pos += 1 DCNL DCSP weighted_matches.sort() DCNL DCSP return ((weighted_matches[(-1)][0][1] and weighted_matches[(-1)][2]) or '')
def start_replay(replay_file_name, **kwargs): DCNL  DCSP settings = ReplaySettings(replay_file_name, **kwargs) DCNL DCSP _patch_httplib(settings) DCNL DCSP _patch_requests(settings) DCNL DCSP _patch_urllib3(settings)
def stop_replay(): DCNL  DCSP _unpatch_httplib() DCNL DCSP _unpatch_requests() DCNL DCSP _unpatch_urllib3()
@contextmanager DCNL def replay(recording_file_name, url_key=None, body_key=None, headers_key=None): DCNL  DCSP start_replay(recording_file_name, url_key=url_key, body_key=body_key, headers_key=headers_key) DCNL DCSP (yield) DCNL DCSP stop_replay()
def sort_string(s): DCNL  DCSP return (''.join(sorted(list(s))) if s else s)
def sort_string_key(): DCNL  DCSP return sort_string
def filter_query_params(url, remove_params): DCNL  DCSP if (not url): DCNL DCSP  DCSP return url DCNL DCSP remove_params = dict((((p, None) if isinstance(p, basestring) else p) for p in remove_params)) DCNL DCSP parsed_url = urlparse.urlparse(url) DCNL DCSP parsed_qsl = urlparse.parse_qsl(parsed_url.query, keep_blank_values=True) DCNL DCSP filtered_qsl = [(p, remove_params.get(p, v)) for (p, v) in parsed_qsl] DCNL DCSP filtered_qsl = [(p, v) for (p, v) in filtered_qsl if (v is not None)] DCNL DCSP filtered_url = urlparse.ParseResult(scheme=parsed_url.scheme, netloc=parsed_url.netloc, path=parsed_url.path, params=parsed_url.params, query=urllib.urlencode(filtered_qsl), fragment=parsed_url.fragment) DCNL DCSP return urlparse.urlunparse(filtered_url)
def filter_query_params_key(remove_params): DCNL  DCSP def filter(url): DCNL DCSP  DCSP return filter_query_params(url, remove_params) DCNL DCSP return filter
def filter_headers(headers, remove_headers): DCNL  DCSP remove_headers = [((h, None) if isinstance(h, basestring) else h) for h in remove_headers] DCNL DCSP remove_headers = dict(((h.lower(), v) for (h, v) in remove_headers)) DCNL DCSP headers = dict(((h, remove_headers.get(h.lower(), v)) for (h, v) in headers.items())) DCNL DCSP headers = dict(((h, v) for (h, v) in headers.items() if (v is not None))) DCNL DCSP return headers
def filter_headers_key(remove_headers): DCNL  DCSP def filter(headers): DCNL DCSP  DCSP return filter_headers(headers, remove_headers) DCNL DCSP return filter
def _dthandler(obj): DCNL  DCSP if isinstance(obj, datetime.datetime): DCNL DCSP  DCSP return obj.isoformat() DCNL DCSP elif hasattr(obj, 'to_json'): DCNL DCSP  DCSP return obj.to_json() DCNL DCSP else: DCNL DCSP  DCSP return None
def am_i_online(url, expected_val=None, search_string=None, timeout=5, allow_redirects=True): DCNL  DCSP assert (not (search_string and (expected_val is not None))), 'Search DCSP string DCSP and DCSP expected DCSP value DCSP cannot DCSP both DCSP be DCSP set' DCNL DCSP from kalite.version import user_agent DCNL DCSP try: DCNL DCSP  DCSP if ((not search_string) and (expected_val is None)): DCNL DCSP  DCSP  DCSP response = requests.head(url, headers={'user-agent': user_agent()}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response = requests.get(url, timeout=timeout, allow_redirects=allow_redirects, headers={'user-agent': user_agent()}) DCNL DCSP  DCSP if (response.status_code != 200): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP elif ((not allow_redirects) and (response.url != url)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if (expected_val is not None): DCNL DCSP  DCSP  DCSP return (expected_val == response.text) DCNL DCSP  DCSP elif search_string: DCNL DCSP  DCSP  DCSP return (search_string in response.text) DCNL DCSP  DCSP return True DCNL DCSP except Exception as e: DCNL DCSP  DCSP return False
def set_query_params(url, param_dict): DCNL  DCSP (scheme, netloc, path, query_string, fragment) = urlsplit(url) DCNL DCSP query_params = parse_qs(query_string, keep_blank_values=True) DCNL DCSP for (param_name, param_value) in param_dict.items(): DCNL DCSP  DCSP if (param_value is None): DCNL DCSP  DCSP  DCSP del query_params[param_name] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP query_params[param_name] = [param_value] DCNL DCSP new_query_string = urlencode(query_params, doseq=True) DCNL DCSP return urlunsplit((scheme, netloc, path, new_query_string, fragment))
def get_ip_addresses(include_loopback=True): DCNL  DCSP system = platform.system() DCNL DCSP if (system.lower() in ['linux', 'darwin', 'macosx']): DCNL DCSP  DCSP ips = [iface.get('inet') for iface in ifcfg.interfaces().values()] DCNL DCSP elif (system.lower() == 'windows'): DCNL DCSP  DCSP ipconfig = os.popen('ipconfig DCSP /all').read() DCNL DCSP  DCSP ips = [match[1] for match in re.findall('IP(v4)? DCSP Address[\\.\\: DCSP ]+([\\d\\.]+)', ipconfig)] DCNL DCSP else: DCNL DCSP  DCSP ips = [] DCNL DCSP ips = (set(ips) - set([None, ''])) DCNL DCSP if include_loopback: DCNL DCSP  DCSP ips = ips.union(['127.0.0.1']) DCNL DCSP else: DCNL DCSP  DCSP ips = (ips - set(['127.0.0.1'])) DCNL DCSP return list(ips)
def calc_last_modified(request, *args, **kwargs): DCNL  DCSP assert ('cache_name' in kwargs), 'Must DCSP specify DCSP cache_name DCSP as DCSP a DCSP keyword DCSP arg.' DCNL DCSP try: DCNL DCSP  DCSP cache = get_cache(kwargs['cache_name']) DCNL DCSP  DCSP assert (isinstance(cache, FileBasedCache) or isinstance(cache, LocMemCache)), 'requires DCSP file-based DCSP or DCSP mem-based DCSP cache.' DCNL DCSP except InvalidCacheBackendError: DCNL DCSP  DCSP return None DCNL DCSP key = django_get_cache_key(request, cache=cache) DCNL DCSP if ((key is None) or (not cache.has_key(key))): DCNL DCSP  DCSP return None DCNL DCSP if isinstance(cache, FileBasedCache): DCNL DCSP  DCSP fname = cache._key_to_file(cache.make_key(key)) DCNL DCSP  DCSP if (not os.path.exists(fname)): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(fname)) DCNL DCSP elif isinstance(cache, LocMemCache): DCNL DCSP  DCSP creation_time = (cache._expire_info[cache.make_key(key)] - settings.CACHE_TIME) DCNL DCSP  DCSP last_modified = datetime.datetime.fromtimestamp(creation_time) DCNL DCSP return last_modified
def backend_cache_page(handler, cache_time=None, cache_name=None): DCNL  DCSP if (not cache_time): DCNL DCSP  DCSP cache_time = settings.CACHE_TIME DCNL DCSP if (not cache_name): DCNL DCSP  DCSP cache_name = 'default' DCNL DCSP if caching_is_enabled(): DCNL DCSP  DCSP @condition(last_modified_func=partial(calc_last_modified, cache_name=cache_name)) DCNL DCSP  DCSP @cache_control(no_cache=True) DCNL DCSP  DCSP @cache_page(cache_time, cache=cache_name) DCNL DCSP  DCSP def backend_cache_page_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP else: DCNL DCSP  DCSP def backend_cache_page_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP return backend_cache_page_wrapper_fn
def get_cache_key(path=None, url_name=None, cache=None, failure_ok=False): DCNL  DCSP assert ((path or url_name) and (not (path and url_name))), 'Must DCSP have DCSP path DCSP or DCSP url_name DCSP parameter, DCSP but DCSP not DCSP both' DCNL DCSP if (not cache): DCNL DCSP  DCSP cache = get_web_cache() DCNL DCSP request = HttpRequest() DCNL DCSP request.path = (path or reverse(url_name)) DCNL DCSP request.session = {settings.LANGUAGE_COOKIE_NAME: translation.get_language()} DCNL DCSP cache_key = django_get_cache_key(request, cache=get_web_cache()) DCNL DCSP if ((not cache_key) and (not failure_ok)): DCNL DCSP  DCSP pass DCNL DCSP return cache_key
def create_cache(path=None, url_name=None, cache=None, force=False): DCNL  DCSP assert ((path or url_name) and (not (path and url_name))), 'Must DCSP have DCSP path DCSP or DCSP url_name DCSP parameter, DCSP but DCSP not DCSP both' DCNL DCSP if (not cache): DCNL DCSP  DCSP cache = get_web_cache() DCNL DCSP if (not path): DCNL DCSP  DCSP path = reverse(url_name) DCNL DCSP if (force and has_cache_key(path=path, cache=cache)): DCNL DCSP  DCSP expire_page(path=path) DCNL DCSP  DCSP assert (not has_cache_key(path=path, cache=cache)) DCNL DCSP if (not has_cache_key(path=path, cache=cache)): DCNL DCSP  DCSP Client().get(path) DCNL DCSP if (not has_cache_key(path=path, cache=cache)): DCNL DCSP  DCSP pass
def api_handle_error_with_json(handler): DCNL  DCSP def api_handle_error_with_json_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP except PermissionDenied: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP except Http404: DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP logger.error('Error DCSP in DCSP JSON DCSP view: DCSP {}'.format(request.path)) DCNL DCSP  DCSP  DCSP traceback.print_exc() DCNL DCSP  DCSP  DCSP return JsonResponseMessageError((_('Unexpected DCSP error: DCSP %(err)s') % {'err': e}), status=500) DCNL DCSP return api_handle_error_with_json_wrapper_fn
def allow_jsonp(handler): DCNL  DCSP def allow_jsonp_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP if (('callback' in request.REQUEST) and (request.method == 'OPTIONS')): DCNL DCSP  DCSP  DCSP response = HttpResponse('', content_type='text/plain') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response = handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP if (not isinstance(response, JsonResponse)): DCNL DCSP  DCSP  DCSP  DCSP return response DCNL DCSP  DCSP  DCSP elif ('callback' in request.REQUEST): DCNL DCSP  DCSP  DCSP  DCSP response = JsonpResponse(response.content, request.REQUEST['callback']) DCNL DCSP  DCSP if (('callback' in request.REQUEST) and (request.method in ['OPTIONS', 'GET']) and ('HTTP_ORIGIN' in request.META)): DCNL DCSP  DCSP  DCSP response['Access-Control-Allow-Origin'] = request.META['HTTP_ORIGIN'] DCNL DCSP  DCSP  DCSP response['Access-Control-Allow-Methods'] = 'GET, DCSP OPTIONS' DCNL DCSP  DCSP  DCSP response['Access-Control-Max-Age'] = '1000' DCNL DCSP  DCSP  DCSP response['Access-Control-Allow-Headers'] = 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' DCNL DCSP  DCSP return response DCNL DCSP return allow_jsonp_wrapper_fn
def render_to_csv(context_keys, delimiter=',', key_label='key', order='stacked'): DCNL  DCSP def render_to_csv_renderer(function): DCNL DCSP  DCSP @wraps(function) DCNL DCSP  DCSP def render_to_csv_renderer_wrapper(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP The DCSP header DCSP row DCSP are DCSP all DCSP the DCSP keys DCSP from DCSP all DCSP the DCSP context_key DCSP dicts.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP The DCSP rows DCSP are DCSP accumulations DCSP of DCSP data DCSP across DCSP all DCSP the DCSP context_key DCSP dicts,\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP one DCSP row DCSP per DCSP entry DCSP in DCSP the DCSP dict.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP  DCSP output = function(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP if ((not isinstance(output, dict)) or (request.GET.get('format') != 'csv')): DCNL DCSP  DCSP  DCSP  DCSP return output DCNL DCSP  DCSP  DCSP output_string = StringIO() DCNL DCSP  DCSP  DCSP writer = csv.writer(output_string, delimiter=delimiter, quoting=csv.QUOTE_MINIMAL) DCNL DCSP  DCSP  DCSP if (order == 'stacked'): DCNL DCSP  DCSP  DCSP  DCSP ri = 0 DCNL DCSP  DCSP  DCSP  DCSP for context_key in context_keys: DCNL DCSP  DCSP  DCSP  DCSP  DCSP for (row_label, row_data) in output[context_key].iteritems(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (ri == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP col_labels = ([key_label] + row_data.keys()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP writer.writerow(col_labels) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP writer.writerow(([row_label] + row_data.values())) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ri += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP writer.writerow([]) DCNL DCSP  DCSP  DCSP elif (order == 'neighbors'): DCNL DCSP  DCSP  DCSP  DCSP row_labels = output[context_keys[0]].keys() DCNL DCSP  DCSP  DCSP  DCSP col_labels = ([key_label] + [kk for k in context_keys for kk in output[k][row_labels[0]].keys()]) DCNL DCSP  DCSP  DCSP  DCSP writer.writerow(col_labels) DCNL DCSP  DCSP  DCSP  DCSP for (ri, row_label) in enumerate(row_labels): DCNL DCSP  DCSP  DCSP  DCSP  DCSP row_data = [row_label] DCNL DCSP  DCSP  DCSP  DCSP  DCSP for k in context_keys: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP row_data += output[k][row_label].values() DCNL DCSP  DCSP  DCSP  DCSP  DCSP writer.writerow(row_data) DCNL DCSP  DCSP  DCSP return CsvResponse(output_string.getvalue()) DCNL DCSP  DCSP return render_to_csv_renderer_wrapper DCNL DCSP return render_to_csv_renderer
def all_classes_in_module(module_name): DCNL  DCSP assert (sys.version_info >= (2, 7)) DCNL DCSP import importlib DCNL DCSP module = importlib.import_module(module_name) DCNL DCSP objects = [getattr(module, obj_name) for obj_name in dir(module) if (getattr(getattr(module, obj_name), '__module__', '') == module_name)] DCNL DCSP classes = filter((lambda obj: (isinstance(obj, object) and (not isinstance(obj, types.FunctionType)))), objects) DCNL DCSP return classes
def allow_api_profiling(handler): DCNL  DCSP if (not settings.DEBUG): DCNL DCSP  DCSP return handler DCNL DCSP else: DCNL DCSP  DCSP def aap_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP response = handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP if ((not request.is_ajax()) and (response['Content-Type'] == 'application/json')): DCNL DCSP  DCSP  DCSP  DCSP response.content = ('<body>%s</body>' % response.content) DCNL DCSP  DCSP  DCSP  DCSP response['Content-Type'] = 'text/html' DCNL DCSP  DCSP  DCSP return response DCNL DCSP  DCSP return aap_wrapper_fn
def force_job(command, name='', frequency='YEARLY', stop=False, **kwargs): DCNL  DCSP jobs = Job.objects.filter(command=command) DCNL DCSP if (jobs.count() > 0): DCNL DCSP  DCSP job = jobs[0] DCNL DCSP else: DCNL DCSP  DCSP job = Job(command=command) DCNL DCSP job.frequency = frequency DCNL DCSP job.name = (job.name or name or command) DCNL DCSP job.save() DCNL DCSP if stop: DCNL DCSP  DCSP job.is_running = False DCNL DCSP else: DCNL DCSP  DCSP job.next_run = datetime.now() DCNL DCSP  DCSP job.args = ' DCSP '.join([('%s=%s' % (k, v)) for (k, v) in kwargs.iteritems()]) DCNL DCSP job.save() DCNL DCSP launch_job = ((not stop) and (not job.is_running)) DCNL DCSP if launch_job: DCNL DCSP  DCSP if (Job.objects.filter(disabled=False, is_running=False, next_run__lte=datetime.now()).count() > 0): DCNL DCSP  DCSP  DCSP call_command_async('cron')
def call_command_with_output(cmd, *args, **kwargs): DCNL  DCSP backups = [sys.stdout, sys.stderr, sys.exit] DCNL DCSP try: DCNL DCSP  DCSP sys.stdout = StringIO() DCNL DCSP  DCSP sys.stderr = StringIO() DCNL DCSP  DCSP sys.exit = (lambda exit_code: (sys.stderr.write(('Exit DCSP code: DCSP %d' % exit_code)) if exit_code else '')) DCNL DCSP  DCSP call_command(cmd, *args, **kwargs) DCNL DCSP  DCSP out = sys.stdout.getvalue() DCNL DCSP  DCSP err = sys.stderr.getvalue() DCNL DCSP  DCSP match = re.match('.*Exit DCSP code: DCSP ([0-9]+)$', err.replace('\n', ''), re.M) DCNL DCSP  DCSP if (match is None): DCNL DCSP  DCSP  DCSP val = 0 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP val = int(match.groups()[0]) DCNL DCSP  DCSP  DCSP match = re.match('^(.*)__newline__Exit DCSP code: DCSP [0-9]+$', err.replace('\n', '__newline__'), re.M) DCNL DCSP  DCSP  DCSP assert (match is not None) DCNL DCSP  DCSP  DCSP err = match.groups()[0].replace('__newline__', '\n') DCNL DCSP  DCSP return (out, err, val) DCNL DCSP finally: DCNL DCSP  DCSP sys.stdout = backups[0] DCNL DCSP  DCSP sys.stderr = backups[1] DCNL DCSP  DCSP sys.exit = backups[2]
def call_command_async(cmd, *args, **kwargs): DCNL  DCSP is_osx = (sys.platform == 'darwin') DCNL DCSP in_proc = kwargs.pop('in_proc', (not is_osx)) DCNL DCSP if in_proc: DCNL DCSP  DCSP return call_command_threaded(cmd, *args, **kwargs) DCNL DCSP else: DCNL DCSP  DCSP if hasattr(sys, 'pyrun'): DCNL DCSP  DCSP  DCSP if (settings.IS_SOURCE and ('kalite_dir' not in kwargs)): DCNL DCSP  DCSP  DCSP  DCSP kwargs['kalite_dir'] = settings.SOURCE_DIR DCNL DCSP  DCSP  DCSP if ('wait' not in kwargs): DCNL DCSP  DCSP  DCSP  DCSP kwargs['wait'] = False DCNL DCSP  DCSP  DCSP return call_outside_command_with_output(cmd, *args, **kwargs) DCNL DCSP  DCSP return call_command_subprocess(cmd, *args, **kwargs)
def call_outside_command_with_output(command, *args, **kwargs): DCNL  DCSP if settings.IS_SOURCE: DCNL DCSP  DCSP assert ('kalite_dir' in kwargs), "don't DCSP forget DCSP to DCSP specify DCSP the DCSP kalite_dir" DCNL DCSP  DCSP kalite_dir = kwargs.pop('kalite_dir') DCNL DCSP else: DCNL DCSP  DCSP kalite_dir = None DCNL DCSP output_to_stdout = kwargs.pop('output_to_stdout', False) DCNL DCSP output_to_stderr = kwargs.pop('output_to_stderr', False) DCNL DCSP wait = kwargs.pop('wait', True) DCNL DCSP if kalite_dir: DCNL DCSP  DCSP kalite_bin = os.path.join(kalite_dir, 'bin/kalite') DCNL DCSP else: DCNL DCSP  DCSP kalite_bin = 'kalite' DCNL DCSP cmd = (kalite_bin, 'manage', command) DCNL DCSP for arg in args: DCNL DCSP  DCSP cmd += (arg,) DCNL DCSP kwargs_keys = kwargs.keys() DCNL DCSP kwargs_keys = sorted(kwargs_keys, cmp=(lambda x, y: ((-1) if (x == 'settings') else 0))) DCNL DCSP for key in kwargs_keys: DCNL DCSP  DCSP val = kwargs[key] DCNL DCSP  DCSP key = key.replace(u'_', u'-') DCNL DCSP  DCSP prefix = (u'--' if (command != 'runcherrypyserver') else u'') DCNL DCSP  DCSP if isinstance(val, bool): DCNL DCSP  DCSP  DCSP cmd += ((u'%s%s' % (prefix, key)),) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cleaned_val = unicode(val).replace(' DCSP ', '') DCNL DCSP  DCSP  DCSP cmd += ((u'%s%s=%s' % (prefix, key, cleaned_val)),) DCNL DCSP p = subprocess.Popen(cmd, shell=False, stdout=(None if output_to_stdout else subprocess.PIPE), stderr=(None if output_to_stderr else subprocess.PIPE)) DCNL DCSP out = (p.communicate() if wait else (None, None)) DCNL DCSP return (out + ((1 if out[1] else 0), p))
def paginate_data(request, data_list, data_type='cur', per_page=25, page=1): DCNL  DCSP if (not data_list): DCNL DCSP  DCSP paged_data = [] DCNL DCSP  DCSP page_urls = {} DCNL DCSP else: DCNL DCSP  DCSP paginator = Paginator(data_list, per_page) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP paged_data = paginator.page(page) DCNL DCSP  DCSP  DCSP listed_pages = pages_to_show(paginator, page) DCNL DCSP  DCSP except PageNotAnInteger: DCNL DCSP  DCSP  DCSP paged_data = paginator.page(1) DCNL DCSP  DCSP  DCSP listed_pages = pages_to_show(paginator, 1) DCNL DCSP  DCSP except EmptyPage: DCNL DCSP  DCSP  DCSP paged_data = paginator.page(paginator.num_pages) DCNL DCSP  DCSP  DCSP listed_pages = pages_to_show(paginator, paginator.num_pages) DCNL DCSP if paged_data: DCNL DCSP  DCSP if paged_data.has_previous(): DCNL DCSP  DCSP  DCSP prevGETParam = request.GET.copy() DCNL DCSP  DCSP  DCSP prevGETParam[(data_type + '_page')] = paged_data.previous_page_number() DCNL DCSP  DCSP  DCSP previous_page_url = ('?' + prevGETParam.urlencode()) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP previous_page_url = '' DCNL DCSP  DCSP if paged_data.has_next(): DCNL DCSP  DCSP  DCSP nextGETParam = request.GET.copy() DCNL DCSP  DCSP  DCSP nextGETParam[(data_type + '_page')] = paged_data.next_page_number() DCNL DCSP  DCSP  DCSP next_page_url = ('?' + nextGETParam.urlencode()) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP next_page_url = '' DCNL DCSP  DCSP page_urls = {'next_page': next_page_url, 'prev_page': previous_page_url} DCNL DCSP  DCSP if listed_pages: DCNL DCSP  DCSP  DCSP for listed_page in listed_pages: DCNL DCSP  DCSP  DCSP  DCSP if (listed_page != (-1)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP GETParam = request.GET.copy() DCNL DCSP  DCSP  DCSP  DCSP  DCSP GETParam[(data_type + '_page')] = listed_page DCNL DCSP  DCSP  DCSP  DCSP  DCSP page_urls.update({listed_page: ('?' + GETParam.urlencode())}) DCNL DCSP  DCSP  DCSP paged_data.listed_pages = listed_pages DCNL DCSP  DCSP  DCSP paged_data.num_listed_pages = len(listed_pages) DCNL DCSP return (paged_data, page_urls)
def pages_to_show(paginator, page, pages_wanted=None, max_pages_wanted=9): DCNL  DCSP page = int(page) DCNL DCSP page_precedence_order = [page, 1, paginator.num_pages, (page + 1), (page - 1), (page + 2), (page - 2), 2, (paginator.num_pages - 1)] DCNL DCSP if (pages_wanted is None): DCNL DCSP  DCSP pages_wanted = [] DCNL DCSP pages_wanted = (set(pages_wanted) or set(page_precedence_order[:max_pages_wanted])) DCNL DCSP pages_to_show = set(paginator.page_range).intersection(pages_wanted) DCNL DCSP pages_to_show = sorted(pages_to_show) DCNL DCSP skip_pages = [x[1] for x in zip(pages_to_show[:(-1)], pages_to_show[1:]) if ((x[1] - x[0]) != 1)] DCNL DCSP for i in skip_pages: DCNL DCSP  DCSP pages_to_show.insert(pages_to_show.index(i), (-1)) DCNL DCSP return pages_to_show
def get_request_ip(request): DCNL  DCSP return (request.META.get('HTTP_X_FORWARDED_FOR') or request.META.get('REMOTE_ADDR') or request.META.get('HTTP_X_REAL_IP'))
def is_loopback_connection(request): DCNL  DCSP host_ip = socket.gethostbyname(socket.gethostname()) DCNL DCSP remote_ip = get_request_ip(request) DCNL DCSP return (remote_ip in ['127.0.0.1', 'localhost', host_ip])
def Deserializer(object_list, **options): DCNL  DCSP db = options.pop('using', DEFAULT_DB_ALIAS) DCNL DCSP src_version = options.pop('src_version') DCNL DCSP dest_version = options.pop('dest_version') DCNL DCSP assert dest_version, 'For DCSP KA DCSP Lite, DCSP we DCSP should DCSP always DCSP set DCSP the DCSP dest DCSP version DCSP to DCSP the DCSP current DCSP device.' DCNL DCSP models.get_apps() DCNL DCSP for d in object_list: DCNL DCSP  DCSP Model = _get_model(d['model']) DCNL DCSP  DCSP if hasattr(Model, 'version'): DCNL DCSP  DCSP  DCSP v_diff = version_diff(Model.minversion, dest_version) DCNL DCSP  DCSP  DCSP if ((v_diff > 0) or (v_diff is None)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP data = {Model._meta.pk.attname: Model._meta.pk.to_python(d['pk'])} DCNL DCSP  DCSP m2m_data = {} DCNL DCSP  DCSP for (field_name, field_value) in d['fields'].iteritems(): DCNL DCSP  DCSP  DCSP if isinstance(field_value, str): DCNL DCSP  DCSP  DCSP  DCSP field_value = smart_unicode(field_value, options.get('encoding', settings.DEFAULT_CHARSET), strings_only=True) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP field = Model._meta.get_field(field_name) DCNL DCSP  DCSP  DCSP except models.FieldDoesNotExist as fdne: DCNL DCSP  DCSP  DCSP  DCSP v_diff = version_diff(src_version, dest_version) DCNL DCSP  DCSP  DCSP  DCSP if ((v_diff > 0) or (v_diff is None)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise fdne DCNL DCSP  DCSP  DCSP if (field.rel and isinstance(field.rel, models.ManyToManyRel)): DCNL DCSP  DCSP  DCSP  DCSP if hasattr(field.rel.to._default_manager, 'get_by_natural_key'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP def m2m_convert(value): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(value, '__iter__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return field.rel.to._default_manager.db_manager(db).get_by_natural_key(*value).pk DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return smart_unicode(field.rel.to._meta.pk.to_python(value)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP m2m_convert = (lambda v: smart_unicode(field.rel.to._meta.pk.to_python(v))) DCNL DCSP  DCSP  DCSP  DCSP m2m_data[field.name] = [m2m_convert(pk) for pk in field_value] DCNL DCSP  DCSP  DCSP elif (field.rel and isinstance(field.rel, models.ManyToOneRel)): DCNL DCSP  DCSP  DCSP  DCSP if (field_value is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(field.rel.to._default_manager, 'get_by_natural_key'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(field_value, '__iter__'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP obj = field.rel.to._default_manager.db_manager(db).get_by_natural_key(*field_value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = getattr(obj, field.rel.field_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if field.rel.to._meta.pk.rel: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = value.pk DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = field.rel.to._meta.get_field(field.rel.field_name).to_python(field_value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = value DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = field.rel.to._meta.get_field(field.rel.field_name).to_python(field_value) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP data[field.name] = field.to_python(field_value) DCNL DCSP  DCSP (yield base.DeserializedObject(Model(**data), m2m_data))
def Deserializer(stream_or_string, **options): DCNL  DCSP if isinstance(stream_or_string, basestring): DCNL DCSP  DCSP stream = StringIO(stream_or_string) DCNL DCSP else: DCNL DCSP  DCSP stream = stream_or_string DCNL DCSP try: DCNL DCSP  DCSP for obj in PythonDeserializer(simplejson.load(stream), **options): DCNL DCSP  DCSP  DCSP (yield obj) DCNL DCSP except GeneratorExit: DCNL DCSP  DCSP raise DCNL DCSP except Exception as e: DCNL DCSP  DCSP raise DeserializationError(e)
def validate_via_booleans(handler): DCNL  DCSP def tod_wrapper_fn(*args, **kwargs): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return handler(*args, **kwargs) DCNL DCSP  DCSP except ValidationError as ve: DCNL DCSP  DCSP  DCSP if settings.DEBUG: DCNL DCSP  DCSP  DCSP  DCSP raise ve DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return tod_wrapper_fn
@register.tag DCNL def mkrange(parser, token): DCNL  DCSP tokens = token.split_contents() DCNL DCSP fnctl = tokens.pop(0) DCNL DCSP def error(): DCNL DCSP  DCSP raise TemplateSyntaxError, (('%s DCSP accepts DCSP the DCSP syntax: DCSP {%% DCSP %s DCSP [start,] DCSP ' + "stop[, DCSP step] DCSP as DCSP context_name DCSP %%}, DCSP where DCSP 'start', DCSP 'stop' DCSP ") + ("and DCSP 'step' DCSP must DCSP all DCSP be DCSP integers." % (fnctl, fnctl))) DCNL DCSP range_args = [] DCNL DCSP while True: DCNL DCSP  DCSP if (len(tokens) < 2): DCNL DCSP  DCSP  DCSP error() DCNL DCSP  DCSP token = tokens.pop(0) DCNL DCSP  DCSP if (token == 'as'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP range_args.append(token) DCNL DCSP if (len(tokens) != 1): DCNL DCSP  DCSP error() DCNL DCSP context_name = tokens.pop() DCNL DCSP return RangeNode(parser, range_args, context_name)
@register.filter DCNL def format_name(user, format='first_last'): DCNL  DCSP last_name = (getattr(user, 'last_name', None) or user.get('last_name', None)) DCNL DCSP first_name = (getattr(user, 'first_name', None) or user.get('first_name', None)) DCNL DCSP username = (getattr(user, 'username', None) or user.get('username', None)) DCNL DCSP if (format == 'first_last'): DCNL DCSP  DCSP if (last_name and first_name): DCNL DCSP  DCSP  DCSP return ('%s DCSP %s' % (first_name, last_name)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (first_name or last_name or username) DCNL DCSP elif (format == 'last_first'): DCNL DCSP  DCSP if (last_name and first_name): DCNL DCSP  DCSP  DCSP return ('%s, DCSP %s' % (last_name, first_name)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (last_name or first_name or username) DCNL DCSP else: DCNL DCSP  DCSP raise NotImplementedError(('Unrecognized DCSP format DCSP string: DCSP %s' % format))
def mailchimp_subscribe(email, mc_url): DCNL  DCSP r = requests.post(mc_url, data={'EMAIL': email}) DCNL DCSP return r.text
def download_video(youtube_id, download_path='../content/', download_url=OUTSIDE_DOWNLOAD_URL, format='mp4', callback=None): DCNL  DCSP ensure_dir(download_path) DCNL DCSP (url, thumb_url) = get_outside_video_urls(youtube_id, download_url=download_url, format=format) DCNL DCSP video_filename = ('%(id)s.%(format)s' % {'id': youtube_id, 'format': format}) DCNL DCSP filepath = os.path.join(download_path, video_filename) DCNL DCSP thumb_filename = ('%(id)s.png' % {'id': youtube_id}) DCNL DCSP thumb_filepath = os.path.join(download_path, thumb_filename) DCNL DCSP try: DCNL DCSP  DCSP response = download_file(url, filepath, callback_percent_proxy(callback, end_percent=95)) DCNL DCSP  DCSP if ((not os.path.isfile(filepath)) or ('content-length' not in response.headers) or (not (len(open(filepath, 'rb').read()) == int(response.headers['content-length'])))): DCNL DCSP  DCSP  DCSP raise URLNotFound('Video DCSP was DCSP not DCSP found, DCSP tried: DCSP {}'.format(url)) DCNL DCSP  DCSP response = download_file(thumb_url, thumb_filepath, callback_percent_proxy(callback, start_percent=95, end_percent=100)) DCNL DCSP  DCSP if ((not os.path.isfile(thumb_filepath)) or ('content-length' not in response.headers) or (not (len(open(thumb_filepath, 'rb').read()) == int(response.headers['content-length'])))): DCNL DCSP  DCSP  DCSP raise URLNotFound('Thumbnail DCSP was DCSP not DCSP found, DCSP tried: DCSP {}'.format(thumb_url)) DCNL DCSP except DownloadCancelled: DCNL DCSP  DCSP delete_downloaded_files(youtube_id, download_path) DCNL DCSP  DCSP raise DCNL DCSP except (socket.timeout, IOError) as e: DCNL DCSP  DCSP logging.exception(e) DCNL DCSP  DCSP logging.info('Timeout DCSP -- DCSP Network DCSP UnReachable') DCNL DCSP  DCSP delete_downloaded_files(youtube_id, download_path) DCNL DCSP  DCSP raise DCNL DCSP except Exception as e: DCNL DCSP  DCSP logging.exception(e) DCNL DCSP  DCSP delete_downloaded_files(youtube_id, download_path) DCNL DCSP  DCSP raise
def break_into_chunks(bigiterator, chunksize=500): DCNL  DCSP biglist = list(bigiterator) DCNL DCSP return [biglist[i:(i + chunksize)] for i in range(0, len(biglist), chunksize)]
def isnumeric(obj): DCNL  DCSP try: DCNL DCSP  DCSP float(obj) DCNL DCSP  DCSP return True DCNL DCSP except: DCNL DCSP  DCSP return False
def datediff(*args, **kwargs): DCNL  DCSP assert (len(args) in [1, 2]), 'Must DCSP specify DCSP two DCSP dates DCSP or DCSP one DCSP timedelta' DCNL DCSP units = kwargs.get('units', None) DCNL DCSP if (len(args) == 2): DCNL DCSP  DCSP tdelta = (args[0] - args[1]) DCNL DCSP elif (len(args) == 1): DCNL DCSP  DCSP tdelta = args[0] DCNL DCSP diff_secs = (((((tdelta.days * 24) * 60) * 60) + tdelta.seconds) + (tdelta.microseconds / 1000000.0)) DCNL DCSP if (units in [None, 'second', 'seconds']): DCNL DCSP  DCSP return diff_secs DCNL DCSP elif (units in ['microsecond', 'microseconds']): DCNL DCSP  DCSP return (diff_secs * 1000000) DCNL DCSP elif (units in ['minute', 'minutes']): DCNL DCSP  DCSP return (diff_secs / 60.0) DCNL DCSP elif (units in ['hour', 'hours']): DCNL DCSP  DCSP return (diff_secs / 3600.0) DCNL DCSP elif (units in ['day', 'days']): DCNL DCSP  DCSP return (diff_secs / (24 * 3600.0)) DCNL DCSP elif (units in ['week', 'weeks']): DCNL DCSP  DCSP return (diff_secs / ((7 * 24) * 3600.0)) DCNL DCSP else: DCNL DCSP  DCSP raise NotImplementedError(("Unrecognized DCSP units: DCSP '%s'" % units))
def get_host_name(): DCNL  DCSP name = '' DCNL DCSP try: DCNL DCSP  DCSP name = eval('os.uname()[1]') DCNL DCSP except: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP name = eval("os.getenv('HOSTNAME', DCSP os.getenv('COMPUTERNAME') DCSP or DCSP '').lower()") DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP name = '' DCNL DCSP return name
def version_diff(v1, v2): DCNL  DCSP if ((v1 is None) or (v2 is None)): DCNL DCSP  DCSP return None DCNL DCSP v1_parts = v1.split('.') DCNL DCSP v2_parts = v2.split('.') DCNL DCSP v1_parts += (['0'] * (len(v2_parts) - len(v1_parts))) DCNL DCSP v2_parts += (['0'] * (len(v1_parts) - len(v2_parts))) DCNL DCSP for (v1p, v2p) in zip(v1_parts, v2_parts): DCNL DCSP  DCSP cur_diff = (int(v1p) - int(v2p)) DCNL DCSP  DCSP if cur_diff: DCNL DCSP  DCSP  DCSP return cur_diff DCNL DCSP return 0
def ensure_dir(path): DCNL  DCSP try: DCNL DCSP  DCSP os.makedirs(path) DCNL DCSP except OSError as e: DCNL DCSP  DCSP if (e.errno == errno.EEXIST): DCNL DCSP  DCSP  DCSP if (not os.path.isdir(path)): DCNL DCSP  DCSP  DCSP  DCSP raise OSError(errno.ENOTDIR, ("Not DCSP a DCSP directory: DCSP '%s'" % path)) DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise
def convert_date_input(date_to_convert): DCNL  DCSP if date_to_convert: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP converted_date = datetime.datetime.strptime(date_to_convert, '%m/%d/%Y') DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise InvalidDateFormat() DCNL DCSP  DCSP return converted_date DCNL DCSP else: DCNL DCSP  DCSP return date_to_convert
def get_module_source_file(module_name): DCNL  DCSP module_name.split DCNL DCSP source_file = __import__(module_name, fromlist=['']).__file__ DCNL DCSP if source_file.endswith('.pyc'): DCNL DCSP  DCSP return source_file[0:(-1)] DCNL DCSP return source_file
def max_none(data): DCNL  DCSP if (not data): DCNL DCSP  DCSP return max(data) DCNL DCSP non_none_data = [] DCNL DCSP for d in data: DCNL DCSP  DCSP if (d is not None): DCNL DCSP  DCSP  DCSP non_none_data.append(d) DCNL DCSP return (max(non_none_data) if non_none_data else None)
def json_ascii_decoder(data): DCNL  DCSP rv = {} DCNL DCSP for (key, value) in data.iteritems(): DCNL DCSP  DCSP if isinstance(key, unicode): DCNL DCSP  DCSP  DCSP key = key.encode('utf-8') DCNL DCSP  DCSP if isinstance(value, unicode): DCNL DCSP  DCSP  DCSP value = value.encode('utf-8') DCNL DCSP  DCSP elif isinstance(value, list): DCNL DCSP  DCSP  DCSP value = _decode_list(value) DCNL DCSP  DCSP elif isinstance(value, dict): DCNL DCSP  DCSP  DCSP value = json_ascii_decoder(value) DCNL DCSP  DCSP rv[key] = value DCNL DCSP return rv
def sort_version_list(version_list, reverse): DCNL  DCSP version_list.sort(reverse=reverse, key=(lambda s: StrictVersion(s))) DCNL DCSP return version_list
def resolve_model(model_path): DCNL  DCSP (module_path, model_name) = model_path.rsplit('.', 1) DCNL DCSP module = importlib.import_module(module_path) DCNL DCSP model = getattr(module, model_name) DCNL DCSP return model
def low(logging=logging): DCNL  DCSP return _set_priority('Low', logging=logging)
def lowest(logging=logging): DCNL  DCSP return _set_priority('Lowest', logging=logging)
def normal(logging=logging): DCNL  DCSP return _set_priority('Normal', logging=logging)
def system_script_extension(system=None): DCNL  DCSP exts = {'windows': '.bat', 'darwin': '.command', 'linux': '.sh'} DCNL DCSP system = (system or platform.system()) DCNL DCSP return exts.get(system.lower(), '.sh')
def system_specific_scripts(system=None): DCNL  DCSP if is_windows(system): DCNL DCSP  DCSP return ['.bat', '.vbs'] DCNL DCSP elif is_osx(system): DCNL DCSP  DCSP return ['.command', '.sh'] DCNL DCSP else: DCNL DCSP  DCSP return ['.sh']
def not_system_specific_scripts(system=None): DCNL  DCSP all_scripts = [fil for syst in ALL_SYSTEMS for fil in system_specific_scripts(syst)] DCNL DCSP return list((set(all_scripts) - set(system_specific_scripts(system))))
def _default_callback_zip(src_path, fi, nfiles): DCNL  DCSP sys.stdout.write(('Adding DCSP to DCSP zip DCSP (%d DCSP of DCSP %d): DCSP %s\n' % ((fi + 1), nfiles, src_path)))
def system_specific_zipping(files_dict, zip_file=None, compression=ZIP_DEFLATED, callback=_default_callback_zip): DCNL  DCSP if (not zip_file): DCNL DCSP  DCSP zip_file = tempfile.mkstemp()[1] DCNL DCSP zfile = None DCNL DCSP try: DCNL DCSP  DCSP zfile = ZipFile(zip_file, 'w', compression) DCNL DCSP  DCSP for (fi, (dest_path, src_path)) in enumerate(files_dict.iteritems()): DCNL DCSP  DCSP  DCSP if callback: DCNL DCSP  DCSP  DCSP  DCSP callback(src_path, fi, len(files_dict)) DCNL DCSP  DCSP  DCSP ext = os.path.splitext(dest_path)[1] DCNL DCSP  DCSP  DCSP if (ext not in not_system_specific_scripts(system='windows')): DCNL DCSP  DCSP  DCSP  DCSP zfile.write(src_path, arcname=dest_path) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP info = ZipInfo(dest_path) DCNL DCSP  DCSP  DCSP  DCSP info.external_attr = (509 << ((1 - is_osx()) * 16L)) DCNL DCSP  DCSP  DCSP  DCSP with open(src_path, 'r') as fh: DCNL DCSP  DCSP  DCSP  DCSP  DCSP zfile.writestr(info, fh.read()) DCNL DCSP  DCSP zfile.close() DCNL DCSP finally: DCNL DCSP  DCSP if zfile: DCNL DCSP  DCSP  DCSP zfile.close()
def _default_callback_unzip(afile, fi, nfiles): DCNL  DCSP if ((fi > 0) and ((fi % round((nfiles / 10))) == 0)): DCNL DCSP  DCSP pct_done = round(((100.0 * (fi + 1.0)) / nfiles)) DCNL DCSP  DCSP sys.stdout.write((' DCSP %d%%' % pct_done)) DCNL DCSP  DCSP sys.stdout.flush() DCNL DCSP if ((not is_windows()) and ((os.path.splitext(afile)[1] in system_specific_scripts()) or afile.endswith('manage.py'))): DCNL DCSP  DCSP sys.stdout.write((' DCTB Changing DCSP perms DCSP on DCSP script DCSP %s\n' % afile))
def system_specific_unzipping(zip_file, dest_dir, callback=_default_callback_unzip): DCNL  DCSP if (not os.path.exists(dest_dir)): DCNL DCSP  DCSP os.mkdir(dest_dir) DCNL DCSP if (not is_zipfile(zip_file)): DCNL DCSP  DCSP raise Exception('bad DCSP zip DCSP file') DCNL DCSP zip = ZipFile(zip_file, 'r') DCNL DCSP nfiles = len(zip.namelist()) DCNL DCSP for (fi, afile) in enumerate(zip.namelist()): DCNL DCSP  DCSP if callback: DCNL DCSP  DCSP  DCSP callback(afile, fi, nfiles) DCNL DCSP  DCSP zip.extract(afile, path=dest_dir) DCNL DCSP  DCSP if ((not is_windows()) and ((os.path.splitext(afile)[1] in system_specific_scripts()) or afile.endswith('manage.py'))): DCNL DCSP  DCSP  DCSP os.chmod(os.path.realpath(((dest_dir + '/') + afile)), 509)
def crypt(word, salt=None, iterations=None): DCNL  DCSP if (salt is None): DCNL DCSP  DCSP salt = _makesalt() DCNL DCSP if isunicode(salt): DCNL DCSP  DCSP salt = salt.encode('us-ascii').decode('us-ascii') DCNL DCSP elif isbytes(salt): DCNL DCSP  DCSP salt = salt.decode('us-ascii') DCNL DCSP else: DCNL DCSP  DCSP raise TypeError('salt DCSP must DCSP be DCSP a DCSP string') DCNL DCSP if isunicode(word): DCNL DCSP  DCSP word = word.encode('UTF-8') DCNL DCSP elif (not isbytes(word)): DCNL DCSP  DCSP raise TypeError('word DCSP must DCSP be DCSP a DCSP string DCSP or DCSP unicode') DCNL DCSP if salt.startswith('$p5k2$'): DCNL DCSP  DCSP (iterations, salt, dummy) = salt.split('$')[2:5] DCNL DCSP  DCSP if (iterations == ''): DCNL DCSP  DCSP  DCSP iterations = 400 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP converted = int(iterations, 16) DCNL DCSP  DCSP  DCSP if (iterations != ('%x' % converted)): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Invalid DCSP salt') DCNL DCSP  DCSP  DCSP iterations = converted DCNL DCSP  DCSP  DCSP if (not (iterations >= 1)): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Invalid DCSP salt') DCNL DCSP allowed = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./' DCNL DCSP for ch in salt: DCNL DCSP  DCSP if (ch not in allowed): DCNL DCSP  DCSP  DCSP raise ValueError(('Illegal DCSP character DCSP %r DCSP in DCSP salt' % (ch,))) DCNL DCSP if ((iterations is None) or (iterations == 400)): DCNL DCSP  DCSP iterations = 400 DCNL DCSP  DCSP salt = ('$p5k2$$' + salt) DCNL DCSP else: DCNL DCSP  DCSP salt = ('$p5k2$%x$%s' % (iterations, salt)) DCNL DCSP rawhash = pbkdf2(word, salt, iterations) DCNL DCSP return ((salt + '$') + b64encode(rawhash, './'))
def _makesalt(): DCNL  DCSP binarysalt = b('').join([pack('@H', randint(0, 65535)) for i in range(3)]) DCNL DCSP return b64encode(binarysalt, './')
@register.tag DCNL def announcements(parser, token): DCNL  DCSP return AnnouncementsNode.handle_token(parser, token)
def get_template(template_name): DCNL  DCSP (template, origin) = find_template(template_name) DCNL DCSP if (not hasattr(template, 'render')): DCNL DCSP  DCSP template = get_template_from_string(template, origin, template_name) DCNL DCSP return template
def get_template_from_string(source, origin=None, name=None): DCNL  DCSP return Template(source, origin, name)
def render_to_string(template_name, dictionary=None, context_instance=None): DCNL  DCSP dictionary = (dictionary or {}) DCNL DCSP if isinstance(template_name, (list, tuple)): DCNL DCSP  DCSP t = select_template(template_name) DCNL DCSP else: DCNL DCSP  DCSP t = get_template(template_name) DCNL DCSP if (not context_instance): DCNL DCSP  DCSP return t.render(Context(dictionary)) DCNL DCSP context_instance.update(dictionary) DCNL DCSP try: DCNL DCSP  DCSP return t.render(context_instance) DCNL DCSP finally: DCNL DCSP  DCSP context_instance.pop()
def select_template(template_name_list): DCNL  DCSP if (not template_name_list): DCNL DCSP  DCSP raise TemplateDoesNotExist('No DCSP template DCSP names DCSP provided') DCNL DCSP not_found = [] DCNL DCSP for template_name in template_name_list: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return get_template(template_name) DCNL DCSP  DCSP except TemplateDoesNotExist as e: DCNL DCSP  DCSP  DCSP if (e.args[0] not in not_found): DCNL DCSP  DCSP  DCSP  DCSP not_found.append(e.args[0]) DCNL DCSP  DCSP  DCSP continue DCNL DCSP raise TemplateDoesNotExist(', DCSP '.join(not_found))
@register.tag DCNL def autoescape(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if (len(args) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'autoescape' DCSP tag DCSP requires DCSP exactly DCSP one DCSP argument.") DCNL DCSP arg = args[1] DCNL DCSP if (arg not in (u'on', u'off')): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'autoescape' DCSP argument DCSP should DCSP be DCSP 'on' DCSP or DCSP 'off'") DCNL DCSP nodelist = parser.parse((u'endautoescape',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return AutoEscapeControlNode((arg == u'on'), nodelist)
@register.tag DCNL def comment(parser, token): DCNL  DCSP parser.skip_past(u'endcomment') DCNL DCSP return CommentNode()
@register.tag DCNL def cycle(parser, token): DCNL  DCSP args = token.split_contents() DCNL DCSP if (len(args) < 2): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'cycle' DCSP tag DCSP requires DCSP at DCSP least DCSP two DCSP arguments") DCNL DCSP if (u',' in args[1]): DCNL DCSP  DCSP args[1:2] = [(u'"%s"' % arg) for arg in args[1].split(u',')] DCNL DCSP if (len(args) == 2): DCNL DCSP  DCSP name = args[1] DCNL DCSP  DCSP if (not hasattr(parser, u'_namedCycleNodes')): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"No DCSP named DCSP cycles DCSP in DCSP template. DCSP '%s' DCSP is DCSP not DCSP defined" % name)) DCNL DCSP  DCSP if (not (name in parser._namedCycleNodes)): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"Named DCSP cycle DCSP '%s' DCSP does DCSP not DCSP exist" % name)) DCNL DCSP  DCSP return parser._namedCycleNodes[name] DCNL DCSP as_form = False DCNL DCSP if (len(args) > 4): DCNL DCSP  DCSP if (args[(-3)] == u'as'): DCNL DCSP  DCSP  DCSP if (args[(-1)] != u'silent'): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"Only DCSP 'silent' DCSP flag DCSP is DCSP allowed DCSP after DCSP cycle's DCSP name, DCSP not DCSP '%s'." % args[(-1)])) DCNL DCSP  DCSP  DCSP as_form = True DCNL DCSP  DCSP  DCSP silent = True DCNL DCSP  DCSP  DCSP args = args[:(-1)] DCNL DCSP  DCSP elif (args[(-2)] == u'as'): DCNL DCSP  DCSP  DCSP as_form = True DCNL DCSP  DCSP  DCSP silent = False DCNL DCSP if as_form: DCNL DCSP  DCSP name = args[(-1)] DCNL DCSP  DCSP values = [parser.compile_filter(arg) for arg in args[1:(-2)]] DCNL DCSP  DCSP node = CycleNode(values, name, silent=silent) DCNL DCSP  DCSP if (not hasattr(parser, u'_namedCycleNodes')): DCNL DCSP  DCSP  DCSP parser._namedCycleNodes = {} DCNL DCSP  DCSP parser._namedCycleNodes[name] = node DCNL DCSP else: DCNL DCSP  DCSP values = [parser.compile_filter(arg) for arg in args[1:]] DCNL DCSP  DCSP node = CycleNode(values) DCNL DCSP return node
@register.tag DCNL def debug(parser, token): DCNL  DCSP return DebugNode()
@register.tag(u'filter') DCNL def do_filter(parser, token): DCNL  DCSP (_, rest) = token.contents.split(None, 1) DCNL DCSP filter_expr = parser.compile_filter((u'var|%s' % rest)) DCNL DCSP for (func, unused) in filter_expr.filters: DCNL DCSP  DCSP if (getattr(func, u'_decorated_function', func).__name__ in (u'escape', u'safe')): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u'"filter DCSP %s" DCSP is DCSP not DCSP permitted. DCSP  DCSP Use DCSP the DCSP "autoescape" DCSP tag DCSP instead.' % func.__name__)) DCNL DCSP nodelist = parser.parse((u'endfilter',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return FilterNode(filter_expr, nodelist)
@register.tag DCNL def firstof(parser, token): DCNL  DCSP bits = token.split_contents()[1:] DCNL DCSP if (len(bits) < 1): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'firstof' DCSP statement DCSP requires DCSP at DCSP least DCSP one DCSP argument") DCNL DCSP return FirstOfNode([parser.compile_filter(bit) for bit in bits])
@register.tag(u'for') DCNL def do_for(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP if (len(bits) < 4): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'for' DCSP statements DCSP should DCSP have DCSP at DCSP least DCSP four DCSP words: DCSP %s" % token.contents)) DCNL DCSP is_reversed = (bits[(-1)] == u'reversed') DCNL DCSP in_index = ((is_reversed and (-3)) or (-2)) DCNL DCSP if (bits[in_index] != u'in'): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'for' DCSP statements DCSP should DCSP use DCSP the DCSP format DCSP 'for DCSP x DCSP in DCSP y': DCSP %s" % token.contents)) DCNL DCSP loopvars = re.split(u' DCSP *, DCSP *', u' DCSP '.join(bits[1:in_index])) DCNL DCSP for var in loopvars: DCNL DCSP  DCSP if ((not var) or (u' DCSP ' in var)): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'for' DCSP tag DCSP received DCSP an DCSP invalid DCSP argument: DCSP %s" % token.contents)) DCNL DCSP sequence = parser.compile_filter(bits[(in_index + 1)]) DCNL DCSP nodelist_loop = parser.parse((u'empty', u'endfor')) DCNL DCSP token = parser.next_token() DCNL DCSP if (token.contents == u'empty'): DCNL DCSP  DCSP nodelist_empty = parser.parse((u'endfor',)) DCNL DCSP  DCSP parser.delete_first_token() DCNL DCSP else: DCNL DCSP  DCSP nodelist_empty = None DCNL DCSP return ForNode(loopvars, sequence, is_reversed, nodelist_loop, nodelist_empty)
@register.tag DCNL def ifequal(parser, token): DCNL  DCSP return do_ifequal(parser, token, False)
@register.tag DCNL def ifnotequal(parser, token): DCNL  DCSP return do_ifequal(parser, token, True)
@register.tag(u'if') DCNL def do_if(parser, token): DCNL  DCSP bits = token.split_contents()[1:] DCNL DCSP condition = TemplateIfParser(parser, bits).parse() DCNL DCSP nodelist = parser.parse((u'elif', u'else', u'endif')) DCNL DCSP conditions_nodelists = [(condition, nodelist)] DCNL DCSP token = parser.next_token() DCNL DCSP while token.contents.startswith(u'elif'): DCNL DCSP  DCSP bits = token.split_contents()[1:] DCNL DCSP  DCSP condition = TemplateIfParser(parser, bits).parse() DCNL DCSP  DCSP nodelist = parser.parse((u'elif', u'else', u'endif')) DCNL DCSP  DCSP conditions_nodelists.append((condition, nodelist)) DCNL DCSP  DCSP token = parser.next_token() DCNL DCSP if (token.contents == u'else'): DCNL DCSP  DCSP nodelist = parser.parse((u'endif',)) DCNL DCSP  DCSP conditions_nodelists.append((None, nodelist)) DCNL DCSP  DCSP token = parser.next_token() DCNL DCSP assert (token.contents == u'endif') DCNL DCSP return IfNode(conditions_nodelists)
@register.tag DCNL def ifchanged(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP nodelist_true = parser.parse((u'else', u'endifchanged')) DCNL DCSP token = parser.next_token() DCNL DCSP if (token.contents == u'else'): DCNL DCSP  DCSP nodelist_false = parser.parse((u'endifchanged',)) DCNL DCSP  DCSP parser.delete_first_token() DCNL DCSP else: DCNL DCSP  DCSP nodelist_false = NodeList() DCNL DCSP values = [parser.compile_filter(bit) for bit in bits[1:]] DCNL DCSP return IfChangedNode(nodelist_true, nodelist_false, *values)
@register.tag DCNL def ssi(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP parsed = False DCNL DCSP if (len(bits) not in (2, 3)): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'ssi' DCSP tag DCSP takes DCSP one DCSP argument: DCSP the DCSP path DCSP to DCSP the DCSP file DCSP to DCSP be DCSP included") DCNL DCSP if (len(bits) == 3): DCNL DCSP  DCSP if (bits[2] == u'parsed'): DCNL DCSP  DCSP  DCSP parsed = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"Second DCSP (optional) DCSP argument DCSP to DCSP %s DCSP tag DCSP must DCSP be DCSP 'parsed'" % bits[0])) DCNL DCSP filepath = parser.compile_filter(bits[1]) DCNL DCSP return SsiNode(filepath, parsed)
@register.tag DCNL def load(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP if ((len(bits) >= 4) and (bits[(-2)] == u'from')): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP taglib = bits[(-1)] DCNL DCSP  DCSP  DCSP lib = get_library(taglib) DCNL DCSP  DCSP except InvalidTemplateLibrary as e: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP is DCSP not DCSP a DCSP valid DCSP tag DCSP library: DCSP %s" % (taglib, e))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP temp_lib = Library() DCNL DCSP  DCSP  DCSP for name in bits[1:(-2)]: DCNL DCSP  DCSP  DCSP  DCSP if (name in lib.tags): DCNL DCSP  DCSP  DCSP  DCSP  DCSP temp_lib.tags[name] = lib.tags[name] DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (name in lib.filters): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP temp_lib.filters[name] = lib.filters[name] DCNL DCSP  DCSP  DCSP  DCSP elif (name in lib.filters): DCNL DCSP  DCSP  DCSP  DCSP  DCSP temp_lib.filters[name] = lib.filters[name] DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP is DCSP not DCSP a DCSP valid DCSP tag DCSP or DCSP filter DCSP in DCSP tag DCSP library DCSP '%s'" % (name, taglib))) DCNL DCSP  DCSP  DCSP parser.add_library(temp_lib) DCNL DCSP else: DCNL DCSP  DCSP for taglib in bits[1:]: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP lib = get_library(taglib) DCNL DCSP  DCSP  DCSP  DCSP parser.add_library(lib) DCNL DCSP  DCSP  DCSP except InvalidTemplateLibrary as e: DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP is DCSP not DCSP a DCSP valid DCSP tag DCSP library: DCSP %s" % (taglib, e))) DCNL DCSP return LoadNode()
@register.tag DCNL def now(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'now' DCSP statement DCSP takes DCSP one DCSP argument") DCNL DCSP format_string = bits[1][1:(-1)] DCNL DCSP return NowNode(format_string)
@register.tag DCNL def regroup(parser, token): DCNL  DCSP firstbits = token.contents.split(None, 3) DCNL DCSP if (len(firstbits) != 4): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'regroup' DCSP tag DCSP takes DCSP five DCSP arguments") DCNL DCSP target = parser.compile_filter(firstbits[1]) DCNL DCSP if (firstbits[2] != u'by'): DCNL DCSP  DCSP raise TemplateSyntaxError(u"second DCSP argument DCSP to DCSP 'regroup' DCSP tag DCSP must DCSP be DCSP 'by'") DCNL DCSP lastbits_reversed = firstbits[3][::(-1)].split(None, 2) DCNL DCSP if (lastbits_reversed[1][::(-1)] != u'as'): DCNL DCSP  DCSP raise TemplateSyntaxError(u"next-to-last DCSP argument DCSP to DCSP 'regroup' DCSP tag DCSP must DCSP be DCSP 'as'") DCNL DCSP var_name = lastbits_reversed[0][::(-1)] DCNL DCSP expression = parser.compile_filter(((var_name + VARIABLE_ATTRIBUTE_SEPARATOR) + lastbits_reversed[2][::(-1)])) DCNL DCSP return RegroupNode(target, expression, var_name)
@register.tag DCNL def spaceless(parser, token): DCNL  DCSP nodelist = parser.parse((u'endspaceless',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return SpacelessNode(nodelist)
@register.tag DCNL def templatetag(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(u"'templatetag' DCSP statement DCSP takes DCSP one DCSP argument") DCNL DCSP tag = bits[1] DCNL DCSP if (tag not in TemplateTagNode.mapping): DCNL DCSP  DCSP raise TemplateSyntaxError((u"Invalid DCSP templatetag DCSP argument: DCSP '%s'. DCSP Must DCSP be DCSP one DCSP of: DCSP %s" % (tag, list(TemplateTagNode.mapping)))) DCNL DCSP return TemplateTagNode(tag)
@register.tag DCNL def url(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) < 2): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP takes DCSP at DCSP least DCSP one DCSP argument DCSP (path DCSP to DCSP a DCSP view)" % bits[0])) DCNL DCSP try: DCNL DCSP  DCSP viewname = parser.compile_filter(bits[1]) DCNL DCSP except TemplateSyntaxError as exc: DCNL DCSP  DCSP exc.args = ((exc.args[0] + u". DCSP The DCSP syntax DCSP of DCSP 'url' DCSP changed DCSP in DCSP Django DCSP 1.5, DCSP see DCSP the DCSP docs."),) DCNL DCSP  DCSP raise DCNL DCSP args = [] DCNL DCSP kwargs = {} DCNL DCSP asvar = None DCNL DCSP bits = bits[2:] DCNL DCSP if ((len(bits) >= 2) and (bits[(-2)] == u'as')): DCNL DCSP  DCSP asvar = bits[(-1)] DCNL DCSP  DCSP bits = bits[:(-2)] DCNL DCSP if len(bits): DCNL DCSP  DCSP for bit in bits: DCNL DCSP  DCSP  DCSP match = kwarg_re.match(bit) DCNL DCSP  DCSP  DCSP if (not match): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError(u'Malformed DCSP arguments DCSP to DCSP url DCSP tag') DCNL DCSP  DCSP  DCSP (name, value) = match.groups() DCNL DCSP  DCSP  DCSP if name: DCNL DCSP  DCSP  DCSP  DCSP kwargs[name] = parser.compile_filter(value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP args.append(parser.compile_filter(value)) DCNL DCSP return URLNode(viewname, args, kwargs, asvar)
@register.tag DCNL def verbatim(parser, token): DCNL  DCSP nodelist = parser.parse((u'endverbatim',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return VerbatimNode(nodelist.render(Context()))
@register.tag DCNL def widthratio(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP if (len(bits) != 4): DCNL DCSP  DCSP raise TemplateSyntaxError(u'widthratio DCSP takes DCSP three DCSP arguments') DCNL DCSP (tag, this_value_expr, max_value_expr, max_width) = bits DCNL DCSP return WidthRatioNode(parser.compile_filter(this_value_expr), parser.compile_filter(max_value_expr), parser.compile_filter(max_width))
@register.tag(u'with') DCNL def do_with(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP remaining_bits = bits[1:] DCNL DCSP extra_context = token_kwargs(remaining_bits, parser, support_legacy=True) DCNL DCSP if (not extra_context): DCNL DCSP  DCSP raise TemplateSyntaxError((u'%r DCSP expected DCSP at DCSP least DCSP one DCSP variable DCSP assignment' % bits[0])) DCNL DCSP if remaining_bits: DCNL DCSP  DCSP raise TemplateSyntaxError((u'%r DCSP received DCSP an DCSP invalid DCSP token: DCSP %r' % (bits[0], remaining_bits[0]))) DCNL DCSP nodelist = parser.parse((u'endwith',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return WithNode(None, None, nodelist, extra_context=extra_context)
def infix(bp, func): DCNL  DCSP class Operator(TokenBase, ): DCNL DCSP  DCSP lbp = bp DCNL DCSP  DCSP def led(self, left, parser): DCNL DCSP  DCSP  DCSP self.first = left DCNL DCSP  DCSP  DCSP self.second = parser.expression(bp) DCNL DCSP  DCSP  DCSP return self DCNL DCSP  DCSP def eval(self, context): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP return func(context, self.first, self.second) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return Operator
def prefix(bp, func): DCNL  DCSP class Operator(TokenBase, ): DCNL DCSP  DCSP lbp = bp DCNL DCSP  DCSP def nud(self, parser): DCNL DCSP  DCSP  DCSP self.first = parser.expression(bp) DCNL DCSP  DCSP  DCSP self.second = None DCNL DCSP  DCSP  DCSP return self DCNL DCSP  DCSP def eval(self, context): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP return func(context, self.first) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return Operator
def stringfilter(func): DCNL  DCSP def _dec(*args, **kwargs): DCNL DCSP  DCSP if args: DCNL DCSP  DCSP  DCSP args = list(args) DCNL DCSP  DCSP  DCSP args[0] = force_text(args[0]) DCNL DCSP  DCSP  DCSP if (isinstance(args[0], SafeData) and getattr(_dec._decorated_function, u'is_safe', False)): DCNL DCSP  DCSP  DCSP  DCSP return mark_safe(func(*args, **kwargs)) DCNL DCSP  DCSP return func(*args, **kwargs) DCNL DCSP _dec._decorated_function = getattr(func, u'_decorated_function', func) DCNL DCSP for attr in (u'is_safe', u'needs_autoescape'): DCNL DCSP  DCSP if hasattr(func, attr): DCNL DCSP  DCSP  DCSP import warnings DCNL DCSP  DCSP  DCSP warnings.warn((u'Setting DCSP the DCSP %s DCSP attribute DCSP of DCSP a DCSP template DCSP filter DCSP function DCSP is DCSP deprecated; DCSP use DCSP @register.filter(%s=%s) DCSP instead' % (attr, attr, getattr(func, attr))), DeprecationWarning) DCNL DCSP  DCSP  DCSP setattr(_dec, attr, getattr(func, attr)) DCNL DCSP return wraps(func)(_dec)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def addslashes(value): DCNL  DCSP return value.replace(u'\\', u'\\\\').replace(u'"', u'\\"').replace(u"'", u"\\'")
@register.filter(is_safe=True) DCNL @stringfilter DCNL def capfirst(value): DCNL  DCSP return (value and (value[0].upper() + value[1:]))
@register.filter(u'escapejs') DCNL @stringfilter DCNL def escapejs_filter(value): DCNL  DCSP return escapejs(value)
@register.filter(u'fix_ampersands', is_safe=True) DCNL @stringfilter DCNL def fix_ampersands_filter(value): DCNL  DCSP return fix_ampersands(value)
@register.filter(is_safe=True) DCNL def floatformat(text, arg=(-1)): DCNL  DCSP try: DCNL DCSP  DCSP input_val = force_text(text) DCNL DCSP  DCSP d = Decimal(input_val) DCNL DCSP except UnicodeEncodeError: DCNL DCSP  DCSP return u'' DCNL DCSP except InvalidOperation: DCNL DCSP  DCSP if (input_val in special_floats): DCNL DCSP  DCSP  DCSP return input_val DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP d = Decimal(force_text(float(text))) DCNL DCSP  DCSP except (ValueError, InvalidOperation, TypeError, UnicodeEncodeError): DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP try: DCNL DCSP  DCSP p = int(arg) DCNL DCSP except ValueError: DCNL DCSP  DCSP return input_val DCNL DCSP try: DCNL DCSP  DCSP m = (int(d) - d) DCNL DCSP except (ValueError, OverflowError, InvalidOperation): DCNL DCSP  DCSP return input_val DCNL DCSP if ((not m) and (p < 0)): DCNL DCSP  DCSP return mark_safe(formats.number_format((u'%d' % int(d)), 0)) DCNL DCSP if (p == 0): DCNL DCSP  DCSP exp = Decimal(1) DCNL DCSP else: DCNL DCSP  DCSP exp = (Decimal(u'1.0') / (Decimal(10) ** abs(p))) DCNL DCSP try: DCNL DCSP  DCSP tupl = d.as_tuple() DCNL DCSP  DCSP units = (len(tupl[1]) - tupl[2]) DCNL DCSP  DCSP prec = ((abs(p) + units) + 1) DCNL DCSP  DCSP (sign, digits, exponent) = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec)).as_tuple() DCNL DCSP  DCSP digits = [six.text_type(digit) for digit in reversed(digits)] DCNL DCSP  DCSP while (len(digits) <= abs(exponent)): DCNL DCSP  DCSP  DCSP digits.append(u'0') DCNL DCSP  DCSP digits.insert((- exponent), u'.') DCNL DCSP  DCSP if sign: DCNL DCSP  DCSP  DCSP digits.append(u'-') DCNL DCSP  DCSP number = u''.join(reversed(digits)) DCNL DCSP  DCSP return mark_safe(formats.number_format(number, abs(p))) DCNL DCSP except InvalidOperation: DCNL DCSP  DCSP return input_val
@register.filter(is_safe=True) DCNL @stringfilter DCNL def iriencode(value): DCNL  DCSP return force_text(iri_to_uri(value))
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linenumbers(value, autoescape=None): DCNL  DCSP lines = value.split(u'\n') DCNL DCSP width = six.text_type(len(six.text_type(len(lines)))) DCNL DCSP if ((not autoescape) or isinstance(value, SafeData)): DCNL DCSP  DCSP for (i, line) in enumerate(lines): DCNL DCSP  DCSP  DCSP lines[i] = (((u'%0' + width) + u'd. DCSP %s') % ((i + 1), line)) DCNL DCSP else: DCNL DCSP  DCSP for (i, line) in enumerate(lines): DCNL DCSP  DCSP  DCSP lines[i] = (((u'%0' + width) + u'd. DCSP %s') % ((i + 1), escape(line))) DCNL DCSP return mark_safe(u'\n'.join(lines))
@register.filter(is_safe=True) DCNL @stringfilter DCNL def lower(value): DCNL  DCSP return value.lower()
@register.filter(is_safe=False) DCNL @stringfilter DCNL def make_list(value): DCNL  DCSP return list(value)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def slugify(value): DCNL  DCSP from django.utils.text import slugify DCNL DCSP return slugify(value)
@register.filter(is_safe=True) DCNL def stringformat(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP return ((u'%' + six.text_type(arg)) % value) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return u''
@register.filter(is_safe=True) DCNL @stringfilter DCNL def title(value): DCNL  DCSP t = re.sub(u"([a-z])'([A-Z])", (lambda m: m.group(0).lower()), value.title()) DCNL DCSP return re.sub(u'\\d([A-Z])', (lambda m: m.group(0).lower()), t)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatechars(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP length = int(arg) DCNL DCSP except ValueError: DCNL DCSP  DCSP return value DCNL DCSP return Truncator(value).chars(length)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP length = int(arg) DCNL DCSP except ValueError: DCNL DCSP  DCSP return value DCNL DCSP return Truncator(value).words(length, truncate=u' DCSP ...')
@register.filter(is_safe=True) DCNL @stringfilter DCNL def truncatewords_html(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP length = int(arg) DCNL DCSP except ValueError: DCNL DCSP  DCSP return value DCNL DCSP return Truncator(value).words(length, html=True, truncate=u' DCSP ...')
@register.filter(is_safe=False) DCNL @stringfilter DCNL def upper(value): DCNL  DCSP return value.upper()
@register.filter(is_safe=False) DCNL @stringfilter DCNL def urlencode(value, safe=None): DCNL  DCSP kwargs = {} DCNL DCSP if (safe is not None): DCNL DCSP  DCSP kwargs[u'safe'] = safe DCNL DCSP return urlquote(value, **kwargs)
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlize(value, autoescape=None): DCNL  DCSP return mark_safe(urlize_impl(value, nofollow=True, autoescape=autoescape))
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def urlizetrunc(value, limit, autoescape=None): DCNL  DCSP return mark_safe(urlize_impl(value, trim_url_limit=int(limit), nofollow=True, autoescape=autoescape))
@register.filter(is_safe=False) DCNL @stringfilter DCNL def wordcount(value): DCNL  DCSP return len(value.split())
@register.filter(is_safe=True) DCNL @stringfilter DCNL def wordwrap(value, arg): DCNL  DCSP return wrap(value, int(arg))
@register.filter(is_safe=True) DCNL @stringfilter DCNL def ljust(value, arg): DCNL  DCSP return value.ljust(int(arg))
@register.filter(is_safe=True) DCNL @stringfilter DCNL def rjust(value, arg): DCNL  DCSP return value.rjust(int(arg))
@register.filter(is_safe=True) DCNL @stringfilter DCNL def center(value, arg): DCNL  DCSP return value.center(int(arg))
@register.filter DCNL @stringfilter DCNL def cut(value, arg): DCNL  DCSP safe = isinstance(value, SafeData) DCNL DCSP value = value.replace(arg, u'') DCNL DCSP if (safe and (arg != u';')): DCNL DCSP  DCSP return mark_safe(value) DCNL DCSP return value
@register.filter(u'escape', is_safe=True) DCNL @stringfilter DCNL def escape_filter(value): DCNL  DCSP return mark_for_escaping(value)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def force_escape(value): DCNL  DCSP return escape(value)
@register.filter(u'linebreaks', is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaks_filter(value, autoescape=None): DCNL  DCSP autoescape = (autoescape and (not isinstance(value, SafeData))) DCNL DCSP return mark_safe(linebreaks(value, autoescape))
@register.filter(is_safe=True, needs_autoescape=True) DCNL @stringfilter DCNL def linebreaksbr(value, autoescape=None): DCNL  DCSP autoescape = (autoescape and (not isinstance(value, SafeData))) DCNL DCSP value = normalize_newlines(value) DCNL DCSP if autoescape: DCNL DCSP  DCSP value = escape(value) DCNL DCSP return mark_safe(value.replace(u'\n', u'<br DCSP />'))
@register.filter(is_safe=True) DCNL @stringfilter DCNL def safe(value): DCNL  DCSP return mark_safe(value)
@register.filter(is_safe=True) DCNL def safeseq(value): DCNL  DCSP return [mark_safe(force_text(obj)) for obj in value]
@register.filter(is_safe=True) DCNL @stringfilter DCNL def removetags(value, tags): DCNL  DCSP from django.utils.html import remove_tags DCNL DCSP return remove_tags(value, tags)
@register.filter(is_safe=True) DCNL @stringfilter DCNL def striptags(value): DCNL  DCSP return strip_tags(value)
@register.filter(is_safe=False) DCNL def dictsort(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP return sorted(value, key=Variable(arg).resolve) DCNL DCSP except (TypeError, VariableDoesNotExist): DCNL DCSP  DCSP return u''
@register.filter(is_safe=False) DCNL def dictsortreversed(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP return sorted(value, key=Variable(arg).resolve, reverse=True) DCNL DCSP except (TypeError, VariableDoesNotExist): DCNL DCSP  DCSP return u''
@register.filter(is_safe=False) DCNL def first(value): DCNL  DCSP try: DCNL DCSP  DCSP return value[0] DCNL DCSP except IndexError: DCNL DCSP  DCSP return u''
@register.filter(is_safe=True, needs_autoescape=True) DCNL def join(value, arg, autoescape=None): DCNL  DCSP value = map(force_text, value) DCNL DCSP if autoescape: DCNL DCSP  DCSP value = [conditional_escape(v) for v in value] DCNL DCSP try: DCNL DCSP  DCSP data = conditional_escape(arg).join(value) DCNL DCSP except AttributeError: DCNL DCSP  DCSP return value DCNL DCSP return mark_safe(data)
@register.filter(is_safe=True) DCNL def last(value): DCNL  DCSP try: DCNL DCSP  DCSP return value[(-1)] DCNL DCSP except IndexError: DCNL DCSP  DCSP return u''
@register.filter(is_safe=True) DCNL def length(value): DCNL  DCSP try: DCNL DCSP  DCSP return len(value) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return u''
@register.filter(is_safe=False) DCNL def length_is(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP return (len(value) == int(arg)) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return u''
@register.filter(is_safe=True) DCNL def random(value): DCNL  DCSP return random_module.choice(value)
@register.filter(u'slice', is_safe=True) DCNL def slice_filter(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP bits = [] DCNL DCSP  DCSP for x in arg.split(u':'): DCNL DCSP  DCSP  DCSP if (len(x) == 0): DCNL DCSP  DCSP  DCSP  DCSP bits.append(None) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP bits.append(int(x)) DCNL DCSP  DCSP return value[slice(*bits)] DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return value
@register.filter(is_safe=True, needs_autoescape=True) DCNL def unordered_list(value, autoescape=None): DCNL  DCSP if autoescape: DCNL DCSP  DCSP escaper = conditional_escape DCNL DCSP else: DCNL DCSP  DCSP escaper = (lambda x: x) DCNL DCSP def convert_old_style_list(list_): DCNL DCSP  DCSP u"\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Converts DCSP old DCSP style DCSP lists DCSP to DCSP the DCSP new DCSP easier DCSP to DCSP understand DCSP format.\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP The DCSP old DCSP list DCSP format DCSP looked DCSP like:\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ['Item DCSP 1', DCSP [['Item DCSP 1.1', DCSP []], DCSP ['Item DCSP 1.2', DCSP []]]\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP And DCSP it DCSP is DCSP converted DCSP to:\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ['Item DCSP 1', DCSP ['Item DCSP 1.1', DCSP 'Item DCSP 1.2]]\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP " DCNL DCSP  DCSP if ((not isinstance(list_, (tuple, list))) or (len(list_) != 2)): DCNL DCSP  DCSP  DCSP return (list_, False) DCNL DCSP  DCSP (first_item, second_item) = list_ DCNL DCSP  DCSP if (second_item == []): DCNL DCSP  DCSP  DCSP return ([first_item], True) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP iter(second_item) DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP return (list_, False) DCNL DCSP  DCSP old_style_list = True DCNL DCSP  DCSP new_second_item = [] DCNL DCSP  DCSP for sublist in second_item: DCNL DCSP  DCSP  DCSP (item, old_style_list) = convert_old_style_list(sublist) DCNL DCSP  DCSP  DCSP if (not old_style_list): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP new_second_item.extend(item) DCNL DCSP  DCSP if old_style_list: DCNL DCSP  DCSP  DCSP second_item = new_second_item DCNL DCSP  DCSP return ([first_item, second_item], old_style_list) DCNL DCSP def _helper(list_, tabs=1): DCNL DCSP  DCSP indent = (u' DCTB ' * tabs) DCNL DCSP  DCSP output = [] DCNL DCSP  DCSP list_length = len(list_) DCNL DCSP  DCSP i = 0 DCNL DCSP  DCSP while (i < list_length): DCNL DCSP  DCSP  DCSP title = list_[i] DCNL DCSP  DCSP  DCSP sublist = u'' DCNL DCSP  DCSP  DCSP sublist_item = None DCNL DCSP  DCSP  DCSP if isinstance(title, (list, tuple)): DCNL DCSP  DCSP  DCSP  DCSP sublist_item = title DCNL DCSP  DCSP  DCSP  DCSP title = u'' DCNL DCSP  DCSP  DCSP elif (i < (list_length - 1)): DCNL DCSP  DCSP  DCSP  DCSP next_item = list_[(i + 1)] DCNL DCSP  DCSP  DCSP  DCSP if (next_item and isinstance(next_item, (list, tuple))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP sublist_item = next_item DCNL DCSP  DCSP  DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP  DCSP if sublist_item: DCNL DCSP  DCSP  DCSP  DCSP sublist = _helper(sublist_item, (tabs + 1)) DCNL DCSP  DCSP  DCSP  DCSP sublist = (u'\n%s<ul>\n%s\n%s</ul>\n%s' % (indent, sublist, indent, indent)) DCNL DCSP  DCSP  DCSP output.append((u'%s<li>%s%s</li>' % (indent, escaper(force_text(title)), sublist))) DCNL DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP return u'\n'.join(output) DCNL DCSP (value, converted) = convert_old_style_list(value) DCNL DCSP return mark_safe(_helper(value))
@register.filter(is_safe=False) DCNL def add(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP return (int(value) + int(arg)) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return (value + arg) DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP return u''
@register.filter(is_safe=False) DCNL def get_digit(value, arg): DCNL  DCSP try: DCNL DCSP  DCSP arg = int(arg) DCNL DCSP  DCSP value = int(value) DCNL DCSP except ValueError: DCNL DCSP  DCSP return value DCNL DCSP if (arg < 1): DCNL DCSP  DCSP return value DCNL DCSP try: DCNL DCSP  DCSP return int(str(value)[(- arg)]) DCNL DCSP except IndexError: DCNL DCSP  DCSP return 0
@register.filter(expects_localtime=True, is_safe=False) DCNL def date(value, arg=None): DCNL  DCSP if (value in (None, u'')): DCNL DCSP  DCSP return u'' DCNL DCSP if (arg is None): DCNL DCSP  DCSP arg = settings.DATE_FORMAT DCNL DCSP try: DCNL DCSP  DCSP return formats.date_format(value, arg) DCNL DCSP except AttributeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return format(value, arg) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP return u''
@register.filter(expects_localtime=True, is_safe=False) DCNL def time(value, arg=None): DCNL  DCSP if (value in (None, u'')): DCNL DCSP  DCSP return u'' DCNL DCSP if (arg is None): DCNL DCSP  DCSP arg = settings.TIME_FORMAT DCNL DCSP try: DCNL DCSP  DCSP return formats.time_format(value, arg) DCNL DCSP except AttributeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return time_format(value, arg) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP return u''
@register.filter(u'timesince', is_safe=False) DCNL def timesince_filter(value, arg=None): DCNL  DCSP if (not value): DCNL DCSP  DCSP return u'' DCNL DCSP try: DCNL DCSP  DCSP if arg: DCNL DCSP  DCSP  DCSP return timesince(value, arg) DCNL DCSP  DCSP return timesince(value) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return u''
@register.filter(u'timeuntil', is_safe=False) DCNL def timeuntil_filter(value, arg=None): DCNL  DCSP if (not value): DCNL DCSP  DCSP return u'' DCNL DCSP try: DCNL DCSP  DCSP return timeuntil(value, arg) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return u''
@register.filter(is_safe=False) DCNL def default(value, arg): DCNL  DCSP return (value or arg)
@register.filter(is_safe=False) DCNL def default_if_none(value, arg): DCNL  DCSP if (value is None): DCNL DCSP  DCSP return arg DCNL DCSP return value
@register.filter(is_safe=False) DCNL def divisibleby(value, arg): DCNL  DCSP return ((int(value) % int(arg)) == 0)
@register.filter(is_safe=False) DCNL def yesno(value, arg=None): DCNL  DCSP if (arg is None): DCNL DCSP  DCSP arg = ugettext(u'yes,no,maybe') DCNL DCSP bits = arg.split(u',') DCNL DCSP if (len(bits) < 2): DCNL DCSP  DCSP return value DCNL DCSP try: DCNL DCSP  DCSP (yes, no, maybe) = bits DCNL DCSP except ValueError: DCNL DCSP  DCSP (yes, no, maybe) = (bits[0], bits[1], bits[1]) DCNL DCSP if (value is None): DCNL DCSP  DCSP return maybe DCNL DCSP if value: DCNL DCSP  DCSP return yes DCNL DCSP return no
@register.filter(is_safe=True) DCNL def filesizeformat(bytes): DCNL  DCSP try: DCNL DCSP  DCSP bytes = float(bytes) DCNL DCSP except (TypeError, ValueError, UnicodeDecodeError): DCNL DCSP  DCSP return (ungettext(u'%(size)d DCSP byte', u'%(size)d DCSP bytes', 0) % {u'size': 0}) DCNL DCSP filesize_number_format = (lambda value: formats.number_format(round(value, 1), 1)) DCNL DCSP KB = (1 << 10) DCNL DCSP MB = (1 << 20) DCNL DCSP GB = (1 << 30) DCNL DCSP TB = (1 << 40) DCNL DCSP PB = (1 << 50) DCNL DCSP if (bytes < KB): DCNL DCSP  DCSP return (ungettext(u'%(size)d DCSP byte', u'%(size)d DCSP bytes', bytes) % {u'size': bytes}) DCNL DCSP if (bytes < MB): DCNL DCSP  DCSP return (ugettext(u'%s DCSP KB') % filesize_number_format((bytes / KB))) DCNL DCSP if (bytes < GB): DCNL DCSP  DCSP return (ugettext(u'%s DCSP MB') % filesize_number_format((bytes / MB))) DCNL DCSP if (bytes < TB): DCNL DCSP  DCSP return (ugettext(u'%s DCSP GB') % filesize_number_format((bytes / GB))) DCNL DCSP if (bytes < PB): DCNL DCSP  DCSP return (ugettext(u'%s DCSP TB') % filesize_number_format((bytes / TB))) DCNL DCSP return (ugettext(u'%s DCSP PB') % filesize_number_format((bytes / PB)))
@register.filter(is_safe=False) DCNL def pluralize(value, arg=u's'): DCNL  DCSP if (not (u',' in arg)): DCNL DCSP  DCSP arg = (u',' + arg) DCNL DCSP bits = arg.split(u',') DCNL DCSP if (len(bits) > 2): DCNL DCSP  DCSP return u'' DCNL DCSP (singular_suffix, plural_suffix) = bits[:2] DCNL DCSP try: DCNL DCSP  DCSP if (int(value) != 1): DCNL DCSP  DCSP  DCSP return plural_suffix DCNL DCSP except ValueError: DCNL DCSP  DCSP pass DCNL DCSP except TypeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (len(value) != 1): DCNL DCSP  DCSP  DCSP  DCSP return plural_suffix DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP return singular_suffix
@register.filter(u'phone2numeric', is_safe=True) DCNL def phone2numeric_filter(value): DCNL  DCSP return phone2numeric(value)
@register.filter(is_safe=True) DCNL def pprint(value): DCNL  DCSP try: DCNL DCSP  DCSP return pformat(value) DCNL DCSP except Exception as e: DCNL DCSP  DCSP return (u'Error DCSP in DCSP formatting: DCSP %s' % force_text(e, errors=u'replace'))
def compile_string(template_string, origin): DCNL  DCSP if settings.TEMPLATE_DEBUG: DCNL DCSP  DCSP from django.template.debug import DebugLexer, DebugParser DCNL DCSP  DCSP (lexer_class, parser_class) = (DebugLexer, DebugParser) DCNL DCSP else: DCNL DCSP  DCSP (lexer_class, parser_class) = (Lexer, Parser) DCNL DCSP lexer = lexer_class(template_string, origin) DCNL DCSP parser = parser_class(lexer.tokenize()) DCNL DCSP return parser.parse()
def resolve_variable(path, context): DCNL  DCSP return Variable(path).resolve(context)
def _render_value_in_context(value, context): DCNL  DCSP value = template_localtime(value, use_tz=context.use_tz) DCNL DCSP value = localize(value, use_l10n=context.use_l10n) DCNL DCSP value = force_text(value) DCNL DCSP if ((context.autoescape and (not isinstance(value, SafeData))) or isinstance(value, EscapeData)): DCNL DCSP  DCSP return escape(value) DCNL DCSP else: DCNL DCSP  DCSP return value
def token_kwargs(bits, parser, support_legacy=False): DCNL  DCSP if (not bits): DCNL DCSP  DCSP return {} DCNL DCSP match = kwarg_re.match(bits[0]) DCNL DCSP kwarg_format = (match and match.group(1)) DCNL DCSP if (not kwarg_format): DCNL DCSP  DCSP if (not support_legacy): DCNL DCSP  DCSP  DCSP return {} DCNL DCSP  DCSP if ((len(bits) < 3) or (bits[1] != u'as')): DCNL DCSP  DCSP  DCSP return {} DCNL DCSP kwargs = {} DCNL DCSP while bits: DCNL DCSP  DCSP if kwarg_format: DCNL DCSP  DCSP  DCSP match = kwarg_re.match(bits[0]) DCNL DCSP  DCSP  DCSP if ((not match) or (not match.group(1))): DCNL DCSP  DCSP  DCSP  DCSP return kwargs DCNL DCSP  DCSP  DCSP (key, value) = match.groups() DCNL DCSP  DCSP  DCSP del bits[:1] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if ((len(bits) < 3) or (bits[1] != u'as')): DCNL DCSP  DCSP  DCSP  DCSP return kwargs DCNL DCSP  DCSP  DCSP (key, value) = (bits[2], bits[0]) DCNL DCSP  DCSP  DCSP del bits[:3] DCNL DCSP  DCSP kwargs[key] = parser.compile_filter(value) DCNL DCSP  DCSP if (bits and (not kwarg_format)): DCNL DCSP  DCSP  DCSP if (bits[0] != u'and'): DCNL DCSP  DCSP  DCSP  DCSP return kwargs DCNL DCSP  DCSP  DCSP del bits[:1] DCNL DCSP return kwargs
def parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, name): DCNL  DCSP if takes_context: DCNL DCSP  DCSP if (params[0] == u'context'): DCNL DCSP  DCSP  DCSP params = params[1:] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP is DCSP decorated DCSP with DCSP takes_context=True DCSP so DCSP it DCSP must DCSP have DCSP a DCSP first DCSP argument DCSP of DCSP 'context'" % name)) DCNL DCSP args = [] DCNL DCSP kwargs = {} DCNL DCSP unhandled_params = list(params) DCNL DCSP for bit in bits: DCNL DCSP  DCSP kwarg = token_kwargs([bit], parser) DCNL DCSP  DCSP if kwarg: DCNL DCSP  DCSP  DCSP (param, value) = list(six.iteritems(kwarg))[0] DCNL DCSP  DCSP  DCSP if ((param not in params) and (varkw is None)): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP received DCSP unexpected DCSP keyword DCSP argument DCSP '%s'" % (name, param))) DCNL DCSP  DCSP  DCSP elif (param in kwargs): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP received DCSP multiple DCSP values DCSP for DCSP keyword DCSP argument DCSP '%s'" % (name, param))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP kwargs[str(param)] = value DCNL DCSP  DCSP  DCSP  DCSP if (param in unhandled_params): DCNL DCSP  DCSP  DCSP  DCSP  DCSP unhandled_params.remove(param) DCNL DCSP  DCSP elif kwargs: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP received DCSP some DCSP positional DCSP argument(s) DCSP after DCSP some DCSP keyword DCSP argument(s)" % name)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP args.append(parser.compile_filter(bit)) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP unhandled_params.pop(0) DCNL DCSP  DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP  DCSP if (varargs is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP received DCSP too DCSP many DCSP positional DCSP arguments" % name)) DCNL DCSP if (defaults is not None): DCNL DCSP  DCSP unhandled_params = unhandled_params[:(- len(defaults))] DCNL DCSP if unhandled_params: DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP did DCSP not DCSP receive DCSP value(s) DCSP for DCSP the DCSP argument(s): DCSP %s" % (name, u', DCSP '.join([(u"'%s'" % p) for p in unhandled_params])))) DCNL DCSP return (args, kwargs)
def generic_tag_compiler(parser, token, params, varargs, varkw, defaults, name, takes_context, node_class): DCNL  DCSP bits = token.split_contents()[1:] DCNL DCSP (args, kwargs) = parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, name) DCNL DCSP return node_class(takes_context, args, kwargs)
def is_library_missing(name): DCNL  DCSP (path, module) = name.rsplit(u'.', 1) DCNL DCSP try: DCNL DCSP  DCSP package = import_module(path) DCNL DCSP  DCSP return (not module_has_submodule(package, module)) DCNL DCSP except ImportError: DCNL DCSP  DCSP return is_library_missing(path)
def import_library(taglib_module): DCNL  DCSP try: DCNL DCSP  DCSP mod = import_module(taglib_module) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP if is_library_missing(taglib_module): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise InvalidTemplateLibrary((u'ImportError DCSP raised DCSP loading DCSP %s: DCSP %s' % (taglib_module, e))) DCNL DCSP try: DCNL DCSP  DCSP return mod.register DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise InvalidTemplateLibrary((u"Template DCSP library DCSP %s DCSP does DCSP not DCSP have DCSP a DCSP variable DCSP named DCSP 'register'" % taglib_module))
def get_templatetags_modules(): DCNL  DCSP global templatetags_modules DCNL DCSP if (not templatetags_modules): DCNL DCSP  DCSP _templatetags_modules = [] DCNL DCSP  DCSP for app_module in ([u'django'] + list(settings.INSTALLED_APPS)): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP templatetag_module = (u'%s.templatetags' % app_module) DCNL DCSP  DCSP  DCSP  DCSP import_module(templatetag_module) DCNL DCSP  DCSP  DCSP  DCSP _templatetags_modules.append(templatetag_module) DCNL DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP templatetags_modules = _templatetags_modules DCNL DCSP return templatetags_modules
def get_library(library_name): DCNL  DCSP lib = libraries.get(library_name, None) DCNL DCSP if (not lib): DCNL DCSP  DCSP templatetags_modules = get_templatetags_modules() DCNL DCSP  DCSP tried_modules = [] DCNL DCSP  DCSP for module in templatetags_modules: DCNL DCSP  DCSP  DCSP taglib_module = (u'%s.%s' % (module, library_name)) DCNL DCSP  DCSP  DCSP tried_modules.append(taglib_module) DCNL DCSP  DCSP  DCSP lib = import_library(taglib_module) DCNL DCSP  DCSP  DCSP if lib: DCNL DCSP  DCSP  DCSP  DCSP libraries[library_name] = lib DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not lib): DCNL DCSP  DCSP  DCSP raise InvalidTemplateLibrary((u'Template DCSP library DCSP %s DCSP not DCSP found, DCSP tried DCSP %s' % (library_name, u','.join(tried_modules)))) DCNL DCSP return lib
@register.tag('block') DCNL def do_block(parser, token): DCNL  DCSP bits = token.contents.split() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(("'%s' DCSP tag DCSP takes DCSP only DCSP one DCSP argument" % bits[0])) DCNL DCSP block_name = bits[1] DCNL DCSP try: DCNL DCSP  DCSP if (block_name in parser.__loaded_blocks): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError(("'%s' DCSP tag DCSP with DCSP name DCSP '%s' DCSP appears DCSP more DCSP than DCSP once" % (bits[0], block_name))) DCNL DCSP  DCSP parser.__loaded_blocks.append(block_name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP parser.__loaded_blocks = [block_name] DCNL DCSP nodelist = parser.parse(('endblock',)) DCNL DCSP endblock = parser.next_token() DCNL DCSP acceptable_endblocks = ('endblock', ('endblock DCSP %s' % block_name)) DCNL DCSP if (endblock.contents not in acceptable_endblocks): DCNL DCSP  DCSP parser.invalid_block_tag(endblock, 'endblock', acceptable_endblocks) DCNL DCSP return BlockNode(block_name, nodelist)
@register.tag('extends') DCNL def do_extends(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(("'%s' DCSP takes DCSP one DCSP argument" % bits[0])) DCNL DCSP parent_name = parser.compile_filter(bits[1]) DCNL DCSP nodelist = parser.parse() DCNL DCSP if nodelist.get_nodes_by_type(ExtendsNode): DCNL DCSP  DCSP raise TemplateSyntaxError(("'%s' DCSP cannot DCSP appear DCSP more DCSP than DCSP once DCSP in DCSP the DCSP same DCSP template" % bits[0])) DCNL DCSP return ExtendsNode(nodelist, parent_name)
@register.tag('include') DCNL def do_include(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) < 2): DCNL DCSP  DCSP raise TemplateSyntaxError(('%r DCSP tag DCSP takes DCSP at DCSP least DCSP one DCSP argument: DCSP the DCSP name DCSP of DCSP the DCSP template DCSP to DCSP be DCSP included.' % bits[0])) DCNL DCSP options = {} DCNL DCSP remaining_bits = bits[2:] DCNL DCSP while remaining_bits: DCNL DCSP  DCSP option = remaining_bits.pop(0) DCNL DCSP  DCSP if (option in options): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError(('The DCSP %r DCSP option DCSP was DCSP specified DCSP more DCSP than DCSP once.' % option)) DCNL DCSP  DCSP if (option == 'with'): DCNL DCSP  DCSP  DCSP value = token_kwargs(remaining_bits, parser, support_legacy=False) DCNL DCSP  DCSP  DCSP if (not value): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError(('"with" DCSP in DCSP %r DCSP tag DCSP needs DCSP at DCSP least DCSP one DCSP keyword DCSP argument.' % bits[0])) DCNL DCSP  DCSP elif (option == 'only'): DCNL DCSP  DCSP  DCSP value = True DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError(('Unknown DCSP argument DCSP for DCSP %r DCSP tag: DCSP %r.' % (bits[0], option))) DCNL DCSP  DCSP options[option] = value DCNL DCSP isolated_context = options.get('only', False) DCNL DCSP namemap = options.get('with', {}) DCNL DCSP path = bits[1] DCNL DCSP if ((path[0] in ('"', "'")) and (path[(-1)] == path[0])): DCNL DCSP  DCSP return ConstantIncludeNode(path[1:(-1)], extra_context=namemap, isolated_context=isolated_context) DCNL DCSP return IncludeNode(parser.compile_filter(bits[1]), extra_context=namemap, isolated_context=isolated_context)
def populate_xheaders(request, response, model, object_id): DCNL  DCSP from django.conf import settings DCNL DCSP if ((request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS) or (hasattr(request, 'user') and request.user.is_active and request.user.is_staff)): DCNL DCSP  DCSP response['X-Object-Type'] = ('%s.%s' % (model._meta.app_label, model._meta.object_name.lower())) DCNL DCSP  DCSP response['X-Object-Id'] = str(object_id)
def make_msgid(idstring=None): DCNL  DCSP timeval = time.time() DCNL DCSP utcdate = time.strftime(u'%Y%m%d%H%M%S', time.gmtime(timeval)) DCNL DCSP try: DCNL DCSP  DCSP pid = os.getpid() DCNL DCSP except AttributeError: DCNL DCSP  DCSP pid = 1 DCNL DCSP randint = random.randrange(100000) DCNL DCSP if (idstring is None): DCNL DCSP  DCSP idstring = u'' DCNL DCSP else: DCNL DCSP  DCSP idstring = (u'.' + idstring) DCNL DCSP idhost = DNS_NAME DCNL DCSP msgid = (u'<%s.%s.%s%s@%s>' % (utcdate, pid, randint, idstring, idhost)) DCNL DCSP return msgid
def forbid_multi_line_headers(name, val, encoding): DCNL  DCSP encoding = (encoding or settings.DEFAULT_CHARSET) DCNL DCSP val = force_text(val) DCNL DCSP if ((u'\n' in val) or (u'\r' in val)): DCNL DCSP  DCSP raise BadHeaderError((u"Header DCSP values DCSP can't DCSP contain DCSP newlines DCSP (got DCSP %r DCSP for DCSP header DCSP %r)" % (val, name))) DCNL DCSP try: DCNL DCSP  DCSP val.encode(u'ascii') DCNL DCSP except UnicodeEncodeError: DCNL DCSP  DCSP if (name.lower() in ADDRESS_HEADERS): DCNL DCSP  DCSP  DCSP val = u', DCSP '.join((sanitize_address(addr, encoding) for addr in getaddresses((val,)))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP val = Header(val, encoding).encode() DCNL DCSP else: DCNL DCSP  DCSP if (name.lower() == u'subject'): DCNL DCSP  DCSP  DCSP val = Header(val).encode() DCNL DCSP return (str(name), val)
def get_connection(backend=None, fail_silently=False, **kwds): DCNL  DCSP path = (backend or settings.EMAIL_BACKEND) DCNL DCSP try: DCNL DCSP  DCSP (mod_name, klass_name) = path.rsplit(u'.', 1) DCNL DCSP  DCSP mod = import_module(mod_name) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured((u'Error DCSP importing DCSP email DCSP backend DCSP module DCSP %s: DCSP "%s"' % (mod_name, e))) DCNL DCSP try: DCNL DCSP  DCSP klass = getattr(mod, klass_name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise ImproperlyConfigured((u'Module DCSP "%s" DCSP does DCSP not DCSP define DCSP a DCSP "%s" DCSP class' % (mod_name, klass_name))) DCNL DCSP return klass(fail_silently=fail_silently, **kwds)
def send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None): DCNL  DCSP connection = (connection or get_connection(username=auth_user, password=auth_password, fail_silently=fail_silently)) DCNL DCSP return EmailMessage(subject, message, from_email, recipient_list, connection=connection).send()
def send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None): DCNL  DCSP connection = (connection or get_connection(username=auth_user, password=auth_password, fail_silently=fail_silently)) DCNL DCSP messages = [EmailMessage(subject, message, sender, recipient, connection=connection) for (subject, message, sender, recipient) in datatuple] DCNL DCSP return connection.send_messages(messages)
def mail_admins(subject, message, fail_silently=False, connection=None, html_message=None): DCNL  DCSP if (not settings.ADMINS): DCNL DCSP  DCSP return DCNL DCSP mail = EmailMultiAlternatives((u'%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject)), message, settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS], connection=connection) DCNL DCSP if html_message: DCNL DCSP  DCSP mail.attach_alternative(html_message, u'text/html') DCNL DCSP mail.send(fail_silently=fail_silently)
def mail_managers(subject, message, fail_silently=False, connection=None, html_message=None): DCNL  DCSP if (not settings.MANAGERS): DCNL DCSP  DCSP return DCNL DCSP mail = EmailMultiAlternatives((u'%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject)), message, settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS], connection=connection) DCNL DCSP if html_message: DCNL DCSP  DCSP mail.attach_alternative(html_message, u'text/html') DCNL DCSP mail.send(fail_silently=fail_silently)
def get_wsgi_application(): DCNL  DCSP return WSGIHandler()
def dumps(obj, key=None, salt=u'django.core.signing', serializer=JSONSerializer, compress=False): DCNL  DCSP data = serializer().dumps(obj) DCNL DCSP is_compressed = False DCNL DCSP if compress: DCNL DCSP  DCSP compressed = zlib.compress(data) DCNL DCSP  DCSP if (len(compressed) < (len(data) - 1)): DCNL DCSP  DCSP  DCSP data = compressed DCNL DCSP  DCSP  DCSP is_compressed = True DCNL DCSP base64d = b64_encode(data) DCNL DCSP if is_compressed: DCNL DCSP  DCSP base64d = ('.' + base64d) DCNL DCSP return TimestampSigner(key, salt=salt).sign(base64d)
def loads(s, key=None, salt=u'django.core.signing', serializer=JSONSerializer, max_age=None): DCNL  DCSP base64d = force_bytes(TimestampSigner(key, salt=salt).unsign(s, max_age=max_age)) DCNL DCSP decompress = False DCNL DCSP if (base64d[:1] == '.'): DCNL DCSP  DCSP base64d = base64d[1:] DCNL DCSP  DCSP decompress = True DCNL DCSP data = b64_decode(base64d) DCNL DCSP if decompress: DCNL DCSP  DCSP data = zlib.decompress(data) DCNL DCSP return serializer().loads(data)
def get_image_dimensions(file_or_path, close=False): DCNL  DCSP try: DCNL DCSP  DCSP from PIL import ImageFile as PILImageFile DCNL DCSP except ImportError: DCNL DCSP  DCSP import ImageFile as PILImageFile DCNL DCSP p = PILImageFile.Parser() DCNL DCSP if hasattr(file_or_path, 'read'): DCNL DCSP  DCSP file = file_or_path DCNL DCSP  DCSP file_pos = file.tell() DCNL DCSP  DCSP file.seek(0) DCNL DCSP else: DCNL DCSP  DCSP file = open(file_or_path, 'rb') DCNL DCSP  DCSP close = True DCNL DCSP try: DCNL DCSP  DCSP chunk_size = 1024 DCNL DCSP  DCSP while 1: DCNL DCSP  DCSP  DCSP data = file.read(chunk_size) DCNL DCSP  DCSP  DCSP if (not data): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP p.feed(data) DCNL DCSP  DCSP  DCSP if p.image: DCNL DCSP  DCSP  DCSP  DCSP return p.image.size DCNL DCSP  DCSP  DCSP chunk_size = (chunk_size * 2) DCNL DCSP  DCSP return None DCNL DCSP finally: DCNL DCSP  DCSP if close: DCNL DCSP  DCSP  DCSP file.close() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP file.seek(file_pos)
def file_move_safe(old_file_name, new_file_name, chunk_size=(1024 * 64), allow_overwrite=False): DCNL  DCSP if _samefile(old_file_name, new_file_name): DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP os.rename(old_file_name, new_file_name) DCNL DCSP  DCSP return DCNL DCSP except OSError: DCNL DCSP  DCSP pass DCNL DCSP with open(old_file_name, 'rb') as old_file: DCNL DCSP  DCSP fd = os.open(new_file_name, (((os.O_WRONLY | os.O_CREAT) | getattr(os, 'O_BINARY', 0)) | (((not allow_overwrite) and os.O_EXCL) or 0))) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP locks.lock(fd, locks.LOCK_EX) DCNL DCSP  DCSP  DCSP current_chunk = None DCNL DCSP  DCSP  DCSP while (current_chunk != ''): DCNL DCSP  DCSP  DCSP  DCSP current_chunk = old_file.read(chunk_size) DCNL DCSP  DCSP  DCSP  DCSP os.write(fd, current_chunk) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP locks.unlock(fd) DCNL DCSP  DCSP  DCSP os.close(fd) DCNL DCSP copystat(old_file_name, new_file_name) DCNL DCSP try: DCNL DCSP  DCSP os.remove(old_file_name) DCNL DCSP except OSError as e: DCNL DCSP  DCSP if ((getattr(e, 'winerror', 0) != 32) and (getattr(e, 'errno', 0) != 13)): DCNL DCSP  DCSP  DCSP raise
def load_handler(path, *args, **kwargs): DCNL  DCSP i = path.rfind(u'.') DCNL DCSP (module, attr) = (path[:i], path[(i + 1):]) DCNL DCSP try: DCNL DCSP  DCSP mod = importlib.import_module(module) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured((u'Error DCSP importing DCSP upload DCSP handler DCSP module DCSP %s: DCSP "%s"' % (module, e))) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ImproperlyConfigured(u'Error DCSP importing DCSP upload DCSP handler DCSP module.Is DCSP FILE_UPLOAD_HANDLERS DCSP a DCSP correctly DCSP defined DCSP list DCSP or DCSP tuple?') DCNL DCSP try: DCNL DCSP  DCSP cls = getattr(mod, attr) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise ImproperlyConfigured((u'Module DCSP "%s" DCSP does DCSP not DCSP define DCSP a DCSP "%s" DCSP upload DCSP handler DCSP backend' % (module, attr))) DCNL DCSP return cls(*args, **kwargs)
def fd(f): DCNL  DCSP return ((hasattr(f, 'fileno') and f.fileno()) or f)
def csrf(request): DCNL  DCSP def _get_val(): DCNL DCSP  DCSP token = get_token(request) DCNL DCSP  DCSP if (token is None): DCNL DCSP  DCSP  DCSP return u'NOTPROVIDED' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return smart_text(token) DCNL DCSP _get_val = lazy(_get_val, six.text_type) DCNL DCSP return {u'csrf_token': _get_val()}
def debug(request): DCNL  DCSP context_extras = {} DCNL DCSP if (settings.DEBUG and (request.META.get(u'REMOTE_ADDR') in settings.INTERNAL_IPS)): DCNL DCSP  DCSP context_extras[u'debug'] = True DCNL DCSP  DCSP from django.db import connection DCNL DCSP  DCSP context_extras[u'sql_queries'] = connection.queries DCNL DCSP return context_extras
def static(request): DCNL  DCSP return {u'STATIC_URL': settings.STATIC_URL}
def media(request): DCNL  DCSP return {u'MEDIA_URL': settings.MEDIA_URL}
def Deserializer(stream_or_string, **options): DCNL  DCSP if (not isinstance(stream_or_string, (bytes, six.string_types))): DCNL DCSP  DCSP stream_or_string = stream_or_string.read() DCNL DCSP if isinstance(stream_or_string, bytes): DCNL DCSP  DCSP stream_or_string = stream_or_string.decode('utf-8') DCNL DCSP try: DCNL DCSP  DCSP objects = json.loads(stream_or_string) DCNL DCSP  DCSP for obj in PythonDeserializer(objects, **options): DCNL DCSP  DCSP  DCSP (yield obj) DCNL DCSP except GeneratorExit: DCNL DCSP  DCSP raise DCNL DCSP except Exception as e: DCNL DCSP  DCSP raise DeserializationError(e)
def Deserializer(stream_or_string, **options): DCNL  DCSP if isinstance(stream_or_string, bytes): DCNL DCSP  DCSP stream_or_string = stream_or_string.decode('utf-8') DCNL DCSP if isinstance(stream_or_string, six.string_types): DCNL DCSP  DCSP stream = StringIO(stream_or_string) DCNL DCSP else: DCNL DCSP  DCSP stream = stream_or_string DCNL DCSP try: DCNL DCSP  DCSP for obj in PythonDeserializer(yaml.safe_load(stream), **options): DCNL DCSP  DCSP  DCSP (yield obj) DCNL DCSP except GeneratorExit: DCNL DCSP  DCSP raise DCNL DCSP except Exception as e: DCNL DCSP  DCSP raise DeserializationError(e)
def register_serializer(format, serializer_module, serializers=None): DCNL  DCSP if ((serializers is None) and (not _serializers)): DCNL DCSP  DCSP _load_serializers() DCNL DCSP module = importlib.import_module(serializer_module) DCNL DCSP if (serializers is None): DCNL DCSP  DCSP _serializers[format] = module DCNL DCSP else: DCNL DCSP  DCSP serializers[format] = module
def unregister_serializer(format): DCNL  DCSP if (not _serializers): DCNL DCSP  DCSP _load_serializers() DCNL DCSP if (format not in _serializers): DCNL DCSP  DCSP raise SerializerDoesNotExist(format) DCNL DCSP del _serializers[format]
def serialize(format, queryset, **options): DCNL  DCSP s = get_serializer(format)() DCNL DCSP s.serialize(queryset, **options) DCNL DCSP return s.getvalue()
def deserialize(format, stream_or_string, **options): DCNL  DCSP d = get_deserializer(format) DCNL DCSP return d(stream_or_string, **options)
def _load_serializers(): DCNL  DCSP global _serializers DCNL DCSP serializers = {} DCNL DCSP for format in BUILTIN_SERIALIZERS: DCNL DCSP  DCSP register_serializer(format, BUILTIN_SERIALIZERS[format], serializers) DCNL DCSP if hasattr(settings, 'SERIALIZATION_MODULES'): DCNL DCSP  DCSP for format in settings.SERIALIZATION_MODULES: DCNL DCSP  DCSP  DCSP register_serializer(format, settings.SERIALIZATION_MODULES[format], serializers) DCNL DCSP _serializers = serializers
def getInnerText(node): DCNL  DCSP inner_text = [] DCNL DCSP for child in node.childNodes: DCNL DCSP  DCSP if ((child.nodeType == child.TEXT_NODE) or (child.nodeType == child.CDATA_SECTION_NODE)): DCNL DCSP  DCSP  DCSP inner_text.append(child.data) DCNL DCSP  DCSP elif (child.nodeType == child.ELEMENT_NODE): DCNL DCSP  DCSP  DCSP inner_text.extend(getInnerText(child)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pass DCNL DCSP return u''.join(inner_text)
def Deserializer(object_list, **options): DCNL  DCSP db = options.pop(u'using', DEFAULT_DB_ALIAS) DCNL DCSP ignore = options.pop(u'ignorenonexistent', False) DCNL DCSP models.get_apps() DCNL DCSP for d in object_list: DCNL DCSP  DCSP Model = _get_model(d[u'model']) DCNL DCSP  DCSP data = {Model._meta.pk.attname: Model._meta.pk.to_python(d[u'pk'])} DCNL DCSP  DCSP m2m_data = {} DCNL DCSP  DCSP model_fields = Model._meta.get_all_field_names() DCNL DCSP  DCSP for (field_name, field_value) in six.iteritems(d[u'fields']): DCNL DCSP  DCSP  DCSP if (ignore and (field_name not in model_fields)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if isinstance(field_value, str): DCNL DCSP  DCSP  DCSP  DCSP field_value = smart_text(field_value, options.get(u'encoding', settings.DEFAULT_CHARSET), strings_only=True) DCNL DCSP  DCSP  DCSP field = Model._meta.get_field(field_name) DCNL DCSP  DCSP  DCSP if (field.rel and isinstance(field.rel, models.ManyToManyRel)): DCNL DCSP  DCSP  DCSP  DCSP if hasattr(field.rel.to._default_manager, u'get_by_natural_key'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP def m2m_convert(value): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (hasattr(value, u'__iter__') and (not isinstance(value, six.text_type))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return field.rel.to._default_manager.db_manager(db).get_by_natural_key(*value).pk DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return smart_text(field.rel.to._meta.pk.to_python(value)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP m2m_convert = (lambda v: smart_text(field.rel.to._meta.pk.to_python(v))) DCNL DCSP  DCSP  DCSP  DCSP m2m_data[field.name] = [m2m_convert(pk) for pk in field_value] DCNL DCSP  DCSP  DCSP elif (field.rel and isinstance(field.rel, models.ManyToOneRel)): DCNL DCSP  DCSP  DCSP  DCSP if (field_value is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(field.rel.to._default_manager, u'get_by_natural_key'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (hasattr(field_value, u'__iter__') and (not isinstance(field_value, six.text_type))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP obj = field.rel.to._default_manager.db_manager(db).get_by_natural_key(*field_value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = getattr(obj, field.rel.field_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if field.rel.to._meta.pk.rel: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = value.pk DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP value = field.rel.to._meta.get_field(field.rel.field_name).to_python(field_value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = value DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = field.rel.to._meta.get_field(field.rel.field_name).to_python(field_value) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP data[field.attname] = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP data[field.name] = field.to_python(field_value) DCNL DCSP  DCSP (yield base.DeserializedObject(Model(**data), m2m_data))
def _get_model(model_identifier): DCNL  DCSP try: DCNL DCSP  DCSP Model = models.get_model(*model_identifier.split(u'.')) DCNL DCSP except TypeError: DCNL DCSP  DCSP Model = None DCNL DCSP if (Model is None): DCNL DCSP  DCSP raise base.DeserializationError((u"Invalid DCSP model DCSP identifier: DCSP '%s'" % model_identifier)) DCNL DCSP return Model
def ip_address_validators(protocol, unpack_ipv4): DCNL  DCSP if ((protocol != u'both') and unpack_ipv4): DCNL DCSP  DCSP raise ValueError(u"You DCSP can DCSP only DCSP use DCSP `unpack_ipv4` DCSP if DCSP `protocol` DCSP is DCSP set DCSP to DCSP 'both'") DCNL DCSP try: DCNL DCSP  DCSP return ip_address_validator_map[protocol.lower()] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise ValueError((u"The DCSP protocol DCSP '%s' DCSP is DCSP unknown. DCSP Supported: DCSP %s" % (protocol, list(ip_address_validator_map))))
def get_callable(lookup_view, can_fail=False): DCNL  DCSP if (not callable(lookup_view)): DCNL DCSP  DCSP (mod_name, func_name) = get_mod_func(lookup_view) DCNL DCSP  DCSP if (func_name == u''): DCNL DCSP  DCSP  DCSP return lookup_view DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP mod = import_module(mod_name) DCNL DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP (parentmod, submod) = get_mod_func(mod_name) DCNL DCSP  DCSP  DCSP if ((not can_fail) and (submod != u'') and (not module_has_submodule(import_module(parentmod), submod))): DCNL DCSP  DCSP  DCSP  DCSP raise ViewDoesNotExist((u'Could DCSP not DCSP import DCSP %s. DCSP Parent DCSP module DCSP %s DCSP does DCSP not DCSP exist.' % (lookup_view, mod_name))) DCNL DCSP  DCSP  DCSP if (not can_fail): DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP lookup_view = getattr(mod, func_name) DCNL DCSP  DCSP  DCSP  DCSP if (not callable(lookup_view)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ViewDoesNotExist((u'Could DCSP not DCSP import DCSP %s.%s. DCSP View DCSP is DCSP not DCSP callable.' % (mod_name, func_name))) DCNL DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP if (not can_fail): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ViewDoesNotExist((u'Could DCSP not DCSP import DCSP %s. DCSP View DCSP does DCSP not DCSP exist DCSP in DCSP module DCSP %s.' % (lookup_view, mod_name))) DCNL DCSP return lookup_view
def set_script_prefix(prefix): DCNL  DCSP if (not prefix.endswith(u'/')): DCNL DCSP  DCSP prefix += u'/' DCNL DCSP _prefixes.value = prefix
def get_script_prefix(): DCNL  DCSP return getattr(_prefixes, u'value', u'/')
def set_urlconf(urlconf_name): DCNL  DCSP if urlconf_name: DCNL DCSP  DCSP _urlconfs.value = urlconf_name DCNL DCSP elif hasattr(_urlconfs, u'value'): DCNL DCSP  DCSP del _urlconfs.value
def get_urlconf(default=None): DCNL  DCSP return getattr(_urlconfs, u'value', default)
def is_valid_path(path, urlconf=None): DCNL  DCSP try: DCNL DCSP  DCSP resolve(path, urlconf) DCNL DCSP  DCSP return True DCNL DCSP except Resolver404: DCNL DCSP  DCSP return False
def parse_backend_uri(backend_uri): DCNL  DCSP if (backend_uri.find(':') == (-1)): DCNL DCSP  DCSP raise InvalidCacheBackendError('Backend DCSP URI DCSP must DCSP start DCSP with DCSP scheme://') DCNL DCSP (scheme, rest) = backend_uri.split(':', 1) DCNL DCSP if (not rest.startswith('//')): DCNL DCSP  DCSP raise InvalidCacheBackendError('Backend DCSP URI DCSP must DCSP start DCSP with DCSP scheme://') DCNL DCSP host = rest[2:] DCNL DCSP qpos = rest.find('?') DCNL DCSP if (qpos != (-1)): DCNL DCSP  DCSP params = dict(parse_qsl(rest[(qpos + 1):])) DCNL DCSP  DCSP host = rest[2:qpos] DCNL DCSP else: DCNL DCSP  DCSP params = {} DCNL DCSP if host.endswith('/'): DCNL DCSP  DCSP host = host[:(-1)] DCNL DCSP return (scheme, host, params)
def parse_backend_conf(backend, **kwargs): DCNL  DCSP conf = settings.CACHES.get(backend, None) DCNL DCSP if (conf is not None): DCNL DCSP  DCSP args = conf.copy() DCNL DCSP  DCSP args.update(kwargs) DCNL DCSP  DCSP backend = args.pop('BACKEND') DCNL DCSP  DCSP location = args.pop('LOCATION', '') DCNL DCSP  DCSP return (backend, location, args) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (mod_path, cls_name) = backend.rsplit('.', 1) DCNL DCSP  DCSP  DCSP mod = importlib.import_module(mod_path) DCNL DCSP  DCSP  DCSP backend_cls = getattr(mod, cls_name) DCNL DCSP  DCSP except (AttributeError, ImportError, ValueError): DCNL DCSP  DCSP  DCSP raise InvalidCacheBackendError(("Could DCSP not DCSP find DCSP backend DCSP '%s'" % backend)) DCNL DCSP  DCSP location = kwargs.pop('LOCATION', '') DCNL DCSP  DCSP return (backend, location, kwargs)
def get_cache(backend, **kwargs): DCNL  DCSP try: DCNL DCSP  DCSP if ('://' in backend): DCNL DCSP  DCSP  DCSP (backend, location, params) = parse_backend_uri(backend) DCNL DCSP  DCSP  DCSP if (backend in BACKENDS): DCNL DCSP  DCSP  DCSP  DCSP backend = ('django.core.cache.backends.%s' % BACKENDS[backend]) DCNL DCSP  DCSP  DCSP params.update(kwargs) DCNL DCSP  DCSP  DCSP mod = importlib.import_module(backend) DCNL DCSP  DCSP  DCSP backend_cls = mod.CacheClass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (backend, location, params) = parse_backend_conf(backend, **kwargs) DCNL DCSP  DCSP  DCSP (mod_path, cls_name) = backend.rsplit('.', 1) DCNL DCSP  DCSP  DCSP mod = importlib.import_module(mod_path) DCNL DCSP  DCSP  DCSP backend_cls = getattr(mod, cls_name) DCNL DCSP except (AttributeError, ImportError) as e: DCNL DCSP  DCSP raise InvalidCacheBackendError(("Could DCSP not DCSP find DCSP backend DCSP '%s': DCSP %s" % (backend, e))) DCNL DCSP cache = backend_cls(location, params) DCNL DCSP if hasattr(cache, 'close'): DCNL DCSP  DCSP signals.request_finished.connect(cache.close) DCNL DCSP return cache
def default_key_func(key, key_prefix, version): DCNL  DCSP return (u'%s:%s:%s' % (key_prefix, version, key))
def get_key_func(key_func): DCNL  DCSP if (key_func is not None): DCNL DCSP  DCSP if callable(key_func): DCNL DCSP  DCSP  DCSP return key_func DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP (key_func_module_path, key_func_name) = key_func.rsplit(u'.', 1) DCNL DCSP  DCSP  DCSP key_func_module = import_module(key_func_module_path) DCNL DCSP  DCSP  DCSP return getattr(key_func_module, key_func_name) DCNL DCSP return default_key_func
def get_validation_errors(outfile, app=None): DCNL  DCSP from django.db import models, connection DCNL DCSP from django.db.models.loading import get_app_errors DCNL DCSP from django.db.models.fields.related import RelatedObject DCNL DCSP from django.db.models.deletion import SET_NULL, SET_DEFAULT DCNL DCSP e = ModelErrorCollection(outfile) DCNL DCSP for (app_name, error) in get_app_errors().items(): DCNL DCSP  DCSP e.add(app_name, error) DCNL DCSP for cls in models.get_models(app, include_swapped=True): DCNL DCSP  DCSP opts = cls._meta DCNL DCSP  DCSP if opts.swapped: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (app_label, model_name) = opts.swapped.split('.') DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ("%s DCSP is DCSP not DCSP of DCSP the DCSP form DCSP 'app_label.app_name'." % opts.swappable)) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (not models.get_model(app_label, model_name)): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ("Model DCSP has DCSP been DCSP swapped DCSP out DCSP for DCSP '%s' DCSP which DCSP has DCSP not DCSP been DCSP installed DCSP or DCSP is DCSP abstract." % opts.swapped)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (settings.AUTH_USER_MODEL == ('%s.%s' % (opts.app_label, opts.object_name))): DCNL DCSP  DCSP  DCSP if (cls.USERNAME_FIELD in cls.REQUIRED_FIELDS): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, 'The DCSP field DCSP named DCSP as DCSP the DCSP USERNAME_FIELD DCSP should DCSP not DCSP be DCSP included DCSP in DCSP REQUIRED_FIELDS DCSP on DCSP a DCSP swappable DCSP User DCSP model.') DCNL DCSP  DCSP  DCSP if (not opts.get_field(cls.USERNAME_FIELD).unique): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, 'The DCSP USERNAME_FIELD DCSP must DCSP be DCSP unique. DCSP Add DCSP unique=True DCSP to DCSP the DCSP field DCSP parameters.') DCNL DCSP  DCSP for f in opts.local_fields: DCNL DCSP  DCSP  DCSP if ((f.name == 'id') and (not f.primary_key) and (opts.pk.name == 'id')): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP You DCSP can\'t DCSP use DCSP "id" DCSP as DCSP a DCSP field DCSP name, DCSP because DCSP each DCSP model DCSP automatically DCSP gets DCSP an DCSP "id" DCSP field DCSP if DCSP none DCSP of DCSP the DCSP fields DCSP have DCSP primary_key=True. DCSP You DCSP need DCSP to DCSP either DCSP remove/rename DCSP your DCSP "id" DCSP field DCSP or DCSP add DCSP primary_key=True DCSP to DCSP a DCSP field.' % f.name)) DCNL DCSP  DCSP  DCSP if f.name.endswith('_'): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP Field DCSP names DCSP cannot DCSP end DCSP with DCSP underscores, DCSP because DCSP this DCSP would DCSP lead DCSP to DCSP ambiguous DCSP queryset DCSP filters.' % f.name)) DCNL DCSP  DCSP  DCSP if (f.primary_key and f.null and (not connection.features.interprets_empty_strings_as_nulls)): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP Primary DCSP key DCSP fields DCSP cannot DCSP have DCSP null=True.' % f.name)) DCNL DCSP  DCSP  DCSP if isinstance(f, models.CharField): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP max_length = int(f.max_length) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (max_length <= 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP CharFields DCSP require DCSP a DCSP "max_length" DCSP attribute DCSP that DCSP is DCSP a DCSP positive DCSP integer.' % f.name)) DCNL DCSP  DCSP  DCSP  DCSP except (ValueError, TypeError): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP CharFields DCSP require DCSP a DCSP "max_length" DCSP attribute DCSP that DCSP is DCSP a DCSP positive DCSP integer.' % f.name)) DCNL DCSP  DCSP  DCSP if isinstance(f, models.DecimalField): DCNL DCSP  DCSP  DCSP  DCSP (decimalp_ok, mdigits_ok) = (False, False) DCNL DCSP  DCSP  DCSP  DCSP decimalp_msg = '"%s": DCSP DecimalFields DCSP require DCSP a DCSP "decimal_places" DCSP attribute DCSP that DCSP is DCSP a DCSP non-negative DCSP integer.' DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP decimal_places = int(f.decimal_places) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (decimal_places < 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, (decimalp_msg % f.name)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP decimalp_ok = True DCNL DCSP  DCSP  DCSP  DCSP except (ValueError, TypeError): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, (decimalp_msg % f.name)) DCNL DCSP  DCSP  DCSP  DCSP mdigits_msg = '"%s": DCSP DecimalFields DCSP require DCSP a DCSP "max_digits" DCSP attribute DCSP that DCSP is DCSP a DCSP positive DCSP integer.' DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP max_digits = int(f.max_digits) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (max_digits <= 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, (mdigits_msg % f.name)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP mdigits_ok = True DCNL DCSP  DCSP  DCSP  DCSP except (ValueError, TypeError): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, (mdigits_msg % f.name)) DCNL DCSP  DCSP  DCSP  DCSP invalid_values_msg = '"%s": DCSP DecimalFields DCSP require DCSP a DCSP "max_digits" DCSP attribute DCSP value DCSP that DCSP is DCSP greater DCSP than DCSP or DCSP equal DCSP to DCSP the DCSP value DCSP of DCSP the DCSP "decimal_places" DCSP attribute.' DCNL DCSP  DCSP  DCSP  DCSP if (decimalp_ok and mdigits_ok): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (decimal_places > max_digits): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, (invalid_values_msg % f.name)) DCNL DCSP  DCSP  DCSP if (isinstance(f, models.FileField) and (not f.upload_to)): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP FileFields DCSP require DCSP an DCSP "upload_to" DCSP attribute.' % f.name)) DCNL DCSP  DCSP  DCSP if isinstance(f, models.ImageField): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP from PIL import Image DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP import Image DCNL DCSP  DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP To DCSP use DCSP ImageFields, DCSP you DCSP need DCSP to DCSP install DCSP the DCSP Python DCSP Imaging DCSP Library. DCSP Get DCSP it DCSP at DCSP http://www.pythonware.com/products/pil/ DCSP .' % f.name)) DCNL DCSP  DCSP  DCSP if (isinstance(f, models.BooleanField) and getattr(f, 'null', False)): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP BooleanFields DCSP do DCSP not DCSP accept DCSP null DCSP values. DCSP Use DCSP a DCSP NullBooleanField DCSP instead.' % f.name)) DCNL DCSP  DCSP  DCSP if (isinstance(f, models.FilePathField) and (not (f.allow_files or f.allow_folders))): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP FilePathFields DCSP must DCSP have DCSP either DCSP allow_files DCSP or DCSP allow_folders DCSP set DCSP to DCSP True.' % f.name)) DCNL DCSP  DCSP  DCSP if f.choices: DCNL DCSP  DCSP  DCSP  DCSP if (isinstance(f.choices, six.string_types) or (not is_iterable(f.choices))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP "choices" DCSP should DCSP be DCSP iterable DCSP (e.g., DCSP a DCSP tuple DCSP or DCSP list).' % f.name)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP for c in f.choices: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ((not isinstance(c, (list, tuple))) or (len(c) != 2)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP "choices" DCSP should DCSP be DCSP a DCSP sequence DCSP of DCSP two-tuples.' % f.name)) DCNL DCSP  DCSP  DCSP if (f.db_index not in (None, True, False)): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ('"%s": DCSP "db_index" DCSP should DCSP be DCSP either DCSP None, DCSP True DCSP or DCSP False.' % f.name)) DCNL DCSP  DCSP  DCSP connection.validation.validate_field(e, opts, f) DCNL DCSP  DCSP  DCSP if (f.rel and hasattr(f.rel, 'on_delete')): DCNL DCSP  DCSP  DCSP  DCSP if ((f.rel.on_delete == SET_NULL) and (not f.null)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP specifies DCSP on_delete=SET_NULL, DCSP but DCSP cannot DCSP be DCSP null." % f.name)) DCNL DCSP  DCSP  DCSP  DCSP elif ((f.rel.on_delete == SET_DEFAULT) and (not f.has_default())): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP specifies DCSP on_delete=SET_DEFAULT, DCSP but DCSP has DCSP no DCSP default DCSP value." % f.name)) DCNL DCSP  DCSP  DCSP if f.rel: DCNL DCSP  DCSP  DCSP  DCSP if (f.rel.to not in models.get_models()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((not isinstance(f.rel.to, six.string_types)) and f.rel.to._meta.swapped): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP defines DCSP a DCSP relation DCSP with DCSP the DCSP model DCSP '%s.%s', DCSP which DCSP has DCSP been DCSP swapped DCSP out. DCSP Update DCSP the DCSP relation DCSP to DCSP point DCSP at DCSP settings.%s." % (f.name, f.rel.to._meta.app_label, f.rel.to._meta.object_name, f.rel.to._meta.swappable))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP has DCSP a DCSP relation DCSP with DCSP model DCSP %s, DCSP which DCSP has DCSP either DCSP not DCSP been DCSP installed DCSP or DCSP is DCSP abstract." % (f.name, f.rel.to))) DCNL DCSP  DCSP  DCSP  DCSP if isinstance(f.rel.to, six.string_types): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP if (not f.rel.to._meta.get_field(f.rel.field_name).unique): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Field DCSP '%s' DCSP under DCSP model DCSP '%s' DCSP must DCSP have DCSP a DCSP unique=True DCSP constraint." % (f.rel.field_name, f.rel.to.__name__))) DCNL DCSP  DCSP  DCSP  DCSP rel_opts = f.rel.to._meta DCNL DCSP  DCSP  DCSP  DCSP rel_name = RelatedObject(f.rel.to, cls, f).get_accessor_name() DCNL DCSP  DCSP  DCSP  DCSP rel_query_name = f.related_query_name() DCNL DCSP  DCSP  DCSP  DCSP if (not f.rel.is_hidden()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP for r in rel_opts.fields: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for r in rel_opts.local_many_to_many: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for r in rel_opts.get_all_related_many_to_many_objects(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for r in rel_opts.get_all_related_objects(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.field is not f): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP seen_intermediary_signatures = [] DCNL DCSP  DCSP for (i, f) in enumerate(opts.local_many_to_many): DCNL DCSP  DCSP  DCSP if (f.rel.to not in models.get_models()): DCNL DCSP  DCSP  DCSP  DCSP if ((not isinstance(f.rel.to, six.string_types)) and f.rel.to._meta.swapped): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP defines DCSP a DCSP relation DCSP with DCSP the DCSP model DCSP '%s.%s', DCSP which DCSP has DCSP been DCSP swapped DCSP out. DCSP Update DCSP the DCSP relation DCSP to DCSP point DCSP at DCSP settings.%s." % (f.name, f.rel.to._meta.app_label, f.rel.to._meta.object_name, f.rel.to._meta.swappable))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP has DCSP an DCSP m2m DCSP relation DCSP with DCSP model DCSP %s, DCSP which DCSP has DCSP either DCSP not DCSP been DCSP installed DCSP or DCSP is DCSP abstract." % (f.name, f.rel.to))) DCNL DCSP  DCSP  DCSP  DCSP if isinstance(f.rel.to, six.string_types): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if f.unique: DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ("ManyToManyFields DCSP cannot DCSP be DCSP unique. DCSP  DCSP Remove DCSP the DCSP unique DCSP argument DCSP on DCSP '%s'." % f.name)) DCNL DCSP  DCSP  DCSP if ((f.rel.through is not None) and (not isinstance(f.rel.through, six.string_types))): DCNL DCSP  DCSP  DCSP  DCSP (from_model, to_model) = (cls, f.rel.to) DCNL DCSP  DCSP  DCSP  DCSP if ((from_model == to_model) and f.rel.symmetrical and (not f.rel.through._meta.auto_created)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, 'Many-to-many DCSP fields DCSP with DCSP intermediate DCSP tables DCSP cannot DCSP be DCSP symmetrical.') DCNL DCSP  DCSP  DCSP  DCSP (seen_from, seen_to, seen_self) = (False, False, 0) DCNL DCSP  DCSP  DCSP  DCSP for inter_field in f.rel.through._meta.fields: DCNL DCSP  DCSP  DCSP  DCSP  DCSP rel_to = getattr(inter_field.rel, 'to', None) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (from_model == to_model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (rel_to == from_model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen_self += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (seen_self > 2): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('Intermediary DCSP model DCSP %s DCSP has DCSP more DCSP than DCSP two DCSP foreign DCSP keys DCSP to DCSP %s, DCSP which DCSP is DCSP ambiguous DCSP and DCSP is DCSP not DCSP permitted.' % (f.rel.through._meta.object_name, from_model._meta.object_name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (rel_to == from_model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if seen_from: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('Intermediary DCSP model DCSP %s DCSP has DCSP more DCSP than DCSP one DCSP foreign DCSP key DCSP to DCSP %s, DCSP which DCSP is DCSP ambiguous DCSP and DCSP is DCSP not DCSP permitted.' % (f.rel.through._meta.object_name, from_model._meta.object_name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen_from = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (rel_to == to_model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if seen_to: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('Intermediary DCSP model DCSP %s DCSP has DCSP more DCSP than DCSP one DCSP foreign DCSP key DCSP to DCSP %s, DCSP which DCSP is DCSP ambiguous DCSP and DCSP is DCSP not DCSP permitted.' % (f.rel.through._meta.object_name, rel_to._meta.object_name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen_to = True DCNL DCSP  DCSP  DCSP  DCSP if (f.rel.through not in models.get_models(include_auto_created=True)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP specifies DCSP an DCSP m2m DCSP relation DCSP through DCSP model DCSP %s, DCSP which DCSP has DCSP not DCSP been DCSP installed." % (f.name, f.rel.through))) DCNL DCSP  DCSP  DCSP  DCSP signature = (f.rel.to, cls, f.rel.through) DCNL DCSP  DCSP  DCSP  DCSP if (signature in seen_intermediary_signatures): DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('The DCSP model DCSP %s DCSP has DCSP two DCSP manually-defined DCSP m2m DCSP relations DCSP through DCSP the DCSP model DCSP %s, DCSP which DCSP is DCSP not DCSP permitted. DCSP Please DCSP consider DCSP using DCSP an DCSP extra DCSP field DCSP on DCSP your DCSP intermediary DCSP model DCSP instead.' % (cls._meta.object_name, f.rel.through._meta.object_name))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP seen_intermediary_signatures.append(signature) DCNL DCSP  DCSP  DCSP  DCSP if (not f.rel.through._meta.auto_created): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (seen_related_fk, seen_this_fk) = (False, False) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for field in f.rel.through._meta.fields: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if field.rel: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ((not seen_related_fk) and (field.rel.to == f.rel.to)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen_related_fk = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif (field.rel.to == cls): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen_this_fk = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((not seen_related_fk) or (not seen_this_fk)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP is DCSP a DCSP manually-defined DCSP m2m DCSP relation DCSP through DCSP model DCSP %s, DCSP which DCSP does DCSP not DCSP have DCSP foreign DCSP keys DCSP to DCSP %s DCSP and DCSP %s" % (f.name, f.rel.through._meta.object_name, f.rel.to._meta.object_name, cls._meta.object_name))) DCNL DCSP  DCSP  DCSP elif isinstance(f.rel.through, six.string_types): DCNL DCSP  DCSP  DCSP  DCSP e.add(opts, ("'%s' DCSP specifies DCSP an DCSP m2m DCSP relation DCSP through DCSP model DCSP %s, DCSP which DCSP has DCSP not DCSP been DCSP installed" % (f.name, f.rel.through))) DCNL DCSP  DCSP  DCSP rel_opts = f.rel.to._meta DCNL DCSP  DCSP  DCSP rel_name = RelatedObject(f.rel.to, cls, f).get_accessor_name() DCNL DCSP  DCSP  DCSP rel_query_name = f.related_query_name() DCNL DCSP  DCSP  DCSP if (rel_name is not None): DCNL DCSP  DCSP  DCSP  DCSP for r in rel_opts.fields: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP for r in rel_opts.local_many_to_many: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.name == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.name, f.name))) DCNL DCSP  DCSP  DCSP  DCSP for r in rel_opts.get_all_related_many_to_many_objects(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.field is not f): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP m2m DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP for r in rel_opts.get_all_related_objects(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Accessor DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (r.get_accessor_name() == rel_query_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ("Reverse DCSP query DCSP name DCSP for DCSP m2m DCSP field DCSP '%s' DCSP clashes DCSP with DCSP related DCSP field DCSP '%s.%s'. DCSP Add DCSP a DCSP related_name DCSP argument DCSP to DCSP the DCSP definition DCSP for DCSP '%s'." % (f.name, rel_opts.object_name, r.get_accessor_name(), f.name))) DCNL DCSP  DCSP if opts.ordering: DCNL DCSP  DCSP  DCSP for field_name in opts.ordering: DCNL DCSP  DCSP  DCSP  DCSP if (field_name == '?'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP if field_name.startswith('-'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP field_name = field_name[1:] DCNL DCSP  DCSP  DCSP  DCSP if (opts.order_with_respect_to and (field_name == '_order')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP if ('__' in field_name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP if (field_name == 'pk'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP opts.get_field(field_name, many_to_many=False) DCNL DCSP  DCSP  DCSP  DCSP except models.FieldDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP e.add(opts, ('"ordering" DCSP refers DCSP to DCSP "%s", DCSP a DCSP field DCSP that DCSP doesn\'t DCSP exist.' % field_name)) DCNL DCSP  DCSP for ut in opts.unique_together: DCNL DCSP  DCSP  DCSP validate_local_fields(e, opts, 'unique_together', ut) DCNL DCSP  DCSP if (not isinstance(opts.index_together, collections.Sequence)): DCNL DCSP  DCSP  DCSP e.add(opts, '"index_together" DCSP must DCSP a DCSP sequence') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for it in opts.index_together: DCNL DCSP  DCSP  DCSP  DCSP validate_local_fields(e, opts, 'index_together', it) DCNL DCSP return len(e.errors)
def sql_create(app, style, connection): DCNL  DCSP if (connection.settings_dict[u'ENGINE'] == u'django.db.backends.dummy'): DCNL DCSP  DCSP raise CommandError(((u"Django DCSP doesn't DCSP know DCSP which DCSP syntax DCSP to DCSP use DCSP for DCSP your DCSP SQL DCSP statements,\n" + u"because DCSP you DCSP haven't DCSP properly DCSP specified DCSP the DCSP ENGINE DCSP setting DCSP for DCSP the DCSP database.\n") + u'see: DCSP https://docs.djangoproject.com/en/dev/ref/settings/#databases')) DCNL DCSP app_models = models.get_models(app, include_auto_created=True) DCNL DCSP final_output = [] DCNL DCSP tables = connection.introspection.table_names() DCNL DCSP known_models = set([model for model in connection.introspection.installed_models(tables) if (model not in app_models)]) DCNL DCSP pending_references = {} DCNL DCSP for model in app_models: DCNL DCSP  DCSP (output, references) = connection.creation.sql_create_model(model, style, known_models) DCNL DCSP  DCSP final_output.extend(output) DCNL DCSP  DCSP for (refto, refs) in references.items(): DCNL DCSP  DCSP  DCSP pending_references.setdefault(refto, []).extend(refs) DCNL DCSP  DCSP  DCSP if (refto in known_models): DCNL DCSP  DCSP  DCSP  DCSP final_output.extend(connection.creation.sql_for_pending_references(refto, style, pending_references)) DCNL DCSP  DCSP final_output.extend(connection.creation.sql_for_pending_references(model, style, pending_references)) DCNL DCSP  DCSP known_models.add(model) DCNL DCSP not_installed_models = set(pending_references.keys()) DCNL DCSP if not_installed_models: DCNL DCSP  DCSP alter_sql = [] DCNL DCSP  DCSP for model in not_installed_models: DCNL DCSP  DCSP  DCSP alter_sql.extend([(u'-- DCSP ' + sql) for sql in connection.creation.sql_for_pending_references(model, style, pending_references)]) DCNL DCSP  DCSP if alter_sql: DCNL DCSP  DCSP  DCSP final_output.append(u'-- DCSP The DCSP following DCSP references DCSP should DCSP be DCSP added DCSP but DCSP depend DCSP on DCSP non-existent DCSP tables:') DCNL DCSP  DCSP  DCSP final_output.extend(alter_sql) DCNL DCSP return final_output
def sql_delete(app, style, connection): DCNL  DCSP try: DCNL DCSP  DCSP cursor = connection.cursor() DCNL DCSP except: DCNL DCSP  DCSP cursor = None DCNL DCSP if cursor: DCNL DCSP  DCSP table_names = connection.introspection.table_names(cursor) DCNL DCSP else: DCNL DCSP  DCSP table_names = [] DCNL DCSP output = [] DCNL DCSP to_delete = set() DCNL DCSP references_to_delete = {} DCNL DCSP app_models = models.get_models(app, include_auto_created=True) DCNL DCSP for model in app_models: DCNL DCSP  DCSP if (cursor and (connection.introspection.table_name_converter(model._meta.db_table) in table_names)): DCNL DCSP  DCSP  DCSP opts = model._meta DCNL DCSP  DCSP  DCSP for f in opts.local_fields: DCNL DCSP  DCSP  DCSP  DCSP if (f.rel and (f.rel.to not in to_delete)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP references_to_delete.setdefault(f.rel.to, []).append((model, f)) DCNL DCSP  DCSP  DCSP to_delete.add(model) DCNL DCSP for model in app_models: DCNL DCSP  DCSP if (connection.introspection.table_name_converter(model._meta.db_table) in table_names): DCNL DCSP  DCSP  DCSP output.extend(connection.creation.sql_destroy_model(model, references_to_delete, style)) DCNL DCSP if cursor: DCNL DCSP  DCSP cursor.close() DCNL DCSP  DCSP connection.close() DCNL DCSP return output[::(-1)]
def sql_flush(style, connection, only_django=False, reset_sequences=True): DCNL  DCSP if only_django: DCNL DCSP  DCSP tables = connection.introspection.django_table_names(only_existing=True) DCNL DCSP else: DCNL DCSP  DCSP tables = connection.introspection.table_names() DCNL DCSP seqs = (connection.introspection.sequence_list() if reset_sequences else ()) DCNL DCSP statements = connection.ops.sql_flush(style, tables, seqs) DCNL DCSP return statements
def sql_custom(app, style, connection): DCNL  DCSP output = [] DCNL DCSP app_models = get_models(app) DCNL DCSP for model in app_models: DCNL DCSP  DCSP output.extend(custom_sql_for_model(model, style, connection)) DCNL DCSP return output
def sql_indexes(app, style, connection): DCNL  DCSP output = [] DCNL DCSP for model in models.get_models(app): DCNL DCSP  DCSP output.extend(connection.creation.sql_indexes_for_model(model, style)) DCNL DCSP return output
def sql_all(app, style, connection): DCNL  DCSP return ((sql_create(app, style, connection) + sql_custom(app, style, connection)) + sql_indexes(app, style, connection))
def module_to_dict(module, omittable=(lambda k: k.startswith('_'))): DCNL  DCSP return dict([(k, repr(v)) for (k, v) in module.__dict__.items() if (not omittable(k))])
def handle_extensions(extensions=('html',), ignored=('py',)): DCNL  DCSP ext_list = [] DCNL DCSP for ext in extensions: DCNL DCSP  DCSP ext_list.extend(ext.replace(' DCSP ', '').split(',')) DCNL DCSP for (i, ext) in enumerate(ext_list): DCNL DCSP  DCSP if (not ext.startswith('.')): DCNL DCSP  DCSP  DCSP ext_list[i] = ('.%s' % ext_list[i]) DCNL DCSP return set([x for x in ext_list if (x.strip('.') not in ignored)])
def _popen(cmd): DCNL  DCSP p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE, close_fds=(os.name != 'nt'), universal_newlines=True) DCNL DCSP (output, errors) = p.communicate() DCNL DCSP return (output, errors, p.returncode)
def find_files(root, ignore_patterns, verbosity, stdout=sys.stdout, symlinks=False): DCNL  DCSP dir_suffix = ('%s*' % os.sep) DCNL DCSP norm_patterns = [(p[:(- len(dir_suffix))] if p.endswith(dir_suffix) else p) for p in ignore_patterns] DCNL DCSP all_files = [] DCNL DCSP for (dirpath, dirnames, filenames) in os.walk(root, topdown=True, followlinks=symlinks): DCNL DCSP  DCSP for dirname in dirnames[:]: DCNL DCSP  DCSP  DCSP if is_ignored(os.path.normpath(os.path.join(dirpath, dirname)), norm_patterns): DCNL DCSP  DCSP  DCSP  DCSP dirnames.remove(dirname) DCNL DCSP  DCSP  DCSP  DCSP if (verbosity > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP stdout.write(('ignoring DCSP directory DCSP %s\n' % dirname)) DCNL DCSP  DCSP for filename in filenames: DCNL DCSP  DCSP  DCSP if is_ignored(os.path.normpath(os.path.join(dirpath, filename)), ignore_patterns): DCNL DCSP  DCSP  DCSP  DCSP if (verbosity > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP stdout.write(('ignoring DCSP file DCSP %s DCSP in DCSP %s\n' % (filename, dirpath))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP all_files.extend([(dirpath, filename)]) DCNL DCSP all_files.sort() DCNL DCSP return all_files
def is_ignored(path, ignore_patterns): DCNL  DCSP for pattern in ignore_patterns: DCNL DCSP  DCSP if fnmatch.fnmatchcase(path, pattern): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def copy_plural_forms(msgs, locale, domain, verbosity, stdout=sys.stdout): DCNL  DCSP django_dir = os.path.normpath(os.path.join(os.path.dirname(django.__file__))) DCNL DCSP if (domain == 'djangojs'): DCNL DCSP  DCSP domains = ('djangojs', 'django') DCNL DCSP else: DCNL DCSP  DCSP domains = ('django',) DCNL DCSP for domain in domains: DCNL DCSP  DCSP django_po = os.path.join(django_dir, 'conf', 'locale', locale, 'LC_MESSAGES', ('%s.po' % domain)) DCNL DCSP  DCSP if os.path.exists(django_po): DCNL DCSP  DCSP  DCSP with open(django_po, 'rU') as fp: DCNL DCSP  DCSP  DCSP  DCSP m = plural_forms_re.search(fp.read()) DCNL DCSP  DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP  DCSP if (verbosity > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP stdout.write(('copying DCSP plural DCSP forms: DCSP %s\n' % m.group('value'))) DCNL DCSP  DCSP  DCSP  DCSP lines = [] DCNL DCSP  DCSP  DCSP  DCSP seen = False DCNL DCSP  DCSP  DCSP  DCSP for line in msgs.split('\n'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((not line) and (not seen)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP line = ('%s\n' % m.group('value')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP seen = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP lines.append(line) DCNL DCSP  DCSP  DCSP  DCSP msgs = '\n'.join(lines) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP return msgs
def write_pot_file(potfile, msgs, file, work_file, is_templatized): DCNL  DCSP if is_templatized: DCNL DCSP  DCSP old = ('#: DCSP ' + work_file[2:]) DCNL DCSP  DCSP new = ('#: DCSP ' + file[2:]) DCNL DCSP  DCSP msgs = msgs.replace(old, new) DCNL DCSP if os.path.exists(potfile): DCNL DCSP  DCSP msgs = '\n'.join(dropwhile(len, msgs.split('\n'))) DCNL DCSP else: DCNL DCSP  DCSP msgs = msgs.replace('charset=CHARSET', 'charset=UTF-8') DCNL DCSP with open(potfile, 'a') as fp: DCNL DCSP  DCSP fp.write(msgs)
def process_file(file, dirpath, potfile, domain, verbosity, extensions, wrap, location, stdout=sys.stdout): DCNL  DCSP from django.utils.translation import templatize DCNL DCSP (_, file_ext) = os.path.splitext(file) DCNL DCSP is_file_ext_in_extensions = (file_ext in extensions) DCNL DCSP is_handlebars = False DCNL DCSP if (is_file_ext_in_extensions and ('handlebars' in file_ext)): DCNL DCSP  DCSP is_handlebars = True DCNL DCSP if (is_handlebars and (domain != 'djangojs')): DCNL DCSP  DCSP stdout.write('You DCSP must DCSP set DCSP the DCSP domain DCSP to DCSP "djangojs" DCSP like DCSP `-d DCSP djangojs` DCSP for DCSP handlebars DCSP templates!') DCNL DCSP if ((domain == 'djangojs') and is_file_ext_in_extensions and (not is_handlebars)): DCNL DCSP  DCSP is_templatized = True DCNL DCSP  DCSP orig_file = os.path.join(dirpath, file) DCNL DCSP  DCSP with open(orig_file) as fp: DCNL DCSP  DCSP  DCSP src_data = fp.read() DCNL DCSP  DCSP thefile = ('%s.c' % file) DCNL DCSP  DCSP work_file = os.path.join(dirpath, thefile) DCNL DCSP  DCSP with open(work_file, 'w') as fp: DCNL DCSP  DCSP  DCSP fp.write(src_data) DCNL DCSP  DCSP cmd = ('xgettext DCSP -d DCSP %s DCSP -L DCSP JavaScript DCSP %s DCSP %s DCSP --keyword=gettext_noop DCSP --keyword=gettext_lazy DCSP --keyword=ngettext_lazy:1,2 DCSP --keyword=pgettext:1c,2 DCSP --keyword=npgettext:1c,2,3 DCSP --from-code DCSP UTF-8 DCSP --add-comments=Translators DCSP -o DCSP - DCSP "%s"' % (domain, wrap, location, work_file)) DCNL DCSP elif (((domain == 'django') and ((file_ext == '.py') or is_file_ext_in_extensions) and (not is_handlebars)) or ((domain == 'djangojs') and is_handlebars)): DCNL DCSP  DCSP thefile = file DCNL DCSP  DCSP orig_file = os.path.join(dirpath, file) DCNL DCSP  DCSP is_templatized = is_file_ext_in_extensions DCNL DCSP  DCSP if is_templatized: DCNL DCSP  DCSP  DCSP with open(orig_file, 'rU') as fp: DCNL DCSP  DCSP  DCSP  DCSP src_data = fp.read() DCNL DCSP  DCSP  DCSP thefile = ('%s.py' % file) DCNL DCSP  DCSP  DCSP content = templatize(src_data, orig_file[2:]) DCNL DCSP  DCSP  DCSP with open(os.path.join(dirpath, thefile), 'w') as fp: DCNL DCSP  DCSP  DCSP  DCSP fp.write(content) DCNL DCSP  DCSP work_file = os.path.join(dirpath, thefile) DCNL DCSP  DCSP cmd = ('xgettext DCSP -d DCSP %s DCSP -L DCSP Python DCSP %s DCSP %s DCSP --keyword=gettext_noop DCSP --keyword=gettext_lazy DCSP --keyword=ngettext_lazy:1,2 DCSP --keyword=ugettext_noop DCSP --keyword=ugettext_lazy DCSP --keyword=ungettext_lazy:1,2 DCSP --keyword=pgettext:1c,2 DCSP --keyword=npgettext:1c,2,3 DCSP --keyword=pgettext_lazy:1c,2 DCSP --keyword=npgettext_lazy:1c,2,3 DCSP --from-code DCSP UTF-8 DCSP --add-comments=Translators DCSP -o DCSP - DCSP "%s"' % (domain, wrap, location, work_file)) DCNL DCSP else: DCNL DCSP  DCSP if (verbosity > 1): DCNL DCSP  DCSP  DCSP stdout.write(('ignoring DCSP file DCSP %s DCSP in DCSP %s\n' % (file, dirpath))) DCNL DCSP  DCSP return DCNL DCSP if (verbosity > 1): DCNL DCSP  DCSP stdout.write(('processing DCSP file DCSP %s DCSP in DCSP %s\n' % (file, dirpath))) DCNL DCSP (msgs, errors, status) = _popen(cmd) DCNL DCSP if errors: DCNL DCSP  DCSP if (status != STATUS_OK): DCNL DCSP  DCSP  DCSP if is_templatized: DCNL DCSP  DCSP  DCSP  DCSP os.unlink(work_file) DCNL DCSP  DCSP  DCSP if os.path.exists(potfile): DCNL DCSP  DCSP  DCSP  DCSP os.unlink(potfile) DCNL DCSP  DCSP  DCSP raise CommandError(('errors DCSP happened DCSP while DCSP running DCSP xgettext DCSP on DCSP %s\n%s' % (file, errors))) DCNL DCSP  DCSP elif (verbosity > 0): DCNL DCSP  DCSP  DCSP stdout.write(errors) DCNL DCSP if msgs: DCNL DCSP  DCSP write_pot_file(potfile, msgs, orig_file, work_file, is_templatized) DCNL DCSP if is_templatized: DCNL DCSP  DCSP os.unlink(work_file)
def write_po_file(pofile, potfile, domain, locale, verbosity, stdout, copy_pforms, wrap, location, no_obsolete): DCNL  DCSP (msgs, errors, status) = _popen(('msguniq DCSP %s DCSP %s DCSP --to-code=utf-8 DCSP "%s"' % (wrap, location, potfile))) DCNL DCSP if errors: DCNL DCSP  DCSP if (status != STATUS_OK): DCNL DCSP  DCSP  DCSP raise CommandError(('errors DCSP happened DCSP while DCSP running DCSP msguniq\n%s' % errors)) DCNL DCSP  DCSP elif (verbosity > 0): DCNL DCSP  DCSP  DCSP stdout.write(errors) DCNL DCSP if os.path.exists(pofile): DCNL DCSP  DCSP with open(potfile, 'w') as fp: DCNL DCSP  DCSP  DCSP fp.write(msgs) DCNL DCSP  DCSP (msgs, errors, status) = _popen(('msgmerge DCSP %s DCSP %s DCSP -q DCSP "%s" DCSP "%s"' % (wrap, location, pofile, potfile))) DCNL DCSP  DCSP if errors: DCNL DCSP  DCSP  DCSP if (status != STATUS_OK): DCNL DCSP  DCSP  DCSP  DCSP os.unlink(potfile) DCNL DCSP  DCSP  DCSP  DCSP raise CommandError(('errors DCSP happened DCSP while DCSP running DCSP msgmerge\n%s' % errors)) DCNL DCSP  DCSP  DCSP elif (verbosity > 0): DCNL DCSP  DCSP  DCSP  DCSP stdout.write(errors) DCNL DCSP elif copy_pforms: DCNL DCSP  DCSP msgs = copy_plural_forms(msgs, locale, domain, verbosity, stdout) DCNL DCSP msgs = msgs.replace(('#. DCSP #-#-#-#-# DCSP  DCSP %s.pot DCSP (PACKAGE DCSP VERSION) DCSP  DCSP #-#-#-#-#\n' % domain), '') DCNL DCSP with open(pofile, 'w') as fp: DCNL DCSP  DCSP fp.write(msgs) DCNL DCSP os.unlink(potfile) DCNL DCSP if no_obsolete: DCNL DCSP  DCSP (msgs, errors, status) = _popen(('msgattrib DCSP %s DCSP %s DCSP -o DCSP "%s" DCSP --no-obsolete DCSP "%s"' % (wrap, location, pofile, pofile))) DCNL DCSP  DCSP if errors: DCNL DCSP  DCSP  DCSP if (status != STATUS_OK): DCNL DCSP  DCSP  DCSP  DCSP raise CommandError(('errors DCSP happened DCSP while DCSP running DCSP msgattrib\n%s' % errors)) DCNL DCSP  DCSP  DCSP elif (verbosity > 0): DCNL DCSP  DCSP  DCSP  DCSP stdout.write(errors)
def make_messages(locale=None, domain='django', verbosity=1, all=False, extensions=None, symlinks=False, ignore_patterns=None, no_wrap=False, no_location=False, no_obsolete=False, stdout=sys.stdout): DCNL  DCSP from django.conf import settings DCNL DCSP if settings.configured: DCNL DCSP  DCSP settings.USE_I18N = True DCNL DCSP else: DCNL DCSP  DCSP settings.configure(USE_I18N=True) DCNL DCSP if (ignore_patterns is None): DCNL DCSP  DCSP ignore_patterns = [] DCNL DCSP invoked_for_django = False DCNL DCSP if os.path.isdir(os.path.join('conf', 'locale')): DCNL DCSP  DCSP localedir = os.path.abspath(os.path.join('conf', 'locale')) DCNL DCSP  DCSP invoked_for_django = True DCNL DCSP  DCSP ignore_patterns += ['contrib/*'] DCNL DCSP elif os.path.isdir('locale'): DCNL DCSP  DCSP localedir = os.path.abspath('locale') DCNL DCSP else: DCNL DCSP  DCSP raise CommandError('This DCSP script DCSP should DCSP be DCSP run DCSP from DCSP the DCSP Django DCSP Git DCSP tree DCSP or DCSP your DCSP project DCSP or DCSP app DCSP tree. DCSP If DCSP you DCSP did DCSP indeed DCSP run DCSP it DCSP from DCSP the DCSP Git DCSP checkout DCSP or DCSP your DCSP project DCSP or DCSP application, DCSP maybe DCSP you DCSP are DCSP just DCSP missing DCSP the DCSP conf/locale DCSP (in DCSP the DCSP django DCSP tree) DCSP or DCSP locale DCSP (for DCSP project DCSP and DCSP application) DCSP directory? DCSP It DCSP is DCSP not DCSP created DCSP automatically, DCSP you DCSP have DCSP to DCSP create DCSP it DCSP by DCSP hand DCSP if DCSP you DCSP want DCSP to DCSP enable DCSP i18n DCSP for DCSP your DCSP project DCSP or DCSP application.') DCNL DCSP if (domain not in ('django', 'djangojs')): DCNL DCSP  DCSP raise CommandError("currently DCSP makemessages DCSP only DCSP supports DCSP domains DCSP 'django' DCSP and DCSP 'djangojs'") DCNL DCSP if (((locale is None) and (not all)) or (domain is None)): DCNL DCSP  DCSP message = ("Type DCSP '%s DCSP help DCSP %s' DCSP for DCSP usage DCSP information." % (os.path.basename(sys.argv[0]), sys.argv[1])) DCNL DCSP  DCSP raise CommandError(message) DCNL DCSP (output, errors, status) = _popen('xgettext DCSP --version') DCNL DCSP if (status != STATUS_OK): DCNL DCSP  DCSP raise CommandError('Error DCSP running DCSP xgettext. DCSP Note DCSP that DCSP Django DCSP internationalization DCSP requires DCSP GNU DCSP gettext DCSP 0.15 DCSP or DCSP newer.') DCNL DCSP match = re.search('(?P<major>\\d+)\\.(?P<minor>\\d+)', output) DCNL DCSP if match: DCNL DCSP  DCSP xversion = (int(match.group('major')), int(match.group('minor'))) DCNL DCSP  DCSP if (xversion < (0, 15)): DCNL DCSP  DCSP  DCSP raise CommandError(('Django DCSP internationalization DCSP requires DCSP GNU DCSP gettext DCSP 0.15 DCSP or DCSP newer. DCSP You DCSP are DCSP using DCSP version DCSP %s, DCSP please DCSP upgrade DCSP your DCSP gettext DCSP toolset.' % match.group())) DCNL DCSP locales = [] DCNL DCSP if (locale is not None): DCNL DCSP  DCSP locales.append(str(locale)) DCNL DCSP elif all: DCNL DCSP  DCSP locale_dirs = filter(os.path.isdir, glob.glob(('%s/*' % localedir))) DCNL DCSP  DCSP locales = [os.path.basename(l) for l in locale_dirs] DCNL DCSP wrap = ('--no-wrap' if no_wrap else '') DCNL DCSP location = ('--no-location' if no_location else '') DCNL DCSP for locale in locales: DCNL DCSP  DCSP if (verbosity > 0): DCNL DCSP  DCSP  DCSP stdout.write(('processing DCSP language DCSP %s\n' % locale)) DCNL DCSP  DCSP basedir = os.path.join(localedir, locale, 'LC_MESSAGES') DCNL DCSP  DCSP if (not os.path.isdir(basedir)): DCNL DCSP  DCSP  DCSP os.makedirs(basedir) DCNL DCSP  DCSP pofile = os.path.join(basedir, ('%s.po' % str(domain))) DCNL DCSP  DCSP potfile = os.path.join(basedir, ('%s.pot' % str(domain))) DCNL DCSP  DCSP if os.path.exists(potfile): DCNL DCSP  DCSP  DCSP os.unlink(potfile) DCNL DCSP  DCSP for (dirpath, file) in find_files(os.getcwd(), ignore_patterns, verbosity, stdout, symlinks=symlinks): DCNL DCSP  DCSP  DCSP process_file(file, dirpath, potfile, domain, verbosity, extensions, wrap, location, stdout) DCNL DCSP  DCSP if os.path.exists(potfile): DCNL DCSP  DCSP  DCSP write_po_file(pofile, potfile, domain, locale, verbosity, stdout, (not invoked_for_django), wrap, location, no_obsolete)
def sort_dependencies(app_list): DCNL  DCSP from django.db.models import get_model, get_models DCNL DCSP model_dependencies = [] DCNL DCSP models = set() DCNL DCSP for (app, model_list) in app_list: DCNL DCSP  DCSP if (model_list is None): DCNL DCSP  DCSP  DCSP model_list = get_models(app) DCNL DCSP  DCSP for model in model_list: DCNL DCSP  DCSP  DCSP models.add(model) DCNL DCSP  DCSP  DCSP if hasattr(model, 'natural_key'): DCNL DCSP  DCSP  DCSP  DCSP deps = getattr(model.natural_key, 'dependencies', []) DCNL DCSP  DCSP  DCSP  DCSP if deps: DCNL DCSP  DCSP  DCSP  DCSP  DCSP deps = [get_model(*d.split('.')) for d in deps] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP deps = [] DCNL DCSP  DCSP  DCSP for field in model._meta.fields: DCNL DCSP  DCSP  DCSP  DCSP if hasattr(field.rel, 'to'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP rel_model = field.rel.to DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (hasattr(rel_model, 'natural_key') and (rel_model != model)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP deps.append(rel_model) DCNL DCSP  DCSP  DCSP for field in model._meta.many_to_many: DCNL DCSP  DCSP  DCSP  DCSP rel_model = field.rel.to DCNL DCSP  DCSP  DCSP  DCSP if (hasattr(rel_model, 'natural_key') and (rel_model != model)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP deps.append(rel_model) DCNL DCSP  DCSP  DCSP model_dependencies.append((model, deps)) DCNL DCSP model_dependencies.reverse() DCNL DCSP model_list = [] DCNL DCSP while model_dependencies: DCNL DCSP  DCSP skipped = [] DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP while model_dependencies: DCNL DCSP  DCSP  DCSP (model, deps) = model_dependencies.pop() DCNL DCSP  DCSP  DCSP found = True DCNL DCSP  DCSP  DCSP for candidate in (((d not in models) or (d in model_list)) for d in deps): DCNL DCSP  DCSP  DCSP  DCSP if (not candidate): DCNL DCSP  DCSP  DCSP  DCSP  DCSP found = False DCNL DCSP  DCSP  DCSP if found: DCNL DCSP  DCSP  DCSP  DCSP model_list.append(model) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP skipped.append((model, deps)) DCNL DCSP  DCSP if (not changed): DCNL DCSP  DCSP  DCSP raise CommandError(("Can't DCSP resolve DCSP dependencies DCSP for DCSP %s DCSP in DCSP serialized DCSP app DCSP list." % ', DCSP '.join((('%s.%s' % (model._meta.app_label, model._meta.object_name)) for (model, deps) in sorted(skipped, key=(lambda obj: obj[0].__name__)))))) DCNL DCSP  DCSP model_dependencies = skipped DCNL DCSP return model_list
def supports_color(): DCNL  DCSP unsupported_platform = (sys.platform in ('win32', 'Pocket DCSP PC')) DCNL DCSP is_a_tty = (hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()) DCNL DCSP if (unsupported_platform or (not is_a_tty)): DCNL DCSP  DCSP return False DCNL DCSP return True
def color_style(): DCNL  DCSP if (not supports_color()): DCNL DCSP  DCSP style = no_style() DCNL DCSP else: DCNL DCSP  DCSP DJANGO_COLORS = os.environ.get('DJANGO_COLORS', '') DCNL DCSP  DCSP color_settings = termcolors.parse_color_setting(DJANGO_COLORS) DCNL DCSP  DCSP if color_settings: DCNL DCSP  DCSP  DCSP class dummy: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP style = dummy() DCNL DCSP  DCSP  DCSP for role in termcolors.PALETTES[termcolors.NOCOLOR_PALETTE]: DCNL DCSP  DCSP  DCSP  DCSP format = color_settings.get(role, {}) DCNL DCSP  DCSP  DCSP  DCSP setattr(style, role, termcolors.make_style(**format)) DCNL DCSP  DCSP  DCSP style.ERROR_OUTPUT = style.ERROR DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP style = no_style() DCNL DCSP return style
def no_style(): DCNL  DCSP class dummy: DCNL DCSP  DCSP def __getattr__(self, attr): DCNL DCSP  DCSP  DCSP return (lambda x: x) DCNL DCSP return dummy()
def find_commands(management_dir): DCNL  DCSP command_dir = os.path.join(management_dir, 'commands') DCNL DCSP try: DCNL DCSP  DCSP return [f[:(-3)] for f in os.listdir(command_dir) if ((not f.startswith('_')) and f.endswith('.py'))] DCNL DCSP except OSError: DCNL DCSP  DCSP return []
def find_management_module(app_name): DCNL  DCSP parts = app_name.split('.') DCNL DCSP parts.append('management') DCNL DCSP parts.reverse() DCNL DCSP part = parts.pop() DCNL DCSP path = None DCNL DCSP try: DCNL DCSP  DCSP (f, path, descr) = imp.find_module(part, path) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP if (os.path.basename(os.getcwd()) != part): DCNL DCSP  DCSP  DCSP raise e DCNL DCSP else: DCNL DCSP  DCSP if f: DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP while parts: DCNL DCSP  DCSP part = parts.pop() DCNL DCSP  DCSP (f, path, descr) = imp.find_module(part, ((path and [path]) or None)) DCNL DCSP  DCSP if f: DCNL DCSP  DCSP  DCSP f.close() DCNL DCSP return path
def load_command_class(app_name, name): DCNL  DCSP module = import_module(('%s.management.commands.%s' % (app_name, name))) DCNL DCSP return module.Command()
def get_commands(): DCNL  DCSP global _commands DCNL DCSP if (_commands is None): DCNL DCSP  DCSP _commands = dict([(name, 'django.core') for name in find_commands(__path__[0])]) DCNL DCSP  DCSP from django.conf import settings DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP apps = settings.INSTALLED_APPS DCNL DCSP  DCSP except ImproperlyConfigured: DCNL DCSP  DCSP  DCSP apps = [] DCNL DCSP  DCSP for app_name in apps: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP path = find_management_module(app_name) DCNL DCSP  DCSP  DCSP  DCSP _commands.update(dict([(name, app_name) for name in find_commands(path)])) DCNL DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP return _commands
def call_command(name, *args, **options): DCNL  DCSP try: DCNL DCSP  DCSP app_name = get_commands()[name] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise CommandError(('Unknown DCSP command: DCSP %r' % name)) DCNL DCSP if isinstance(app_name, BaseCommand): DCNL DCSP  DCSP klass = app_name DCNL DCSP else: DCNL DCSP  DCSP klass = load_command_class(app_name, name) DCNL DCSP defaults = {} DCNL DCSP for opt in klass.option_list: DCNL DCSP  DCSP if (opt.default is NO_DEFAULT): DCNL DCSP  DCSP  DCSP defaults[opt.dest] = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP defaults[opt.dest] = opt.default DCNL DCSP defaults.update(options) DCNL DCSP return klass.execute(*args, **defaults)
def setup_environ(settings_mod, original_settings_path=None): DCNL  DCSP warnings.warn("The DCSP 'setup_environ' DCSP function DCSP is DCSP deprecated, DCSP you DCSP likely DCSP need DCSP to DCSP update DCSP your DCSP 'manage.py'; DCSP please DCSP see DCSP the DCSP Django DCSP 1.4 DCSP release DCSP notes DCSP (https://docs.djangoproject.com/en/dev/releases/1.4/).", DeprecationWarning) DCNL DCSP if ('__init__.py' in upath(settings_mod.__file__)): DCNL DCSP  DCSP p = os.path.dirname(upath(settings_mod.__file__)) DCNL DCSP else: DCNL DCSP  DCSP p = upath(settings_mod.__file__) DCNL DCSP (project_directory, settings_filename) = os.path.split(p) DCNL DCSP if ((project_directory == os.curdir) or (not project_directory)): DCNL DCSP  DCSP project_directory = os.getcwd() DCNL DCSP project_name = os.path.basename(project_directory) DCNL DCSP settings_name = os.path.splitext(settings_filename)[0] DCNL DCSP if settings_name.endswith('$py'): DCNL DCSP  DCSP settings_name = settings_name[:(-3)] DCNL DCSP if original_settings_path: DCNL DCSP  DCSP os.environ['DJANGO_SETTINGS_MODULE'] = original_settings_path DCNL DCSP else: DCNL DCSP  DCSP os.environ['DJANGO_SETTINGS_MODULE'] = os.environ.get('DJANGO_SETTINGS_MODULE', ('%s.%s' % (project_name, settings_name))) DCNL DCSP sys.path.append(os.path.join(project_directory, os.pardir)) DCNL DCSP import_module(project_name) DCNL DCSP sys.path.pop() DCNL DCSP return project_directory
def execute_from_command_line(argv=None): DCNL  DCSP utility = ManagementUtility(argv) DCNL DCSP utility.execute()
def execute_manager(settings_mod, argv=None): DCNL  DCSP warnings.warn("The DCSP 'execute_manager' DCSP function DCSP is DCSP deprecated, DCSP you DCSP likely DCSP need DCSP to DCSP update DCSP your DCSP 'manage.py'; DCSP please DCSP see DCSP the DCSP Django DCSP 1.4 DCSP release DCSP notes DCSP (https://docs.djangoproject.com/en/dev/releases/1.4/).", DeprecationWarning) DCNL DCSP setup_environ(settings_mod) DCNL DCSP utility = ManagementUtility(argv) DCNL DCSP utility.execute()
def handle_default_options(options): DCNL  DCSP if options.settings: DCNL DCSP  DCSP os.environ['DJANGO_SETTINGS_MODULE'] = options.settings DCNL DCSP if options.pythonpath: DCNL DCSP  DCSP sys.path.insert(0, options.pythonpath)
def get_path_info(environ): DCNL  DCSP path_info = environ.get(u'PATH_INFO', str(u'/')) DCNL DCSP if six.PY3: DCNL DCSP  DCSP path_info = path_info.encode(u'iso-8859-1') DCNL DCSP return path_info.decode(u'utf-8')
def get_script_name(environ): DCNL  DCSP if (settings.FORCE_SCRIPT_NAME is not None): DCNL DCSP  DCSP return force_text(settings.FORCE_SCRIPT_NAME) DCNL DCSP script_url = environ.get(u'SCRIPT_URL', environ.get(u'REDIRECT_URL', str(u''))) DCNL DCSP if script_url: DCNL DCSP  DCSP script_name = script_url[:(- len(environ.get(u'PATH_INFO', str(u''))))] DCNL DCSP else: DCNL DCSP  DCSP script_name = environ.get(u'SCRIPT_NAME', str(u'')) DCNL DCSP if six.PY3: DCNL DCSP  DCSP script_name = script_name.encode(u'iso-8859-1') DCNL DCSP return script_name.decode(u'utf-8')
def get_internal_wsgi_application(): DCNL  DCSP from django.conf import settings DCNL DCSP app_path = getattr(settings, u'WSGI_APPLICATION') DCNL DCSP if (app_path is None): DCNL DCSP  DCSP return get_wsgi_application() DCNL DCSP (module_name, attr) = app_path.rsplit(u'.', 1) DCNL DCSP try: DCNL DCSP  DCSP mod = import_module(module_name) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured((u"WSGI DCSP application DCSP '%s' DCSP could DCSP not DCSP be DCSP loaded; DCSP could DCSP not DCSP import DCSP module DCSP '%s': DCSP %s" % (app_path, module_name, e))) DCNL DCSP try: DCNL DCSP  DCSP app = getattr(mod, attr) DCNL DCSP except AttributeError as e: DCNL DCSP  DCSP raise ImproperlyConfigured((u"WSGI DCSP application DCSP '%s' DCSP could DCSP not DCSP be DCSP loaded; DCSP can't DCSP find DCSP '%s' DCSP in DCSP module DCSP '%s': DCSP %s" % (app_path, attr, module_name, e))) DCNL DCSP return app
def set_language(request): DCNL  DCSP next = request.REQUEST.get('next') DCNL DCSP if (not is_safe_url(url=next, host=request.get_host())): DCNL DCSP  DCSP next = request.META.get('HTTP_REFERER') DCNL DCSP  DCSP if (not is_safe_url(url=next, host=request.get_host())): DCNL DCSP  DCSP  DCSP next = '/' DCNL DCSP response = http.HttpResponseRedirect(next) DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP lang_code = request.POST.get('language', None) DCNL DCSP  DCSP if (lang_code and check_for_language(lang_code)): DCNL DCSP  DCSP  DCSP if hasattr(request, 'session'): DCNL DCSP  DCSP  DCSP  DCSP request.session['django_language'] = lang_code DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP response.set_cookie(settings.LANGUAGE_COOKIE_NAME, lang_code) DCNL DCSP return response
def get_formats(): DCNL  DCSP FORMAT_SETTINGS = ('DATE_FORMAT', 'DATETIME_FORMAT', 'TIME_FORMAT', 'YEAR_MONTH_FORMAT', 'MONTH_DAY_FORMAT', 'SHORT_DATE_FORMAT', 'SHORT_DATETIME_FORMAT', 'FIRST_DAY_OF_WEEK', 'DECIMAL_SEPARATOR', 'THOUSAND_SEPARATOR', 'NUMBER_GROUPING', 'DATE_INPUT_FORMATS', 'TIME_INPUT_FORMATS', 'DATETIME_INPUT_FORMATS') DCNL DCSP result = {} DCNL DCSP for module in ([settings] + get_format_modules(reverse=True)): DCNL DCSP  DCSP for attr in FORMAT_SETTINGS: DCNL DCSP  DCSP  DCSP result[attr] = get_format(attr) DCNL DCSP src = [] DCNL DCSP for (k, v) in result.items(): DCNL DCSP  DCSP if isinstance(v, (six.string_types, int)): DCNL DCSP  DCSP  DCSP src.append(("formats['%s'] DCSP = DCSP '%s';\n" % (javascript_quote(k), javascript_quote(smart_text(v))))) DCNL DCSP  DCSP elif isinstance(v, (tuple, list)): DCNL DCSP  DCSP  DCSP v = [javascript_quote(smart_text(value)) for value in v] DCNL DCSP  DCSP  DCSP src.append(("formats['%s'] DCSP = DCSP ['%s'];\n" % (javascript_quote(k), "', DCSP '".join(v)))) DCNL DCSP return ''.join(src)
def null_javascript_catalog(request, domain=None, packages=None): DCNL  DCSP src = [NullSource, InterPolate, LibFormatHead, get_formats(), LibFormatFoot] DCNL DCSP return http.HttpResponse(''.join(src), 'text/javascript')
def javascript_catalog(request, domain='djangojs', packages=None): DCNL  DCSP if request.GET: DCNL DCSP  DCSP if ('language' in request.GET): DCNL DCSP  DCSP  DCSP if check_for_language(request.GET['language']): DCNL DCSP  DCSP  DCSP  DCSP activate(request.GET['language']) DCNL DCSP if (packages is None): DCNL DCSP  DCSP packages = ['django.conf'] DCNL DCSP if isinstance(packages, six.string_types): DCNL DCSP  DCSP packages = packages.split('+') DCNL DCSP packages = [p for p in packages if ((p == 'django.conf') or (p in settings.INSTALLED_APPS))] DCNL DCSP default_locale = to_locale(settings.LANGUAGE_CODE) DCNL DCSP locale = to_locale(get_language()) DCNL DCSP t = {} DCNL DCSP paths = [] DCNL DCSP en_selected = locale.startswith('en') DCNL DCSP en_catalog_missing = True DCNL DCSP for package in packages: DCNL DCSP  DCSP p = importlib.import_module(package) DCNL DCSP  DCSP path = os.path.join(os.path.dirname(upath(p.__file__)), 'locale') DCNL DCSP  DCSP paths.append(path) DCNL DCSP paths.extend(list(reversed(settings.LOCALE_PATHS))) DCNL DCSP for path in paths: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP catalog = gettext_module.translation(domain, path, ['en']) DCNL DCSP  DCSP  DCSP t.update(catalog._catalog) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if en_selected: DCNL DCSP  DCSP  DCSP  DCSP en_catalog_missing = False DCNL DCSP if (default_locale != 'en'): DCNL DCSP  DCSP for path in paths: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP catalog = gettext_module.translation(domain, path, [default_locale]) DCNL DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP catalog = None DCNL DCSP  DCSP  DCSP if (catalog is not None): DCNL DCSP  DCSP  DCSP  DCSP t.update(catalog._catalog) DCNL DCSP if (locale != default_locale): DCNL DCSP  DCSP if (en_selected and en_catalog_missing): DCNL DCSP  DCSP  DCSP t = {} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP locale_t = {} DCNL DCSP  DCSP  DCSP for path in paths: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP catalog = gettext_module.translation(domain, path, [locale]) DCNL DCSP  DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP catalog = None DCNL DCSP  DCSP  DCSP  DCSP if (catalog is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP locale_t.update(catalog._catalog) DCNL DCSP  DCSP  DCSP if locale_t: DCNL DCSP  DCSP  DCSP  DCSP t = locale_t DCNL DCSP src = [LibHead] DCNL DCSP plural = None DCNL DCSP if ('' in t): DCNL DCSP  DCSP for l in t[''].split('\n'): DCNL DCSP  DCSP  DCSP if l.startswith('Plural-Forms:'): DCNL DCSP  DCSP  DCSP  DCSP plural = l.split(':', 1)[1].strip() DCNL DCSP if (plural is not None): DCNL DCSP  DCSP plural = [el.strip() for el in plural.split(';') if el.strip().startswith('plural=')][0].split('=', 1)[1] DCNL DCSP  DCSP src.append((PluralIdx % plural)) DCNL DCSP else: DCNL DCSP  DCSP src.append(SimplePlural) DCNL DCSP csrc = [] DCNL DCSP pdict = {} DCNL DCSP for (k, v) in t.items(): DCNL DCSP  DCSP if (k == ''): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if isinstance(k, six.string_types): DCNL DCSP  DCSP  DCSP csrc.append(("catalog['%s'] DCSP = DCSP '%s';\n" % (javascript_quote(k), javascript_quote(v)))) DCNL DCSP  DCSP elif isinstance(k, tuple): DCNL DCSP  DCSP  DCSP if (k[0] not in pdict): DCNL DCSP  DCSP  DCSP  DCSP pdict[k[0]] = k[1] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP pdict[k[0]] = max(k[1], pdict[k[0]]) DCNL DCSP  DCSP  DCSP csrc.append(("catalog['%s'][%d] DCSP = DCSP '%s';\n" % (javascript_quote(k[0]), k[1], javascript_quote(v)))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError(k) DCNL DCSP csrc.sort() DCNL DCSP for (k, v) in pdict.items(): DCNL DCSP  DCSP src.append(("catalog['%s'] DCSP = DCSP [%s];\n" % (javascript_quote(k), ','.join((["''"] * (v + 1)))))) DCNL DCSP src.extend(csrc) DCNL DCSP src.append(LibFoot) DCNL DCSP src.append(InterPolate) DCNL DCSP src.append(LibFormatHead) DCNL DCSP src.append(get_formats()) DCNL DCSP src.append(LibFormatFoot) DCNL DCSP src = ''.join(src) DCNL DCSP return http.HttpResponse(src, 'text/javascript')
def serve(request, path, document_root=None, show_indexes=False): DCNL  DCSP path = posixpath.normpath(unquote(path)) DCNL DCSP path = path.lstrip(u'/') DCNL DCSP newpath = u'' DCNL DCSP for part in path.split(u'/'): DCNL DCSP  DCSP if (not part): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (drive, part) = os.path.splitdrive(part) DCNL DCSP  DCSP (head, part) = os.path.split(part) DCNL DCSP  DCSP if (part in (os.curdir, os.pardir)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP newpath = os.path.join(newpath, part).replace(u'\\', u'/') DCNL DCSP if (newpath and (path != newpath)): DCNL DCSP  DCSP return HttpResponseRedirect(newpath) DCNL DCSP fullpath = os.path.join(document_root, newpath) DCNL DCSP if os.path.isdir(fullpath): DCNL DCSP  DCSP if show_indexes: DCNL DCSP  DCSP  DCSP return directory_index(newpath, fullpath) DCNL DCSP  DCSP raise Http404(_(u'Directory DCSP indexes DCSP are DCSP not DCSP allowed DCSP here.')) DCNL DCSP if (not os.path.exists(fullpath)): DCNL DCSP  DCSP raise Http404((_(u'"%(path)s" DCSP does DCSP not DCSP exist') % {u'path': fullpath})) DCNL DCSP statobj = os.stat(fullpath) DCNL DCSP (mimetype, encoding) = mimetypes.guess_type(fullpath) DCNL DCSP mimetype = (mimetype or u'application/octet-stream') DCNL DCSP if (not was_modified_since(request.META.get(u'HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size)): DCNL DCSP  DCSP return HttpResponseNotModified() DCNL DCSP response = CompatibleStreamingHttpResponse(open(fullpath, u'rb'), content_type=mimetype) DCNL DCSP response[u'Last-Modified'] = http_date(statobj.st_mtime) DCNL DCSP if stat.S_ISREG(statobj.st_mode): DCNL DCSP  DCSP response[u'Content-Length'] = statobj.st_size DCNL DCSP if encoding: DCNL DCSP  DCSP response[u'Content-Encoding'] = encoding DCNL DCSP return response
def was_modified_since(header=None, mtime=0, size=0): DCNL  DCSP try: DCNL DCSP  DCSP if (header is None): DCNL DCSP  DCSP  DCSP raise ValueError DCNL DCSP  DCSP matches = re.match(u'^([^;]+)(; DCSP length=([0-9]+))?$', header, re.IGNORECASE) DCNL DCSP  DCSP header_mtime = parse_http_date(matches.group(1)) DCNL DCSP  DCSP header_len = matches.group(3) DCNL DCSP  DCSP if (header_len and (int(header_len) != size)): DCNL DCSP  DCSP  DCSP raise ValueError DCNL DCSP  DCSP if (int(mtime) > header_mtime): DCNL DCSP  DCSP  DCSP raise ValueError DCNL DCSP except (AttributeError, ValueError, OverflowError): DCNL DCSP  DCSP return True DCNL DCSP return False
def _date_from_string(year, year_format, month=u'', month_format=u'', day=u'', day_format=u'', delim=u'__'): DCNL  DCSP format = delim.join((year_format, month_format, day_format)) DCNL DCSP datestr = delim.join((year, month, day)) DCNL DCSP try: DCNL DCSP  DCSP return datetime.datetime.strptime(datestr, format).date() DCNL DCSP except ValueError: DCNL DCSP  DCSP raise Http404((_(u"Invalid DCSP date DCSP string DCSP '%(datestr)s' DCSP given DCSP format DCSP '%(format)s'") % {u'datestr': datestr, u'format': format}))
def _get_next_prev(generic_view, date, is_previous, period): DCNL  DCSP date_field = generic_view.get_date_field() DCNL DCSP allow_empty = generic_view.get_allow_empty() DCNL DCSP allow_future = generic_view.get_allow_future() DCNL DCSP get_current = getattr(generic_view, (u'_get_current_%s' % period)) DCNL DCSP get_next = getattr(generic_view, (u'_get_next_%s' % period)) DCNL DCSP (start, end) = (get_current(date), get_next(date)) DCNL DCSP if allow_empty: DCNL DCSP  DCSP if is_previous: DCNL DCSP  DCSP  DCSP result = get_current((start - datetime.timedelta(days=1))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP result = end DCNL DCSP  DCSP if (allow_future or (result <= timezone_today())): DCNL DCSP  DCSP  DCSP return result DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return None DCNL DCSP else: DCNL DCSP  DCSP if is_previous: DCNL DCSP  DCSP  DCSP lookup = {(u'%s__lt' % date_field): generic_view._make_date_lookup_arg(start)} DCNL DCSP  DCSP  DCSP ordering = (u'-%s' % date_field) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP lookup = {(u'%s__gte' % date_field): generic_view._make_date_lookup_arg(end)} DCNL DCSP  DCSP  DCSP ordering = date_field DCNL DCSP  DCSP if (not allow_future): DCNL DCSP  DCSP  DCSP if generic_view.uses_datetime_field: DCNL DCSP  DCSP  DCSP  DCSP now = timezone.now() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP now = timezone_today() DCNL DCSP  DCSP  DCSP lookup[(u'%s__lte' % date_field)] = now DCNL DCSP  DCSP qs = generic_view.get_queryset().filter(**lookup).order_by(ordering) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = getattr(qs[0], date_field) DCNL DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP if generic_view.uses_datetime_field: DCNL DCSP  DCSP  DCSP if settings.USE_TZ: DCNL DCSP  DCSP  DCSP  DCSP result = timezone.localtime(result) DCNL DCSP  DCSP  DCSP result = result.date() DCNL DCSP  DCSP return get_current(result)
def timezone_today(): DCNL  DCSP if settings.USE_TZ: DCNL DCSP  DCSP return timezone.localtime(timezone.now()).date() DCNL DCSP else: DCNL DCSP  DCSP return datetime.date.today()
def cleanse_setting(key, value): DCNL  DCSP try: DCNL DCSP  DCSP if HIDDEN_SETTINGS.search(key): DCNL DCSP  DCSP  DCSP cleansed = CLEANSED_SUBSTITUTE DCNL DCSP  DCSP elif isinstance(value, dict): DCNL DCSP  DCSP  DCSP cleansed = dict(((k, cleanse_setting(k, v)) for (k, v) in value.items())) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cleansed = value DCNL DCSP except TypeError: DCNL DCSP  DCSP cleansed = value DCNL DCSP return cleansed
def get_safe_settings(): DCNL  DCSP settings_dict = {} DCNL DCSP for k in dir(settings): DCNL DCSP  DCSP if k.isupper(): DCNL DCSP  DCSP  DCSP settings_dict[k] = cleanse_setting(k, getattr(settings, k)) DCNL DCSP return settings_dict
def technical_500_response(request, exc_type, exc_value, tb): DCNL  DCSP reporter = ExceptionReporter(request, exc_type, exc_value, tb) DCNL DCSP if request.is_ajax(): DCNL DCSP  DCSP text = reporter.get_traceback_text() DCNL DCSP  DCSP return HttpResponseServerError(text, content_type=u'text/plain') DCNL DCSP else: DCNL DCSP  DCSP html = reporter.get_traceback_html() DCNL DCSP  DCSP return HttpResponseServerError(html, content_type=u'text/html')
def technical_404_response(request, exception): DCNL  DCSP try: DCNL DCSP  DCSP tried = exception.args[0][u'tried'] DCNL DCSP except (IndexError, TypeError, KeyError): DCNL DCSP  DCSP tried = [] DCNL DCSP else: DCNL DCSP  DCSP if (not tried): DCNL DCSP  DCSP  DCSP return empty_urlconf(request) DCNL DCSP urlconf = getattr(request, u'urlconf', settings.ROOT_URLCONF) DCNL DCSP if isinstance(urlconf, types.ModuleType): DCNL DCSP  DCSP urlconf = urlconf.__name__ DCNL DCSP t = Template(TECHNICAL_404_TEMPLATE, name=u'Technical DCSP 404 DCSP template') DCNL DCSP c = Context({u'urlconf': urlconf, u'root_urlconf': settings.ROOT_URLCONF, u'request_path': request.path_info[1:], u'urlpatterns': tried, u'reason': force_bytes(exception, errors=u'replace'), u'request': request, u'settings': get_safe_settings()}) DCNL DCSP return HttpResponseNotFound(t.render(c), content_type=u'text/html')
def empty_urlconf(request): DCNL  DCSP t = Template(EMPTY_URLCONF_TEMPLATE, name=u'Empty DCSP URLConf DCSP template') DCNL DCSP c = Context({u'project_name': settings.SETTINGS_MODULE.split(u'.')[0]}) DCNL DCSP return HttpResponse(t.render(c), content_type=u'text/html')
def require_http_methods(request_method_list): DCNL  DCSP def decorator(func): DCNL DCSP  DCSP @wraps(func, assigned=available_attrs(func)) DCNL DCSP  DCSP def inner(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP if (request.method not in request_method_list): DCNL DCSP  DCSP  DCSP  DCSP logger.warning('Method DCSP Not DCSP Allowed DCSP (%s): DCSP %s', request.method, request.path, extra={'status_code': 405, 'request': request}) DCNL DCSP  DCSP  DCSP  DCSP return HttpResponseNotAllowed(request_method_list) DCNL DCSP  DCSP  DCSP return func(request, *args, **kwargs) DCNL DCSP  DCSP return inner DCNL DCSP return decorator
def condition(etag_func=None, last_modified_func=None): DCNL  DCSP def decorator(func): DCNL DCSP  DCSP @wraps(func, assigned=available_attrs(func)) DCNL DCSP  DCSP def inner(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP if_modified_since = request.META.get('HTTP_IF_MODIFIED_SINCE') DCNL DCSP  DCSP  DCSP if if_modified_since: DCNL DCSP  DCSP  DCSP  DCSP if_modified_since = parse_http_date_safe(if_modified_since) DCNL DCSP  DCSP  DCSP if_none_match = request.META.get('HTTP_IF_NONE_MATCH') DCNL DCSP  DCSP  DCSP if_match = request.META.get('HTTP_IF_MATCH') DCNL DCSP  DCSP  DCSP if (if_none_match or if_match): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP etags = parse_etags((if_none_match or if_match)) DCNL DCSP  DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if_none_match = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP if_match = None DCNL DCSP  DCSP  DCSP if etag_func: DCNL DCSP  DCSP  DCSP  DCSP res_etag = etag_func(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP res_etag = None DCNL DCSP  DCSP  DCSP if last_modified_func: DCNL DCSP  DCSP  DCSP  DCSP dt = last_modified_func(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP if dt: DCNL DCSP  DCSP  DCSP  DCSP  DCSP res_last_modified = timegm(dt.utctimetuple()) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP res_last_modified = None DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP res_last_modified = None DCNL DCSP  DCSP  DCSP response = None DCNL DCSP  DCSP  DCSP if (not ((if_match and (if_modified_since or if_none_match)) or (if_match and if_none_match))): DCNL DCSP  DCSP  DCSP  DCSP if ((if_none_match and ((res_etag in etags) or (('*' in etags) and res_etag))) and ((not if_modified_since) or (res_last_modified and if_modified_since and (res_last_modified <= if_modified_since)))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (request.method in ('GET', 'HEAD')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP response = HttpResponseNotModified() DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP logger.warning('Precondition DCSP Failed: DCSP %s', request.path, extra={'status_code': 412, 'request': request}) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP response = HttpResponse(status=412) DCNL DCSP  DCSP  DCSP  DCSP elif (if_match and (((not res_etag) and ('*' in etags)) or (res_etag and (res_etag not in etags)))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP logger.warning('Precondition DCSP Failed: DCSP %s', request.path, extra={'status_code': 412, 'request': request}) DCNL DCSP  DCSP  DCSP  DCSP  DCSP response = HttpResponse(status=412) DCNL DCSP  DCSP  DCSP  DCSP elif ((not if_none_match) and (request.method == 'GET') and res_last_modified and if_modified_since and (res_last_modified <= if_modified_since)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP response = HttpResponseNotModified() DCNL DCSP  DCSP  DCSP if (response is None): DCNL DCSP  DCSP  DCSP  DCSP response = func(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP if (res_last_modified and (not response.has_header('Last-Modified'))): DCNL DCSP  DCSP  DCSP  DCSP response['Last-Modified'] = http_date(res_last_modified) DCNL DCSP  DCSP  DCSP if (res_etag and (not response.has_header('ETag'))): DCNL DCSP  DCSP  DCSP  DCSP response['ETag'] = quote_etag(res_etag) DCNL DCSP  DCSP  DCSP return response DCNL DCSP  DCSP return inner DCNL DCSP return decorator
def xframe_options_deny(view_func): DCNL  DCSP def wrapped_view(*args, **kwargs): DCNL DCSP  DCSP resp = view_func(*args, **kwargs) DCNL DCSP  DCSP if (resp.get('X-Frame-Options', None) is None): DCNL DCSP  DCSP  DCSP resp['X-Frame-Options'] = 'DENY' DCNL DCSP  DCSP return resp DCNL DCSP return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
def xframe_options_sameorigin(view_func): DCNL  DCSP def wrapped_view(*args, **kwargs): DCNL DCSP  DCSP resp = view_func(*args, **kwargs) DCNL DCSP  DCSP if (resp.get('X-Frame-Options', None) is None): DCNL DCSP  DCSP  DCSP resp['X-Frame-Options'] = 'SAMEORIGIN' DCNL DCSP  DCSP return resp DCNL DCSP return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
def xframe_options_exempt(view_func): DCNL  DCSP def wrapped_view(*args, **kwargs): DCNL DCSP  DCSP resp = view_func(*args, **kwargs) DCNL DCSP  DCSP resp.xframe_options_exempt = True DCNL DCSP  DCSP return resp DCNL DCSP return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
def cache_page(*args, **kwargs): DCNL  DCSP cache_alias = kwargs.pop('cache', None) DCNL DCSP key_prefix = kwargs.pop('key_prefix', None) DCNL DCSP assert (not kwargs), 'The DCSP only DCSP keyword DCSP arguments DCSP are DCSP cache DCSP and DCSP key_prefix' DCNL DCSP def warn(): DCNL DCSP  DCSP import warnings DCNL DCSP  DCSP warnings.warn('The DCSP cache_page DCSP decorator DCSP must DCSP be DCSP called DCSP like: DCSP cache_page(timeout, DCSP [cache=cache DCSP name], DCSP [key_prefix=key DCSP prefix]). DCSP All DCSP other DCSP ways DCSP are DCSP deprecated.', DeprecationWarning, stacklevel=2) DCNL DCSP if (len(args) > 1): DCNL DCSP  DCSP assert (len(args) == 2), 'cache_page DCSP accepts DCSP at DCSP most DCSP 2 DCSP arguments' DCNL DCSP  DCSP warn() DCNL DCSP  DCSP if callable(args[0]): DCNL DCSP  DCSP  DCSP return decorator_from_middleware_with_args(CacheMiddleware)(cache_timeout=args[1], cache_alias=cache_alias, key_prefix=key_prefix)(args[0]) DCNL DCSP  DCSP elif callable(args[1]): DCNL DCSP  DCSP  DCSP return decorator_from_middleware_with_args(CacheMiddleware)(cache_timeout=args[0], cache_alias=cache_alias, key_prefix=key_prefix)(args[1]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP assert False, 'cache_page DCSP must DCSP be DCSP passed DCSP a DCSP view DCSP function DCSP if DCSP called DCSP with DCSP two DCSP arguments' DCNL DCSP elif (len(args) == 1): DCNL DCSP  DCSP if callable(args[0]): DCNL DCSP  DCSP  DCSP warn() DCNL DCSP  DCSP  DCSP return decorator_from_middleware_with_args(CacheMiddleware)(cache_alias=cache_alias, key_prefix=key_prefix)(args[0]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return decorator_from_middleware_with_args(CacheMiddleware)(cache_timeout=args[0], cache_alias=cache_alias, key_prefix=key_prefix) DCNL DCSP else: DCNL DCSP  DCSP warn() DCNL DCSP  DCSP return decorator_from_middleware_with_args(CacheMiddleware)(cache_alias=cache_alias, key_prefix=key_prefix)
def never_cache(view_func): DCNL  DCSP @wraps(view_func, assigned=available_attrs(view_func)) DCNL DCSP def _wrapped_view_func(request, *args, **kwargs): DCNL DCSP  DCSP response = view_func(request, *args, **kwargs) DCNL DCSP  DCSP add_never_cache_headers(response) DCNL DCSP  DCSP return response DCNL DCSP return _wrapped_view_func
def vary_on_headers(*headers): DCNL  DCSP def decorator(func): DCNL DCSP  DCSP @wraps(func, assigned=available_attrs(func)) DCNL DCSP  DCSP def inner_func(*args, **kwargs): DCNL DCSP  DCSP  DCSP response = func(*args, **kwargs) DCNL DCSP  DCSP  DCSP patch_vary_headers(response, headers) DCNL DCSP  DCSP  DCSP return response DCNL DCSP  DCSP return inner_func DCNL DCSP return decorator
def vary_on_cookie(func): DCNL  DCSP @wraps(func, assigned=available_attrs(func)) DCNL DCSP def inner_func(*args, **kwargs): DCNL DCSP  DCSP response = func(*args, **kwargs) DCNL DCSP  DCSP patch_vary_headers(response, ('Cookie',)) DCNL DCSP  DCSP return response DCNL DCSP return inner_func
def sensitive_variables(*variables): DCNL  DCSP def decorator(func): DCNL DCSP  DCSP @functools.wraps(func) DCNL DCSP  DCSP def sensitive_variables_wrapper(*func_args, **func_kwargs): DCNL DCSP  DCSP  DCSP if variables: DCNL DCSP  DCSP  DCSP  DCSP sensitive_variables_wrapper.sensitive_variables = variables DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP sensitive_variables_wrapper.sensitive_variables = '__ALL__' DCNL DCSP  DCSP  DCSP return func(*func_args, **func_kwargs) DCNL DCSP  DCSP return sensitive_variables_wrapper DCNL DCSP return decorator
def sensitive_post_parameters(*parameters): DCNL  DCSP def decorator(view): DCNL DCSP  DCSP @functools.wraps(view) DCNL DCSP  DCSP def sensitive_post_parameters_wrapper(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP if parameters: DCNL DCSP  DCSP  DCSP  DCSP request.sensitive_post_parameters = parameters DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP request.sensitive_post_parameters = '__ALL__' DCNL DCSP  DCSP  DCSP return view(request, *args, **kwargs) DCNL DCSP  DCSP return sensitive_post_parameters_wrapper DCNL DCSP return decorator
def csrf_response_exempt(view_func): DCNL  DCSP warnings.warn('csrf_response_exempt DCSP is DCSP deprecated. DCSP It DCSP no DCSP longer DCSP performs DCSP a DCSP function, DCSP and DCSP calls DCSP to DCSP it DCSP can DCSP be DCSP removed.', DeprecationWarning) DCNL DCSP return view_func
def csrf_view_exempt(view_func): DCNL  DCSP warnings.warn('csrf_view_exempt DCSP is DCSP deprecated. DCSP Use DCSP csrf_exempt DCSP instead.', DeprecationWarning) DCNL DCSP return csrf_exempt(view_func)
def csrf_exempt(view_func): DCNL  DCSP def wrapped_view(*args, **kwargs): DCNL DCSP  DCSP return view_func(*args, **kwargs) DCNL DCSP wrapped_view.csrf_exempt = True DCNL DCSP return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
def csrf_failure(request, reason=''): DCNL  DCSP from django.middleware.csrf import REASON_NO_REFERER DCNL DCSP t = Template(CSRF_FAILURE_TEMPLATE) DCNL DCSP c = Context({'DEBUG': settings.DEBUG, 'reason': reason, 'no_referer': (reason == REASON_NO_REFERER)}) DCNL DCSP return HttpResponseForbidden(t.render(c), content_type='text/html')
@requires_csrf_token DCNL def page_not_found(request, template_name='404.html'): DCNL  DCSP try: DCNL DCSP  DCSP template = loader.get_template(template_name) DCNL DCSP except TemplateDoesNotExist: DCNL DCSP  DCSP template = Template('<h1>Not DCSP Found</h1><p>The DCSP requested DCSP URL DCSP {{ DCSP request_path DCSP }} DCSP was DCSP not DCSP found DCSP on DCSP this DCSP server.</p>') DCNL DCSP return http.HttpResponseNotFound(template.render(RequestContext(request, {'request_path': request.path})))
@requires_csrf_token DCNL def server_error(request, template_name='500.html'): DCNL  DCSP try: DCNL DCSP  DCSP template = loader.get_template(template_name) DCNL DCSP except TemplateDoesNotExist: DCNL DCSP  DCSP return http.HttpResponseServerError('<h1>Server DCSP Error DCSP (500)</h1>') DCNL DCSP return http.HttpResponseServerError(template.render(Context({})))
@requires_csrf_token DCNL def permission_denied(request, template_name='403.html'): DCNL  DCSP try: DCNL DCSP  DCSP template = loader.get_template(template_name) DCNL DCSP except TemplateDoesNotExist: DCNL DCSP  DCSP return http.HttpResponseForbidden('<h1>403 DCSP Forbidden</h1>') DCNL DCSP return http.HttpResponseForbidden(template.render(RequestContext(request)))
def to_list(value): DCNL  DCSP if (value is None): DCNL DCSP  DCSP value = [] DCNL DCSP elif (not isinstance(value, list)): DCNL DCSP  DCSP value = [value] DCNL DCSP return value
def connections_support_transactions(): DCNL  DCSP return all((conn.features.supports_transactions for conn in connections.all()))
def skipIfDBFeature(feature): DCNL  DCSP return _deferredSkip((lambda : getattr(connection.features, feature)), (u'Database DCSP has DCSP feature DCSP %s' % feature))
def skipUnlessDBFeature(feature): DCNL  DCSP return _deferredSkip((lambda : (not getattr(connection.features, feature))), (u"Database DCSP doesn't DCSP support DCSP feature DCSP %s" % feature))
def store_rendered_templates(store, signal, sender, template, context, **kwargs): DCNL  DCSP store.setdefault(u'templates', []).append(template) DCNL DCSP store.setdefault(u'context', ContextList()).append(copy(context))
def encode_multipart(boundary, data): DCNL  DCSP lines = [] DCNL DCSP to_bytes = (lambda s: force_bytes(s, settings.DEFAULT_CHARSET)) DCNL DCSP is_file = (lambda thing: (hasattr(thing, u'read') and callable(thing.read))) DCNL DCSP for (key, value) in data.items(): DCNL DCSP  DCSP if is_file(value): DCNL DCSP  DCSP  DCSP lines.extend(encode_file(boundary, key, value)) DCNL DCSP  DCSP elif ((not isinstance(value, six.string_types)) and is_iterable(value)): DCNL DCSP  DCSP  DCSP for item in value: DCNL DCSP  DCSP  DCSP  DCSP if is_file(item): DCNL DCSP  DCSP  DCSP  DCSP  DCSP lines.extend(encode_file(boundary, key, item)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP lines.extend([to_bytes(val) for val in [(u'--%s' % boundary), (u'Content-Disposition: DCSP form-data; DCSP name="%s"' % key), u'', item]]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP lines.extend([to_bytes(val) for val in [(u'--%s' % boundary), (u'Content-Disposition: DCSP form-data; DCSP name="%s"' % key), u'', value]]) DCNL DCSP lines.extend([to_bytes((u'--%s--' % boundary)), '']) DCNL DCSP return '\r\n'.join(lines)
def build_suite(app_module): DCNL  DCSP suite = unittest.TestSuite() DCNL DCSP if hasattr(app_module, 'suite'): DCNL DCSP  DCSP suite.addTest(app_module.suite()) DCNL DCSP else: DCNL DCSP  DCSP suite.addTest(unittest.defaultTestLoader.loadTestsFromModule(app_module)) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP suite.addTest(doctest.DocTestSuite(app_module, checker=doctestOutputChecker, runner=DocTestRunner)) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP test_module = get_tests(app_module) DCNL DCSP if test_module: DCNL DCSP  DCSP if hasattr(test_module, 'suite'): DCNL DCSP  DCSP  DCSP suite.addTest(test_module.suite()) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP suite.addTest(unittest.defaultTestLoader.loadTestsFromModule(test_module)) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP suite.addTest(doctest.DocTestSuite(test_module, checker=doctestOutputChecker, runner=DocTestRunner)) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP return suite
def build_test(label): DCNL  DCSP parts = label.split('.') DCNL DCSP if ((len(parts) < 2) or (len(parts) > 3)): DCNL DCSP  DCSP raise ValueError(("Test DCSP label DCSP '%s' DCSP should DCSP be DCSP of DCSP the DCSP form DCSP app.TestCase DCSP or DCSP app.TestCase.test_method" % label)) DCNL DCSP app_module = get_app(parts[0]) DCNL DCSP test_module = get_tests(app_module) DCNL DCSP TestClass = getattr(app_module, parts[1], None) DCNL DCSP if (TestClass is None): DCNL DCSP  DCSP if test_module: DCNL DCSP  DCSP  DCSP TestClass = getattr(test_module, parts[1], None) DCNL DCSP try: DCNL DCSP  DCSP if issubclass(TestClass, (unittest.TestCase, real_unittest.TestCase)): DCNL DCSP  DCSP  DCSP if (len(parts) == 2): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return unittest.TestLoader().loadTestsFromTestCase(TestClass) DCNL DCSP  DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError(("Test DCSP label DCSP '%s' DCSP does DCSP not DCSP refer DCSP to DCSP a DCSP test DCSP class" % label)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return TestClass(parts[2]) DCNL DCSP except TypeError: DCNL DCSP  DCSP pass DCNL DCSP tests = [] DCNL DCSP for module in (app_module, test_module): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP doctests = doctest.DocTestSuite(module, checker=doctestOutputChecker, runner=DocTestRunner) DCNL DCSP  DCSP  DCSP for test in doctests: DCNL DCSP  DCSP  DCSP  DCSP if (test._dt_test.name in (('%s.%s' % (module.__name__, '.'.join(parts[1:]))), ('%s.__test__.%s' % (module.__name__, '.'.join(parts[1:]))))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP tests.append(test) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP if (not tests): DCNL DCSP  DCSP raise ValueError(("Test DCSP label DCSP '%s' DCSP does DCSP not DCSP refer DCSP to DCSP a DCSP test" % label)) DCNL DCSP return unittest.TestSuite(tests)
def partition_suite(suite, classes, bins): DCNL  DCSP for test in suite: DCNL DCSP  DCSP if isinstance(test, unittest.TestSuite): DCNL DCSP  DCSP  DCSP partition_suite(test, classes, bins) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for i in range(len(classes)): DCNL DCSP  DCSP  DCSP  DCSP if isinstance(test, classes[i]): DCNL DCSP  DCSP  DCSP  DCSP  DCSP bins[i].addTest(test) DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP bins[(-1)].addTest(test)
def reorder_suite(suite, classes): DCNL  DCSP class_count = len(classes) DCNL DCSP bins = [unittest.TestSuite() for i in range((class_count + 1))] DCNL DCSP partition_suite(suite, classes, bins) DCNL DCSP for i in range(class_count): DCNL DCSP  DCSP bins[0].addTests(bins[(i + 1)]) DCNL DCSP return bins[0]
def dependency_ordered(test_databases, dependencies): DCNL  DCSP ordered_test_databases = [] DCNL DCSP resolved_databases = set() DCNL DCSP dependencies_map = {} DCNL DCSP for (sig, (_, aliases)) in test_databases: DCNL DCSP  DCSP all_deps = set() DCNL DCSP  DCSP for alias in aliases: DCNL DCSP  DCSP  DCSP all_deps.update(dependencies.get(alias, [])) DCNL DCSP  DCSP if (not all_deps.isdisjoint(aliases)): DCNL DCSP  DCSP  DCSP raise ImproperlyConfigured(('Circular DCSP dependency: DCSP databases DCSP %r DCSP depend DCSP on DCSP each DCSP other, DCSP but DCSP are DCSP aliases.' % aliases)) DCNL DCSP  DCSP dependencies_map[sig] = all_deps DCNL DCSP while test_databases: DCNL DCSP  DCSP changed = False DCNL DCSP  DCSP deferred = [] DCNL DCSP  DCSP for (signature, (db_name, aliases)) in test_databases: DCNL DCSP  DCSP  DCSP if dependencies_map[signature].issubset(resolved_databases): DCNL DCSP  DCSP  DCSP  DCSP resolved_databases.update(aliases) DCNL DCSP  DCSP  DCSP  DCSP ordered_test_databases.append((signature, (db_name, aliases))) DCNL DCSP  DCSP  DCSP  DCSP changed = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP deferred.append((signature, (db_name, aliases))) DCNL DCSP  DCSP if (not changed): DCNL DCSP  DCSP  DCSP raise ImproperlyConfigured('Circular DCSP dependency DCSP in DCSP TEST_DEPENDENCIES') DCNL DCSP  DCSP test_databases = deferred DCNL DCSP return ordered_test_databases
def instrumented_test_render(self, context): DCNL  DCSP template_rendered.send(sender=self, template=self, context=context) DCNL DCSP return self.nodelist.render(context)
def setup_test_environment(): DCNL  DCSP Template.original_render = Template._render DCNL DCSP Template._render = instrumented_test_render DCNL DCSP mail.original_email_backend = settings.EMAIL_BACKEND DCNL DCSP settings.EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend' DCNL DCSP settings._original_allowed_hosts = settings.ALLOWED_HOSTS DCNL DCSP settings.ALLOWED_HOSTS = ['*'] DCNL DCSP mail.outbox = [] DCNL DCSP deactivate()
def teardown_test_environment(): DCNL  DCSP Template._render = Template.original_render DCNL DCSP del Template.original_render DCNL DCSP settings.EMAIL_BACKEND = mail.original_email_backend DCNL DCSP del mail.original_email_backend DCNL DCSP settings.ALLOWED_HOSTS = settings._original_allowed_hosts DCNL DCSP del settings._original_allowed_hosts DCNL DCSP del mail.outbox
def get_warnings_state(): DCNL  DCSP return warnings.filters[:]
def restore_warnings_state(state): DCNL  DCSP warnings.filters = state[:]
def setup_test_template_loader(templates_dict, use_cached_loader=False): DCNL  DCSP if hasattr(loader, RESTORE_LOADERS_ATTR): DCNL DCSP  DCSP raise Exception(('loader.%s DCSP already DCSP exists' % RESTORE_LOADERS_ATTR)) DCNL DCSP def test_template_loader(template_name, template_dirs=None): DCNL DCSP  DCSP 'A DCSP custom DCSP template DCSP loader DCSP that DCSP loads DCSP templates DCSP from DCSP a DCSP dictionary.' DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return (templates_dict[template_name], ('test:%s' % template_name)) DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise TemplateDoesNotExist(template_name) DCNL DCSP if use_cached_loader: DCNL DCSP  DCSP template_loader = cached.Loader(('test_template_loader',)) DCNL DCSP  DCSP template_loader._cached_loaders = (test_template_loader,) DCNL DCSP else: DCNL DCSP  DCSP template_loader = test_template_loader DCNL DCSP setattr(loader, RESTORE_LOADERS_ATTR, loader.template_source_loaders) DCNL DCSP loader.template_source_loaders = (template_loader,) DCNL DCSP return template_loader
def restore_template_loaders(): DCNL  DCSP loader.template_source_loaders = getattr(loader, RESTORE_LOADERS_ATTR) DCNL DCSP delattr(loader, RESTORE_LOADERS_ATTR)
def compare_xml(want, got): DCNL  DCSP _norm_whitespace_re = re.compile('[ DCSP \\t\\n][ DCSP \\t\\n]+') DCNL DCSP def norm_whitespace(v): DCNL DCSP  DCSP return _norm_whitespace_re.sub(' DCSP ', v) DCNL DCSP def child_text(element): DCNL DCSP  DCSP return ''.join([c.data for c in element.childNodes if (c.nodeType == Node.TEXT_NODE)]) DCNL DCSP def children(element): DCNL DCSP  DCSP return [c for c in element.childNodes if (c.nodeType == Node.ELEMENT_NODE)] DCNL DCSP def norm_child_text(element): DCNL DCSP  DCSP return norm_whitespace(child_text(element)) DCNL DCSP def attrs_dict(element): DCNL DCSP  DCSP return dict(element.attributes.items()) DCNL DCSP def check_element(want_element, got_element): DCNL DCSP  DCSP if (want_element.tagName != got_element.tagName): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if (norm_child_text(want_element) != norm_child_text(got_element)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if (attrs_dict(want_element) != attrs_dict(got_element)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP want_children = children(want_element) DCNL DCSP  DCSP got_children = children(got_element) DCNL DCSP  DCSP if (len(want_children) != len(got_children)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP for (want, got) in zip(want_children, got_children): DCNL DCSP  DCSP  DCSP if (not check_element(want, got)): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return True DCNL DCSP def first_node(document): DCNL DCSP  DCSP for node in document.childNodes: DCNL DCSP  DCSP  DCSP if (node.nodeType != Node.COMMENT_NODE): DCNL DCSP  DCSP  DCSP  DCSP return node DCNL DCSP (want, got) = strip_quotes(want, got) DCNL DCSP want = want.replace('\\n', '\n') DCNL DCSP got = got.replace('\\n', '\n') DCNL DCSP if (not want.startswith('<?xml')): DCNL DCSP  DCSP wrapper = '<root>%s</root>' DCNL DCSP  DCSP want = (wrapper % want) DCNL DCSP  DCSP got = (wrapper % got) DCNL DCSP want_root = first_node(parseString(want)) DCNL DCSP got_root = first_node(parseString(got)) DCNL DCSP return check_element(want_root, got_root)
def strip_quotes(want, got): DCNL  DCSP def is_quoted_string(s): DCNL DCSP  DCSP s = s.strip() DCNL DCSP  DCSP return ((len(s) >= 2) and (s[0] == s[(-1)]) and (s[0] in ('"', "'"))) DCNL DCSP def is_quoted_unicode(s): DCNL DCSP  DCSP s = s.strip() DCNL DCSP  DCSP return ((len(s) >= 3) and (s[0] == 'u') and (s[1] == s[(-1)]) and (s[1] in ('"', "'"))) DCNL DCSP if (is_quoted_string(want) and is_quoted_string(got)): DCNL DCSP  DCSP want = want.strip()[1:(-1)] DCNL DCSP  DCSP got = got.strip()[1:(-1)] DCNL DCSP elif (is_quoted_unicode(want) and is_quoted_unicode(got)): DCNL DCSP  DCSP want = want.strip()[2:(-1)] DCNL DCSP  DCSP got = got.strip()[2:(-1)] DCNL DCSP return (want, got)
def parse_html(html): DCNL  DCSP parser = Parser() DCNL DCSP parser.feed(html) DCNL DCSP parser.close() DCNL DCSP document = parser.root DCNL DCSP document.finalize() DCNL DCSP if (len(document.children) == 1): DCNL DCSP  DCSP if (not isinstance(document.children[0], six.string_types)): DCNL DCSP  DCSP  DCSP document = document.children[0] DCNL DCSP return document
def _extract_future_flags(globs): DCNL  DCSP flags = 0 DCNL DCSP for fname in __future__.all_feature_names: DCNL DCSP  DCSP feature = globs.get(fname, None) DCNL DCSP  DCSP if (feature is getattr(__future__, fname)): DCNL DCSP  DCSP  DCSP flags |= feature.compiler_flag DCNL DCSP return flags
def _normalize_module(module, depth=2): DCNL  DCSP if inspect.ismodule(module): DCNL DCSP  DCSP return module DCNL DCSP elif isinstance(module, six.string_types): DCNL DCSP  DCSP return __import__(module, globals(), locals(), ['*']) DCNL DCSP elif (module is None): DCNL DCSP  DCSP return sys.modules[sys._getframe(depth).f_globals['__name__']] DCNL DCSP else: DCNL DCSP  DCSP raise TypeError('Expected DCSP a DCSP module, DCSP string, DCSP or DCSP None')
def _indent(s, indent=4): DCNL  DCSP return re.sub('(?m)^(?!$)', (indent * ' DCSP '), s)
def _exception_traceback(exc_info): DCNL  DCSP excout = StringIO() DCNL DCSP (exc_type, exc_val, exc_tb) = exc_info DCNL DCSP traceback.print_exception(exc_type, exc_val, exc_tb, file=excout) DCNL DCSP return excout.getvalue()
def _ellipsis_match(want, got): DCNL  DCSP if (ELLIPSIS_MARKER not in want): DCNL DCSP  DCSP return (want == got) DCNL DCSP ws = want.split(ELLIPSIS_MARKER) DCNL DCSP assert (len(ws) >= 2) DCNL DCSP (startpos, endpos) = (0, len(got)) DCNL DCSP w = ws[0] DCNL DCSP if w: DCNL DCSP  DCSP if got.startswith(w): DCNL DCSP  DCSP  DCSP startpos = len(w) DCNL DCSP  DCSP  DCSP del ws[0] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return False DCNL DCSP w = ws[(-1)] DCNL DCSP if w: DCNL DCSP  DCSP if got.endswith(w): DCNL DCSP  DCSP  DCSP endpos -= len(w) DCNL DCSP  DCSP  DCSP del ws[(-1)] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return False DCNL DCSP if (startpos > endpos): DCNL DCSP  DCSP return False DCNL DCSP for w in ws: DCNL DCSP  DCSP startpos = got.find(w, startpos, endpos) DCNL DCSP  DCSP if (startpos < 0): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP startpos += len(w) DCNL DCSP return True
def _comment_line(line): DCNL  DCSP line = line.rstrip() DCNL DCSP if line: DCNL DCSP  DCSP return ('# DCSP ' + line) DCNL DCSP else: DCNL DCSP  DCSP return '#'
def testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False): DCNL  DCSP global master DCNL DCSP if (m is None): DCNL DCSP  DCSP m = sys.modules.get('__main__') DCNL DCSP if (not inspect.ismodule(m)): DCNL DCSP  DCSP raise TypeError(('testmod: DCSP module DCSP required; DCSP %r' % (m,))) DCNL DCSP if (name is None): DCNL DCSP  DCSP name = m.__name__ DCNL DCSP finder = DocTestFinder(exclude_empty=exclude_empty) DCNL DCSP if raise_on_error: DCNL DCSP  DCSP runner = DebugRunner(verbose=verbose, optionflags=optionflags) DCNL DCSP else: DCNL DCSP  DCSP runner = DocTestRunner(verbose=verbose, optionflags=optionflags) DCNL DCSP for test in finder.find(m, name, globs=globs, extraglobs=extraglobs): DCNL DCSP  DCSP runner.run(test) DCNL DCSP if report: DCNL DCSP  DCSP runner.summarize() DCNL DCSP if (master is None): DCNL DCSP  DCSP master = runner DCNL DCSP else: DCNL DCSP  DCSP master.merge(runner) DCNL DCSP return (runner.failures, runner.tries)
def testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None): DCNL  DCSP global master DCNL DCSP if (package and (not module_relative)): DCNL DCSP  DCSP raise ValueError('Package DCSP may DCSP only DCSP be DCSP specified DCSP for DCSP module-relative DCSP paths.') DCNL DCSP (text, filename) = _load_testfile(filename, package, module_relative) DCNL DCSP if (name is None): DCNL DCSP  DCSP name = os.path.basename(filename) DCNL DCSP if (globs is None): DCNL DCSP  DCSP globs = {} DCNL DCSP else: DCNL DCSP  DCSP globs = globs.copy() DCNL DCSP if (extraglobs is not None): DCNL DCSP  DCSP globs.update(extraglobs) DCNL DCSP if raise_on_error: DCNL DCSP  DCSP runner = DebugRunner(verbose=verbose, optionflags=optionflags) DCNL DCSP else: DCNL DCSP  DCSP runner = DocTestRunner(verbose=verbose, optionflags=optionflags) DCNL DCSP if (encoding is not None): DCNL DCSP  DCSP text = text.decode(encoding) DCNL DCSP test = parser.get_doctest(text, globs, name, filename, 0) DCNL DCSP runner.run(test) DCNL DCSP if report: DCNL DCSP  DCSP runner.summarize() DCNL DCSP if (master is None): DCNL DCSP  DCSP master = runner DCNL DCSP else: DCNL DCSP  DCSP master.merge(runner) DCNL DCSP return (runner.failures, runner.tries)
def run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0): DCNL  DCSP finder = DocTestFinder(verbose=verbose, recurse=False) DCNL DCSP runner = DocTestRunner(verbose=verbose, optionflags=optionflags) DCNL DCSP for test in finder.find(f, name, globs=globs): DCNL DCSP  DCSP runner.run(test, compileflags=compileflags)
def set_unittest_reportflags(flags): DCNL  DCSP global _unittest_reportflags DCNL DCSP if ((flags & REPORTING_FLAGS) != flags): DCNL DCSP  DCSP raise ValueError('Only DCSP reporting DCSP flags DCSP allowed', flags) DCNL DCSP old = _unittest_reportflags DCNL DCSP _unittest_reportflags = flags DCNL DCSP return old
def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, test_class=DocTestCase, **options): DCNL  DCSP if (test_finder is None): DCNL DCSP  DCSP test_finder = DocTestFinder() DCNL DCSP module = _normalize_module(module) DCNL DCSP tests = test_finder.find(module, globs=globs, extraglobs=extraglobs) DCNL DCSP if (globs is None): DCNL DCSP  DCSP globs = module.__dict__ DCNL DCSP if (not tests): DCNL DCSP  DCSP raise ValueError(module, 'has DCSP no DCSP tests') DCNL DCSP tests.sort() DCNL DCSP suite = unittest.TestSuite() DCNL DCSP for test in tests: DCNL DCSP  DCSP if (len(test.examples) == 0): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (not test.filename): DCNL DCSP  DCSP  DCSP filename = module.__file__ DCNL DCSP  DCSP  DCSP if (filename[(-4):] in ('.pyc', '.pyo')): DCNL DCSP  DCSP  DCSP  DCSP filename = filename[:(-1)] DCNL DCSP  DCSP  DCSP test.filename = filename DCNL DCSP  DCSP suite.addTest(test_class(test, **options)) DCNL DCSP return suite
def DocFileSuite(*paths, **kw): DCNL  DCSP suite = unittest.TestSuite() DCNL DCSP if kw.get('module_relative', True): DCNL DCSP  DCSP kw['package'] = _normalize_module(kw.get('package')) DCNL DCSP for path in paths: DCNL DCSP  DCSP suite.addTest(DocFileTest(path, **kw)) DCNL DCSP return suite
def script_from_examples(s): DCNL  DCSP output = [] DCNL DCSP for piece in DocTestParser().parse(s): DCNL DCSP  DCSP if isinstance(piece, Example): DCNL DCSP  DCSP  DCSP output.append(piece.source[:(-1)]) DCNL DCSP  DCSP  DCSP want = piece.want DCNL DCSP  DCSP  DCSP if want: DCNL DCSP  DCSP  DCSP  DCSP output.append('# DCSP Expected:') DCNL DCSP  DCSP  DCSP  DCSP output += [('## DCSP ' + l) for l in want.split('\n')[:(-1)]] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP output += [_comment_line(l) for l in piece.split('\n')[:(-1)]] DCNL DCSP while (output and (output[(-1)] == '#')): DCNL DCSP  DCSP output.pop() DCNL DCSP while (output and (output[0] == '#')): DCNL DCSP  DCSP output.pop(0) DCNL DCSP return '\n'.join(output)
def testsource(module, name): DCNL  DCSP module = _normalize_module(module) DCNL DCSP tests = DocTestFinder().find(module) DCNL DCSP test = [t for t in tests if (t.name == name)] DCNL DCSP if (not test): DCNL DCSP  DCSP raise ValueError(name, 'not DCSP found DCSP in DCSP tests') DCNL DCSP test = test[0] DCNL DCSP testsrc = script_from_examples(test.docstring) DCNL DCSP return testsrc
def debug_src(src, pm=False, globs=None): DCNL  DCSP testsrc = script_from_examples(src) DCNL DCSP debug_script(testsrc, pm, globs)
def debug_script(src, pm=False, globs=None): DCNL  DCSP import pdb DCNL DCSP srcfilename = tempfile.mktemp('.py', 'doctestdebug') DCNL DCSP with open(srcfilename, 'w') as fp: DCNL DCSP  DCSP fp.write(src) DCNL DCSP try: DCNL DCSP  DCSP if globs: DCNL DCSP  DCSP  DCSP globs = globs.copy() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP globs = {} DCNL DCSP  DCSP if pm: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP execfile(srcfilename, globs, globs) DCNL DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP print sys.exc_info()[1] DCNL DCSP  DCSP  DCSP  DCSP pdb.post_mortem(sys.exc_info()[2]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pdb.run(('execfile(%r)' % srcfilename), globs, globs) DCNL DCSP finally: DCNL DCSP  DCSP os.remove(srcfilename)
def debug(module, name, pm=False): DCNL  DCSP module = _normalize_module(module) DCNL DCSP testsrc = testsource(module, name) DCNL DCSP debug_script(testsrc, pm, module.__dict__)
def shortcut(request, content_type_id, object_id): DCNL  DCSP try: DCNL DCSP  DCSP content_type = ContentType.objects.get(pk=content_type_id) DCNL DCSP  DCSP if (not content_type.model_class()): DCNL DCSP  DCSP  DCSP raise http.Http404((_(u'Content DCSP type DCSP %(ct_id)s DCSP object DCSP has DCSP no DCSP associated DCSP model') % {u'ct_id': content_type_id})) DCNL DCSP  DCSP obj = content_type.get_object_for_this_type(pk=object_id) DCNL DCSP except (ObjectDoesNotExist, ValueError): DCNL DCSP  DCSP raise http.Http404((_(u"Content DCSP type DCSP %(ct_id)s DCSP object DCSP %(obj_id)s DCSP doesn't DCSP exist") % {u'ct_id': content_type_id, u'obj_id': object_id})) DCNL DCSP try: DCNL DCSP  DCSP get_absolute_url = obj.get_absolute_url DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise http.Http404((_(u"%(ct_name)s DCSP objects DCSP don't DCSP have DCSP a DCSP get_absolute_url() DCSP method") % {u'ct_name': content_type.name})) DCNL DCSP absurl = get_absolute_url() DCNL DCSP if (absurl.startswith(u'http://') or absurl.startswith(u'https://')): DCNL DCSP  DCSP return http.HttpResponseRedirect(absurl) DCNL DCSP object_domain = None DCNL DCSP if Site._meta.installed: DCNL DCSP  DCSP opts = obj._meta DCNL DCSP  DCSP for field in opts.many_to_many: DCNL DCSP  DCSP  DCSP if (field.rel.to is Site): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP object_domain = getattr(obj, field.name).all()[0].domain DCNL DCSP  DCSP  DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP  DCSP if (object_domain is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (object_domain is None): DCNL DCSP  DCSP  DCSP for field in obj._meta.fields: DCNL DCSP  DCSP  DCSP  DCSP if (field.rel and (field.rel.to is Site)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP object_domain = getattr(obj, field.name).domain DCNL DCSP  DCSP  DCSP  DCSP  DCSP except Site.DoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (object_domain is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (object_domain is None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP object_domain = get_current_site(request).domain DCNL DCSP  DCSP except Site.DoesNotExist: DCNL DCSP  DCSP  DCSP pass DCNL DCSP if (object_domain is not None): DCNL DCSP  DCSP protocol = ((request.is_secure() and u'https') or u'http') DCNL DCSP  DCSP return http.HttpResponseRedirect((u'%s://%s%s' % (protocol, object_domain, absurl))) DCNL DCSP else: DCNL DCSP  DCSP return http.HttpResponseRedirect(absurl)
def create_generic_related_manager(superclass): DCNL  DCSP class GenericRelatedObjectManager(superclass, ): DCNL DCSP  DCSP def __init__(self, model=None, instance=None, symmetrical=None, source_col_name=None, target_col_name=None, content_type=None, content_type_field_name=None, object_id_field_name=None, prefetch_cache_name=None): DCNL DCSP  DCSP  DCSP super(GenericRelatedObjectManager, self).__init__() DCNL DCSP  DCSP  DCSP self.model = model DCNL DCSP  DCSP  DCSP self.content_type = content_type DCNL DCSP  DCSP  DCSP self.symmetrical = symmetrical DCNL DCSP  DCSP  DCSP self.instance = instance DCNL DCSP  DCSP  DCSP self.source_col_name = source_col_name DCNL DCSP  DCSP  DCSP self.target_col_name = target_col_name DCNL DCSP  DCSP  DCSP self.content_type_field_name = content_type_field_name DCNL DCSP  DCSP  DCSP self.object_id_field_name = object_id_field_name DCNL DCSP  DCSP  DCSP self.prefetch_cache_name = prefetch_cache_name DCNL DCSP  DCSP  DCSP self.pk_val = self.instance._get_pk_val() DCNL DCSP  DCSP  DCSP self.core_filters = {(u'%s__pk' % content_type_field_name): content_type.id, (u'%s__exact' % object_id_field_name): instance._get_pk_val()} DCNL DCSP  DCSP def get_query_set(self): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP return self.instance._prefetched_objects_cache[self.prefetch_cache_name] DCNL DCSP  DCSP  DCSP except (AttributeError, KeyError): DCNL DCSP  DCSP  DCSP  DCSP db = (self._db or router.db_for_read(self.model, instance=self.instance)) DCNL DCSP  DCSP  DCSP  DCSP return super(GenericRelatedObjectManager, self).get_query_set().using(db).filter(**self.core_filters) DCNL DCSP  DCSP def get_prefetch_query_set(self, instances): DCNL DCSP  DCSP  DCSP db = (self._db or router.db_for_read(self.model, instance=instances[0])) DCNL DCSP  DCSP  DCSP query = {(u'%s__pk' % self.content_type_field_name): self.content_type.id, (u'%s__in' % self.object_id_field_name): set((obj._get_pk_val() for obj in instances))} DCNL DCSP  DCSP  DCSP qs = super(GenericRelatedObjectManager, self).get_query_set().using(db).filter(**query) DCNL DCSP  DCSP  DCSP object_id_converter = instances[0]._meta.pk.to_python DCNL DCSP  DCSP  DCSP return (qs, (lambda relobj: object_id_converter(getattr(relobj, self.object_id_field_name))), (lambda obj: obj._get_pk_val()), False, self.prefetch_cache_name) DCNL DCSP  DCSP def add(self, *objs): DCNL DCSP  DCSP  DCSP for obj in objs: DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(obj, self.model)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise TypeError((u"'%s' DCSP instance DCSP expected" % self.model._meta.object_name)) DCNL DCSP  DCSP  DCSP  DCSP setattr(obj, self.content_type_field_name, self.content_type) DCNL DCSP  DCSP  DCSP  DCSP setattr(obj, self.object_id_field_name, self.pk_val) DCNL DCSP  DCSP  DCSP  DCSP obj.save() DCNL DCSP  DCSP add.alters_data = True DCNL DCSP  DCSP def remove(self, *objs): DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.model, instance=self.instance) DCNL DCSP  DCSP  DCSP for obj in objs: DCNL DCSP  DCSP  DCSP  DCSP obj.delete(using=db) DCNL DCSP  DCSP remove.alters_data = True DCNL DCSP  DCSP def clear(self): DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.model, instance=self.instance) DCNL DCSP  DCSP  DCSP for obj in self.all(): DCNL DCSP  DCSP  DCSP  DCSP obj.delete(using=db) DCNL DCSP  DCSP clear.alters_data = True DCNL DCSP  DCSP def create(self, **kwargs): DCNL DCSP  DCSP  DCSP kwargs[self.content_type_field_name] = self.content_type DCNL DCSP  DCSP  DCSP kwargs[self.object_id_field_name] = self.pk_val DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.model, instance=self.instance) DCNL DCSP  DCSP  DCSP return super(GenericRelatedObjectManager, self).using(db).create(**kwargs) DCNL DCSP  DCSP create.alters_data = True DCNL DCSP return GenericRelatedObjectManager
def generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field=u'content_type', fk_field=u'object_id', fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None): DCNL  DCSP opts = model._meta DCNL DCSP from django.contrib.contenttypes.models import ContentType DCNL DCSP ct_field = opts.get_field(ct_field) DCNL DCSP if ((not isinstance(ct_field, models.ForeignKey)) or (ct_field.rel.to != ContentType)): DCNL DCSP  DCSP raise Exception((u"fk_name DCSP '%s' DCSP is DCSP not DCSP a DCSP ForeignKey DCSP to DCSP ContentType" % ct_field)) DCNL DCSP fk_field = opts.get_field(fk_field) DCNL DCSP if (exclude is not None): DCNL DCSP  DCSP exclude = list(exclude) DCNL DCSP  DCSP exclude.extend([ct_field.name, fk_field.name]) DCNL DCSP else: DCNL DCSP  DCSP exclude = [ct_field.name, fk_field.name] DCNL DCSP FormSet = modelformset_factory(model, form=form, formfield_callback=formfield_callback, formset=formset, extra=extra, can_delete=can_delete, can_order=can_order, fields=fields, exclude=exclude, max_num=max_num) DCNL DCSP FormSet.ct_field = ct_field DCNL DCSP FormSet.ct_fk_field = fk_field DCNL DCSP return FormSet
def update_contenttypes(app, created_models, verbosity=2, db=DEFAULT_DB_ALIAS, **kwargs): DCNL  DCSP if (not router.allow_syncdb(db, ContentType)): DCNL DCSP  DCSP return DCNL DCSP ContentType.objects.clear_cache() DCNL DCSP app_models = get_models(app) DCNL DCSP if (not app_models): DCNL DCSP  DCSP return DCNL DCSP app_label = app_models[0]._meta.app_label DCNL DCSP app_models = dict(((model._meta.object_name.lower(), model) for model in app_models)) DCNL DCSP content_types = dict(((ct.model, ct) for ct in ContentType.objects.using(db).filter(app_label=app_label))) DCNL DCSP to_remove = [ct for (model_name, ct) in six.iteritems(content_types) if (model_name not in app_models)] DCNL DCSP cts = [ContentType(name=smart_text(model._meta.verbose_name_raw), app_label=app_label, model=model_name) for (model_name, model) in six.iteritems(app_models) if (model_name not in content_types)] DCNL DCSP ContentType.objects.using(db).bulk_create(cts) DCNL DCSP if (verbosity >= 2): DCNL DCSP  DCSP for ct in cts: DCNL DCSP  DCSP  DCSP print ("Adding DCSP content DCSP type DCSP '%s DCSP | DCSP %s'" % (ct.app_label, ct.model)) DCNL DCSP if to_remove: DCNL DCSP  DCSP if kwargs.get('interactive', False): DCNL DCSP  DCSP  DCSP content_type_display = '\n'.join([(' DCSP  DCSP  DCSP  DCSP %s DCSP | DCSP %s' % (ct.app_label, ct.model)) for ct in to_remove]) DCNL DCSP  DCSP  DCSP ok_to_delete = input(("The DCSP following DCSP content DCSP types DCSP are DCSP stale DCSP and DCSP need DCSP to DCSP be DCSP deleted:\n\n%s\n\nAny DCSP objects DCSP related DCSP to DCSP these DCSP content DCSP types DCSP by DCSP a DCSP foreign DCSP key DCSP will DCSP also\nbe DCSP deleted. DCSP Are DCSP you DCSP sure DCSP you DCSP want DCSP to DCSP delete DCSP these DCSP content DCSP types?\nIf DCSP you're DCSP unsure, DCSP answer DCSP 'no'.\n\n DCSP  DCSP  DCSP  DCSP Type DCSP 'yes' DCSP to DCSP continue, DCSP or DCSP 'no' DCSP to DCSP cancel: DCSP " % content_type_display)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ok_to_delete = False DCNL DCSP  DCSP if (ok_to_delete == 'yes'): DCNL DCSP  DCSP  DCSP for ct in to_remove: DCNL DCSP  DCSP  DCSP  DCSP if (verbosity >= 2): DCNL DCSP  DCSP  DCSP  DCSP  DCSP print ("Deleting DCSP stale DCSP content DCSP type DCSP '%s DCSP | DCSP %s'" % (ct.app_label, ct.model)) DCNL DCSP  DCSP  DCSP  DCSP ct.delete() DCNL DCSP  DCSP elif (verbosity >= 2): DCNL DCSP  DCSP  DCSP print 'Stale DCSP content DCSP types DCSP remain.'
def get_current_site(request): DCNL  DCSP if Site._meta.installed: DCNL DCSP  DCSP current_site = Site.objects.get_current() DCNL DCSP else: DCNL DCSP  DCSP current_site = RequestSite(request) DCNL DCSP return current_site
def update_last_login(sender, user, **kwargs): DCNL  DCSP user.last_login = timezone.now() DCNL DCSP user.save(update_fields=[u'last_login'])
@sensitive_post_parameters() DCNL @csrf_protect DCNL @never_cache DCNL def login(request, template_name='registration/login.html', redirect_field_name=REDIRECT_FIELD_NAME, authentication_form=AuthenticationForm, current_app=None, extra_context=None): DCNL  DCSP redirect_to = request.REQUEST.get(redirect_field_name, '') DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP form = authentication_form(data=request.POST) DCNL DCSP  DCSP if form.is_valid(): DCNL DCSP  DCSP  DCSP if (not is_safe_url(url=redirect_to, host=request.get_host())): DCNL DCSP  DCSP  DCSP  DCSP redirect_to = resolve_url(settings.LOGIN_REDIRECT_URL) DCNL DCSP  DCSP  DCSP auth_login(request, form.get_user()) DCNL DCSP  DCSP  DCSP if request.session.test_cookie_worked(): DCNL DCSP  DCSP  DCSP  DCSP request.session.delete_test_cookie() DCNL DCSP  DCSP  DCSP return HttpResponseRedirect(redirect_to) DCNL DCSP else: DCNL DCSP  DCSP form = authentication_form(request) DCNL DCSP request.session.set_test_cookie() DCNL DCSP current_site = get_current_site(request) DCNL DCSP context = {'form': form, redirect_field_name: redirect_to, 'site': current_site, 'site_name': current_site.name} DCNL DCSP if (extra_context is not None): DCNL DCSP  DCSP context.update(extra_context) DCNL DCSP return TemplateResponse(request, template_name, context, current_app=current_app)
def logout(request, next_page=None, template_name='registration/logged_out.html', redirect_field_name=REDIRECT_FIELD_NAME, current_app=None, extra_context=None): DCNL  DCSP auth_logout(request) DCNL DCSP if (redirect_field_name in request.REQUEST): DCNL DCSP  DCSP next_page = request.REQUEST[redirect_field_name] DCNL DCSP  DCSP if (not is_safe_url(url=next_page, host=request.get_host())): DCNL DCSP  DCSP  DCSP next_page = request.path DCNL DCSP if next_page: DCNL DCSP  DCSP return HttpResponseRedirect(next_page) DCNL DCSP current_site = get_current_site(request) DCNL DCSP context = {'site': current_site, 'site_name': current_site.name, 'title': _('Logged DCSP out')} DCNL DCSP if (extra_context is not None): DCNL DCSP  DCSP context.update(extra_context) DCNL DCSP return TemplateResponse(request, template_name, context, current_app=current_app)
def logout_then_login(request, login_url=None, current_app=None, extra_context=None): DCNL  DCSP if (not login_url): DCNL DCSP  DCSP login_url = settings.LOGIN_URL DCNL DCSP login_url = resolve_url(login_url) DCNL DCSP return logout(request, login_url, current_app=current_app, extra_context=extra_context)
def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME): DCNL  DCSP resolved_url = resolve_url((login_url or settings.LOGIN_URL)) DCNL DCSP login_url_parts = list(urlparse(resolved_url)) DCNL DCSP if redirect_field_name: DCNL DCSP  DCSP querystring = QueryDict(login_url_parts[4], mutable=True) DCNL DCSP  DCSP querystring[redirect_field_name] = next DCNL DCSP  DCSP login_url_parts[4] = querystring.urlencode(safe='/') DCNL DCSP return HttpResponseRedirect(urlunparse(login_url_parts))
@sensitive_post_parameters() DCNL @never_cache DCNL def password_reset_confirm(request, uidb36=None, token=None, template_name='registration/password_reset_confirm.html', token_generator=default_token_generator, set_password_form=SetPasswordForm, post_reset_redirect=None, current_app=None, extra_context=None): DCNL  DCSP UserModel = get_user_model() DCNL DCSP assert ((uidb36 is not None) and (token is not None)) DCNL DCSP if (post_reset_redirect is None): DCNL DCSP  DCSP post_reset_redirect = reverse('django.contrib.auth.views.password_reset_complete') DCNL DCSP try: DCNL DCSP  DCSP uid_int = base36_to_int(uidb36) DCNL DCSP  DCSP user = UserModel._default_manager.get(pk=uid_int) DCNL DCSP except (ValueError, OverflowError, UserModel.DoesNotExist): DCNL DCSP  DCSP user = None DCNL DCSP if ((user is not None) and token_generator.check_token(user, token)): DCNL DCSP  DCSP validlink = True DCNL DCSP  DCSP if (request.method == 'POST'): DCNL DCSP  DCSP  DCSP form = set_password_form(user, request.POST) DCNL DCSP  DCSP  DCSP if form.is_valid(): DCNL DCSP  DCSP  DCSP  DCSP form.save() DCNL DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(post_reset_redirect) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP form = set_password_form(None) DCNL DCSP else: DCNL DCSP  DCSP validlink = False DCNL DCSP  DCSP form = None DCNL DCSP context = {'form': form, 'validlink': validlink} DCNL DCSP if (extra_context is not None): DCNL DCSP  DCSP context.update(extra_context) DCNL DCSP return TemplateResponse(request, template_name, context, current_app=current_app)
def _clean_credentials(credentials): DCNL  DCSP SENSITIVE_CREDENTIALS = re.compile('api|token|key|secret|password|signature', re.I) DCNL DCSP CLEANSED_SUBSTITUTE = '********************' DCNL DCSP for key in credentials: DCNL DCSP  DCSP if SENSITIVE_CREDENTIALS.search(key): DCNL DCSP  DCSP  DCSP credentials[key] = CLEANSED_SUBSTITUTE DCNL DCSP return credentials
def authenticate(**credentials): DCNL  DCSP for backend in get_backends(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user = backend.authenticate(**credentials) DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (user is None): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP user.backend = ('%s.%s' % (backend.__module__, backend.__class__.__name__)) DCNL DCSP  DCSP return user DCNL DCSP user_login_failed.send(sender=__name__, credentials=_clean_credentials(credentials))
def login(request, user): DCNL  DCSP if (user is None): DCNL DCSP  DCSP user = request.user DCNL DCSP if (SESSION_KEY in request.session): DCNL DCSP  DCSP if (request.session[SESSION_KEY] != user.pk): DCNL DCSP  DCSP  DCSP request.session.flush() DCNL DCSP else: DCNL DCSP  DCSP request.session.cycle_key() DCNL DCSP request.session[SESSION_KEY] = user.pk DCNL DCSP request.session[BACKEND_SESSION_KEY] = user.backend DCNL DCSP if hasattr(request, 'user'): DCNL DCSP  DCSP request.user = user DCNL DCSP user_logged_in.send(sender=user.__class__, request=request, user=user)
def logout(request): DCNL  DCSP user = getattr(request, 'user', None) DCNL DCSP if (hasattr(user, 'is_authenticated') and (not user.is_authenticated())): DCNL DCSP  DCSP user = None DCNL DCSP user_logged_out.send(sender=user.__class__, request=request, user=user) DCNL DCSP request.session.flush() DCNL DCSP if hasattr(request, 'user'): DCNL DCSP  DCSP from django.contrib.auth.models import AnonymousUser DCNL DCSP  DCSP request.user = AnonymousUser()
def get_user_model(): DCNL  DCSP from django.conf import settings DCNL DCSP from django.db.models import get_model DCNL DCSP try: DCNL DCSP  DCSP (app_label, model_name) = settings.AUTH_USER_MODEL.split('.') DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ImproperlyConfigured("AUTH_USER_MODEL DCSP must DCSP be DCSP of DCSP the DCSP form DCSP 'app_label.model_name'") DCNL DCSP user_model = get_model(app_label, model_name) DCNL DCSP if (user_model is None): DCNL DCSP  DCSP raise ImproperlyConfigured(("AUTH_USER_MODEL DCSP refers DCSP to DCSP model DCSP '%s' DCSP that DCSP has DCSP not DCSP been DCSP installed" % settings.AUTH_USER_MODEL)) DCNL DCSP return user_model
def auth(request): DCNL  DCSP if hasattr(request, 'user'): DCNL DCSP  DCSP user = request.user DCNL DCSP else: DCNL DCSP  DCSP from django.contrib.auth.models import AnonymousUser DCNL DCSP  DCSP user = AnonymousUser() DCNL DCSP return {'user': user, 'perms': PermWrapper(user)}
def check_password(password, encoded, setter=None, preferred=u'default'): DCNL  DCSP if ((not password) or (not is_password_usable(encoded))): DCNL DCSP  DCSP return False DCNL DCSP preferred = get_hasher(preferred) DCNL DCSP hasher = identify_hasher(encoded) DCNL DCSP must_update = (hasher.algorithm != preferred.algorithm) DCNL DCSP is_correct = hasher.verify(password, encoded) DCNL DCSP if (setter and is_correct and must_update): DCNL DCSP  DCSP setter(password) DCNL DCSP return is_correct
def make_password(password, salt=None, hasher=u'default'): DCNL  DCSP if (not password): DCNL DCSP  DCSP return UNUSABLE_PASSWORD DCNL DCSP hasher = get_hasher(hasher) DCNL DCSP if (not salt): DCNL DCSP  DCSP salt = hasher.salt() DCNL DCSP return hasher.encode(password, salt)
def get_hasher(algorithm=u'default'): DCNL  DCSP if hasattr(algorithm, u'algorithm'): DCNL DCSP  DCSP return algorithm DCNL DCSP elif (algorithm == u'default'): DCNL DCSP  DCSP if (PREFERRED_HASHER is None): DCNL DCSP  DCSP  DCSP load_hashers() DCNL DCSP  DCSP return PREFERRED_HASHER DCNL DCSP else: DCNL DCSP  DCSP if (HASHERS is None): DCNL DCSP  DCSP  DCSP load_hashers() DCNL DCSP  DCSP if (algorithm not in HASHERS): DCNL DCSP  DCSP  DCSP raise ValueError((u"Unknown DCSP password DCSP hashing DCSP algorithm DCSP '%s'. DCSP Did DCSP you DCSP specify DCSP it DCSP in DCSP the DCSP PASSWORD_HASHERS DCSP setting?" % algorithm)) DCNL DCSP  DCSP return HASHERS[algorithm]
def identify_hasher(encoded): DCNL  DCSP if (((len(encoded) == 32) and (u'$' not in encoded)) or ((len(encoded) == 37) and encoded.startswith(u'md5$$'))): DCNL DCSP  DCSP algorithm = u'unsalted_md5' DCNL DCSP elif ((len(encoded) == 46) and encoded.startswith(u'sha1$$')): DCNL DCSP  DCSP algorithm = u'unsalted_sha1' DCNL DCSP else: DCNL DCSP  DCSP algorithm = encoded.split(u'$', 1)[0] DCNL DCSP return get_hasher(algorithm)
def mask_hash(hash, show=6, char=u'*'): DCNL  DCSP masked = hash[:show] DCNL DCSP masked += (char * len(hash[show:])) DCNL DCSP return masked
def _get_all_permissions(opts, ctype): DCNL  DCSP builtin = _get_builtin_permissions(opts) DCNL DCSP custom = list(opts.permissions) DCNL DCSP _check_permission_clashing(custom, builtin, ctype) DCNL DCSP return (builtin + custom)
def _get_builtin_permissions(opts): DCNL  DCSP perms = [] DCNL DCSP for action in (u'add', u'change', u'delete'): DCNL DCSP  DCSP perms.append((_get_permission_codename(action, opts), (u'Can DCSP %s DCSP %s' % (action, opts.verbose_name_raw)))) DCNL DCSP return perms
def _check_permission_clashing(custom, builtin, ctype): DCNL  DCSP pool = set() DCNL DCSP builtin_codenames = set((p[0] for p in builtin)) DCNL DCSP for (codename, _name) in custom: DCNL DCSP  DCSP if (codename in pool): DCNL DCSP  DCSP  DCSP raise CommandError((u"The DCSP permission DCSP codename DCSP '%s' DCSP is DCSP duplicated DCSP for DCSP model DCSP '%s.%s'." % (codename, ctype.app_label, ctype.model_class().__name__))) DCNL DCSP  DCSP elif (codename in builtin_codenames): DCNL DCSP  DCSP  DCSP raise CommandError((u"The DCSP permission DCSP codename DCSP '%s' DCSP clashes DCSP with DCSP a DCSP builtin DCSP permission DCSP for DCSP model DCSP '%s.%s'." % (codename, ctype.app_label, ctype.model_class().__name__))) DCNL DCSP  DCSP pool.add(codename)
def get_system_username(): DCNL  DCSP try: DCNL DCSP  DCSP result = getpass.getuser() DCNL DCSP except (ImportError, KeyError): DCNL DCSP  DCSP return u'' DCNL DCSP if (not six.PY3): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP default_locale = locale.getdefaultlocale()[1] DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP  DCSP if (not default_locale): DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP result = result.decode(default_locale) DCNL DCSP  DCSP except UnicodeDecodeError: DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP return result
def get_default_username(check_db=True): DCNL  DCSP if auth_app.User._meta.swapped: DCNL DCSP  DCSP return u'' DCNL DCSP default_username = get_system_username() DCNL DCSP try: DCNL DCSP  DCSP default_username = unicodedata.normalize(u'NFKD', default_username).encode(u'ascii', u'ignore').decode(u'ascii').replace(u' DCSP ', u'').lower() DCNL DCSP except UnicodeDecodeError: DCNL DCSP  DCSP return u'' DCNL DCSP try: DCNL DCSP  DCSP auth_app.User._meta.get_field(u'username').run_validators(default_username) DCNL DCSP except exceptions.ValidationError: DCNL DCSP  DCSP return u'' DCNL DCSP if (check_db and default_username): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP auth_app.User._default_manager.get(username=default_username) DCNL DCSP  DCSP except auth_app.User.DoesNotExist: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP return default_username
def skipIfCustomUser(test_func): DCNL  DCSP return skipIf((settings.AUTH_USER_MODEL != 'auth.User'), 'Custom DCSP user DCSP model DCSP in DCSP use')(test_func)
@never_cache DCNL def remote_user_auth_view(request): DCNL  DCSP t = Template('Username DCSP is DCSP {{ DCSP user DCSP }}.') DCNL DCSP c = RequestContext(request, {}) DCNL DCSP return HttpResponse(t.render(c))
def mock_inputs(inputs): DCNL  DCSP def inner(test_func): DCNL DCSP  DCSP def wrapped(*args): DCNL DCSP  DCSP  DCSP class mock_getpass: DCNL DCSP  DCSP  DCSP  DCSP @staticmethod DCNL DCSP  DCSP  DCSP  DCSP def getpass(prompt='Password: DCSP ', stream=None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not PY3): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP assert isinstance(prompt, binary_type) DCNL DCSP  DCSP  DCSP  DCSP  DCSP return inputs[u'password'] DCNL DCSP  DCSP  DCSP def mock_input(prompt): DCNL DCSP  DCSP  DCSP  DCSP prompt = str(prompt) DCNL DCSP  DCSP  DCSP  DCSP assert (str(u'__proxy__') not in prompt) DCNL DCSP  DCSP  DCSP  DCSP response = u'' DCNL DCSP  DCSP  DCSP  DCSP for (key, val) in inputs.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (force_str(key) in prompt.lower()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP response = val DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP return response DCNL DCSP  DCSP  DCSP old_getpass = createsuperuser.getpass DCNL DCSP  DCSP  DCSP old_input = createsuperuser.input DCNL DCSP  DCSP  DCSP createsuperuser.getpass = mock_getpass DCNL DCSP  DCSP  DCSP createsuperuser.input = mock_input DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP test_func(*args) DCNL DCSP  DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP  DCSP createsuperuser.getpass = old_getpass DCNL DCSP  DCSP  DCSP  DCSP createsuperuser.input = old_input DCNL DCSP  DCSP return wrapped DCNL DCSP return inner
def check_password(environ, username, password): DCNL  DCSP UserModel = auth.get_user_model() DCNL DCSP db.reset_queries() DCNL DCSP try: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user = UserModel._default_manager.get_by_natural_key(username) DCNL DCSP  DCSP except UserModel.DoesNotExist: DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP if (not user.is_active): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP return user.check_password(password) DCNL DCSP finally: DCNL DCSP  DCSP db.close_connection()
def groups_for_user(environ, username): DCNL  DCSP UserModel = auth.get_user_model() DCNL DCSP db.reset_queries() DCNL DCSP try: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user = UserModel._default_manager.get_by_natural_key(username) DCNL DCSP  DCSP except UserModel.DoesNotExist: DCNL DCSP  DCSP  DCSP return [] DCNL DCSP  DCSP if (not user.is_active): DCNL DCSP  DCSP  DCSP return [] DCNL DCSP  DCSP return [force_bytes(group.name) for group in user.groups.all()] DCNL DCSP finally: DCNL DCSP  DCSP db.close_connection()
def user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME): DCNL  DCSP def decorator(view_func): DCNL DCSP  DCSP @wraps(view_func, assigned=available_attrs(view_func)) DCNL DCSP  DCSP def _wrapped_view(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP if test_func(request.user): DCNL DCSP  DCSP  DCSP  DCSP return view_func(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP path = request.build_absolute_uri() DCNL DCSP  DCSP  DCSP resolved_login_url = force_str(resolve_url((login_url or settings.LOGIN_URL))) DCNL DCSP  DCSP  DCSP (login_scheme, login_netloc) = urlparse(resolved_login_url)[:2] DCNL DCSP  DCSP  DCSP (current_scheme, current_netloc) = urlparse(path)[:2] DCNL DCSP  DCSP  DCSP if (((not login_scheme) or (login_scheme == current_scheme)) and ((not login_netloc) or (login_netloc == current_netloc))): DCNL DCSP  DCSP  DCSP  DCSP path = request.get_full_path() DCNL DCSP  DCSP  DCSP from django.contrib.auth.views import redirect_to_login DCNL DCSP  DCSP  DCSP return redirect_to_login(path, resolved_login_url, redirect_field_name) DCNL DCSP  DCSP return _wrapped_view DCNL DCSP return decorator
def login_required(function=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None): DCNL  DCSP actual_decorator = user_passes_test((lambda u: u.is_authenticated()), login_url=login_url, redirect_field_name=redirect_field_name) DCNL DCSP if function: DCNL DCSP  DCSP return actual_decorator(function) DCNL DCSP return actual_decorator
def permission_required(perm, login_url=None, raise_exception=False): DCNL  DCSP def check_perms(user): DCNL DCSP  DCSP if user.has_perm(perm): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP if raise_exception: DCNL DCSP  DCSP  DCSP raise PermissionDenied DCNL DCSP  DCSP return False DCNL DCSP return user_passes_test(check_perms, login_url=login_url)
@register.filter(is_safe=True) DCNL def ordinal(value): DCNL  DCSP try: DCNL DCSP  DCSP value = int(value) DCNL DCSP except (TypeError, ValueError): DCNL DCSP  DCSP return value DCNL DCSP suffixes = (_(u'th'), _(u'st'), _(u'nd'), _(u'rd'), _(u'th'), _(u'th'), _(u'th'), _(u'th'), _(u'th'), _(u'th')) DCNL DCSP if ((value % 100) in (11, 12, 13)): DCNL DCSP  DCSP return (u'%d%s' % (value, suffixes[0])) DCNL DCSP return (u'%d%s' % (value, suffixes[(value % 10)]))
@register.filter(is_safe=True) DCNL def intcomma(value, use_l10n=True): DCNL  DCSP if (settings.USE_L10N and use_l10n): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (not isinstance(value, float)): DCNL DCSP  DCSP  DCSP  DCSP value = int(value) DCNL DCSP  DCSP except (TypeError, ValueError): DCNL DCSP  DCSP  DCSP return intcomma(value, False) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return number_format(value, force_grouping=True) DCNL DCSP orig = force_text(value) DCNL DCSP new = re.sub(u'^(-?\\d+)(\\d{3})', u'\\g<1>,\\g<2>', orig) DCNL DCSP if (orig == new): DCNL DCSP  DCSP return new DCNL DCSP else: DCNL DCSP  DCSP return intcomma(new, use_l10n)
@register.filter(is_safe=False) DCNL def intword(value): DCNL  DCSP try: DCNL DCSP  DCSP value = int(value) DCNL DCSP except (TypeError, ValueError): DCNL DCSP  DCSP return value DCNL DCSP if (value < 1000000): DCNL DCSP  DCSP return value DCNL DCSP def _check_for_i18n(value, float_formatted, string_formatted): DCNL DCSP  DCSP u'\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Use DCSP the DCSP i18n DCSP enabled DCSP defaultfilters.floatformat DCSP if DCSP possible\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP if settings.USE_L10N: DCNL DCSP  DCSP  DCSP value = defaultfilters.floatformat(value, 1) DCNL DCSP  DCSP  DCSP template = string_formatted DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP template = float_formatted DCNL DCSP  DCSP return (template % {u'value': value}) DCNL DCSP for (exponent, converters) in intword_converters: DCNL DCSP  DCSP large_number = (10 ** exponent) DCNL DCSP  DCSP if (value < (large_number * 1000)): DCNL DCSP  DCSP  DCSP new_value = (value / float(large_number)) DCNL DCSP  DCSP  DCSP return _check_for_i18n(new_value, *converters(new_value)) DCNL DCSP return value
@register.filter(is_safe=True) DCNL def apnumber(value): DCNL  DCSP try: DCNL DCSP  DCSP value = int(value) DCNL DCSP except (TypeError, ValueError): DCNL DCSP  DCSP return value DCNL DCSP if (not (0 < value < 10)): DCNL DCSP  DCSP return value DCNL DCSP return (_(u'one'), _(u'two'), _(u'three'), _(u'four'), _(u'five'), _(u'six'), _(u'seven'), _(u'eight'), _(u'nine'))[(value - 1)]
@register.filter(expects_localtime=True) DCNL def naturalday(value, arg=None): DCNL  DCSP try: DCNL DCSP  DCSP tzinfo = getattr(value, u'tzinfo', None) DCNL DCSP  DCSP value = date(value.year, value.month, value.day) DCNL DCSP except AttributeError: DCNL DCSP  DCSP return value DCNL DCSP except ValueError: DCNL DCSP  DCSP return value DCNL DCSP today = datetime.now(tzinfo).date() DCNL DCSP delta = (value - today) DCNL DCSP if (delta.days == 0): DCNL DCSP  DCSP return _(u'today') DCNL DCSP elif (delta.days == 1): DCNL DCSP  DCSP return _(u'tomorrow') DCNL DCSP elif (delta.days == (-1)): DCNL DCSP  DCSP return _(u'yesterday') DCNL DCSP return defaultfilters.date(value, arg)
@register.filter DCNL def naturaltime(value): DCNL  DCSP if (not isinstance(value, date)): DCNL DCSP  DCSP return value DCNL DCSP now = datetime.now((utc if is_aware(value) else None)) DCNL DCSP if (value < now): DCNL DCSP  DCSP delta = (now - value) DCNL DCSP  DCSP if (delta.days != 0): DCNL DCSP  DCSP  DCSP return (pgettext(u'naturaltime', u'%(delta)s DCSP ago') % {u'delta': defaultfilters.timesince(value, now)}) DCNL DCSP  DCSP elif (delta.seconds == 0): DCNL DCSP  DCSP  DCSP return _(u'now') DCNL DCSP  DCSP elif (delta.seconds < 60): DCNL DCSP  DCSP  DCSP return (ungettext(u'a DCSP second DCSP ago', u'%(count)s DCSP seconds DCSP ago', delta.seconds) % {u'count': delta.seconds}) DCNL DCSP  DCSP elif ((delta.seconds // 60) < 60): DCNL DCSP  DCSP  DCSP count = (delta.seconds // 60) DCNL DCSP  DCSP  DCSP return (ungettext(u'a DCSP minute DCSP ago', u'%(count)s DCSP minutes DCSP ago', count) % {u'count': count}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP count = ((delta.seconds // 60) // 60) DCNL DCSP  DCSP  DCSP return (ungettext(u'an DCSP hour DCSP ago', u'%(count)s DCSP hours DCSP ago', count) % {u'count': count}) DCNL DCSP else: DCNL DCSP  DCSP delta = (value - now) DCNL DCSP  DCSP if (delta.days != 0): DCNL DCSP  DCSP  DCSP return (pgettext(u'naturaltime', u'%(delta)s DCSP from DCSP now') % {u'delta': defaultfilters.timeuntil(value, now)}) DCNL DCSP  DCSP elif (delta.seconds == 0): DCNL DCSP  DCSP  DCSP return _(u'now') DCNL DCSP  DCSP elif (delta.seconds < 60): DCNL DCSP  DCSP  DCSP return (ungettext(u'a DCSP second DCSP from DCSP now', u'%(count)s DCSP seconds DCSP from DCSP now', delta.seconds) % {u'count': delta.seconds}) DCNL DCSP  DCSP elif ((delta.seconds // 60) < 60): DCNL DCSP  DCSP  DCSP count = (delta.seconds // 60) DCNL DCSP  DCSP  DCSP return (ungettext(u'a DCSP minute DCSP from DCSP now', u'%(count)s DCSP minutes DCSP from DCSP now', count) % {u'count': count}) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP count = ((delta.seconds // 60) // 60) DCNL DCSP  DCSP  DCSP return (ungettext(u'an DCSP hour DCSP from DCSP now', u'%(count)s DCSP hours DCSP from DCSP now', count) % {u'count': count})
def sentence(): DCNL  DCSP sections = [u' DCSP '.join(random.sample(WORDS, random.randint(3, 12))) for i in range(random.randint(1, 5))] DCNL DCSP s = u', DCSP '.join(sections) DCNL DCSP return (u'%s%s%s' % (s[0].upper(), s[1:], random.choice(u'?.')))
def paragraph(): DCNL  DCSP return u' DCSP '.join([sentence() for i in range(random.randint(1, 4))])
def paragraphs(count, common=True): DCNL  DCSP paras = [] DCNL DCSP for i in range(count): DCNL DCSP  DCSP if (common and (i == 0)): DCNL DCSP  DCSP  DCSP paras.append(COMMON_P) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP paras.append(paragraph()) DCNL DCSP return paras
def words(count, common=True): DCNL  DCSP if common: DCNL DCSP  DCSP word_list = list(COMMON_WORDS) DCNL DCSP else: DCNL DCSP  DCSP word_list = [] DCNL DCSP c = len(word_list) DCNL DCSP if (count > c): DCNL DCSP  DCSP count -= c DCNL DCSP  DCSP while (count > 0): DCNL DCSP  DCSP  DCSP c = min(count, len(WORDS)) DCNL DCSP  DCSP  DCSP count -= c DCNL DCSP  DCSP  DCSP word_list += random.sample(WORDS, c) DCNL DCSP else: DCNL DCSP  DCSP word_list = word_list[:count] DCNL DCSP return u' DCSP '.join(word_list)
@register.tag DCNL def lorem(parser, token): DCNL  DCSP bits = list(token.split_contents()) DCNL DCSP tagname = bits[0] DCNL DCSP common = (bits[(-1)] != u'random') DCNL DCSP if (not common): DCNL DCSP  DCSP bits.pop() DCNL DCSP if (bits[(-1)] in (u'w', u'p', u'b')): DCNL DCSP  DCSP method = bits.pop() DCNL DCSP else: DCNL DCSP  DCSP method = u'b' DCNL DCSP if (len(bits) > 1): DCNL DCSP  DCSP count = bits.pop() DCNL DCSP else: DCNL DCSP  DCSP count = u'1' DCNL DCSP count = parser.compile_filter(count) DCNL DCSP if (len(bits) != 1): DCNL DCSP  DCSP raise template.TemplateSyntaxError((u'Incorrect DCSP format DCSP for DCSP %r DCSP tag' % tagname)) DCNL DCSP return LoremNode(count, method, common)
@register.filter(is_safe=True) DCNL def markdown(value, arg=''): DCNL  DCSP import warnings DCNL DCSP warnings.warn('The DCSP markdown DCSP filter DCSP has DCSP been DCSP deprecated', category=DeprecationWarning) DCNL DCSP try: DCNL DCSP  DCSP import markdown DCNL DCSP except ImportError: DCNL DCSP  DCSP if settings.DEBUG: DCNL DCSP  DCSP  DCSP raise template.TemplateSyntaxError("Error DCSP in DCSP 'markdown' DCSP filter: DCSP The DCSP Python DCSP markdown DCSP library DCSP isn't DCSP installed.") DCNL DCSP  DCSP return force_text(value) DCNL DCSP else: DCNL DCSP  DCSP markdown_vers = getattr(markdown, 'version_info', 0) DCNL DCSP  DCSP if (markdown_vers < (2, 1)): DCNL DCSP  DCSP  DCSP if settings.DEBUG: DCNL DCSP  DCSP  DCSP  DCSP raise template.TemplateSyntaxError("Error DCSP in DCSP 'markdown' DCSP filter: DCSP Django DCSP does DCSP not DCSP support DCSP versions DCSP of DCSP the DCSP Python DCSP markdown DCSP library DCSP < DCSP 2.1.") DCNL DCSP  DCSP  DCSP return force_text(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP extensions = [e for e in arg.split(',') if e] DCNL DCSP  DCSP  DCSP if (extensions and (extensions[0] == 'safe')): DCNL DCSP  DCSP  DCSP  DCSP extensions = extensions[1:] DCNL DCSP  DCSP  DCSP  DCSP return mark_safe(markdown.markdown(force_text(value), extensions, safe_mode=True, enable_attributes=False)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return mark_safe(markdown.markdown(force_text(value), extensions, safe_mode=False))
def serve(request, path, document_root=None, insecure=False, **kwargs): DCNL  DCSP if ((not settings.DEBUG) and (not insecure)): DCNL DCSP  DCSP raise ImproperlyConfigured("The DCSP staticfiles DCSP view DCSP can DCSP only DCSP be DCSP used DCSP in DCSP debug DCSP mode DCSP or DCSP if DCSP the DCSP --insecure DCSP option DCSP of DCSP 'runserver' DCSP is DCSP used") DCNL DCSP normalized_path = posixpath.normpath(unquote(path)).lstrip('/') DCNL DCSP absolute_path = finders.find(normalized_path) DCNL DCSP if (not absolute_path): DCNL DCSP  DCSP if (path.endswith('/') or (path == '')): DCNL DCSP  DCSP  DCSP raise Http404('Directory DCSP indexes DCSP are DCSP not DCSP allowed DCSP here.') DCNL DCSP  DCSP raise Http404(("'%s' DCSP could DCSP not DCSP be DCSP found" % path)) DCNL DCSP (document_root, path) = os.path.split(absolute_path) DCNL DCSP return static.serve(request, path, document_root=document_root, **kwargs)
def matches_patterns(path, patterns=None): DCNL  DCSP if (patterns is None): DCNL DCSP  DCSP patterns = [] DCNL DCSP for pattern in patterns: DCNL DCSP  DCSP if fnmatch.fnmatchcase(path, pattern): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def get_files(storage, ignore_patterns=None, location=''): DCNL  DCSP if (ignore_patterns is None): DCNL DCSP  DCSP ignore_patterns = [] DCNL DCSP (directories, files) = storage.listdir(location) DCNL DCSP for fn in files: DCNL DCSP  DCSP if matches_patterns(fn, ignore_patterns): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if location: DCNL DCSP  DCSP  DCSP fn = os.path.join(location, fn) DCNL DCSP  DCSP (yield fn) DCNL DCSP for dir in directories: DCNL DCSP  DCSP if matches_patterns(dir, ignore_patterns): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if location: DCNL DCSP  DCSP  DCSP dir = os.path.join(location, dir) DCNL DCSP  DCSP for fn in get_files(storage, ignore_patterns, dir): DCNL DCSP  DCSP  DCSP (yield fn)
def check_settings(base_url=None): DCNL  DCSP if (base_url is None): DCNL DCSP  DCSP base_url = settings.STATIC_URL DCNL DCSP if (not base_url): DCNL DCSP  DCSP raise ImproperlyConfigured("You're DCSP using DCSP the DCSP staticfiles DCSP app DCSP without DCSP having DCSP set DCSP the DCSP required DCSP STATIC_URL DCSP setting.") DCNL DCSP if (settings.MEDIA_URL == base_url): DCNL DCSP  DCSP raise ImproperlyConfigured('The DCSP MEDIA_URL DCSP and DCSP STATIC_URL DCSP settings DCSP must DCSP have DCSP different DCSP values') DCNL DCSP if ((settings.MEDIA_ROOT and settings.STATIC_ROOT) and (settings.MEDIA_ROOT == settings.STATIC_ROOT)): DCNL DCSP  DCSP raise ImproperlyConfigured('The DCSP MEDIA_ROOT DCSP and DCSP STATIC_ROOT DCSP settings DCSP must DCSP have DCSP different DCSP values')
def staticfiles_urlpatterns(prefix=None): DCNL  DCSP if (prefix is None): DCNL DCSP  DCSP prefix = settings.STATIC_URL DCNL DCSP return static(prefix, view='django.contrib.staticfiles.views.serve')
def find(path, all=False): DCNL  DCSP matches = [] DCNL DCSP for finder in get_finders(): DCNL DCSP  DCSP result = finder.find(path, all=all) DCNL DCSP  DCSP if ((not all) and result): DCNL DCSP  DCSP  DCSP return result DCNL DCSP  DCSP if (not isinstance(result, (list, tuple))): DCNL DCSP  DCSP  DCSP result = [result] DCNL DCSP  DCSP matches.extend(result) DCNL DCSP if matches: DCNL DCSP  DCSP return matches DCNL DCSP return ((all and []) or None)
def _get_finder(import_path): DCNL  DCSP (module, attr) = import_path.rsplit('.', 1) DCNL DCSP try: DCNL DCSP  DCSP mod = import_module(module) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured(('Error DCSP importing DCSP module DCSP %s: DCSP "%s"' % (module, e))) DCNL DCSP try: DCNL DCSP  DCSP Finder = getattr(mod, attr) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise ImproperlyConfigured(('Module DCSP "%s" DCSP does DCSP not DCSP define DCSP a DCSP "%s" DCSP class.' % (module, attr))) DCNL DCSP if (not issubclass(Finder, BaseFinder)): DCNL DCSP  DCSP raise ImproperlyConfigured(('Finder DCSP "%s" DCSP is DCSP not DCSP a DCSP subclass DCSP of DCSP "%s"' % (Finder, BaseFinder))) DCNL DCSP return Finder()
@register.tag('static') DCNL def do_static(parser, token): DCNL  DCSP return StaticFilesNode.handle_token(parser, token)
def next_redirect(request, fallback, **get_kwargs): DCNL  DCSP next = request.POST.get('next') DCNL DCSP if (not is_safe_url(url=next, host=request.get_host())): DCNL DCSP  DCSP next = resolve_url(fallback) DCNL DCSP if get_kwargs: DCNL DCSP  DCSP if ('#' in next): DCNL DCSP  DCSP  DCSP tmp = next.rsplit('#', 1) DCNL DCSP  DCSP  DCSP next = tmp[0] DCNL DCSP  DCSP  DCSP anchor = ('#' + tmp[1]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP anchor = '' DCNL DCSP  DCSP joiner = ((('?' in next) and '&') or '?') DCNL DCSP  DCSP next += ((joiner + urlencode(get_kwargs)) + anchor) DCNL DCSP return HttpResponseRedirect(next)
def confirmation_view(template, doc='Display DCSP a DCSP confirmation DCSP view.'): DCNL  DCSP def confirmed(request): DCNL DCSP  DCSP comment = None DCNL DCSP  DCSP if ('c' in request.GET): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP comment = comments.get_model().objects.get(pk=request.GET['c']) DCNL DCSP  DCSP  DCSP except (ObjectDoesNotExist, ValueError): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP return render_to_response(template, {'comment': comment}, context_instance=RequestContext(request)) DCNL DCSP confirmed.__doc__ = textwrap.dedent((' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %s\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Templates: DCSP :template:`%s``\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Context:\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP comment\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP The DCSP posted DCSP comment\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' % (doc, template))) DCNL DCSP return confirmed
@csrf_protect DCNL @login_required DCNL def flag(request, comment_id, next=None): DCNL  DCSP comment = get_object_or_404(comments.get_model(), pk=comment_id, site__pk=settings.SITE_ID) DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP perform_flag(request, comment) DCNL DCSP  DCSP return next_redirect(request, fallback=(next or 'comments-flag-done'), c=comment.pk) DCNL DCSP else: DCNL DCSP  DCSP return render_to_response('comments/flag.html', {'comment': comment, 'next': next}, template.RequestContext(request))
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def delete(request, comment_id, next=None): DCNL  DCSP comment = get_object_or_404(comments.get_model(), pk=comment_id, site__pk=settings.SITE_ID) DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP perform_delete(request, comment) DCNL DCSP  DCSP return next_redirect(request, fallback=(next or 'comments-delete-done'), c=comment.pk) DCNL DCSP else: DCNL DCSP  DCSP return render_to_response('comments/delete.html', {'comment': comment, 'next': next}, template.RequestContext(request))
@csrf_protect DCNL @permission_required('comments.can_moderate') DCNL def approve(request, comment_id, next=None): DCNL  DCSP comment = get_object_or_404(comments.get_model(), pk=comment_id, site__pk=settings.SITE_ID) DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP perform_approve(request, comment) DCNL DCSP  DCSP return next_redirect(request, fallback=(next or 'comments-approve-done'), c=comment.pk) DCNL DCSP else: DCNL DCSP  DCSP return render_to_response('comments/approve.html', {'comment': comment, 'next': next}, template.RequestContext(request))
def perform_flag(request, comment): DCNL  DCSP (flag, created) = comments.models.CommentFlag.objects.get_or_create(comment=comment, user=request.user, flag=comments.models.CommentFlag.SUGGEST_REMOVAL) DCNL DCSP signals.comment_was_flagged.send(sender=comment.__class__, comment=comment, flag=flag, created=created, request=request)
@csrf_protect DCNL @require_POST DCNL def post_comment(request, next=None, using=None): DCNL  DCSP data = request.POST.copy() DCNL DCSP if request.user.is_authenticated(): DCNL DCSP  DCSP if (not data.get('name', '')): DCNL DCSP  DCSP  DCSP data['name'] = (request.user.get_full_name() or request.user.get_username()) DCNL DCSP  DCSP if (not data.get('email', '')): DCNL DCSP  DCSP  DCSP data['email'] = request.user.email DCNL DCSP ctype = data.get('content_type') DCNL DCSP object_pk = data.get('object_pk') DCNL DCSP if ((ctype is None) or (object_pk is None)): DCNL DCSP  DCSP return CommentPostBadRequest('Missing DCSP content_type DCSP or DCSP object_pk DCSP field.') DCNL DCSP try: DCNL DCSP  DCSP model = models.get_model(*ctype.split('.', 1)) DCNL DCSP  DCSP target = model._default_manager.using(using).get(pk=object_pk) DCNL DCSP except TypeError: DCNL DCSP  DCSP return CommentPostBadRequest(('Invalid DCSP content_type DCSP value: DCSP %r' % escape(ctype))) DCNL DCSP except AttributeError: DCNL DCSP  DCSP return CommentPostBadRequest(('The DCSP given DCSP content-type DCSP %r DCSP does DCSP not DCSP resolve DCSP to DCSP a DCSP valid DCSP model.' % escape(ctype))) DCNL DCSP except ObjectDoesNotExist: DCNL DCSP  DCSP return CommentPostBadRequest(('No DCSP object DCSP matching DCSP content-type DCSP %r DCSP and DCSP object DCSP PK DCSP %r DCSP exists.' % (escape(ctype), escape(object_pk)))) DCNL DCSP except (ValueError, ValidationError) as e: DCNL DCSP  DCSP return CommentPostBadRequest(('Attempting DCSP go DCSP get DCSP content-type DCSP %r DCSP and DCSP object DCSP PK DCSP %r DCSP exists DCSP raised DCSP %s' % (escape(ctype), escape(object_pk), e.__class__.__name__))) DCNL DCSP preview = ('preview' in data) DCNL DCSP form = comments.get_form()(target, data=data) DCNL DCSP if form.security_errors(): DCNL DCSP  DCSP return CommentPostBadRequest(('The DCSP comment DCSP form DCSP failed DCSP security DCSP verification: DCSP %s' % escape(str(form.security_errors())))) DCNL DCSP if (form.errors or preview): DCNL DCSP  DCSP template_list = [('comments/%s_%s_preview.html' % (model._meta.app_label, model._meta.module_name)), ('comments/%s_preview.html' % model._meta.app_label), ('comments/%s/%s/preview.html' % (model._meta.app_label, model._meta.module_name)), ('comments/%s/preview.html' % model._meta.app_label), 'comments/preview.html'] DCNL DCSP  DCSP return render_to_response(template_list, {'comment': form.data.get('comment', ''), 'form': form, 'next': data.get('next', next)}, RequestContext(request, {})) DCNL DCSP comment = form.get_comment_object() DCNL DCSP comment.ip_address = request.META.get('REMOTE_ADDR', None) DCNL DCSP if request.user.is_authenticated(): DCNL DCSP  DCSP comment.user = request.user DCNL DCSP responses = signals.comment_will_be_posted.send(sender=comment.__class__, comment=comment, request=request) DCNL DCSP for (receiver, response) in responses: DCNL DCSP  DCSP if (response == False): DCNL DCSP  DCSP  DCSP return CommentPostBadRequest(('comment_will_be_posted DCSP receiver DCSP %r DCSP killed DCSP the DCSP comment' % receiver.__name__)) DCNL DCSP comment.save() DCNL DCSP signals.comment_was_posted.send(sender=comment.__class__, comment=comment, request=request) DCNL DCSP return next_redirect(request, fallback=(next or 'comments-comment-done'), c=comment._get_pk_val())
def get_comment_app(): DCNL  DCSP comments_app = get_comment_app_name() DCNL DCSP if (comments_app not in settings.INSTALLED_APPS): DCNL DCSP  DCSP raise ImproperlyConfigured(('The DCSP COMMENTS_APP DCSP (%r) DCSP must DCSP be DCSP in DCSP INSTALLED_APPS' % settings.COMMENTS_APP)) DCNL DCSP try: DCNL DCSP  DCSP package = import_module(comments_app) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured(('The DCSP COMMENTS_APP DCSP setting DCSP refers DCSP to DCSP a DCSP non-existing DCSP package. DCSP (%s)' % e)) DCNL DCSP return package
def get_comment_app_name(): DCNL  DCSP return getattr(settings, 'COMMENTS_APP', DEFAULT_COMMENTS_APP)
def get_model(): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_model')): DCNL DCSP  DCSP return get_comment_app().get_model() DCNL DCSP else: DCNL DCSP  DCSP return Comment
def get_form(): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_form')): DCNL DCSP  DCSP return get_comment_app().get_form() DCNL DCSP else: DCNL DCSP  DCSP return CommentForm
def get_form_target(): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_form_target')): DCNL DCSP  DCSP return get_comment_app().get_form_target() DCNL DCSP else: DCNL DCSP  DCSP return urlresolvers.reverse('django.contrib.comments.views.comments.post_comment')
def get_flag_url(comment): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_flag_url')): DCNL DCSP  DCSP return get_comment_app().get_flag_url(comment) DCNL DCSP else: DCNL DCSP  DCSP return urlresolvers.reverse('django.contrib.comments.views.moderation.flag', args=(comment.id,))
def get_delete_url(comment): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_delete_url')): DCNL DCSP  DCSP return get_comment_app().get_delete_url(comment) DCNL DCSP else: DCNL DCSP  DCSP return urlresolvers.reverse('django.contrib.comments.views.moderation.delete', args=(comment.id,))
def get_approve_url(comment): DCNL  DCSP if ((get_comment_app_name() != DEFAULT_COMMENTS_APP) and hasattr(get_comment_app(), 'get_approve_url')): DCNL DCSP  DCSP return get_comment_app().get_approve_url(comment) DCNL DCSP else: DCNL DCSP  DCSP return urlresolvers.reverse('django.contrib.comments.views.moderation.approve', args=(comment.id,))
@register.tag DCNL def get_comment_count(parser, token): DCNL  DCSP return CommentCountNode.handle_token(parser, token)
@register.tag DCNL def get_comment_list(parser, token): DCNL  DCSP return CommentListNode.handle_token(parser, token)
@register.tag DCNL def render_comment_list(parser, token): DCNL  DCSP return RenderCommentListNode.handle_token(parser, token)
@register.tag DCNL def get_comment_form(parser, token): DCNL  DCSP return CommentFormNode.handle_token(parser, token)
@register.tag DCNL def render_comment_form(parser, token): DCNL  DCSP return RenderCommentFormNode.handle_token(parser, token)
@register.simple_tag DCNL def comment_form_target(): DCNL  DCSP return comments.get_form_target()
@register.simple_tag DCNL def get_comment_permalink(comment, anchor_pattern=None): DCNL  DCSP if anchor_pattern: DCNL DCSP  DCSP return comment.get_absolute_url(anchor_pattern) DCNL DCSP return comment.get_absolute_url()
def get_level_tags(): DCNL  DCSP level_tags = constants.DEFAULT_TAGS.copy() DCNL DCSP level_tags.update(getattr(settings, 'MESSAGE_TAGS', {})) DCNL DCSP return level_tags
def messages(request): DCNL  DCSP return {'messages': get_messages(request)}
def get_storage(import_path): DCNL  DCSP try: DCNL DCSP  DCSP dot = import_path.rindex('.') DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ImproperlyConfigured(("%s DCSP isn't DCSP a DCSP Python DCSP path." % import_path)) DCNL DCSP (module, classname) = (import_path[:dot], import_path[(dot + 1):]) DCNL DCSP try: DCNL DCSP  DCSP mod = import_module(module) DCNL DCSP except ImportError as e: DCNL DCSP  DCSP raise ImproperlyConfigured(('Error DCSP importing DCSP module DCSP %s: DCSP "%s"' % (module, e))) DCNL DCSP try: DCNL DCSP  DCSP return getattr(mod, classname) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise ImproperlyConfigured(('Module DCSP "%s" DCSP does DCSP not DCSP define DCSP a DCSP "%s" DCSP class.' % (module, classname)))
def set_session_data(storage, messages): DCNL  DCSP storage.request.session[storage.session_key] = messages DCNL DCSP if hasattr(storage, '_loaded_data'): DCNL DCSP  DCSP del storage._loaded_data
def set_cookie_data(storage, messages, invalid=False, encode_empty=False): DCNL  DCSP encoded_data = storage._encode(messages, encode_empty=encode_empty) DCNL DCSP if invalid: DCNL DCSP  DCSP encoded_data = encoded_data[1:] DCNL DCSP storage.request.COOKIES = {CookieStorage.cookie_name: encoded_data} DCNL DCSP if hasattr(storage, '_loaded_data'): DCNL DCSP  DCSP del storage._loaded_data
def stored_cookie_messages_count(storage, response): DCNL  DCSP cookie = response.cookies.get(storage.cookie_name) DCNL DCSP if ((not cookie) or (cookie['max-age'] == 0)): DCNL DCSP  DCSP return 0 DCNL DCSP data = storage._decode(cookie.value) DCNL DCSP if (not data): DCNL DCSP  DCSP return 0 DCNL DCSP if (data[(-1)] == CookieStorage.not_finished): DCNL DCSP  DCSP data.pop() DCNL DCSP return len(data)
def add_level_messages(storage): DCNL  DCSP storage.add(constants.INFO, 'A DCSP generic DCSP info DCSP message') DCNL DCSP storage.add(29, 'Some DCSP custom DCSP level') DCNL DCSP storage.add(constants.DEBUG, 'A DCSP debugging DCSP message', extra_tags='extra-tag') DCNL DCSP storage.add(constants.WARNING, 'A DCSP warning') DCNL DCSP storage.add(constants.ERROR, 'An DCSP error') DCNL DCSP storage.add(constants.SUCCESS, 'This DCSP was DCSP a DCSP triumph.')
def add_message(request, level, message, extra_tags='', fail_silently=False): DCNL  DCSP if hasattr(request, '_messages'): DCNL DCSP  DCSP return request._messages.add(level, message, extra_tags) DCNL DCSP if (not fail_silently): DCNL DCSP  DCSP raise MessageFailure('You DCSP cannot DCSP add DCSP messages DCSP without DCSP installing DCSP django.contrib.messages.middleware.MessageMiddleware')
def get_messages(request): DCNL  DCSP if hasattr(request, '_messages'): DCNL DCSP  DCSP return request._messages DCNL DCSP else: DCNL DCSP  DCSP return []
def get_level(request): DCNL  DCSP if hasattr(request, '_messages'): DCNL DCSP  DCSP storage = request._messages DCNL DCSP else: DCNL DCSP  DCSP storage = default_storage(request) DCNL DCSP return storage.level
def set_level(request, level): DCNL  DCSP if (not hasattr(request, '_messages')): DCNL DCSP  DCSP return False DCNL DCSP request._messages.level = level DCNL DCSP return True
def debug(request, message, extra_tags='', fail_silently=False): DCNL  DCSP add_message(request, constants.DEBUG, message, extra_tags=extra_tags, fail_silently=fail_silently)
def info(request, message, extra_tags='', fail_silently=False): DCNL  DCSP add_message(request, constants.INFO, message, extra_tags=extra_tags, fail_silently=fail_silently)
def success(request, message, extra_tags='', fail_silently=False): DCNL  DCSP add_message(request, constants.SUCCESS, message, extra_tags=extra_tags, fail_silently=fail_silently)
def warning(request, message, extra_tags='', fail_silently=False): DCNL  DCSP add_message(request, constants.WARNING, message, extra_tags=extra_tags, fail_silently=fail_silently)
def error(request, message, extra_tags='', fail_silently=False): DCNL  DCSP add_message(request, constants.ERROR, message, extra_tags=extra_tags, fail_silently=fail_silently)
def normalize_name(name): DCNL  DCSP new = re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\1', name) DCNL DCSP return new.lower().strip('_')
def form_hmac(form): DCNL  DCSP data = [] DCNL DCSP for bf in form: DCNL DCSP  DCSP if (form.empty_permitted and (not form.has_changed())): DCNL DCSP  DCSP  DCSP value = (bf.data or u'') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = (bf.field.clean(bf.data) or u'') DCNL DCSP  DCSP if isinstance(value, six.string_types): DCNL DCSP  DCSP  DCSP value = value.strip() DCNL DCSP  DCSP data.append((bf.name, value)) DCNL DCSP pickled = pickle.dumps(data, pickle.HIGHEST_PROTOCOL) DCNL DCSP key_salt = u'django.contrib.formtools' DCNL DCSP return salted_hmac(key_salt, pickled).hexdigest()
def fromfile(file_h): DCNL  DCSP if isinstance(file_h, six.string_types): DCNL DCSP  DCSP with open(file_h, 'rb') as file_h: DCNL DCSP  DCSP  DCSP buf = file_h.read() DCNL DCSP else: DCNL DCSP  DCSP buf = file_h.read() DCNL DCSP if isinstance(buf, bytes): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP decoded = buf.decode() DCNL DCSP  DCSP  DCSP if (wkt_regex.match(decoded) or hex_regex.match(decoded)): DCNL DCSP  DCSP  DCSP  DCSP return GEOSGeometry(decoded) DCNL DCSP  DCSP except UnicodeDecodeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP return GEOSGeometry(buf) DCNL DCSP return GEOSGeometry(memoryview(buf))
def fromstr(string, **kwargs): DCNL  DCSP return GEOSGeometry(string, **kwargs)
def suite(): DCNL  DCSP s = TestSuite() DCNL DCSP for suite in test_suites: DCNL DCSP  DCSP s.addTest(suite) DCNL DCSP return s
def run(verbosity=1): DCNL  DCSP TextTestRunner(verbosity=verbosity).run(suite())
def check_cs_ptr(result, func, cargs): DCNL  DCSP if (not result): DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP checking DCSP Coordinate DCSP Sequence DCSP returned DCSP from DCSP GEOS DCSP C DCSP function DCSP "%s".' % func.__name__)) DCNL DCSP return result
def check_cs_op(result, func, cargs): DCNL  DCSP if (result == 0): DCNL DCSP  DCSP raise GEOSException('Could DCSP not DCSP set DCSP value DCSP on DCSP coordinate DCSP sequence') DCNL DCSP else: DCNL DCSP  DCSP return result
def check_cs_get(result, func, cargs): DCNL  DCSP check_cs_op(result, func, cargs) DCNL DCSP return last_arg_byref(cargs)
def cs_int(func): DCNL  DCSP func.argtypes = [CS_PTR, POINTER(c_uint)] DCNL DCSP func.restype = c_int DCNL DCSP func.errcheck = check_cs_get DCNL DCSP return func
def cs_operation(func, ordinate=False, get=False): DCNL  DCSP if get: DCNL DCSP  DCSP func.errcheck = check_cs_get DCNL DCSP  DCSP dbl_param = POINTER(c_double) DCNL DCSP else: DCNL DCSP  DCSP func.errcheck = check_cs_op DCNL DCSP  DCSP dbl_param = c_double DCNL DCSP if ordinate: DCNL DCSP  DCSP func.argtypes = [CS_PTR, c_uint, c_uint, dbl_param] DCNL DCSP else: DCNL DCSP  DCSP func.argtypes = [CS_PTR, c_uint, dbl_param] DCNL DCSP func.restype = c_int DCNL DCSP return func
def cs_output(func, argtypes): DCNL  DCSP func.argtypes = argtypes DCNL DCSP func.restype = CS_PTR DCNL DCSP func.errcheck = check_cs_ptr DCNL DCSP return func
def binary_predicate(func, *args): DCNL  DCSP argtypes = [GEOM_PTR, GEOM_PTR] DCNL DCSP if args: DCNL DCSP  DCSP argtypes += args DCNL DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_char DCNL DCSP func.errcheck = check_predicate DCNL DCSP return func
def unary_predicate(func): DCNL  DCSP func.argtypes = [GEOM_PTR] DCNL DCSP func.restype = c_char DCNL DCSP func.errcheck = check_predicate DCNL DCSP return func
def last_arg_byref(args): DCNL  DCSP return args[(-1)]._obj.value
def check_dbl(result, func, cargs): DCNL  DCSP if (result != 1): DCNL DCSP  DCSP return None DCNL DCSP return last_arg_byref(cargs)
def check_geom(result, func, cargs): DCNL  DCSP if (not result): DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP checking DCSP Geometry DCSP returned DCSP from DCSP GEOS DCSP C DCSP function DCSP "%s".' % func.__name__)) DCNL DCSP return result
def check_minus_one(result, func, cargs): DCNL  DCSP if (result == (-1)): DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP in DCSP GEOS DCSP C DCSP function DCSP "%s".' % func.__name__)) DCNL DCSP else: DCNL DCSP  DCSP return result
def check_predicate(result, func, cargs): DCNL  DCSP val = ord(result) DCNL DCSP if (val == 1): DCNL DCSP  DCSP return True DCNL DCSP elif (val == 0): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP on DCSP GEOS DCSP C DCSP predicate DCSP function DCSP "%s".' % func.__name__))
def check_sized_string(result, func, cargs): DCNL  DCSP if (not result): DCNL DCSP  DCSP raise GEOSException(('Invalid DCSP string DCSP pointer DCSP returned DCSP by DCSP GEOS DCSP C DCSP function DCSP "%s"' % func.__name__)) DCNL DCSP s = string_at(result, last_arg_byref(cargs)) DCNL DCSP free(result) DCNL DCSP return s
def check_string(result, func, cargs): DCNL  DCSP if (not result): DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP checking DCSP string DCSP return DCSP value DCSP in DCSP GEOS DCSP C DCSP function DCSP "%s".' % func.__name__)) DCNL DCSP s = string_at(result) DCNL DCSP free(result) DCNL DCSP return s
def check_zero(result, func, cargs): DCNL  DCSP if (result == 0): DCNL DCSP  DCSP raise GEOSException(('Error DCSP encountered DCSP in DCSP GEOS DCSP C DCSP function DCSP "%s".' % func.__name__)) DCNL DCSP else: DCNL DCSP  DCSP return result
def topology(func, *args, **kwargs): DCNL  DCSP argtypes = [GEOM_PTR] DCNL DCSP if args: DCNL DCSP  DCSP argtypes += args DCNL DCSP func.argtypes = argtypes DCNL DCSP func.restype = kwargs.get('restype', GEOM_PTR) DCNL DCSP func.errcheck = kwargs.get('errcheck', check_geom) DCNL DCSP return func
def bin_constructor(func): DCNL  DCSP func.argtypes = [c_char_p, c_size_t] DCNL DCSP func.restype = GEOM_PTR DCNL DCSP func.errcheck = check_geom DCNL DCSP return func
def bin_output(func): DCNL  DCSP func.argtypes = [GEOM_PTR, POINTER(c_size_t)] DCNL DCSP func.errcheck = check_sized_string DCNL DCSP func.restype = c_uchar_p DCNL DCSP return func
def geom_output(func, argtypes): DCNL  DCSP if argtypes: DCNL DCSP  DCSP func.argtypes = argtypes DCNL DCSP func.restype = GEOM_PTR DCNL DCSP func.errcheck = check_geom DCNL DCSP return func
def geom_index(func): DCNL  DCSP return geom_output(func, [GEOM_PTR, c_int])
def int_from_geom(func, zero=False): DCNL  DCSP func.argtypes = [GEOM_PTR] DCNL DCSP func.restype = c_int DCNL DCSP if zero: DCNL DCSP  DCSP func.errcheck = check_zero DCNL DCSP else: DCNL DCSP  DCSP func.errcheck = check_minus_one DCNL DCSP return func
def string_from_geom(func): DCNL  DCSP func.argtypes = [GEOM_PTR] DCNL DCSP func.restype = geos_char_p DCNL DCSP func.errcheck = check_string DCNL DCSP return func
def dbl_from_geom(func, num_geom=1): DCNL  DCSP argtypes = [GEOM_PTR for i in xrange(num_geom)] DCNL DCSP argtypes += [POINTER(c_double)] DCNL DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_int DCNL DCSP func.errcheck = check_dbl DCNL DCSP return func
def get_pointer_arr(n): DCNL  DCSP GeomArr = (GEOM_PTR * n) DCNL DCSP return GeomArr()
def geos_version_info(): DCNL  DCSP ver = geos_version().decode() DCNL DCSP m = version_regex.match(ver) DCNL DCSP if (not m): DCNL DCSP  DCSP raise GEOSException(('Could DCSP not DCSP parse DCSP version DCSP info DCSP string DCSP "%s"' % ver)) DCNL DCSP return dict(((key, m.group(key)) for key in ('version', 'release_candidate', 'capi_version', 'major', 'minor', 'subminor')))
def feed(request, url, feed_dict=None): DCNL  DCSP if (not feed_dict): DCNL DCSP  DCSP raise Http404(_(u'No DCSP feeds DCSP are DCSP registered.')) DCNL DCSP try: DCNL DCSP  DCSP (slug, param) = url.split(u'/', 1) DCNL DCSP except ValueError: DCNL DCSP  DCSP (slug, param) = (url, u'') DCNL DCSP try: DCNL DCSP  DCSP f = feed_dict[slug] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise Http404((_(u"Slug DCSP %r DCSP isn't DCSP registered.") % slug)) DCNL DCSP instance = f() DCNL DCSP instance.feed_url = (getattr(f, u'feed_url', None) or request.path) DCNL DCSP instance.title_template = (f.title_template or (u'feeds/%s_title.html' % slug)) DCNL DCSP instance.description_template = (f.description_template or (u'feeds/%s_description.html' % slug)) DCNL DCSP return instance(request)
def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None, database=None): DCNL  DCSP from django.db import connections, DEFAULT_DB_ALIAS DCNL DCSP if (not database): DCNL DCSP  DCSP database = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[database] DCNL DCSP if (not hasattr(connection.ops, 'spatial_version')): DCNL DCSP  DCSP raise Exception('The DCSP `add_srs_entry` DCSP utility DCSP only DCSP works DCSP with DCSP spatial DCSP backends.') DCNL DCSP if (connection.ops.oracle or connection.ops.mysql): DCNL DCSP  DCSP raise Exception('This DCSP utility DCSP does DCSP not DCSP support DCSP the DCSP Oracle DCSP or DCSP MySQL DCSP spatial DCSP backends.') DCNL DCSP SpatialRefSys = connection.ops.spatial_ref_sys() DCNL DCSP if (not isinstance(srs, SpatialReference)): DCNL DCSP  DCSP srs = SpatialReference(srs) DCNL DCSP if (srs.srid is None): DCNL DCSP  DCSP raise Exception('Spatial DCSP reference DCSP requires DCSP an DCSP SRID DCSP to DCSP be DCSP compatible DCSP with DCSP the DCSP spatial DCSP backend.') DCNL DCSP kwargs = {'srid': srs.srid, 'auth_name': auth_name, 'auth_srid': (auth_srid or srs.srid), 'proj4text': srs.proj4} DCNL DCSP if connection.ops.postgis: DCNL DCSP  DCSP kwargs['srtext'] = srs.wkt DCNL DCSP if connection.ops.spatialite: DCNL DCSP  DCSP kwargs['ref_sys_name'] = (ref_sys_name or srs.name) DCNL DCSP try: DCNL DCSP  DCSP sr = SpatialRefSys.objects.using(database).get(srid=srs.srid) DCNL DCSP except SpatialRefSys.DoesNotExist: DCNL DCSP  DCSP sr = SpatialRefSys.objects.using(database).create(**kwargs)
def precision_wkt(geom, prec): DCNL  DCSP if isinstance(prec, int): DCNL DCSP  DCSP num_fmt = ('%%.%df' % prec) DCNL DCSP elif isinstance(prec, six.string_types): DCNL DCSP  DCSP num_fmt = prec DCNL DCSP else: DCNL DCSP  DCSP raise TypeError DCNL DCSP coord_fmt = ' DCSP '.join([num_fmt, num_fmt]) DCNL DCSP def formatted_coords(coords): DCNL DCSP  DCSP return ','.join([(coord_fmt % c[:2]) for c in coords]) DCNL DCSP def formatted_poly(poly): DCNL DCSP  DCSP return ','.join([('(%s)' % formatted_coords(r)) for r in poly]) DCNL DCSP def formatted_geom(g): DCNL DCSP  DCSP gtype = str(g.geom_type).upper() DCNL DCSP  DCSP (yield ('%s(' % gtype)) DCNL DCSP  DCSP if (gtype == 'POINT'): DCNL DCSP  DCSP  DCSP (yield formatted_coords((g.coords,))) DCNL DCSP  DCSP elif (gtype in ('LINESTRING', 'LINEARRING')): DCNL DCSP  DCSP  DCSP (yield formatted_coords(g.coords)) DCNL DCSP  DCSP elif (gtype in ('POLYGON', 'MULTILINESTRING')): DCNL DCSP  DCSP  DCSP (yield formatted_poly(g)) DCNL DCSP  DCSP elif (gtype == 'MULTIPOINT'): DCNL DCSP  DCSP  DCSP (yield formatted_coords(g.coords)) DCNL DCSP  DCSP elif (gtype == 'MULTIPOLYGON'): DCNL DCSP  DCSP  DCSP (yield ','.join([('(%s)' % formatted_poly(p)) for p in g])) DCNL DCSP  DCSP elif (gtype == 'GEOMETRYCOLLECTION'): DCNL DCSP  DCSP  DCSP (yield ','.join([''.join([wkt for wkt in formatted_geom(child)]) for child in g])) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError DCNL DCSP  DCSP (yield ')') DCNL DCSP return ''.join([wkt for wkt in formatted_geom(geom)])
def ogrinfo(data_source, num_features=10): DCNL  DCSP if isinstance(data_source, str): DCNL DCSP  DCSP data_source = DataSource(data_source) DCNL DCSP elif isinstance(data_source, DataSource): DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP raise Exception('Data DCSP source DCSP parameter DCSP must DCSP be DCSP a DCSP string DCSP or DCSP a DCSP DataSource DCSP object.') DCNL DCSP for (i, layer) in enumerate(data_source): DCNL DCSP  DCSP print ('data DCSP source DCSP : DCSP %s' % data_source.name) DCNL DCSP  DCSP print ('==== DCSP layer DCSP %s' % i) DCNL DCSP  DCSP print (' DCSP  DCSP shape DCSP type: DCSP %s' % GEO_CLASSES[layer.geom_type.num].__name__) DCNL DCSP  DCSP print (' DCSP  DCSP # DCSP features: DCSP %s' % len(layer)) DCNL DCSP  DCSP print (' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP srs: DCSP %s' % layer.srs) DCNL DCSP  DCSP extent_tup = layer.extent.tuple DCNL DCSP  DCSP print (' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP extent: DCSP %s DCSP - DCSP %s' % (extent_tup[0:2], extent_tup[2:4])) DCNL DCSP  DCSP print ('Displaying DCSP the DCSP first DCSP %s DCSP features DCSP ====' % num_features) DCNL DCSP  DCSP width = max(*map(len, layer.fields)) DCNL DCSP  DCSP fmt = (' DCSP %%%ss: DCSP %%s' % width) DCNL DCSP  DCSP for (j, feature) in enumerate(layer[:num_features]): DCNL DCSP  DCSP  DCSP print ('=== DCSP Feature DCSP %s' % j) DCNL DCSP  DCSP  DCSP for fld_name in layer.fields: DCNL DCSP  DCSP  DCSP  DCSP type_name = feature[fld_name].type_name DCNL DCSP  DCSP  DCSP  DCSP output = (fmt % (fld_name, type_name)) DCNL DCSP  DCSP  DCSP  DCSP val = feature.get(fld_name) DCNL DCSP  DCSP  DCSP  DCSP if val: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(val, str): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP val_fmt = ' DCSP ("%s")' DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP val_fmt = ' DCSP (%s)' DCNL DCSP  DCSP  DCSP  DCSP  DCSP output += (val_fmt % val) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP output += ' DCSP (None)' DCNL DCSP  DCSP  DCSP  DCSP print output
def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False): DCNL  DCSP if isinstance(data_source, six.string_types): DCNL DCSP  DCSP data_source = DataSource(data_source) DCNL DCSP elif isinstance(data_source, DataSource): DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP raise TypeError('Data DCSP source DCSP parameter DCSP must DCSP be DCSP a DCSP string DCSP or DCSP a DCSP DataSource DCSP object.') DCNL DCSP _mapping = {} DCNL DCSP for field in data_source[layer_key].fields: DCNL DCSP  DCSP mfield = field.lower() DCNL DCSP  DCSP if (mfield[(-1):] == '_'): DCNL DCSP  DCSP  DCSP mfield += 'field' DCNL DCSP  DCSP _mapping[mfield] = field DCNL DCSP gtype = data_source[layer_key].geom_type DCNL DCSP if (multi_geom and (gtype.num in (1, 2, 3))): DCNL DCSP  DCSP prefix = 'MULTI' DCNL DCSP else: DCNL DCSP  DCSP prefix = '' DCNL DCSP _mapping[geom_name] = (prefix + str(gtype).upper()) DCNL DCSP return _mapping
def ogrinspect(*args, **kwargs): DCNL  DCSP return '\n'.join((s for s in _ogrinspect(*args, **kwargs)))
def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None, multi_geom=False, name_field=None, imports=True, decimal=False, blank=False, null=False): DCNL  DCSP if isinstance(data_source, six.string_types): DCNL DCSP  DCSP data_source = DataSource(data_source) DCNL DCSP elif isinstance(data_source, DataSource): DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP raise TypeError('Data DCSP source DCSP parameter DCSP must DCSP be DCSP a DCSP string DCSP or DCSP a DCSP DataSource DCSP object.') DCNL DCSP layer = data_source[layer_key] DCNL DCSP ogr_fields = layer.fields DCNL DCSP def process_kwarg(kwarg): DCNL DCSP  DCSP if isinstance(kwarg, (list, tuple)): DCNL DCSP  DCSP  DCSP return [s.lower() for s in kwarg] DCNL DCSP  DCSP elif kwarg: DCNL DCSP  DCSP  DCSP return [s.lower() for s in ogr_fields] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return [] DCNL DCSP null_fields = process_kwarg(null) DCNL DCSP blank_fields = process_kwarg(blank) DCNL DCSP decimal_fields = process_kwarg(decimal) DCNL DCSP def get_kwargs_str(field_name): DCNL DCSP  DCSP kwlist = [] DCNL DCSP  DCSP if (field_name.lower() in null_fields): DCNL DCSP  DCSP  DCSP kwlist.append('null=True') DCNL DCSP  DCSP if (field_name.lower() in blank_fields): DCNL DCSP  DCSP  DCSP kwlist.append('blank=True') DCNL DCSP  DCSP if kwlist: DCNL DCSP  DCSP  DCSP return (', DCSP ' + ', DCSP '.join(kwlist)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return '' DCNL DCSP if imports: DCNL DCSP  DCSP (yield '# DCSP This DCSP is DCSP an DCSP auto-generated DCSP Django DCSP model DCSP module DCSP created DCSP by DCSP ogrinspect.') DCNL DCSP  DCSP (yield 'from DCSP django.contrib.gis.db DCSP import DCSP models') DCNL DCSP  DCSP (yield '') DCNL DCSP (yield ('class DCSP %s(models.Model):' % model_name)) DCNL DCSP for (field_name, width, precision, field_type) in zip(ogr_fields, layer.field_widths, layer.field_precisions, layer.field_types): DCNL DCSP  DCSP mfield = field_name.lower() DCNL DCSP  DCSP if (mfield[(-1):] == '_'): DCNL DCSP  DCSP  DCSP mfield += 'field' DCNL DCSP  DCSP kwargs_str = get_kwargs_str(field_name) DCNL DCSP  DCSP if (field_type is OFTReal): DCNL DCSP  DCSP  DCSP if (field_name.lower() in decimal_fields): DCNL DCSP  DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.DecimalField(max_digits=%d, DCSP decimal_places=%d%s)' % (mfield, width, precision, kwargs_str))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.FloatField(%s)' % (mfield, kwargs_str[2:]))) DCNL DCSP  DCSP elif (field_type is OFTInteger): DCNL DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.IntegerField(%s)' % (mfield, kwargs_str[2:]))) DCNL DCSP  DCSP elif (field_type is OFTString): DCNL DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.CharField(max_length=%s%s)' % (mfield, width, kwargs_str))) DCNL DCSP  DCSP elif (field_type is OFTDate): DCNL DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.DateField(%s)' % (mfield, kwargs_str[2:]))) DCNL DCSP  DCSP elif (field_type is OFTDateTime): DCNL DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.DateTimeField(%s)' % (mfield, kwargs_str[2:]))) DCNL DCSP  DCSP elif (field_type is OFTTime): DCNL DCSP  DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.TimeField(%s)' % (mfield, kwargs_str[2:]))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError(('Unknown DCSP field DCSP type DCSP %s DCSP in DCSP %s' % (field_type, mfield))) DCNL DCSP gtype = layer.geom_type DCNL DCSP if (multi_geom and (gtype.num in (1, 2, 3))): DCNL DCSP  DCSP geom_field = ('Multi%s' % gtype.django) DCNL DCSP else: DCNL DCSP  DCSP geom_field = gtype.django DCNL DCSP if (srid is None): DCNL DCSP  DCSP if (layer.srs is None): DCNL DCSP  DCSP  DCSP srid_str = 'srid=-1' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP srid = layer.srs.srid DCNL DCSP  DCSP  DCSP if (srid is None): DCNL DCSP  DCSP  DCSP  DCSP srid_str = 'srid=-1' DCNL DCSP  DCSP  DCSP elif (srid == 4326): DCNL DCSP  DCSP  DCSP  DCSP srid_str = '' DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP srid_str = ('srid=%s' % srid) DCNL DCSP else: DCNL DCSP  DCSP srid_str = ('srid=%s' % srid) DCNL DCSP (yield (' DCSP  DCSP  DCSP  DCSP %s DCSP = DCSP models.%s(%s)' % (geom_name, geom_field, srid_str))) DCNL DCSP (yield ' DCSP  DCSP  DCSP  DCSP objects DCSP = DCSP models.GeoManager()') DCNL DCSP if name_field: DCNL DCSP  DCSP (yield '') DCNL DCSP  DCSP (yield (' DCSP  DCSP  DCSP  DCSP def DCSP __str__(self): DCSP return DCSP self.%s' % name_field))
def get_srid_info(srid, connection): DCNL  DCSP global _srid_cache DCNL DCSP try: DCNL DCSP  DCSP SpatialRefSys = connection.ops.spatial_ref_sys() DCNL DCSP except NotImplementedError: DCNL DCSP  DCSP return (None, None, None) DCNL DCSP if (not (connection.alias in _srid_cache)): DCNL DCSP  DCSP _srid_cache[connection.alias] = {} DCNL DCSP if (not (srid in _srid_cache[connection.alias])): DCNL DCSP  DCSP sr = SpatialRefSys.objects.using(connection.alias).get(srid=srid) DCNL DCSP  DCSP (units, units_name) = sr.units DCNL DCSP  DCSP spheroid = SpatialRefSys.get_spheroid(sr.wkt) DCNL DCSP  DCSP _srid_cache[connection.alias][srid] = (units, units_name, spheroid) DCNL DCSP return _srid_cache[connection.alias][srid]
def get_dist_ops(operator): DCNL  DCSP return (SpatiaLiteDistance(operator),)
def check_err(code): DCNL  DCSP if (code == OGRERR_NONE): DCNL DCSP  DCSP return DCNL DCSP elif (code in OGRERR_DICT): DCNL DCSP  DCSP (e, msg) = OGRERR_DICT[code] DCNL DCSP  DCSP raise e(msg) DCNL DCSP else: DCNL DCSP  DCSP raise OGRException(('Unknown DCSP error DCSP code: DCSP "%s"' % code))
def std_call(func): DCNL  DCSP if (os.name == u'nt'): DCNL DCSP  DCSP return lwingdal[func] DCNL DCSP else: DCNL DCSP  DCSP return lgdal[func]
def gdal_version(): DCNL  DCSP return _version_info('RELEASE_NAME')
def gdal_full_version(): DCNL  DCSP return _version_info(u'')
def suite(): DCNL  DCSP s = TestSuite() DCNL DCSP for test_suite in test_suites: DCNL DCSP  DCSP s.addTest(test_suite) DCNL DCSP return s
def run(verbosity=1): DCNL  DCSP TextTestRunner(verbosity=verbosity).run(suite())
def srs_double(f): DCNL  DCSP return double_output(f, [c_void_p, POINTER(c_int)], errcheck=True)
def units_func(f): DCNL  DCSP return double_output(f, [c_void_p, POINTER(c_char_p)], strarg=True)
def arg_byref(args, offset=(-1)): DCNL  DCSP return args[offset]._obj.value
def ptr_byref(args, offset=(-1)): DCNL  DCSP return args[offset]._obj
def check_bool(result, func, cargs): DCNL  DCSP if bool(result): DCNL DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def check_const_string(result, func, cargs, offset=None): DCNL  DCSP if offset: DCNL DCSP  DCSP check_err(result) DCNL DCSP  DCSP ptr = ptr_byref(cargs, offset) DCNL DCSP  DCSP return ptr.value DCNL DCSP else: DCNL DCSP  DCSP return result
def check_string(result, func, cargs, offset=(-1), str_result=False): DCNL  DCSP if str_result: DCNL DCSP  DCSP ptr = result DCNL DCSP  DCSP if (not ptr): DCNL DCSP  DCSP  DCSP s = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP s = string_at(result) DCNL DCSP else: DCNL DCSP  DCSP check_err(result) DCNL DCSP  DCSP ptr = ptr_byref(cargs, offset) DCNL DCSP  DCSP s = ptr.value DCNL DCSP if ptr: DCNL DCSP  DCSP lgdal.VSIFree(ptr) DCNL DCSP return s
def check_envelope(result, func, cargs, offset=(-1)): DCNL  DCSP env = ptr_byref(cargs, offset) DCNL DCSP return env
def check_geom(result, func, cargs): DCNL  DCSP if isinstance(result, six.integer_types): DCNL DCSP  DCSP result = c_void_p(result) DCNL DCSP if (not result): DCNL DCSP  DCSP raise OGRException(('Invalid DCSP geometry DCSP pointer DCSP returned DCSP from DCSP "%s".' % func.__name__)) DCNL DCSP return result
def check_geom_offset(result, func, cargs, offset=(-1)): DCNL  DCSP check_err(result) DCNL DCSP geom = ptr_byref(cargs, offset=offset) DCNL DCSP return check_geom(geom, func, cargs)
def check_arg_errcode(result, func, cargs): DCNL  DCSP check_err(arg_byref(cargs)) DCNL DCSP return result
def check_errcode(result, func, cargs): DCNL  DCSP check_err(result) DCNL DCSP return
def check_pointer(result, func, cargs): DCNL  DCSP if isinstance(result, six.integer_types): DCNL DCSP  DCSP result = c_void_p(result) DCNL DCSP if bool(result): DCNL DCSP  DCSP return result DCNL DCSP else: DCNL DCSP  DCSP raise OGRException(('Invalid DCSP pointer DCSP returned DCSP from DCSP "%s"' % func.__name__))
def check_str_arg(result, func, cargs): DCNL  DCSP dbl = result DCNL DCSP ptr = cargs[(-1)]._obj DCNL DCSP return (dbl, ptr.value.decode())
def double_output(func, argtypes, errcheck=False, strarg=False): DCNL  DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_double DCNL DCSP if errcheck: DCNL DCSP  DCSP func.errcheck = check_arg_errcode DCNL DCSP if strarg: DCNL DCSP  DCSP func.errcheck = check_str_arg DCNL DCSP return func
def geom_output(func, argtypes, offset=None): DCNL  DCSP func.argtypes = argtypes DCNL DCSP if (not offset): DCNL DCSP  DCSP func.restype = c_void_p DCNL DCSP  DCSP func.errcheck = check_geom DCNL DCSP else: DCNL DCSP  DCSP func.restype = c_int DCNL DCSP  DCSP def geomerrcheck(result, func, cargs): DCNL DCSP  DCSP  DCSP return check_geom_offset(result, func, cargs, offset) DCNL DCSP  DCSP func.errcheck = geomerrcheck DCNL DCSP return func
def int_output(func, argtypes): DCNL  DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_int DCNL DCSP return func
def srs_output(func, argtypes): DCNL  DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_void_p DCNL DCSP func.errcheck = check_srs DCNL DCSP return func
def string_output(func, argtypes, offset=(-1), str_result=False, decoding=None): DCNL  DCSP func.argtypes = argtypes DCNL DCSP if str_result: DCNL DCSP  DCSP func.restype = gdal_char_p DCNL DCSP else: DCNL DCSP  DCSP func.restype = c_int DCNL DCSP def _check_str(result, func, cargs): DCNL DCSP  DCSP res = check_string(result, func, cargs, offset=offset, str_result=str_result) DCNL DCSP  DCSP if (res and decoding): DCNL DCSP  DCSP  DCSP res = res.decode(decoding) DCNL DCSP  DCSP return res DCNL DCSP func.errcheck = _check_str DCNL DCSP return func
def void_output(func, argtypes, errcheck=True): DCNL  DCSP if argtypes: DCNL DCSP  DCSP func.argtypes = argtypes DCNL DCSP if errcheck: DCNL DCSP  DCSP func.restype = c_int DCNL DCSP  DCSP func.errcheck = check_errcode DCNL DCSP else: DCNL DCSP  DCSP func.restype = None DCNL DCSP return func
def voidptr_output(func, argtypes): DCNL  DCSP func.argtypes = argtypes DCNL DCSP func.restype = c_void_p DCNL DCSP func.errcheck = check_pointer DCNL DCSP return func
def env_func(f, argtypes): DCNL  DCSP f.argtypes = argtypes DCNL DCSP f.restype = None DCNL DCSP f.errcheck = check_envelope DCNL DCSP return f
def pnt_func(f): DCNL  DCSP return double_output(f, [c_void_p, c_int])
def tuplize(seq): DCNL  DCSP if isinstance(seq, (list, tuple)): DCNL DCSP  DCSP return tuple([tuplize(i) for i in seq]) DCNL DCSP return seq
def strconvert(d): DCNL  DCSP return dict([(str(k), v) for (k, v) in six.iteritems(d)])
def compress_kml(kml): DCNL  DCSP kmz = BytesIO() DCNL DCSP zf = zipfile.ZipFile(kmz, 'a', zipfile.ZIP_DEFLATED) DCNL DCSP zf.writestr('doc.kml', kml.encode(settings.DEFAULT_CHARSET)) DCNL DCSP zf.close() DCNL DCSP kmz.seek(0) DCNL DCSP return kmz.read()
def render_to_kml(*args, **kwargs): DCNL  DCSP return HttpResponse(loader.render_to_string(*args, **kwargs), content_type='application/vnd.google-earth.kml+xml')
def render_to_kmz(*args, **kwargs): DCNL  DCSP return HttpResponse(compress_kml(loader.render_to_string(*args, **kwargs)), content_type='application/vnd.google-earth.kmz')
def render_to_text(*args, **kwargs): DCNL  DCSP return HttpResponse(loader.render_to_string(*args, **kwargs), content_type='text/plain')
def layer_option(option, opt, value, parser): DCNL  DCSP try: DCNL DCSP  DCSP dest = int(value) DCNL DCSP except ValueError: DCNL DCSP  DCSP dest = value DCNL DCSP setattr(parser.values, option.dest, dest)
def list_option(option, opt, value, parser): DCNL  DCSP if (value.lower() == 'true'): DCNL DCSP  DCSP dest = True DCNL DCSP else: DCNL DCSP  DCSP dest = [s for s in value.split(',')] DCNL DCSP setattr(parser.values, option.dest, dest)
def no_backend(test_func, backend): DCNL  DCSP if (settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[(-1)] == backend): DCNL DCSP  DCSP return pass_test DCNL DCSP else: DCNL DCSP  DCSP return test_func
def geo_apps(namespace=True, runtests=False): DCNL  DCSP from django.db import connection DCNL DCSP from django.contrib.gis.geos import GEOS_PREPARE DCNL DCSP from django.contrib.gis.gdal import HAS_GDAL DCNL DCSP apps = ['geoapp', 'relatedapp'] DCNL DCSP if (not connection.ops.mysql): DCNL DCSP  DCSP apps.append('distapp') DCNL DCSP if (connection.ops.postgis and connection.ops.geography): DCNL DCSP  DCSP apps.append('geogapp') DCNL DCSP if HAS_GDAL: DCNL DCSP  DCSP apps.extend(['geoadmin', 'layermap', 'inspectapp']) DCNL DCSP  DCSP if (connection.ops.postgis and GEOS_PREPARE): DCNL DCSP  DCSP  DCSP apps.append('geo3d') DCNL DCSP if runtests: DCNL DCSP  DCSP return [('django.contrib.gis.tests', app) for app in apps] DCNL DCSP elif namespace: DCNL DCSP  DCSP return [('django.contrib.gis.tests.%s' % app) for app in apps] DCNL DCSP else: DCNL DCSP  DCSP return apps
def geodjango_suite(apps=True): DCNL  DCSP import sys DCNL DCSP from django.db.models import get_app DCNL DCSP suite = unittest.TestSuite() DCNL DCSP from django.contrib.gis.geos import tests as geos_tests DCNL DCSP suite.addTest(geos_tests.suite()) DCNL DCSP from django.contrib.gis.gdal import HAS_GDAL DCNL DCSP if HAS_GDAL: DCNL DCSP  DCSP from django.contrib.gis.gdal import tests as gdal_tests DCNL DCSP  DCSP suite.addTest(gdal_tests.suite()) DCNL DCSP else: DCNL DCSP  DCSP sys.stderr.write('GDAL DCSP not DCSP available DCSP - DCSP no DCSP tests DCSP requiring DCSP GDAL DCSP will DCSP be DCSP run.\n') DCNL DCSP from django.contrib.gis.geoip import HAS_GEOIP DCNL DCSP if (HAS_GEOIP and hasattr(settings, 'GEOIP_PATH')): DCNL DCSP  DCSP from django.contrib.gis.geoip import tests as geoip_tests DCNL DCSP  DCSP suite.addTest(geoip_tests.suite()) DCNL DCSP if apps: DCNL DCSP  DCSP for app_name in geo_apps(namespace=False): DCNL DCSP  DCSP  DCSP suite.addTest(build_suite(get_app(app_name))) DCNL DCSP return suite
def index(request, sitemaps): DCNL  DCSP current_site = get_current_site(request) DCNL DCSP sites = [] DCNL DCSP protocol = ((request.is_secure() and u'https') or u'http') DCNL DCSP for (section, site) in sitemaps.items(): DCNL DCSP  DCSP if callable(site): DCNL DCSP  DCSP  DCSP pages = site().paginator.num_pages DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pages = site.paginator.num_pages DCNL DCSP  DCSP sitemap_url = urlresolvers.reverse(u'django.contrib.gis.sitemaps.views.sitemap', kwargs={u'section': section}) DCNL DCSP  DCSP sites.append((u'%s://%s%s' % (protocol, current_site.domain, sitemap_url))) DCNL DCSP  DCSP if (pages > 1): DCNL DCSP  DCSP  DCSP for page in range(2, (pages + 1)): DCNL DCSP  DCSP  DCSP  DCSP sites.append((u'%s://%s%s?p=%s' % (protocol, current_site.domain, sitemap_url, page))) DCNL DCSP xml = loader.render_to_string(u'sitemap_index.xml', {u'sitemaps': sites}) DCNL DCSP return HttpResponse(xml, content_type=u'application/xml')
def sitemap(request, sitemaps, section=None): DCNL  DCSP (maps, urls) = ([], []) DCNL DCSP if (section is not None): DCNL DCSP  DCSP if (section not in sitemaps): DCNL DCSP  DCSP  DCSP raise Http404((_(u'No DCSP sitemap DCSP available DCSP for DCSP section: DCSP %r') % section)) DCNL DCSP  DCSP maps.append(sitemaps[section]) DCNL DCSP else: DCNL DCSP  DCSP maps = list(six.itervalues(sitemaps)) DCNL DCSP page = request.GET.get(u'p', 1) DCNL DCSP current_site = get_current_site(request) DCNL DCSP for site in maps: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if callable(site): DCNL DCSP  DCSP  DCSP  DCSP urls.extend(site().get_urls(page=page, site=current_site)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP urls.extend(site.get_urls(page=page, site=current_site)) DCNL DCSP  DCSP except EmptyPage: DCNL DCSP  DCSP  DCSP raise Http404((_(u'Page DCSP %s DCSP empty') % page)) DCNL DCSP  DCSP except PageNotAnInteger: DCNL DCSP  DCSP  DCSP raise Http404((_(u"No DCSP page DCSP '%s'") % page)) DCNL DCSP xml = loader.render_to_string(u'gis/sitemaps/geo_sitemap.xml', {u'urlset': urls}) DCNL DCSP return HttpResponse(xml, content_type=u'application/xml')
def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS): DCNL  DCSP placemarks = [] DCNL DCSP klass = get_model(label, model) DCNL DCSP if (not klass): DCNL DCSP  DCSP raise Http404((u'You DCSP must DCSP supply DCSP a DCSP valid DCSP app DCSP label DCSP and DCSP module DCSP name. DCSP  DCSP Got DCSP "%s.%s"' % (label, model))) DCNL DCSP if field_name: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP info = klass._meta.get_field_by_name(field_name) DCNL DCSP  DCSP  DCSP if (not isinstance(info[0], GeometryField)): DCNL DCSP  DCSP  DCSP  DCSP raise Exception DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise Http404(u'Invalid DCSP geometry DCSP field.') DCNL DCSP connection = connections[using] DCNL DCSP if connection.ops.postgis: DCNL DCSP  DCSP placemarks = klass._default_manager.using(using).kml(field_name=field_name) DCNL DCSP else: DCNL DCSP  DCSP placemarks = [] DCNL DCSP  DCSP if connection.ops.oracle: DCNL DCSP  DCSP  DCSP qs = klass._default_manager.using(using).transform(4326, field_name=field_name) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP qs = klass._default_manager.using(using).all() DCNL DCSP  DCSP for mod in qs: DCNL DCSP  DCSP  DCSP mod.kml = getattr(mod, field_name).kml DCNL DCSP  DCSP  DCSP placemarks.append(mod) DCNL DCSP if compress: DCNL DCSP  DCSP render = render_to_kmz DCNL DCSP else: DCNL DCSP  DCSP render = render_to_kml DCNL DCSP return render(u'gis/kml/placemarks.kml', {u'places': placemarks})
def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS): DCNL  DCSP return kml(request, label, model, field_name, compress=True, using=using)
def validate(cls, model): DCNL  DCSP models.get_apps() DCNL DCSP opts = model._meta DCNL DCSP validate_base(cls, model) DCNL DCSP if hasattr(cls, 'list_display'): DCNL DCSP  DCSP check_isseq(cls, 'list_display', cls.list_display) DCNL DCSP  DCSP for (idx, field) in enumerate(cls.list_display): DCNL DCSP  DCSP  DCSP if (not callable(field)): DCNL DCSP  DCSP  DCSP  DCSP if (not hasattr(cls, field)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not hasattr(model, field)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP opts.get_field(field) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except models.FieldDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(('%s.list_display[%d], DCSP %r DCSP is DCSP not DCSP a DCSP callable DCSP or DCSP an DCSP attribute DCSP of DCSP %r DCSP or DCSP found DCSP in DCSP the DCSP model DCSP %r.' % (cls.__name__, idx, field, cls.__name__, model._meta.object_name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP f = fetch_attr(cls, model, opts, ('list_display[%d]' % idx), field) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(f, models.ManyToManyField): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_display[%d]', DCSP '%s' DCSP is DCSP a DCSP ManyToManyField DCSP which DCSP is DCSP not DCSP supported." % (cls.__name__, idx, field))) DCNL DCSP if hasattr(cls, 'list_display_links'): DCNL DCSP  DCSP check_isseq(cls, 'list_display_links', cls.list_display_links) DCNL DCSP  DCSP for (idx, field) in enumerate(cls.list_display_links): DCNL DCSP  DCSP  DCSP if (field not in cls.list_display): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_display_links[%d]' DCSP refers DCSP to DCSP '%s' DCSP which DCSP is DCSP not DCSP defined DCSP in DCSP 'list_display'." % (cls.__name__, idx, field))) DCNL DCSP if hasattr(cls, 'list_filter'): DCNL DCSP  DCSP check_isseq(cls, 'list_filter', cls.list_filter) DCNL DCSP  DCSP for (idx, item) in enumerate(cls.list_filter): DCNL DCSP  DCSP  DCSP if (callable(item) and (not isinstance(item, models.Field))): DCNL DCSP  DCSP  DCSP  DCSP if (not issubclass(item, ListFilter)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_filter[%d]' DCSP is DCSP '%s' DCSP which DCSP is DCSP not DCSP a DCSP descendant DCSP of DCSP ListFilter." % (cls.__name__, idx, item.__name__))) DCNL DCSP  DCSP  DCSP  DCSP if issubclass(item, FieldListFilter): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_filter[%d]' DCSP is DCSP '%s' DCSP which DCSP is DCSP of DCSP type DCSP FieldListFilter DCSP but DCSP is DCSP not DCSP associated DCSP with DCSP a DCSP field DCSP name." % (cls.__name__, idx, item.__name__))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if isinstance(item, (tuple, list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (field, list_filter_class) = item DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not issubclass(list_filter_class, FieldListFilter)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_filter[%d][1]' DCSP is DCSP '%s' DCSP which DCSP is DCSP not DCSP of DCSP type DCSP FieldListFilter." % (cls.__name__, idx, list_filter_class.__name__))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP field = item DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP get_fields_from_path(model, field) DCNL DCSP  DCSP  DCSP  DCSP except (NotRelationField, FieldDoesNotExist): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_filter[%d]' DCSP refers DCSP to DCSP '%s' DCSP which DCSP does DCSP not DCSP refer DCSP to DCSP a DCSP Field." % (cls.__name__, idx, field))) DCNL DCSP if (hasattr(cls, 'list_per_page') and (not isinstance(cls.list_per_page, int))): DCNL DCSP  DCSP raise ImproperlyConfigured(("'%s.list_per_page' DCSP should DCSP be DCSP a DCSP integer." % cls.__name__)) DCNL DCSP if (hasattr(cls, 'list_max_show_all') and (not isinstance(cls.list_max_show_all, int))): DCNL DCSP  DCSP raise ImproperlyConfigured(("'%s.list_max_show_all' DCSP should DCSP be DCSP an DCSP integer." % cls.__name__)) DCNL DCSP if (hasattr(cls, 'list_editable') and cls.list_editable): DCNL DCSP  DCSP check_isseq(cls, 'list_editable', cls.list_editable) DCNL DCSP  DCSP for (idx, field_name) in enumerate(cls.list_editable): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP field = opts.get_field_by_name(field_name)[0] DCNL DCSP  DCSP  DCSP except models.FieldDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_editable[%d]' DCSP refers DCSP to DCSP a DCSP field, DCSP '%s', DCSP not DCSP defined DCSP on DCSP %s.%s." % (cls.__name__, idx, field_name, model._meta.app_label, model.__name__))) DCNL DCSP  DCSP  DCSP if (field_name not in cls.list_display): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_editable[%d]' DCSP refers DCSP to DCSP '%s' DCSP which DCSP is DCSP not DCSP defined DCSP in DCSP 'list_display'." % (cls.__name__, idx, field_name))) DCNL DCSP  DCSP  DCSP if (field_name in cls.list_display_links): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s' DCSP cannot DCSP be DCSP in DCSP both DCSP '%s.list_editable' DCSP and DCSP '%s.list_display_links'" % (field_name, cls.__name__, cls.__name__))) DCNL DCSP  DCSP  DCSP if ((not cls.list_display_links) and (cls.list_display[0] in cls.list_editable)): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_editable[%d]' DCSP refers DCSP to DCSP the DCSP first DCSP field DCSP in DCSP list_display, DCSP '%s', DCSP which DCSP can't DCSP be DCSP used DCSP unless DCSP list_display_links DCSP is DCSP set." % (cls.__name__, idx, cls.list_display[0]))) DCNL DCSP  DCSP  DCSP if (not field.editable): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.list_editable[%d]' DCSP refers DCSP to DCSP a DCSP field, DCSP '%s', DCSP which DCSP isn't DCSP editable DCSP through DCSP the DCSP admin." % (cls.__name__, idx, field_name))) DCNL DCSP if hasattr(cls, 'search_fields'): DCNL DCSP  DCSP check_isseq(cls, 'search_fields', cls.search_fields) DCNL DCSP if cls.date_hierarchy: DCNL DCSP  DCSP f = get_field(cls, model, opts, 'date_hierarchy', cls.date_hierarchy) DCNL DCSP  DCSP if (not isinstance(f, (models.DateField, models.DateTimeField))): DCNL DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.date_hierarchy DCSP is DCSP neither DCSP an DCSP instance DCSP of DCSP DateField DCSP nor DCSP DateTimeField." % cls.__name__)) DCNL DCSP if cls.ordering: DCNL DCSP  DCSP check_isseq(cls, 'ordering', cls.ordering) DCNL DCSP  DCSP for (idx, field) in enumerate(cls.ordering): DCNL DCSP  DCSP  DCSP if ((field == '?') and (len(cls.ordering) != 1)): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.ordering' DCSP has DCSP the DCSP random DCSP ordering DCSP marker DCSP '?', DCSP but DCSP contains DCSP other DCSP fields DCSP as DCSP well. DCSP Please DCSP either DCSP remove DCSP '?' DCSP or DCSP the DCSP other DCSP fields." % cls.__name__)) DCNL DCSP  DCSP  DCSP if (field == '?'): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if field.startswith('-'): DCNL DCSP  DCSP  DCSP  DCSP field = field[1:] DCNL DCSP  DCSP  DCSP if ('__' in field): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP get_field(cls, model, opts, ('ordering[%d]' % idx), field) DCNL DCSP if hasattr(cls, 'readonly_fields'): DCNL DCSP  DCSP check_readonly_fields(cls, model, opts) DCNL DCSP for attr in ('list_select_related', 'save_as', 'save_on_top'): DCNL DCSP  DCSP if (not isinstance(getattr(cls, attr), bool)): DCNL DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.%s' DCSP should DCSP be DCSP a DCSP boolean." % (cls.__name__, attr))) DCNL DCSP if hasattr(cls, 'inlines'): DCNL DCSP  DCSP check_isseq(cls, 'inlines', cls.inlines) DCNL DCSP  DCSP for (idx, inline) in enumerate(cls.inlines): DCNL DCSP  DCSP  DCSP if (not issubclass(inline, BaseModelAdmin)): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.inlines[%d]' DCSP does DCSP not DCSP inherit DCSP from DCSP BaseModelAdmin." % (cls.__name__, idx))) DCNL DCSP  DCSP  DCSP if (not inline.model): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'model' DCSP is DCSP a DCSP required DCSP attribute DCSP of DCSP '%s.inlines[%d]'." % (cls.__name__, idx))) DCNL DCSP  DCSP  DCSP if (not issubclass(inline.model, models.Model)): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.inlines[%d].model' DCSP does DCSP not DCSP inherit DCSP from DCSP models.Model." % (cls.__name__, idx))) DCNL DCSP  DCSP  DCSP validate_base(inline, inline.model) DCNL DCSP  DCSP  DCSP validate_inline(inline, cls, model)
def validate_fields_spec(cls, model, opts, flds, label): DCNL  DCSP for fields in flds: DCNL DCSP  DCSP if (type(fields) != tuple): DCNL DCSP  DCSP  DCSP fields = (fields,) DCNL DCSP  DCSP for field in fields: DCNL DCSP  DCSP  DCSP if (field in cls.readonly_fields): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP check_formfield(cls, model, opts, label, field) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP f = opts.get_field(field) DCNL DCSP  DCSP  DCSP except models.FieldDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (isinstance(f, models.ManyToManyField) and (not f.rel.through._meta.auto_created)): DCNL DCSP  DCSP  DCSP  DCSP raise ImproperlyConfigured(("'%s.%s' DCSP can't DCSP include DCSP the DCSP ManyToManyField DCSP field DCSP '%s' DCSP because DCSP '%s' DCSP manually DCSP specifies DCSP a DCSP 'through' DCSP model." % (cls.__name__, label, field, field)))
def staff_member_required(view_func): DCNL  DCSP @wraps(view_func) DCNL DCSP def _checklogin(request, *args, **kwargs): DCNL DCSP  DCSP if (request.user.is_active and request.user.is_staff): DCNL DCSP  DCSP  DCSP return view_func(request, *args, **kwargs) DCNL DCSP  DCSP assert hasattr(request, 'session'), "The DCSP Django DCSP admin DCSP requires DCSP session DCSP middleware DCSP to DCSP be DCSP installed. DCSP Edit DCSP your DCSP MIDDLEWARE_CLASSES DCSP setting DCSP to DCSP insert DCSP 'django.contrib.sessions.middleware.SessionMiddleware'." DCNL DCSP  DCSP defaults = {'template_name': 'admin/login.html', 'authentication_form': AdminAuthenticationForm, 'extra_context': {'title': _('Log DCSP in'), 'app_path': request.get_full_path(), REDIRECT_FIELD_NAME: request.get_full_path()}} DCNL DCSP  DCSP return login(request, **defaults) DCNL DCSP return _checklogin
def autodiscover(): DCNL  DCSP import copy DCNL DCSP from django.conf import settings DCNL DCSP from django.utils.importlib import import_module DCNL DCSP from django.utils.module_loading import module_has_submodule DCNL DCSP for app in settings.INSTALLED_APPS: DCNL DCSP  DCSP mod = import_module(app) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP before_import_registry = copy.copy(site._registry) DCNL DCSP  DCSP  DCSP import_module(('%s.admin' % app)) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP site._registry = before_import_registry DCNL DCSP  DCSP  DCSP if module_has_submodule(mod, 'admin'): DCNL DCSP  DCSP  DCSP  DCSP raise
def normalize_fieldsets(fieldsets): DCNL  DCSP result = [] DCNL DCSP for (name, options) in fieldsets: DCNL DCSP  DCSP result.append((name, normalize_dictionary(options))) DCNL DCSP return result
def normalize_dictionary(data_dict): DCNL  DCSP for (key, value) in data_dict.items(): DCNL DCSP  DCSP if (not isinstance(key, str)): DCNL DCSP  DCSP  DCSP del data_dict[key] DCNL DCSP  DCSP  DCSP data_dict[str(key)] = value DCNL DCSP return data_dict
def delete_selected(modeladmin, request, queryset): DCNL  DCSP opts = modeladmin.model._meta DCNL DCSP app_label = opts.app_label DCNL DCSP if (not modeladmin.has_delete_permission(request)): DCNL DCSP  DCSP raise PermissionDenied DCNL DCSP using = router.db_for_write(modeladmin.model) DCNL DCSP (deletable_objects, perms_needed, protected) = get_deleted_objects(queryset, opts, request.user, modeladmin.admin_site, using) DCNL DCSP if request.POST.get('post'): DCNL DCSP  DCSP if perms_needed: DCNL DCSP  DCSP  DCSP raise PermissionDenied DCNL DCSP  DCSP n = queryset.count() DCNL DCSP  DCSP if n: DCNL DCSP  DCSP  DCSP for obj in queryset: DCNL DCSP  DCSP  DCSP  DCSP obj_display = force_text(obj) DCNL DCSP  DCSP  DCSP  DCSP modeladmin.log_deletion(request, obj, obj_display) DCNL DCSP  DCSP  DCSP queryset.delete() DCNL DCSP  DCSP  DCSP modeladmin.message_user(request, (_('Successfully DCSP deleted DCSP %(count)d DCSP %(items)s.') % {'count': n, 'items': model_ngettext(modeladmin.opts, n)})) DCNL DCSP  DCSP return None DCNL DCSP if (len(queryset) == 1): DCNL DCSP  DCSP objects_name = force_text(opts.verbose_name) DCNL DCSP else: DCNL DCSP  DCSP objects_name = force_text(opts.verbose_name_plural) DCNL DCSP if (perms_needed or protected): DCNL DCSP  DCSP title = (_('Cannot DCSP delete DCSP %(name)s') % {'name': objects_name}) DCNL DCSP else: DCNL DCSP  DCSP title = _('Are DCSP you DCSP sure?') DCNL DCSP context = {'title': title, 'objects_name': objects_name, 'deletable_objects': [deletable_objects], 'queryset': queryset, 'perms_lacking': perms_needed, 'protected': protected, 'opts': opts, 'app_label': app_label, 'action_checkbox_name': helpers.ACTION_CHECKBOX_NAME} DCNL DCSP return TemplateResponse(request, (modeladmin.delete_selected_confirmation_template or [('admin/%s/%s/delete_selected_confirmation.html' % (app_label, opts.object_name.lower())), ('admin/%s/delete_selected_confirmation.html' % app_label), 'admin/delete_selected_confirmation.html']), context, current_app=modeladmin.admin_site.name)
def lookup_needs_distinct(opts, lookup_path): DCNL  DCSP field_name = lookup_path.split(u'__', 1)[0] DCNL DCSP field = opts.get_field_by_name(field_name)[0] DCNL DCSP if ((hasattr(field, u'rel') and isinstance(field.rel, models.ManyToManyRel)) or (isinstance(field, models.related.RelatedObject) and (not field.field.unique))): DCNL DCSP  DCSP return True DCNL DCSP return False
def prepare_lookup_value(key, value): DCNL  DCSP if key.endswith(u'__in'): DCNL DCSP  DCSP value = value.split(u',') DCNL DCSP if key.endswith(u'__isnull'): DCNL DCSP  DCSP if (value.lower() in (u'', u'false')): DCNL DCSP  DCSP  DCSP value = False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = True DCNL DCSP return value
def quote(s): DCNL  DCSP if (not isinstance(s, six.string_types)): DCNL DCSP  DCSP return s DCNL DCSP res = list(s) DCNL DCSP for i in range(len(res)): DCNL DCSP  DCSP c = res[i] DCNL DCSP  DCSP if (c in u':/_#?;@&=+$,"<>%\\'): DCNL DCSP  DCSP  DCSP res[i] = (u'_%02X' % ord(c)) DCNL DCSP return u''.join(res)
def unquote(s): DCNL  DCSP mychr = chr DCNL DCSP myatoi = int DCNL DCSP list = s.split(u'_') DCNL DCSP res = [list[0]] DCNL DCSP myappend = res.append DCNL DCSP del list[0] DCNL DCSP for item in list: DCNL DCSP  DCSP if item[1:2]: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP myappend((mychr(myatoi(item[:2], 16)) + item[2:])) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP myappend((u'_' + item)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP myappend((u'_' + item)) DCNL DCSP return u''.join(res)
def flatten_fieldsets(fieldsets): DCNL  DCSP field_names = [] DCNL DCSP for (name, opts) in fieldsets: DCNL DCSP  DCSP for field in opts[u'fields']: DCNL DCSP  DCSP  DCSP if (type(field) == tuple): DCNL DCSP  DCSP  DCSP  DCSP field_names.extend(field) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP field_names.append(field) DCNL DCSP return field_names
def get_deleted_objects(objs, opts, user, admin_site, using): DCNL  DCSP collector = NestedObjects(using=using) DCNL DCSP collector.collect(objs) DCNL DCSP perms_needed = set() DCNL DCSP def format_callback(obj): DCNL DCSP  DCSP has_admin = (obj.__class__ in admin_site._registry) DCNL DCSP  DCSP opts = obj._meta DCNL DCSP  DCSP if has_admin: DCNL DCSP  DCSP  DCSP admin_url = reverse((u'%s:%s_%s_change' % (admin_site.name, opts.app_label, opts.object_name.lower())), None, (quote(obj._get_pk_val()),)) DCNL DCSP  DCSP  DCSP p = (u'%s.%s' % (opts.app_label, opts.get_delete_permission())) DCNL DCSP  DCSP  DCSP if (not user.has_perm(p)): DCNL DCSP  DCSP  DCSP  DCSP perms_needed.add(opts.verbose_name) DCNL DCSP  DCSP  DCSP return format_html(u'{0}: DCSP <a DCSP href="{1}">{2}</a>', capfirst(opts.verbose_name), admin_url, obj) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (u'%s: DCSP %s' % (capfirst(opts.verbose_name), force_text(obj))) DCNL DCSP to_delete = collector.nested(format_callback) DCNL DCSP protected = [format_callback(obj) for obj in collector.protected] DCNL DCSP return (to_delete, perms_needed, protected)
def model_format_dict(obj): DCNL  DCSP if isinstance(obj, (models.Model, models.base.ModelBase)): DCNL DCSP  DCSP opts = obj._meta DCNL DCSP elif isinstance(obj, models.query.QuerySet): DCNL DCSP  DCSP opts = obj.model._meta DCNL DCSP else: DCNL DCSP  DCSP opts = obj DCNL DCSP return {u'verbose_name': force_text(opts.verbose_name), u'verbose_name_plural': force_text(opts.verbose_name_plural)}
def model_ngettext(obj, n=None): DCNL  DCSP if isinstance(obj, models.query.QuerySet): DCNL DCSP  DCSP if (n is None): DCNL DCSP  DCSP  DCSP n = obj.count() DCNL DCSP  DCSP obj = obj.model DCNL DCSP d = model_format_dict(obj) DCNL DCSP (singular, plural) = (d[u'verbose_name'], d[u'verbose_name_plural']) DCNL DCSP return ungettext(singular, plural, (n or 0))
def label_for_field(name, model, model_admin=None, return_attr=False): DCNL  DCSP attr = None DCNL DCSP try: DCNL DCSP  DCSP field = model._meta.get_field_by_name(name)[0] DCNL DCSP  DCSP if isinstance(field, RelatedObject): DCNL DCSP  DCSP  DCSP label = field.opts.verbose_name DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP label = field.verbose_name DCNL DCSP except models.FieldDoesNotExist: DCNL DCSP  DCSP if (name == u'__unicode__'): DCNL DCSP  DCSP  DCSP label = force_text(model._meta.verbose_name) DCNL DCSP  DCSP  DCSP attr = six.text_type DCNL DCSP  DCSP elif (name == u'__str__'): DCNL DCSP  DCSP  DCSP label = force_str(model._meta.verbose_name) DCNL DCSP  DCSP  DCSP attr = bytes DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if callable(name): DCNL DCSP  DCSP  DCSP  DCSP attr = name DCNL DCSP  DCSP  DCSP elif ((model_admin is not None) and hasattr(model_admin, name)): DCNL DCSP  DCSP  DCSP  DCSP attr = getattr(model_admin, name) DCNL DCSP  DCSP  DCSP elif hasattr(model, name): DCNL DCSP  DCSP  DCSP  DCSP attr = getattr(model, name) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP message = (u"Unable DCSP to DCSP lookup DCSP '%s' DCSP on DCSP %s" % (name, model._meta.object_name)) DCNL DCSP  DCSP  DCSP  DCSP if model_admin: DCNL DCSP  DCSP  DCSP  DCSP  DCSP message += (u' DCSP or DCSP %s' % (model_admin.__class__.__name__,)) DCNL DCSP  DCSP  DCSP  DCSP raise AttributeError(message) DCNL DCSP  DCSP  DCSP if hasattr(attr, u'short_description'): DCNL DCSP  DCSP  DCSP  DCSP label = attr.short_description DCNL DCSP  DCSP  DCSP elif callable(attr): DCNL DCSP  DCSP  DCSP  DCSP if (attr.__name__ == u'<lambda>'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP label = u'--' DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP label = pretty_name(attr.__name__) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP label = pretty_name(name) DCNL DCSP if return_attr: DCNL DCSP  DCSP return (label, attr) DCNL DCSP else: DCNL DCSP  DCSP return label
def reverse_field_path(model, path): DCNL  DCSP reversed_path = [] DCNL DCSP parent = model DCNL DCSP pieces = path.split(LOOKUP_SEP) DCNL DCSP for piece in pieces: DCNL DCSP  DCSP (field, model, direct, m2m) = parent._meta.get_field_by_name(piece) DCNL DCSP  DCSP if (len(reversed_path) == (len(pieces) - 1)): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP get_model_from_relation(field) DCNL DCSP  DCSP  DCSP except NotRelationField: DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP if direct: DCNL DCSP  DCSP  DCSP related_name = field.related_query_name() DCNL DCSP  DCSP  DCSP parent = field.rel.to DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP related_name = field.field.name DCNL DCSP  DCSP  DCSP parent = field.model DCNL DCSP  DCSP reversed_path.insert(0, related_name) DCNL DCSP return (parent, LOOKUP_SEP.join(reversed_path))
def get_fields_from_path(model, path): DCNL  DCSP pieces = path.split(LOOKUP_SEP) DCNL DCSP fields = [] DCNL DCSP for piece in pieces: DCNL DCSP  DCSP if fields: DCNL DCSP  DCSP  DCSP parent = get_model_from_relation(fields[(-1)]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parent = model DCNL DCSP  DCSP fields.append(parent._meta.get_field_by_name(piece)[0]) DCNL DCSP return fields
def remove_trailing_data_field(fields): DCNL  DCSP try: DCNL DCSP  DCSP get_model_from_relation(fields[(-1)]) DCNL DCSP except NotRelationField: DCNL DCSP  DCSP fields = fields[:(-1)] DCNL DCSP return fields
def get_limit_choices_to_from_path(model, path): DCNL  DCSP fields = get_fields_from_path(model, path) DCNL DCSP fields = remove_trailing_data_field(fields) DCNL DCSP limit_choices_to = (fields and hasattr(fields[(-1)], u'rel') and getattr(fields[(-1)].rel, u'limit_choices_to', None)) DCNL DCSP if (not limit_choices_to): DCNL DCSP  DCSP return models.Q() DCNL DCSP elif isinstance(limit_choices_to, models.Q): DCNL DCSP  DCSP return limit_choices_to DCNL DCSP else: DCNL DCSP  DCSP return models.Q(**limit_choices_to)
def url_params_from_lookup_dict(lookups): DCNL  DCSP params = {} DCNL DCSP if (lookups and hasattr(lookups, u'items')): DCNL DCSP  DCSP items = [] DCNL DCSP  DCSP for (k, v) in lookups.items(): DCNL DCSP  DCSP  DCSP if isinstance(v, (tuple, list)): DCNL DCSP  DCSP  DCSP  DCSP v = u','.join([str(x) for x in v]) DCNL DCSP  DCSP  DCSP elif isinstance(v, bool): DCNL DCSP  DCSP  DCSP  DCSP v = (u'0', u'1')[v] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP v = six.text_type(v) DCNL DCSP  DCSP  DCSP items.append((k, v)) DCNL DCSP  DCSP params.update(dict(items)) DCNL DCSP return params
@register.tag DCNL def get_admin_log(parser, token): DCNL  DCSP tokens = token.contents.split() DCNL DCSP if (len(tokens) < 4): DCNL DCSP  DCSP raise template.TemplateSyntaxError("'get_admin_log' DCSP statements DCSP require DCSP two DCSP arguments") DCNL DCSP if (not tokens[1].isdigit()): DCNL DCSP  DCSP raise template.TemplateSyntaxError("First DCSP argument DCSP to DCSP 'get_admin_log' DCSP must DCSP be DCSP an DCSP integer") DCNL DCSP if (tokens[2] != 'as'): DCNL DCSP  DCSP raise template.TemplateSyntaxError("Second DCSP argument DCSP to DCSP 'get_admin_log' DCSP must DCSP be DCSP 'as'") DCNL DCSP if (len(tokens) > 4): DCNL DCSP  DCSP if (tokens[4] != 'for_user'): DCNL DCSP  DCSP  DCSP raise template.TemplateSyntaxError("Fourth DCSP argument DCSP to DCSP 'get_admin_log' DCSP must DCSP be DCSP 'for_user'") DCNL DCSP return AdminLogNode(limit=tokens[1], varname=tokens[3], user=(((len(tokens) > 5) and tokens[5]) or None))
@register.simple_tag DCNL def paginator_number(cl, i): DCNL  DCSP if (i == DOT): DCNL DCSP  DCSP return u'... DCSP ' DCNL DCSP elif (i == cl.page_num): DCNL DCSP  DCSP return format_html(u'<span DCSP class="this-page">{0}</span> DCSP ', (i + 1)) DCNL DCSP else: DCNL DCSP  DCSP return format_html(u'<a DCSP href="{0}"{1}>{2}</a> DCSP ', cl.get_query_string({PAGE_VAR: i}), mark_safe((u' DCSP class="end"' if (i == (cl.paginator.num_pages - 1)) else u'')), (i + 1))
@register.inclusion_tag(u'admin/pagination.html') DCNL def pagination(cl): DCNL  DCSP (paginator, page_num) = (cl.paginator, cl.page_num) DCNL DCSP pagination_required = (((not cl.show_all) or (not cl.can_show_all)) and cl.multi_page) DCNL DCSP if (not pagination_required): DCNL DCSP  DCSP page_range = [] DCNL DCSP else: DCNL DCSP  DCSP ON_EACH_SIDE = 3 DCNL DCSP  DCSP ON_ENDS = 2 DCNL DCSP  DCSP if (paginator.num_pages <= 10): DCNL DCSP  DCSP  DCSP page_range = range(paginator.num_pages) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP page_range = [] DCNL DCSP  DCSP  DCSP if (page_num > (ON_EACH_SIDE + ON_ENDS)): DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range(0, (ON_EACH_SIDE - 1))) DCNL DCSP  DCSP  DCSP  DCSP page_range.append(DOT) DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range((page_num - ON_EACH_SIDE), (page_num + 1))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range(0, (page_num + 1))) DCNL DCSP  DCSP  DCSP if (page_num < (((paginator.num_pages - ON_EACH_SIDE) - ON_ENDS) - 1)): DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range((page_num + 1), ((page_num + ON_EACH_SIDE) + 1))) DCNL DCSP  DCSP  DCSP  DCSP page_range.append(DOT) DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range((paginator.num_pages - ON_ENDS), paginator.num_pages)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP page_range.extend(range((page_num + 1), paginator.num_pages)) DCNL DCSP need_show_all_link = (cl.can_show_all and (not cl.show_all) and cl.multi_page) DCNL DCSP return {u'cl': cl, u'pagination_required': pagination_required, u'show_all_url': (need_show_all_link and cl.get_query_string({ALL_VAR: u''})), u'page_range': page_range, u'ALL_VAR': ALL_VAR, u'1': 1}
def result_headers(cl): DCNL  DCSP ordering_field_columns = cl.get_ordering_field_columns() DCNL DCSP for (i, field_name) in enumerate(cl.list_display): DCNL DCSP  DCSP (text, attr) = label_for_field(field_name, cl.model, model_admin=cl.model_admin, return_attr=True) DCNL DCSP  DCSP if attr: DCNL DCSP  DCSP  DCSP if (field_name == u'action_checkbox'): DCNL DCSP  DCSP  DCSP  DCSP (yield {u'text': text, u'class_attrib': mark_safe(u' DCSP class="action-checkbox-column"'), u'sortable': False}) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP admin_order_field = getattr(attr, u'admin_order_field', None) DCNL DCSP  DCSP  DCSP if (not admin_order_field): DCNL DCSP  DCSP  DCSP  DCSP (yield {u'text': text, u'sortable': False}) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP th_classes = [u'sortable'] DCNL DCSP  DCSP order_type = u'' DCNL DCSP  DCSP new_order_type = u'asc' DCNL DCSP  DCSP sort_priority = 0 DCNL DCSP  DCSP sorted = False DCNL DCSP  DCSP if (i in ordering_field_columns): DCNL DCSP  DCSP  DCSP sorted = True DCNL DCSP  DCSP  DCSP order_type = ordering_field_columns.get(i).lower() DCNL DCSP  DCSP  DCSP sort_priority = (list(ordering_field_columns).index(i) + 1) DCNL DCSP  DCSP  DCSP th_classes.append((u'sorted DCSP %sending' % order_type)) DCNL DCSP  DCSP  DCSP new_order_type = {u'asc': u'desc', u'desc': u'asc'}[order_type] DCNL DCSP  DCSP o_list_primary = [] DCNL DCSP  DCSP o_list_remove = [] DCNL DCSP  DCSP o_list_toggle = [] DCNL DCSP  DCSP make_qs_param = (lambda t, n: ((u'-' if (t == u'desc') else u'') + str(n))) DCNL DCSP  DCSP for (j, ot) in ordering_field_columns.items(): DCNL DCSP  DCSP  DCSP if (j == i): DCNL DCSP  DCSP  DCSP  DCSP param = make_qs_param(new_order_type, j) DCNL DCSP  DCSP  DCSP  DCSP o_list_primary.insert(0, param) DCNL DCSP  DCSP  DCSP  DCSP o_list_toggle.append(param) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP param = make_qs_param(ot, j) DCNL DCSP  DCSP  DCSP  DCSP o_list_primary.append(param) DCNL DCSP  DCSP  DCSP  DCSP o_list_toggle.append(param) DCNL DCSP  DCSP  DCSP  DCSP o_list_remove.append(param) DCNL DCSP  DCSP if (i not in ordering_field_columns): DCNL DCSP  DCSP  DCSP o_list_primary.insert(0, make_qs_param(new_order_type, i)) DCNL DCSP  DCSP (yield {u'text': text, u'sortable': True, u'sorted': sorted, u'ascending': (order_type == u'asc'), u'sort_priority': sort_priority, u'url_primary': cl.get_query_string({ORDER_VAR: u'.'.join(o_list_primary)}), u'url_remove': cl.get_query_string({ORDER_VAR: u'.'.join(o_list_remove)}), u'url_toggle': cl.get_query_string({ORDER_VAR: u'.'.join(o_list_toggle)}), u'class_attrib': (format_html(u' DCSP class="{0}"', u' DCSP '.join(th_classes)) if th_classes else u'')})
def items_for_result(cl, result, form): DCNL  DCSP first = True DCNL DCSP pk = cl.lookup_opts.pk.attname DCNL DCSP for field_name in cl.list_display: DCNL DCSP  DCSP row_class = u'' DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (f, attr, value) = lookup_field(field_name, result, cl.model_admin) DCNL DCSP  DCSP except ObjectDoesNotExist: DCNL DCSP  DCSP  DCSP result_repr = EMPTY_CHANGELIST_VALUE DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (f is None): DCNL DCSP  DCSP  DCSP  DCSP if (field_name == u'action_checkbox'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP row_class = mark_safe(u' DCSP class="action-checkbox"') DCNL DCSP  DCSP  DCSP  DCSP allow_tags = getattr(attr, u'allow_tags', False) DCNL DCSP  DCSP  DCSP  DCSP boolean = getattr(attr, u'boolean', False) DCNL DCSP  DCSP  DCSP  DCSP if boolean: DCNL DCSP  DCSP  DCSP  DCSP  DCSP allow_tags = True DCNL DCSP  DCSP  DCSP  DCSP result_repr = display_for_value(value, boolean) DCNL DCSP  DCSP  DCSP  DCSP if allow_tags: DCNL DCSP  DCSP  DCSP  DCSP  DCSP result_repr = mark_safe(result_repr) DCNL DCSP  DCSP  DCSP  DCSP if isinstance(value, (datetime.date, datetime.time)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP row_class = mark_safe(u' DCSP class="nowrap"') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if isinstance(f.rel, models.ManyToOneRel): DCNL DCSP  DCSP  DCSP  DCSP  DCSP field_val = getattr(result, f.name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (field_val is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result_repr = EMPTY_CHANGELIST_VALUE DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result_repr = field_val DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP result_repr = display_for_field(value, f) DCNL DCSP  DCSP  DCSP  DCSP if isinstance(f, (models.DateField, models.TimeField, models.ForeignKey)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP row_class = mark_safe(u' DCSP class="nowrap"') DCNL DCSP  DCSP if (force_text(result_repr) == u''): DCNL DCSP  DCSP  DCSP result_repr = mark_safe(u'&nbsp;') DCNL DCSP  DCSP if ((first and (not cl.list_display_links)) or (field_name in cl.list_display_links)): DCNL DCSP  DCSP  DCSP table_tag = {True: u'th', False: u'td'}[first] DCNL DCSP  DCSP  DCSP first = False DCNL DCSP  DCSP  DCSP url = cl.url_for_result(result) DCNL DCSP  DCSP  DCSP if cl.to_field: DCNL DCSP  DCSP  DCSP  DCSP attr = str(cl.to_field) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP attr = pk DCNL DCSP  DCSP  DCSP value = result.serializable_value(attr) DCNL DCSP  DCSP  DCSP result_id = repr(force_text(value))[1:] DCNL DCSP  DCSP  DCSP (yield format_html(u'<{0}{1}><a DCSP href="{2}"{3}>{4}</a></{5}>', table_tag, row_class, url, (format_html(u' DCSP onclick="opener.dismissRelatedLookupPopup(window, DCSP {0}); DCSP return DCSP false;"', result_id) if cl.is_popup else u''), result_repr, table_tag)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (form and (field_name in form.fields) and (not ((field_name == cl.model._meta.pk.name) and form[cl.model._meta.pk.name].is_hidden))): DCNL DCSP  DCSP  DCSP  DCSP bf = form[field_name] DCNL DCSP  DCSP  DCSP  DCSP result_repr = mark_safe((force_text(bf.errors) + force_text(bf))) DCNL DCSP  DCSP  DCSP (yield format_html(u'<td{0}>{1}</td>', row_class, result_repr)) DCNL DCSP if (form and (not form[cl.model._meta.pk.name].is_hidden)): DCNL DCSP  DCSP (yield format_html(u'<td>{0}</td>', force_text(form[cl.model._meta.pk.name])))
@register.inclusion_tag(u'admin/change_list_results.html') DCNL def result_list(cl): DCNL  DCSP headers = list(result_headers(cl)) DCNL DCSP num_sorted_fields = 0 DCNL DCSP for h in headers: DCNL DCSP  DCSP if (h[u'sortable'] and h[u'sorted']): DCNL DCSP  DCSP  DCSP num_sorted_fields += 1 DCNL DCSP return {u'cl': cl, u'result_hidden_fields': list(result_hidden_fields(cl)), u'result_headers': headers, u'num_sorted_fields': num_sorted_fields, u'results': list(results(cl))}
@register.inclusion_tag(u'admin/date_hierarchy.html') DCNL def date_hierarchy(cl): DCNL  DCSP if cl.date_hierarchy: DCNL DCSP  DCSP field_name = cl.date_hierarchy DCNL DCSP  DCSP year_field = (u'%s__year' % field_name) DCNL DCSP  DCSP month_field = (u'%s__month' % field_name) DCNL DCSP  DCSP day_field = (u'%s__day' % field_name) DCNL DCSP  DCSP field_generic = (u'%s__' % field_name) DCNL DCSP  DCSP year_lookup = cl.params.get(year_field) DCNL DCSP  DCSP month_lookup = cl.params.get(month_field) DCNL DCSP  DCSP day_lookup = cl.params.get(day_field) DCNL DCSP  DCSP link = (lambda d: cl.get_query_string(d, [field_generic])) DCNL DCSP  DCSP if (not (year_lookup or month_lookup or day_lookup)): DCNL DCSP  DCSP  DCSP date_range = cl.query_set.aggregate(first=models.Min(field_name), last=models.Max(field_name)) DCNL DCSP  DCSP  DCSP if (date_range[u'first'] and date_range[u'last']): DCNL DCSP  DCSP  DCSP  DCSP if (date_range[u'first'].year == date_range[u'last'].year): DCNL DCSP  DCSP  DCSP  DCSP  DCSP year_lookup = date_range[u'first'].year DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (date_range[u'first'].month == date_range[u'last'].month): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP month_lookup = date_range[u'first'].month DCNL DCSP  DCSP if (year_lookup and month_lookup and day_lookup): DCNL DCSP  DCSP  DCSP day = datetime.date(int(year_lookup), int(month_lookup), int(day_lookup)) DCNL DCSP  DCSP  DCSP return {u'show': True, u'back': {u'link': link({year_field: year_lookup, month_field: month_lookup}), u'title': capfirst(formats.date_format(day, u'YEAR_MONTH_FORMAT'))}, u'choices': [{u'title': capfirst(formats.date_format(day, u'MONTH_DAY_FORMAT'))}]} DCNL DCSP  DCSP elif (year_lookup and month_lookup): DCNL DCSP  DCSP  DCSP days = cl.query_set.filter(**{year_field: year_lookup, month_field: month_lookup}).dates(field_name, u'day') DCNL DCSP  DCSP  DCSP return {u'show': True, u'back': {u'link': link({year_field: year_lookup}), u'title': str(year_lookup)}, u'choices': [{u'link': link({year_field: year_lookup, month_field: month_lookup, day_field: day.day}), u'title': capfirst(formats.date_format(day, u'MONTH_DAY_FORMAT'))} for day in days]} DCNL DCSP  DCSP elif year_lookup: DCNL DCSP  DCSP  DCSP months = cl.query_set.filter(**{year_field: year_lookup}).dates(field_name, u'month') DCNL DCSP  DCSP  DCSP return {u'show': True, u'back': {u'link': link({}), u'title': _(u'All DCSP dates')}, u'choices': [{u'link': link({year_field: year_lookup, month_field: month.month}), u'title': capfirst(formats.date_format(month, u'YEAR_MONTH_FORMAT'))} for month in months]} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP years = cl.query_set.dates(field_name, u'year') DCNL DCSP  DCSP  DCSP return {u'show': True, u'choices': [{u'link': link({year_field: str(year.year)}), u'title': str(year.year)} for year in years]}
@register.inclusion_tag(u'admin/search_form.html') DCNL def search_form(cl): DCNL  DCSP return {u'cl': cl, u'show_result_count': (cl.result_count != cl.full_result_count), u'search_var': SEARCH_VAR}
@register.inclusion_tag(u'admin/actions.html', takes_context=True) DCNL def admin_actions(context): DCNL  DCSP context[u'action_index'] = (context.get(u'action_index', (-1)) + 1) DCNL DCSP return context
@register.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True) DCNL def prepopulated_fields_js(context): DCNL  DCSP prepopulated_fields = [] DCNL DCSP if (context['add'] and ('adminform' in context)): DCNL DCSP  DCSP prepopulated_fields.extend(context['adminform'].prepopulated_fields) DCNL DCSP if ('inline_admin_formsets' in context): DCNL DCSP  DCSP for inline_admin_formset in context['inline_admin_formsets']: DCNL DCSP  DCSP  DCSP for inline_admin_form in inline_admin_formset: DCNL DCSP  DCSP  DCSP  DCSP if (inline_admin_form.original is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP prepopulated_fields.extend(inline_admin_form.prepopulated_fields) DCNL DCSP context.update({'prepopulated_fields': prepopulated_fields}) DCNL DCSP return context
@register.inclusion_tag('admin/submit_line.html', takes_context=True) DCNL def submit_row(context): DCNL  DCSP opts = context['opts'] DCNL DCSP change = context['change'] DCNL DCSP is_popup = context['is_popup'] DCNL DCSP save_as = context['save_as'] DCNL DCSP ctx = {'opts': opts, 'onclick_attrib': ((opts.get_ordered_objects() and change and 'onclick="submitOrderForm();"') or ''), 'show_delete_link': ((not is_popup) and context['has_delete_permission'] and change and context.get('show_delete', True)), 'show_save_as_new': ((not is_popup) and change and save_as), 'show_save_and_add_another': (context['has_add_permission'] and (not is_popup) and ((not save_as) or context['add'])), 'show_save_and_continue': ((not is_popup) and context['has_change_permission']), 'is_popup': is_popup, 'show_save': True} DCNL DCSP if (context.get('original') is not None): DCNL DCSP  DCSP ctx['original'] = context['original'] DCNL DCSP return ctx
@register.filter DCNL def cell_count(inline_admin_form): DCNL  DCSP count = 1 DCNL DCSP for fieldset in inline_admin_form: DCNL DCSP  DCSP for line in fieldset: DCNL DCSP  DCSP  DCSP for field in line: DCNL DCSP  DCSP  DCSP  DCSP count += 1 DCNL DCSP if inline_admin_form.formset.can_delete: DCNL DCSP  DCSP count += 1 DCNL DCSP return count
def get_validation_digit(number): DCNL  DCSP sum = 0 DCNL DCSP dvs = [4, 3, 6, 7, 8, 9, 2] DCNL DCSP number = str(number) DCNL DCSP for i in range(0, len(number)): DCNL DCSP  DCSP sum = (((int(number[((-1) - i)]) * dvs[i]) + sum) % 10) DCNL DCSP return ((10 - sum) % 10)
def id_number_checksum(gd): DCNL  DCSP n = s = 0 DCNL DCSP for c in (((gd['year'] + gd['month']) + gd['day']) + gd['serial']): DCNL DCSP  DCSP tmp = ((((n % 2) and 1) or 2) * int(c)) DCNL DCSP  DCSP if (tmp > 9): DCNL DCSP  DCSP  DCSP tmp = sum([int(i) for i in str(tmp)]) DCNL DCSP  DCSP s += tmp DCNL DCSP  DCSP n += 1 DCNL DCSP if ((s % 10) == 0): DCNL DCSP  DCSP return 0 DCNL DCSP return ((((s // 10) + 1) * 10) - s)
def validate_id_birthday(gd, fix_coordination_number_day=True): DCNL  DCSP today = datetime.date.today() DCNL DCSP day = int(gd['day']) DCNL DCSP if (fix_coordination_number_day and (day > 60)): DCNL DCSP  DCSP day -= 60 DCNL DCSP if (gd['century'] is None): DCNL DCSP  DCSP current_year = today.year DCNL DCSP  DCSP year = ((int(today.strftime('%Y')) - int(today.strftime('%y'))) + int(gd['year'])) DCNL DCSP  DCSP if (('%s%s%02d' % (gd['year'], gd['month'], day)) > today.strftime('%y%m%d')): DCNL DCSP  DCSP  DCSP year -= 100 DCNL DCSP  DCSP if (gd['sign'] == '+'): DCNL DCSP  DCSP  DCSP year -= 100 DCNL DCSP else: DCNL DCSP  DCSP year = int((gd['century'] + gd['year'])) DCNL DCSP  DCSP if (year < 1800): DCNL DCSP  DCSP  DCSP raise ValueError DCNL DCSP birth_day = datetime.date(year, int(gd['month']), day) DCNL DCSP if (birth_day > today): DCNL DCSP  DCSP raise ValueError DCNL DCSP return birth_day
def ssn_check_digit(value): DCNL  DCSP ssn_even_chars = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25} DCNL DCSP ssn_odd_chars = {'0': 1, '1': 0, '2': 5, '3': 7, '4': 9, '5': 13, '6': 15, '7': 17, '8': 19, '9': 21, 'A': 1, 'B': 0, 'C': 5, 'D': 7, 'E': 9, 'F': 13, 'G': 15, 'H': 17, 'I': 19, 'J': 21, 'K': 2, 'L': 4, 'M': 18, 'N': 20, 'O': 11, 'P': 3, 'Q': 6, 'R': 8, 'S': 12, 'T': 14, 'U': 16, 'V': 10, 'W': 22, 'X': 25, 'Y': 24, 'Z': 23} DCNL DCSP ssn_check_digits = [chr(x) for x in range(65, 91)] DCNL DCSP ssn = value.upper() DCNL DCSP total = 0 DCNL DCSP for i in range(0, 15): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if ((i % 2) == 0): DCNL DCSP  DCSP  DCSP  DCSP total += ssn_odd_chars[ssn[i]] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP total += ssn_even_chars[ssn[i]] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP msg = ("Character DCSP '%(char)s' DCSP is DCSP not DCSP allowed." % {'char': ssn[i]}) DCNL DCSP  DCSP  DCSP raise ValueError(msg) DCNL DCSP return ssn_check_digits[(total % 26)]
def vat_number_check_digit(vat_number): DCNL  DCSP normalized_vat_number = smart_text(vat_number).zfill(10) DCNL DCSP total = 0 DCNL DCSP for i in range(0, 10, 2): DCNL DCSP  DCSP total += int(normalized_vat_number[i]) DCNL DCSP for i in range(1, 11, 2): DCNL DCSP  DCSP (quotient, remainder) = divmod((int(normalized_vat_number[i]) * 2), 10) DCNL DCSP  DCSP total += (quotient + remainder) DCNL DCSP return smart_text(((10 - (total % 10)) % 10))
def missing_docutils_page(request): DCNL  DCSP return render_to_response('admin_doc/missing_docutils.html')
def get_return_data_type(func_name): DCNL  DCSP if func_name.startswith('get_'): DCNL DCSP  DCSP if func_name.endswith('_list'): DCNL DCSP  DCSP  DCSP return 'List' DCNL DCSP  DCSP elif func_name.endswith('_count'): DCNL DCSP  DCSP  DCSP return 'Integer' DCNL DCSP return ''
def get_readable_field_data_type(field): DCNL  DCSP return (field.description % field.__dict__)
def extract_views_from_urlpatterns(urlpatterns, base=''): DCNL  DCSP views = [] DCNL DCSP for p in urlpatterns: DCNL DCSP  DCSP if hasattr(p, 'url_patterns'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP patterns = p.url_patterns DCNL DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP views.extend(extract_views_from_urlpatterns(patterns, (base + p.regex.pattern))) DCNL DCSP  DCSP elif hasattr(p, 'callback'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP views.append((p.callback, (base + p.regex.pattern))) DCNL DCSP  DCSP  DCSP except ViewDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError((_('%s DCSP does DCSP not DCSP appear DCSP to DCSP be DCSP a DCSP urlpattern DCSP object') % p)) DCNL DCSP return views
def simplify_regex(pattern): DCNL  DCSP pattern = named_group_matcher.sub((lambda m: m.group(1)), pattern) DCNL DCSP pattern = non_named_group_matcher.sub('<var>', pattern) DCNL DCSP pattern = pattern.replace('^', '').replace('$', '').replace('?', '').replace('//', '/').replace('\\', '') DCNL DCSP if (not pattern.startswith('/')): DCNL DCSP  DCSP pattern = ('/' + pattern) DCNL DCSP return pattern
def trim_docstring(docstring): DCNL  DCSP if ((not docstring) or (not docstring.strip())): DCNL DCSP  DCSP return '' DCNL DCSP lines = docstring.expandtabs().splitlines() DCNL DCSP indent = min([(len(line) - len(line.lstrip())) for line in lines if line.lstrip()]) DCNL DCSP trimmed = ([lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]) DCNL DCSP return '\n'.join(trimmed).strip()
def parse_docstring(docstring): DCNL  DCSP docstring = trim_docstring(docstring) DCNL DCSP parts = re.split('\\n{2,}', docstring) DCNL DCSP title = parts[0] DCNL DCSP if (len(parts) == 1): DCNL DCSP  DCSP body = '' DCNL DCSP  DCSP metadata = {} DCNL DCSP else: DCNL DCSP  DCSP parser = HeaderParser() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP metadata = parser.parsestr(parts[(-1)]) DCNL DCSP  DCSP except HeaderParseError: DCNL DCSP  DCSP  DCSP metadata = {} DCNL DCSP  DCSP  DCSP body = '\n\n'.join(parts[1:]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP metadata = dict(metadata.items()) DCNL DCSP  DCSP  DCSP if metadata: DCNL DCSP  DCSP  DCSP  DCSP body = '\n\n'.join(parts[1:(-1)]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP body = '\n\n'.join(parts[1:]) DCNL DCSP return (title, body, metadata)
def parse_rst(text, default_reference_context, thing_being_parsed=None): DCNL  DCSP overrides = {'doctitle_xform': True, 'inital_header_level': 3, 'default_reference_context': default_reference_context, 'link_base': reverse('django-admindocs-docroot').rstrip('/')} DCNL DCSP if thing_being_parsed: DCNL DCSP  DCSP thing_being_parsed = force_bytes(('<%s>' % thing_being_parsed)) DCNL DCSP parts = docutils.core.publish_parts(text, source_path=thing_being_parsed, destination_path=None, writer_name='html', settings_overrides=overrides) DCNL DCSP return mark_safe(parts['fragment'])
def flatpage(request, url): DCNL  DCSP if (not url.startswith('/')): DCNL DCSP  DCSP url = ('/' + url) DCNL DCSP site_id = get_current_site(request).id DCNL DCSP try: DCNL DCSP  DCSP f = get_object_or_404(FlatPage, url__exact=url, sites__id__exact=site_id) DCNL DCSP except Http404: DCNL DCSP  DCSP if ((not url.endswith('/')) and settings.APPEND_SLASH): DCNL DCSP  DCSP  DCSP url += '/' DCNL DCSP  DCSP  DCSP f = get_object_or_404(FlatPage, url__exact=url, sites__id__exact=site_id) DCNL DCSP  DCSP  DCSP return HttpResponsePermanentRedirect(('%s/' % request.path)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise DCNL DCSP return render_flatpage(request, f)
@csrf_protect DCNL def render_flatpage(request, f): DCNL  DCSP if (f.registration_required and (not request.user.is_authenticated())): DCNL DCSP  DCSP from django.contrib.auth.views import redirect_to_login DCNL DCSP  DCSP return redirect_to_login(request.path) DCNL DCSP if f.template_name: DCNL DCSP  DCSP t = loader.select_template((f.template_name, DEFAULT_TEMPLATE)) DCNL DCSP else: DCNL DCSP  DCSP t = loader.get_template(DEFAULT_TEMPLATE) DCNL DCSP f.title = mark_safe(f.title) DCNL DCSP f.content = mark_safe(f.content) DCNL DCSP c = RequestContext(request, {'flatpage': f}) DCNL DCSP response = HttpResponse(t.render(c)) DCNL DCSP populate_xheaders(request, response, FlatPage, f.id) DCNL DCSP return response
@register.tag DCNL def get_flatpages(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP syntax_message = ("%(tag_name)s DCSP expects DCSP a DCSP syntax DCSP of DCSP %(tag_name)s DCSP ['url_starts_with'] DCSP [for DCSP user] DCSP as DCSP context_name" % dict(tag_name=bits[0])) DCNL DCSP if ((len(bits) >= 3) and (len(bits) <= 6)): DCNL DCSP  DCSP if ((len(bits) % 2) == 0): DCNL DCSP  DCSP  DCSP prefix = bits[1] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP prefix = None DCNL DCSP  DCSP if (bits[(-2)] != 'as'): DCNL DCSP  DCSP  DCSP raise template.TemplateSyntaxError(syntax_message) DCNL DCSP  DCSP context_name = bits[(-1)] DCNL DCSP  DCSP if (len(bits) >= 5): DCNL DCSP  DCSP  DCSP if (bits[(-4)] != 'for'): DCNL DCSP  DCSP  DCSP  DCSP raise template.TemplateSyntaxError(syntax_message) DCNL DCSP  DCSP  DCSP user = bits[(-3)] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP user = None DCNL DCSP  DCSP return FlatpageNode(context_name, starts_with=prefix, user=user) DCNL DCSP else: DCNL DCSP  DCSP raise template.TemplateSyntaxError(syntax_message)
def ping_google(sitemap_url=None, ping_url=PING_URL): DCNL  DCSP if (sitemap_url is None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP sitemap_url = urlresolvers.reverse('django.contrib.sitemaps.views.index') DCNL DCSP  DCSP except urlresolvers.NoReverseMatch: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP sitemap_url = urlresolvers.reverse('django.contrib.sitemaps.views.sitemap') DCNL DCSP  DCSP  DCSP except urlresolvers.NoReverseMatch: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP if (sitemap_url is None): DCNL DCSP  DCSP raise SitemapNotFound("You DCSP didn't DCSP provide DCSP a DCSP sitemap_url, DCSP and DCSP the DCSP sitemap DCSP URL DCSP couldn't DCSP be DCSP auto-detected.") DCNL DCSP from django.contrib.sites.models import Site DCNL DCSP current_site = Site.objects.get_current() DCNL DCSP url = ('http://%s%s' % (current_site.domain, sitemap_url)) DCNL DCSP params = urlencode({'sitemap': url}) DCNL DCSP urlopen(('%s?%s' % (ping_url, params)))
def render_to_response(*args, **kwargs): DCNL  DCSP httpresponse_kwargs = {'content_type': kwargs.pop('content_type', None)} DCNL DCSP mimetype = kwargs.pop('mimetype', None) DCNL DCSP if mimetype: DCNL DCSP  DCSP warnings.warn('The DCSP mimetype DCSP keyword DCSP argument DCSP is DCSP deprecated, DCSP use DCSP content_type DCSP instead', PendingDeprecationWarning, stacklevel=2) DCNL DCSP  DCSP httpresponse_kwargs['content_type'] = mimetype DCNL DCSP return HttpResponse(loader.render_to_string(*args, **kwargs), **httpresponse_kwargs)
def render(request, *args, **kwargs): DCNL  DCSP httpresponse_kwargs = {'content_type': kwargs.pop('content_type', None), 'status': kwargs.pop('status', None)} DCNL DCSP if ('context_instance' in kwargs): DCNL DCSP  DCSP context_instance = kwargs.pop('context_instance') DCNL DCSP  DCSP if kwargs.get('current_app', None): DCNL DCSP  DCSP  DCSP raise ValueError('If DCSP you DCSP provide DCSP a DCSP context_instance DCSP you DCSP must DCSP set DCSP its DCSP current_app DCSP before DCSP calling DCSP render()') DCNL DCSP else: DCNL DCSP  DCSP current_app = kwargs.pop('current_app', None) DCNL DCSP  DCSP context_instance = RequestContext(request, current_app=current_app) DCNL DCSP kwargs['context_instance'] = context_instance DCNL DCSP return HttpResponse(loader.render_to_string(*args, **kwargs), **httpresponse_kwargs)
def redirect(to, *args, **kwargs): DCNL  DCSP if kwargs.pop('permanent', False): DCNL DCSP  DCSP redirect_class = HttpResponsePermanentRedirect DCNL DCSP else: DCNL DCSP  DCSP redirect_class = HttpResponseRedirect DCNL DCSP return redirect_class(resolve_url(to, *args, **kwargs))
def _get_queryset(klass): DCNL  DCSP if isinstance(klass, QuerySet): DCNL DCSP  DCSP return klass DCNL DCSP elif isinstance(klass, Manager): DCNL DCSP  DCSP manager = klass DCNL DCSP elif isinstance(klass, ModelBase): DCNL DCSP  DCSP manager = klass._default_manager DCNL DCSP else: DCNL DCSP  DCSP klass__name = (klass.__name__ if isinstance(klass, type) else klass.__class__.__name__) DCNL DCSP  DCSP raise ValueError(("Object DCSP is DCSP of DCSP type DCSP '%s', DCSP but DCSP must DCSP be DCSP a DCSP Django DCSP Model, DCSP Manager, DCSP or DCSP QuerySet" % klass__name)) DCNL DCSP return manager.all()
def get_object_or_404(klass, *args, **kwargs): DCNL  DCSP queryset = _get_queryset(klass) DCNL DCSP try: DCNL DCSP  DCSP return queryset.get(*args, **kwargs) DCNL DCSP except queryset.model.DoesNotExist: DCNL DCSP  DCSP raise Http404(('No DCSP %s DCSP matches DCSP the DCSP given DCSP query.' % queryset.model._meta.object_name))
def get_list_or_404(klass, *args, **kwargs): DCNL  DCSP queryset = _get_queryset(klass) DCNL DCSP obj_list = list(queryset.filter(*args, **kwargs)) DCNL DCSP if (not obj_list): DCNL DCSP  DCSP raise Http404(('No DCSP %s DCSP matches DCSP the DCSP given DCSP query.' % queryset.model._meta.object_name)) DCNL DCSP return obj_list
def resolve_url(to, *args, **kwargs): DCNL  DCSP if hasattr(to, 'get_absolute_url'): DCNL DCSP  DCSP return to.get_absolute_url() DCNL DCSP try: DCNL DCSP  DCSP return urlresolvers.reverse(to, args=args, kwargs=kwargs) DCNL DCSP except urlresolvers.NoReverseMatch: DCNL DCSP  DCSP if callable(to): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP if (('/' not in to) and ('.' not in to)): DCNL DCSP  DCSP  DCSP raise DCNL DCSP return to
def _is_ignorable_404(uri): DCNL  DCSP if getattr(settings, 'IGNORABLE_404_STARTS', ()): DCNL DCSP  DCSP import warnings DCNL DCSP  DCSP warnings.warn('The DCSP IGNORABLE_404_STARTS DCSP setting DCSP has DCSP been DCSP deprecated DCSP in DCSP favor DCSP of DCSP IGNORABLE_404_URLS.', DeprecationWarning) DCNL DCSP  DCSP for start in settings.IGNORABLE_404_STARTS: DCNL DCSP  DCSP  DCSP if uri.startswith(start): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP if getattr(settings, 'IGNORABLE_404_ENDS', ()): DCNL DCSP  DCSP import warnings DCNL DCSP  DCSP warnings.warn('The DCSP IGNORABLE_404_ENDS DCSP setting DCSP has DCSP been DCSP deprecated DCSP in DCSP favor DCSP of DCSP IGNORABLE_404_URLS.', DeprecationWarning) DCNL DCSP  DCSP for end in settings.IGNORABLE_404_ENDS: DCNL DCSP  DCSP  DCSP if uri.endswith(end): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return any((pattern.search(uri) for pattern in settings.IGNORABLE_404_URLS))
def _is_internal_request(domain, referer): DCNL  DCSP return ((referer is not None) and re.match(('^https?://%s/' % re.escape(domain)), referer))
def _get_failure_view(): DCNL  DCSP return get_callable(settings.CSRF_FAILURE_VIEW)
def get_token(request): DCNL  DCSP request.META[u'CSRF_COOKIE_USED'] = True DCNL DCSP return request.META.get(u'CSRF_COOKIE', None)
def urlquote(url, safe=u'/'): DCNL  DCSP return force_text(urllib_parse.quote(force_str(url), force_str(safe)))
def urlquote_plus(url, safe=u''): DCNL  DCSP return force_text(urllib_parse.quote_plus(force_str(url), force_str(safe)))
def urlunquote(quoted_url): DCNL  DCSP return force_text(urllib_parse.unquote(force_str(quoted_url)))
def urlunquote_plus(quoted_url): DCNL  DCSP return force_text(urllib_parse.unquote_plus(force_str(quoted_url)))
def urlencode(query, doseq=0): DCNL  DCSP if isinstance(query, MultiValueDict): DCNL DCSP  DCSP query = query.lists() DCNL DCSP elif hasattr(query, u'items'): DCNL DCSP  DCSP query = query.items() DCNL DCSP return urllib_parse.urlencode([(force_str(k), ([force_str(i) for i in v] if isinstance(v, (list, tuple)) else force_str(v))) for (k, v) in query], doseq)
def cookie_date(epoch_seconds=None): DCNL  DCSP rfcdate = formatdate(epoch_seconds) DCNL DCSP return (u'%s-%s-%s DCSP GMT' % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25]))
def http_date(epoch_seconds=None): DCNL  DCSP rfcdate = formatdate(epoch_seconds) DCNL DCSP return (u'%s DCSP GMT' % rfcdate[:25])
def parse_http_date(date): DCNL  DCSP for regex in (RFC1123_DATE, RFC850_DATE, ASCTIME_DATE): DCNL DCSP  DCSP m = regex.match(date) DCNL DCSP  DCSP if (m is not None): DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise ValueError((u'%r DCSP is DCSP not DCSP in DCSP a DCSP valid DCSP HTTP DCSP date DCSP format' % date)) DCNL DCSP try: DCNL DCSP  DCSP year = int(m.group(u'year')) DCNL DCSP  DCSP if (year < 100): DCNL DCSP  DCSP  DCSP if (year < 70): DCNL DCSP  DCSP  DCSP  DCSP year += 2000 DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP year += 1900 DCNL DCSP  DCSP month = (MONTHS.index(m.group(u'mon').lower()) + 1) DCNL DCSP  DCSP day = int(m.group(u'day')) DCNL DCSP  DCSP hour = int(m.group(u'hour')) DCNL DCSP  DCSP min = int(m.group(u'min')) DCNL DCSP  DCSP sec = int(m.group(u'sec')) DCNL DCSP  DCSP result = datetime.datetime(year, month, day, hour, min, sec) DCNL DCSP  DCSP return calendar.timegm(result.utctimetuple()) DCNL DCSP except Exception: DCNL DCSP  DCSP raise ValueError((u'%r DCSP is DCSP not DCSP a DCSP valid DCSP date' % date))
def parse_http_date_safe(date): DCNL  DCSP try: DCNL DCSP  DCSP return parse_http_date(date) DCNL DCSP except Exception: DCNL DCSP  DCSP pass
def base36_to_int(s): DCNL  DCSP if (len(s) > 13): DCNL DCSP  DCSP raise ValueError(u'Base36 DCSP input DCSP too DCSP large') DCNL DCSP value = int(s, 36) DCNL DCSP if ((not six.PY3) and (value > sys.maxint)): DCNL DCSP  DCSP raise ValueError(u'Base36 DCSP input DCSP too DCSP large') DCNL DCSP return value
def int_to_base36(i): DCNL  DCSP digits = u'0123456789abcdefghijklmnopqrstuvwxyz' DCNL DCSP factor = 0 DCNL DCSP if (i < 0): DCNL DCSP  DCSP raise ValueError(u'Negative DCSP base36 DCSP conversion DCSP input.') DCNL DCSP if (not six.PY3): DCNL DCSP  DCSP if (not isinstance(i, six.integer_types)): DCNL DCSP  DCSP  DCSP raise TypeError(u'Non-integer DCSP base36 DCSP conversion DCSP input.') DCNL DCSP  DCSP if (i > sys.maxint): DCNL DCSP  DCSP  DCSP raise ValueError(u'Base36 DCSP conversion DCSP input DCSP too DCSP large.') DCNL DCSP while True: DCNL DCSP  DCSP factor += 1 DCNL DCSP  DCSP if (i < (36 ** factor)): DCNL DCSP  DCSP  DCSP factor -= 1 DCNL DCSP  DCSP  DCSP break DCNL DCSP base36 = [] DCNL DCSP while (factor >= 0): DCNL DCSP  DCSP j = (36 ** factor) DCNL DCSP  DCSP base36.append(digits[(i // j)]) DCNL DCSP  DCSP i = (i % j) DCNL DCSP  DCSP factor -= 1 DCNL DCSP return u''.join(base36)
def parse_etags(etag_str): DCNL  DCSP etags = ETAG_MATCH.findall(etag_str) DCNL DCSP if (not etags): DCNL DCSP  DCSP return [etag_str] DCNL DCSP etags = [e.encode(u'ascii').decode(u'unicode_escape') for e in etags] DCNL DCSP return etags
def quote_etag(etag): DCNL  DCSP return (u'"%s"' % etag.replace(u'\\', u'\\\\').replace(u'"', u'\\"'))
def same_origin(url1, url2): DCNL  DCSP (p1, p2) = (urllib_parse.urlparse(url1), urllib_parse.urlparse(url2)) DCNL DCSP return ((p1.scheme, p1.hostname, p1.port) == (p2.scheme, p2.hostname, p2.port))
def is_safe_url(url, host=None): DCNL  DCSP if (not url): DCNL DCSP  DCSP return False DCNL DCSP netloc = urllib_parse.urlparse(url)[1] DCNL DCSP return ((not netloc) or (netloc == host))
def normalize(pattern): DCNL  DCSP result = [] DCNL DCSP non_capturing_groups = [] DCNL DCSP consume_next = True DCNL DCSP pattern_iter = next_char(iter(pattern)) DCNL DCSP num_args = 0 DCNL DCSP try: DCNL DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP except StopIteration: DCNL DCSP  DCSP return [(u'', [])] DCNL DCSP try: DCNL DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP if escaped: DCNL DCSP  DCSP  DCSP  DCSP result.append(ch) DCNL DCSP  DCSP  DCSP elif (ch == u'.'): DCNL DCSP  DCSP  DCSP  DCSP result.append(u'.') DCNL DCSP  DCSP  DCSP elif (ch == u'|'): DCNL DCSP  DCSP  DCSP  DCSP raise NotImplementedError DCNL DCSP  DCSP  DCSP elif (ch == u'^'): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP elif (ch == u'$'): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif (ch == u')'): DCNL DCSP  DCSP  DCSP  DCSP start = non_capturing_groups.pop() DCNL DCSP  DCSP  DCSP  DCSP inner = NonCapture(result[start:]) DCNL DCSP  DCSP  DCSP  DCSP result = (result[:start] + [inner]) DCNL DCSP  DCSP  DCSP elif (ch == u'['): DCNL DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP result.append(ch) DCNL DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP while (escaped or (ch != u']')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP elif (ch == u'('): DCNL DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP if ((ch != u'?') or escaped): DCNL DCSP  DCSP  DCSP  DCSP  DCSP name = (u'_%d' % num_args) DCNL DCSP  DCSP  DCSP  DCSP  DCSP num_args += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP result.append(Group(((u'%%(%s)s' % name), name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP walk_to_end(ch, pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (ch in u'iLmsu#'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP walk_to_end(ch, pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (ch == u':'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP non_capturing_groups.append(len(result)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (ch != u'P'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError((u"Non-reversible DCSP reg-exp DCSP portion: DCSP '(?%s'" % ch)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (ch not in (u'<', u'=')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError((u"Non-reversible DCSP reg-exp DCSP portion: DCSP '(?P%s'" % ch)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (ch == u'<'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP terminal_char = u'>' DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP terminal_char = u')' DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP name = [] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP while (ch != terminal_char): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP name.append(ch) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP param = u''.join(name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (terminal_char != u')'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result.append(Group(((u'%%(%s)s' % param), param))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP walk_to_end(ch, pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result.append(Group(((u'%%(%s)s' % param), None))) DCNL DCSP  DCSP  DCSP elif (ch in u'*?+{'): DCNL DCSP  DCSP  DCSP  DCSP (count, ch) = get_quantifier(ch, pattern_iter) DCNL DCSP  DCSP  DCSP  DCSP if ch: DCNL DCSP  DCSP  DCSP  DCSP  DCSP consume_next = False DCNL DCSP  DCSP  DCSP  DCSP if (count == 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if contains(result[(-1)], Group): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result[(-1)] = Choice([None, result[(-1)]]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP result.pop() DCNL DCSP  DCSP  DCSP  DCSP elif (count > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP result.extend(([result[(-1)]] * (count - 1))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP result.append(ch) DCNL DCSP  DCSP  DCSP if consume_next: DCNL DCSP  DCSP  DCSP  DCSP (ch, escaped) = next(pattern_iter) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP consume_next = True DCNL DCSP except StopIteration: DCNL DCSP  DCSP pass DCNL DCSP except NotImplementedError: DCNL DCSP  DCSP return [(u'', [])] DCNL DCSP return list(zip(*flatten_result(result)))
def next_char(input_iter): DCNL  DCSP for ch in input_iter: DCNL DCSP  DCSP if (ch != u'\\'): DCNL DCSP  DCSP  DCSP (yield (ch, False)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP ch = next(input_iter) DCNL DCSP  DCSP representative = ESCAPE_MAPPINGS.get(ch, ch) DCNL DCSP  DCSP if (representative is None): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP (yield (representative, True))
def walk_to_end(ch, input_iter): DCNL  DCSP if (ch == u'('): DCNL DCSP  DCSP nesting = 1 DCNL DCSP else: DCNL DCSP  DCSP nesting = 0 DCNL DCSP for (ch, escaped) in input_iter: DCNL DCSP  DCSP if escaped: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP elif (ch == u'('): DCNL DCSP  DCSP  DCSP nesting += 1 DCNL DCSP  DCSP elif (ch == u')'): DCNL DCSP  DCSP  DCSP if (not nesting): DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP nesting -= 1
def get_quantifier(ch, input_iter): DCNL  DCSP if (ch in u'*?+'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (ch2, escaped) = next(input_iter) DCNL DCSP  DCSP except StopIteration: DCNL DCSP  DCSP  DCSP ch2 = None DCNL DCSP  DCSP if (ch2 == u'?'): DCNL DCSP  DCSP  DCSP ch2 = None DCNL DCSP  DCSP if (ch == u'+'): DCNL DCSP  DCSP  DCSP return (1, ch2) DCNL DCSP  DCSP return (0, ch2) DCNL DCSP quant = [] DCNL DCSP while (ch != u'}'): DCNL DCSP  DCSP (ch, escaped) = next(input_iter) DCNL DCSP  DCSP quant.append(ch) DCNL DCSP quant = quant[:(-1)] DCNL DCSP values = u''.join(quant).split(u',') DCNL DCSP try: DCNL DCSP  DCSP (ch, escaped) = next(input_iter) DCNL DCSP except StopIteration: DCNL DCSP  DCSP ch = None DCNL DCSP if (ch == u'?'): DCNL DCSP  DCSP ch = None DCNL DCSP return (int(values[0]), ch)
def contains(source, inst): DCNL  DCSP if isinstance(source, inst): DCNL DCSP  DCSP return True DCNL DCSP if isinstance(source, NonCapture): DCNL DCSP  DCSP for elt in source: DCNL DCSP  DCSP  DCSP if contains(elt, inst): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP return False
def flatten_result(source): DCNL  DCSP if (source is None): DCNL DCSP  DCSP return ([u''], [[]]) DCNL DCSP if isinstance(source, Group): DCNL DCSP  DCSP if (source[1] is None): DCNL DCSP  DCSP  DCSP params = [] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP params = [source[1]] DCNL DCSP  DCSP return ([source[0]], [params]) DCNL DCSP result = [u''] DCNL DCSP result_args = [[]] DCNL DCSP pos = last = 0 DCNL DCSP for (pos, elt) in enumerate(source): DCNL DCSP  DCSP if isinstance(elt, six.string_types): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP piece = u''.join(source[last:pos]) DCNL DCSP  DCSP if isinstance(elt, Group): DCNL DCSP  DCSP  DCSP piece += elt[0] DCNL DCSP  DCSP  DCSP param = elt[1] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP param = None DCNL DCSP  DCSP last = (pos + 1) DCNL DCSP  DCSP for i in range(len(result)): DCNL DCSP  DCSP  DCSP result[i] += piece DCNL DCSP  DCSP  DCSP if param: DCNL DCSP  DCSP  DCSP  DCSP result_args[i].append(param) DCNL DCSP  DCSP if isinstance(elt, (Choice, NonCapture)): DCNL DCSP  DCSP  DCSP if isinstance(elt, NonCapture): DCNL DCSP  DCSP  DCSP  DCSP elt = [elt] DCNL DCSP  DCSP  DCSP (inner_result, inner_args) = ([], []) DCNL DCSP  DCSP  DCSP for item in elt: DCNL DCSP  DCSP  DCSP  DCSP (res, args) = flatten_result(item) DCNL DCSP  DCSP  DCSP  DCSP inner_result.extend(res) DCNL DCSP  DCSP  DCSP  DCSP inner_args.extend(args) DCNL DCSP  DCSP  DCSP new_result = [] DCNL DCSP  DCSP  DCSP new_args = [] DCNL DCSP  DCSP  DCSP for (item, args) in zip(result, result_args): DCNL DCSP  DCSP  DCSP  DCSP for (i_item, i_args) in zip(inner_result, inner_args): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_result.append((item + i_item)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_args.append((args[:] + i_args)) DCNL DCSP  DCSP  DCSP result = new_result DCNL DCSP  DCSP  DCSP result_args = new_args DCNL DCSP if (pos >= last): DCNL DCSP  DCSP piece = u''.join(source[last:]) DCNL DCSP  DCSP for i in range(len(result)): DCNL DCSP  DCSP  DCSP result[i] += piece DCNL DCSP return (result, result_args)
def dictConfig(config): DCNL  DCSP dictConfigClass(config).configure()
def is_iterable(x): DCNL  DCSP try: DCNL DCSP  DCSP iter(x) DCNL DCSP except TypeError: DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP return True
def is_iterator(x): DCNL  DCSP if (sys.version_info >= (2, 7)): DCNL DCSP  DCSP return isinstance(x, collections.Iterator) DCNL DCSP return (isinstance(x, collections.Iterator) and hasattr(x, '__iter__'))
def colorize(text='', opts=(), **kwargs): DCNL  DCSP code_list = [] DCNL DCSP if ((text == '') and (len(opts) == 1) and (opts[0] == 'reset')): DCNL DCSP  DCSP return ('\x1b[%sm' % RESET) DCNL DCSP for (k, v) in six.iteritems(kwargs): DCNL DCSP  DCSP if (k == 'fg'): DCNL DCSP  DCSP  DCSP code_list.append(foreground[v]) DCNL DCSP  DCSP elif (k == 'bg'): DCNL DCSP  DCSP  DCSP code_list.append(background[v]) DCNL DCSP for o in opts: DCNL DCSP  DCSP if (o in opt_dict): DCNL DCSP  DCSP  DCSP code_list.append(opt_dict[o]) DCNL DCSP if ('noreset' not in opts): DCNL DCSP  DCSP text = (text + ('\x1b[%sm' % RESET)) DCNL DCSP return (('\x1b[%sm' % ';'.join(code_list)) + text)
def make_style(opts=(), **kwargs): DCNL  DCSP return (lambda text: colorize(text, opts, **kwargs))
def parse_color_setting(config_string): DCNL  DCSP if (not config_string): DCNL DCSP  DCSP return PALETTES[DEFAULT_PALETTE] DCNL DCSP parts = config_string.lower().split(';') DCNL DCSP palette = PALETTES[NOCOLOR_PALETTE].copy() DCNL DCSP for part in parts: DCNL DCSP  DCSP if (part in PALETTES): DCNL DCSP  DCSP  DCSP palette.update(PALETTES[part]) DCNL DCSP  DCSP elif ('=' in part): DCNL DCSP  DCSP  DCSP definition = {} DCNL DCSP  DCSP  DCSP (role, instructions) = part.split('=') DCNL DCSP  DCSP  DCSP role = role.upper() DCNL DCSP  DCSP  DCSP styles = instructions.split(',') DCNL DCSP  DCSP  DCSP styles.reverse() DCNL DCSP  DCSP  DCSP colors = styles.pop().split('/') DCNL DCSP  DCSP  DCSP colors.reverse() DCNL DCSP  DCSP  DCSP fg = colors.pop() DCNL DCSP  DCSP  DCSP if (fg in color_names): DCNL DCSP  DCSP  DCSP  DCSP definition['fg'] = fg DCNL DCSP  DCSP  DCSP if (colors and (colors[(-1)] in color_names)): DCNL DCSP  DCSP  DCSP  DCSP definition['bg'] = colors[(-1)] DCNL DCSP  DCSP  DCSP opts = tuple((s for s in styles if (s in opt_dict.keys()))) DCNL DCSP  DCSP  DCSP if opts: DCNL DCSP  DCSP  DCSP  DCSP definition['opts'] = opts DCNL DCSP  DCSP  DCSP if ((role in PALETTES[NOCOLOR_PALETTE]) and definition): DCNL DCSP  DCSP  DCSP  DCSP palette[role] = definition DCNL DCSP if (palette == PALETTES[NOCOLOR_PALETTE]): DCNL DCSP  DCSP return None DCNL DCSP return palette
def timesince(d, now=None, reversed=False): DCNL  DCSP chunks = (((((60 * 60) * 24) * 365), (lambda n: ungettext(u'year', u'years', n))), ((((60 * 60) * 24) * 30), (lambda n: ungettext(u'month', u'months', n))), ((((60 * 60) * 24) * 7), (lambda n: ungettext(u'week', u'weeks', n))), (((60 * 60) * 24), (lambda n: ungettext(u'day', u'days', n))), ((60 * 60), (lambda n: ungettext(u'hour', u'hours', n))), (60, (lambda n: ungettext(u'minute', u'minutes', n)))) DCNL DCSP if (not isinstance(d, datetime.datetime)): DCNL DCSP  DCSP d = datetime.datetime(d.year, d.month, d.day) DCNL DCSP if (now and (not isinstance(now, datetime.datetime))): DCNL DCSP  DCSP now = datetime.datetime(now.year, now.month, now.day) DCNL DCSP if (not now): DCNL DCSP  DCSP now = datetime.datetime.now((utc if is_aware(d) else None)) DCNL DCSP delta = ((d - now) if reversed else (now - d)) DCNL DCSP since = ((((delta.days * 24) * 60) * 60) + delta.seconds) DCNL DCSP if (since <= 0): DCNL DCSP  DCSP return (u'0 DCSP ' + ugettext(u'minutes')) DCNL DCSP for (i, (seconds, name)) in enumerate(chunks): DCNL DCSP  DCSP count = (since // seconds) DCNL DCSP  DCSP if (count != 0): DCNL DCSP  DCSP  DCSP break DCNL DCSP s = (ugettext(u'%(number)d DCSP %(type)s') % {u'number': count, u'type': name(count)}) DCNL DCSP if ((i + 1) < len(chunks)): DCNL DCSP  DCSP (seconds2, name2) = chunks[(i + 1)] DCNL DCSP  DCSP count2 = ((since - (seconds * count)) // seconds2) DCNL DCSP  DCSP if (count2 != 0): DCNL DCSP  DCSP  DCSP s += (ugettext(u', DCSP %(number)d DCSP %(type)s') % {u'number': count2, u'type': name2(count2)}) DCNL DCSP return s
def timeuntil(d, now=None): DCNL  DCSP return timesince(d, now, reversed=True)
def get_default_timezone(): DCNL  DCSP global _localtime DCNL DCSP if (_localtime is None): DCNL DCSP  DCSP if (isinstance(settings.TIME_ZONE, six.string_types) and (pytz is not None)): DCNL DCSP  DCSP  DCSP _localtime = pytz.timezone(settings.TIME_ZONE) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP _localtime = LocalTimezone() DCNL DCSP return _localtime
def get_default_timezone_name(): DCNL  DCSP return _get_timezone_name(get_default_timezone())
def get_current_timezone(): DCNL  DCSP return getattr(_active, 'value', get_default_timezone())
def get_current_timezone_name(): DCNL  DCSP return _get_timezone_name(get_current_timezone())
def _get_timezone_name(timezone): DCNL  DCSP try: DCNL DCSP  DCSP return timezone.zone DCNL DCSP except AttributeError: DCNL DCSP  DCSP local_now = datetime.now(timezone) DCNL DCSP  DCSP return timezone.tzname(local_now)
def activate(timezone): DCNL  DCSP if isinstance(timezone, tzinfo): DCNL DCSP  DCSP _active.value = timezone DCNL DCSP elif (isinstance(timezone, six.string_types) and (pytz is not None)): DCNL DCSP  DCSP _active.value = pytz.timezone(timezone) DCNL DCSP else: DCNL DCSP  DCSP raise ValueError(('Invalid DCSP timezone: DCSP %r' % timezone))
def deactivate(): DCNL  DCSP if hasattr(_active, 'value'): DCNL DCSP  DCSP del _active.value
def template_localtime(value, use_tz=None): DCNL  DCSP should_convert = (isinstance(value, datetime) and (settings.USE_TZ if (use_tz is None) else use_tz) and (not is_naive(value)) and getattr(value, 'convert_to_local_time', True)) DCNL DCSP return (localtime(value) if should_convert else value)
def localtime(value, timezone=None): DCNL  DCSP if (timezone is None): DCNL DCSP  DCSP timezone = get_current_timezone() DCNL DCSP value = value.astimezone(timezone) DCNL DCSP if hasattr(timezone, 'normalize'): DCNL DCSP  DCSP value = timezone.normalize(value) DCNL DCSP return value
def now(): DCNL  DCSP if settings.USE_TZ: DCNL DCSP  DCSP return datetime.utcnow().replace(tzinfo=utc) DCNL DCSP else: DCNL DCSP  DCSP return datetime.now()
def is_aware(value): DCNL  DCSP return ((value.tzinfo is not None) and (value.tzinfo.utcoffset(value) is not None))
def is_naive(value): DCNL  DCSP return ((value.tzinfo is None) or (value.tzinfo.utcoffset(value) is None))
def make_aware(value, timezone): DCNL  DCSP if hasattr(timezone, 'localize'): DCNL DCSP  DCSP return timezone.localize(value, is_dst=None) DCNL DCSP else: DCNL DCSP  DCSP return value.replace(tzinfo=timezone)
def make_naive(value, timezone): DCNL  DCSP value = value.astimezone(timezone) DCNL DCSP if hasattr(timezone, 'normalize'): DCNL DCSP  DCSP value = timezone.normalize(value) DCNL DCSP return value.replace(tzinfo=None)
def upath(path): DCNL  DCSP if (not six.PY3): DCNL DCSP  DCSP return path.decode(fs_encoding) DCNL DCSP return path
def npath(path): DCNL  DCSP if ((not six.PY3) and (not isinstance(path, bytes))): DCNL DCSP  DCSP return path.encode(fs_encoding) DCNL DCSP return path
def safe_join(base, *paths): DCNL  DCSP base = force_text(base) DCNL DCSP paths = [force_text(p) for p in paths] DCNL DCSP final_path = abspathu(join(base, *paths)) DCNL DCSP base_path = abspathu(base) DCNL DCSP if ((not normcase(final_path).startswith(normcase((base_path + sep)))) and (normcase(final_path) != normcase(base_path)) and (dirname(normcase(base_path)) != normcase(base_path))): DCNL DCSP  DCSP raise ValueError(('The DCSP joined DCSP path DCSP (%s) DCSP is DCSP located DCSP outside DCSP of DCSP the DCSP base DCSP path DCSP component DCSP (%s)' % (final_path, base_path))) DCNL DCSP return final_path
def rmtree_errorhandler(func, path, exc_info): DCNL  DCSP (exctype, value) = exc_info[:2] DCNL DCSP if ((exctype is not WindowsError) or ('Access DCSP is DCSP denied' not in str(value))): DCNL DCSP  DCSP raise DCNL DCSP if ((os.stat(path).st_mode & stat.S_IREAD) != stat.S_IREAD): DCNL DCSP  DCSP raise DCNL DCSP os.chmod(path, stat.S_IWRITE) DCNL DCSP func(path)
def wrap(text, width): DCNL  DCSP text = force_text(text) DCNL DCSP def _generator(): DCNL DCSP  DCSP it = iter(text.split(u' DCSP ')) DCNL DCSP  DCSP word = next(it) DCNL DCSP  DCSP (yield word) DCNL DCSP  DCSP pos = ((len(word) - word.rfind(u'\n')) - 1) DCNL DCSP  DCSP for word in it: DCNL DCSP  DCSP  DCSP if (u'\n' in word): DCNL DCSP  DCSP  DCSP  DCSP lines = word.split(u'\n') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP lines = (word,) DCNL DCSP  DCSP  DCSP pos += (len(lines[0]) + 1) DCNL DCSP  DCSP  DCSP if (pos > width): DCNL DCSP  DCSP  DCSP  DCSP (yield u'\n') DCNL DCSP  DCSP  DCSP  DCSP pos = len(lines[(-1)]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP (yield u' DCSP ') DCNL DCSP  DCSP  DCSP  DCSP if (len(lines) > 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pos = len(lines[(-1)]) DCNL DCSP  DCSP  DCSP (yield word) DCNL DCSP return u''.join(_generator())
def get_valid_filename(s): DCNL  DCSP s = force_text(s).strip().replace(u' DCSP ', u'_') DCNL DCSP return re.sub(u'(?u)[^-\\w.]', u'', s)
def get_text_list(list_, last_word=ugettext_lazy(u'or')): DCNL  DCSP if (len(list_) == 0): DCNL DCSP  DCSP return u'' DCNL DCSP if (len(list_) == 1): DCNL DCSP  DCSP return force_text(list_[0]) DCNL DCSP return (u'%s DCSP %s DCSP %s' % (_(u', DCSP ').join([force_text(i) for i in list_][:(-1)]), force_text(last_word), force_text(list_[(-1)])))
def recapitalize(text): DCNL  DCSP text = force_text(text).lower() DCNL DCSP capsRE = re.compile(u'(?:^|(?<=[\\.\\?\\!] DCSP ))([a-z])') DCNL DCSP text = capsRE.sub((lambda x: x.group(1).upper()), text) DCNL DCSP return text
def phone2numeric(phone): DCNL  DCSP char2number = {u'a': u'2', u'b': u'2', u'c': u'2', u'd': u'3', u'e': u'3', u'f': u'3', u'g': u'4', u'h': u'4', u'i': u'4', u'j': u'5', u'k': u'5', u'l': u'5', u'm': u'6', u'n': u'6', u'o': u'6', u'p': u'7', u'q': u'7', u'r': u'7', u's': u'7', u't': u'8', u'u': u'8', u'v': u'8', u'w': u'9', u'x': u'9', u'y': u'9', u'z': u'9'} DCNL DCSP return u''.join((char2number.get(c, c) for c in phone.lower()))
def smart_split(text): DCNL  DCSP text = force_text(text) DCNL DCSP for bit in smart_split_re.finditer(text): DCNL DCSP  DCSP (yield bit.group(0))
def unescape_string_literal(s): DCNL  DCSP if ((s[0] not in u'"\'') or (s[(-1)] != s[0])): DCNL DCSP  DCSP raise ValueError((u'Not DCSP a DCSP string DCSP literal: DCSP %r' % s)) DCNL DCSP quote = s[0] DCNL DCSP return s[1:(-1)].replace((u'\\%s' % quote), quote).replace(u'\\\\', u'\\')
def slugify(value): DCNL  DCSP value = unicodedata.normalize(u'NFKD', value).encode(u'ascii', u'ignore').decode(u'ascii') DCNL DCSP value = re.sub(u'[^\\w\\s-]', u'', value).strip().lower() DCNL DCSP return mark_safe(re.sub(u'[-\\s]+', u'-', value))
def python_2_unicode_compatible(klass): DCNL  DCSP if (not six.PY3): DCNL DCSP  DCSP klass.__unicode__ = klass.__str__ DCNL DCSP  DCSP klass.__str__ = (lambda self: self.__unicode__().encode(u'utf-8')) DCNL DCSP return klass
def smart_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'): DCNL  DCSP if isinstance(s, Promise): DCNL DCSP  DCSP return s DCNL DCSP return force_text(s, encoding, strings_only, errors)
def is_protected_type(obj): DCNL  DCSP return isinstance(obj, (six.integer_types + (type(None), float, Decimal, datetime.datetime, datetime.date, datetime.time)))
def force_text(s, encoding=u'utf-8', strings_only=False, errors=u'strict'): DCNL  DCSP if isinstance(s, six.text_type): DCNL DCSP  DCSP return s DCNL DCSP if (strings_only and is_protected_type(s)): DCNL DCSP  DCSP return s DCNL DCSP try: DCNL DCSP  DCSP if (not isinstance(s, six.string_types)): DCNL DCSP  DCSP  DCSP if hasattr(s, u'__unicode__'): DCNL DCSP  DCSP  DCSP  DCSP s = s.__unicode__() DCNL DCSP  DCSP  DCSP elif six.PY3: DCNL DCSP  DCSP  DCSP  DCSP if isinstance(s, bytes): DCNL DCSP  DCSP  DCSP  DCSP  DCSP s = six.text_type(s, encoding, errors) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP s = six.text_type(s) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP s = six.text_type(bytes(s), encoding, errors) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP s = s.decode(encoding, errors) DCNL DCSP except UnicodeDecodeError as e: DCNL DCSP  DCSP if (not isinstance(s, Exception)): DCNL DCSP  DCSP  DCSP raise DjangoUnicodeDecodeError(s, *e.args) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP s = u' DCSP '.join([force_text(arg, encoding, strings_only, errors) for arg in s]) DCNL DCSP return s
def smart_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'): DCNL  DCSP if isinstance(s, Promise): DCNL DCSP  DCSP return s DCNL DCSP return force_bytes(s, encoding, strings_only, errors)
def force_bytes(s, encoding=u'utf-8', strings_only=False, errors=u'strict'): DCNL  DCSP if isinstance(s, bytes): DCNL DCSP  DCSP if (encoding == u'utf-8'): DCNL DCSP  DCSP  DCSP return s DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return s.decode(u'utf-8', errors).encode(encoding, errors) DCNL DCSP if (strings_only and ((s is None) or isinstance(s, int))): DCNL DCSP  DCSP return s DCNL DCSP if isinstance(s, Promise): DCNL DCSP  DCSP return six.text_type(s).encode(encoding, errors) DCNL DCSP if (not isinstance(s, six.string_types)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if six.PY3: DCNL DCSP  DCSP  DCSP  DCSP return six.text_type(s).encode(encoding) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return bytes(s) DCNL DCSP  DCSP except UnicodeEncodeError: DCNL DCSP  DCSP  DCSP if isinstance(s, Exception): DCNL DCSP  DCSP  DCSP  DCSP return ' DCSP '.join([force_bytes(arg, encoding, strings_only, errors) for arg in s]) DCNL DCSP  DCSP  DCSP return six.text_type(s).encode(encoding, errors) DCNL DCSP else: DCNL DCSP  DCSP return s.encode(encoding, errors)
def iri_to_uri(iri): DCNL  DCSP if (iri is None): DCNL DCSP  DCSP return iri DCNL DCSP return quote(force_bytes(iri), safe="/#%[]=:;$&()+,!?*@'~")
def filepath_to_uri(path): DCNL  DCSP if (path is None): DCNL DCSP  DCSP return path DCNL DCSP return quote(force_bytes(path).replace('\\', '/'), safe="/~!*()'")
def module_has_submodule(package, module_name): DCNL  DCSP name = '.'.join([package.__name__, module_name]) DCNL DCSP try: DCNL DCSP  DCSP return (sys.modules[name] is not None) DCNL DCSP except KeyError: DCNL DCSP  DCSP pass DCNL DCSP try: DCNL DCSP  DCSP package_path = package.__path__ DCNL DCSP except AttributeError: DCNL DCSP  DCSP return False DCNL DCSP for finder in sys.meta_path: DCNL DCSP  DCSP if finder.find_module(name, package_path): DCNL DCSP  DCSP  DCSP return True DCNL DCSP for entry in package_path: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP finder = sys.path_importer_cache[entry] DCNL DCSP  DCSP  DCSP if (finder is None): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (file_, _, _) = imp.find_module(module_name, [entry]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if file_: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP file_.close() DCNL DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif finder.find_module(name): DCNL DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP for hook in sys.path_hooks: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP finder = hook(entry) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if finder.find_module(name): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP if os.path.isdir(entry): DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (file_, _, _) = imp.find_module(module_name, [entry]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if file_: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP file_.close() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP return False
def patch_cache_control(response, **kwargs): DCNL  DCSP def dictitem(s): DCNL DCSP  DCSP t = s.split(u'=', 1) DCNL DCSP  DCSP if (len(t) > 1): DCNL DCSP  DCSP  DCSP return (t[0].lower(), t[1]) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (t[0].lower(), True) DCNL DCSP def dictvalue(t): DCNL DCSP  DCSP if (t[1] is True): DCNL DCSP  DCSP  DCSP return t[0] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return (u'%s=%s' % (t[0], t[1])) DCNL DCSP if response.has_header(u'Cache-Control'): DCNL DCSP  DCSP cc = cc_delim_re.split(response[u'Cache-Control']) DCNL DCSP  DCSP cc = dict([dictitem(el) for el in cc]) DCNL DCSP else: DCNL DCSP  DCSP cc = {} DCNL DCSP if ((u'max-age' in cc) and (u'max_age' in kwargs)): DCNL DCSP  DCSP kwargs[u'max_age'] = min(int(cc[u'max-age']), kwargs[u'max_age']) DCNL DCSP if ((u'private' in cc) and (u'public' in kwargs)): DCNL DCSP  DCSP del cc[u'private'] DCNL DCSP elif ((u'public' in cc) and (u'private' in kwargs)): DCNL DCSP  DCSP del cc[u'public'] DCNL DCSP for (k, v) in kwargs.items(): DCNL DCSP  DCSP cc[k.replace(u'_', u'-')] = v DCNL DCSP cc = u', DCSP '.join([dictvalue(el) for el in cc.items()]) DCNL DCSP response[u'Cache-Control'] = cc
def get_max_age(response): DCNL  DCSP if (not response.has_header(u'Cache-Control')): DCNL DCSP  DCSP return DCNL DCSP cc = dict([_to_tuple(el) for el in cc_delim_re.split(response[u'Cache-Control'])]) DCNL DCSP if (u'max-age' in cc): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return int(cc[u'max-age']) DCNL DCSP  DCSP except (ValueError, TypeError): DCNL DCSP  DCSP  DCSP pass
def patch_response_headers(response, cache_timeout=None): DCNL  DCSP if (cache_timeout is None): DCNL DCSP  DCSP cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS DCNL DCSP if (cache_timeout < 0): DCNL DCSP  DCSP cache_timeout = 0 DCNL DCSP if (settings.USE_ETAGS and (not response.has_header(u'ETag'))): DCNL DCSP  DCSP if (hasattr(response, u'render') and callable(response.render)): DCNL DCSP  DCSP  DCSP response.add_post_render_callback(_set_response_etag) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response = _set_response_etag(response) DCNL DCSP if (not response.has_header(u'Last-Modified')): DCNL DCSP  DCSP response[u'Last-Modified'] = http_date() DCNL DCSP if (not response.has_header(u'Expires')): DCNL DCSP  DCSP response[u'Expires'] = http_date((time.time() + cache_timeout)) DCNL DCSP patch_cache_control(response, max_age=cache_timeout)
def add_never_cache_headers(response): DCNL  DCSP patch_response_headers(response, cache_timeout=(-1))
def patch_vary_headers(response, newheaders): DCNL  DCSP if response.has_header(u'Vary'): DCNL DCSP  DCSP vary_headers = cc_delim_re.split(response[u'Vary']) DCNL DCSP else: DCNL DCSP  DCSP vary_headers = [] DCNL DCSP existing_headers = set([header.lower() for header in vary_headers]) DCNL DCSP additional_headers = [newheader for newheader in newheaders if (newheader.lower() not in existing_headers)] DCNL DCSP response[u'Vary'] = u', DCSP '.join((vary_headers + additional_headers))
def has_vary_header(response, header_query): DCNL  DCSP if (not response.has_header(u'Vary')): DCNL DCSP  DCSP return False DCNL DCSP vary_headers = cc_delim_re.split(response[u'Vary']) DCNL DCSP existing_headers = set([header.lower() for header in vary_headers]) DCNL DCSP return (header_query.lower() in existing_headers)
def _i18n_cache_key_suffix(request, cache_key): DCNL  DCSP if (settings.USE_I18N or settings.USE_L10N): DCNL DCSP  DCSP cache_key += (u'.%s' % get_language_from_request(request)) DCNL DCSP if settings.USE_TZ: DCNL DCSP  DCSP tz_name = force_text(get_current_timezone_name(), errors=u'ignore') DCNL DCSP  DCSP cache_key += (u'.%s' % tz_name.encode(u'ascii', u'ignore').decode(u'ascii').replace(u' DCSP ', u'_')) DCNL DCSP return cache_key
def _generate_cache_key(request, method, headerlist, key_prefix): DCNL  DCSP ctx = hashlib.md5() DCNL DCSP for header in headerlist: DCNL DCSP  DCSP value = request.META.get(header, None) DCNL DCSP  DCSP if (value is not None): DCNL DCSP  DCSP  DCSP ctx.update(force_bytes(value)) DCNL DCSP path = hashlib.md5(force_bytes(iri_to_uri(request.get_full_path()))) DCNL DCSP cache_key = (u'views.decorators.cache.cache_page.%s.%s.%s.%s' % (key_prefix, method, path.hexdigest(), ctx.hexdigest())) DCNL DCSP return _i18n_cache_key_suffix(request, cache_key)
def _generate_cache_header_key(key_prefix, request): DCNL  DCSP path = hashlib.md5(force_bytes(iri_to_uri(request.get_full_path()))) DCNL DCSP cache_key = (u'views.decorators.cache.cache_header.%s.%s' % (key_prefix, path.hexdigest())) DCNL DCSP return _i18n_cache_key_suffix(request, cache_key)
def get_cache_key(request, key_prefix=None, method=u'GET', cache=None): DCNL  DCSP if (key_prefix is None): DCNL DCSP  DCSP key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX DCNL DCSP cache_key = _generate_cache_header_key(key_prefix, request) DCNL DCSP if (cache is None): DCNL DCSP  DCSP cache = get_cache(settings.CACHE_MIDDLEWARE_ALIAS) DCNL DCSP headerlist = cache.get(cache_key, None) DCNL DCSP if (headerlist is not None): DCNL DCSP  DCSP return _generate_cache_key(request, method, headerlist, key_prefix) DCNL DCSP else: DCNL DCSP  DCSP return None
def learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None): DCNL  DCSP if (key_prefix is None): DCNL DCSP  DCSP key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX DCNL DCSP if (cache_timeout is None): DCNL DCSP  DCSP cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS DCNL DCSP cache_key = _generate_cache_header_key(key_prefix, request) DCNL DCSP if (cache is None): DCNL DCSP  DCSP cache = get_cache(settings.CACHE_MIDDLEWARE_ALIAS) DCNL DCSP if response.has_header(u'Vary'): DCNL DCSP  DCSP headerlist = [(u'HTTP_' + header.upper().replace(u'-', u'_')) for header in cc_delim_re.split(response[u'Vary'])] DCNL DCSP  DCSP cache.set(cache_key, headerlist, cache_timeout) DCNL DCSP  DCSP return _generate_cache_key(request, request.method, headerlist, key_prefix) DCNL DCSP else: DCNL DCSP  DCSP cache.set(cache_key, [], cache_timeout) DCNL DCSP  DCSP return _generate_cache_key(request, request.method, [], key_prefix)
def clean_ipv6_address(ip_str, unpack_ipv4=False, error_message='This DCSP is DCSP not DCSP a DCSP valid DCSP IPv6 DCSP address'): DCNL  DCSP best_doublecolon_start = (-1) DCNL DCSP best_doublecolon_len = 0 DCNL DCSP doublecolon_start = (-1) DCNL DCSP doublecolon_len = 0 DCNL DCSP if (not is_valid_ipv6_address(ip_str)): DCNL DCSP  DCSP raise ValidationError(error_message) DCNL DCSP ip_str = _explode_shorthand_ip_string(ip_str) DCNL DCSP ip_str = _sanitize_ipv4_mapping(ip_str) DCNL DCSP if unpack_ipv4: DCNL DCSP  DCSP ipv4_unpacked = _unpack_ipv4(ip_str) DCNL DCSP  DCSP if ipv4_unpacked: DCNL DCSP  DCSP  DCSP return ipv4_unpacked DCNL DCSP hextets = ip_str.split(':') DCNL DCSP for index in range(len(hextets)): DCNL DCSP  DCSP hextets[index] = hextets[index].lstrip('0') DCNL DCSP  DCSP if (not hextets[index]): DCNL DCSP  DCSP  DCSP hextets[index] = '0' DCNL DCSP  DCSP if (hextets[index] == '0'): DCNL DCSP  DCSP  DCSP doublecolon_len += 1 DCNL DCSP  DCSP  DCSP if (doublecolon_start == (-1)): DCNL DCSP  DCSP  DCSP  DCSP doublecolon_start = index DCNL DCSP  DCSP  DCSP if (doublecolon_len > best_doublecolon_len): DCNL DCSP  DCSP  DCSP  DCSP best_doublecolon_len = doublecolon_len DCNL DCSP  DCSP  DCSP  DCSP best_doublecolon_start = doublecolon_start DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP doublecolon_len = 0 DCNL DCSP  DCSP  DCSP doublecolon_start = (-1) DCNL DCSP if (best_doublecolon_len > 1): DCNL DCSP  DCSP best_doublecolon_end = (best_doublecolon_start + best_doublecolon_len) DCNL DCSP  DCSP if (best_doublecolon_end == len(hextets)): DCNL DCSP  DCSP  DCSP hextets += [''] DCNL DCSP  DCSP hextets[best_doublecolon_start:best_doublecolon_end] = [''] DCNL DCSP  DCSP if (best_doublecolon_start == 0): DCNL DCSP  DCSP  DCSP hextets = ([''] + hextets) DCNL DCSP result = ':'.join(hextets) DCNL DCSP return result.lower()
def _sanitize_ipv4_mapping(ip_str): DCNL  DCSP if (not ip_str.lower().startswith('0000:0000:0000:0000:0000:ffff:')): DCNL DCSP  DCSP return ip_str DCNL DCSP hextets = ip_str.split(':') DCNL DCSP if ('.' in hextets[(-1)]): DCNL DCSP  DCSP return ip_str DCNL DCSP ipv4_address = ('%d.%d.%d.%d' % (int(hextets[6][0:2], 16), int(hextets[6][2:4], 16), int(hextets[7][0:2], 16), int(hextets[7][2:4], 16))) DCNL DCSP result = ':'.join(hextets[0:6]) DCNL DCSP result += (':' + ipv4_address) DCNL DCSP return result
def _unpack_ipv4(ip_str): DCNL  DCSP if (not ip_str.lower().startswith('0000:0000:0000:0000:0000:ffff:')): DCNL DCSP  DCSP return None DCNL DCSP hextets = ip_str.split(':') DCNL DCSP return hextets[(-1)]
def is_valid_ipv6_address(ip_str): DCNL  DCSP from django.core.validators import validate_ipv4_address DCNL DCSP if (':' not in ip_str): DCNL DCSP  DCSP return False DCNL DCSP if (ip_str.count('::') > 1): DCNL DCSP  DCSP return False DCNL DCSP if (':::' in ip_str): DCNL DCSP  DCSP return False DCNL DCSP if ((ip_str.startswith(':') and (not ip_str.startswith('::'))) or (ip_str.endswith(':') and (not ip_str.endswith('::')))): DCNL DCSP  DCSP return False DCNL DCSP if (ip_str.count(':') > 7): DCNL DCSP  DCSP return False DCNL DCSP if (('::' not in ip_str) and (ip_str.count(':') != 7)): DCNL DCSP  DCSP if (ip_str.count('.') != 3): DCNL DCSP  DCSP  DCSP return False DCNL DCSP ip_str = _explode_shorthand_ip_string(ip_str) DCNL DCSP for hextet in ip_str.split(':'): DCNL DCSP  DCSP if (hextet.count('.') == 3): DCNL DCSP  DCSP  DCSP if (not (ip_str.split(':')[(-1)] == hextet)): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP validate_ipv4_address(hextet) DCNL DCSP  DCSP  DCSP except ValidationError: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if ((int(hextet, 16) < 0) or (int(hextet, 16) > 65535)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP return True
def _explode_shorthand_ip_string(ip_str): DCNL  DCSP if (not _is_shorthand_ip(ip_str)): DCNL DCSP  DCSP return ip_str DCNL DCSP new_ip = [] DCNL DCSP hextet = ip_str.split('::') DCNL DCSP if ('.' in ip_str.split(':')[(-1)]): DCNL DCSP  DCSP fill_to = 7 DCNL DCSP else: DCNL DCSP  DCSP fill_to = 8 DCNL DCSP if (len(hextet) > 1): DCNL DCSP  DCSP sep = (len(hextet[0].split(':')) + len(hextet[1].split(':'))) DCNL DCSP  DCSP new_ip = hextet[0].split(':') DCNL DCSP  DCSP for _ in xrange((fill_to - sep)): DCNL DCSP  DCSP  DCSP new_ip.append('0000') DCNL DCSP  DCSP new_ip += hextet[1].split(':') DCNL DCSP else: DCNL DCSP  DCSP new_ip = ip_str.split(':') DCNL DCSP ret_ip = [] DCNL DCSP for hextet in new_ip: DCNL DCSP  DCSP ret_ip.append((('0' * (4 - len(hextet))) + hextet).lower()) DCNL DCSP return ':'.join(ret_ip)
def _is_shorthand_ip(ip_str): DCNL  DCSP if (ip_str.count('::') == 1): DCNL DCSP  DCSP return True DCNL DCSP if any(((len(x) < 4) for x in ip_str.split(':'))): DCNL DCSP  DCSP return True DCNL DCSP return False
def reset_format_cache(): DCNL  DCSP global _format_cache, _format_modules_cache DCNL DCSP _format_cache = {} DCNL DCSP _format_modules_cache = {}
def iter_format_modules(lang): DCNL  DCSP if check_for_language(lang): DCNL DCSP  DCSP format_locations = ['django.conf.locale.%s'] DCNL DCSP  DCSP if settings.FORMAT_MODULE_PATH: DCNL DCSP  DCSP  DCSP format_locations.append((settings.FORMAT_MODULE_PATH + '.%s')) DCNL DCSP  DCSP  DCSP format_locations.reverse() DCNL DCSP  DCSP locale = to_locale(lang) DCNL DCSP  DCSP locales = [locale] DCNL DCSP  DCSP if ('_' in locale): DCNL DCSP  DCSP  DCSP locales.append(locale.split('_')[0]) DCNL DCSP  DCSP for location in format_locations: DCNL DCSP  DCSP  DCSP for loc in locales: DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield import_module('.formats', (location % loc))) DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass
def get_format_modules(lang=None, reverse=False): DCNL  DCSP if (lang is None): DCNL DCSP  DCSP lang = get_language() DCNL DCSP modules = _format_modules_cache.setdefault(lang, list(iter_format_modules(lang))) DCNL DCSP if reverse: DCNL DCSP  DCSP return list(reversed(modules)) DCNL DCSP return modules
def get_format(format_type, lang=None, use_l10n=None): DCNL  DCSP format_type = force_str(format_type) DCNL DCSP if (use_l10n or ((use_l10n is None) and settings.USE_L10N)): DCNL DCSP  DCSP if (lang is None): DCNL DCSP  DCSP  DCSP lang = get_language() DCNL DCSP  DCSP cache_key = (format_type, lang) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cached = _format_cache[cache_key] DCNL DCSP  DCSP  DCSP if (cached is not None): DCNL DCSP  DCSP  DCSP  DCSP return cached DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return getattr(settings, format_type) DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP for module in get_format_modules(lang): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP val = getattr(module, format_type) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for iso_input in ISO_INPUT_FORMATS.get(format_type, ()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (iso_input not in val): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(val, tuple): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP val = list(val) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP val.append(iso_input) DCNL DCSP  DCSP  DCSP  DCSP  DCSP _format_cache[cache_key] = val DCNL DCSP  DCSP  DCSP  DCSP  DCSP return val DCNL DCSP  DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP _format_cache[cache_key] = None DCNL DCSP return getattr(settings, format_type)
def date_format(value, format=None, use_l10n=None): DCNL  DCSP return dateformat.format(value, get_format((format or 'DATE_FORMAT'), use_l10n=use_l10n))
def time_format(value, format=None, use_l10n=None): DCNL  DCSP return dateformat.time_format(value, get_format((format or 'TIME_FORMAT'), use_l10n=use_l10n))
def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False): DCNL  DCSP if (use_l10n or ((use_l10n is None) and settings.USE_L10N)): DCNL DCSP  DCSP lang = get_language() DCNL DCSP else: DCNL DCSP  DCSP lang = None DCNL DCSP return numberformat.format(value, get_format('DECIMAL_SEPARATOR', lang, use_l10n=use_l10n), decimal_pos, get_format('NUMBER_GROUPING', lang, use_l10n=use_l10n), get_format('THOUSAND_SEPARATOR', lang, use_l10n=use_l10n), force_grouping=force_grouping)
def localize(value, use_l10n=None): DCNL  DCSP if isinstance(value, bool): DCNL DCSP  DCSP return mark_safe(six.text_type(value)) DCNL DCSP elif isinstance(value, ((decimal.Decimal, float) + six.integer_types)): DCNL DCSP  DCSP return number_format(value, use_l10n=use_l10n) DCNL DCSP elif isinstance(value, datetime.datetime): DCNL DCSP  DCSP return date_format(value, 'DATETIME_FORMAT', use_l10n=use_l10n) DCNL DCSP elif isinstance(value, datetime.date): DCNL DCSP  DCSP return date_format(value, use_l10n=use_l10n) DCNL DCSP elif isinstance(value, datetime.time): DCNL DCSP  DCSP return time_format(value, 'TIME_FORMAT', use_l10n=use_l10n) DCNL DCSP else: DCNL DCSP  DCSP return value
def localize_input(value, default=None): DCNL  DCSP if isinstance(value, ((decimal.Decimal, float) + six.integer_types)): DCNL DCSP  DCSP return number_format(value) DCNL DCSP elif isinstance(value, datetime.datetime): DCNL DCSP  DCSP value = datetime_safe.new_datetime(value) DCNL DCSP  DCSP format = force_str((default or get_format('DATETIME_INPUT_FORMATS')[0])) DCNL DCSP  DCSP return value.strftime(format) DCNL DCSP elif isinstance(value, datetime.date): DCNL DCSP  DCSP value = datetime_safe.new_date(value) DCNL DCSP  DCSP format = force_str((default or get_format('DATE_INPUT_FORMATS')[0])) DCNL DCSP  DCSP return value.strftime(format) DCNL DCSP elif isinstance(value, datetime.time): DCNL DCSP  DCSP format = force_str((default or get_format('TIME_INPUT_FORMATS')[0])) DCNL DCSP  DCSP return value.strftime(format) DCNL DCSP return value
def sanitize_separators(value): DCNL  DCSP if settings.USE_L10N: DCNL DCSP  DCSP decimal_separator = get_format('DECIMAL_SEPARATOR') DCNL DCSP  DCSP if isinstance(value, six.string_types): DCNL DCSP  DCSP  DCSP parts = [] DCNL DCSP  DCSP  DCSP if (decimal_separator in value): DCNL DCSP  DCSP  DCSP  DCSP (value, decimals) = value.split(decimal_separator, 1) DCNL DCSP  DCSP  DCSP  DCSP parts.append(decimals) DCNL DCSP  DCSP  DCSP if settings.USE_THOUSAND_SEPARATOR: DCNL DCSP  DCSP  DCSP  DCSP parts.append(value.replace(get_format('THOUSAND_SEPARATOR'), '')) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP parts.append(value) DCNL DCSP  DCSP  DCSP value = '.'.join(reversed(parts)) DCNL DCSP return value
def salted_hmac(key_salt, value, secret=None): DCNL  DCSP if (secret is None): DCNL DCSP  DCSP secret = settings.SECRET_KEY DCNL DCSP key = hashlib.sha1((key_salt + secret).encode(u'utf-8')).digest() DCNL DCSP return hmac.new(key, msg=force_bytes(value), digestmod=hashlib.sha1)
def get_random_string(length=12, allowed_chars=u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'): DCNL  DCSP if (not using_sysrandom): DCNL DCSP  DCSP random.seed(hashlib.sha256((u'%s%s%s' % (random.getstate(), time.time(), settings.SECRET_KEY)).encode(u'utf-8')).digest()) DCNL DCSP return u''.join([random.choice(allowed_chars) for i in range(length)])
def constant_time_compare(val1, val2): DCNL  DCSP if (len(val1) != len(val2)): DCNL DCSP  DCSP return False DCNL DCSP result = 0 DCNL DCSP if (six.PY3 and isinstance(val1, bytes) and isinstance(val2, bytes)): DCNL DCSP  DCSP for (x, y) in zip(val1, val2): DCNL DCSP  DCSP  DCSP result |= (x ^ y) DCNL DCSP else: DCNL DCSP  DCSP for (x, y) in zip(val1, val2): DCNL DCSP  DCSP  DCSP result |= (ord(x) ^ ord(y)) DCNL DCSP return (result == 0)
def _bin_to_long(x): DCNL  DCSP return int(binascii.hexlify(x), 16)
def _long_to_bin(x, hex_format_string): DCNL  DCSP return binascii.unhexlify((hex_format_string % x).encode(u'ascii'))
def _fast_hmac(key, msg, digest): DCNL  DCSP (dig1, dig2) = (digest(), digest()) DCNL DCSP if (len(key) > dig1.block_size): DCNL DCSP  DCSP key = digest(key).digest() DCNL DCSP key += ('\x00' * (dig1.block_size - len(key))) DCNL DCSP dig1.update(key.translate(_trans_36)) DCNL DCSP dig1.update(msg) DCNL DCSP dig2.update(key.translate(_trans_5c)) DCNL DCSP dig2.update(dig1.digest()) DCNL DCSP return dig2
def pbkdf2(password, salt, iterations, dklen=0, digest=None): DCNL  DCSP assert (iterations > 0) DCNL DCSP if (not digest): DCNL DCSP  DCSP digest = hashlib.sha256 DCNL DCSP password = force_bytes(password) DCNL DCSP salt = force_bytes(salt) DCNL DCSP hlen = digest().digest_size DCNL DCSP if (not dklen): DCNL DCSP  DCSP dklen = hlen DCNL DCSP if (dklen > (((2 ** 32) - 1) * hlen)): DCNL DCSP  DCSP raise OverflowError(u'dklen DCSP too DCSP big') DCNL DCSP l = (- ((- dklen) // hlen)) DCNL DCSP r = (dklen - ((l - 1) * hlen)) DCNL DCSP hex_format_string = (u'%%0%ix' % (hlen * 2)) DCNL DCSP def F(i): DCNL DCSP  DCSP def U(): DCNL DCSP  DCSP  DCSP u = (salt + struct.pack('>I', i)) DCNL DCSP  DCSP  DCSP for j in xrange(int(iterations)): DCNL DCSP  DCSP  DCSP  DCSP u = _fast_hmac(password, u, digest).digest() DCNL DCSP  DCSP  DCSP  DCSP (yield _bin_to_long(u)) DCNL DCSP  DCSP return _long_to_bin(reduce(operator.xor, U()), hex_format_string) DCNL DCSP T = [F(x) for x in range(1, (l + 1))] DCNL DCSP return (''.join(T[:(-1)]) + T[(-1)][:r])
def luhn(candidate): DCNL  DCSP if (not isinstance(candidate, six.string_types)): DCNL DCSP  DCSP candidate = str(candidate) DCNL DCSP try: DCNL DCSP  DCSP evens = sum([int(c) for c in candidate[(-1)::(-2)]]) DCNL DCSP  DCSP odds = sum([LUHN_ODD_LOOKUP[int(c)] for c in candidate[(-2)::(-2)]]) DCNL DCSP  DCSP return (((evens + odds) % 10) == 0) DCNL DCSP except ValueError: DCNL DCSP  DCSP return False
def _resolve_name(name, package, level): DCNL  DCSP if (not hasattr(package, 'rindex')): DCNL DCSP  DCSP raise ValueError("'package' DCSP not DCSP set DCSP to DCSP a DCSP string") DCNL DCSP dot = len(package) DCNL DCSP for x in range(level, 1, (-1)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP dot = package.rindex('.', 0, dot) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise ValueError('attempted DCSP relative DCSP import DCSP beyond DCSP top-level DCSP package') DCNL DCSP return ('%s.%s' % (package[:dot], name))
def import_module(name, package=None): DCNL  DCSP if name.startswith('.'): DCNL DCSP  DCSP if (not package): DCNL DCSP  DCSP  DCSP raise TypeError("relative DCSP imports DCSP require DCSP the DCSP 'package' DCSP argument") DCNL DCSP  DCSP level = 0 DCNL DCSP  DCSP for character in name: DCNL DCSP  DCSP  DCSP if (character != '.'): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP level += 1 DCNL DCSP  DCSP name = _resolve_name(name[level:], package, level) DCNL DCSP __import__(name) DCNL DCSP return sys.modules[name]
def escape(text): DCNL  DCSP return mark_safe(force_text(text).replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;').replace(u'"', u'&quot;').replace(u"'", u'&#39;'))
def escapejs(value): DCNL  DCSP return mark_safe(force_text(value).translate(_js_escapes))
def conditional_escape(text): DCNL  DCSP if isinstance(text, SafeData): DCNL DCSP  DCSP return text DCNL DCSP else: DCNL DCSP  DCSP return escape(text)
def format_html(format_string, *args, **kwargs): DCNL  DCSP args_safe = map(conditional_escape, args) DCNL DCSP kwargs_safe = dict([(k, conditional_escape(v)) for (k, v) in six.iteritems(kwargs)]) DCNL DCSP return mark_safe(format_string.format(*args_safe, **kwargs_safe))
def format_html_join(sep, format_string, args_generator): DCNL  DCSP return mark_safe(conditional_escape(sep).join((format_html(format_string, *tuple(args)) for args in args_generator)))
def linebreaks(value, autoescape=False): DCNL  DCSP value = normalize_newlines(value) DCNL DCSP paras = re.split(u'\n{2,}', value) DCNL DCSP if autoescape: DCNL DCSP  DCSP paras = [(u'<p>%s</p>' % escape(p).replace(u'\n', u'<br DCSP />')) for p in paras] DCNL DCSP else: DCNL DCSP  DCSP paras = [(u'<p>%s</p>' % p.replace(u'\n', u'<br DCSP />')) for p in paras] DCNL DCSP return u'\n\n'.join(paras)
def strip_tags(value): DCNL  DCSP return strip_tags_re.sub(u'', force_text(value))
def remove_tags(html, tags): DCNL  DCSP tags = [re.escape(tag) for tag in tags.split()] DCNL DCSP tags_re = (u'(%s)' % u'|'.join(tags)) DCNL DCSP starttag_re = re.compile((u'<%s(/?>|(\\s+[^>]*>))' % tags_re), re.U) DCNL DCSP endtag_re = re.compile((u'</%s>' % tags_re)) DCNL DCSP html = starttag_re.sub(u'', html) DCNL DCSP html = endtag_re.sub(u'', html) DCNL DCSP return html
def strip_spaces_between_tags(value): DCNL  DCSP return re.sub(u'>\\s+<', u'><', force_text(value))
def strip_entities(value): DCNL  DCSP return re.sub(u'&(?:\\w+|#\\d+);', u'', force_text(value))
def fix_ampersands(value): DCNL  DCSP return unencoded_ampersands_re.sub(u'&amp;', force_text(value))
def smart_urlquote(url): DCNL  DCSP (scheme, netloc, path, query, fragment) = urlsplit(url) DCNL DCSP try: DCNL DCSP  DCSP netloc = netloc.encode(u'idna').decode(u'ascii') DCNL DCSP except UnicodeError: DCNL DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP url = urlunsplit((scheme, netloc, path, query, fragment)) DCNL DCSP if ((u'%' not in url) or unquoted_percents_re.search(url)): DCNL DCSP  DCSP url = quote(force_bytes(url), safe="!*'();:@&=+$,/?#[]~") DCNL DCSP return force_text(url)
def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False): DCNL  DCSP trim_url = (lambda x, limit=trim_url_limit: (((limit is not None) and ((len(x) > limit) and (u'%s...' % x[:max(0, (limit - 3))]))) or x)) DCNL DCSP safe_input = isinstance(text, SafeData) DCNL DCSP words = word_split_re.split(force_text(text)) DCNL DCSP for (i, word) in enumerate(words): DCNL DCSP  DCSP match = None DCNL DCSP  DCSP if ((u'.' in word) or (u'@' in word) or (u':' in word)): DCNL DCSP  DCSP  DCSP (lead, middle, trail) = (u'', word, u'') DCNL DCSP  DCSP  DCSP for punctuation in TRAILING_PUNCTUATION: DCNL DCSP  DCSP  DCSP  DCSP if middle.endswith(punctuation): DCNL DCSP  DCSP  DCSP  DCSP  DCSP middle = middle[:(- len(punctuation))] DCNL DCSP  DCSP  DCSP  DCSP  DCSP trail = (punctuation + trail) DCNL DCSP  DCSP  DCSP for (opening, closing) in WRAPPING_PUNCTUATION: DCNL DCSP  DCSP  DCSP  DCSP if middle.startswith(opening): DCNL DCSP  DCSP  DCSP  DCSP  DCSP middle = middle[len(opening):] DCNL DCSP  DCSP  DCSP  DCSP  DCSP lead = (lead + opening) DCNL DCSP  DCSP  DCSP  DCSP if (middle.endswith(closing) and (middle.count(closing) == (middle.count(opening) + 1))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP middle = middle[:(- len(closing))] DCNL DCSP  DCSP  DCSP  DCSP  DCSP trail = (closing + trail) DCNL DCSP  DCSP  DCSP url = None DCNL DCSP  DCSP  DCSP nofollow_attr = (u' DCSP rel="nofollow"' if nofollow else u'') DCNL DCSP  DCSP  DCSP if simple_url_re.match(middle): DCNL DCSP  DCSP  DCSP  DCSP url = smart_urlquote(middle) DCNL DCSP  DCSP  DCSP elif simple_url_2_re.match(middle): DCNL DCSP  DCSP  DCSP  DCSP url = smart_urlquote((u'http://%s' % middle)) DCNL DCSP  DCSP  DCSP elif ((not (u':' in middle)) and simple_email_re.match(middle)): DCNL DCSP  DCSP  DCSP  DCSP (local, domain) = middle.rsplit(u'@', 1) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP domain = domain.encode(u'idna').decode(u'ascii') DCNL DCSP  DCSP  DCSP  DCSP except UnicodeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP url = (u'mailto:%s@%s' % (local, domain)) DCNL DCSP  DCSP  DCSP  DCSP nofollow_attr = u'' DCNL DCSP  DCSP  DCSP if url: DCNL DCSP  DCSP  DCSP  DCSP trimmed = trim_url(middle) DCNL DCSP  DCSP  DCSP  DCSP if (autoescape and (not safe_input)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (lead, trail) = (escape(lead), escape(trail)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP (url, trimmed) = (escape(url), escape(trimmed)) DCNL DCSP  DCSP  DCSP  DCSP middle = (u'<a DCSP href="%s"%s>%s</a>' % (url, nofollow_attr, trimmed)) DCNL DCSP  DCSP  DCSP  DCSP words[i] = mark_safe((u'%s%s%s' % (lead, middle, trail))) DCNL DCSP  DCSP  DCSP elif safe_input: DCNL DCSP  DCSP  DCSP  DCSP words[i] = mark_safe(word) DCNL DCSP  DCSP  DCSP elif autoescape: DCNL DCSP  DCSP  DCSP  DCSP words[i] = escape(word) DCNL DCSP  DCSP elif safe_input: DCNL DCSP  DCSP  DCSP words[i] = mark_safe(word) DCNL DCSP  DCSP elif autoescape: DCNL DCSP  DCSP  DCSP words[i] = escape(word) DCNL DCSP return u''.join(words)
def clean_html(text): DCNL  DCSP from django.utils.text import normalize_newlines DCNL DCSP text = normalize_newlines(force_text(text)) DCNL DCSP text = re.sub(u'<(/?)\\s*b\\s*>', u'<\\1strong>', text) DCNL DCSP text = re.sub(u'<(/?)\\s*i\\s*>', u'<\\1em>', text) DCNL DCSP text = fix_ampersands(text) DCNL DCSP text = link_target_attribute_re.sub(u'\\1', text) DCNL DCSP text = html_gunk_re.sub(u'', text) DCNL DCSP def replace_p_tags(match): DCNL DCSP  DCSP s = match.group().replace(u'</p>', u'</li>') DCNL DCSP  DCSP for d in DOTS: DCNL DCSP  DCSP  DCSP s = s.replace((u'<p>%s' % d), u'<li>') DCNL DCSP  DCSP return (u'<ul>\n%s\n</ul>' % s) DCNL DCSP text = hard_coded_bullets_re.sub(replace_p_tags, text) DCNL DCSP text = trailing_empty_content_re.sub(u'', text) DCNL DCSP return text
def _CmpToKey(mycmp): DCNL  DCSP class K(object, ): DCNL DCSP  DCSP def __init__(self, obj): DCNL DCSP  DCSP  DCSP self.obj = obj DCNL DCSP  DCSP def __lt__(self, other): DCNL DCSP  DCSP  DCSP return (mycmp(self.obj, other.obj) == (-1)) DCNL DCSP return K
def _relpath_nt(path, start=os.path.curdir): DCNL  DCSP if (not path): DCNL DCSP  DCSP raise ValueError('no DCSP path DCSP specified') DCNL DCSP start_list = os.path.abspath(start).split(os.path.sep) DCNL DCSP path_list = os.path.abspath(path).split(os.path.sep) DCNL DCSP if (start_list[0].lower() != path_list[0].lower()): DCNL DCSP  DCSP (unc_path, rest) = os.path.splitunc(path) DCNL DCSP  DCSP (unc_start, rest) = os.path.splitunc(start) DCNL DCSP  DCSP if (bool(unc_path) ^ bool(unc_start)): DCNL DCSP  DCSP  DCSP raise ValueError(('Cannot DCSP mix DCSP UNC DCSP and DCSP non-UNC DCSP paths DCSP (%s DCSP and DCSP %s)' % (path, start))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise ValueError(('path DCSP is DCSP on DCSP drive DCSP %s, DCSP start DCSP on DCSP drive DCSP %s' % (path_list[0], start_list[0]))) DCNL DCSP for i in range(min(len(start_list), len(path_list))): DCNL DCSP  DCSP if (start_list[i].lower() != path_list[i].lower()): DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP i += 1 DCNL DCSP rel_list = (([os.path.pardir] * (len(start_list) - i)) + path_list[i:]) DCNL DCSP if (not rel_list): DCNL DCSP  DCSP return os.path.curdir DCNL DCSP return os.path.join(*rel_list)
def _relpath_posix(path, start=os.path.curdir): DCNL  DCSP if (not path): DCNL DCSP  DCSP raise ValueError('no DCSP path DCSP specified') DCNL DCSP start_list = os.path.abspath(start).split(os.path.sep) DCNL DCSP path_list = os.path.abspath(path).split(os.path.sep) DCNL DCSP i = len(os.path.commonprefix([start_list, path_list])) DCNL DCSP rel_list = (([os.path.pardir] * (len(start_list) - i)) + path_list[i:]) DCNL DCSP if (not rel_list): DCNL DCSP  DCSP return os.path.curdir DCNL DCSP return os.path.join(*rel_list)
def skip(reason): DCNL  DCSP def decorator(test_item): DCNL DCSP  DCSP if (not (isinstance(test_item, type) and issubclass(test_item, TestCase))): DCNL DCSP  DCSP  DCSP @wraps(test_item) DCNL DCSP  DCSP  DCSP def skip_wrapper(*args, **kwargs): DCNL DCSP  DCSP  DCSP  DCSP raise SkipTest(reason) DCNL DCSP  DCSP  DCSP test_item = skip_wrapper DCNL DCSP  DCSP test_item.__unittest_skip__ = True DCNL DCSP  DCSP test_item.__unittest_skip_why__ = reason DCNL DCSP  DCSP return test_item DCNL DCSP return decorator
def skipIf(condition, reason): DCNL  DCSP if condition: DCNL DCSP  DCSP return skip(reason) DCNL DCSP return _id
def skipUnless(condition, reason): DCNL  DCSP if (not condition): DCNL DCSP  DCSP return skip(reason) DCNL DCSP return _id
def _isnotsuite(test): DCNL  DCSP try: DCNL DCSP  DCSP iter(test) DCNL DCSP except TypeError: DCNL DCSP  DCSP return True DCNL DCSP return False
def sorted_list_difference(expected, actual): DCNL  DCSP i = j = 0 DCNL DCSP missing = [] DCNL DCSP unexpected = [] DCNL DCSP while True: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP e = expected[i] DCNL DCSP  DCSP  DCSP a = actual[j] DCNL DCSP  DCSP  DCSP if (e < a): DCNL DCSP  DCSP  DCSP  DCSP missing.append(e) DCNL DCSP  DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP  DCSP  DCSP while (expected[i] == e): DCNL DCSP  DCSP  DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP  DCSP elif (e > a): DCNL DCSP  DCSP  DCSP  DCSP unexpected.append(a) DCNL DCSP  DCSP  DCSP  DCSP j += 1 DCNL DCSP  DCSP  DCSP  DCSP while (actual[j] == a): DCNL DCSP  DCSP  DCSP  DCSP  DCSP j += 1 DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP while (expected[i] == e): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP i += 1 DCNL DCSP  DCSP  DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP  DCSP  DCSP j += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP while (actual[j] == a): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP j += 1 DCNL DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP missing.extend(expected[i:]) DCNL DCSP  DCSP  DCSP unexpected.extend(actual[j:]) DCNL DCSP  DCSP  DCSP break DCNL DCSP return (missing, unexpected)
def unorderable_list_difference(expected, actual, ignore_duplicate=False): DCNL  DCSP missing = [] DCNL DCSP unexpected = [] DCNL DCSP while expected: DCNL DCSP  DCSP item = expected.pop() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP actual.remove(item) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP missing.append(item) DCNL DCSP  DCSP if ignore_duplicate: DCNL DCSP  DCSP  DCSP for lst in (expected, actual): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP lst.remove(item) DCNL DCSP  DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP if ignore_duplicate: DCNL DCSP  DCSP while actual: DCNL DCSP  DCSP  DCSP item = actual.pop() DCNL DCSP  DCSP  DCSP unexpected.append(item) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP while True: DCNL DCSP  DCSP  DCSP  DCSP  DCSP actual.remove(item) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP return (missing, unexpected) DCNL DCSP return (missing, actual)
def parse_date(value): DCNL  DCSP match = date_re.match(value) DCNL DCSP if match: DCNL DCSP  DCSP kw = dict(((k, int(v)) for (k, v) in six.iteritems(match.groupdict()))) DCNL DCSP  DCSP return datetime.date(**kw)
def parse_time(value): DCNL  DCSP match = time_re.match(value) DCNL DCSP if match: DCNL DCSP  DCSP kw = match.groupdict() DCNL DCSP  DCSP if kw['microsecond']: DCNL DCSP  DCSP  DCSP kw['microsecond'] = kw['microsecond'].ljust(6, '0') DCNL DCSP  DCSP kw = dict(((k, int(v)) for (k, v) in six.iteritems(kw) if (v is not None))) DCNL DCSP  DCSP return datetime.time(**kw)
def parse_datetime(value): DCNL  DCSP match = datetime_re.match(value) DCNL DCSP if match: DCNL DCSP  DCSP kw = match.groupdict() DCNL DCSP  DCSP if kw['microsecond']: DCNL DCSP  DCSP  DCSP kw['microsecond'] = kw['microsecond'].ljust(6, '0') DCNL DCSP  DCSP tzinfo = kw.pop('tzinfo') DCNL DCSP  DCSP if (tzinfo == 'Z'): DCNL DCSP  DCSP  DCSP tzinfo = utc DCNL DCSP  DCSP elif (tzinfo is not None): DCNL DCSP  DCSP  DCSP offset = ((60 * int(tzinfo[1:3])) + int(tzinfo[(-2):])) DCNL DCSP  DCSP  DCSP if (tzinfo[0] == '-'): DCNL DCSP  DCSP  DCSP  DCSP offset = (- offset) DCNL DCSP  DCSP  DCSP tzinfo = FixedOffset(offset) DCNL DCSP  DCSP kw = dict(((k, int(v)) for (k, v) in six.iteritems(kw) if (v is not None))) DCNL DCSP  DCSP kw['tzinfo'] = tzinfo DCNL DCSP  DCSP return datetime.datetime(**kw)
def extract(path, to_path=''): DCNL  DCSP with Archive(path) as archive: DCNL DCSP  DCSP archive.extract(to_path)
def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', force_grouping=False): DCNL  DCSP use_grouping = (settings.USE_L10N and settings.USE_THOUSAND_SEPARATOR) DCNL DCSP use_grouping = (use_grouping or force_grouping) DCNL DCSP use_grouping = (use_grouping and (grouping > 0)) DCNL DCSP if (isinstance(number, int) and (not use_grouping) and (not decimal_pos)): DCNL DCSP  DCSP return mark_safe(six.text_type(number)) DCNL DCSP sign = '' DCNL DCSP str_number = six.text_type(number) DCNL DCSP if (str_number[0] == '-'): DCNL DCSP  DCSP sign = '-' DCNL DCSP  DCSP str_number = str_number[1:] DCNL DCSP if ('.' in str_number): DCNL DCSP  DCSP (int_part, dec_part) = str_number.split('.') DCNL DCSP  DCSP if (decimal_pos is not None): DCNL DCSP  DCSP  DCSP dec_part = dec_part[:decimal_pos] DCNL DCSP else: DCNL DCSP  DCSP (int_part, dec_part) = (str_number, '') DCNL DCSP if (decimal_pos is not None): DCNL DCSP  DCSP dec_part = (dec_part + ('0' * (decimal_pos - len(dec_part)))) DCNL DCSP if dec_part: DCNL DCSP  DCSP dec_part = (decimal_sep + dec_part) DCNL DCSP if use_grouping: DCNL DCSP  DCSP int_part_gd = '' DCNL DCSP  DCSP for (cnt, digit) in enumerate(int_part[::(-1)]): DCNL DCSP  DCSP  DCSP if (cnt and (not (cnt % grouping))): DCNL DCSP  DCSP  DCSP  DCSP int_part_gd += thousand_sep DCNL DCSP  DCSP  DCSP int_part_gd += digit DCNL DCSP  DCSP int_part = int_part_gd[::(-1)] DCNL DCSP return ((sign + int_part) + dec_part)
def get_version(version=None): DCNL  DCSP if (version is None): DCNL DCSP  DCSP from django import VERSION as version DCNL DCSP else: DCNL DCSP  DCSP assert (len(version) == 5) DCNL DCSP  DCSP assert (version[3] in (u'alpha', u'beta', u'rc', u'final')) DCNL DCSP parts = (2 if (version[2] == 0) else 3) DCNL DCSP main = u'.'.join((str(x) for x in version[:parts])) DCNL DCSP sub = u'' DCNL DCSP if ((version[3] == u'alpha') and (version[4] == 0)): DCNL DCSP  DCSP git_changeset = get_git_changeset() DCNL DCSP  DCSP if git_changeset: DCNL DCSP  DCSP  DCSP sub = (u'.dev%s' % git_changeset) DCNL DCSP elif (version[3] != u'final'): DCNL DCSP  DCSP mapping = {u'alpha': u'a', u'beta': u'b', u'rc': u'c'} DCNL DCSP  DCSP sub = (mapping[version[3]] + str(version[4])) DCNL DCSP return str((main + sub))
def get_git_changeset(): DCNL  DCSP repo_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) DCNL DCSP git_log = subprocess.Popen(u'git DCSP log DCSP --pretty=format:%ct DCSP --quiet DCSP -1 DCSP HEAD', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, cwd=repo_dir, universal_newlines=True) DCNL DCSP timestamp = git_log.communicate()[0] DCNL DCSP try: DCNL DCSP  DCSP timestamp = datetime.datetime.utcfromtimestamp(int(timestamp)) DCNL DCSP except ValueError: DCNL DCSP  DCSP return None DCNL DCSP return timestamp.strftime(u'%Y%m%d%H%M%S')
def to_locale(language, to_lower=False): DCNL  DCSP p = language.find(u'-') DCNL DCSP if (p >= 0): DCNL DCSP  DCSP if to_lower: DCNL DCSP  DCSP  DCSP return ((language[:p].lower() + u'_') + language[(p + 1):].lower()) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (len(language[(p + 1):]) > 2): DCNL DCSP  DCSP  DCSP  DCSP return (((language[:p].lower() + u'_') + language[(p + 1)].upper()) + language[(p + 2):].lower()) DCNL DCSP  DCSP  DCSP return ((language[:p].lower() + u'_') + language[(p + 1):].upper()) DCNL DCSP else: DCNL DCSP  DCSP return language.lower()
def to_language(locale): DCNL  DCSP p = locale.find(u'_') DCNL DCSP if (p >= 0): DCNL DCSP  DCSP return ((locale[:p].lower() + u'-') + locale[(p + 1):].lower()) DCNL DCSP else: DCNL DCSP  DCSP return locale.lower()
def translation(language): DCNL  DCSP global _translations DCNL DCSP t = _translations.get(language, None) DCNL DCSP if (t is not None): DCNL DCSP  DCSP return t DCNL DCSP from django.conf import settings DCNL DCSP globalpath = os.path.join(os.path.dirname(upath(sys.modules[settings.__module__].__file__)), u'locale') DCNL DCSP def _fetch(lang, fallback=None): DCNL DCSP  DCSP global _translations DCNL DCSP  DCSP res = _translations.get(lang, None) DCNL DCSP  DCSP if (res is not None): DCNL DCSP  DCSP  DCSP return res DCNL DCSP  DCSP loc = to_locale(lang) DCNL DCSP  DCSP def _translation(path): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP t = gettext_module.translation(u'django', path, [loc], DjangoTranslation) DCNL DCSP  DCSP  DCSP  DCSP t.set_language(lang) DCNL DCSP  DCSP  DCSP  DCSP return t DCNL DCSP  DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP  DCSP return None DCNL DCSP  DCSP res = _translation(globalpath) DCNL DCSP  DCSP base_lang = (lambda x: x.split(u'-', 1)[0]) DCNL DCSP  DCSP if (base_lang(lang) in [base_lang(trans) for trans in _translations]): DCNL DCSP  DCSP  DCSP res._info = res._info.copy() DCNL DCSP  DCSP  DCSP res._catalog = res._catalog.copy() DCNL DCSP  DCSP def _merge(path): DCNL DCSP  DCSP  DCSP t = _translation(path) DCNL DCSP  DCSP  DCSP if (t is not None): DCNL DCSP  DCSP  DCSP  DCSP if (res is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return t DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP res.merge(t) DCNL DCSP  DCSP  DCSP return res DCNL DCSP  DCSP for appname in reversed(settings.INSTALLED_APPS): DCNL DCSP  DCSP  DCSP app = import_module(appname) DCNL DCSP  DCSP  DCSP apppath = os.path.join(os.path.dirname(upath(app.__file__)), u'locale') DCNL DCSP  DCSP  DCSP if os.path.isdir(apppath): DCNL DCSP  DCSP  DCSP  DCSP res = _merge(apppath) DCNL DCSP  DCSP for localepath in reversed(settings.LOCALE_PATHS): DCNL DCSP  DCSP  DCSP if os.path.isdir(localepath): DCNL DCSP  DCSP  DCSP  DCSP res = _merge(localepath) DCNL DCSP  DCSP if (res is None): DCNL DCSP  DCSP  DCSP if (fallback is not None): DCNL DCSP  DCSP  DCSP  DCSP res = fallback DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return gettext_module.NullTranslations() DCNL DCSP  DCSP _translations[lang] = res DCNL DCSP  DCSP return res DCNL DCSP default_translation = _fetch(settings.LANGUAGE_CODE) DCNL DCSP current_translation = _fetch(language, fallback=default_translation) DCNL DCSP return current_translation
def activate(language): DCNL  DCSP _active.value = translation(language)
def deactivate(): DCNL  DCSP if hasattr(_active, u'value'): DCNL DCSP  DCSP del _active.value
def deactivate_all(): DCNL  DCSP _active.value = gettext_module.NullTranslations()
def get_language(): DCNL  DCSP t = getattr(_active, u'value', None) DCNL DCSP if (t is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return t.to_language() DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP from django.conf import settings DCNL DCSP return settings.LANGUAGE_CODE
def get_language_bidi(): DCNL  DCSP from django.conf import settings DCNL DCSP base_lang = get_language().split(u'-')[0] DCNL DCSP return (base_lang in settings.LANGUAGES_BIDI)
def catalog(): DCNL  DCSP global _default DCNL DCSP t = getattr(_active, u'value', None) DCNL DCSP if (t is not None): DCNL DCSP  DCSP return t DCNL DCSP if (_default is None): DCNL DCSP  DCSP from django.conf import settings DCNL DCSP  DCSP _default = translation(settings.LANGUAGE_CODE) DCNL DCSP return _default
def do_translate(message, translation_function): DCNL  DCSP global _default DCNL DCSP eol_message = ((message and message.replace(str(u'\r\n'), str(u'\n')).replace(str(u'\r'), str(u'\n'))) or None) DCNL DCSP t = getattr(_active, u'value', None) DCNL DCSP if (t is not None): DCNL DCSP  DCSP result = getattr(t, translation_function)(eol_message) DCNL DCSP else: DCNL DCSP  DCSP if (_default is None): DCNL DCSP  DCSP  DCSP from django.conf import settings DCNL DCSP  DCSP  DCSP _default = translation(settings.LANGUAGE_CODE) DCNL DCSP  DCSP result = getattr(_default, translation_function)(eol_message) DCNL DCSP if isinstance(message, SafeData): DCNL DCSP  DCSP return mark_safe(result) DCNL DCSP return result
def gettext(message): DCNL  DCSP return do_translate(message, u'gettext')
def gettext_noop(message): DCNL  DCSP return message
def ngettext(singular, plural, number): DCNL  DCSP return do_ntranslate(singular, plural, number, u'ngettext')
def all_locale_paths(): DCNL  DCSP from django.conf import settings DCNL DCSP globalpath = os.path.join(os.path.dirname(upath(sys.modules[settings.__module__].__file__)), u'locale') DCNL DCSP return ([globalpath] + list(settings.LOCALE_PATHS))
def check_for_language(lang_code): DCNL  DCSP for path in all_locale_paths(): DCNL DCSP  DCSP if (gettext_module.find(u'django', path, [to_locale(lang_code)]) is not None): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def get_language_from_path(path, supported=None): DCNL  DCSP if (supported is None): DCNL DCSP  DCSP from django.conf import settings DCNL DCSP  DCSP supported = dict(settings.LANGUAGES) DCNL DCSP regex_match = language_code_prefix_re.match(path) DCNL DCSP if regex_match: DCNL DCSP  DCSP lang_code = regex_match.group(1) DCNL DCSP  DCSP if ((lang_code in supported) and check_for_language(lang_code)): DCNL DCSP  DCSP  DCSP return lang_code
def get_language_from_request(request, check_path=False): DCNL  DCSP global _accepted DCNL DCSP from django.conf import settings DCNL DCSP supported = dict(settings.LANGUAGES) DCNL DCSP if check_path: DCNL DCSP  DCSP lang_code = get_language_from_path(request.path_info, supported) DCNL DCSP  DCSP if (lang_code is not None): DCNL DCSP  DCSP  DCSP return lang_code DCNL DCSP if hasattr(request, u'session'): DCNL DCSP  DCSP lang_code = request.session.get(u'django_language', None) DCNL DCSP  DCSP if ((lang_code in supported) and (lang_code is not None) and check_for_language(lang_code)): DCNL DCSP  DCSP  DCSP return lang_code DCNL DCSP lang_code = request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME) DCNL DCSP if (lang_code and (lang_code not in supported)): DCNL DCSP  DCSP lang_code = lang_code.split(u'-')[0] DCNL DCSP if (lang_code and (lang_code in supported) and check_for_language(lang_code)): DCNL DCSP  DCSP return lang_code DCNL DCSP accept = request.META.get(u'HTTP_ACCEPT_LANGUAGE', u'') DCNL DCSP for (accept_lang, unused) in parse_accept_lang_header(accept): DCNL DCSP  DCSP if (accept_lang == u'*'): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP normalized = locale.locale_alias.get(to_locale(accept_lang, True)) DCNL DCSP  DCSP if (not normalized): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP normalized = normalized.split(u'.')[0] DCNL DCSP  DCSP if (normalized in _accepted): DCNL DCSP  DCSP  DCSP return _accepted[normalized] DCNL DCSP  DCSP for (lang, dirname) in ((accept_lang, normalized), (accept_lang.split(u'-')[0], normalized.split(u'_')[0])): DCNL DCSP  DCSP  DCSP if (lang.lower() not in supported): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP for path in all_locale_paths(): DCNL DCSP  DCSP  DCSP  DCSP if os.path.exists(os.path.join(path, dirname, u'LC_MESSAGES', u'django.mo')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP _accepted[normalized] = lang DCNL DCSP  DCSP  DCSP  DCSP  DCSP return lang DCNL DCSP lang_code = settings.LANGUAGE_CODE DCNL DCSP if (lang_code and (lang_code not in supported)): DCNL DCSP  DCSP lang_code = lang_code.split(u'-')[0] DCNL DCSP if (lang_code and (lang_code in supported) and check_for_language(lang_code)): DCNL DCSP  DCSP return lang_code DCNL DCSP else: DCNL DCSP  DCSP return u'en'
def blankout(src, char): DCNL  DCSP return dot_re.sub(char, src)
def templatize(src, origin=None): DCNL  DCSP from django.conf import settings DCNL DCSP from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT, TRANSLATOR_COMMENT_MARK DCNL DCSP src = force_text(src, settings.FILE_CHARSET) DCNL DCSP out = StringIO() DCNL DCSP message_context = None DCNL DCSP intrans = False DCNL DCSP inplural = False DCNL DCSP singular = [] DCNL DCSP plural = [] DCNL DCSP incomment = False DCNL DCSP comment = [] DCNL DCSP for t in Lexer(src, origin).tokenize(): DCNL DCSP  DCSP if incomment: DCNL DCSP  DCSP  DCSP if ((t.token_type == TOKEN_BLOCK) and (t.contents == u'endcomment')): DCNL DCSP  DCSP  DCSP  DCSP content = u''.join(comment) DCNL DCSP  DCSP  DCSP  DCSP translators_comment_start = None DCNL DCSP  DCSP  DCSP  DCSP for (lineno, line) in enumerate(content.splitlines(True)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if line.lstrip().startswith(TRANSLATOR_COMMENT_MARK): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP translators_comment_start = lineno DCNL DCSP  DCSP  DCSP  DCSP for (lineno, line) in enumerate(content.splitlines(True)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((translators_comment_start is not None) and (lineno >= translators_comment_start)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP # DCSP %s' % line)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write(u' DCSP #\n') DCNL DCSP  DCSP  DCSP  DCSP incomment = False DCNL DCSP  DCSP  DCSP  DCSP comment = [] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP comment.append(t.contents) DCNL DCSP  DCSP elif intrans: DCNL DCSP  DCSP  DCSP if (t.token_type == TOKEN_BLOCK): DCNL DCSP  DCSP  DCSP  DCSP endbmatch = endblock_re.match(t.contents) DCNL DCSP  DCSP  DCSP  DCSP pluralmatch = plural_re.match(t.contents) DCNL DCSP  DCSP  DCSP  DCSP if endbmatch: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if inplural: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if message_context: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP npgettext(%r, DCSP %r, DCSP %r,count) DCSP ' % (message_context, u''.join(singular), u''.join(plural)))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP ngettext(%r, DCSP %r, DCSP count) DCSP ' % (u''.join(singular), u''.join(plural)))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for part in singular: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write(blankout(part, u'S')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for part in plural: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write(blankout(part, u'P')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if message_context: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP pgettext(%r, DCSP %r) DCSP ' % (message_context, u''.join(singular)))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP gettext(%r) DCSP ' % u''.join(singular))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for part in singular: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP out.write(blankout(part, u'S')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_context = None DCNL DCSP  DCSP  DCSP  DCSP  DCSP intrans = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP inplural = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP singular = [] DCNL DCSP  DCSP  DCSP  DCSP  DCSP plural = [] DCNL DCSP  DCSP  DCSP  DCSP elif pluralmatch: DCNL DCSP  DCSP  DCSP  DCSP  DCSP inplural = True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP filemsg = u'' DCNL DCSP  DCSP  DCSP  DCSP  DCSP if origin: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP filemsg = (u'file DCSP %s, DCSP ' % origin) DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise SyntaxError((u'Translation DCSP blocks DCSP must DCSP not DCSP include DCSP other DCSP block DCSP tags: DCSP %s DCSP (%sline DCSP %d)' % (t.contents, filemsg, t.lineno))) DCNL DCSP  DCSP  DCSP elif (t.token_type == TOKEN_VAR): DCNL DCSP  DCSP  DCSP  DCSP if inplural: DCNL DCSP  DCSP  DCSP  DCSP  DCSP plural.append((u'%%(%s)s' % t.contents)) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP singular.append((u'%%(%s)s' % t.contents)) DCNL DCSP  DCSP  DCSP elif (t.token_type == TOKEN_TEXT): DCNL DCSP  DCSP  DCSP  DCSP contents = one_percent_re.sub(u'%%', t.contents) DCNL DCSP  DCSP  DCSP  DCSP if inplural: DCNL DCSP  DCSP  DCSP  DCSP  DCSP plural.append(contents) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP singular.append(contents) DCNL DCSP  DCSP elif (t.token_type == TOKEN_BLOCK): DCNL DCSP  DCSP  DCSP imatch = inline_re.match(t.contents) DCNL DCSP  DCSP  DCSP bmatch = block_re.match(t.contents) DCNL DCSP  DCSP  DCSP cmatches = constant_re.findall(t.contents) DCNL DCSP  DCSP  DCSP hbmatches = constant_hb_re.findall(t.contents) DCNL DCSP  DCSP  DCSP if imatch: DCNL DCSP  DCSP  DCSP  DCSP g = imatch.group(1) DCNL DCSP  DCSP  DCSP  DCSP if (g[0] == u'"'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP g = g.strip(u'"') DCNL DCSP  DCSP  DCSP  DCSP elif (g[0] == u"'"): DCNL DCSP  DCSP  DCSP  DCSP  DCSP g = g.strip(u"'") DCNL DCSP  DCSP  DCSP  DCSP g = one_percent_re.sub(u'%%', g) DCNL DCSP  DCSP  DCSP  DCSP if imatch.group(2): DCNL DCSP  DCSP  DCSP  DCSP  DCSP context_match = context_re.match(imatch.group(2)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_context = context_match.group(1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (message_context[0] == u'"'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP message_context = message_context.strip(u'"') DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (message_context[0] == u"'"): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP message_context = message_context.strip(u"'") DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP pgettext(%r, DCSP %r) DCSP ' % (message_context, g))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_context = None DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP gettext(%r) DCSP ' % g)) DCNL DCSP  DCSP  DCSP elif bmatch: DCNL DCSP  DCSP  DCSP  DCSP for fmatch in constant_re.findall(t.contents): DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % fmatch)) DCNL DCSP  DCSP  DCSP  DCSP for hbmatch in constant_hb_re.findall(t.contents): DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % hbmatch)) DCNL DCSP  DCSP  DCSP  DCSP if bmatch.group(1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP context_match = context_re.match(bmatch.group(1)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_context = context_match.group(1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (message_context[0] == u'"'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP message_context = message_context.strip(u'"') DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif (message_context[0] == u"'"): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP message_context = message_context.strip(u"'") DCNL DCSP  DCSP  DCSP  DCSP intrans = True DCNL DCSP  DCSP  DCSP  DCSP inplural = False DCNL DCSP  DCSP  DCSP  DCSP singular = [] DCNL DCSP  DCSP  DCSP  DCSP plural = [] DCNL DCSP  DCSP  DCSP elif cmatches: DCNL DCSP  DCSP  DCSP  DCSP for cmatch in cmatches: DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % cmatch)) DCNL DCSP  DCSP  DCSP elif hbmatches: DCNL DCSP  DCSP  DCSP  DCSP for hbmatch in hbmatches: DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % hbmatch)) DCNL DCSP  DCSP  DCSP elif (t.contents == u'comment'): DCNL DCSP  DCSP  DCSP  DCSP incomment = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP out.write(blankout(t.contents, u'B')) DCNL DCSP  DCSP elif (t.token_type == TOKEN_VAR): DCNL DCSP  DCSP  DCSP parts = t.contents.split(u'|') DCNL DCSP  DCSP  DCSP cmatch = constant_re.match(parts[0]) DCNL DCSP  DCSP  DCSP if cmatch: DCNL DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % cmatch.group(1))) DCNL DCSP  DCSP  DCSP hbmatch = constant_hb_re.match(parts[0]) DCNL DCSP  DCSP  DCSP if hbmatch: DCNL DCSP  DCSP  DCSP  DCSP out.write((u' DCSP _(%s) DCSP ' % hbmatch.group(1))) DCNL DCSP  DCSP  DCSP for p in parts[1:]: DCNL DCSP  DCSP  DCSP  DCSP if (p.find(u':_(') >= 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write((u' DCSP %s DCSP ' % p.split(u':', 1)[1])) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP out.write(blankout(p, u'F')) DCNL DCSP  DCSP elif (t.token_type == TOKEN_COMMENT): DCNL DCSP  DCSP  DCSP out.write((u' DCSP # DCSP %s' % t.contents)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP out.write(blankout(t.contents, u'X')) DCNL DCSP return force_str(out.getvalue())
def parse_accept_lang_header(lang_string): DCNL  DCSP result = [] DCNL DCSP pieces = accept_language_re.split(lang_string) DCNL DCSP if pieces[(-1)]: DCNL DCSP  DCSP return [] DCNL DCSP for i in range(0, (len(pieces) - 1), 3): DCNL DCSP  DCSP (first, lang, priority) = pieces[i:(i + 3)] DCNL DCSP  DCSP if first: DCNL DCSP  DCSP  DCSP return [] DCNL DCSP  DCSP priority = ((priority and float(priority)) or 1.0) DCNL DCSP  DCSP result.append((lang, priority)) DCNL DCSP result.sort(key=(lambda k: k[1]), reverse=True) DCNL DCSP return result
def _string_concat(*strings): DCNL  DCSP return u''.join([force_text(s) for s in strings])
def memoize(func, cache, num_args): DCNL  DCSP @wraps(func) DCNL DCSP def wrapper(*args): DCNL DCSP  DCSP mem_args = args[:num_args] DCNL DCSP  DCSP if (mem_args in cache): DCNL DCSP  DCSP  DCSP return cache[mem_args] DCNL DCSP  DCSP result = func(*args) DCNL DCSP  DCSP cache[mem_args] = result DCNL DCSP  DCSP return result DCNL DCSP return wrapper
def lazy(func, *resultclasses): DCNL  DCSP @total_ordering DCNL DCSP class __proxy__(Promise, ): DCNL DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Encapsulate DCSP a DCSP function DCSP call DCSP and DCSP act DCSP as DCSP a DCSP proxy DCSP for DCSP methods DCSP that DCSP are\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP called DCSP on DCSP the DCSP result DCSP of DCSP that DCSP function. DCSP The DCSP function DCSP is DCSP not DCSP evaluated\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP until DCSP one DCSP of DCSP the DCSP methods DCSP on DCSP the DCSP result DCSP is DCSP called.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP __dispatch = None DCNL DCSP  DCSP def __init__(self, args, kw): DCNL DCSP  DCSP  DCSP self.__args = args DCNL DCSP  DCSP  DCSP self.__kw = kw DCNL DCSP  DCSP  DCSP if (self.__dispatch is None): DCNL DCSP  DCSP  DCSP  DCSP self.__prepare_class__() DCNL DCSP  DCSP def __reduce__(self): DCNL DCSP  DCSP  DCSP return (_lazy_proxy_unpickle, ((func, self.__args, self.__kw) + resultclasses)) DCNL DCSP  DCSP def __prepare_class__(cls): DCNL DCSP  DCSP  DCSP cls.__dispatch = {} DCNL DCSP  DCSP  DCSP for resultclass in resultclasses: DCNL DCSP  DCSP  DCSP  DCSP cls.__dispatch[resultclass] = {} DCNL DCSP  DCSP  DCSP  DCSP for type_ in reversed(resultclass.mro()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP for (k, v) in type_.__dict__.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP meth = cls.__promise__(resultclass, k, v) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if hasattr(cls, k): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP setattr(cls, k, meth) DCNL DCSP  DCSP  DCSP cls._delegate_bytes = (bytes in resultclasses) DCNL DCSP  DCSP  DCSP cls._delegate_text = (six.text_type in resultclasses) DCNL DCSP  DCSP  DCSP assert (not (cls._delegate_bytes and cls._delegate_text)), 'Cannot DCSP call DCSP lazy() DCSP with DCSP both DCSP bytes DCSP and DCSP text DCSP return DCSP types.' DCNL DCSP  DCSP  DCSP if cls._delegate_text: DCNL DCSP  DCSP  DCSP  DCSP if six.PY3: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cls.__str__ = cls.__text_cast DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cls.__unicode__ = cls.__text_cast DCNL DCSP  DCSP  DCSP elif cls._delegate_bytes: DCNL DCSP  DCSP  DCSP  DCSP if six.PY3: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cls.__bytes__ = cls.__bytes_cast DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cls.__str__ = cls.__bytes_cast DCNL DCSP  DCSP __prepare_class__ = classmethod(__prepare_class__) DCNL DCSP  DCSP def __promise__(cls, klass, funcname, method): DCNL DCSP  DCSP  DCSP def __wrapper__(self, *args, **kw): DCNL DCSP  DCSP  DCSP  DCSP res = func(*self.__args, **self.__kw) DCNL DCSP  DCSP  DCSP  DCSP if (type(res) not in self.__dispatch): DCNL DCSP  DCSP  DCSP  DCSP  DCSP res = self.__dispatch.keys()[0](res) DCNL DCSP  DCSP  DCSP  DCSP for t in type(res).mro(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (t in self.__dispatch): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return self.__dispatch[t][funcname](res, *args, **kw) DCNL DCSP  DCSP  DCSP  DCSP raise TypeError('Lazy DCSP object DCSP returned DCSP unexpected DCSP type.') DCNL DCSP  DCSP  DCSP if (klass not in cls.__dispatch): DCNL DCSP  DCSP  DCSP  DCSP cls.__dispatch[klass] = {} DCNL DCSP  DCSP  DCSP cls.__dispatch[klass][funcname] = method DCNL DCSP  DCSP  DCSP return __wrapper__ DCNL DCSP  DCSP __promise__ = classmethod(__promise__) DCNL DCSP  DCSP def __text_cast(self): DCNL DCSP  DCSP  DCSP return func(*self.__args, **self.__kw) DCNL DCSP  DCSP def __bytes_cast(self): DCNL DCSP  DCSP  DCSP return bytes(func(*self.__args, **self.__kw)) DCNL DCSP  DCSP def __cast(self): DCNL DCSP  DCSP  DCSP if self._delegate_bytes: DCNL DCSP  DCSP  DCSP  DCSP return self.__bytes_cast() DCNL DCSP  DCSP  DCSP elif self._delegate_text: DCNL DCSP  DCSP  DCSP  DCSP return self.__text_cast() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return func(*self.__args, **self.__kw) DCNL DCSP  DCSP def __eq__(self, other): DCNL DCSP  DCSP  DCSP if isinstance(other, Promise): DCNL DCSP  DCSP  DCSP  DCSP other = other.__cast() DCNL DCSP  DCSP  DCSP return (self.__cast() == other) DCNL DCSP  DCSP def __lt__(self, other): DCNL DCSP  DCSP  DCSP if isinstance(other, Promise): DCNL DCSP  DCSP  DCSP  DCSP other = other.__cast() DCNL DCSP  DCSP  DCSP return (self.__cast() < other) DCNL DCSP  DCSP def __hash__(self): DCNL DCSP  DCSP  DCSP return hash(self.__cast()) DCNL DCSP  DCSP def __mod__(self, rhs): DCNL DCSP  DCSP  DCSP if (self._delegate_bytes and (not six.PY3)): DCNL DCSP  DCSP  DCSP  DCSP return (bytes(self) % rhs) DCNL DCSP  DCSP  DCSP elif self._delegate_text: DCNL DCSP  DCSP  DCSP  DCSP return (six.text_type(self) % rhs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise AssertionError('__mod__ DCSP not DCSP supported DCSP for DCSP non-string DCSP types') DCNL DCSP  DCSP def __deepcopy__(self, memo): DCNL DCSP  DCSP  DCSP memo[id(self)] = self DCNL DCSP  DCSP  DCSP return self DCNL DCSP @wraps(func) DCNL DCSP def __wrapper__(*args, **kw): DCNL DCSP  DCSP return __proxy__(args, kw) DCNL DCSP return __wrapper__
def allow_lazy(func, *resultclasses): DCNL  DCSP @wraps(func) DCNL DCSP def wrapper(*args, **kwargs): DCNL DCSP  DCSP for arg in (list(args) + list(six.itervalues(kwargs))): DCNL DCSP  DCSP  DCSP if isinstance(arg, Promise): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return func(*args, **kwargs) DCNL DCSP  DCSP return lazy(func, *resultclasses)(*args, **kwargs) DCNL DCSP return wrapper
def partition(predicate, values): DCNL  DCSP results = ([], []) DCNL DCSP for item in values: DCNL DCSP  DCSP results[predicate(item)].append(item) DCNL DCSP return results
def literals(choices, prefix='', suffix=''): DCNL  DCSP return '|'.join((((prefix + re.escape(c)) + suffix) for c in choices.split()))
def prepare_js_for_gettext(js): DCNL  DCSP def escape_quotes(m): DCNL DCSP  DCSP 'Used DCSP in DCSP a DCSP regex DCSP to DCSP properly DCSP escape DCSP double DCSP quotes.' DCNL DCSP  DCSP s = m.group(0) DCNL DCSP  DCSP if (s == '"'): DCNL DCSP  DCSP  DCSP return '\\"' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return s DCNL DCSP lexer = JsLexer() DCNL DCSP c = [] DCNL DCSP for (name, tok) in lexer.lex(js): DCNL DCSP  DCSP if (name == 'regex'): DCNL DCSP  DCSP  DCSP tok = '"REGEX"' DCNL DCSP  DCSP elif (name == 'string'): DCNL DCSP  DCSP  DCSP if tok.startswith("'"): DCNL DCSP  DCSP  DCSP  DCSP guts = re.sub('\\\\.|.', escape_quotes, tok[1:(-1)]) DCNL DCSP  DCSP  DCSP  DCSP tok = (('"' + guts) + '"') DCNL DCSP  DCSP elif (name == 'id'): DCNL DCSP  DCSP  DCSP tok = tok.replace('\\', 'U') DCNL DCSP  DCSP c.append(tok) DCNL DCSP return ''.join(c)
def _add_doc(func, doc): DCNL  DCSP func.__doc__ = doc
def _import_module(name): DCNL  DCSP __import__(name) DCNL DCSP return sys.modules[name]
def add_move(move): DCNL  DCSP setattr(_MovedItems, move.name, move)
def remove_move(name): DCNL  DCSP try: DCNL DCSP  DCSP delattr(_MovedItems, name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP del moves.__dict__[name] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise AttributeError(('no DCSP such DCSP move, DCSP %r' % (name,)))
def iterkeys(d, **kw): DCNL  DCSP return iter(getattr(d, _iterkeys)(**kw))
def itervalues(d, **kw): DCNL  DCSP return iter(getattr(d, _itervalues)(**kw))
def iteritems(d, **kw): DCNL  DCSP return iter(getattr(d, _iteritems)(**kw))
def iterlists(d, **kw): DCNL  DCSP return iter(getattr(d, _iterlists)(**kw))
def with_metaclass(meta, base=object): DCNL  DCSP return meta('NewBase', (base,), {})
def format(value, format_string): DCNL  DCSP df = DateFormat(value) DCNL DCSP return df.format(format_string)
def time_format(value, format_string): DCNL  DCSP tf = TimeFormat(value) DCNL DCSP return tf.format(format_string)
def method_decorator(decorator): DCNL  DCSP def _dec(func): DCNL DCSP  DCSP def _wrapper(self, *args, **kwargs): DCNL DCSP  DCSP  DCSP @decorator DCNL DCSP  DCSP  DCSP def bound_func(*args2, **kwargs2): DCNL DCSP  DCSP  DCSP  DCSP return func(self, *args2, **kwargs2) DCNL DCSP  DCSP  DCSP return bound_func(*args, **kwargs) DCNL DCSP  DCSP @decorator DCNL DCSP  DCSP def dummy(*args, **kwargs): DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP update_wrapper(_wrapper, dummy) DCNL DCSP  DCSP update_wrapper(_wrapper, func) DCNL DCSP  DCSP return _wrapper DCNL DCSP update_wrapper(_dec, decorator) DCNL DCSP _dec.__name__ = ('method_decorator(%s)' % decorator.__name__) DCNL DCSP return _dec
def decorator_from_middleware_with_args(middleware_class): DCNL  DCSP return make_middleware_decorator(middleware_class)
def decorator_from_middleware(middleware_class): DCNL  DCSP return make_middleware_decorator(middleware_class)()
def available_attrs(fn): DCNL  DCSP return tuple((a for a in WRAPPER_ASSIGNMENTS if hasattr(fn, a)))
def mark_safe(s): DCNL  DCSP if isinstance(s, SafeData): DCNL DCSP  DCSP return s DCNL DCSP if (isinstance(s, bytes) or (isinstance(s, Promise) and s._delegate_bytes)): DCNL DCSP  DCSP return SafeBytes(s) DCNL DCSP if isinstance(s, (six.text_type, Promise)): DCNL DCSP  DCSP return SafeText(s) DCNL DCSP return SafeString(str(s))
def mark_for_escaping(s): DCNL  DCSP if isinstance(s, (SafeData, EscapeData)): DCNL DCSP  DCSP return s DCNL DCSP if (isinstance(s, bytes) or (isinstance(s, Promise) and s._delegate_bytes)): DCNL DCSP  DCSP return EscapeBytes(s) DCNL DCSP if isinstance(s, (six.text_type, Promise)): DCNL DCSP  DCSP return EscapeText(s) DCNL DCSP return EscapeBytes(bytes(s))
def new_date(d): DCNL  DCSP return date(d.year, d.month, d.day)
def new_datetime(d): DCNL  DCSP kw = [d.year, d.month, d.day] DCNL DCSP if isinstance(d, real_datetime): DCNL DCSP  DCSP kw.extend([d.hour, d.minute, d.second, d.microsecond, d.tzinfo]) DCNL DCSP return datetime(*kw)
def get_tag_uri(url, date): DCNL  DCSP bits = urlparse(url) DCNL DCSP d = u'' DCNL DCSP if (date is not None): DCNL DCSP  DCSP d = (u',%s' % datetime_safe.new_datetime(date).strftime(u'%Y-%m-%d')) DCNL DCSP return (u'tag:%s%s:%s/%s' % (bits.hostname, d, bits.path, bits.fragment))
def abort(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.abort()
def enter_transaction_management(managed=True, using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.enter_transaction_management(managed)
def leave_transaction_management(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.leave_transaction_management()
def is_dirty(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP return connection.is_dirty()
def set_dirty(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.set_dirty()
def set_clean(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.set_clean()
def is_managed(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP return connection.is_managed()
def managed(flag=True, using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.managed(flag)
def commit_unless_managed(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.commit_unless_managed()
def rollback_unless_managed(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.rollback_unless_managed()
def commit(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.commit()
def rollback(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.rollback()
def savepoint(using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP return connection.savepoint()
def savepoint_rollback(sid, using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.savepoint_rollback(sid)
def savepoint_commit(sid, using=None): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP connection = connections[using] DCNL DCSP connection.savepoint_commit(sid)
def _transaction_func(entering, exiting, using): DCNL  DCSP if (using is None): DCNL DCSP  DCSP using = DEFAULT_DB_ALIAS DCNL DCSP if callable(using): DCNL DCSP  DCSP return Transaction(entering, exiting, DEFAULT_DB_ALIAS)(using) DCNL DCSP return Transaction(entering, exiting, using)
def autocommit(using=None): DCNL  DCSP def entering(using): DCNL DCSP  DCSP enter_transaction_management(managed=False, using=using) DCNL DCSP  DCSP managed(False, using=using) DCNL DCSP def exiting(exc_value, using): DCNL DCSP  DCSP leave_transaction_management(using=using) DCNL DCSP return _transaction_func(entering, exiting, using)
def commit_on_success(using=None): DCNL  DCSP def entering(using): DCNL DCSP  DCSP enter_transaction_management(using=using) DCNL DCSP  DCSP managed(True, using=using) DCNL DCSP def exiting(exc_value, using): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if (exc_value is not None): DCNL DCSP  DCSP  DCSP  DCSP if is_dirty(using=using): DCNL DCSP  DCSP  DCSP  DCSP  DCSP rollback(using=using) DCNL DCSP  DCSP  DCSP elif is_dirty(using=using): DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP commit(using=using) DCNL DCSP  DCSP  DCSP  DCSP except: DCNL DCSP  DCSP  DCSP  DCSP  DCSP rollback(using=using) DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP leave_transaction_management(using=using) DCNL DCSP return _transaction_func(entering, exiting, using)
def commit_manually(using=None): DCNL  DCSP def entering(using): DCNL DCSP  DCSP enter_transaction_management(using=using) DCNL DCSP  DCSP managed(True, using=using) DCNL DCSP def exiting(exc_value, using): DCNL DCSP  DCSP leave_transaction_management(using=using) DCNL DCSP return _transaction_func(entering, exiting, using)
def get_order_dir(field, default='ASC'): DCNL  DCSP dirn = ORDER_DIR[default] DCNL DCSP if (field[0] == '-'): DCNL DCSP  DCSP return (field[1:], dirn[1]) DCNL DCSP return (field, dirn[0])
def setup_join_cache(sender, **kwargs): DCNL  DCSP sender._meta._join_cache = {}
def add_to_dict(data, key, value): DCNL  DCSP if (key in data): DCNL DCSP  DCSP data[key].add(value) DCNL DCSP else: DCNL DCSP  DCSP data[key] = set([value])
def is_reverse_o2o(field): DCNL  DCSP return ((not hasattr(field, 'rel')) and field.field.unique)
def order_modified_iter(cursor, trim, sentinel): DCNL  DCSP for rows in iter((lambda : cursor.fetchmany(GET_ITERATOR_CHUNK_SIZE)), sentinel): DCNL DCSP  DCSP (yield [r[:(- trim)] for r in rows])
def make_contrib(superclass, func=None): DCNL  DCSP def contribute_to_class(self, cls, name): DCNL DCSP  DCSP if func: DCNL DCSP  DCSP  DCSP func(self, cls, name) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP super(superclass, self).contribute_to_class(cls, name) DCNL DCSP  DCSP setattr(cls, self.name, Creator(self)) DCNL DCSP return contribute_to_class
def add_lazy_relation(cls, field, relation, operation): DCNL  DCSP if (relation == RECURSIVE_RELATIONSHIP_CONSTANT): DCNL DCSP  DCSP app_label = cls._meta.app_label DCNL DCSP  DCSP model_name = cls.__name__ DCNL DCSP elif isinstance(relation, six.string_types): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (app_label, model_name) = relation.split('.') DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP app_label = cls._meta.app_label DCNL DCSP  DCSP  DCSP model_name = relation DCNL DCSP else: DCNL DCSP  DCSP app_label = relation._meta.app_label DCNL DCSP  DCSP model_name = relation._meta.object_name DCNL DCSP model = get_model(app_label, model_name, seed_cache=False, only_installed=False) DCNL DCSP if model: DCNL DCSP  DCSP operation(field, model, cls) DCNL DCSP else: DCNL DCSP  DCSP key = (app_label, model_name) DCNL DCSP  DCSP value = (cls, field, operation) DCNL DCSP  DCSP pending_lookups.setdefault(key, []).append(value)
def do_pending_lookups(sender, **kwargs): DCNL  DCSP key = (sender._meta.app_label, sender.__name__) DCNL DCSP for (cls, field, operation) in pending_lookups.pop(key, []): DCNL DCSP  DCSP operation(field, sender, cls)
def create_many_related_manager(superclass, rel): DCNL  DCSP class ManyRelatedManager(superclass, ): DCNL DCSP  DCSP def __init__(self, model=None, query_field_name=None, instance=None, symmetrical=None, source_field_name=None, target_field_name=None, reverse=False, through=None, prefetch_cache_name=None): DCNL DCSP  DCSP  DCSP super(ManyRelatedManager, self).__init__() DCNL DCSP  DCSP  DCSP self.model = model DCNL DCSP  DCSP  DCSP self.query_field_name = query_field_name DCNL DCSP  DCSP  DCSP self.core_filters = {('%s__pk' % query_field_name): instance._get_pk_val()} DCNL DCSP  DCSP  DCSP self.instance = instance DCNL DCSP  DCSP  DCSP self.symmetrical = symmetrical DCNL DCSP  DCSP  DCSP self.source_field_name = source_field_name DCNL DCSP  DCSP  DCSP self.target_field_name = target_field_name DCNL DCSP  DCSP  DCSP self.reverse = reverse DCNL DCSP  DCSP  DCSP self.through = through DCNL DCSP  DCSP  DCSP self.prefetch_cache_name = prefetch_cache_name DCNL DCSP  DCSP  DCSP self._fk_val = self._get_fk_val(instance, source_field_name) DCNL DCSP  DCSP  DCSP if (self._fk_val is None): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(('"%r" DCSP needs DCSP to DCSP have DCSP a DCSP value DCSP for DCSP field DCSP "%s" DCSP before DCSP this DCSP many-to-many DCSP relationship DCSP can DCSP be DCSP used.' % (instance, source_field_name))) DCNL DCSP  DCSP  DCSP if (instance.pk is None): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(('%r DCSP instance DCSP needs DCSP to DCSP have DCSP a DCSP primary DCSP key DCSP value DCSP before DCSP a DCSP many-to-many DCSP relationship DCSP can DCSP be DCSP used.' % instance.__class__.__name__)) DCNL DCSP  DCSP def _get_fk_val(self, obj, field_name): DCNL DCSP  DCSP  DCSP "\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Returns DCSP the DCSP correct DCSP value DCSP for DCSP this DCSP relationship's DCSP foreign DCSP key. DCSP This\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP might DCSP be DCSP something DCSP else DCSP than DCSP pk DCSP value DCSP when DCSP to_field DCSP is DCSP used.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP " DCNL DCSP  DCSP  DCSP if (not self.through): DCNL DCSP  DCSP  DCSP  DCSP return obj.pk DCNL DCSP  DCSP  DCSP fk = self.through._meta.get_field(field_name) DCNL DCSP  DCSP  DCSP if (fk.rel.field_name and (fk.rel.field_name != fk.rel.to._meta.pk.attname)): DCNL DCSP  DCSP  DCSP  DCSP attname = fk.rel.get_related_field().get_attname() DCNL DCSP  DCSP  DCSP  DCSP return fk.get_prep_lookup('exact', getattr(obj, attname)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP return obj.pk DCNL DCSP  DCSP def get_query_set(self): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP return self.instance._prefetched_objects_cache[self.prefetch_cache_name] DCNL DCSP  DCSP  DCSP except (AttributeError, KeyError): DCNL DCSP  DCSP  DCSP  DCSP db = (self._db or router.db_for_read(self.instance.__class__, instance=self.instance)) DCNL DCSP  DCSP  DCSP  DCSP return super(ManyRelatedManager, self).get_query_set().using(db)._next_is_sticky().filter(**self.core_filters) DCNL DCSP  DCSP def get_prefetch_query_set(self, instances): DCNL DCSP  DCSP  DCSP instance = instances[0] DCNL DCSP  DCSP  DCSP from django.db import connections DCNL DCSP  DCSP  DCSP db = (self._db or router.db_for_read(instance.__class__, instance=instance)) DCNL DCSP  DCSP  DCSP query = {('%s__pk__in' % self.query_field_name): set((obj._get_pk_val() for obj in instances))} DCNL DCSP  DCSP  DCSP qs = super(ManyRelatedManager, self).get_query_set().using(db)._next_is_sticky().filter(**query) DCNL DCSP  DCSP  DCSP fk = self.through._meta.get_field(self.source_field_name) DCNL DCSP  DCSP  DCSP source_col = fk.column DCNL DCSP  DCSP  DCSP join_table = self.through._meta.db_table DCNL DCSP  DCSP  DCSP connection = connections[db] DCNL DCSP  DCSP  DCSP qn = connection.ops.quote_name DCNL DCSP  DCSP  DCSP qs = qs.extra(select={'_prefetch_related_val': ('%s.%s' % (qn(join_table), qn(source_col)))}) DCNL DCSP  DCSP  DCSP select_attname = fk.rel.get_related_field().get_attname() DCNL DCSP  DCSP  DCSP return (qs, attrgetter('_prefetch_related_val'), attrgetter(select_attname), False, self.prefetch_cache_name) DCNL DCSP  DCSP if rel.through._meta.auto_created: DCNL DCSP  DCSP  DCSP def add(self, *objs): DCNL DCSP  DCSP  DCSP  DCSP self._add_items(self.source_field_name, self.target_field_name, *objs) DCNL DCSP  DCSP  DCSP  DCSP if self.symmetrical: DCNL DCSP  DCSP  DCSP  DCSP  DCSP self._add_items(self.target_field_name, self.source_field_name, *objs) DCNL DCSP  DCSP  DCSP add.alters_data = True DCNL DCSP  DCSP  DCSP def remove(self, *objs): DCNL DCSP  DCSP  DCSP  DCSP self._remove_items(self.source_field_name, self.target_field_name, *objs) DCNL DCSP  DCSP  DCSP  DCSP if self.symmetrical: DCNL DCSP  DCSP  DCSP  DCSP  DCSP self._remove_items(self.target_field_name, self.source_field_name, *objs) DCNL DCSP  DCSP  DCSP remove.alters_data = True DCNL DCSP  DCSP def clear(self): DCNL DCSP  DCSP  DCSP self._clear_items(self.source_field_name) DCNL DCSP  DCSP  DCSP if self.symmetrical: DCNL DCSP  DCSP  DCSP  DCSP self._clear_items(self.target_field_name) DCNL DCSP  DCSP clear.alters_data = True DCNL DCSP  DCSP def create(self, **kwargs): DCNL DCSP  DCSP  DCSP if (not self.through._meta.auto_created): DCNL DCSP  DCSP  DCSP  DCSP opts = self.through._meta DCNL DCSP  DCSP  DCSP  DCSP raise AttributeError(("Cannot DCSP use DCSP create() DCSP on DCSP a DCSP ManyToManyField DCSP which DCSP specifies DCSP an DCSP intermediary DCSP model. DCSP Use DCSP %s.%s's DCSP Manager DCSP instead." % (opts.app_label, opts.object_name))) DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.instance.__class__, instance=self.instance) DCNL DCSP  DCSP  DCSP new_obj = super(ManyRelatedManager, self.db_manager(db)).create(**kwargs) DCNL DCSP  DCSP  DCSP self.add(new_obj) DCNL DCSP  DCSP  DCSP return new_obj DCNL DCSP  DCSP create.alters_data = True DCNL DCSP  DCSP def get_or_create(self, **kwargs): DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.instance.__class__, instance=self.instance) DCNL DCSP  DCSP  DCSP (obj, created) = super(ManyRelatedManager, self.db_manager(db)).get_or_create(**kwargs) DCNL DCSP  DCSP  DCSP if created: DCNL DCSP  DCSP  DCSP  DCSP self.add(obj) DCNL DCSP  DCSP  DCSP return (obj, created) DCNL DCSP  DCSP get_or_create.alters_data = True DCNL DCSP  DCSP def _add_items(self, source_field_name, target_field_name, *objs): DCNL DCSP  DCSP  DCSP from django.db.models import Model DCNL DCSP  DCSP  DCSP if objs: DCNL DCSP  DCSP  DCSP  DCSP new_ids = set() DCNL DCSP  DCSP  DCSP  DCSP for obj in objs: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(obj, self.model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not router.allow_relation(obj, self.instance)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError(('Cannot DCSP add DCSP "%r": DCSP instance DCSP is DCSP on DCSP database DCSP "%s", DCSP value DCSP is DCSP on DCSP database DCSP "%s"' % (obj, self.instance._state.db, obj._state.db))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fk_val = self._get_fk_val(obj, target_field_name) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (fk_val is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError(('Cannot DCSP add DCSP "%r": DCSP the DCSP value DCSP for DCSP field DCSP "%s" DCSP is DCSP None' % (obj, target_field_name))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_ids.add(self._get_fk_val(obj, target_field_name)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP elif isinstance(obj, Model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP raise TypeError(("'%s' DCSP instance DCSP expected, DCSP got DCSP %r" % (self.model._meta.object_name, obj))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_ids.add(obj) DCNL DCSP  DCSP  DCSP  DCSP db = router.db_for_write(self.through, instance=self.instance) DCNL DCSP  DCSP  DCSP  DCSP vals = self.through._default_manager.using(db).values_list(target_field_name, flat=True) DCNL DCSP  DCSP  DCSP  DCSP vals = vals.filter(**{source_field_name: self._fk_val, ('%s__in' % target_field_name): new_ids}) DCNL DCSP  DCSP  DCSP  DCSP new_ids = (new_ids - set(vals)) DCNL DCSP  DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='pre_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db) DCNL DCSP  DCSP  DCSP  DCSP self.through._default_manager.using(db).bulk_create([self.through(**{('%s_id' % source_field_name): self._fk_val, ('%s_id' % target_field_name): obj_id}) for obj_id in new_ids]) DCNL DCSP  DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='post_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db) DCNL DCSP  DCSP def _remove_items(self, source_field_name, target_field_name, *objs): DCNL DCSP  DCSP  DCSP if objs: DCNL DCSP  DCSP  DCSP  DCSP old_ids = set() DCNL DCSP  DCSP  DCSP  DCSP for obj in objs: DCNL DCSP  DCSP  DCSP  DCSP  DCSP if isinstance(obj, self.model): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP old_ids.add(self._get_fk_val(obj, target_field_name)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP old_ids.add(obj) DCNL DCSP  DCSP  DCSP  DCSP db = router.db_for_write(self.through, instance=self.instance) DCNL DCSP  DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='pre_remove', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=old_ids, using=db) DCNL DCSP  DCSP  DCSP  DCSP self.through._default_manager.using(db).filter(**{source_field_name: self._fk_val, ('%s__in' % target_field_name): old_ids}).delete() DCNL DCSP  DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='post_remove', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=old_ids, using=db) DCNL DCSP  DCSP def _clear_items(self, source_field_name): DCNL DCSP  DCSP  DCSP db = router.db_for_write(self.through, instance=self.instance) DCNL DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='pre_clear', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=None, using=db) DCNL DCSP  DCSP  DCSP self.through._default_manager.using(db).filter(**{source_field_name: self._fk_val}).delete() DCNL DCSP  DCSP  DCSP if (self.reverse or (source_field_name == self.source_field_name)): DCNL DCSP  DCSP  DCSP  DCSP signals.m2m_changed.send(sender=self.through, action='post_clear', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=None, using=db) DCNL DCSP return ManyRelatedManager
def ensure_default_manager(sender, **kwargs): DCNL  DCSP cls = sender DCNL DCSP if cls._meta.abstract: DCNL DCSP  DCSP setattr(cls, 'objects', AbstractManagerDescriptor(cls)) DCNL DCSP  DCSP return DCNL DCSP elif cls._meta.swapped: DCNL DCSP  DCSP setattr(cls, 'objects', SwappedManagerDescriptor(cls)) DCNL DCSP  DCSP return DCNL DCSP if (not getattr(cls, '_default_manager', None)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cls._meta.get_field('objects') DCNL DCSP  DCSP  DCSP raise ValueError(("Model DCSP %s DCSP must DCSP specify DCSP a DCSP custom DCSP Manager, DCSP because DCSP it DCSP has DCSP a DCSP field DCSP named DCSP 'objects'" % cls.__name__)) DCNL DCSP  DCSP except FieldDoesNotExist: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP cls.add_to_class('objects', Manager()) DCNL DCSP  DCSP cls._base_manager = cls.objects DCNL DCSP elif (not getattr(cls, '_base_manager', None)): DCNL DCSP  DCSP default_mgr = cls._default_manager.__class__ DCNL DCSP  DCSP if ((default_mgr is Manager) or getattr(default_mgr, 'use_for_related_fields', False)): DCNL DCSP  DCSP  DCSP cls._base_manager = cls._default_manager DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP for base_class in default_mgr.mro()[1:]: DCNL DCSP  DCSP  DCSP  DCSP if ((base_class is Manager) or getattr(base_class, 'use_for_related_fields', False)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP cls.add_to_class('_base_manager', base_class()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP raise AssertionError('Should DCSP never DCSP get DCSP here. DCSP Please DCSP report DCSP a DCSP bug, DCSP including DCSP your DCSP model DCSP and DCSP model DCSP manager DCSP setup.')
def get_klass_info(klass, max_depth=0, cur_depth=0, requested=None, only_load=None, local_only=False): DCNL  DCSP if (max_depth and (requested is None) and (cur_depth > max_depth)): DCNL DCSP  DCSP return None DCNL DCSP if only_load: DCNL DCSP  DCSP load_fields = (only_load.get(klass) or set()) DCNL DCSP  DCSP for parent in klass._meta.get_parent_list(): DCNL DCSP  DCSP  DCSP fields = only_load.get(parent) DCNL DCSP  DCSP  DCSP if fields: DCNL DCSP  DCSP  DCSP  DCSP load_fields.update(fields) DCNL DCSP else: DCNL DCSP  DCSP load_fields = None DCNL DCSP if load_fields: DCNL DCSP  DCSP skip = set() DCNL DCSP  DCSP init_list = [] DCNL DCSP  DCSP for (field, model) in klass._meta.get_fields_with_model(): DCNL DCSP  DCSP  DCSP if (field.name not in load_fields): DCNL DCSP  DCSP  DCSP  DCSP skip.add(field.attname) DCNL DCSP  DCSP  DCSP elif (local_only and (model is not None)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP init_list.append(field.attname) DCNL DCSP  DCSP field_count = len(init_list) DCNL DCSP  DCSP if skip: DCNL DCSP  DCSP  DCSP klass = deferred_class_factory(klass, skip) DCNL DCSP  DCSP  DCSP field_names = init_list DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP field_names = () DCNL DCSP elif (local_only and (len(klass._meta.local_fields) != len(klass._meta.fields))): DCNL DCSP  DCSP field_count = len(klass._meta.local_fields) DCNL DCSP  DCSP field_names = [f.attname for f in klass._meta.local_fields] DCNL DCSP else: DCNL DCSP  DCSP field_count = len(klass._meta.fields) DCNL DCSP  DCSP field_names = () DCNL DCSP restricted = (requested is not None) DCNL DCSP related_fields = [] DCNL DCSP for f in klass._meta.fields: DCNL DCSP  DCSP if select_related_descend(f, restricted, requested, load_fields): DCNL DCSP  DCSP  DCSP if restricted: DCNL DCSP  DCSP  DCSP  DCSP next = requested[f.name] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP next = None DCNL DCSP  DCSP  DCSP klass_info = get_klass_info(f.rel.to, max_depth=max_depth, cur_depth=(cur_depth + 1), requested=next, only_load=only_load) DCNL DCSP  DCSP  DCSP related_fields.append((f, klass_info)) DCNL DCSP reverse_related_fields = [] DCNL DCSP if restricted: DCNL DCSP  DCSP for o in klass._meta.get_all_related_objects(): DCNL DCSP  DCSP  DCSP if (o.field.unique and select_related_descend(o.field, restricted, requested, only_load.get(o.model), reverse=True)): DCNL DCSP  DCSP  DCSP  DCSP next = requested[o.field.related_query_name()] DCNL DCSP  DCSP  DCSP  DCSP klass_info = get_klass_info(o.model, max_depth=max_depth, cur_depth=(cur_depth + 1), requested=next, only_load=only_load, local_only=True) DCNL DCSP  DCSP  DCSP  DCSP reverse_related_fields.append((o.field, klass_info)) DCNL DCSP if field_names: DCNL DCSP  DCSP pk_idx = field_names.index(klass._meta.pk.attname) DCNL DCSP else: DCNL DCSP  DCSP pk_idx = klass._meta.pk_index() DCNL DCSP return (klass, field_names, field_count, related_fields, reverse_related_fields, pk_idx)
def get_cached_row(row, index_start, using, klass_info, offset=0): DCNL  DCSP if (klass_info is None): DCNL DCSP  DCSP return None DCNL DCSP (klass, field_names, field_count, related_fields, reverse_related_fields, pk_idx) = klass_info DCNL DCSP fields = row[index_start:(index_start + field_count)] DCNL DCSP if ((fields[pk_idx] == None) or (fields[pk_idx] == '')): DCNL DCSP  DCSP obj = None DCNL DCSP elif field_names: DCNL DCSP  DCSP obj = klass(**dict(zip(field_names, fields))) DCNL DCSP else: DCNL DCSP  DCSP obj = klass(*fields) DCNL DCSP if obj: DCNL DCSP  DCSP obj._state.db = using DCNL DCSP  DCSP obj._state.adding = False DCNL DCSP index_end = ((index_start + field_count) + offset) DCNL DCSP for (f, klass_info) in related_fields: DCNL DCSP  DCSP cached_row = get_cached_row(row, index_end, using, klass_info) DCNL DCSP  DCSP if cached_row: DCNL DCSP  DCSP  DCSP (rel_obj, index_end) = cached_row DCNL DCSP  DCSP  DCSP if (obj is not None): DCNL DCSP  DCSP  DCSP  DCSP setattr(obj, f.get_cache_name(), rel_obj) DCNL DCSP  DCSP  DCSP if (f.unique and (rel_obj is not None)): DCNL DCSP  DCSP  DCSP  DCSP setattr(rel_obj, f.related.get_cache_name(), obj) DCNL DCSP for (f, klass_info) in reverse_related_fields: DCNL DCSP  DCSP cached_row = get_cached_row(row, index_end, using, klass_info) DCNL DCSP  DCSP if cached_row: DCNL DCSP  DCSP  DCSP (rel_obj, index_end) = cached_row DCNL DCSP  DCSP  DCSP if (obj is not None): DCNL DCSP  DCSP  DCSP  DCSP setattr(obj, f.related.get_cache_name(), rel_obj) DCNL DCSP  DCSP  DCSP if (rel_obj is not None): DCNL DCSP  DCSP  DCSP  DCSP setattr(rel_obj, f.get_cache_name(), obj) DCNL DCSP  DCSP  DCSP  DCSP opts = rel_obj._meta DCNL DCSP  DCSP  DCSP  DCSP if getattr(rel_obj, '_deferred'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP opts = opts.proxy_for_model._meta DCNL DCSP  DCSP  DCSP  DCSP for (rel_field, rel_model) in opts.get_fields_with_model(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (rel_model is not None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP setattr(rel_obj, rel_field.attname, getattr(obj, rel_field.attname)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if rel_field.rel: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cached_obj = getattr(obj, rel_field.get_cache_name()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP setattr(rel_obj, rel_field.get_cache_name(), cached_obj) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP pass DCNL DCSP return (obj, index_end)
def insert_query(model, objs, fields, return_id=False, raw=False, using=None): DCNL  DCSP query = sql.InsertQuery(model) DCNL DCSP query.insert_values(fields, objs, raw=raw) DCNL DCSP return query.get_compiler(using=using).execute_sql(return_id)
def prefetch_related_objects(result_cache, related_lookups): DCNL  DCSP if (len(result_cache) == 0): DCNL DCSP  DCSP return DCNL DCSP model = result_cache[0].__class__ DCNL DCSP done_lookups = set() DCNL DCSP done_queries = {} DCNL DCSP auto_lookups = [] DCNL DCSP followed_descriptors = set() DCNL DCSP all_lookups = itertools.chain(related_lookups, auto_lookups) DCNL DCSP for lookup in all_lookups: DCNL DCSP  DCSP if (lookup in done_lookups): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP done_lookups.add(lookup) DCNL DCSP  DCSP obj_list = result_cache DCNL DCSP  DCSP attrs = lookup.split(LOOKUP_SEP) DCNL DCSP  DCSP for (level, attr) in enumerate(attrs): DCNL DCSP  DCSP  DCSP if (len(obj_list) == 0): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP good_objects = True DCNL DCSP  DCSP  DCSP for obj in obj_list: DCNL DCSP  DCSP  DCSP  DCSP if (not hasattr(obj, '_prefetched_objects_cache')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP obj._prefetched_objects_cache = {} DCNL DCSP  DCSP  DCSP  DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP good_objects = False DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP if (not good_objects): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP first_obj = obj_list[0] DCNL DCSP  DCSP  DCSP (prefetcher, descriptor, attr_found, is_fetched) = get_prefetcher(first_obj, attr) DCNL DCSP  DCSP  DCSP if (not attr_found): DCNL DCSP  DCSP  DCSP  DCSP raise AttributeError(("Cannot DCSP find DCSP '%s' DCSP on DCSP %s DCSP object, DCSP '%s' DCSP is DCSP an DCSP invalid DCSP parameter DCSP to DCSP prefetch_related()" % (attr, first_obj.__class__.__name__, lookup))) DCNL DCSP  DCSP  DCSP if ((level == (len(attrs) - 1)) and (prefetcher is None)): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(("'%s' DCSP does DCSP not DCSP resolve DCSP to DCSP a DCSP item DCSP that DCSP supports DCSP prefetching DCSP - DCSP this DCSP is DCSP an DCSP invalid DCSP parameter DCSP to DCSP prefetch_related()." % lookup)) DCNL DCSP  DCSP  DCSP if ((prefetcher is not None) and (not is_fetched)): DCNL DCSP  DCSP  DCSP  DCSP current_lookup = LOOKUP_SEP.join(attrs[0:(level + 1)]) DCNL DCSP  DCSP  DCSP  DCSP if (current_lookup in done_queries): DCNL DCSP  DCSP  DCSP  DCSP  DCSP obj_list = done_queries[current_lookup] DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP (obj_list, additional_prl) = prefetch_one_level(obj_list, prefetcher, attr) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not ((lookup in auto_lookups) and (descriptor in followed_descriptors))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for f in additional_prl: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_prl = LOOKUP_SEP.join([current_lookup, f]) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP auto_lookups.append(new_prl) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP done_queries[current_lookup] = obj_list DCNL DCSP  DCSP  DCSP  DCSP  DCSP followed_descriptors.add(descriptor) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP new_obj_list = [] DCNL DCSP  DCSP  DCSP  DCSP for obj in obj_list: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_obj = getattr(obj, attr) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except exceptions.ObjectDoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (new_obj is None): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_obj_list.append(new_obj) DCNL DCSP  DCSP  DCSP  DCSP obj_list = new_obj_list
def get_prefetcher(instance, attr): DCNL  DCSP prefetcher = None DCNL DCSP attr_found = False DCNL DCSP is_fetched = False DCNL DCSP rel_obj_descriptor = getattr(instance.__class__, attr, None) DCNL DCSP if (rel_obj_descriptor is None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP rel_obj = getattr(instance, attr) DCNL DCSP  DCSP  DCSP attr_found = True DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP else: DCNL DCSP  DCSP attr_found = True DCNL DCSP  DCSP if rel_obj_descriptor: DCNL DCSP  DCSP  DCSP if hasattr(rel_obj_descriptor, 'get_prefetch_query_set'): DCNL DCSP  DCSP  DCSP  DCSP prefetcher = rel_obj_descriptor DCNL DCSP  DCSP  DCSP  DCSP if rel_obj_descriptor.is_cached(instance): DCNL DCSP  DCSP  DCSP  DCSP  DCSP is_fetched = True DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP rel_obj = getattr(instance, attr) DCNL DCSP  DCSP  DCSP  DCSP if hasattr(rel_obj, 'get_prefetch_query_set'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP prefetcher = rel_obj DCNL DCSP return (prefetcher, rel_obj_descriptor, attr_found, is_fetched)
def prefetch_one_level(instances, prefetcher, attname): DCNL  DCSP (rel_qs, rel_obj_attr, instance_attr, single, cache_name) = prefetcher.get_prefetch_query_set(instances) DCNL DCSP additional_prl = getattr(rel_qs, '_prefetch_related_lookups', []) DCNL DCSP if additional_prl: DCNL DCSP  DCSP rel_qs._prefetch_related_lookups = [] DCNL DCSP all_related_objects = list(rel_qs) DCNL DCSP rel_obj_cache = {} DCNL DCSP for rel_obj in all_related_objects: DCNL DCSP  DCSP rel_attr_val = rel_obj_attr(rel_obj) DCNL DCSP  DCSP rel_obj_cache.setdefault(rel_attr_val, []).append(rel_obj) DCNL DCSP for obj in instances: DCNL DCSP  DCSP instance_attr_val = instance_attr(obj) DCNL DCSP  DCSP vals = rel_obj_cache.get(instance_attr_val, []) DCNL DCSP  DCSP if single: DCNL DCSP  DCSP  DCSP setattr(obj, cache_name, (vals[0] if vals else None)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP qs = getattr(obj, attname).all() DCNL DCSP  DCSP  DCSP qs._result_cache = vals DCNL DCSP  DCSP  DCSP qs._prefetch_done = True DCNL DCSP  DCSP  DCSP obj._prefetched_objects_cache[cache_name] = qs DCNL DCSP return (all_related_objects, additional_prl)
def permalink(func): DCNL  DCSP from django.core.urlresolvers import reverse DCNL DCSP @wraps(func) DCNL DCSP def inner(*args, **kwargs): DCNL DCSP  DCSP bits = func(*args, **kwargs) DCNL DCSP  DCSP return reverse(bits[0], None, *bits[1:3]) DCNL DCSP return inner
def subclass_exception(name, parents, module, attached_to=None): DCNL  DCSP class_dict = {u'__module__': module} DCNL DCSP if (attached_to is not None): DCNL DCSP  DCSP def __reduce__(self): DCNL DCSP  DCSP  DCSP return (unpickle_inner_exception, (attached_to, name), self.args) DCNL DCSP  DCSP def __setstate__(self, args): DCNL DCSP  DCSP  DCSP self.args = args DCNL DCSP  DCSP class_dict[u'__reduce__'] = __reduce__ DCNL DCSP  DCSP class_dict[u'__setstate__'] = __setstate__ DCNL DCSP return type(name, parents, class_dict)
def model_unpickle(model, attrs): DCNL  DCSP cls = deferred_class_factory(model, attrs) DCNL DCSP return cls.__new__(cls)
def select_related_descend(field, restricted, requested, load_fields, reverse=False): DCNL  DCSP if (not field.rel): DCNL DCSP  DCSP return False DCNL DCSP if (field.rel.parent_link and (not reverse)): DCNL DCSP  DCSP return False DCNL DCSP if restricted: DCNL DCSP  DCSP if (reverse and (field.related_query_name() not in requested)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if ((not reverse) and (field.name not in requested)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP if ((not restricted) and field.null): DCNL DCSP  DCSP return False DCNL DCSP if load_fields: DCNL DCSP  DCSP if (field.name not in load_fields): DCNL DCSP  DCSP  DCSP if (restricted and (field.name in requested)): DCNL DCSP  DCSP  DCSP  DCSP raise InvalidQuery((u'Field DCSP %s.%s DCSP cannot DCSP be DCSP both DCSP deferred DCSP and DCSP traversed DCSP using DCSP select_related DCSP at DCSP the DCSP same DCSP time.' % (field.model._meta.object_name, field.name))) DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def deferred_class_factory(model, attrs): DCNL  DCSP class Meta: DCNL DCSP  DCSP proxy = True DCNL DCSP  DCSP app_label = model._meta.app_label DCNL DCSP name = (u'%s_Deferred_%s' % (model.__name__, u'_'.join(sorted(list(attrs))))) DCNL DCSP name = util.truncate_name(name, 80, 32) DCNL DCSP overrides = dict([(attr, DeferredAttribute(attr, model)) for attr in attrs]) DCNL DCSP overrides[u'Meta'] = Meta DCNL DCSP overrides[u'__module__'] = model.__module__ DCNL DCSP overrides[u'_deferred'] = True DCNL DCSP return type(str(name), (model,), overrides)
def to_unicode(s): DCNL  DCSP if isinstance(s, six.string_types): DCNL DCSP  DCSP return force_text(s) DCNL DCSP return s
def get_field_size(name): DCNL  DCSP m = field_size_re.search(name) DCNL DCSP return (int(m.group(1)) if m else None)
def decoder(conv_func): DCNL  DCSP return (lambda s: conv_func(s.decode(u'utf-8')))
def _parse_version(text): DCNL  DCSP (major, major2, minor) = VERSION_RE.search(text).groups() DCNL DCSP try: DCNL DCSP  DCSP return (((int(major) * 10000) + (int(major2) * 100)) + int(minor)) DCNL DCSP except (ValueError, TypeError): DCNL DCSP  DCSP return ((int(major) * 10000) + (int(major2) * 100))
def get_version(connection): DCNL  DCSP if hasattr(connection, 'server_version'): DCNL DCSP  DCSP return connection.server_version DCNL DCSP else: DCNL DCSP  DCSP cursor = connection.cursor() DCNL DCSP  DCSP cursor.execute('SELECT DCSP version()') DCNL DCSP  DCSP return _parse_version(cursor.fetchone()[0])
def truncate_name(name, length=None, hash_len=4): DCNL  DCSP if ((length is None) or (len(name) <= length)): DCNL DCSP  DCSP return name DCNL DCSP hsh = hashlib.md5(force_bytes(name)).hexdigest()[:hash_len] DCNL DCSP return (u'%s%s' % (name[:(length - hash_len)], hsh))
def format_number(value, max_digits, decimal_places): DCNL  DCSP if isinstance(value, decimal.Decimal): DCNL DCSP  DCSP context = decimal.getcontext().copy() DCNL DCSP  DCSP context.prec = max_digits DCNL DCSP  DCSP return (u'%s' % str(value.quantize((decimal.Decimal(u'.1') ** decimal_places), context=context))) DCNL DCSP else: DCNL DCSP  DCSP return (u'%.*f' % (decimal_places, value))
def receiver(signal, **kwargs): DCNL  DCSP def _decorator(func): DCNL DCSP  DCSP if isinstance(signal, (list, tuple)): DCNL DCSP  DCSP  DCSP for s in signal: DCNL DCSP  DCSP  DCSP  DCSP s.connect(func, **kwargs) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP signal.connect(func, **kwargs) DCNL DCSP  DCSP return func DCNL DCSP return _decorator
def safeRef(target, onDelete=None): DCNL  DCSP if hasattr(target, '__self__'): DCNL DCSP  DCSP if (target.__self__ is not None): DCNL DCSP  DCSP  DCSP assert hasattr(target, '__func__'), ("safeRef DCSP target DCSP %r DCSP has DCSP __self__, DCSP but DCSP no DCSP __func__, DCSP don't DCSP know DCSP how DCSP to DCSP create DCSP reference" % (target,)) DCNL DCSP  DCSP  DCSP reference = get_bound_method_weakref(target=target, onDelete=onDelete) DCNL DCSP  DCSP  DCSP return reference DCNL DCSP if callable(onDelete): DCNL DCSP  DCSP return weakref.ref(target, onDelete) DCNL DCSP else: DCNL DCSP  DCSP return weakref.ref(target)
def get_bound_method_weakref(target, onDelete): DCNL  DCSP if hasattr(target, '__get__'): DCNL DCSP  DCSP return BoundMethodWeakref(target=target, onDelete=onDelete) DCNL DCSP else: DCNL DCSP  DCSP return BoundNonDescriptorMethodWeakref(target=target, onDelete=onDelete)
def construct_instance(form, instance, fields=None, exclude=None): DCNL  DCSP from django.db import models DCNL DCSP opts = instance._meta DCNL DCSP cleaned_data = form.cleaned_data DCNL DCSP file_field_list = [] DCNL DCSP for f in opts.fields: DCNL DCSP  DCSP if ((not f.editable) or isinstance(f, models.AutoField) or (not (f.name in cleaned_data))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if ((fields is not None) and (f.name not in fields)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (exclude and (f.name in exclude)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if isinstance(f, models.FileField): DCNL DCSP  DCSP  DCSP file_field_list.append(f) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP f.save_form_data(instance, cleaned_data[f.name]) DCNL DCSP for f in file_field_list: DCNL DCSP  DCSP f.save_form_data(instance, cleaned_data[f.name]) DCNL DCSP return instance
def save_instance(form, instance, fields=None, fail_message=u'saved', commit=True, exclude=None, construct=True): DCNL  DCSP if construct: DCNL DCSP  DCSP instance = construct_instance(form, instance, fields, exclude) DCNL DCSP opts = instance._meta DCNL DCSP if form.errors: DCNL DCSP  DCSP raise ValueError((u"The DCSP %s DCSP could DCSP not DCSP be DCSP %s DCSP because DCSP the DCSP data DCSP didn't DCSP validate." % (opts.object_name, fail_message))) DCNL DCSP def save_m2m(): DCNL DCSP  DCSP cleaned_data = form.cleaned_data DCNL DCSP  DCSP for f in opts.many_to_many: DCNL DCSP  DCSP  DCSP if (fields and (f.name not in fields)): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (f.name in cleaned_data): DCNL DCSP  DCSP  DCSP  DCSP f.save_form_data(instance, cleaned_data[f.name]) DCNL DCSP if commit: DCNL DCSP  DCSP instance.save() DCNL DCSP  DCSP save_m2m() DCNL DCSP else: DCNL DCSP  DCSP form.save_m2m = save_m2m DCNL DCSP return instance
def model_to_dict(instance, fields=None, exclude=None): DCNL  DCSP from django.db.models.fields.related import ManyToManyField DCNL DCSP opts = instance._meta DCNL DCSP data = {} DCNL DCSP for f in (opts.fields + opts.many_to_many): DCNL DCSP  DCSP if (not f.editable): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (fields and (not (f.name in fields))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (exclude and (f.name in exclude)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if isinstance(f, ManyToManyField): DCNL DCSP  DCSP  DCSP if (instance.pk is None): DCNL DCSP  DCSP  DCSP  DCSP data[f.name] = [] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP data[f.name] = list(f.value_from_object(instance).values_list(u'pk', flat=True)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP data[f.name] = f.value_from_object(instance) DCNL DCSP return data
def fields_for_model(model, fields=None, exclude=None, widgets=None, formfield_callback=None): DCNL  DCSP field_list = [] DCNL DCSP ignored = [] DCNL DCSP opts = model._meta DCNL DCSP for f in sorted((opts.fields + opts.many_to_many)): DCNL DCSP  DCSP if (not f.editable): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if ((fields is not None) and (not (f.name in fields))): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (exclude and (f.name in exclude)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (widgets and (f.name in widgets)): DCNL DCSP  DCSP  DCSP kwargs = {u'widget': widgets[f.name]} DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP kwargs = {} DCNL DCSP  DCSP if (formfield_callback is None): DCNL DCSP  DCSP  DCSP formfield = f.formfield(**kwargs) DCNL DCSP  DCSP elif (not callable(formfield_callback)): DCNL DCSP  DCSP  DCSP raise TypeError(u'formfield_callback DCSP must DCSP be DCSP a DCSP function DCSP or DCSP callable') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP formfield = formfield_callback(f, **kwargs) DCNL DCSP  DCSP if formfield: DCNL DCSP  DCSP  DCSP field_list.append((f.name, formfield)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP ignored.append(f.name) DCNL DCSP field_dict = SortedDict(field_list) DCNL DCSP if fields: DCNL DCSP  DCSP field_dict = SortedDict([(f, field_dict.get(f)) for f in fields if (((not exclude) or (exclude and (f not in exclude))) and (f not in ignored))]) DCNL DCSP return field_dict
def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None): DCNL  DCSP attrs = {u'model': model} DCNL DCSP if (fields is not None): DCNL DCSP  DCSP attrs[u'fields'] = fields DCNL DCSP if (exclude is not None): DCNL DCSP  DCSP attrs[u'exclude'] = exclude DCNL DCSP if (widgets is not None): DCNL DCSP  DCSP attrs[u'widgets'] = widgets DCNL DCSP parent = (object,) DCNL DCSP if hasattr(form, u'Meta'): DCNL DCSP  DCSP parent = (form.Meta, object) DCNL DCSP Meta = type(str(u'Meta'), parent, attrs) DCNL DCSP class_name = (model.__name__ + str(u'Form')) DCNL DCSP form_class_attrs = {u'Meta': Meta, u'formfield_callback': formfield_callback} DCNL DCSP return type(form)(class_name, (form,), form_class_attrs)
def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None): DCNL  DCSP form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback) DCNL DCSP FormSet = formset_factory(form, formset, extra=extra, max_num=max_num, can_order=can_order, can_delete=can_delete) DCNL DCSP FormSet.model = model DCNL DCSP return FormSet
def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False): DCNL  DCSP from django.db.models import ForeignKey DCNL DCSP opts = model._meta DCNL DCSP if fk_name: DCNL DCSP  DCSP fks_to_parent = [f for f in opts.fields if (f.name == fk_name)] DCNL DCSP  DCSP if (len(fks_to_parent) == 1): DCNL DCSP  DCSP  DCSP fk = fks_to_parent[0] DCNL DCSP  DCSP  DCSP if ((not isinstance(fk, ForeignKey)) or ((fk.rel.to != parent_model) and (fk.rel.to not in parent_model._meta.get_parent_list()))): DCNL DCSP  DCSP  DCSP  DCSP raise Exception((u"fk_name DCSP '%s' DCSP is DCSP not DCSP a DCSP ForeignKey DCSP to DCSP %s" % (fk_name, parent_model))) DCNL DCSP  DCSP elif (len(fks_to_parent) == 0): DCNL DCSP  DCSP  DCSP raise Exception((u"%s DCSP has DCSP no DCSP field DCSP named DCSP '%s'" % (model, fk_name))) DCNL DCSP else: DCNL DCSP  DCSP fks_to_parent = [f for f in opts.fields if (isinstance(f, ForeignKey) and ((f.rel.to == parent_model) or (f.rel.to in parent_model._meta.get_parent_list())))] DCNL DCSP  DCSP if (len(fks_to_parent) == 1): DCNL DCSP  DCSP  DCSP fk = fks_to_parent[0] DCNL DCSP  DCSP elif (len(fks_to_parent) == 0): DCNL DCSP  DCSP  DCSP if can_fail: DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP raise Exception((u'%s DCSP has DCSP no DCSP ForeignKey DCSP to DCSP %s' % (model, parent_model))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise Exception((u'%s DCSP has DCSP more DCSP than DCSP 1 DCSP ForeignKey DCSP to DCSP %s' % (model, parent_model))) DCNL DCSP return fk
def inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None): DCNL  DCSP fk = _get_foreign_key(parent_model, model, fk_name=fk_name) DCNL DCSP if fk.unique: DCNL DCSP  DCSP max_num = 1 DCNL DCSP kwargs = {u'form': form, u'formfield_callback': formfield_callback, u'formset': formset, u'extra': extra, u'can_delete': can_delete, u'can_order': can_order, u'fields': fields, u'exclude': exclude, u'max_num': max_num} DCNL DCSP FormSet = modelformset_factory(model, **kwargs) DCNL DCSP FormSet.fk = fk DCNL DCSP return FormSet
def pretty_name(name): DCNL  DCSP if (not name): DCNL DCSP  DCSP return u'' DCNL DCSP return name.replace(u'_', u' DCSP ').capitalize()
def get_declared_fields(bases, attrs, with_base_fields=True): DCNL  DCSP fields = [(field_name, attrs.pop(field_name)) for (field_name, obj) in list(six.iteritems(attrs)) if isinstance(obj, Field)] DCNL DCSP fields.sort(key=(lambda x: x[1].creation_counter)) DCNL DCSP if with_base_fields: DCNL DCSP  DCSP for base in bases[::(-1)]: DCNL DCSP  DCSP  DCSP if hasattr(base, u'base_fields'): DCNL DCSP  DCSP  DCSP  DCSP fields = (list(six.iteritems(base.base_fields)) + fields) DCNL DCSP else: DCNL DCSP  DCSP for base in bases[::(-1)]: DCNL DCSP  DCSP  DCSP if hasattr(base, u'declared_fields'): DCNL DCSP  DCSP  DCSP  DCSP fields = (list(six.iteritems(base.declared_fields)) + fields) DCNL DCSP return SortedDict(fields)
def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None): DCNL  DCSP if (max_num is None): DCNL DCSP  DCSP max_num = DEFAULT_MAX_NUM DCNL DCSP absolute_max = max(DEFAULT_MAX_NUM, max_num) DCNL DCSP attrs = {u'form': form, u'extra': extra, u'can_order': can_order, u'can_delete': can_delete, u'max_num': max_num, u'absolute_max': absolute_max} DCNL DCSP return type((form.__name__ + str(u'FormSet')), (formset,), attrs)
def all_valid(formsets): DCNL  DCSP valid = True DCNL DCSP for formset in formsets: DCNL DCSP  DCSP if (not formset.is_valid()): DCNL DCSP  DCSP  DCSP valid = False DCNL DCSP return valid
def flatatt(attrs): DCNL  DCSP return format_html_join(u'', u' DCSP {0}="{1}"', sorted(attrs.items()))
def from_current_timezone(value): DCNL  DCSP if (settings.USE_TZ and (value is not None) and timezone.is_naive(value)): DCNL DCSP  DCSP current_timezone = timezone.get_current_timezone() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return timezone.make_aware(value, current_timezone) DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP raise ValidationError((_(u"%(datetime)s DCSP couldn't DCSP be DCSP interpreted DCSP in DCSP time DCSP zone DCSP %(current_timezone)s; DCSP it DCSP may DCSP be DCSP ambiguous DCSP or DCSP it DCSP may DCSP not DCSP exist.") % {u'datetime': value, u'current_timezone': current_timezone})) DCNL DCSP return value
def to_current_timezone(value): DCNL  DCSP if (settings.USE_TZ and (value is not None) and timezone.is_aware(value)): DCNL DCSP  DCSP current_timezone = timezone.get_current_timezone() DCNL DCSP  DCSP return timezone.make_naive(value, current_timezone) DCNL DCSP return value
def exhaust(stream_or_iterable): DCNL  DCSP iterator = None DCNL DCSP try: DCNL DCSP  DCSP iterator = iter(stream_or_iterable) DCNL DCSP except TypeError: DCNL DCSP  DCSP iterator = ChunkIter(stream_or_iterable, 16384) DCNL DCSP if (iterator is None): DCNL DCSP  DCSP raise MultiPartParserError(u'multipartparser.exhaust() DCSP was DCSP passed DCSP a DCSP non-iterable DCSP or DCSP stream DCSP parameter') DCNL DCSP for __ in iterator: DCNL DCSP  DCSP pass
def parse_boundary_stream(stream, max_header_size): DCNL  DCSP chunk = stream.read(max_header_size) DCNL DCSP header_end = chunk.find('\r\n\r\n') DCNL DCSP def _parse_header(line): DCNL DCSP  DCSP (main_value_pair, params) = parse_header(line) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (name, value) = main_value_pair.split(u':', 1) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP raise ValueError((u'Invalid DCSP header: DCSP %r' % line)) DCNL DCSP  DCSP return (name, (value, params)) DCNL DCSP if (header_end == (-1)): DCNL DCSP  DCSP stream.unget(chunk) DCNL DCSP  DCSP return (RAW, {}, stream) DCNL DCSP header = chunk[:header_end] DCNL DCSP stream.unget(chunk[(header_end + 4):]) DCNL DCSP TYPE = RAW DCNL DCSP outdict = {} DCNL DCSP for line in header.split('\r\n'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (name, (value, params)) = _parse_header(line) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (name == u'content-disposition'): DCNL DCSP  DCSP  DCSP TYPE = FIELD DCNL DCSP  DCSP  DCSP if params.get(u'filename'): DCNL DCSP  DCSP  DCSP  DCSP TYPE = FILE DCNL DCSP  DCSP outdict[name] = (value, params) DCNL DCSP if (TYPE == RAW): DCNL DCSP  DCSP stream.unget(chunk) DCNL DCSP return (TYPE, outdict, stream)
def parse_header(line): DCNL  DCSP plist = _parse_header_params((';' + line)) DCNL DCSP key = plist.pop(0).lower().decode(u'ascii') DCNL DCSP pdict = {} DCNL DCSP for p in plist: DCNL DCSP  DCSP i = p.find('=') DCNL DCSP  DCSP if (i >= 0): DCNL DCSP  DCSP  DCSP name = p[:i].strip().lower().decode(u'ascii') DCNL DCSP  DCSP  DCSP value = p[(i + 1):].strip() DCNL DCSP  DCSP  DCSP if ((len(value) >= 2) and (value[:1] == value[(-1):] == '"')): DCNL DCSP  DCSP  DCSP  DCSP value = value[1:(-1)] DCNL DCSP  DCSP  DCSP  DCSP value = value.replace('\\\\', '\\').replace('\\"', '"') DCNL DCSP  DCSP  DCSP pdict[name] = value DCNL DCSP return (key, pdict)
def fix_location_header(request, response): DCNL  DCSP if (('Location' in response) and request.get_host()): DCNL DCSP  DCSP response['Location'] = request.build_absolute_uri(response['Location']) DCNL DCSP return response
def conditional_content_removal(request, response): DCNL  DCSP if ((100 <= response.status_code < 200) or (response.status_code in (204, 304))): DCNL DCSP  DCSP if response.streaming: DCNL DCSP  DCSP  DCSP response.streaming_content = [] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response.content = '' DCNL DCSP  DCSP response['Content-Length'] = '0' DCNL DCSP if (request.method == 'HEAD'): DCNL DCSP  DCSP if response.streaming: DCNL DCSP  DCSP  DCSP response.streaming_content = [] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response.content = '' DCNL DCSP return response
def fix_IE_for_attach(request, response): DCNL  DCSP useragent = request.META.get('HTTP_USER_AGENT', '').upper() DCNL DCSP if (('MSIE' not in useragent) and ('CHROMEFRAME' not in useragent)): DCNL DCSP  DCSP return response DCNL DCSP offending_headers = ('no-cache', 'no-store') DCNL DCSP if response.has_header('Content-Disposition'): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP del response['Pragma'] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP if response.has_header('Cache-Control'): DCNL DCSP  DCSP  DCSP cache_control_values = [value.strip() for value in response['Cache-Control'].split(',') if (value.strip().lower() not in offending_headers)] DCNL DCSP  DCSP  DCSP if (not len(cache_control_values)): DCNL DCSP  DCSP  DCSP  DCSP del response['Cache-Control'] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP response['Cache-Control'] = ', DCSP '.join(cache_control_values) DCNL DCSP return response
def fix_IE_for_vary(request, response): DCNL  DCSP useragent = request.META.get('HTTP_USER_AGENT', '').upper() DCNL DCSP if (('MSIE' not in useragent) and ('CHROMEFRAME' not in useragent)): DCNL DCSP  DCSP return response DCNL DCSP safe_mime_types = ('text/html', 'text/plain', 'text/sgml') DCNL DCSP mime_type = response.get('Content-Type', '').partition(';')[0] DCNL DCSP if (mime_type not in safe_mime_types): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP del response['Vary'] DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP return response
def build_request_repr(request, path_override=None, GET_override=None, POST_override=None, COOKIES_override=None, META_override=None): DCNL  DCSP try: DCNL DCSP  DCSP get = (pformat(GET_override) if (GET_override is not None) else pformat(request.GET)) DCNL DCSP except Exception: DCNL DCSP  DCSP get = u'<could DCSP not DCSP parse>' DCNL DCSP if request._post_parse_error: DCNL DCSP  DCSP post = u'<could DCSP not DCSP parse>' DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP post = (pformat(POST_override) if (POST_override is not None) else pformat(request.POST)) DCNL DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP post = u'<could DCSP not DCSP parse>' DCNL DCSP try: DCNL DCSP  DCSP cookies = (pformat(COOKIES_override) if (COOKIES_override is not None) else pformat(request.COOKIES)) DCNL DCSP except Exception: DCNL DCSP  DCSP cookies = u'<could DCSP not DCSP parse>' DCNL DCSP try: DCNL DCSP  DCSP meta = (pformat(META_override) if (META_override is not None) else pformat(request.META)) DCNL DCSP except Exception: DCNL DCSP  DCSP meta = u'<could DCSP not DCSP parse>' DCNL DCSP path = (path_override if (path_override is not None) else request.path) DCNL DCSP return force_str((u'<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % (request.__class__.__name__, path, six.text_type(get), six.text_type(post), six.text_type(cookies), six.text_type(meta))))
def bytes_to_text(s, encoding): DCNL  DCSP if isinstance(s, bytes): DCNL DCSP  DCSP return six.text_type(s, encoding, u'replace') DCNL DCSP else: DCNL DCSP  DCSP return s
def validate_host(host, allowed_hosts): DCNL  DCSP host = host.lower() DCNL DCSP if (not host_validation_re.match(host)): DCNL DCSP  DCSP return False DCNL DCSP if (host[(-1)] == u']'): DCNL DCSP  DCSP domain = host DCNL DCSP else: DCNL DCSP  DCSP domain = host.rsplit(u':', 1)[0] DCNL DCSP for pattern in allowed_hosts: DCNL DCSP  DCSP pattern = pattern.lower() DCNL DCSP  DCSP match = ((pattern == u'*') or (pattern.startswith(u'.') and (domain.endswith(pattern) or (domain == pattern[1:]))) or (pattern == domain)) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP return True DCNL DCSP return False
def i18n_patterns(prefix, *args): DCNL  DCSP pattern_list = patterns(prefix, *args) DCNL DCSP if (not settings.USE_I18N): DCNL DCSP  DCSP return pattern_list DCNL DCSP return [LocaleRegexURLResolver(pattern_list)]
def static(prefix, view='django.views.static.serve', **kwargs): DCNL  DCSP if ((not settings.DEBUG) or (prefix and ('://' in prefix))): DCNL DCSP  DCSP return [] DCNL DCSP elif (not prefix): DCNL DCSP  DCSP raise ImproperlyConfigured('Empty DCSP static DCSP prefix DCSP not DCSP permitted') DCNL DCSP return patterns('', url(('^%s(?P<path>.*)$' % re.escape(prefix.lstrip('/'))), view, kwargs=kwargs))
def compat_patch_logging_config(logging_config): DCNL  DCSP if ('filters' not in logging_config.get('handlers', {}).get('mail_admins', {'filters': []})): DCNL DCSP  DCSP warnings.warn("You DCSP have DCSP no DCSP filters DCSP defined DCSP on DCSP the DCSP 'mail_admins' DCSP logging DCSP handler: DCSP adding DCSP implicit DCSP debug-false-only DCSP filter. DCSP See DCSP http://docs.djangoproject.com/en/dev/releases/1.4/#request-exceptions-are-now-always-logged", DeprecationWarning) DCNL DCSP  DCSP filter_name = 'require_debug_false' DCNL DCSP  DCSP filters = logging_config.setdefault('filters', {}) DCNL DCSP  DCSP while (filter_name in filters): DCNL DCSP  DCSP  DCSP filter_name = (filter_name + '_') DCNL DCSP  DCSP filters[filter_name] = {'()': 'django.utils.log.RequireDebugFalse'} DCNL DCSP  DCSP logging_config['handlers']['mail_admins']['filters'] = [filter_name]
@register.tag(u'get_available_languages') DCNL def do_get_available_languages(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 3) or (args[1] != u'as')): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'get_available_languages' DCSP requires DCSP 'as DCSP variable' DCSP (got DCSP %r)" % args)) DCNL DCSP return GetAvailableLanguagesNode(args[2])
@register.tag(u'get_language_info') DCNL def do_get_language_info(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 5) or (args[1] != u'for') or (args[3] != u'as')): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP requires DCSP 'for DCSP string DCSP as DCSP variable' DCSP (got DCSP %r)" % (args[0], args[1:]))) DCNL DCSP return GetLanguageInfoNode(args[2], args[4])
@register.tag(u'get_language_info_list') DCNL def do_get_language_info_list(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 5) or (args[1] != u'for') or (args[3] != u'as')): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP requires DCSP 'for DCSP sequence DCSP as DCSP variable' DCSP (got DCSP %r)" % (args[0], args[1:]))) DCNL DCSP return GetLanguageInfoListNode(args[2], args[4])
@register.tag(u'get_current_language') DCNL def do_get_current_language(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 3) or (args[1] != u'as')): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'get_current_language' DCSP requires DCSP 'as DCSP variable' DCSP (got DCSP %r)" % args)) DCNL DCSP return GetCurrentLanguageNode(args[2])
@register.tag(u'get_current_language_bidi') DCNL def do_get_current_language_bidi(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 3) or (args[1] != u'as')): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'get_current_language_bidi' DCSP requires DCSP 'as DCSP variable' DCSP (got DCSP %r)" % args)) DCNL DCSP return GetCurrentLanguageBidiNode(args[2])
@register.tag(u'trans') DCNL def do_translate(parser, token): DCNL  DCSP class TranslateParser(TokenParser, ): DCNL DCSP  DCSP def top(self): DCNL DCSP  DCSP  DCSP value = self.value() DCNL DCSP  DCSP  DCSP if (value[0] == u"'"): DCNL DCSP  DCSP  DCSP  DCSP m = re.match(u"^'([^']+)'(\\|.*$)", value) DCNL DCSP  DCSP  DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP  DCSP  DCSP value = (u'"%s"%s' % (m.group(1).replace(u'"', u'\\"'), m.group(2))) DCNL DCSP  DCSP  DCSP  DCSP elif (value[(-1)] == u"'"): DCNL DCSP  DCSP  DCSP  DCSP  DCSP value = (u'"%s"' % value[1:(-1)].replace(u'"', u'\\"')) DCNL DCSP  DCSP  DCSP noop = False DCNL DCSP  DCSP  DCSP asvar = None DCNL DCSP  DCSP  DCSP message_context = None DCNL DCSP  DCSP  DCSP while self.more(): DCNL DCSP  DCSP  DCSP  DCSP tag = self.tag() DCNL DCSP  DCSP  DCSP  DCSP if (tag == u'noop'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP noop = True DCNL DCSP  DCSP  DCSP  DCSP elif (tag == u'context'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP message_context = parser.compile_filter(self.value()) DCNL DCSP  DCSP  DCSP  DCSP elif (tag == u'as'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP asvar = self.tag() DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError(u'Only DCSP options DCSP for DCSP \'trans\' DCSP are DCSP \'noop\', DCSP \'context DCSP "xxx"\', DCSP and DCSP \'as DCSP VAR\'.') DCNL DCSP  DCSP  DCSP return (value, noop, asvar, message_context) DCNL DCSP (value, noop, asvar, message_context) = TranslateParser(token.contents).top() DCNL DCSP return TranslateNode(parser.compile_filter(value), noop, asvar, message_context)
@register.tag(u'blocktrans') DCNL def do_block_translate(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP options = {} DCNL DCSP remaining_bits = bits[1:] DCNL DCSP while remaining_bits: DCNL DCSP  DCSP option = remaining_bits.pop(0) DCNL DCSP  DCSP if (option in options): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u'The DCSP %r DCSP option DCSP was DCSP specified DCSP more DCSP than DCSP once.' % option)) DCNL DCSP  DCSP if (option == u'with'): DCNL DCSP  DCSP  DCSP value = token_kwargs(remaining_bits, parser, support_legacy=True) DCNL DCSP  DCSP  DCSP if (not value): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u'"with" DCSP in DCSP %r DCSP tag DCSP needs DCSP at DCSP least DCSP one DCSP keyword DCSP argument.' % bits[0])) DCNL DCSP  DCSP elif (option == u'count'): DCNL DCSP  DCSP  DCSP value = token_kwargs(remaining_bits, parser, support_legacy=True) DCNL DCSP  DCSP  DCSP if (len(value) != 1): DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u'"count" DCSP in DCSP %r DCSP tag DCSP expected DCSP exactly DCSP one DCSP keyword DCSP argument.' % bits[0])) DCNL DCSP  DCSP elif (option == u'context'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP value = remaining_bits.pop(0) DCNL DCSP  DCSP  DCSP  DCSP value = parser.compile_filter(value) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP raise TemplateSyntaxError((u'"context" DCSP in DCSP %r DCSP tag DCSP expected DCSP exactly DCSP one DCSP argument.' % bits[0])) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError((u'Unknown DCSP argument DCSP for DCSP %r DCSP tag: DCSP %r.' % (bits[0], option))) DCNL DCSP  DCSP options[option] = value DCNL DCSP if (u'count' in options): DCNL DCSP  DCSP (countervar, counter) = list(six.iteritems(options[u'count']))[0] DCNL DCSP else: DCNL DCSP  DCSP (countervar, counter) = (None, None) DCNL DCSP if (u'context' in options): DCNL DCSP  DCSP message_context = options[u'context'] DCNL DCSP else: DCNL DCSP  DCSP message_context = None DCNL DCSP extra_context = options.get(u'with', {}) DCNL DCSP singular = [] DCNL DCSP plural = [] DCNL DCSP while parser.tokens: DCNL DCSP  DCSP token = parser.next_token() DCNL DCSP  DCSP if (token.token_type in (TOKEN_VAR, TOKEN_TEXT)): DCNL DCSP  DCSP  DCSP singular.append(token) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP break DCNL DCSP if (countervar and counter): DCNL DCSP  DCSP if (token.contents.strip() != u'plural'): DCNL DCSP  DCSP  DCSP raise TemplateSyntaxError(u"'blocktrans' DCSP doesn't DCSP allow DCSP other DCSP block DCSP tags DCSP inside DCSP it") DCNL DCSP  DCSP while parser.tokens: DCNL DCSP  DCSP  DCSP token = parser.next_token() DCNL DCSP  DCSP  DCSP if (token.token_type in (TOKEN_VAR, TOKEN_TEXT)): DCNL DCSP  DCSP  DCSP  DCSP plural.append(token) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if (token.contents.strip() != u'endblocktrans'): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'blocktrans' DCSP doesn't DCSP allow DCSP other DCSP block DCSP tags DCSP (seen DCSP %r) DCSP inside DCSP it" % token.contents)) DCNL DCSP return BlockTranslateNode(extra_context, singular, plural, countervar, counter, message_context)
@register.tag DCNL def language(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%s' DCSP takes DCSP one DCSP argument DCSP (language)" % bits[0])) DCNL DCSP language = parser.compile_filter(bits[1]) DCNL DCSP nodelist = parser.parse((u'endlanguage',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return LanguageNode(nodelist, language)
@register.tag(u'cache') DCNL def do_cache(parser, token): DCNL  DCSP nodelist = parser.parse((u'endcache',)) DCNL DCSP parser.delete_first_token() DCNL DCSP tokens = token.contents.split() DCNL DCSP if (len(tokens) < 3): DCNL DCSP  DCSP raise TemplateSyntaxError((u"'%r' DCSP tag DCSP requires DCSP at DCSP least DCSP 2 DCSP arguments." % tokens[0])) DCNL DCSP return CacheNode(nodelist, tokens[1], tokens[2], tokens[3:])
@register.tag DCNL def get_static_prefix(parser, token): DCNL  DCSP return PrefixNode.handle_token(parser, token, 'STATIC_URL')
@register.tag DCNL def get_media_prefix(parser, token): DCNL  DCSP return PrefixNode.handle_token(parser, token, 'MEDIA_URL')
@register.tag('static') DCNL def do_static(parser, token): DCNL  DCSP return StaticNode.handle_token(parser, token)
@register.filter(is_safe=False) DCNL def localize(value): DCNL  DCSP return force_text(formats.localize(value, use_l10n=True))
@register.filter(is_safe=False) DCNL def unlocalize(value): DCNL  DCSP return force_text(value)
@register.tag('localize') DCNL def localize_tag(parser, token): DCNL  DCSP use_l10n = None DCNL DCSP bits = list(token.split_contents()) DCNL DCSP if (len(bits) == 1): DCNL DCSP  DCSP use_l10n = True DCNL DCSP elif ((len(bits) > 2) or (bits[1] not in ('on', 'off'))): DCNL DCSP  DCSP raise TemplateSyntaxError(("%r DCSP argument DCSP should DCSP be DCSP 'on' DCSP or DCSP 'off'" % bits[0])) DCNL DCSP else: DCNL DCSP  DCSP use_l10n = (bits[1] == 'on') DCNL DCSP nodelist = parser.parse(('endlocalize',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return LocalizeNode(nodelist, use_l10n)
@register.filter DCNL def localtime(value): DCNL  DCSP return do_timezone(value, timezone.get_current_timezone())
@register.filter DCNL def utc(value): DCNL  DCSP return do_timezone(value, timezone.utc)
@register.filter('timezone') DCNL def do_timezone(value, arg): DCNL  DCSP if (not isinstance(value, datetime)): DCNL DCSP  DCSP return '' DCNL DCSP try: DCNL DCSP  DCSP if timezone.is_naive(value): DCNL DCSP  DCSP  DCSP default_timezone = timezone.get_default_timezone() DCNL DCSP  DCSP  DCSP value = timezone.make_aware(value, default_timezone) DCNL DCSP except Exception: DCNL DCSP  DCSP return '' DCNL DCSP if isinstance(arg, tzinfo): DCNL DCSP  DCSP tz = arg DCNL DCSP elif (isinstance(arg, six.string_types) and (pytz is not None)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP tz = pytz.timezone(arg) DCNL DCSP  DCSP except pytz.UnknownTimeZoneError: DCNL DCSP  DCSP  DCSP return '' DCNL DCSP else: DCNL DCSP  DCSP return '' DCNL DCSP result = timezone.localtime(value, tz) DCNL DCSP result = datetimeobject(result.year, result.month, result.day, result.hour, result.minute, result.second, result.microsecond, result.tzinfo) DCNL DCSP result.convert_to_local_time = False DCNL DCSP return result
@register.tag('localtime') DCNL def localtime_tag(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) == 1): DCNL DCSP  DCSP use_tz = True DCNL DCSP elif ((len(bits) > 2) or (bits[1] not in ('on', 'off'))): DCNL DCSP  DCSP raise TemplateSyntaxError(("%r DCSP argument DCSP should DCSP be DCSP 'on' DCSP or DCSP 'off'" % bits[0])) DCNL DCSP else: DCNL DCSP  DCSP use_tz = (bits[1] == 'on') DCNL DCSP nodelist = parser.parse(('endlocaltime',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return LocalTimeNode(nodelist, use_tz)
@register.tag('timezone') DCNL def timezone_tag(parser, token): DCNL  DCSP bits = token.split_contents() DCNL DCSP if (len(bits) != 2): DCNL DCSP  DCSP raise TemplateSyntaxError(("'%s' DCSP takes DCSP one DCSP argument DCSP (timezone)" % bits[0])) DCNL DCSP tz = parser.compile_filter(bits[1]) DCNL DCSP nodelist = parser.parse(('endtimezone',)) DCNL DCSP parser.delete_first_token() DCNL DCSP return TimezoneNode(nodelist, tz)
@register.tag('get_current_timezone') DCNL def get_current_timezone_tag(parser, token): DCNL  DCSP args = token.contents.split() DCNL DCSP if ((len(args) != 3) or (args[1] != 'as')): DCNL DCSP  DCSP raise TemplateSyntaxError(("'get_current_timezone' DCSP requires DCSP 'as DCSP variable' DCSP (got DCSP %r)" % args)) DCNL DCSP return GetCurrentTimezoneNode(args[2])
def prepare_suites_from_test_cases(case_class_list): DCNL  DCSP test_suites = [] DCNL DCSP for cls in case_class_list: DCNL DCSP  DCSP test_suites.append(unittest.TestLoader().loadTestsFromTestCase(cls)) DCNL DCSP return test_suites
def create_callback_server(session): DCNL  DCSP class CallbackHandler(SimpleHTTPServer.SimpleHTTPRequestHandler, ): DCNL DCSP  DCSP def do_GET(self): DCNL DCSP  DCSP  DCSP params = cgi.parse_qs(self.path.split('?', 1)[1], keep_blank_values=False) DCNL DCSP  DCSP  DCSP session.REQUEST_TOKEN = OAuthToken(params['oauth_token'][0], params['oauth_token_secret'][0]) DCNL DCSP  DCSP  DCSP session.REQUEST_TOKEN.set_verifier(params['oauth_verifier'][0]) DCNL DCSP  DCSP  DCSP self.send_response(200) DCNL DCSP  DCSP  DCSP self.send_header('Content-Type', 'text/plain') DCNL DCSP  DCSP  DCSP self.end_headers() DCNL DCSP  DCSP  DCSP self.wfile.write('OAuth DCSP request DCSP token DCSP fetched; DCSP you DCSP can DCSP close DCSP this DCSP window.') DCNL DCSP  DCSP def log_request(self, code='-', size='-'): DCNL DCSP  DCSP  DCSP pass DCNL DCSP server = SocketServer.TCPServer(('127.0.0.1', 0), CallbackHandler) DCNL DCSP return server
def api_call(target_version, target_api_url, session, debug=False, authenticate=True): DCNL  DCSP resource_url = (('/api/' + target_version) + target_api_url) DCNL DCSP try: DCNL DCSP  DCSP if (authenticate and session.REQUEST_TOKEN and session.ACCESS_TOKEN): DCNL DCSP  DCSP  DCSP client = TestOAuthClient(session.SERVER_URL, CONSUMER_KEY, CONSUMER_SECRET) DCNL DCSP  DCSP  DCSP response = client.access_resource(resource_url, session.ACCESS_TOKEN) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP response = requests.get((session.SERVER_URL + resource_url)).content DCNL DCSP  DCSP json_object = json.loads(response) DCNL DCSP except Exception as e: DCNL DCSP  DCSP print e, ('for DCSP target: DCSP %(target)s DCSP ' % {'target': target_api_url}) DCNL DCSP  DCSP return {} DCNL DCSP if debug: DCNL DCSP  DCSP print json_object DCNL DCSP return json_object
def n_deep(obj, names): DCNL  DCSP for name in names: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP obj = getattr(obj, name) DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP raise APIError(('This DCSP object DCSP is DCSP missing DCSP the DCSP %s DCSP attribute.' % name), obj) DCNL DCSP return obj
def build_authenticate_header(realm=''): DCNL  DCSP return {'WWW-Authenticate': ('OAuth DCSP realm="%s"' % realm)}
def escape(s): DCNL  DCSP return urllib.quote(s, safe='~')
def _utf8_str(s): DCNL  DCSP if isinstance(s, unicode): DCNL DCSP  DCSP return s.encode('utf-8') DCNL DCSP else: DCNL DCSP  DCSP return str(s)
def generate_timestamp(): DCNL  DCSP return int(time.time())
def generate_nonce(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def generate_verifier(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def _resolve_name(name, package, level): DCNL  DCSP if (not hasattr(package, 'rindex')): DCNL DCSP  DCSP raise ValueError("'package' DCSP not DCSP set DCSP to DCSP a DCSP string") DCNL DCSP dot = len(package) DCNL DCSP for x in xrange(level, 1, (-1)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP dot = package.rindex('.', 0, dot) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise ValueError('attempted DCSP relative DCSP import DCSP beyond DCSP top-level DCSP package') DCNL DCSP return ('%s.%s' % (package[:dot], name))
def import_module(name, package=None): DCNL  DCSP if name.startswith('.'): DCNL DCSP  DCSP if (not package): DCNL DCSP  DCSP  DCSP raise TypeError("relative DCSP imports DCSP require DCSP the DCSP 'package' DCSP argument") DCNL DCSP  DCSP level = 0 DCNL DCSP  DCSP for character in name: DCNL DCSP  DCSP  DCSP if (character != '.'): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP level += 1 DCNL DCSP  DCSP name = _resolve_name(name[level:], package, level) DCNL DCSP __import__(name) DCNL DCSP return sys.modules[name]
def do_terminate_threads(whitelist=list()): DCNL  DCSP for t in threading.enumerate(): DCNL DCSP  DCSP if (not isinstance(t, TerminatableThread)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (whitelist and (t not in whitelist)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP t.schedule_termination() DCNL DCSP  DCSP t.stop_and_join()
def terminate_threads(func): DCNL  DCSP def wrapper(*args, **kwargs): DCNL DCSP  DCSP cur_threads = set(threading.enumerate()) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return func(*args, **kwargs) DCNL DCSP  DCSP finally: DCNL DCSP  DCSP  DCSP do_terminate_threads((set(threading.enumerate()) - cur_threads)) DCNL DCSP wrapper.__name__ = func.__name__ DCNL DCSP return wrapper
def _init_atexit(): DCNL  DCSP import atexit DCNL DCSP import thread DCNL DCSP atexit.register(thread.do_terminate_threads)
def _init_signals(): DCNL  DCSP import signal DCNL DCSP import thread DCNL DCSP import sys DCNL DCSP prev_handler = signal.getsignal(signal.SIGINT) DCNL DCSP def thread_interrupt_handler(signum, frame): DCNL DCSP  DCSP thread.do_terminate_threads() DCNL DCSP  DCSP if callable(prev_handler): DCNL DCSP  DCSP  DCSP prev_handler(signum, frame) DCNL DCSP  DCSP  DCSP raise KeyboardInterrupt() DCNL DCSP try: DCNL DCSP  DCSP signal.signal(signal.SIGINT, thread_interrupt_handler) DCNL DCSP except ValueError: DCNL DCSP  DCSP print >>sys.stderr, 'Failed DCSP to DCSP setup DCSP thread-interrupt DCSP handler. DCSP This DCSP is DCSP usually DCSP not DCSP critical'
def mkchannel(ctype=Channel, wtype=ChannelWriter, rtype=ChannelReader): DCNL  DCSP c = ctype() DCNL DCSP wc = wtype(c) DCNL DCSP rc = rtype(c) DCNL DCSP return (wc, rc)
def cpu_count(): DCNL  DCSP num = 0 DCNL DCSP try: DCNL DCSP  DCSP if (sys.platform == 'win32'): DCNL DCSP  DCSP  DCSP num = int(os.environ['NUMBER_OF_PROCESSORS']) DCNL DCSP  DCSP elif (('bsd' in sys.platform) or (sys.platform == 'darwin')): DCNL DCSP  DCSP  DCSP num = int(os.popen('sysctl DCSP -n DCSP hw.ncpu').read()) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP num = os.sysconf('SC_NPROCESSORS_ONLN') DCNL DCSP except (ValueError, KeyError, OSError, AttributeError): DCNL DCSP  DCSP pass DCNL DCSP if (num == 0): DCNL DCSP  DCSP raise NotImplementedError('cannot DCSP determine DCSP number DCSP of DCSP cpus') DCNL DCSP return num
def _mkdir(newdir): DCNL  DCSP if os.path.isdir(newdir): DCNL DCSP  DCSP pass DCNL DCSP elif os.path.isfile(newdir): DCNL DCSP  DCSP raise OSError(("a DCSP file DCSP with DCSP the DCSP same DCSP name DCSP as DCSP the DCSP desired DCSP dir, DCSP '%s', DCSP already DCSP exists." % newdir)) DCNL DCSP else: DCNL DCSP  DCSP (head, tail) = os.path.split(newdir) DCNL DCSP  DCSP if (head and (not os.path.isdir(head))): DCNL DCSP  DCSP  DCSP _mkdir(head) DCNL DCSP  DCSP if tail: DCNL DCSP  DCSP  DCSP os.mkdir(newdir)
def _pofile_or_mofile(f, type, **kwargs): DCNL  DCSP enc = kwargs.get('encoding') DCNL DCSP if (enc is None): DCNL DCSP  DCSP enc = detect_encoding(f, (type == 'mofile')) DCNL DCSP kls = (((type == 'pofile') and _POFileParser) or _MOFileParser) DCNL DCSP parser = kls(f, encoding=enc, check_for_duplicates=kwargs.get('check_for_duplicates', False), klass=kwargs.get('klass')) DCNL DCSP instance = parser.parse() DCNL DCSP instance.wrapwidth = kwargs.get('wrapwidth', 78) DCNL DCSP return instance
def pofile(pofile, **kwargs): DCNL  DCSP return _pofile_or_mofile(pofile, 'pofile', **kwargs)
def mofile(mofile, **kwargs): DCNL  DCSP return _pofile_or_mofile(mofile, 'mofile', **kwargs)
def detect_encoding(file, binary_mode=False): DCNL  DCSP PATTERN = '"?Content-Type:.+? DCSP charset=([\\w_\\-:\\.]+)' DCNL DCSP rxt = re.compile(u(PATTERN)) DCNL DCSP rxb = re.compile(b(PATTERN)) DCNL DCSP def charset_exists(charset): DCNL DCSP  DCSP 'Check DCSP whether DCSP ``charset`` DCSP is DCSP valid DCSP or DCSP not.' DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP codecs.lookup(charset) DCNL DCSP  DCSP except LookupError: DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return True DCNL DCSP try: DCNL DCSP  DCSP is_file = os.path.exists(file) DCNL DCSP except (ValueError, UnicodeEncodeError): DCNL DCSP  DCSP is_file = False DCNL DCSP if (not is_file): DCNL DCSP  DCSP match = rxt.search(file) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP enc = match.group(1).strip() DCNL DCSP  DCSP  DCSP if charset_exists(enc): DCNL DCSP  DCSP  DCSP  DCSP return enc DCNL DCSP else: DCNL DCSP  DCSP if (binary_mode or PY3): DCNL DCSP  DCSP  DCSP mode = 'rb' DCNL DCSP  DCSP  DCSP rx = rxb DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP mode = 'r' DCNL DCSP  DCSP  DCSP rx = rxt DCNL DCSP  DCSP f = open(file, mode) DCNL DCSP  DCSP for l in f.readlines(): DCNL DCSP  DCSP  DCSP match = rx.search(l) DCNL DCSP  DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP  DCSP f.close() DCNL DCSP  DCSP  DCSP  DCSP enc = match.group(1).strip() DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(enc, text_type)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP enc = enc.decode('utf-8') DCNL DCSP  DCSP  DCSP  DCSP if charset_exists(enc): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return enc DCNL DCSP  DCSP f.close() DCNL DCSP return default_encoding
def escape(st): DCNL  DCSP return st.replace('\\', '\\\\').replace(' DCTB ', '\\t').replace('\r', '\\r').replace('\n', '\\n').replace('"', '\\"')
def unescape(st): DCNL  DCSP def unescape_repl(m): DCNL DCSP  DCSP m = m.group(1) DCNL DCSP  DCSP if (m == 'n'): DCNL DCSP  DCSP  DCSP return '\n' DCNL DCSP  DCSP if (m == 't'): DCNL DCSP  DCSP  DCSP return ' DCTB ' DCNL DCSP  DCSP if (m == 'r'): DCNL DCSP  DCSP  DCSP return '\r' DCNL DCSP  DCSP if (m == '\\'): DCNL DCSP  DCSP  DCSP return '\\' DCNL DCSP  DCSP return m DCNL DCSP return re.sub('\\\\(\\\\|n|t|r|")', unescape_repl, st)
def wrap(text, width=70, **kwargs): DCNL  DCSP if (sys.version_info < (2, 6)): DCNL DCSP  DCSP return TextWrapper(width=width, **kwargs).wrap(text) DCNL DCSP return textwrap.wrap(text, width=width, **kwargs)
def update_self(to_screen, verbose): DCNL  DCSP UPDATE_URL = u'http://rg3.github.io/youtube-dl/update/' DCNL DCSP VERSION_URL = (UPDATE_URL + u'LATEST_VERSION') DCNL DCSP JSON_URL = (UPDATE_URL + u'versions.json') DCNL DCSP UPDATES_RSA_KEY = (110515036678624498633222953073032078298735521709391402589764408049151437941646067982326004021332910668081004672848858224906496836524826936897585010290551444372549693428709563945506445224567736791107240888089589002990173235666605590312871472859021661974080261015911409126475913199256336006843052712065006763667L, 65537) DCNL DCSP if ((not isinstance(globals().get(u'__loader__'), zipimporter)) and (not hasattr(sys, u'frozen'))): DCNL DCSP  DCSP to_screen(u'It DCSP looks DCSP like DCSP you DCSP installed DCSP youtube-dl DCSP with DCSP a DCSP package DCSP manager, DCSP pip, DCSP setup.py DCSP or DCSP a DCSP tarball. DCSP Please DCSP use DCSP that DCSP to DCSP update.') DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP newversion = compat_urllib_request.urlopen(VERSION_URL).read().decode(u'utf-8').strip() DCNL DCSP except: DCNL DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP to_screen(u"ERROR: DCSP can't DCSP find DCSP the DCSP current DCSP version. DCSP Please DCSP try DCSP again DCSP later.") DCNL DCSP  DCSP return DCNL DCSP if (newversion == __version__): DCNL DCSP  DCSP to_screen(((u'youtube-dl DCSP is DCSP up-to-date DCSP (' + __version__) + u')')) DCNL DCSP  DCSP return DCNL DCSP try: DCNL DCSP  DCSP versions_info = compat_urllib_request.urlopen(JSON_URL).read().decode(u'utf-8') DCNL DCSP  DCSP versions_info = json.loads(versions_info) DCNL DCSP except: DCNL DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP to_screen(u"ERROR: DCSP can't DCSP obtain DCSP versions DCSP info. DCSP Please DCSP try DCSP again DCSP later.") DCNL DCSP  DCSP return DCNL DCSP if (u'signature' not in versions_info): DCNL DCSP  DCSP to_screen(u'ERROR: DCSP the DCSP versions DCSP file DCSP is DCSP not DCSP signed DCSP or DCSP corrupted. DCSP Aborting.') DCNL DCSP  DCSP return DCNL DCSP signature = versions_info[u'signature'] DCNL DCSP del versions_info[u'signature'] DCNL DCSP if (not rsa_verify(json.dumps(versions_info, sort_keys=True).encode(u'utf-8'), signature, UPDATES_RSA_KEY)): DCNL DCSP  DCSP to_screen(u'ERROR: DCSP the DCSP versions DCSP file DCSP signature DCSP is DCSP invalid. DCSP Aborting.') DCNL DCSP  DCSP return DCNL DCSP version_id = versions_info[u'latest'] DCNL DCSP def version_tuple(version_str): DCNL DCSP  DCSP return tuple(map(int, version_str.split(u'.'))) DCNL DCSP if (version_tuple(__version__) >= version_tuple(version_id)): DCNL DCSP  DCSP to_screen((u'youtube-dl DCSP is DCSP up DCSP to DCSP date DCSP (%s)' % __version__)) DCNL DCSP  DCSP return DCNL DCSP to_screen(((u'Updating DCSP to DCSP version DCSP ' + version_id) + u' DCSP ...')) DCNL DCSP version = versions_info[u'versions'][version_id] DCNL DCSP print_notes(to_screen, versions_info[u'versions']) DCNL DCSP filename = sys.argv[0] DCNL DCSP if (hasattr(sys, u'frozen') and (not os.path.isfile(filename))): DCNL DCSP  DCSP if os.path.isfile((filename + u'.exe')): DCNL DCSP  DCSP  DCSP filename += u'.exe' DCNL DCSP if (not os.access(filename, os.W_OK)): DCNL DCSP  DCSP to_screen((u'ERROR: DCSP no DCSP write DCSP permissions DCSP on DCSP %s' % filename)) DCNL DCSP  DCSP return DCNL DCSP if hasattr(sys, u'frozen'): DCNL DCSP  DCSP exe = os.path.abspath(filename) DCNL DCSP  DCSP directory = os.path.dirname(exe) DCNL DCSP  DCSP if (not os.access(directory, os.W_OK)): DCNL DCSP  DCSP  DCSP to_screen((u'ERROR: DCSP no DCSP write DCSP permissions DCSP on DCSP %s' % directory)) DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP urlh = compat_urllib_request.urlopen(version[u'exe'][0]) DCNL DCSP  DCSP  DCSP newcontent = urlh.read() DCNL DCSP  DCSP  DCSP urlh.close() DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP unable DCSP to DCSP download DCSP latest DCSP version') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP newcontent_hash = hashlib.sha256(newcontent).hexdigest() DCNL DCSP  DCSP if (newcontent_hash != version[u'exe'][1]): DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP the DCSP downloaded DCSP file DCSP hash DCSP does DCSP not DCSP match. DCSP Aborting.') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP with open((exe + u'.new'), u'wb') as outf: DCNL DCSP  DCSP  DCSP  DCSP outf.write(newcontent) DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP unable DCSP to DCSP write DCSP the DCSP new DCSP version') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP bat = os.path.join(directory, u'youtube-dl-updater.bat') DCNL DCSP  DCSP  DCSP with io.open(bat, u'w') as batfile: DCNL DCSP  DCSP  DCSP  DCSP batfile.write((u'\n@echo DCSP off\necho DCSP Waiting DCSP for DCSP file DCSP handle DCSP to DCSP be DCSP closed DCSP ...\nping DCSP 127.0.0.1 DCSP -n DCSP 5 DCSP -w DCSP 1000 DCSP > DCSP NUL\nmove DCSP /Y DCSP "%s.new" DCSP "%s" DCSP > DCSP NUL\necho DCSP Updated DCSP youtube-dl DCSP to DCSP version DCSP %s.\nstart DCSP /b DCSP "" DCSP cmd DCSP /c DCSP del DCSP "%%~f0"&exit DCSP /b"\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP \n' % (exe, exe, version_id))) DCNL DCSP  DCSP  DCSP subprocess.Popen([bat]) DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP unable DCSP to DCSP overwrite DCSP current DCSP version') DCNL DCSP  DCSP  DCSP return DCNL DCSP elif isinstance(globals().get(u'__loader__'), zipimporter): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP urlh = compat_urllib_request.urlopen(version[u'bin'][0]) DCNL DCSP  DCSP  DCSP newcontent = urlh.read() DCNL DCSP  DCSP  DCSP urlh.close() DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP unable DCSP to DCSP download DCSP latest DCSP version') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP newcontent_hash = hashlib.sha256(newcontent).hexdigest() DCNL DCSP  DCSP if (newcontent_hash != version[u'bin'][1]): DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP the DCSP downloaded DCSP file DCSP hash DCSP does DCSP not DCSP match. DCSP Aborting.') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP with open(filename, u'wb') as outf: DCNL DCSP  DCSP  DCSP  DCSP outf.write(newcontent) DCNL DCSP  DCSP except (IOError, OSError): DCNL DCSP  DCSP  DCSP if verbose: DCNL DCSP  DCSP  DCSP  DCSP to_screen(compat_str(traceback.format_exc())) DCNL DCSP  DCSP  DCSP to_screen(u'ERROR: DCSP unable DCSP to DCSP overwrite DCSP current DCSP version') DCNL DCSP  DCSP  DCSP return DCNL DCSP to_screen(u'Updated DCSP youtube-dl. DCSP Restart DCSP youtube-dl DCSP to DCSP use DCSP the DCSP new DCSP version.')
def preferredencoding(): DCNL  DCSP try: DCNL DCSP  DCSP pref = locale.getpreferredencoding() DCNL DCSP  DCSP u'TEST'.encode(pref) DCNL DCSP except: DCNL DCSP  DCSP pref = u'UTF-8' DCNL DCSP return pref
def write_json_file(obj, fn): DCNL  DCSP fn = encodeFilename(fn) DCNL DCSP if ((sys.version_info < (3, 0)) and (sys.platform != u'win32')): DCNL DCSP  DCSP encoding = get_filesystem_encoding() DCNL DCSP  DCSP path_basename = (lambda f: os.path.basename(fn).decode(encoding)) DCNL DCSP  DCSP path_dirname = (lambda f: os.path.dirname(fn).decode(encoding)) DCNL DCSP else: DCNL DCSP  DCSP path_basename = os.path.basename DCNL DCSP  DCSP path_dirname = os.path.dirname DCNL DCSP args = {u'suffix': u'.tmp', u'prefix': (path_basename(fn) + u'.'), u'dir': path_dirname(fn), u'delete': False} DCNL DCSP if (sys.version_info < (3, 0)): DCNL DCSP  DCSP args[u'mode'] = u'wb' DCNL DCSP else: DCNL DCSP  DCSP args.update({u'mode': u'w', u'encoding': u'utf-8'}) DCNL DCSP tf = tempfile.NamedTemporaryFile(**args) DCNL DCSP try: DCNL DCSP  DCSP with tf: DCNL DCSP  DCSP  DCSP json.dump(obj, tf) DCNL DCSP  DCSP if (sys.platform == u'win32'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP os.unlink(fn) DCNL DCSP  DCSP  DCSP except OSError: DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP os.rename(tf.name, fn) DCNL DCSP except: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP os.remove(tf.name) DCNL DCSP  DCSP except OSError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP raise
def get_element_by_id(id, html): DCNL  DCSP return get_element_by_attribute(u'id', id, html)
def get_element_by_attribute(attribute, value, html): DCNL  DCSP m = re.search((u'(?xs)\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP <([a-zA-Z0-9:._-]+)\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|="[^"]+"|=\'[^\']+\'))*?\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP \\s+%s=[\'"]?%s[\'"]?\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|="[^"]+"|=\'[^\']+\'))*?\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP \\s*>\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (?P<content>.*?)\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP </\\1>\n DCSP  DCSP  DCSP  DCSP ' % (re.escape(attribute), re.escape(value))), html) DCNL DCSP if (not m): DCNL DCSP  DCSP return None DCNL DCSP res = m.group(u'content') DCNL DCSP if (res.startswith(u'"') or res.startswith(u"'")): DCNL DCSP  DCSP res = res[1:(-1)] DCNL DCSP return unescapeHTML(res)
def clean_html(html): DCNL  DCSP html = html.replace(u'\n', u' DCSP ') DCNL DCSP html = re.sub(u'\\s*<\\s*br\\s*/?\\s*>\\s*', u'\n', html) DCNL DCSP html = re.sub(u'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', u'\n', html) DCNL DCSP html = re.sub(u'<.*?>', u'', html) DCNL DCSP html = unescapeHTML(html) DCNL DCSP return html.strip()
def sanitize_open(filename, open_mode): DCNL  DCSP try: DCNL DCSP  DCSP if (filename == u'-'): DCNL DCSP  DCSP  DCSP if (sys.platform == u'win32'): DCNL DCSP  DCSP  DCSP  DCSP import msvcrt DCNL DCSP  DCSP  DCSP  DCSP msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY) DCNL DCSP  DCSP  DCSP return ((sys.stdout.buffer if hasattr(sys.stdout, u'buffer') else sys.stdout), filename) DCNL DCSP  DCSP stream = open(encodeFilename(filename), open_mode) DCNL DCSP  DCSP return (stream, filename) DCNL DCSP except (IOError, OSError) as err: DCNL DCSP  DCSP if (err.errno in (errno.EACCES,)): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP alt_filename = os.path.join((re.sub(u'[/<>:"\\|\\\\?\\*]', u'#', path_part) for path_part in os.path.split(filename))) DCNL DCSP  DCSP if (alt_filename == filename): DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP stream = open(encodeFilename(filename), open_mode) DCNL DCSP  DCSP  DCSP return (stream, alt_filename)
def timeconvert(timestr): DCNL  DCSP timestamp = None DCNL DCSP timetuple = email.utils.parsedate_tz(timestr) DCNL DCSP if (timetuple is not None): DCNL DCSP  DCSP timestamp = email.utils.mktime_tz(timetuple) DCNL DCSP return timestamp
def sanitize_filename(s, restricted=False, is_id=False): DCNL  DCSP def replace_insane(char): DCNL DCSP  DCSP if ((char == u'?') or (ord(char) < 32) or (ord(char) == 127)): DCNL DCSP  DCSP  DCSP return u'' DCNL DCSP  DCSP elif (char == u'"'): DCNL DCSP  DCSP  DCSP return (u'' if restricted else u"'") DCNL DCSP  DCSP elif (char == u':'): DCNL DCSP  DCSP  DCSP return (u'_-' if restricted else u' DCSP -') DCNL DCSP  DCSP elif (char in u'\\/|*<>'): DCNL DCSP  DCSP  DCSP return u'_' DCNL DCSP  DCSP if (restricted and ((char in u"!&'()[]{}$;`^,#") or char.isspace())): DCNL DCSP  DCSP  DCSP return u'_' DCNL DCSP  DCSP if (restricted and (ord(char) > 127)): DCNL DCSP  DCSP  DCSP return u'_' DCNL DCSP  DCSP return char DCNL DCSP result = u''.join(map(replace_insane, s)) DCNL DCSP if (not is_id): DCNL DCSP  DCSP while (u'__' in result): DCNL DCSP  DCSP  DCSP result = result.replace(u'__', u'_') DCNL DCSP  DCSP result = result.strip(u'_') DCNL DCSP  DCSP if (restricted and result.startswith(u'-_')): DCNL DCSP  DCSP  DCSP result = result[2:] DCNL DCSP  DCSP if (not result): DCNL DCSP  DCSP  DCSP result = u'_' DCNL DCSP return result
def orderedSet(iterable): DCNL  DCSP res = [] DCNL DCSP for el in iterable: DCNL DCSP  DCSP if (el not in res): DCNL DCSP  DCSP  DCSP res.append(el) DCNL DCSP return res
def _htmlentity_transform(entity): DCNL  DCSP if (entity in compat_html_entities.name2codepoint): DCNL DCSP  DCSP return compat_chr(compat_html_entities.name2codepoint[entity]) DCNL DCSP mobj = re.match(u'#(x?[0-9]+)', entity) DCNL DCSP if (mobj is not None): DCNL DCSP  DCSP numstr = mobj.group(1) DCNL DCSP  DCSP if numstr.startswith(u'x'): DCNL DCSP  DCSP  DCSP base = 16 DCNL DCSP  DCSP  DCSP numstr = (u'0%s' % numstr) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP base = 10 DCNL DCSP  DCSP return compat_chr(int(numstr, base)) DCNL DCSP return (u'&%s;' % entity)
def encodeFilename(s, for_subprocess=False): DCNL  DCSP assert (type(s) == compat_str) DCNL DCSP if (sys.version_info >= (3, 0)): DCNL DCSP  DCSP return s DCNL DCSP if ((sys.platform == u'win32') and (sys.getwindowsversion()[0] >= 5)): DCNL DCSP  DCSP if (not for_subprocess): DCNL DCSP  DCSP  DCSP return s DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP encoding = preferredencoding() DCNL DCSP else: DCNL DCSP  DCSP encoding = sys.getfilesystemencoding() DCNL DCSP if (encoding is None): DCNL DCSP  DCSP encoding = u'utf-8' DCNL DCSP return s.encode(encoding, u'ignore')
def parse_iso8601(date_str, delimiter=u'T'): DCNL  DCSP if (date_str is None): DCNL DCSP  DCSP return None DCNL DCSP m = re.search(u'(\\.[0-9]+)?(?:Z$| DCSP ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$)', date_str) DCNL DCSP if (not m): DCNL DCSP  DCSP timezone = datetime.timedelta() DCNL DCSP else: DCNL DCSP  DCSP date_str = date_str[:(- len(m.group(0)))] DCNL DCSP  DCSP if (not m.group(u'sign')): DCNL DCSP  DCSP  DCSP timezone = datetime.timedelta() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP sign = (1 if (m.group(u'sign') == u'+') else (-1)) DCNL DCSP  DCSP  DCSP timezone = datetime.timedelta(hours=(sign * int(m.group(u'hours'))), minutes=(sign * int(m.group(u'minutes')))) DCNL DCSP date_format = u'%Y-%m-%d{0}%H:%M:%S'.format(delimiter) DCNL DCSP dt = (datetime.datetime.strptime(date_str, date_format) - timezone) DCNL DCSP return calendar.timegm(dt.timetuple())
def unified_strdate(date_str): DCNL  DCSP if (date_str is None): DCNL DCSP  DCSP return None DCNL DCSP upload_date = None DCNL DCSP date_str = date_str.replace(u',', u' DCSP ') DCNL DCSP date_str = re.sub(u' DCSP ?(\\+|-)[0-9]{2}:?[0-9]{2}$', u'', date_str) DCNL DCSP format_expressions = [u'%d DCSP %B DCSP %Y', u'%d DCSP %b DCSP %Y', u'%B DCSP %d DCSP %Y', u'%b DCSP %d DCSP %Y', u'%b DCSP %dst DCSP %Y DCSP %I:%M%p', u'%b DCSP %dnd DCSP %Y DCSP %I:%M%p', u'%b DCSP %dth DCSP %Y DCSP %I:%M%p', u'%Y-%m-%d', u'%Y/%m/%d', u'%d.%m.%Y', u'%d/%m/%Y', u'%d/%m/%y', u'%Y/%m/%d DCSP %H:%M:%S', u'%d/%m/%Y DCSP %H:%M:%S', u'%Y-%m-%d DCSP %H:%M:%S', u'%Y-%m-%d DCSP %H:%M:%S.%f', u'%d.%m.%Y DCSP %H:%M', u'%d.%m.%Y DCSP %H.%M', u'%Y-%m-%dT%H:%M:%SZ', u'%Y-%m-%dT%H:%M:%S.%fZ', u'%Y-%m-%dT%H:%M:%S.%f0Z', u'%Y-%m-%dT%H:%M:%S', u'%Y-%m-%dT%H:%M:%S.%f', u'%Y-%m-%dT%H:%M'] DCNL DCSP for expression in format_expressions: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP upload_date = datetime.datetime.strptime(date_str, expression).strftime(u'%Y%m%d') DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP if (upload_date is None): DCNL DCSP  DCSP timetuple = email.utils.parsedate_tz(date_str) DCNL DCSP  DCSP if timetuple: DCNL DCSP  DCSP  DCSP upload_date = datetime.datetime(*timetuple[:6]).strftime(u'%Y%m%d') DCNL DCSP return upload_date
def date_from_str(date_str): DCNL  DCSP today = datetime.date.today() DCNL DCSP if ((date_str == u'now') or (date_str == u'today')): DCNL DCSP  DCSP return today DCNL DCSP match = re.match(u'(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str) DCNL DCSP if (match is not None): DCNL DCSP  DCSP sign = match.group(u'sign') DCNL DCSP  DCSP time = int(match.group(u'time')) DCNL DCSP  DCSP if (sign == u'-'): DCNL DCSP  DCSP  DCSP time = (- time) DCNL DCSP  DCSP unit = match.group(u'unit') DCNL DCSP  DCSP if (unit == u'month'): DCNL DCSP  DCSP  DCSP unit = u'day' DCNL DCSP  DCSP  DCSP time *= 30 DCNL DCSP  DCSP elif (unit == u'year'): DCNL DCSP  DCSP  DCSP unit = u'day' DCNL DCSP  DCSP  DCSP time *= 365 DCNL DCSP  DCSP unit += u's' DCNL DCSP  DCSP delta = datetime.timedelta(**{unit: time}) DCNL DCSP  DCSP return (today + delta) DCNL DCSP return datetime.datetime.strptime(date_str, u'%Y%m%d').date()
def hyphenate_date(date_str): DCNL  DCSP match = re.match(u'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str) DCNL DCSP if (match is not None): DCNL DCSP  DCSP return u'-'.join(match.groups()) DCNL DCSP else: DCNL DCSP  DCSP return date_str
def platform_name(): DCNL  DCSP res = platform.platform() DCNL DCSP if isinstance(res, bytes): DCNL DCSP  DCSP res = res.decode(preferredencoding()) DCNL DCSP assert isinstance(res, compat_str) DCNL DCSP return res
def _windows_write_string(s, out): DCNL  DCSP import ctypes DCNL DCSP import ctypes.wintypes DCNL DCSP WIN_OUTPUT_IDS = {1: (-11), 2: (-12)} DCNL DCSP try: DCNL DCSP  DCSP fileno = out.fileno() DCNL DCSP except AttributeError: DCNL DCSP  DCSP return False DCNL DCSP if (fileno not in WIN_OUTPUT_IDS): DCNL DCSP  DCSP return False DCNL DCSP GetStdHandle = ctypes.WINFUNCTYPE(ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)((u'GetStdHandle', ctypes.windll.kernel32)) DCNL DCSP h = GetStdHandle(WIN_OUTPUT_IDS[fileno]) DCNL DCSP WriteConsoleW = ctypes.WINFUNCTYPE(ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR, ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD), ctypes.wintypes.LPVOID)((u'WriteConsoleW', ctypes.windll.kernel32)) DCNL DCSP written = ctypes.wintypes.DWORD(0) DCNL DCSP GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((u'GetFileType', ctypes.windll.kernel32)) DCNL DCSP FILE_TYPE_CHAR = 2 DCNL DCSP FILE_TYPE_REMOTE = 32768 DCNL DCSP GetConsoleMode = ctypes.WINFUNCTYPE(ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.POINTER(ctypes.wintypes.DWORD))((u'GetConsoleMode', ctypes.windll.kernel32)) DCNL DCSP INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD((-1)).value DCNL DCSP def not_a_console(handle): DCNL DCSP  DCSP if ((handle == INVALID_HANDLE_VALUE) or (handle is None)): DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP return (((GetFileType(handle) & (~ FILE_TYPE_REMOTE)) != FILE_TYPE_CHAR) or (GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)) DCNL DCSP if not_a_console(h): DCNL DCSP  DCSP return False DCNL DCSP def next_nonbmp_pos(s): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return next((i for (i, c) in enumerate(s) if (ord(c) > 65535))) DCNL DCSP  DCSP except StopIteration: DCNL DCSP  DCSP  DCSP return len(s) DCNL DCSP while s: DCNL DCSP  DCSP count = min(next_nonbmp_pos(s), 1024) DCNL DCSP  DCSP ret = WriteConsoleW(h, s, (count if count else 2), ctypes.byref(written), None) DCNL DCSP  DCSP if (ret == 0): DCNL DCSP  DCSP  DCSP raise OSError(u'Failed DCSP to DCSP write DCSP string') DCNL DCSP  DCSP if (not count): DCNL DCSP  DCSP  DCSP assert (written.value == 2) DCNL DCSP  DCSP  DCSP s = s[1:] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP assert (written.value > 0) DCNL DCSP  DCSP  DCSP s = s[written.value:] DCNL DCSP return True
def takewhile_inclusive(pred, seq): DCNL  DCSP for e in seq: DCNL DCSP  DCSP (yield e) DCNL DCSP  DCSP if (not pred(e)): DCNL DCSP  DCSP  DCSP return
def smuggle_url(url, data): DCNL  DCSP sdata = compat_urllib_parse.urlencode({u'__youtubedl_smuggle': json.dumps(data)}) DCNL DCSP return ((url + u'#') + sdata)
def month_by_name(name): DCNL  DCSP ENGLISH_NAMES = [u'January', u'February', u'March', u'April', u'May', u'June', u'July', u'August', u'September', u'October', u'November', u'December'] DCNL DCSP try: DCNL DCSP  DCSP return (ENGLISH_NAMES.index(name) + 1) DCNL DCSP except ValueError: DCNL DCSP  DCSP return None
def fix_xml_ampersands(xml_str): DCNL  DCSP return re.sub(u'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)', u'&amp;', xml_str)
def str_to_int(int_str): DCNL  DCSP if (int_str is None): DCNL DCSP  DCSP return None DCNL DCSP int_str = re.sub(u'[,\\.\\+]', u'', int_str) DCNL DCSP return int(int_str)
def check_executable(exe, args=[]): DCNL  DCSP try: DCNL DCSP  DCSP subprocess.Popen(([exe] + args), stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate() DCNL DCSP except OSError: DCNL DCSP  DCSP return False DCNL DCSP return exe
def get_exe_version(exe, args=[u'--version'], version_re=u'version\\s+([0-9._-a-zA-Z]+)', unrecognized=u'present'): DCNL  DCSP try: DCNL DCSP  DCSP (out, err) = subprocess.Popen(([exe] + args), stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate() DCNL DCSP except OSError: DCNL DCSP  DCSP return False DCNL DCSP firstline = out.partition('\n')[0].decode(u'ascii', u'ignore') DCNL DCSP m = re.search(version_re, firstline) DCNL DCSP if m: DCNL DCSP  DCSP return m.group(1) DCNL DCSP else: DCNL DCSP  DCSP return unrecognized
def escape_rfc3986(s): DCNL  DCSP if ((sys.version_info < (3, 0)) and isinstance(s, unicode)): DCNL DCSP  DCSP s = s.encode(u'utf-8') DCNL DCSP return compat_urllib_parse.quote(s, "%/;:@&=+$,!~*'()?#[]")
def escape_url(url): DCNL  DCSP url_parsed = compat_urllib_parse_urlparse(url) DCNL DCSP return url_parsed._replace(path=escape_rfc3986(url_parsed.path), params=escape_rfc3986(url_parsed.params), query=escape_rfc3986(url_parsed.query), fragment=escape_rfc3986(url_parsed.fragment)).geturl()
def qualities(quality_ids): DCNL  DCSP def q(qid): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return quality_ids.index(qid) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP return (-1) DCNL DCSP return q
def limit_length(s, length): DCNL  DCSP if (s is None): DCNL DCSP  DCSP return None DCNL DCSP ELLIPSES = u'...' DCNL DCSP if (len(s) > length): DCNL DCSP  DCSP return (s[:(length - len(ELLIPSES))] + ELLIPSES) DCNL DCSP return s
def ytdl_is_updateable(): DCNL  DCSP from zipimport import zipimporter DCNL DCSP return (isinstance(globals().get(u'__loader__'), zipimporter) or hasattr(sys, u'frozen'))
def aes_ctr_decrypt(data, key, counter): DCNL  DCSP expanded_key = key_expansion(key) DCNL DCSP block_count = int(ceil((float(len(data)) / BLOCK_SIZE_BYTES))) DCNL DCSP decrypted_data = [] DCNL DCSP for i in range(block_count): DCNL DCSP  DCSP counter_block = counter.next_value() DCNL DCSP  DCSP block = data[(i * BLOCK_SIZE_BYTES):((i + 1) * BLOCK_SIZE_BYTES)] DCNL DCSP  DCSP block += ([0] * (BLOCK_SIZE_BYTES - len(block))) DCNL DCSP  DCSP cipher_counter_block = aes_encrypt(counter_block, expanded_key) DCNL DCSP  DCSP decrypted_data += xor(block, cipher_counter_block) DCNL DCSP decrypted_data = decrypted_data[:len(data)] DCNL DCSP return decrypted_data
def aes_cbc_decrypt(data, key, iv): DCNL  DCSP expanded_key = key_expansion(key) DCNL DCSP block_count = int(ceil((float(len(data)) / BLOCK_SIZE_BYTES))) DCNL DCSP decrypted_data = [] DCNL DCSP previous_cipher_block = iv DCNL DCSP for i in range(block_count): DCNL DCSP  DCSP block = data[(i * BLOCK_SIZE_BYTES):((i + 1) * BLOCK_SIZE_BYTES)] DCNL DCSP  DCSP block += ([0] * (BLOCK_SIZE_BYTES - len(block))) DCNL DCSP  DCSP decrypted_block = aes_decrypt(block, expanded_key) DCNL DCSP  DCSP decrypted_data += xor(decrypted_block, previous_cipher_block) DCNL DCSP  DCSP previous_cipher_block = block DCNL DCSP decrypted_data = decrypted_data[:len(data)] DCNL DCSP return decrypted_data
def key_expansion(data): DCNL  DCSP data = data[:] DCNL DCSP rcon_iteration = 1 DCNL DCSP key_size_bytes = len(data) DCNL DCSP expanded_key_size_bytes = (((key_size_bytes // 4) + 7) * BLOCK_SIZE_BYTES) DCNL DCSP while (len(data) < expanded_key_size_bytes): DCNL DCSP  DCSP temp = data[(-4):] DCNL DCSP  DCSP temp = key_schedule_core(temp, rcon_iteration) DCNL DCSP  DCSP rcon_iteration += 1 DCNL DCSP  DCSP data += xor(temp, data[(- key_size_bytes):(4 - key_size_bytes)]) DCNL DCSP  DCSP for _ in range(3): DCNL DCSP  DCSP  DCSP temp = data[(-4):] DCNL DCSP  DCSP  DCSP data += xor(temp, data[(- key_size_bytes):(4 - key_size_bytes)]) DCNL DCSP  DCSP if (key_size_bytes == 32): DCNL DCSP  DCSP  DCSP temp = data[(-4):] DCNL DCSP  DCSP  DCSP temp = sub_bytes(temp) DCNL DCSP  DCSP  DCSP data += xor(temp, data[(- key_size_bytes):(4 - key_size_bytes)]) DCNL DCSP  DCSP for _ in range((3 if (key_size_bytes == 32) else (2 if (key_size_bytes == 24) else 0))): DCNL DCSP  DCSP  DCSP temp = data[(-4):] DCNL DCSP  DCSP  DCSP data += xor(temp, data[(- key_size_bytes):(4 - key_size_bytes)]) DCNL DCSP data = data[:expanded_key_size_bytes] DCNL DCSP return data
def aes_encrypt(data, expanded_key): DCNL  DCSP rounds = ((len(expanded_key) // BLOCK_SIZE_BYTES) - 1) DCNL DCSP data = xor(data, expanded_key[:BLOCK_SIZE_BYTES]) DCNL DCSP for i in range(1, (rounds + 1)): DCNL DCSP  DCSP data = sub_bytes(data) DCNL DCSP  DCSP data = shift_rows(data) DCNL DCSP  DCSP if (i != rounds): DCNL DCSP  DCSP  DCSP data = mix_columns(data) DCNL DCSP  DCSP data = xor(data, expanded_key[(i * BLOCK_SIZE_BYTES):((i + 1) * BLOCK_SIZE_BYTES)]) DCNL DCSP return data
def aes_decrypt(data, expanded_key): DCNL  DCSP rounds = ((len(expanded_key) // BLOCK_SIZE_BYTES) - 1) DCNL DCSP for i in range(rounds, 0, (-1)): DCNL DCSP  DCSP data = xor(data, expanded_key[(i * BLOCK_SIZE_BYTES):((i + 1) * BLOCK_SIZE_BYTES)]) DCNL DCSP  DCSP if (i != rounds): DCNL DCSP  DCSP  DCSP data = mix_columns_inv(data) DCNL DCSP  DCSP data = shift_rows_inv(data) DCNL DCSP  DCSP data = sub_bytes_inv(data) DCNL DCSP data = xor(data, expanded_key[:BLOCK_SIZE_BYTES]) DCNL DCSP return data
def aes_decrypt_text(data, password, key_size_bytes): DCNL  DCSP NONCE_LENGTH_BYTES = 8 DCNL DCSP data = bytes_to_intlist(base64.b64decode(data)) DCNL DCSP password = bytes_to_intlist(password.encode(u'utf-8')) DCNL DCSP key = (password[:key_size_bytes] + ([0] * (key_size_bytes - len(password)))) DCNL DCSP key = (aes_encrypt(key[:BLOCK_SIZE_BYTES], key_expansion(key)) * (key_size_bytes // BLOCK_SIZE_BYTES)) DCNL DCSP nonce = data[:NONCE_LENGTH_BYTES] DCNL DCSP cipher = data[NONCE_LENGTH_BYTES:] DCNL DCSP class Counter: DCNL DCSP  DCSP __value = (nonce + ([0] * (BLOCK_SIZE_BYTES - NONCE_LENGTH_BYTES))) DCNL DCSP  DCSP def next_value(self): DCNL DCSP  DCSP  DCSP temp = self.__value DCNL DCSP  DCSP  DCSP self.__value = inc(self.__value) DCNL DCSP  DCSP  DCSP return temp DCNL DCSP decrypted_data = aes_ctr_decrypt(cipher, key, Counter()) DCNL DCSP plaintext = intlist_to_bytes(decrypted_data) DCNL DCSP return plaintext
def gen_extractors(): DCNL  DCSP return [klass() for klass in _ALL_CLASSES]
def get_info_extractor(ie_name): DCNL  DCSP return globals()[(ie_name + u'IE')]
def build_fragments_list(boot_info): DCNL  DCSP res = [] DCNL DCSP segment_run_table = boot_info[u'segments'][0] DCNL DCSP segment_run_entry = segment_run_table[u'segment_run'][0] DCNL DCSP n_frags = segment_run_entry[1] DCNL DCSP fragment_run_entry_table = boot_info[u'fragments'][0][u'fragments'] DCNL DCSP first_frag_number = fragment_run_entry_table[0][u'first'] DCNL DCSP for (i, frag_number) in zip(range(1, (n_frags + 1)), itertools.count(first_frag_number)): DCNL DCSP  DCSP res.append((1, frag_number)) DCNL DCSP return res
def write_flv_header(stream, metadata): DCNL  DCSP stream.write('FLV\x01') DCNL DCSP stream.write('\x05') DCNL DCSP stream.write('\x00\x00\x00 DCTB ') DCNL DCSP stream.write('\x00\x00\x00\x00') DCNL DCSP stream.write('\x12') DCNL DCSP stream.write(struct_pack(u'!L', len(metadata))[1:]) DCNL DCSP stream.write('\x00\x00\x00\x00\x00\x00\x00') DCNL DCSP stream.write(metadata) DCNL DCSP stream.write('\x00\x00\x01s')
def get_suitable_downloader(info_dict): DCNL  DCSP url = info_dict[u'url'] DCNL DCSP protocol = info_dict.get(u'protocol') DCNL DCSP if url.startswith(u'rtmp'): DCNL DCSP  DCSP return RtmpFD DCNL DCSP if (protocol == u'm3u8_native'): DCNL DCSP  DCSP return NativeHlsFD DCNL DCSP if ((protocol == u'm3u8') or ((protocol is None) and (determine_ext(url) == u'm3u8'))): DCNL DCSP  DCSP return HlsFD DCNL DCSP if (url.startswith(u'mms') or url.startswith(u'rtsp')): DCNL DCSP  DCSP return MplayerFD DCNL DCSP if (determine_ext(url) == u'f4m'): DCNL DCSP  DCSP return F4mFD DCNL DCSP else: DCNL DCSP  DCSP return HttpFD
def get_type_string(data): DCNL  DCSP data_type = type(data) DCNL DCSP if (data_type in six.integer_types): DCNL DCSP  DCSP return u'integer' DCNL DCSP elif (data_type == float): DCNL DCSP  DCSP return u'float' DCNL DCSP elif (data_type == bool): DCNL DCSP  DCSP return u'boolean' DCNL DCSP elif (data_type in (list, tuple)): DCNL DCSP  DCSP return u'list' DCNL DCSP elif (data_type == dict): DCNL DCSP  DCSP return u'hash' DCNL DCSP elif (data is None): DCNL DCSP  DCSP return u'null' DCNL DCSP elif isinstance(data, six.string_types): DCNL DCSP  DCSP return u'string'
def dict_strip_unicode_keys(uni_dict): DCNL  DCSP if six.PY3: DCNL DCSP  DCSP return uni_dict DCNL DCSP data = {} DCNL DCSP for (key, value) in uni_dict.items(): DCNL DCSP  DCSP data[smart_bytes(key)] = value DCNL DCSP return data
def is_valid_javascript_identifier(identifier, escape=u'\\\\u', ucd_cat=category): DCNL  DCSP if (not identifier): DCNL DCSP  DCSP return False DCNL DCSP if (not isinstance(identifier, six.text_type)): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP identifier = six.text_type(identifier, u'utf-8') DCNL DCSP  DCSP except UnicodeDecodeError: DCNL DCSP  DCSP  DCSP return False DCNL DCSP if (escape in identifier): DCNL DCSP  DCSP new = [] DCNL DCSP  DCSP add_char = new.append DCNL DCSP  DCSP split_id = identifier.split(escape) DCNL DCSP  DCSP add_char(split_id.pop(0)) DCNL DCSP  DCSP for segment in split_id: DCNL DCSP  DCSP  DCSP if (len(segment) < 4): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP add_char(unichr(int((u'0x' + segment[:4]), 16))) DCNL DCSP  DCSP  DCSP except Exception: DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP add_char(segment[4:]) DCNL DCSP  DCSP identifier = u''.join(new) DCNL DCSP if is_reserved_js_word(identifier): DCNL DCSP  DCSP return False DCNL DCSP first_char = identifier[0] DCNL DCSP if (not ((first_char in valid_jsid_chars) or (ucd_cat(first_char) in valid_jsid_categories_start))): DCNL DCSP  DCSP return False DCNL DCSP for char in identifier[1:]: DCNL DCSP  DCSP if (not ((char in valid_jsid_chars) or (ucd_cat(char) in valid_jsid_categories))): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def is_valid_jsonp_callback_value(value): DCNL  DCSP for identifier in value.split(u'.'): DCNL DCSP  DCSP while (u'[' in identifier): DCNL DCSP  DCSP  DCSP if (not has_valid_array_index(identifier)): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP identifier = replace_array_index(u'', identifier) DCNL DCSP  DCSP if (not is_valid_javascript_identifier(identifier)): DCNL DCSP  DCSP  DCSP return False DCNL DCSP return True
def determine_format(request, serializer, default_format=u'application/json'): DCNL  DCSP if request.GET.get(u'format'): DCNL DCSP  DCSP if (request.GET[u'format'] in serializer.formats): DCNL DCSP  DCSP  DCSP return serializer.get_mime_for_format(request.GET[u'format']) DCNL DCSP if (u'callback' in request.GET): DCNL DCSP  DCSP return serializer.get_mime_for_format(u'jsonp') DCNL DCSP if (request.META.get(u'HTTP_ACCEPT', u'*/*') != u'*/*'): DCNL DCSP  DCSP formats = (list(serializer.supported_formats) or []) DCNL DCSP  DCSP formats.reverse() DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP best_format = mimeparse.best_match(formats, request.META[u'HTTP_ACCEPT']) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise BadRequest(u'Invalid DCSP Accept DCSP header') DCNL DCSP  DCSP if best_format: DCNL DCSP  DCSP  DCSP return best_format DCNL DCSP return default_format
def build_content_type(format, encoding=u'utf-8'): DCNL  DCSP if (u'charset' in format): DCNL DCSP  DCSP return format DCNL DCSP if (format in (u'application/json', u'text/javascript')): DCNL DCSP  DCSP return format DCNL DCSP return (u'%s; DCSP charset=%s' % (format, encoding))
def format_datetime(dt): DCNL  DCSP return dateformat.format(make_naive(dt), u'r')
def format_date(d): DCNL  DCSP dt = aware_datetime(d.year, d.month, d.day, 0, 0, 0) DCNL DCSP return dateformat.format(dt, u'j DCSP M DCSP Y')
def format_time(t): DCNL  DCSP dt = aware_datetime(2000, 1, 1, t.hour, t.minute, t.second) DCNL DCSP return dateformat.format(dt, u'H:i:s DCSP O')
def convert_post_to_VERB(request, verb): DCNL  DCSP if (request.method == verb): DCNL DCSP  DCSP if hasattr(request, u'_post'): DCNL DCSP  DCSP  DCSP del request._post DCNL DCSP  DCSP  DCSP del request._files DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP request.method = u'POST' DCNL DCSP  DCSP  DCSP request._load_post_and_files() DCNL DCSP  DCSP  DCSP request.method = verb DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP request.META[u'REQUEST_METHOD'] = u'POST' DCNL DCSP  DCSP  DCSP request._load_post_and_files() DCNL DCSP  DCSP  DCSP request.META[u'REQUEST_METHOD'] = verb DCNL DCSP  DCSP setattr(request, verb, request.POST) DCNL DCSP return request
def build_authenticate_header(realm=''): DCNL  DCSP return {'WWW-Authenticate': ('OAuth DCSP realm="%s"' % realm)}
def escape(s): DCNL  DCSP return urllib.quote(s, safe='~')
def _utf8_str(s): DCNL  DCSP if isinstance(s, unicode): DCNL DCSP  DCSP return s.encode('utf-8') DCNL DCSP else: DCNL DCSP  DCSP return str(s)
def generate_timestamp(): DCNL  DCSP return int(time.time())
def generate_nonce(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def generate_verifier(length=8): DCNL  DCSP return ''.join([str(random.randint(0, 9)) for i in range(length)])
def test_parse_date_fraction_2(): DCNL  DCSP d = iso8601.parse_date("2007-5-7T11:43:55.328Z'") DCNL DCSP assert (d.year == 2007) DCNL DCSP assert (d.month == 5) DCNL DCSP assert (d.day == 7) DCNL DCSP assert (d.hour == 11) DCNL DCSP assert (d.minute == 43) DCNL DCSP assert (d.second == 55) DCNL DCSP assert (d.microsecond == 328000) DCNL DCSP assert (d.tzinfo == iso8601.UTC)
def test_parse_no_timezone(): DCNL  DCSP d = iso8601.parse_date('2007-01-01T08:00:00') DCNL DCSP assert (d.year == 2007) DCNL DCSP assert (d.month == 1) DCNL DCSP assert (d.day == 1) DCNL DCSP assert (d.hour == 8) DCNL DCSP assert (d.minute == 0) DCNL DCSP assert (d.second == 0) DCNL DCSP assert (d.microsecond == 0) DCNL DCSP assert (d.tzinfo == iso8601.UTC)
def test_space_separator(): DCNL  DCSP d = iso8601.parse_date('2007-06-23 DCSP 06:40:34.00Z') DCNL DCSP assert (d.year == 2007) DCNL DCSP assert (d.month == 6) DCNL DCSP assert (d.day == 23) DCNL DCSP assert (d.hour == 6) DCNL DCSP assert (d.minute == 40) DCNL DCSP assert (d.second == 34) DCNL DCSP assert (d.microsecond == 0) DCNL DCSP assert (d.tzinfo == iso8601.UTC)
def parse_timezone(tzstring, default_timezone=UTC): DCNL  DCSP if (tzstring == 'Z'): DCNL DCSP  DCSP return default_timezone DCNL DCSP if (tzstring is None): DCNL DCSP  DCSP return default_timezone DCNL DCSP m = TIMEZONE_REGEX.match(tzstring) DCNL DCSP (prefix, hours, minutes) = m.groups() DCNL DCSP (hours, minutes) = (int(hours), int(minutes)) DCNL DCSP if (prefix == '-'): DCNL DCSP  DCSP hours = (- hours) DCNL DCSP  DCSP minutes = (- minutes) DCNL DCSP return FixedOffset(hours, minutes, tzstring)
def parse_date(datestring, default_timezone=UTC): DCNL  DCSP if (not isinstance(datestring, basestring)): DCNL DCSP  DCSP raise ParseError(('Expecting DCSP a DCSP string DCSP %r' % datestring)) DCNL DCSP m = ISO8601_REGEX.match(datestring) DCNL DCSP if (not m): DCNL DCSP  DCSP raise ParseError(('Unable DCSP to DCSP parse DCSP date DCSP string DCSP %r' % datestring)) DCNL DCSP groups = m.groupdict() DCNL DCSP tz = parse_timezone(groups['timezone'], default_timezone=default_timezone) DCNL DCSP if (groups['fraction'] is None): DCNL DCSP  DCSP groups['fraction'] = 0 DCNL DCSP else: DCNL DCSP  DCSP groups['fraction'] = int((float(('0.%s' % groups['fraction'])) * 1000000.0)) DCNL DCSP return datetime(int(groups['year']), int(groups['month']), int(groups['day']), int(groups['hour']), int(groups['minute']), int(groups['second']), int(groups['fraction']), tz)
def test_callable_spec(callable, callable_args, callable_kwargs): DCNL  DCSP show_mismatched_params = getattr(cherrypy.serving.request, 'show_mismatched_params', False) DCNL DCSP try: DCNL DCSP  DCSP (args, varargs, varkw, defaults) = inspect.getargspec(callable) DCNL DCSP except TypeError: DCNL DCSP  DCSP if (isinstance(callable, object) and hasattr(callable, '__call__')): DCNL DCSP  DCSP  DCSP (args, varargs, varkw, defaults) = inspect.getargspec(callable.__call__) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise DCNL DCSP if (args and (args[0] == 'self')): DCNL DCSP  DCSP args = args[1:] DCNL DCSP arg_usage = dict([(arg, 0) for arg in args]) DCNL DCSP vararg_usage = 0 DCNL DCSP varkw_usage = 0 DCNL DCSP extra_kwargs = set() DCNL DCSP for (i, value) in enumerate(callable_args): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP arg_usage[args[i]] += 1 DCNL DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP vararg_usage += 1 DCNL DCSP for key in callable_kwargs.keys(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP arg_usage[key] += 1 DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP varkw_usage += 1 DCNL DCSP  DCSP  DCSP extra_kwargs.add(key) DCNL DCSP args_with_defaults = args[(- len((defaults or []))):] DCNL DCSP for (i, val) in enumerate((defaults or [])): DCNL DCSP  DCSP if (arg_usage[args_with_defaults[i]] == 0): DCNL DCSP  DCSP  DCSP arg_usage[args_with_defaults[i]] += 1 DCNL DCSP missing_args = [] DCNL DCSP multiple_args = [] DCNL DCSP for (key, usage) in arg_usage.items(): DCNL DCSP  DCSP if (usage == 0): DCNL DCSP  DCSP  DCSP missing_args.append(key) DCNL DCSP  DCSP elif (usage > 1): DCNL DCSP  DCSP  DCSP multiple_args.append(key) DCNL DCSP if missing_args: DCNL DCSP  DCSP message = None DCNL DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP message = ('Missing DCSP parameters: DCSP %s' % ','.join(missing_args)) DCNL DCSP  DCSP raise cherrypy.HTTPError(404, message=message) DCNL DCSP if ((not varargs) and (vararg_usage > 0)): DCNL DCSP  DCSP raise cherrypy.HTTPError(404) DCNL DCSP body_params = (cherrypy.serving.request.body.params or {}) DCNL DCSP body_params = set(body_params.keys()) DCNL DCSP qs_params = (set(callable_kwargs.keys()) - body_params) DCNL DCSP if multiple_args: DCNL DCSP  DCSP if qs_params.intersection(set(multiple_args)): DCNL DCSP  DCSP  DCSP error = 404 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP error = 400 DCNL DCSP  DCSP message = None DCNL DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP message = ('Multiple DCSP values DCSP for DCSP parameters: DCSP %s' % ','.join(multiple_args)) DCNL DCSP  DCSP raise cherrypy.HTTPError(error, message=message) DCNL DCSP if ((not varkw) and (varkw_usage > 0)): DCNL DCSP  DCSP extra_qs_params = set(qs_params).intersection(extra_kwargs) DCNL DCSP  DCSP if extra_qs_params: DCNL DCSP  DCSP  DCSP message = None DCNL DCSP  DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP  DCSP message = ('Unexpected DCSP query DCSP string DCSP parameters: DCSP %s' % ', DCSP '.join(extra_qs_params)) DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(404, message=message) DCNL DCSP  DCSP extra_body_params = set(body_params).intersection(extra_kwargs) DCNL DCSP  DCSP if extra_body_params: DCNL DCSP  DCSP  DCSP message = None DCNL DCSP  DCSP  DCSP if show_mismatched_params: DCNL DCSP  DCSP  DCSP  DCSP message = ('Unexpected DCSP body DCSP parameters: DCSP %s' % ', DCSP '.join(extra_body_params)) DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, message=message)
def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains): DCNL  DCSP from cherrypy.lib import httputil DCNL DCSP def vhost_dispatch(path_info): DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP header = request.headers.get DCNL DCSP  DCSP domain = header('Host', '') DCNL DCSP  DCSP if use_x_forwarded_host: DCNL DCSP  DCSP  DCSP domain = header('X-Forwarded-Host', domain) DCNL DCSP  DCSP prefix = domains.get(domain, '') DCNL DCSP  DCSP if prefix: DCNL DCSP  DCSP  DCSP path_info = httputil.urljoin(prefix, path_info) DCNL DCSP  DCSP result = next_dispatcher(path_info) DCNL DCSP  DCSP section = request.config.get('tools.staticdir.section') DCNL DCSP  DCSP if section: DCNL DCSP  DCSP  DCSP section = section[len(prefix):] DCNL DCSP  DCSP  DCSP request.config['tools.staticdir.section'] = section DCNL DCSP  DCSP return result DCNL DCSP return vhost_dispatch
def clean_headers(status): DCNL  DCSP import cherrypy DCNL DCSP response = cherrypy.serving.response DCNL DCSP respheaders = response.headers DCNL DCSP for key in ['Accept-Ranges', 'Age', 'ETag', 'Location', 'Retry-After', 'Vary', 'Content-Encoding', 'Content-Length', 'Expires', 'Content-Location', 'Content-MD5', 'Last-Modified']: DCNL DCSP  DCSP if (key in respheaders): DCNL DCSP  DCSP  DCSP del respheaders[key] DCNL DCSP if (status != 416): DCNL DCSP  DCSP if ('Content-Range' in respheaders): DCNL DCSP  DCSP  DCSP del respheaders['Content-Range']
def get_error_page(status, **kwargs): DCNL  DCSP import cherrypy DCNL DCSP try: DCNL DCSP  DCSP (code, reason, message) = _httputil.valid_status(status) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise cherrypy.HTTPError(500, _exc_info()[1].args[0]) DCNL DCSP if (kwargs.get('status') is None): DCNL DCSP  DCSP kwargs['status'] = ('%s DCSP %s' % (code, reason)) DCNL DCSP if (kwargs.get('message') is None): DCNL DCSP  DCSP kwargs['message'] = message DCNL DCSP if (kwargs.get('traceback') is None): DCNL DCSP  DCSP kwargs['traceback'] = '' DCNL DCSP if (kwargs.get('version') is None): DCNL DCSP  DCSP kwargs['version'] = cherrypy.__version__ DCNL DCSP for (k, v) in iteritems(kwargs): DCNL DCSP  DCSP if (v is None): DCNL DCSP  DCSP  DCSP kwargs[k] = '' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP kwargs[k] = _escape(kwargs[k]) DCNL DCSP pages = cherrypy.serving.request.error_page DCNL DCSP error_page = (pages.get(code) or pages.get('default')) DCNL DCSP if error_page: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP if hasattr(error_page, '__call__'): DCNL DCSP  DCSP  DCSP  DCSP return error_page(**kwargs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP data = open(error_page, 'rb').read() DCNL DCSP  DCSP  DCSP  DCSP return (tonative(data) % kwargs) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP e = _format_exception(*_exc_info())[(-1)] DCNL DCSP  DCSP  DCSP m = kwargs['message'] DCNL DCSP  DCSP  DCSP if m: DCNL DCSP  DCSP  DCSP  DCSP m += '<br DCSP />' DCNL DCSP  DCSP  DCSP m += ('In DCSP addition, DCSP the DCSP custom DCSP error DCSP page DCSP failed:\n<br DCSP />%s' % e) DCNL DCSP  DCSP  DCSP kwargs['message'] = m DCNL DCSP return (_HTTPErrorTemplate % kwargs)
def format_exc(exc=None): DCNL  DCSP try: DCNL DCSP  DCSP if (exc is None): DCNL DCSP  DCSP  DCSP exc = _exc_info() DCNL DCSP  DCSP if (exc == (None, None, None)): DCNL DCSP  DCSP  DCSP return '' DCNL DCSP  DCSP import traceback DCNL DCSP  DCSP return ''.join(traceback.format_exception(*exc)) DCNL DCSP finally: DCNL DCSP  DCSP del exc
def bare_error(extrabody=None): DCNL  DCSP body = ntob('Unrecoverable DCSP error DCSP in DCSP the DCSP server.') DCNL DCSP if (extrabody is not None): DCNL DCSP  DCSP if (not isinstance(extrabody, bytestr)): DCNL DCSP  DCSP  DCSP extrabody = extrabody.encode('utf-8') DCNL DCSP  DCSP body += (ntob('\n') + extrabody) DCNL DCSP return (ntob('500 DCSP Internal DCSP Server DCSP Error'), [(ntob('Content-Type'), ntob('text/plain')), (ntob('Content-Length'), ntob(str(len(body)), 'ISO-8859-1'))], [body])
def client_host(server_host): DCNL  DCSP if (server_host == '0.0.0.0'): DCNL DCSP  DCSP return '127.0.0.1' DCNL DCSP if (server_host in ('::', '::0', '::0.0.0.0')): DCNL DCSP  DCSP return '::1' DCNL DCSP return server_host
def check_port(host, port, timeout=1.0): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP host = client_host(host) DCNL DCSP port = int(port) DCNL DCSP import socket DCNL DCSP try: DCNL DCSP  DCSP info = socket.getaddrinfo(host, port, socket.AF_UNSPEC, socket.SOCK_STREAM) DCNL DCSP except socket.gaierror: DCNL DCSP  DCSP if (':' in host): DCNL DCSP  DCSP  DCSP info = [(socket.AF_INET6, socket.SOCK_STREAM, 0, '', (host, port, 0, 0))] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP info = [(socket.AF_INET, socket.SOCK_STREAM, 0, '', (host, port))] DCNL DCSP for res in info: DCNL DCSP  DCSP (af, socktype, proto, canonname, sa) = res DCNL DCSP  DCSP s = None DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP s = socket.socket(af, socktype, proto) DCNL DCSP  DCSP  DCSP s.settimeout(timeout) DCNL DCSP  DCSP  DCSP s.connect((host, port)) DCNL DCSP  DCSP  DCSP s.close() DCNL DCSP  DCSP  DCSP raise IOError(('Port DCSP %s DCSP is DCSP in DCSP use DCSP on DCSP %s; DCSP perhaps DCSP the DCSP previous DCSP httpserver DCSP did DCSP not DCSP shut DCSP down DCSP properly.' % (repr(port), repr(host)))) DCNL DCSP  DCSP except socket.error: DCNL DCSP  DCSP  DCSP if s: DCNL DCSP  DCSP  DCSP  DCSP s.close()
def wait_for_free_port(host, port, timeout=None): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP if (timeout is None): DCNL DCSP  DCSP timeout = free_port_timeout DCNL DCSP for trial in range(50): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP check_port(host, port, timeout=timeout) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP time.sleep(timeout) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return DCNL DCSP raise IOError(('Port DCSP %r DCSP not DCSP free DCSP on DCSP %r' % (port, host)))
def wait_for_occupied_port(host, port, timeout=None): DCNL  DCSP if (not host): DCNL DCSP  DCSP raise ValueError("Host DCSP values DCSP of DCSP '' DCSP or DCSP None DCSP are DCSP not DCSP allowed.") DCNL DCSP if (timeout is None): DCNL DCSP  DCSP timeout = occupied_port_timeout DCNL DCSP for trial in range(50): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP check_port(host, port, timeout=timeout) DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP time.sleep(timeout) DCNL DCSP raise IOError(('Port DCSP %r DCSP not DCSP bound DCSP on DCSP %r' % (port, host)))
def hooks_namespace(k, v): DCNL  DCSP hookpoint = k.split('.', 1)[0] DCNL DCSP if isinstance(v, basestring): DCNL DCSP  DCSP v = cherrypy.lib.attributes(v) DCNL DCSP if (not isinstance(v, Hook)): DCNL DCSP  DCSP v = Hook(v) DCNL DCSP cherrypy.serving.request.hooks[hookpoint].append(v)
def request_namespace(k, v): DCNL  DCSP if (k[:5] == 'body.'): DCNL DCSP  DCSP setattr(cherrypy.serving.request.body, k[5:], v) DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.serving.request, k, v)
def response_namespace(k, v): DCNL  DCSP if (k[:8] == 'headers.'): DCNL DCSP  DCSP cherrypy.serving.response.headers[k.split('.', 1)[1]] = v DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.serving.response, k, v)
def error_page_namespace(k, v): DCNL  DCSP if (k != 'default'): DCNL DCSP  DCSP k = int(k) DCNL DCSP cherrypy.serving.request.error_page[k] = v
def format_exc(limit=None): DCNL  DCSP try: DCNL DCSP  DCSP (etype, value, tb) = sys.exc_info() DCNL DCSP  DCSP return ''.join(traceback.format_exception(etype, value, tb, limit)) DCNL DCSP finally: DCNL DCSP  DCSP etype = value = tb = None
def plat_specific_errors(*errnames): DCNL  DCSP errno_names = dir(errno) DCNL DCSP nums = [getattr(errno, k) for k in errnames if (k in errno_names)] DCNL DCSP return list(dict.fromkeys(nums).keys())
def read_headers(rfile, hdict=None): DCNL  DCSP if (hdict is None): DCNL DCSP  DCSP hdict = {} DCNL DCSP while True: DCNL DCSP  DCSP line = rfile.readline() DCNL DCSP  DCSP if (not line): DCNL DCSP  DCSP  DCSP raise ValueError('Illegal DCSP end DCSP of DCSP headers.') DCNL DCSP  DCSP if (line == CRLF): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not line.endswith(CRLF)): DCNL DCSP  DCSP  DCSP raise ValueError('HTTP DCSP requires DCSP CRLF DCSP terminators') DCNL DCSP  DCSP if (line[0] in (SPACE, TAB)): DCNL DCSP  DCSP  DCSP v = line.strip() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (k, v) = line.split(COLON, 1) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Illegal DCSP header DCSP line.') DCNL DCSP  DCSP  DCSP k = k.strip().title() DCNL DCSP  DCSP  DCSP v = v.strip() DCNL DCSP  DCSP  DCSP hname = k DCNL DCSP  DCSP if (k in comma_separated_headers): DCNL DCSP  DCSP  DCSP existing = hdict.get(hname) DCNL DCSP  DCSP  DCSP if existing: DCNL DCSP  DCSP  DCSP  DCSP v = ', DCSP '.join((existing, v)) DCNL DCSP  DCSP hdict[hname] = v DCNL DCSP return hdict
def get_ssl_adapter_class(name='pyopenssl'): DCNL  DCSP adapter = ssl_adapters[name.lower()] DCNL DCSP if isinstance(adapter, basestring): DCNL DCSP  DCSP last_dot = adapter.rfind('.') DCNL DCSP  DCSP attr_name = adapter[(last_dot + 1):] DCNL DCSP  DCSP mod_path = adapter[:last_dot] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP mod = sys.modules[mod_path] DCNL DCSP  DCSP  DCSP if (mod is None): DCNL DCSP  DCSP  DCSP  DCSP raise KeyError() DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP mod = __import__(mod_path, globals(), locals(), ['']) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP adapter = getattr(mod, attr_name) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP raise AttributeError(("'%s' DCSP object DCSP has DCSP no DCSP attribute DCSP '%s'" % (mod_path, attr_name))) DCNL DCSP return adapter
def plat_specific_errors(*errnames): DCNL  DCSP errno_names = dir(errno) DCNL DCSP nums = [getattr(errno, k) for k in errnames if (k in errno_names)] DCNL DCSP return list(dict.fromkeys(nums).keys())
def read_headers(rfile, hdict=None): DCNL  DCSP if (hdict is None): DCNL DCSP  DCSP hdict = {} DCNL DCSP while True: DCNL DCSP  DCSP line = rfile.readline() DCNL DCSP  DCSP if (not line): DCNL DCSP  DCSP  DCSP raise ValueError('Illegal DCSP end DCSP of DCSP headers.') DCNL DCSP  DCSP if (line == CRLF): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP if (not line.endswith(CRLF)): DCNL DCSP  DCSP  DCSP raise ValueError('HTTP DCSP requires DCSP CRLF DCSP terminators') DCNL DCSP  DCSP if (line[0] in (SPACE, TAB)): DCNL DCSP  DCSP  DCSP v = line.strip() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (k, v) = line.split(COLON, 1) DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Illegal DCSP header DCSP line.') DCNL DCSP  DCSP  DCSP k = k.strip().title() DCNL DCSP  DCSP  DCSP v = v.strip() DCNL DCSP  DCSP  DCSP hname = k DCNL DCSP  DCSP if (k in comma_separated_headers): DCNL DCSP  DCSP  DCSP existing = hdict.get(hname) DCNL DCSP  DCSP  DCSP if existing: DCNL DCSP  DCSP  DCSP  DCSP v = ', DCSP '.join((existing, v)) DCNL DCSP  DCSP hdict[hname] = v DCNL DCSP return hdict
def get_ssl_adapter_class(name='builtin'): DCNL  DCSP adapter = ssl_adapters[name.lower()] DCNL DCSP if isinstance(adapter, basestring): DCNL DCSP  DCSP last_dot = adapter.rfind('.') DCNL DCSP  DCSP attr_name = adapter[(last_dot + 1):] DCNL DCSP  DCSP mod_path = adapter[:last_dot] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP mod = sys.modules[mod_path] DCNL DCSP  DCSP  DCSP if (mod is None): DCNL DCSP  DCSP  DCSP  DCSP raise KeyError() DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP mod = __import__(mod_path, globals(), locals(), ['']) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP adapter = getattr(mod, attr_name) DCNL DCSP  DCSP except AttributeError: DCNL DCSP  DCSP  DCSP raise AttributeError(("'%s' DCSP object DCSP has DCSP no DCSP attribute DCSP '%s'" % (mod_path, attr_name))) DCNL DCSP return adapter
def process_urlencoded(entity): DCNL  DCSP qs = entity.fp.read() DCNL DCSP for charset in entity.attempt_charsets: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP params = {} DCNL DCSP  DCSP  DCSP for aparam in qs.split(ntob('&')): DCNL DCSP  DCSP  DCSP  DCSP for pair in aparam.split(ntob(';')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not pair): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP atoms = pair.split(ntob('='), 1) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (len(atoms) == 1): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP atoms.append(ntob('')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP key = unquote_plus(atoms[0]).decode(charset) DCNL DCSP  DCSP  DCSP  DCSP  DCSP value = unquote_plus(atoms[1]).decode(charset) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (key in params): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not isinstance(params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key] = [params[key]] DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key].append(value) DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP params[key] = value DCNL DCSP  DCSP except UnicodeDecodeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP entity.charset = charset DCNL DCSP  DCSP  DCSP break DCNL DCSP else: DCNL DCSP  DCSP raise cherrypy.HTTPError(400, ('The DCSP request DCSP entity DCSP could DCSP not DCSP be DCSP decoded. DCSP The DCSP following DCSP charsets DCSP were DCSP attempted: DCSP %s' % repr(entity.attempt_charsets))) DCNL DCSP for (key, value) in params.items(): DCNL DCSP  DCSP if (key in entity.params): DCNL DCSP  DCSP  DCSP if (not isinstance(entity.params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP entity.params[key] = [entity.params[key]] DCNL DCSP  DCSP  DCSP entity.params[key].append(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP entity.params[key] = value
def process_multipart(entity): DCNL  DCSP ib = '' DCNL DCSP if ('boundary' in entity.content_type.params): DCNL DCSP  DCSP ib = entity.content_type.params['boundary'].strip('"') DCNL DCSP if (not re.match('^[ DCSP -~]{0,200}[!-~]$', ib)): DCNL DCSP  DCSP raise ValueError(('Invalid DCSP boundary DCSP in DCSP multipart DCSP form: DCSP %r' % (ib,))) DCNL DCSP ib = ('--' + ib).encode('ascii') DCNL DCSP while True: DCNL DCSP  DCSP b = entity.readline() DCNL DCSP  DCSP if (not b): DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP b = b.strip() DCNL DCSP  DCSP if (b == ib): DCNL DCSP  DCSP  DCSP break DCNL DCSP while True: DCNL DCSP  DCSP part = entity.part_class.from_fp(entity.fp, ib) DCNL DCSP  DCSP entity.parts.append(part) DCNL DCSP  DCSP part.process() DCNL DCSP  DCSP if part.fp.done: DCNL DCSP  DCSP  DCSP break
def process_multipart_form_data(entity): DCNL  DCSP process_multipart(entity) DCNL DCSP kept_parts = [] DCNL DCSP for part in entity.parts: DCNL DCSP  DCSP if (part.name is None): DCNL DCSP  DCSP  DCSP kept_parts.append(part) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (part.filename is None): DCNL DCSP  DCSP  DCSP  DCSP value = part.fullvalue() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP value = part DCNL DCSP  DCSP  DCSP if (part.name in entity.params): DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(entity.params[part.name], list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP entity.params[part.name] = [entity.params[part.name]] DCNL DCSP  DCSP  DCSP  DCSP entity.params[part.name].append(value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP entity.params[part.name] = value DCNL DCSP entity.parts = kept_parts
def _old_process_multipart(entity): DCNL  DCSP process_multipart(entity) DCNL DCSP params = entity.params DCNL DCSP for part in entity.parts: DCNL DCSP  DCSP if (part.name is None): DCNL DCSP  DCSP  DCSP key = ntou('parts') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP key = part.name DCNL DCSP  DCSP if (part.filename is None): DCNL DCSP  DCSP  DCSP value = part.fullvalue() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = part DCNL DCSP  DCSP if (key in params): DCNL DCSP  DCSP  DCSP if (not isinstance(params[key], list)): DCNL DCSP  DCSP  DCSP  DCSP params[key] = [params[key]] DCNL DCSP  DCSP  DCSP params[key].append(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP params[key] = value
def as_dict(config): DCNL  DCSP if isinstance(config, basestring): DCNL DCSP  DCSP config = Parser().dict_from_file(config) DCNL DCSP elif hasattr(config, 'read'): DCNL DCSP  DCSP config = Parser().dict_from_file(config) DCNL DCSP return config
def unrepr(s): DCNL  DCSP if (not s): DCNL DCSP  DCSP return s DCNL DCSP if (sys.version_info < (3, 0)): DCNL DCSP  DCSP b = _Builder2() DCNL DCSP else: DCNL DCSP  DCSP b = _Builder3() DCNL DCSP obj = b.astnode(s) DCNL DCSP return b.build(obj)
def modules(modulePath): DCNL  DCSP try: DCNL DCSP  DCSP mod = sys.modules[modulePath] DCNL DCSP  DCSP if (mod is None): DCNL DCSP  DCSP  DCSP raise KeyError() DCNL DCSP except KeyError: DCNL DCSP  DCSP mod = __import__(modulePath, globals(), locals(), ['']) DCNL DCSP return mod
def attributes(full_attribute_name): DCNL  DCSP last_dot = full_attribute_name.rfind('.') DCNL DCSP attr_name = full_attribute_name[(last_dot + 1):] DCNL DCSP mod_path = full_attribute_name[:last_dot] DCNL DCSP mod = modules(mod_path) DCNL DCSP try: DCNL DCSP  DCSP attr = getattr(mod, attr_name) DCNL DCSP except AttributeError: DCNL DCSP  DCSP raise AttributeError(("'%s' DCSP object DCSP has DCSP no DCSP attribute DCSP '%s'" % (mod_path, attr_name))) DCNL DCSP return attr
def get(invalid_methods=('POST', 'PUT', 'DELETE'), debug=False, **kwargs): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP if (not hasattr(cherrypy, '_cache')): DCNL DCSP  DCSP cherrypy._cache = kwargs.pop('cache_class', MemoryCache)() DCNL DCSP  DCSP for (k, v) in kwargs.items(): DCNL DCSP  DCSP  DCSP setattr(cherrypy._cache, k, v) DCNL DCSP  DCSP cherrypy._cache.debug = debug DCNL DCSP if (request.method in invalid_methods): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.method DCSP %r DCSP in DCSP invalid_methods DCSP %r' % (request.method, invalid_methods)), 'TOOLS.CACHING') DCNL DCSP  DCSP cherrypy._cache.delete() DCNL DCSP  DCSP request.cached = False DCNL DCSP  DCSP request.cacheable = False DCNL DCSP  DCSP return False DCNL DCSP if ('no-cache' in [e.value for e in request.headers.elements('Pragma')]): DCNL DCSP  DCSP request.cached = False DCNL DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP return False DCNL DCSP cache_data = cherrypy._cache.get() DCNL DCSP request.cached = bool(cache_data) DCNL DCSP request.cacheable = (not request.cached) DCNL DCSP if request.cached: DCNL DCSP  DCSP max_age = cherrypy._cache.delay DCNL DCSP  DCSP for v in [e.value for e in request.headers.elements('Cache-Control')]: DCNL DCSP  DCSP  DCSP atoms = v.split('=', 1) DCNL DCSP  DCSP  DCSP directive = atoms.pop(0) DCNL DCSP  DCSP  DCSP if (directive == 'max-age'): DCNL DCSP  DCSP  DCSP  DCSP if ((len(atoms) != 1) or (not atoms[0].isdigit())): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Invalid DCSP Cache-Control DCSP header') DCNL DCSP  DCSP  DCSP  DCSP max_age = int(atoms[0]) DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP elif (directive == 'no-cache'): DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Ignoring DCSP cache DCSP due DCSP to DCSP Cache-Control: DCSP no-cache', 'TOOLS.CACHING') DCNL DCSP  DCSP  DCSP  DCSP request.cached = False DCNL DCSP  DCSP  DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Reading DCSP response DCSP from DCSP cache', 'TOOLS.CACHING') DCNL DCSP  DCSP (s, h, b, create_time) = cache_data DCNL DCSP  DCSP age = int((response.time - create_time)) DCNL DCSP  DCSP if (age > max_age): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Ignoring DCSP cache DCSP due DCSP to DCSP age DCSP > DCSP %d' % max_age), 'TOOLS.CACHING') DCNL DCSP  DCSP  DCSP request.cached = False DCNL DCSP  DCSP  DCSP request.cacheable = True DCNL DCSP  DCSP  DCSP return False DCNL DCSP  DCSP response.headers = rh = httputil.HeaderMap() DCNL DCSP  DCSP for k in h: DCNL DCSP  DCSP  DCSP dict.__setitem__(rh, k, dict.__getitem__(h, k)) DCNL DCSP  DCSP response.headers['Age'] = str(age) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP cptools.validate_since() DCNL DCSP  DCSP except cherrypy.HTTPRedirect: DCNL DCSP  DCSP  DCSP x = sys.exc_info()[1] DCNL DCSP  DCSP  DCSP if (x.status == 304): DCNL DCSP  DCSP  DCSP  DCSP cherrypy._cache.tot_non_modified += 1 DCNL DCSP  DCSP  DCSP raise DCNL DCSP  DCSP response.status = s DCNL DCSP  DCSP response.body = b DCNL DCSP elif debug: DCNL DCSP  DCSP cherrypy.log('request DCSP is DCSP not DCSP cached', 'TOOLS.CACHING') DCNL DCSP return request.cached
def tee_output(): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if ('no-store' in request.headers.values('Cache-Control')): DCNL DCSP  DCSP return DCNL DCSP def tee(body): DCNL DCSP  DCSP 'Tee DCSP response.body DCSP into DCSP a DCSP list.' DCNL DCSP  DCSP if (('no-cache' in response.headers.values('Pragma')) or ('no-store' in response.headers.values('Cache-Control'))): DCNL DCSP  DCSP  DCSP for chunk in body: DCNL DCSP  DCSP  DCSP  DCSP (yield chunk) DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP output = [] DCNL DCSP  DCSP for chunk in body: DCNL DCSP  DCSP  DCSP output.append(chunk) DCNL DCSP  DCSP  DCSP (yield chunk) DCNL DCSP  DCSP body = ntob('').join(output) DCNL DCSP  DCSP cherrypy._cache.put((response.status, (response.headers or {}), body, response.time), len(body)) DCNL DCSP response = cherrypy.serving.response DCNL DCSP response.body = tee(response.body)
def expires(secs=0, force=False, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP headers = response.headers DCNL DCSP cacheable = False DCNL DCSP if (not force): DCNL DCSP  DCSP for indicator in ('Etag', 'Last-Modified', 'Age', 'Expires'): DCNL DCSP  DCSP  DCSP if (indicator in headers): DCNL DCSP  DCSP  DCSP  DCSP cacheable = True DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP if ((not cacheable) and (not force)): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request DCSP is DCSP not DCSP cacheable', 'TOOLS.EXPIRES') DCNL DCSP else: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request DCSP is DCSP cacheable', 'TOOLS.EXPIRES') DCNL DCSP  DCSP if isinstance(secs, datetime.timedelta): DCNL DCSP  DCSP  DCSP secs = ((86400 * secs.days) + secs.seconds) DCNL DCSP  DCSP if (secs == 0): DCNL DCSP  DCSP  DCSP if (force or ('Pragma' not in headers)): DCNL DCSP  DCSP  DCSP  DCSP headers['Pragma'] = 'no-cache' DCNL DCSP  DCSP  DCSP if (cherrypy.serving.request.protocol >= (1, 1)): DCNL DCSP  DCSP  DCSP  DCSP if (force or ('Cache-Control' not in headers)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP headers['Cache-Control'] = 'no-cache, DCSP must-revalidate' DCNL DCSP  DCSP  DCSP expiry = httputil.HTTPDate(1169942400.0) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP expiry = httputil.HTTPDate((response.time + secs)) DCNL DCSP  DCSP if (force or ('Expires' not in headers)): DCNL DCSP  DCSP  DCSP headers['Expires'] = expiry
def extrapolate_statistics(scope): DCNL  DCSP c = {} DCNL DCSP for (k, v) in list(scope.items()): DCNL DCSP  DCSP if isinstance(v, dict): DCNL DCSP  DCSP  DCSP v = extrapolate_statistics(v) DCNL DCSP  DCSP elif isinstance(v, (list, tuple)): DCNL DCSP  DCSP  DCSP v = [extrapolate_statistics(record) for record in v] DCNL DCSP  DCSP elif hasattr(v, '__call__'): DCNL DCSP  DCSP  DCSP v = v(scope) DCNL DCSP  DCSP c[k] = v DCNL DCSP return c
def decode(encoding=None, default_encoding='utf-8'): DCNL  DCSP body = cherrypy.request.body DCNL DCSP if (encoding is not None): DCNL DCSP  DCSP if (not isinstance(encoding, list)): DCNL DCSP  DCSP  DCSP encoding = [encoding] DCNL DCSP  DCSP body.attempt_charsets = encoding DCNL DCSP elif default_encoding: DCNL DCSP  DCSP if (not isinstance(default_encoding, list)): DCNL DCSP  DCSP  DCSP default_encoding = [default_encoding] DCNL DCSP  DCSP body.attempt_charsets = (body.attempt_charsets + default_encoding)
def compress(body, compress_level): DCNL  DCSP import zlib DCNL DCSP (yield ntob('\x1f\x8b')) DCNL DCSP (yield ntob('\x08')) DCNL DCSP (yield ntob('\x00')) DCNL DCSP (yield struct.pack('<L', (int(time.time()) & int('FFFFFFFF', 16)))) DCNL DCSP (yield ntob('\x02')) DCNL DCSP (yield ntob('\xff')) DCNL DCSP crc = zlib.crc32(ntob('')) DCNL DCSP size = 0 DCNL DCSP zobj = zlib.compressobj(compress_level, zlib.DEFLATED, (- zlib.MAX_WBITS), zlib.DEF_MEM_LEVEL, 0) DCNL DCSP for line in body: DCNL DCSP  DCSP size += len(line) DCNL DCSP  DCSP crc = zlib.crc32(line, crc) DCNL DCSP  DCSP (yield zobj.compress(line)) DCNL DCSP (yield zobj.flush()) DCNL DCSP (yield struct.pack('<L', (crc & int('FFFFFFFF', 16)))) DCNL DCSP (yield struct.pack('<L', (size & int('FFFFFFFF', 16))))
def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP set_vary_header(response, 'Accept-Encoding') DCNL DCSP if (not response.body): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP response DCSP body', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP if getattr(request, 'cached', False): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Not DCSP gzipping DCSP cached DCSP response', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP acceptable = request.headers.elements('Accept-Encoding') DCNL DCSP if (not acceptable): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Accept-Encoding', context='TOOLS.GZIP') DCNL DCSP  DCSP return DCNL DCSP ct = response.headers.get('Content-Type', '').split(';')[0] DCNL DCSP for coding in acceptable: DCNL DCSP  DCSP if ((coding.value == 'identity') and (coding.qvalue != 0)): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Non-zero DCSP identity DCSP qvalue: DCSP %s' % coding), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP if (coding.value in ('gzip', 'x-gzip')): DCNL DCSP  DCSP  DCSP if (coding.qvalue == 0): DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Zero DCSP gzip DCSP qvalue: DCSP %s' % coding), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP if (ct not in mime_types): DCNL DCSP  DCSP  DCSP  DCSP found = False DCNL DCSP  DCSP  DCSP  DCSP if ('/' in ct): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (ct_media_type, ct_sub_type) = ct.split('/') DCNL DCSP  DCSP  DCSP  DCSP  DCSP for mime_type in mime_types: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ('/' in mime_type): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (media_type, sub_type) = mime_type.split('/') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (ct_media_type == media_type): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (sub_type == '*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP found = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif (('+' in sub_type) and ('+' in ct_sub_type)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (ct_left, ct_right) = ct_sub_type.split('+') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (left, right) = sub_type.split('+') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if ((left == '*') and (ct_right == right)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP found = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP  DCSP if (not found): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Content-Type DCSP %s DCSP not DCSP in DCSP mime_types DCSP %r' % (ct, mime_types)), context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log('Gzipping', context='TOOLS.GZIP') DCNL DCSP  DCSP  DCSP response.headers['Content-Encoding'] = 'gzip' DCNL DCSP  DCSP  DCSP response.body = compress(response.body, compress_level) DCNL DCSP  DCSP  DCSP if ('Content-Length' in response.headers): DCNL DCSP  DCSP  DCSP  DCSP del response.headers['Content-Length'] DCNL DCSP  DCSP  DCSP return DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log('No DCSP acceptable DCSP encoding DCSP found.', context='GZIP') DCNL DCSP cherrypy.HTTPError(406, 'identity, DCSP gzip').set_response()
def process_body(): DCNL  DCSP try: DCNL DCSP  DCSP return get_xmlrpclib().loads(cherrypy.request.body.read()) DCNL DCSP except Exception: DCNL DCSP  DCSP return (('ERROR DCSP PARAMS',), 'ERRORMETHOD')
def patched_path(path): DCNL  DCSP if (not path.endswith('/')): DCNL DCSP  DCSP path += '/' DCNL DCSP if path.startswith('/RPC2/'): DCNL DCSP  DCSP path = path[5:] DCNL DCSP return path
def calculateNonce(realm, algorithm=MD5): DCNL  DCSP global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS DCNL DCSP assert (algorithm in SUPPORTED_ALGORITHM) DCNL DCSP try: DCNL DCSP  DCSP encoder = DIGEST_AUTH_ENCODERS[algorithm] DCNL DCSP except KeyError: DCNL DCSP  DCSP raise NotImplementedError(('The DCSP chosen DCSP algorithm DCSP (%s) DCSP does DCSP not DCSP have DCSP an DCSP implementation DCSP yet' % algorithm)) DCNL DCSP return encoder(('%d:%s' % (time.time(), realm)))
def digestAuth(realm, algorithm=MD5, nonce=None, qop=AUTH): DCNL  DCSP global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS, SUPPORTED_QOP DCNL DCSP assert (algorithm in SUPPORTED_ALGORITHM) DCNL DCSP assert (qop in SUPPORTED_QOP) DCNL DCSP if (nonce is None): DCNL DCSP  DCSP nonce = calculateNonce(realm, algorithm) DCNL DCSP return ('Digest DCSP realm="%s", DCSP nonce="%s", DCSP algorithm="%s", DCSP qop="%s"' % (realm, nonce, algorithm, qop))
def basicAuth(realm): DCNL  DCSP assert ('"' not in realm), 'Realms DCSP cannot DCSP contain DCSP the DCSP " DCSP (quote) DCSP character.' DCNL DCSP return ('Basic DCSP realm="%s"' % realm)
def doAuth(realm): DCNL  DCSP return ((digestAuth(realm) + ' DCSP ') + basicAuth(realm))
def parseAuthorization(credentials): DCNL  DCSP global AUTH_SCHEMES DCNL DCSP (auth_scheme, auth_params) = credentials.split(' DCSP ', 1) DCNL DCSP auth_scheme = auth_scheme.lower() DCNL DCSP parser = AUTH_SCHEMES[auth_scheme] DCNL DCSP params = parser(auth_params) DCNL DCSP if (params is None): DCNL DCSP  DCSP return DCNL DCSP assert ('auth_scheme' not in params) DCNL DCSP params['auth_scheme'] = auth_scheme DCNL DCSP return params
def md5SessionKey(params, password): DCNL  DCSP keys = ('username', 'realm', 'nonce', 'cnonce') DCNL DCSP params_copy = {} DCNL DCSP for key in keys: DCNL DCSP  DCSP params_copy[key] = params[key] DCNL DCSP params_copy['algorithm'] = MD5_SESS DCNL DCSP return _A1(params_copy, password)
def _computeDigestResponse(auth_map, password, method='GET', A1=None, **kwargs): DCNL  DCSP params = auth_map DCNL DCSP algorithm = params.get('algorithm', MD5) DCNL DCSP H = DIGEST_AUTH_ENCODERS[algorithm] DCNL DCSP KD = (lambda secret, data: H(((secret + ':') + data))) DCNL DCSP qop = params.get('qop', None) DCNL DCSP H_A2 = H(_A2(params, method, kwargs)) DCNL DCSP if ((algorithm == MD5_SESS) and (A1 is not None)): DCNL DCSP  DCSP H_A1 = H(A1) DCNL DCSP else: DCNL DCSP  DCSP H_A1 = H(_A1(params, password)) DCNL DCSP if (qop in ('auth', 'auth-int')): DCNL DCSP  DCSP request = ('%s:%s:%s:%s:%s' % (params['nonce'], params['nc'], params['cnonce'], params['qop'], H_A2)) DCNL DCSP elif (qop is None): DCNL DCSP  DCSP request = ('%s:%s' % (params['nonce'], H_A2)) DCNL DCSP return KD(H_A1, request)
def _checkDigestResponse(auth_map, password, method='GET', A1=None, **kwargs): DCNL  DCSP if (auth_map['realm'] != kwargs.get('realm', None)): DCNL DCSP  DCSP return False DCNL DCSP response = _computeDigestResponse(auth_map, password, method, A1, **kwargs) DCNL DCSP return (response == auth_map['response'])
def checkResponse(auth_map, password, method='GET', encrypt=None, **kwargs): DCNL  DCSP checker = AUTH_RESPONSES[auth_map['auth_scheme']] DCNL DCSP return checker(auth_map, password, method=method, encrypt=encrypt, **kwargs)
def new_func_strip_path(func_name): DCNL  DCSP (filename, line, name) = func_name DCNL DCSP if filename.endswith('__init__.py'): DCNL DCSP  DCSP return ((os.path.basename(filename[:(-12)]) + filename[(-12):]), line, name) DCNL DCSP return (os.path.basename(filename), line, name)
def get_tree(base, exclude, coverage=the_coverage): DCNL  DCSP tree = {} DCNL DCSP runs = coverage.data.executed_files() DCNL DCSP for path in runs: DCNL DCSP  DCSP if ((not _skip_file(path, exclude)) and (not os.path.isdir(path))): DCNL DCSP  DCSP  DCSP _graft(path, tree) DCNL DCSP return tree
def serve_file(path, content_type=None, disposition=None, name=None, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP if (not os.path.isabs(path)): DCNL DCSP  DCSP msg = ("'%s' DCSP is DCSP not DCSP an DCSP absolute DCSP path." % path) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICFILE') DCNL DCSP  DCSP raise ValueError(msg) DCNL DCSP try: DCNL DCSP  DCSP st = os.stat(path) DCNL DCSP except OSError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('os.stat(%r) DCSP failed' % path), 'TOOLS.STATIC') DCNL DCSP  DCSP raise cherrypy.NotFound() DCNL DCSP if stat.S_ISDIR(st.st_mode): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('%r DCSP is DCSP a DCSP directory' % path), 'TOOLS.STATIC') DCNL DCSP  DCSP raise cherrypy.NotFound() DCNL DCSP response.headers['Last-Modified'] = httputil.HTTPDate(st.st_mtime) DCNL DCSP cptools.validate_since() DCNL DCSP if (content_type is None): DCNL DCSP  DCSP ext = '' DCNL DCSP  DCSP i = path.rfind('.') DCNL DCSP  DCSP if (i != (-1)): DCNL DCSP  DCSP  DCSP ext = path[i:].lower() DCNL DCSP  DCSP content_type = mimetypes.types_map.get(ext, None) DCNL DCSP if (content_type is not None): DCNL DCSP  DCSP response.headers['Content-Type'] = content_type DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Type: DCSP %r' % content_type), 'TOOLS.STATIC') DCNL DCSP cd = None DCNL DCSP if (disposition is not None): DCNL DCSP  DCSP if (name is None): DCNL DCSP  DCSP  DCSP name = os.path.basename(path) DCNL DCSP  DCSP cd = ('%s; DCSP filename="%s"' % (disposition, name)) DCNL DCSP  DCSP response.headers['Content-Disposition'] = cd DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Disposition: DCSP %r' % cd), 'TOOLS.STATIC') DCNL DCSP content_length = st.st_size DCNL DCSP fileobj = open(path, 'rb') DCNL DCSP return _serve_fileobj(fileobj, content_type, content_length, debug=debug)
def serve_fileobj(fileobj, content_type=None, disposition=None, name=None, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP try: DCNL DCSP  DCSP st = os.fstat(fileobj.fileno()) DCNL DCSP except AttributeError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('os DCSP has DCSP no DCSP fstat DCSP attribute', 'TOOLS.STATIC') DCNL DCSP  DCSP content_length = None DCNL DCSP except UnsupportedOperation: DCNL DCSP  DCSP content_length = None DCNL DCSP else: DCNL DCSP  DCSP response.headers['Last-Modified'] = httputil.HTTPDate(st.st_mtime) DCNL DCSP  DCSP cptools.validate_since() DCNL DCSP  DCSP content_length = st.st_size DCNL DCSP if (content_type is not None): DCNL DCSP  DCSP response.headers['Content-Type'] = content_type DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Type: DCSP %r' % content_type), 'TOOLS.STATIC') DCNL DCSP cd = None DCNL DCSP if (disposition is not None): DCNL DCSP  DCSP if (name is None): DCNL DCSP  DCSP  DCSP cd = disposition DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP cd = ('%s; DCSP filename="%s"' % (disposition, name)) DCNL DCSP  DCSP response.headers['Content-Disposition'] = cd DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Content-Disposition: DCSP %r' % cd), 'TOOLS.STATIC') DCNL DCSP return _serve_fileobj(fileobj, content_type, content_length, debug=debug)
def _serve_fileobj(fileobj, content_type, content_length, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP request = cherrypy.serving.request DCNL DCSP if (request.protocol >= (1, 1)): DCNL DCSP  DCSP response.headers['Accept-Ranges'] = 'bytes' DCNL DCSP  DCSP r = httputil.get_ranges(request.headers.get('Range'), content_length) DCNL DCSP  DCSP if (r == []): DCNL DCSP  DCSP  DCSP response.headers['Content-Range'] = ('bytes DCSP */%s' % content_length) DCNL DCSP  DCSP  DCSP message = 'Invalid DCSP Range DCSP (first-byte-pos DCSP greater DCSP than DCSP Content-Length)' DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(message, 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(416, message) DCNL DCSP  DCSP if r: DCNL DCSP  DCSP  DCSP if (len(r) == 1): DCNL DCSP  DCSP  DCSP  DCSP (start, stop) = r[0] DCNL DCSP  DCSP  DCSP  DCSP if (stop > content_length): DCNL DCSP  DCSP  DCSP  DCSP  DCSP stop = content_length DCNL DCSP  DCSP  DCSP  DCSP r_len = (stop - start) DCNL DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Single DCSP part; DCSP start: DCSP %r, DCSP stop: DCSP %r' % (start, stop)), 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP  DCSP response.status = '206 DCSP Partial DCSP Content' DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Range'] = ('bytes DCSP %s-%s/%s' % (start, (stop - 1), content_length)) DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Length'] = r_len DCNL DCSP  DCSP  DCSP  DCSP fileobj.seek(start) DCNL DCSP  DCSP  DCSP  DCSP response.body = file_generator_limited(fileobj, r_len) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP response.status = '206 DCSP Partial DCSP Content' DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP from email.generator import _make_boundary as choose_boundary DCNL DCSP  DCSP  DCSP  DCSP except ImportError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP from mimetools import choose_boundary DCNL DCSP  DCSP  DCSP  DCSP boundary = choose_boundary() DCNL DCSP  DCSP  DCSP  DCSP ct = ('multipart/byteranges; DCSP boundary=%s' % boundary) DCNL DCSP  DCSP  DCSP  DCSP response.headers['Content-Type'] = ct DCNL DCSP  DCSP  DCSP  DCSP if ('Content-Length' in response.headers): DCNL DCSP  DCSP  DCSP  DCSP  DCSP del response.headers['Content-Length'] DCNL DCSP  DCSP  DCSP  DCSP def file_ranges(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob('\r\n')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP for (start, stop) in r: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Multipart; DCSP start: DCSP %r, DCSP stop: DCSP %r' % (start, stop)), 'TOOLS.STATIC') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob(('--' + boundary), 'ascii')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob(('\r\nContent-type: DCSP %s' % content_type), 'ascii')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob(('\r\nContent-range: DCSP bytes DCSP %s-%s/%s\r\n\r\n' % (start, (stop - 1), content_length)), 'ascii')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP fileobj.seek(start) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for chunk in file_generator_limited(fileobj, (stop - start)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield chunk) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob('\r\n')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob((('--' + boundary) + '--'), 'ascii')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield ntob('\r\n')) DCNL DCSP  DCSP  DCSP  DCSP response.body = file_ranges() DCNL DCSP  DCSP  DCSP return response.body DCNL DCSP  DCSP elif debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP byteranges DCSP requested', 'TOOLS.STATIC') DCNL DCSP response.headers['Content-Length'] = content_length DCNL DCSP response.body = fileobj DCNL DCSP return response.body
def serve_download(path, name=None): DCNL  DCSP return serve_file(path, 'application/x-download', 'attachment', name)
def staticdir(section, dir, root='', match='', content_types=None, index='', debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if (request.method not in ('GET', 'HEAD')): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request.method DCSP not DCSP GET DCSP or DCSP HEAD', 'TOOLS.STATICDIR') DCNL DCSP  DCSP return False DCNL DCSP if (match and (not re.search(match, request.path_info))): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.path_info DCSP %r DCSP does DCSP not DCSP match DCSP pattern DCSP %r' % (request.path_info, match)), 'TOOLS.STATICDIR') DCNL DCSP  DCSP return False DCNL DCSP dir = os.path.expanduser(dir) DCNL DCSP if (not os.path.isabs(dir)): DCNL DCSP  DCSP if (not root): DCNL DCSP  DCSP  DCSP msg = 'Static DCSP dir DCSP requires DCSP an DCSP absolute DCSP dir DCSP (or DCSP root).' DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICDIR') DCNL DCSP  DCSP  DCSP raise ValueError(msg) DCNL DCSP  DCSP dir = os.path.join(root, dir) DCNL DCSP if (section == 'global'): DCNL DCSP  DCSP section = '/' DCNL DCSP section = section.rstrip('\\/') DCNL DCSP branch = request.path_info[(len(section) + 1):] DCNL DCSP branch = unquote(branch.lstrip('\\/')) DCNL DCSP filename = os.path.join(dir, branch) DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Checking DCSP file DCSP %r DCSP to DCSP fulfill DCSP %r' % (filename, request.path_info)), 'TOOLS.STATICDIR') DCNL DCSP if (not os.path.normpath(filename).startswith(os.path.normpath(dir))): DCNL DCSP  DCSP raise cherrypy.HTTPError(403) DCNL DCSP handled = _attempt(filename, content_types) DCNL DCSP if (not handled): DCNL DCSP  DCSP if index: DCNL DCSP  DCSP  DCSP handled = _attempt(os.path.join(filename, index), content_types) DCNL DCSP  DCSP  DCSP if handled: DCNL DCSP  DCSP  DCSP  DCSP request.is_index = (filename[(-1)] in '\\/') DCNL DCSP return handled
def staticfile(filename, root=None, match='', content_types=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if (request.method not in ('GET', 'HEAD')): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('request.method DCSP not DCSP GET DCSP or DCSP HEAD', 'TOOLS.STATICFILE') DCNL DCSP  DCSP return False DCNL DCSP if (match and (not re.search(match, request.path_info))): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.path_info DCSP %r DCSP does DCSP not DCSP match DCSP pattern DCSP %r' % (request.path_info, match)), 'TOOLS.STATICFILE') DCNL DCSP  DCSP return False DCNL DCSP if (not os.path.isabs(filename)): DCNL DCSP  DCSP if (not root): DCNL DCSP  DCSP  DCSP msg = ("Static DCSP tool DCSP requires DCSP an DCSP absolute DCSP filename DCSP (got DCSP '%s')." % filename) DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(msg, 'TOOLS.STATICFILE') DCNL DCSP  DCSP  DCSP raise ValueError(msg) DCNL DCSP  DCSP filename = os.path.join(root, filename) DCNL DCSP return _attempt(filename, content_types, debug=debug)
def get_ha1_dict_plain(user_password_dict): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP password = user_password_dict.get(username) DCNL DCSP  DCSP if password: DCNL DCSP  DCSP  DCSP return md5_hex(('%s:%s:%s' % (username, realm, password))) DCNL DCSP  DCSP return None DCNL DCSP return get_ha1
def get_ha1_dict(user_ha1_dict): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP return user_ha1_dict.get(user) DCNL DCSP return get_ha1
def get_ha1_file_htdigest(filename): DCNL  DCSP def get_ha1(realm, username): DCNL DCSP  DCSP result = None DCNL DCSP  DCSP f = open(filename, 'r') DCNL DCSP  DCSP for line in f: DCNL DCSP  DCSP  DCSP (u, r, ha1) = line.rstrip().split(':') DCNL DCSP  DCSP  DCSP if ((u == username) and (r == realm)): DCNL DCSP  DCSP  DCSP  DCSP result = ha1 DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP f.close() DCNL DCSP  DCSP return result DCNL DCSP return get_ha1
def synthesize_nonce(s, key, timestamp=None): DCNL  DCSP if (timestamp is None): DCNL DCSP  DCSP timestamp = int(time.time()) DCNL DCSP h = md5_hex(('%s:%s:%s' % (timestamp, s, key))) DCNL DCSP nonce = ('%s:%s' % (timestamp, h)) DCNL DCSP return nonce
def H(s): DCNL  DCSP return md5_hex(s)
def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False): DCNL  DCSP if (qop not in valid_qops): DCNL DCSP  DCSP raise ValueError(("Unsupported DCSP value DCSP for DCSP qop: DCSP '%s'" % qop)) DCNL DCSP if (algorithm not in valid_algorithms): DCNL DCSP  DCSP raise ValueError(("Unsupported DCSP value DCSP for DCSP algorithm: DCSP '%s'" % algorithm)) DCNL DCSP if (nonce is None): DCNL DCSP  DCSP nonce = synthesize_nonce(realm, key) DCNL DCSP s = ('Digest DCSP realm="%s", DCSP nonce="%s", DCSP algorithm="%s", DCSP qop="%s"' % (realm, nonce, algorithm, qop)) DCNL DCSP if stale: DCNL DCSP  DCSP s += ', DCSP stale="true"' DCNL DCSP return s
def digest_auth(realm, get_ha1, key, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP auth_header = request.headers.get('authorization') DCNL DCSP nonce_is_stale = False DCNL DCSP if (auth_header is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP auth = HttpDigestAuthorization(auth_header, request.method, debug=debug) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'The DCSP Authorization DCSP header DCSP could DCSP not DCSP be DCSP parsed.') DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP TRACE(str(auth)) DCNL DCSP  DCSP if auth.validate_nonce(realm, key): DCNL DCSP  DCSP  DCSP ha1 = get_ha1(realm, auth.username) DCNL DCSP  DCSP  DCSP if (ha1 is not None): DCNL DCSP  DCSP  DCSP  DCSP digest = auth.request_digest(ha1, entity_body=request.body) DCNL DCSP  DCSP  DCSP  DCSP if (digest == auth.response): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP TRACE('digest DCSP matches DCSP auth.response') DCNL DCSP  DCSP  DCSP  DCSP  DCSP nonce_is_stale = auth.is_nonce_stale(max_age_seconds=600) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (not nonce_is_stale): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP request.login = auth.username DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP TRACE(('authentication DCSP of DCSP %s DCSP successful' % auth.username)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP header = www_authenticate(realm, key, stale=nonce_is_stale) DCNL DCSP if debug: DCNL DCSP  DCSP TRACE(header) DCNL DCSP cherrypy.serving.response.headers['WWW-Authenticate'] = header DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def file_generator_limited(fileobj, count, chunk_size=65536): DCNL  DCSP remaining = count DCNL DCSP while (remaining > 0): DCNL DCSP  DCSP chunk = fileobj.read(min(chunk_size, remaining)) DCNL DCSP  DCSP chunklen = len(chunk) DCNL DCSP  DCSP if (chunklen == 0): DCNL DCSP  DCSP  DCSP return DCNL DCSP  DCSP remaining -= chunklen DCNL DCSP  DCSP (yield chunk)
def set_vary_header(response, header_name): DCNL  DCSP varies = response.headers.get('Vary', '') DCNL DCSP varies = [x.strip() for x in varies.split(',') if x.strip()] DCNL DCSP if (header_name not in varies): DCNL DCSP  DCSP varies.append(header_name) DCNL DCSP response.headers['Vary'] = ', DCSP '.join(varies)
def checkpassword_dict(user_password_dict): DCNL  DCSP def checkpassword(realm, user, password): DCNL DCSP  DCSP p = user_password_dict.get(user) DCNL DCSP  DCSP return ((p and (p == password)) or False) DCNL DCSP return checkpassword
def basic_auth(realm, checkpassword, debug=False): DCNL  DCSP if ('"' in realm): DCNL DCSP  DCSP raise ValueError('Realm DCSP cannot DCSP contain DCSP the DCSP " DCSP (quote) DCSP character.') DCNL DCSP request = cherrypy.serving.request DCNL DCSP auth_header = request.headers.get('authorization') DCNL DCSP if (auth_header is not None): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (scheme, params) = auth_header.split(' DCSP ', 1) DCNL DCSP  DCSP  DCSP if (scheme.lower() == 'basic'): DCNL DCSP  DCSP  DCSP  DCSP (username, password) = base64_decode(params).split(':', 1) DCNL DCSP  DCSP  DCSP  DCSP if checkpassword(realm, username, password): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Auth DCSP succeeded', 'TOOLS.AUTH_BASIC') DCNL DCSP  DCSP  DCSP  DCSP  DCSP request.login = username DCNL DCSP  DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP except (ValueError, binascii.Error): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Bad DCSP Request') DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = ('Basic DCSP realm="%s"' % realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def validate_etags(autotags=False, debug=False): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP if hasattr(response, 'ETag'): DCNL DCSP  DCSP return DCNL DCSP (status, reason, msg) = _httputil.valid_status(response.status) DCNL DCSP etag = response.headers.get('ETag') DCNL DCSP if etag: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('ETag DCSP already DCSP set: DCSP %s' % etag), 'TOOLS.ETAGS') DCNL DCSP elif (not autotags): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Autotags DCSP off', 'TOOLS.ETAGS') DCNL DCSP elif (status != 200): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Status DCSP not DCSP 200', 'TOOLS.ETAGS') DCNL DCSP else: DCNL DCSP  DCSP etag = response.collapse_body() DCNL DCSP  DCSP etag = ('"%s"' % md5(etag).hexdigest()) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Setting DCSP ETag: DCSP %s' % etag), 'TOOLS.ETAGS') DCNL DCSP  DCSP response.headers['ETag'] = etag DCNL DCSP response.ETag = etag DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Status: DCSP %s' % status), 'TOOLS.ETAGS') DCNL DCSP if ((status >= 200) and (status <= 299)): DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP conditions = (request.headers.elements('If-Match') or []) DCNL DCSP  DCSP conditions = [str(x) for x in conditions] DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('If-Match DCSP conditions: DCSP %s' % repr(conditions)), 'TOOLS.ETAGS') DCNL DCSP  DCSP if (conditions and (not ((conditions == ['*']) or (etag in conditions)))): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(412, ('If-Match DCSP failed: DCSP ETag DCSP %r DCSP did DCSP not DCSP match DCSP %r' % (etag, conditions))) DCNL DCSP  DCSP conditions = (request.headers.elements('If-None-Match') or []) DCNL DCSP  DCSP conditions = [str(x) for x in conditions] DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('If-None-Match DCSP conditions: DCSP %s' % repr(conditions)), 'TOOLS.ETAGS') DCNL DCSP  DCSP if ((conditions == ['*']) or (etag in conditions)): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('request.method: DCSP %s' % request.method), 'TOOLS.ETAGS') DCNL DCSP  DCSP  DCSP if (request.method in ('GET', 'HEAD')): DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect([], 304) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412, ('If-None-Match DCSP failed: DCSP ETag DCSP %r DCSP matched DCSP %r' % (etag, conditions)))
def validate_since(): DCNL  DCSP response = cherrypy.serving.response DCNL DCSP lastmod = response.headers.get('Last-Modified') DCNL DCSP if lastmod: DCNL DCSP  DCSP (status, reason, msg) = _httputil.valid_status(response.status) DCNL DCSP  DCSP request = cherrypy.serving.request DCNL DCSP  DCSP since = request.headers.get('If-Unmodified-Since') DCNL DCSP  DCSP if (since and (since != lastmod)): DCNL DCSP  DCSP  DCSP if (((status >= 200) and (status <= 299)) or (status == 412)): DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412) DCNL DCSP  DCSP since = request.headers.get('If-Modified-Since') DCNL DCSP  DCSP if (since and (since == lastmod)): DCNL DCSP  DCSP  DCSP if (((status >= 200) and (status <= 299)) or (status == 304)): DCNL DCSP  DCSP  DCSP  DCSP if (request.method in ('GET', 'HEAD')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect([], 304) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPError(412)
def allow(methods=None, debug=False): DCNL  DCSP if (not isinstance(methods, (tuple, list))): DCNL DCSP  DCSP methods = [methods] DCNL DCSP methods = [m.upper() for m in methods if m] DCNL DCSP if (not methods): DCNL DCSP  DCSP methods = ['GET', 'HEAD'] DCNL DCSP elif (('GET' in methods) and ('HEAD' not in methods)): DCNL DCSP  DCSP methods.append('HEAD') DCNL DCSP cherrypy.response.headers['Allow'] = ', DCSP '.join(methods) DCNL DCSP if (cherrypy.request.method not in methods): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('request.method DCSP %r DCSP not DCSP in DCSP methods DCSP %r' % (cherrypy.request.method, methods)), 'TOOLS.ALLOW') DCNL DCSP  DCSP raise cherrypy.HTTPError(405) DCNL DCSP elif debug: DCNL DCSP  DCSP cherrypy.log(('request.method DCSP %r DCSP in DCSP methods DCSP %r' % (cherrypy.request.method, methods)), 'TOOLS.ALLOW')
def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto', debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if scheme: DCNL DCSP  DCSP s = request.headers.get(scheme, None) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP scheme DCSP %r:%r' % (scheme, s)), 'TOOLS.PROXY') DCNL DCSP  DCSP if ((s == 'on') and ('ssl' in scheme.lower())): DCNL DCSP  DCSP  DCSP scheme = 'https' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP scheme = s DCNL DCSP if (not scheme): DCNL DCSP  DCSP scheme = request.base[:request.base.find('://')] DCNL DCSP if local: DCNL DCSP  DCSP lbase = request.headers.get(local, None) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP local DCSP %r:%r' % (local, lbase)), 'TOOLS.PROXY') DCNL DCSP  DCSP if (lbase is not None): DCNL DCSP  DCSP  DCSP base = lbase.split(',')[0] DCNL DCSP if (not base): DCNL DCSP  DCSP port = request.local.port DCNL DCSP  DCSP if (port == 80): DCNL DCSP  DCSP  DCSP base = '127.0.0.1' DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP base = ('127.0.0.1:%s' % port) DCNL DCSP if (base.find('://') == (-1)): DCNL DCSP  DCSP base = ((scheme + '://') + base) DCNL DCSP request.base = base DCNL DCSP if remote: DCNL DCSP  DCSP xff = request.headers.get(remote) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Testing DCSP remote DCSP %r:%r' % (remote, xff)), 'TOOLS.PROXY') DCNL DCSP  DCSP if xff: DCNL DCSP  DCSP  DCSP if (remote == 'X-Forwarded-For'): DCNL DCSP  DCSP  DCSP  DCSP xff = xff.split(',')[(-1)].strip() DCNL DCSP  DCSP  DCSP request.remote.ip = xff
def ignore_headers(headers=('Range',), debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP for name in headers: DCNL DCSP  DCSP if (name in request.headers): DCNL DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.log(('Ignoring DCSP request DCSP header DCSP %r' % name), 'TOOLS.IGNORE_HEADERS') DCNL DCSP  DCSP  DCSP del request.headers[name]
def response_headers(headers=None, debug=False): DCNL  DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Setting DCSP response DCSP headers: DCSP %s' % repr(headers)), 'TOOLS.RESPONSE_HEADERS') DCNL DCSP for (name, value) in (headers or []): DCNL DCSP  DCSP cherrypy.serving.response.headers[name] = value
def referer(pattern, accept=True, accept_missing=False, error=403, message='Forbidden DCSP Referer DCSP header.', debug=False): DCNL  DCSP try: DCNL DCSP  DCSP ref = cherrypy.serving.request.headers['Referer'] DCNL DCSP  DCSP match = bool(re.match(pattern, ref)) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Referer DCSP %r DCSP matches DCSP %r' % (ref, pattern)), 'TOOLS.REFERER') DCNL DCSP  DCSP if (accept == match): DCNL DCSP  DCSP  DCSP return DCNL DCSP except KeyError: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Referer DCSP header', 'TOOLS.REFERER') DCNL DCSP  DCSP if accept_missing: DCNL DCSP  DCSP  DCSP return DCNL DCSP raise cherrypy.HTTPError(error, message)
def log_traceback(severity=logging.ERROR, debug=False): DCNL  DCSP cherrypy.log('', 'HTTP', severity=severity, traceback=True)
def log_request_headers(debug=False): DCNL  DCSP h = [(' DCSP  DCSP %s: DCSP %s' % (k, v)) for (k, v) in cherrypy.serving.request.header_list] DCNL DCSP cherrypy.log(('\nRequest DCSP Headers:\n' + '\n'.join(h)), 'HTTP')
def log_hooks(debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP msg = [] DCNL DCSP from cherrypy import _cprequest DCNL DCSP points = _cprequest.hookpoints DCNL DCSP for k in request.hooks.keys(): DCNL DCSP  DCSP if (k not in points): DCNL DCSP  DCSP  DCSP points.append(k) DCNL DCSP for k in points: DCNL DCSP  DCSP msg.append((' DCSP  DCSP  DCSP  DCSP %s:' % k)) DCNL DCSP  DCSP v = request.hooks.get(k, []) DCNL DCSP  DCSP v.sort() DCNL DCSP  DCSP for h in v: DCNL DCSP  DCSP  DCSP msg.append((' DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP %r' % h)) DCNL DCSP cherrypy.log(((('\nRequest DCSP Hooks DCSP for DCSP ' + cherrypy.url()) + ':\n') + '\n'.join(msg)), 'HTTP')
def redirect(url='', internal=True, debug=False): DCNL  DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Redirecting DCSP %sto: DCSP %s' % ({True: 'internal DCSP ', False: ''}[internal], url)), 'TOOLS.REDIRECT') DCNL DCSP if internal: DCNL DCSP  DCSP raise cherrypy.InternalRedirect(url) DCNL DCSP else: DCNL DCSP  DCSP raise cherrypy.HTTPRedirect(url)
def trailing_slash(missing=True, extra=False, status=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP pi = request.path_info DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('is_index: DCSP %r, DCSP missing: DCSP %r, DCSP extra: DCSP %r, DCSP path_info: DCSP %r' % (request.is_index, missing, extra, pi)), 'TOOLS.TRAILING_SLASH') DCNL DCSP if (request.is_index is True): DCNL DCSP  DCSP if missing: DCNL DCSP  DCSP  DCSP if (not pi.endswith('/')): DCNL DCSP  DCSP  DCSP  DCSP new_url = cherrypy.url((pi + '/'), request.query_string) DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect(new_url, status=(status or 301)) DCNL DCSP elif (request.is_index is False): DCNL DCSP  DCSP if extra: DCNL DCSP  DCSP  DCSP if (pi.endswith('/') and (pi != '/')): DCNL DCSP  DCSP  DCSP  DCSP new_url = cherrypy.url(pi[:(-1)], request.query_string) DCNL DCSP  DCSP  DCSP  DCSP raise cherrypy.HTTPRedirect(new_url, status=(status or 301))
def flatten(debug=False): DCNL  DCSP import types DCNL DCSP def flattener(input): DCNL DCSP  DCSP numchunks = 0 DCNL DCSP  DCSP for x in input: DCNL DCSP  DCSP  DCSP if (not isinstance(x, types.GeneratorType)): DCNL DCSP  DCSP  DCSP  DCSP numchunks += 1 DCNL DCSP  DCSP  DCSP  DCSP (yield x) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for y in flattener(x): DCNL DCSP  DCSP  DCSP  DCSP  DCSP numchunks += 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP (yield y) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Flattened DCSP %d DCSP chunks' % numchunks), 'TOOLS.FLATTEN') DCNL DCSP response = cherrypy.serving.response DCNL DCSP response.body = flattener(response.body)
def accept(media=None, debug=False): DCNL  DCSP if (not media): DCNL DCSP  DCSP return DCNL DCSP if isinstance(media, basestring): DCNL DCSP  DCSP media = [media] DCNL DCSP request = cherrypy.serving.request DCNL DCSP ranges = request.headers.elements('Accept') DCNL DCSP if (not ranges): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('No DCSP Accept DCSP header DCSP elements', 'TOOLS.ACCEPT') DCNL DCSP  DCSP return media[0] DCNL DCSP else: DCNL DCSP  DCSP for element in ranges: DCNL DCSP  DCSP  DCSP if (element.qvalue > 0): DCNL DCSP  DCSP  DCSP  DCSP if (element.value == '*/*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log('Match DCSP due DCSP to DCSP */*', 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP return media[0] DCNL DCSP  DCSP  DCSP  DCSP elif element.value.endswith('/*'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP mtype = element.value[:(-1)] DCNL DCSP  DCSP  DCSP  DCSP  DCSP for m in media: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if m.startswith(mtype): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Match DCSP due DCSP to DCSP %s' % element.value), 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return m DCNL DCSP  DCSP  DCSP  DCSP elif (element.value in media): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP cherrypy.log(('Match DCSP due DCSP to DCSP %s' % element.value), 'TOOLS.ACCEPT') DCNL DCSP  DCSP  DCSP  DCSP  DCSP return element.value DCNL DCSP ah = request.headers.get('Accept') DCNL DCSP if (ah is None): DCNL DCSP  DCSP msg = 'Your DCSP client DCSP did DCSP not DCSP send DCSP an DCSP Accept DCSP header.' DCNL DCSP else: DCNL DCSP  DCSP msg = ('Your DCSP client DCSP sent DCSP this DCSP Accept DCSP header: DCSP %s.' % ah) DCNL DCSP msg += (' DCSP But DCSP this DCSP resource DCSP only DCSP emits DCSP these DCSP media DCSP types: DCSP %s.' % ', DCSP '.join(media)) DCNL DCSP raise cherrypy.HTTPError(406, msg)
def autovary(ignore=None, debug=False): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP req_h = request.headers DCNL DCSP request.headers = MonitoredHeaderMap() DCNL DCSP request.headers.update(req_h) DCNL DCSP if (ignore is None): DCNL DCSP  DCSP ignore = set(['Content-Disposition', 'Content-Length', 'Content-Type']) DCNL DCSP def set_response_header(): DCNL DCSP  DCSP resp_h = cherrypy.serving.response.headers DCNL DCSP  DCSP v = set([e.value for e in resp_h.elements('Vary')]) DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Accessed DCSP headers: DCSP %s' % request.headers.accessed_headers), 'TOOLS.AUTOVARY') DCNL DCSP  DCSP v = v.union(request.headers.accessed_headers) DCNL DCSP  DCSP v = v.difference(ignore) DCNL DCSP  DCSP v = list(v) DCNL DCSP  DCSP v.sort() DCNL DCSP  DCSP resp_h['Vary'] = ', DCSP '.join(v) DCNL DCSP request.hooks.attach('before_finalize', set_response_header, 95)
def urljoin(*atoms): DCNL  DCSP url = '/'.join([x for x in atoms if x]) DCNL DCSP while ('//' in url): DCNL DCSP  DCSP url = url.replace('//', '/') DCNL DCSP return (url or '/')
def urljoin_bytes(*atoms): DCNL  DCSP url = ntob('/').join([x for x in atoms if x]) DCNL DCSP while (ntob('//') in url): DCNL DCSP  DCSP url = url.replace(ntob('//'), ntob('/')) DCNL DCSP return (url or ntob('/'))
def protocol_from_http(protocol_str): DCNL  DCSP return (int(protocol_str[5]), int(protocol_str[7]))
def get_ranges(headervalue, content_length): DCNL  DCSP if (not headervalue): DCNL DCSP  DCSP return None DCNL DCSP result = [] DCNL DCSP (bytesunit, byteranges) = headervalue.split('=', 1) DCNL DCSP for brange in byteranges.split(','): DCNL DCSP  DCSP (start, stop) = [x.strip() for x in brange.split('-', 1)] DCNL DCSP  DCSP if start: DCNL DCSP  DCSP  DCSP if (not stop): DCNL DCSP  DCSP  DCSP  DCSP stop = (content_length - 1) DCNL DCSP  DCSP  DCSP (start, stop) = (int(start), int(stop)) DCNL DCSP  DCSP  DCSP if (start >= content_length): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP if (stop < start): DCNL DCSP  DCSP  DCSP  DCSP return None DCNL DCSP  DCSP  DCSP result.append((start, (stop + 1))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not stop): DCNL DCSP  DCSP  DCSP  DCSP return None DCNL DCSP  DCSP  DCSP result.append(((content_length - int(stop)), content_length)) DCNL DCSP return result
def header_elements(fieldname, fieldvalue): DCNL  DCSP if (not fieldvalue): DCNL DCSP  DCSP return [] DCNL DCSP result = [] DCNL DCSP for element in fieldvalue.split(','): DCNL DCSP  DCSP if (fieldname.startswith('Accept') or (fieldname == 'TE')): DCNL DCSP  DCSP  DCSP hv = AcceptElement.from_str(element) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP hv = HeaderElement.from_str(element) DCNL DCSP  DCSP result.append(hv) DCNL DCSP return list(reversed(sorted(result)))
def decode_TEXT(value): DCNL  DCSP try: DCNL DCSP  DCSP from email.header import decode_header DCNL DCSP except ImportError: DCNL DCSP  DCSP from email.Header import decode_header DCNL DCSP atoms = decode_header(value) DCNL DCSP decodedvalue = '' DCNL DCSP for (atom, charset) in atoms: DCNL DCSP  DCSP if (charset is not None): DCNL DCSP  DCSP  DCSP atom = atom.decode(charset) DCNL DCSP  DCSP decodedvalue += atom DCNL DCSP return decodedvalue
def valid_status(status): DCNL  DCSP if (not status): DCNL DCSP  DCSP status = 200 DCNL DCSP status = str(status) DCNL DCSP parts = status.split(' DCSP ', 1) DCNL DCSP if (len(parts) == 1): DCNL DCSP  DCSP (code,) = parts DCNL DCSP  DCSP reason = None DCNL DCSP else: DCNL DCSP  DCSP (code, reason) = parts DCNL DCSP  DCSP reason = reason.strip() DCNL DCSP try: DCNL DCSP  DCSP code = int(code) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise ValueError(('Illegal DCSP response DCSP status DCSP from DCSP server DCSP (%s DCSP is DCSP non-numeric).' % repr(code))) DCNL DCSP if ((code < 100) or (code > 599)): DCNL DCSP  DCSP raise ValueError(('Illegal DCSP response DCSP status DCSP from DCSP server DCSP (%s DCSP is DCSP out DCSP of DCSP range).' % repr(code))) DCNL DCSP if (code not in response_codes): DCNL DCSP  DCSP (default_reason, message) = ('', '') DCNL DCSP else: DCNL DCSP  DCSP (default_reason, message) = response_codes[code] DCNL DCSP if (reason is None): DCNL DCSP  DCSP reason = default_reason DCNL DCSP return (code, reason, message)
def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'): DCNL  DCSP pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')] DCNL DCSP d = {} DCNL DCSP for name_value in pairs: DCNL DCSP  DCSP if ((not name_value) and (not strict_parsing)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP nv = name_value.split('=', 1) DCNL DCSP  DCSP if (len(nv) != 2): DCNL DCSP  DCSP  DCSP if strict_parsing: DCNL DCSP  DCSP  DCSP  DCSP raise ValueError(('bad DCSP query DCSP field: DCSP %r' % (name_value,))) DCNL DCSP  DCSP  DCSP if keep_blank_values: DCNL DCSP  DCSP  DCSP  DCSP nv.append('') DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP if (len(nv[1]) or keep_blank_values): DCNL DCSP  DCSP  DCSP name = unquote_qs(nv[0], encoding) DCNL DCSP  DCSP  DCSP value = unquote_qs(nv[1], encoding) DCNL DCSP  DCSP  DCSP if (name in d): DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(d[name], list)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP d[name] = [d[name]] DCNL DCSP  DCSP  DCSP  DCSP d[name].append(value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP d[name] = value DCNL DCSP return d
def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'): DCNL  DCSP if image_map_pattern.match(query_string): DCNL DCSP  DCSP pm = query_string.split(',') DCNL DCSP  DCSP pm = {'x': int(pm[0]), 'y': int(pm[1])} DCNL DCSP else: DCNL DCSP  DCSP pm = _parse_qs(query_string, keep_blank_values, encoding=encoding) DCNL DCSP return pm
def check_auth(users, encrypt=None, realm=None): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if ('authorization' in request.headers): DCNL DCSP  DCSP ah = httpauth.parseAuthorization(request.headers['authorization']) DCNL DCSP  DCSP if (ah is None): DCNL DCSP  DCSP  DCSP raise cherrypy.HTTPError(400, 'Bad DCSP Request') DCNL DCSP  DCSP if (not encrypt): DCNL DCSP  DCSP  DCSP encrypt = httpauth.DIGEST_AUTH_ENCODERS[httpauth.MD5] DCNL DCSP  DCSP if hasattr(users, '__call__'): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP users = users() DCNL DCSP  DCSP  DCSP  DCSP if (not isinstance(users, dict)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise ValueError('Authentication DCSP users DCSP must DCSP be DCSP a DCSP dictionary') DCNL DCSP  DCSP  DCSP  DCSP password = users.get(ah['username'], None) DCNL DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP password = users(ah['username']) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (not isinstance(users, dict)): DCNL DCSP  DCSP  DCSP  DCSP raise ValueError('Authentication DCSP users DCSP must DCSP be DCSP a DCSP dictionary') DCNL DCSP  DCSP  DCSP password = users.get(ah['username'], None) DCNL DCSP  DCSP if httpauth.checkResponse(ah, password, method=request.method, encrypt=encrypt, realm=realm): DCNL DCSP  DCSP  DCSP request.login = ah['username'] DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP request.login = False DCNL DCSP return False
def basic_auth(realm, users, encrypt=None, debug=False): DCNL  DCSP if check_auth(users, encrypt): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Auth DCSP successful', 'TOOLS.BASIC_AUTH') DCNL DCSP  DCSP return DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = httpauth.basicAuth(realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def digest_auth(realm, users, debug=False): DCNL  DCSP if check_auth(users, realm=realm): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log('Auth DCSP successful', 'TOOLS.DIGEST_AUTH') DCNL DCSP  DCSP return DCNL DCSP cherrypy.serving.response.headers['www-authenticate'] = httpauth.digestAuth(realm) DCNL DCSP raise cherrypy.HTTPError(401, 'You DCSP are DCSP not DCSP authorized DCSP to DCSP access DCSP that DCSP resource')
def json_processor(entity): DCNL  DCSP if (not entity.headers.get(ntou('Content-Length'), ntou(''))): DCNL DCSP  DCSP raise cherrypy.HTTPError(411) DCNL DCSP body = entity.fp.read() DCNL DCSP try: DCNL DCSP  DCSP cherrypy.serving.request.json = json_decode(body.decode('utf-8')) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise cherrypy.HTTPError(400, 'Invalid DCSP JSON DCSP document')
def json_in(content_type=[ntou('application/json'), ntou('text/javascript')], force=True, debug=False, processor=json_processor): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if isinstance(content_type, basestring): DCNL DCSP  DCSP content_type = [content_type] DCNL DCSP if force: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Removing DCSP body DCSP processors DCSP %s' % repr(request.body.processors.keys())), 'TOOLS.JSON_IN') DCNL DCSP  DCSP request.body.processors.clear() DCNL DCSP  DCSP request.body.default_proc = cherrypy.HTTPError(415, ('Expected DCSP an DCSP entity DCSP of DCSP content DCSP type DCSP %s' % ', DCSP '.join(content_type))) DCNL DCSP for ct in content_type: DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Adding DCSP body DCSP processor DCSP for DCSP %s' % ct), 'TOOLS.JSON_IN') DCNL DCSP  DCSP request.body.processors[ct] = processor
def json_out(content_type='application/json', debug=False, handler=json_handler): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if debug: DCNL DCSP  DCSP cherrypy.log(('Replacing DCSP %s DCSP with DCSP JSON DCSP handler' % request.handler), 'TOOLS.JSON_OUT') DCNL DCSP request._json_inner_handler = request.handler DCNL DCSP request.handler = handler DCNL DCSP if (content_type is not None): DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('Setting DCSP Content-Type DCSP to DCSP %s' % content_type), 'TOOLS.JSON_OUT') DCNL DCSP  DCSP cherrypy.serving.response.headers['Content-Type'] = content_type
def save(): DCNL  DCSP if (not hasattr(cherrypy.serving, 'session')): DCNL DCSP  DCSP return DCNL DCSP request = cherrypy.serving.request DCNL DCSP response = cherrypy.serving.response DCNL DCSP if hasattr(request, '_sessionsaved'): DCNL DCSP  DCSP return DCNL DCSP request._sessionsaved = True DCNL DCSP if response.stream: DCNL DCSP  DCSP request.hooks.attach('on_end_request', cherrypy.session.save) DCNL DCSP else: DCNL DCSP  DCSP if isinstance(response.body, types.GeneratorType): DCNL DCSP  DCSP  DCSP response.collapse_body() DCNL DCSP  DCSP cherrypy.session.save()
def close(): DCNL  DCSP sess = getattr(cherrypy.serving, 'session', None) DCNL DCSP if getattr(sess, 'locked', False): DCNL DCSP  DCSP sess.release_lock()
def init(storage_type='ram', path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, clean_freq=5, persistent=True, httponly=False, debug=False, **kwargs): DCNL  DCSP request = cherrypy.serving.request DCNL DCSP if hasattr(request, '_session_init_flag'): DCNL DCSP  DCSP return DCNL DCSP request._session_init_flag = True DCNL DCSP id = None DCNL DCSP if (name in request.cookie): DCNL DCSP  DCSP id = request.cookie[name].value DCNL DCSP  DCSP if debug: DCNL DCSP  DCSP  DCSP cherrypy.log(('ID DCSP obtained DCSP from DCSP request.cookie: DCSP %r' % id), 'TOOLS.SESSIONS') DCNL DCSP storage_class = (storage_type.title() + 'Session') DCNL DCSP storage_class = globals()[storage_class] DCNL DCSP if (not hasattr(cherrypy, 'session')): DCNL DCSP  DCSP if hasattr(storage_class, 'setup'): DCNL DCSP  DCSP  DCSP storage_class.setup(**kwargs) DCNL DCSP kwargs['timeout'] = timeout DCNL DCSP kwargs['clean_freq'] = clean_freq DCNL DCSP cherrypy.serving.session = sess = storage_class(id, **kwargs) DCNL DCSP sess.debug = debug DCNL DCSP def update_cookie(id): DCNL DCSP  DCSP 'Update DCSP the DCSP cookie DCSP every DCSP time DCSP the DCSP session DCSP id DCSP changes.' DCNL DCSP  DCSP cherrypy.serving.response.cookie[name] = id DCNL DCSP sess.id_observers.append(update_cookie) DCNL DCSP if (not hasattr(cherrypy, 'session')): DCNL DCSP  DCSP cherrypy.session = cherrypy._ThreadLocalProxy('session') DCNL DCSP if persistent: DCNL DCSP  DCSP cookie_timeout = timeout DCNL DCSP else: DCNL DCSP  DCSP cookie_timeout = None DCNL DCSP set_response_cookie(path=path, path_header=path_header, name=name, timeout=cookie_timeout, domain=domain, secure=secure, httponly=httponly)
def set_response_cookie(path=None, path_header=None, name='session_id', timeout=60, domain=None, secure=False, httponly=False): DCNL  DCSP cookie = cherrypy.serving.response.cookie DCNL DCSP cookie[name] = cherrypy.serving.session.id DCNL DCSP cookie[name]['path'] = (path or cherrypy.serving.request.headers.get(path_header) or '/') DCNL DCSP if timeout: DCNL DCSP  DCSP e = (time.time() + (timeout * 60)) DCNL DCSP  DCSP cookie[name]['expires'] = httputil.HTTPDate(e) DCNL DCSP if (domain is not None): DCNL DCSP  DCSP cookie[name]['domain'] = domain DCNL DCSP if secure: DCNL DCSP  DCSP cookie[name]['secure'] = 1 DCNL DCSP if httponly: DCNL DCSP  DCSP if (not cookie[name].isReservedKey('httponly')): DCNL DCSP  DCSP  DCSP raise ValueError('The DCSP httponly DCSP cookie DCSP token DCSP is DCSP not DCSP supported.') DCNL DCSP  DCSP cookie[name]['httponly'] = 1
def expire(): DCNL  DCSP name = cherrypy.serving.request.config.get('tools.sessions.name', 'session_id') DCNL DCSP one_year = (((60 * 60) * 24) * 365) DCNL DCSP e = (time.time() - one_year) DCNL DCSP cherrypy.serving.response.cookie[name]['expires'] = httputil.HTTPDate(e)
def downgrade_wsgi_ux_to_1x(environ): DCNL  DCSP env1x = {} DCNL DCSP url_encoding = environ[ntou('wsgi.url_encoding')] DCNL DCSP for (k, v) in list(environ.items()): DCNL DCSP  DCSP if (k in [ntou('PATH_INFO'), ntou('SCRIPT_NAME'), ntou('QUERY_STRING')]): DCNL DCSP  DCSP  DCSP v = v.encode(url_encoding) DCNL DCSP  DCSP elif isinstance(v, unicodestr): DCNL DCSP  DCSP  DCSP v = v.encode('ISO-8859-1') DCNL DCSP  DCSP env1x[k.encode('ISO-8859-1')] = v DCNL DCSP return env1x
def quickstart(root=None, script_name='', config=None): DCNL  DCSP if config: DCNL DCSP  DCSP _global_conf_alias.update(config) DCNL DCSP tree.mount(root, script_name, config) DCNL DCSP if hasattr(engine, 'signal_handler'): DCNL DCSP  DCSP engine.signal_handler.subscribe() DCNL DCSP if hasattr(engine, 'console_control_handler'): DCNL DCSP  DCSP engine.console_control_handler.subscribe() DCNL DCSP engine.start() DCNL DCSP engine.block()
def _cherrypy_pydoc_resolve(thing, forceload=0): DCNL  DCSP if isinstance(thing, _ThreadLocalProxy): DCNL DCSP  DCSP thing = getattr(serving, thing.__attrname__) DCNL DCSP return _pydoc._builtin_resolve(thing, forceload)
def expose(func=None, alias=None): DCNL  DCSP def expose_(func): DCNL DCSP  DCSP func.exposed = True DCNL DCSP  DCSP if (alias is not None): DCNL DCSP  DCSP  DCSP if isinstance(alias, basestring): DCNL DCSP  DCSP  DCSP  DCSP parents[alias.replace('.', '_')] = func DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for a in alias: DCNL DCSP  DCSP  DCSP  DCSP  DCSP parents[a.replace('.', '_')] = func DCNL DCSP  DCSP return func DCNL DCSP import sys, types DCNL DCSP if isinstance(func, (types.FunctionType, types.MethodType)): DCNL DCSP  DCSP if (alias is None): DCNL DCSP  DCSP  DCSP func.exposed = True DCNL DCSP  DCSP  DCSP return func DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_(func) DCNL DCSP elif (func is None): DCNL DCSP  DCSP if (alias is None): DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_ DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP  DCSP return expose_ DCNL DCSP else: DCNL DCSP  DCSP parents = sys._getframe(1).f_locals DCNL DCSP  DCSP alias = func DCNL DCSP  DCSP return expose_
def popargs(*args, **kwargs): DCNL  DCSP handler = None DCNL DCSP handler_call = False DCNL DCSP for (k, v) in kwargs.items(): DCNL DCSP  DCSP if (k == 'handler'): DCNL DCSP  DCSP  DCSP handler = v DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise TypeError("cherrypy.popargs() DCSP got DCSP an DCSP unexpected DCSP keyword DCSP argument DCSP '{0}'".format(k)) DCNL DCSP import inspect DCNL DCSP if ((handler is not None) and (hasattr(handler, '__call__') or inspect.isclass(handler))): DCNL DCSP  DCSP handler_call = True DCNL DCSP def decorated(cls_or_self=None, vpath=None): DCNL DCSP  DCSP if inspect.isclass(cls_or_self): DCNL DCSP  DCSP  DCSP cls = cls_or_self DCNL DCSP  DCSP  DCSP setattr(cls, dispatch.Dispatcher.dispatch_method_name, decorated) DCNL DCSP  DCSP  DCSP return cls DCNL DCSP  DCSP self = cls_or_self DCNL DCSP  DCSP parms = {} DCNL DCSP  DCSP for arg in args: DCNL DCSP  DCSP  DCSP if (not vpath): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP parms[arg] = vpath.pop(0) DCNL DCSP  DCSP if (handler is not None): DCNL DCSP  DCSP  DCSP if handler_call: DCNL DCSP  DCSP  DCSP  DCSP return handler(**parms) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP request.params.update(parms) DCNL DCSP  DCSP  DCSP  DCSP return handler DCNL DCSP  DCSP request.params.update(parms) DCNL DCSP  DCSP if vpath: DCNL DCSP  DCSP  DCSP return getattr(self, vpath.pop(0), None) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return self DCNL DCSP return decorated
def url(path='', qs='', script_name=None, base=None, relative=None): DCNL  DCSP if isinstance(qs, (tuple, list, dict)): DCNL DCSP  DCSP qs = _urlencode(qs) DCNL DCSP if qs: DCNL DCSP  DCSP qs = ('?' + qs) DCNL DCSP if request.app: DCNL DCSP  DCSP if (not path.startswith('/')): DCNL DCSP  DCSP  DCSP pi = request.path_info DCNL DCSP  DCSP  DCSP if (request.is_index is True): DCNL DCSP  DCSP  DCSP  DCSP if (not pi.endswith('/')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pi = (pi + '/') DCNL DCSP  DCSP  DCSP elif (request.is_index is False): DCNL DCSP  DCSP  DCSP  DCSP if (pi.endswith('/') and (pi != '/')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pi = pi[:(-1)] DCNL DCSP  DCSP  DCSP if (path == ''): DCNL DCSP  DCSP  DCSP  DCSP path = pi DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP path = _urljoin(pi, path) DCNL DCSP  DCSP if (script_name is None): DCNL DCSP  DCSP  DCSP script_name = request.script_name DCNL DCSP  DCSP if (base is None): DCNL DCSP  DCSP  DCSP base = request.base DCNL DCSP  DCSP newurl = (((base + script_name) + path) + qs) DCNL DCSP else: DCNL DCSP  DCSP if (base is None): DCNL DCSP  DCSP  DCSP base = server.base() DCNL DCSP  DCSP path = ((script_name or '') + path) DCNL DCSP  DCSP newurl = ((base + path) + qs) DCNL DCSP if ('./' in newurl): DCNL DCSP  DCSP atoms = [] DCNL DCSP  DCSP for atom in newurl.split('/'): DCNL DCSP  DCSP  DCSP if (atom == '.'): DCNL DCSP  DCSP  DCSP  DCSP pass DCNL DCSP  DCSP  DCSP elif (atom == '..'): DCNL DCSP  DCSP  DCSP  DCSP atoms.pop() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP atoms.append(atom) DCNL DCSP  DCSP newurl = '/'.join(atoms) DCNL DCSP if (relative is None): DCNL DCSP  DCSP relative = getattr(request.app, 'relative_urls', False) DCNL DCSP if (relative == 'server'): DCNL DCSP  DCSP newurl = ('/' + '/'.join(newurl.split('/', 3)[3:])) DCNL DCSP elif relative: DCNL DCSP  DCSP old = url(relative=False).split('/')[:(-1)] DCNL DCSP  DCSP new = newurl.split('/') DCNL DCSP  DCSP while (old and new): DCNL DCSP  DCSP  DCSP (a, b) = (old[0], new[0]) DCNL DCSP  DCSP  DCSP if (a != b): DCNL DCSP  DCSP  DCSP  DCSP break DCNL DCSP  DCSP  DCSP old.pop(0) DCNL DCSP  DCSP  DCSP new.pop(0) DCNL DCSP  DCSP new = ((['..'] * len(old)) + new) DCNL DCSP  DCSP newurl = '/'.join(new) DCNL DCSP return newurl
def base64_decode(n, encoding='ISO-8859-1'): DCNL  DCSP if isinstance(n, unicodestr): DCNL DCSP  DCSP b = n.encode(encoding) DCNL DCSP else: DCNL DCSP  DCSP b = n DCNL DCSP b = _base64_decodebytes(b) DCNL DCSP if (nativestr is unicodestr): DCNL DCSP  DCSP return b.decode(encoding) DCNL DCSP else: DCNL DCSP  DCSP return b
def merge(base, other): DCNL  DCSP if isinstance(other, basestring): DCNL DCSP  DCSP cherrypy.engine.autoreload.files.add(other) DCNL DCSP for (section, value_map) in reprconf.as_dict(other).items(): DCNL DCSP  DCSP if (not isinstance(value_map, dict)): DCNL DCSP  DCSP  DCSP raise ValueError("Application DCSP config DCSP must DCSP include DCSP section DCSP headers, DCSP but DCSP the DCSP config DCSP you DCSP tried DCSP to DCSP merge DCSP doesn't DCSP have DCSP any DCSP sections. DCSP Wrap DCSP your DCSP config DCSP in DCSP another DCSP dict DCSP with DCSP paths DCSP as DCSP section DCSP headers, DCSP for DCSP example: DCSP {'/': DCSP config}.") DCNL DCSP  DCSP base.setdefault(section, {}).update(value_map)
def _server_namespace_handler(k, v): DCNL  DCSP atoms = k.split('.', 1) DCNL DCSP if (len(atoms) > 1): DCNL DCSP  DCSP if (not hasattr(cherrypy, 'servers')): DCNL DCSP  DCSP  DCSP cherrypy.servers = {} DCNL DCSP  DCSP (servername, k) = atoms DCNL DCSP  DCSP if (servername not in cherrypy.servers): DCNL DCSP  DCSP  DCSP from cherrypy import _cpserver DCNL DCSP  DCSP  DCSP cherrypy.servers[servername] = _cpserver.Server() DCNL DCSP  DCSP  DCSP cherrypy.servers[servername].subscribe() DCNL DCSP  DCSP if (k == 'on'): DCNL DCSP  DCSP  DCSP if v: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.servers[servername].subscribe() DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP cherrypy.servers[servername].unsubscribe() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP setattr(cherrypy.servers[servername], k, v) DCNL DCSP else: DCNL DCSP  DCSP setattr(cherrypy.server, k, v)
def _engine_namespace_handler(k, v): DCNL  DCSP engine = cherrypy.engine DCNL DCSP if (k == 'autoreload_on'): DCNL DCSP  DCSP if v: DCNL DCSP  DCSP  DCSP engine.autoreload.subscribe() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP engine.autoreload.unsubscribe() DCNL DCSP elif (k == 'autoreload_frequency'): DCNL DCSP  DCSP engine.autoreload.frequency = v DCNL DCSP elif (k == 'autoreload_match'): DCNL DCSP  DCSP engine.autoreload.match = v DCNL DCSP elif (k == 'reload_files'): DCNL DCSP  DCSP engine.autoreload.files = set(v) DCNL DCSP elif (k == 'deadlock_poll_freq'): DCNL DCSP  DCSP engine.timeout_monitor.frequency = v DCNL DCSP elif (k == 'SIGHUP'): DCNL DCSP  DCSP engine.listeners['SIGHUP'] = set([v]) DCNL DCSP elif (k == 'SIGTERM'): DCNL DCSP  DCSP engine.listeners['SIGTERM'] = set([v]) DCNL DCSP elif ('.' in k): DCNL DCSP  DCSP (plugin, attrname) = k.split('.', 1) DCNL DCSP  DCSP plugin = getattr(engine, plugin) DCNL DCSP  DCSP if (attrname == 'on'): DCNL DCSP  DCSP  DCSP if (v and hasattr(getattr(plugin, 'subscribe', None), '__call__')): DCNL DCSP  DCSP  DCSP  DCSP plugin.subscribe() DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP  DCSP elif ((not v) and hasattr(getattr(plugin, 'unsubscribe', None), '__call__')): DCNL DCSP  DCSP  DCSP  DCSP plugin.unsubscribe() DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP  DCSP setattr(plugin, attrname, v) DCNL DCSP else: DCNL DCSP  DCSP setattr(engine, k, v)
def _tree_namespace_handler(k, v): DCNL  DCSP if isinstance(v, dict): DCNL DCSP  DCSP for (script_name, app) in v.items(): DCNL DCSP  DCSP  DCSP cherrypy.tree.graft(app, script_name) DCNL DCSP  DCSP  DCSP cherrypy.engine.log(('Mounted: DCSP %s DCSP on DCSP %s' % (app, (script_name or '/')))) DCNL DCSP else: DCNL DCSP  DCSP cherrypy.tree.graft(v, v.script_name) DCNL DCSP  DCSP cherrypy.engine.log(('Mounted: DCSP %s DCSP on DCSP %s' % (v, (v.script_name or '/'))))
def _getargs(func): DCNL  DCSP import types DCNL DCSP if (sys.version_info >= (3, 0)): DCNL DCSP  DCSP if isinstance(func, types.MethodType): DCNL DCSP  DCSP  DCSP func = func.__func__ DCNL DCSP  DCSP co = func.__code__ DCNL DCSP else: DCNL DCSP  DCSP if isinstance(func, types.MethodType): DCNL DCSP  DCSP  DCSP func = func.im_func DCNL DCSP  DCSP co = func.func_code DCNL DCSP return co.co_varnames[:co.co_argcount]
def namedtuple(typename, field_names, verbose=False, rename=False): DCNL  DCSP if isinstance(field_names, basestring): DCNL DCSP  DCSP field_names = field_names.replace(',', ' DCSP ').split() DCNL DCSP field_names = map(str, field_names) DCNL DCSP if rename: DCNL DCSP  DCSP seen = set() DCNL DCSP  DCSP for (index, name) in enumerate(field_names): DCNL DCSP  DCSP  DCSP if ((not all(((c.isalnum() or (c == '_')) for c in name))) or _iskeyword(name) or (not name) or name[0].isdigit() or name.startswith('_') or (name in seen)): DCNL DCSP  DCSP  DCSP  DCSP field_names[index] = ('_%d' % index) DCNL DCSP  DCSP  DCSP seen.add(name) DCNL DCSP for name in ([typename] + field_names): DCNL DCSP  DCSP if (not all(((c.isalnum() or (c == '_')) for c in name))): DCNL DCSP  DCSP  DCSP raise ValueError(('Type DCSP names DCSP and DCSP field DCSP names DCSP can DCSP only DCSP contain DCSP alphanumeric DCSP characters DCSP and DCSP underscores: DCSP %r' % name)) DCNL DCSP  DCSP if _iskeyword(name): DCNL DCSP  DCSP  DCSP raise ValueError(('Type DCSP names DCSP and DCSP field DCSP names DCSP cannot DCSP be DCSP a DCSP keyword: DCSP %r' % name)) DCNL DCSP  DCSP if name[0].isdigit(): DCNL DCSP  DCSP  DCSP raise ValueError(('Type DCSP names DCSP and DCSP field DCSP names DCSP cannot DCSP start DCSP with DCSP a DCSP number: DCSP %r' % name)) DCNL DCSP seen = set() DCNL DCSP for name in field_names: DCNL DCSP  DCSP if (name.startswith('_') and (not rename)): DCNL DCSP  DCSP  DCSP raise ValueError(('Field DCSP names DCSP cannot DCSP start DCSP with DCSP an DCSP underscore: DCSP %r' % name)) DCNL DCSP  DCSP if (name in seen): DCNL DCSP  DCSP  DCSP raise ValueError(('Encountered DCSP duplicate DCSP field DCSP name: DCSP %r' % name)) DCNL DCSP  DCSP seen.add(name) DCNL DCSP class_definition = _class_template.format(typename=typename, field_names=tuple(field_names), num_fields=len(field_names), arg_list=repr(tuple(field_names)).replace("'", '')[1:(-1)], repr_fmt=', DCSP '.join((_repr_template.format(name=name) for name in field_names)), field_defs='\n'.join((_field_template.format(index=index, name=name) for (index, name) in enumerate(field_names)))) DCNL DCSP if verbose: DCNL DCSP  DCSP print class_definition DCNL DCSP namespace = dict(_itemgetter=_itemgetter, __name__=('namedtuple_%s' % typename), OrderedDict=OrderedDict, _property=property, _tuple=tuple) DCNL DCSP try: DCNL DCSP  DCSP exec class_definition in namespace DCNL DCSP except SyntaxError as e: DCNL DCSP  DCSP raise SyntaxError(((e.args[0] + ':\n') + class_definition)) DCNL DCSP result = namespace[typename] DCNL DCSP try: DCNL DCSP  DCSP result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__') DCNL DCSP except (AttributeError, ValueError): DCNL DCSP  DCSP pass DCNL DCSP return result
def update_default_args(defaults, updates): DCNL  DCSP arg_name = re.compile('^-?-?\\s*=?([^\\s=]+)') DCNL DCSP defined_defaults_ = map((lambda arg: (arg_name.search(arg).group(1), arg)), defaults) DCNL DCSP defined_defaults = OrderedDict() DCNL DCSP for elm in defined_defaults_: DCNL DCSP  DCSP defined_defaults[elm[0]] = elm[1] DCNL DCSP defined_updates_ = map((lambda arg: (arg_name.search(arg).group(1), arg)), updates) DCNL DCSP defined_updates = OrderedDict() DCNL DCSP for elm in defined_updates_: DCNL DCSP  DCSP defined_updates[elm[0]] = elm[1] DCNL DCSP defined_defaults.update(defined_updates) DCNL DCSP return defined_defaults.values()
def get_size(start_path): DCNL  DCSP total_size = 0 DCNL DCSP for (dirpath, __, filenames) in os.walk(start_path): DCNL DCSP  DCSP for f in filenames: DCNL DCSP  DCSP  DCSP fp = os.path.join(dirpath, f) DCNL DCSP  DCSP  DCSP total_size += os.path.getsize(fp) DCNL DCSP return total_size
def read_pid_file(filename): DCNL  DCSP try: DCNL DCSP  DCSP (pid, port) = open(filename, 'r').readlines() DCNL DCSP  DCSP (pid, port) = (int(pid), int(port)) DCNL DCSP except ValueError: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (pid, port) = (int(open(filename, 'r').read()), None) DCNL DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP (pid, port) = (None, None) DCNL DCSP return (pid, port)
def get_pid(): DCNL  DCSP if (not os.path.isfile(PID_FILE)): DCNL DCSP  DCSP if os.path.isfile(STARTUP_LOCK): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (pid, port) = read_pid_file(STARTUP_LOCK) DCNL DCSP  DCSP  DCSP  DCSP if pid_exists(pid): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise NotRunning(STATUS_STARTING_UP) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise NotRunning(STATUS_FAILED_TO_START) DCNL DCSP  DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP  DCSP raise NotRunning(STATUS_STOPPED) DCNL DCSP  DCSP raise NotRunning(STATUS_STOPPED) DCNL DCSP try: DCNL DCSP  DCSP (pid, port) = read_pid_file(PID_FILE) DCNL DCSP except (ValueError, OSError): DCNL DCSP  DCSP raise NotRunning(STATUS_PID_FILE_INVALID) DCNL DCSP if (not pid_exists(pid)): DCNL DCSP  DCSP if os.path.isfile(STARTUP_LOCK): DCNL DCSP  DCSP  DCSP raise NotRunning(STATUS_FAILED_TO_START) DCNL DCSP  DCSP raise NotRunning(STATUS_UNCLEAN_SHUTDOWN) DCNL DCSP listen_port = (port or DEFAULT_LISTEN_PORT) DCNL DCSP conn = httplib.HTTPConnection('127.0.0.1', listen_port, timeout=3) DCNL DCSP try: DCNL DCSP  DCSP conn.request('GET', PING_URL) DCNL DCSP  DCSP response = conn.getresponse() DCNL DCSP except (timeout, socket.error): DCNL DCSP  DCSP raise NotRunning(STATUS_NOT_RESPONDING) DCNL DCSP except (httplib.HTTPException, URLError): DCNL DCSP  DCSP if os.path.isfile(STARTUP_LOCK): DCNL DCSP  DCSP  DCSP raise NotRunning(STATUS_STARTING_UP) DCNL DCSP  DCSP raise NotRunning(STATUS_UNCLEAN_SHUTDOWN) DCNL DCSP if (response.status == 404): DCNL DCSP  DCSP raise NotRunning(STATUS_UNKNOWN_INSTANCE) DCNL DCSP if (response.status != 200): DCNL DCSP  DCSP raise NotRunning(STATUS_SERVER_CONFIGURATION_ERROR) DCNL DCSP try: DCNL DCSP  DCSP pid = int(response.read()) DCNL DCSP except ValueError: DCNL DCSP  DCSP raise NotRunning(STATUS_UNKNOWN_INSTANCE) DCNL DCSP if (pid == pid): DCNL DCSP  DCSP return (pid, LISTEN_ADDRESS, listen_port) DCNL DCSP else: DCNL DCSP  DCSP raise NotRunning(STATUS_UNKNOWN_INSTANCE) DCNL DCSP raise NotRunning(STATUS_UNKNOW)
def manage(command, args=None, as_thread=False): DCNL  DCSP if (not args): DCNL DCSP  DCSP args = [] DCNL DCSP args = update_default_args(['--traceback'], args) DCNL DCSP if (not as_thread): DCNL DCSP  DCSP if PROFILE: DCNL DCSP  DCSP  DCSP profile_memory() DCNL DCSP  DCSP utility = ManagementUtility(([os.path.basename(sys.argv[0]), command] + args)) DCNL DCSP  DCSP utility.prog_name = 'kalite DCSP manage' DCNL DCSP  DCSP utility.execute() DCNL DCSP else: DCNL DCSP  DCSP get_commands() DCNL DCSP  DCSP thread = ManageThread(command, args=args, name=' DCSP '.join(([command] + args))) DCNL DCSP  DCSP thread.start() DCNL DCSP  DCSP return thread
def start(debug=False, watch=False, daemonize=True, args=[], skip_job_scheduler=False, port=None): DCNL  DCSP port = int((port or DEFAULT_LISTEN_PORT)) DCNL DCSP if (not daemonize): DCNL DCSP  DCSP sys.stderr.write("Running DCSP 'kalite DCSP start' DCSP in DCSP foreground...\n") DCNL DCSP else: DCNL DCSP  DCSP sys.stderr.write("Running DCSP 'kalite DCSP start' DCSP as DCSP daemon DCSP (system DCSP service)\n") DCNL DCSP sys.stderr.write('\nStand DCSP by DCSP while DCSP the DCSP server DCSP loads DCSP its DCSP data...\n\n') DCNL DCSP if os.path.exists(STARTUP_LOCK): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (pid, __) = read_pid_file(STARTUP_LOCK) DCNL DCSP  DCSP  DCSP if pid_exists(pid): DCNL DCSP  DCSP  DCSP  DCSP sys.stderr.write('Refusing DCSP to DCSP start: DCSP Start DCSP up DCSP lock DCSP exists: DCSP {0:s}\n'.format(STARTUP_LOCK)) DCNL DCSP  DCSP  DCSP  DCSP sys.stderr.write('Remove DCSP the DCSP file DCSP and DCSP try DCSP again.\n') DCNL DCSP  DCSP  DCSP  DCSP sys.exit(1) DCNL DCSP  DCSP except TypeError: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP os.unlink(STARTUP_LOCK) DCNL DCSP try: DCNL DCSP  DCSP if get_pid(): DCNL DCSP  DCSP  DCSP sys.stderr.write('Refusing DCSP to DCSP start: DCSP Already DCSP running\n') DCNL DCSP  DCSP  DCSP sys.stderr.write("Use DCSP 'kalite DCSP stop' DCSP to DCSP stop DCSP the DCSP instance.\n") DCNL DCSP  DCSP  DCSP sys.exit(1) DCNL DCSP except NotRunning: DCNL DCSP  DCSP pass DCNL DCSP sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) DCNL DCSP connection_error = sock.connect_ex(('127.0.0.1', port)) DCNL DCSP if (not connection_error): DCNL DCSP  DCSP sys.stderr.write('Port DCSP {0} DCSP is DCSP occupied. DCSP Please DCSP close DCSP the DCSP process DCSP that DCSP is DCSP using DCSP it.\n'.format(port)) DCNL DCSP  DCSP sys.exit(1) DCNL DCSP with open(STARTUP_LOCK, 'w') as f: DCNL DCSP  DCSP f.write(('%s\n%d' % (str(os.getpid()), port))) DCNL DCSP manage('initialize_kalite') DCNL DCSP if watch: DCNL DCSP  DCSP watchify_thread = Thread(target=start_watchify) DCNL DCSP  DCSP watchify_thread.daemon = True DCNL DCSP  DCSP watchify_thread.start() DCNL DCSP if STARTUP_LOCK: DCNL DCSP  DCSP os.unlink(STARTUP_LOCK) DCNL DCSP addresses = get_ip_addresses(include_loopback=False) DCNL DCSP print('To DCSP access DCSP KA DCSP Lite DCSP from DCSP another DCSP connected DCSP computer, DCSP try DCSP the DCSP following DCSP address(es):') DCNL DCSP for addr in addresses: DCNL DCSP  DCSP print((' DCTB http://%s:%s/' % (addr, port))) DCNL DCSP print('To DCSP access DCSP KA DCSP Lite DCSP from DCSP this DCSP machine, DCSP try DCSP the DCSP following DCSP address:') DCNL DCSP print((' DCTB http://127.0.0.1:%s/\n' % port)) DCNL DCSP for addr in get_urls_proxy(output_pipe=sys.stdout): DCNL DCSP  DCSP sys.stdout.write(' DCTB {}\n'.format(addr)) DCNL DCSP if daemonize: DCNL DCSP  DCSP from django.utils.daemonize import become_daemon DCNL DCSP  DCSP kwargs = {} DCNL DCSP  DCSP open(SERVER_LOG, 'w').truncate() DCNL DCSP  DCSP print('Going DCSP to DCSP daemon DCSP mode, DCSP logging DCSP to DCSP {0}'.format(SERVER_LOG)) DCNL DCSP  DCSP kwargs['out_log'] = SERVER_LOG DCNL DCSP  DCSP kwargs['err_log'] = SERVER_LOG DCNL DCSP  DCSP become_daemon(**kwargs) DCNL DCSP  DCSP with open(PID_FILE, 'w') as f: DCNL DCSP  DCSP  DCSP f.write(('%d\n%d' % (os.getpid(), port))) DCNL DCSP cron_thread = None DCNL DCSP if (not skip_job_scheduler): DCNL DCSP  DCSP cron_thread = manage('cronserver_blocking', args=[], as_thread=True) DCNL DCSP cherrypy.config.update({'server.socket_host': LISTEN_ADDRESS, 'server.socket_port': port, 'server.thread_pool': 18, 'checker.on': False}) DCNL DCSP DjangoAppPlugin(cherrypy.engine).subscribe() DCNL DCSP if (not watch): DCNL DCSP  DCSP cherrypy.engine.autoreload.unsubscribe() DCNL DCSP try: DCNL DCSP  DCSP cherrypy.quickstart() DCNL DCSP except KeyboardInterrupt: DCNL DCSP  DCSP pass DCNL DCSP except SystemExit: DCNL DCSP  DCSP print('KA DCSP Lite DCSP caught DCSP system DCSP exit DCSP signal, DCSP quitting.') DCNL DCSP print('FINISHED DCSP serving DCSP HTTP') DCNL DCSP if cron_thread: DCNL DCSP  DCSP print('Asking DCSP KA DCSP Lite DCSP job DCSP scheduler DCSP to DCSP terminate...') DCNL DCSP  DCSP from fle_utils.chronograph.management.commands import cronserver_blocking DCNL DCSP  DCSP cronserver_blocking.shutdown = True DCNL DCSP  DCSP cron_thread.join() DCNL DCSP  DCSP print('Job DCSP scheduler DCSP terminated.')
def stop(args=[], sys_exit=True): DCNL  DCSP try: DCNL DCSP  DCSP kill_pid(get_pid()[0]) DCNL DCSP  DCSP os.unlink(PID_FILE) DCNL DCSP except NotRunning as e: DCNL DCSP  DCSP sys.stderr.write('Already DCSP stopped. DCSP Status DCSP was: DCSP {000:s}\n'.format(status.codes[e.status_code])) DCNL DCSP  DCSP killed_with_force = False DCNL DCSP  DCSP if (e.status_code == STATUS_NOT_RESPONDING): DCNL DCSP  DCSP  DCSP sys.stderr.write('Not DCSP responding, DCSP killing DCSP with DCSP force\n') DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP (pid, __) = read_pid_file(PID_FILE) DCNL DCSP  DCSP  DCSP  DCSP kill_pid(pid) DCNL DCSP  DCSP  DCSP  DCSP killed_with_force = True DCNL DCSP  DCSP  DCSP except ValueError: DCNL DCSP  DCSP  DCSP  DCSP sys.stderr.write('Could DCSP not DCSP find DCSP PID DCSP in DCSP .pid DCSP file\n') DCNL DCSP  DCSP  DCSP except OSError: DCNL DCSP  DCSP  DCSP  DCSP sys.stderr.write('Could DCSP not DCSP read DCSP .pid DCSP file\n') DCNL DCSP  DCSP  DCSP if (not killed_with_force): DCNL DCSP  DCSP  DCSP  DCSP if sys_exit: DCNL DCSP  DCSP  DCSP  DCSP  DCSP sys.exit((-1)) DCNL DCSP  DCSP  DCSP  DCSP return DCNL DCSP sys.stderr.write('kalite DCSP stopped\n') DCNL DCSP if sys_exit: DCNL DCSP  DCSP sys.exit(0)
def get_urls(): DCNL  DCSP try: DCNL DCSP  DCSP (__, __, port) = get_pid() DCNL DCSP  DCSP urls = [] DCNL DCSP  DCSP for addr in get_ip_addresses(): DCNL DCSP  DCSP  DCSP urls.append('http://{}:{}/'.format(addr, port)) DCNL DCSP  DCSP return (STATUS_RUNNING, urls) DCNL DCSP except NotRunning as e: DCNL DCSP  DCSP return (e.status_code, [])
def get_urls_proxy(output_pipe=sys.stderr): DCNL  DCSP try: DCNL DCSP  DCSP from django.conf import settings DCNL DCSP except Exception as e: DCNL DCSP  DCSP output_pipe.write((('\n\nWarning, DCSP exception DCSP fetching DCSP KA DCSP Lite DCSP settings DCSP module:\n\n' + str(e)) + '\n\n')) DCNL DCSP  DCSP return DCNL DCSP if (hasattr(settings, 'USER_FACING_PORT') and settings.USER_FACING_PORT and hasattr(settings, 'HTTP_PORT') and (not (settings.USER_FACING_PORT == settings.HTTP_PORT))): DCNL DCSP  DCSP output_pipe.write('\nKA DCSP Lite DCSP configured DCSP behind DCSP another DCSP server, DCSP primary DCSP addresses DCSP are:\n\n') DCNL DCSP  DCSP for addr in get_ip_addresses(): DCNL DCSP  DCSP  DCSP (yield 'http://{}:{}/'.format(addr, settings.USER_FACING_PORT))
def status(): DCNL  DCSP (status_code, urls) = get_urls() DCNL DCSP if (status_code == STATUS_RUNNING): DCNL DCSP  DCSP sys.stderr.write('{msg:s} DCSP (0)\n'.format(msg=status.codes[0])) DCNL DCSP  DCSP sys.stderr.write('KA DCSP Lite DCSP running DCSP on:\n\n') DCNL DCSP  DCSP for addr in urls: DCNL DCSP  DCSP  DCSP sys.stderr.write(' DCTB {}\n'.format(addr)) DCNL DCSP  DCSP for addr in get_urls_proxy(): DCNL DCSP  DCSP  DCSP sys.stderr.write(' DCTB {}\n'.format(addr)) DCNL DCSP  DCSP return STATUS_RUNNING DCNL DCSP else: DCNL DCSP  DCSP verbose_status = status.codes[status_code] DCNL DCSP  DCSP sys.stderr.write('{msg:s} DCSP ({code:d})\n'.format(code=status_code, msg=verbose_status)) DCNL DCSP  DCSP return status_code
def diagnose(): DCNL  DCSP print('') DCNL DCSP print('KA DCSP Lite DCSP diagnostics') DCNL DCSP print('') DCNL DCSP print('Calculating DCSP diagnostics...') DCNL DCSP sys.stdout.flush() DCNL DCSP print('') DCNL DCSP diagnostics = [] DCNL DCSP diag = (lambda x, y: diagnostics.append((x, y))) DCNL DCSP diag('KA DCSP Lite DCSP version', kalite.__version__) DCNL DCSP diag('python', sys.version) DCNL DCSP diag('platform', platform.platform()) DCNL DCSP (status_code, urls) = get_urls() DCNL DCSP for addr in urls: DCNL DCSP  DCSP diag('server DCSP address', addr) DCNL DCSP for addr in get_urls_proxy(): DCNL DCSP  DCSP diag('server DCSP proxy', addr) DCNL DCSP diag('server DCSP status', status.codes[status_code]) DCNL DCSP settings_imported = True DCNL DCSP try: DCNL DCSP  DCSP from django.conf import settings DCNL DCSP  DCSP from django.template.defaultfilters import filesizeformat DCNL DCSP except: DCNL DCSP  DCSP settings_imported = False DCNL DCSP  DCSP diag('Settings DCSP failure', traceback.format_exc()) DCNL DCSP if settings_imported: DCNL DCSP  DCSP diag('installed DCSP in', os.path.dirname(kalite.__file__)) DCNL DCSP  DCSP diag('content DCSP root', settings.CONTENT_ROOT) DCNL DCSP  DCSP diag('content DCSP size', filesizeformat(get_size(settings.CONTENT_ROOT))) DCNL DCSP  DCSP diag('user DCSP database', settings.DATABASES['default']['NAME']) DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP from securesync.models import Device DCNL DCSP  DCSP  DCSP device = Device.get_own_device() DCNL DCSP  DCSP  DCSP sync_sessions = device.client_sessions.all() DCNL DCSP  DCSP  DCSP zone = device.get_zone() DCNL DCSP  DCSP  DCSP diag('device DCSP name', str(device.name)) DCNL DCSP  DCSP  DCSP diag('device DCSP ID', str(device.id)) DCNL DCSP  DCSP  DCSP diag('device DCSP registered', str(device.is_registered())) DCNL DCSP  DCSP  DCSP diag('synced', str((sync_sessions.latest('timestamp').timestamp if sync_sessions.exists() else 'Never'))) DCNL DCSP  DCSP  DCSP diag('sync DCSP result', (('OK' if (sync_sessions.latest('timestamp').errors == 0) else 'Error') if sync_sessions.exists() else '-')) DCNL DCSP  DCSP  DCSP diag('zone DCSP ID', (str(zone.id) if zone else 'Unset')) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP diag('Device DCSP failure', traceback.format_exc()) DCNL DCSP for (k, v) in diagnostics: DCNL DCSP  DCSP values = str(v).split('\n') DCNL DCSP  DCSP values = '\n'.join(([values[0]] + map((lambda x: ((' DCSP ' * 22) + x)), values[1:]))) DCNL DCSP  DCSP print((k.upper() + ': DCSP ').ljust(21), values)
def url(): DCNL  DCSP try: DCNL DCSP  DCSP get_pid() DCNL DCSP  DCSP sys.stderr.write() DCNL DCSP  DCSP status_code = 0 DCNL DCSP except NotRunning as e: DCNL DCSP  DCSP status_code = e.status_code DCNL DCSP verbose_status = status.codes[status_code] DCNL DCSP sys.stderr.write('{msg:s} DCSP ({code:d})\n'.format(code=status_code, msg=verbose_status)) DCNL DCSP return status_code
def docopt(doc, argv=None, help=True, version=None, options_first=False): DCNL  DCSP if (argv is None): DCNL DCSP  DCSP argv = sys.argv[1:] DCNL DCSP DocoptExit.usage = printable_usage(doc) DCNL DCSP options = parse_defaults(doc) DCNL DCSP pattern = parse_pattern(formal_usage(DocoptExit.usage), options) DCNL DCSP argv = parse_argv(TokenStream(argv, DocoptExit), list(options), options_first) DCNL DCSP pattern_options = set(pattern.flat(Option)) DCNL DCSP for ao in pattern.flat(AnyOptions): DCNL DCSP  DCSP doc_options = parse_defaults(doc) DCNL DCSP  DCSP ao.children = list((set(doc_options) - pattern_options)) DCNL DCSP extras(help, version, argv, doc) DCNL DCSP (__matched, __left, collected) = pattern.fix().match(argv) DCNL DCSP if collected: DCNL DCSP  DCSP result = Dict(((a.name, a.value) for a in (pattern.flat() + collected))) DCNL DCSP  DCSP collected_django_options = len(result.get('DJANGO_OPTIONS', [])) DCNL DCSP  DCSP result['DJANGO_OPTIONS'] = (result.get('DJANGO_OPTIONS', []) + sys.argv[(len(collected) + (collected_django_options or 1)):]) DCNL DCSP  DCSP if any(map((lambda x: (x.name in map((lambda x: x.split('=')[0]), result['DJANGO_OPTIONS']))), collected)): DCNL DCSP  DCSP  DCSP sys.stderr.write('Cannot DCSP mix DCSP django DCSP manage DCSP command DCSP options DCSP with DCSP kalite DCSP options. DCSP Always DCSP put DCSP django DCSP management DCSP options DCSP last.\n\n') DCNL DCSP  DCSP  DCSP raise DocoptExit() DCNL DCSP  DCSP return result DCNL DCSP raise DocoptExit()
def _parse_focus(arg_str): DCNL  DCSP split_str = arg_str.split('|', 1) DCNL DCSP if (len(split_str) == 1): DCNL DCSP  DCSP return {'id': split_str[0].rstrip(), 'annotation': ''} DCNL DCSP else: DCNL DCSP  DCSP return {'id': split_str[0].rstrip(), 'annotation': split_str[1].lstrip()}
def _parse_command(command): DCNL  DCSP command_args = command.split() DCNL DCSP if (not command_args): DCNL DCSP  DCSP return None DCNL DCSP else: DCNL DCSP  DCSP selector = command_args[0] DCNL DCSP  DCSP action = command_args[1] DCNL DCSP  DCSP options = command_args[2:] DCNL DCSP if (action not in ('click', 'send_keys', 'submit', '')): DCNL DCSP  DCSP raise ActionError(action) DCNL DCSP if ((action == 'click') or (action == 'submit')): DCNL DCSP  DCSP if options: DCNL DCSP  DCSP  DCSP raise OptionError(("The DCSP action DCSP '%s' DCSP must DCSP not DCSP contain DCSP any DCSP arguments DCSP whereas DCSP supplied DCSP arguments: DCSP '%s'." % (action, repr(options)))) DCNL DCSP return {'selector': selector, 'action': action, 'options': options}
def _parse_login(username, password, submit=''): DCNL  DCSP submit_bool = (True if (submit == 'submit') else False) DCNL DCSP args = {'username': username, 'password': password, 'submit': submit_bool} DCNL DCSP return {'runhandler': '_login_handler', 'args': args}
def _parse_nav_steps(arg_str): DCNL  DCSP COMMAND_ALIASES = [('LOGIN', _parse_login)] DCNL DCSP if (not arg_str): DCNL DCSP  DCSP arg_str = '' DCNL DCSP words = arg_str.split(' DCSP ') DCNL DCSP for (name, callback) in COMMAND_ALIASES: DCNL DCSP  DCSP if (words[0] == name): DCNL DCSP  DCSP  DCSP return callback(*words[1:]) DCNL DCSP commands = arg_str.split('|') DCNL DCSP parsed_commands = reduce((lambda x, y: ((x + [y]) if y else x)), map(_parse_command, commands), []) DCNL DCSP runhandler = '_command_handler' DCNL DCSP return {'runhandler': runhandler, 'args': {'commands': parsed_commands}}
def test_parse_focus(): DCNL  DCSP arg_str = 'id_with_no_annotation' DCNL DCSP expected_output = {'id': 'id_with_no_annotation', 'annotation': ''} DCNL DCSP actual_output = screenshot._parse_focus(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = 'id_with_annotation DCSP | DCSP test DCSP annotation' DCNL DCSP expected_output = {'id': 'id_with_annotation', 'annotation': 'test DCSP annotation'} DCNL DCSP actual_output = screenshot._parse_focus(arg_str) DCNL DCSP assert_equal(expected_output, actual_output)
def test_parse_command(): DCNL  DCSP arg_str = 'selector DCSP click' DCNL DCSP expected_output = {'selector': 'selector', 'action': 'click', 'options': []} DCNL DCSP actual_output = screenshot._parse_command(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = 'selector DCSP submit' DCNL DCSP expected_output = {'selector': 'selector', 'action': 'submit', 'options': []} DCNL DCSP actual_output = screenshot._parse_command(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = 'selector DCSP send_keys' DCNL DCSP expected_output = {'selector': 'selector', 'action': 'send_keys', 'options': []} DCNL DCSP actual_output = screenshot._parse_command(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = 'selector DCSP send_keys DCSP keystroke1 DCSP keystroke2' DCNL DCSP expected_output = {'selector': 'selector', 'action': 'send_keys', 'options': ['keystroke1', 'keystroke2']} DCNL DCSP actual_output = screenshot._parse_command(arg_str) DCNL DCSP assert_equal(expected_output, actual_output)
@raises(ActionError) DCNL def test_parse_command_action_error(): DCNL  DCSP arg_str = 'selector DCSP invalid_action' DCNL DCSP screenshot._parse_command(arg_str)
@raises(OptionError) DCNL def test_parse_command_option_error(): DCNL  DCSP arg_str = 'selector DCSP click DCSP options' DCNL DCSP screenshot._parse_command(arg_str) DCNL DCSP arg_str = 'selector DCSP click DCSP options' DCNL DCSP screenshot._parse_command(arg_str)
def test_parse_login(): DCNL  DCSP args = ('username', 'password', '') DCNL DCSP expected_output = {'runhandler': '_login_handler', 'args': {'username': 'username', 'password': 'password', 'submit': False}} DCNL DCSP actual_output = screenshot._parse_login(*args) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP args = ('username', 'password', 'submit') DCNL DCSP expected_output = {'runhandler': '_login_handler', 'args': {'username': 'username', 'password': 'password', 'submit': True}} DCNL DCSP actual_output = screenshot._parse_login(*args) DCNL DCSP assert_equal(expected_output, actual_output)
def test_parse_nav_steps(): DCNL  DCSP print sys.path DCNL DCSP arg_str = 'selector DCSP click' DCNL DCSP expected_output = {'runhandler': '_command_handler', 'args': {'commands': [{'action': 'click', 'options': [], 'selector': 'selector'}]}} DCNL DCSP actual_output = screenshot._parse_nav_steps(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = 'selector DCSP click DCSP | DCSP selector2 DCSP click' DCNL DCSP expected_output = {'runhandler': '_command_handler', 'args': {'commands': [{'action': 'click', 'options': [], 'selector': 'selector'}, {'action': 'click', 'options': [], 'selector': 'selector2'}]}} DCNL DCSP actual_output = screenshot._parse_nav_steps(arg_str) DCNL DCSP assert_equal(expected_output, actual_output) DCNL DCSP arg_str = '' DCNL DCSP expected_output = {'runhandler': '_command_handler', 'args': {'commands': []}} DCNL DCSP actual_output = screenshot._parse_nav_steps(arg_str) DCNL DCSP assert_equal(expected_output, actual_output)
def filter_requirement_statements(req): DCNL  DCSP req_pattern = re.compile(u'^\\s*([^\\#]+)') DCNL DCSP m = req_pattern.search(req) DCNL DCSP if m: DCNL DCSP  DCSP return m.group(0).replace(u' DCSP ', u'')
def enable_log_to_stdout(logname): DCNL  DCSP log = logging.getLogger(logname) DCNL DCSP log.setLevel(logging.DEBUG) DCNL DCSP ch = logging.StreamHandler() DCNL DCSP ch.setLevel(logging.DEBUG) DCNL DCSP formatter = logging.Formatter(u'%(asctime)s DCSP - DCSP %(name)s DCSP - DCSP %(levelname)s DCSP - DCSP %(message)s') DCNL DCSP ch.setFormatter(formatter) DCNL DCSP log.addHandler(ch)
def get_installed_packages(): DCNL  DCSP return [x.key for x in filter((lambda y: (where_am_i not in y.location)), pkg_resources.working_set)]
def gen_data_files(*dirs, **kwargs): DCNL  DCSP results = [] DCNL DCSP optional = kwargs.pop(u'optional', False) DCNL DCSP def filter_illegal_extensions(f): DCNL DCSP  DCSP return (os.path.splitext(f)[1] != u'.pyc') DCNL DCSP for src_dir in dirs: DCNL DCSP  DCSP if (not os.path.isdir(src_dir)): DCNL DCSP  DCSP  DCSP if optional: DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP raise RuntimeError(u'{dir:s} DCSP does DCSP not DCSP exist, DCSP cannot DCSP continue'.format(dir=src_dir)) DCNL DCSP  DCSP for (root, dirs, files) in os.walk(src_dir): DCNL DCSP  DCSP  DCSP results.append((root, filter(filter_illegal_extensions, map((lambda f: os.path.join(root, f)), files)))) DCNL DCSP return results
def narrative_view(request, narrative_id): DCNL  DCSP filename = os.path.join(settings.CONTENT_DATA_PATH, 'narratives') DCNL DCSP narratives = open_json_or_yml(filename) DCNL DCSP the_narrative = {} DCNL DCSP for (key, narr) in narratives.iteritems(): DCNL DCSP  DCSP exp = re.compile(key) DCNL DCSP  DCSP if exp.search(narrative_id): DCNL DCSP  DCSP  DCSP the_narrative[key] = narr DCNL DCSP  DCSP  DCSP break DCNL DCSP if (not the_narrative): DCNL DCSP  DCSP return JsonResponseMessageWarning(_('No DCSP inline DCSP help DCSP is DCSP available DCSP for DCSP this DCSP page.'), status=404) DCNL DCSP return JsonResponse(the_narrative)
@given("I've DCSP started DCSP the DCSP intro") DCNL def step_impl(context): DCNL  DCSP go_to_manage_page(context) DCNL DCSP start_intro(context) DCNL DCSP modal = context.modal = find_css_class_with_wait(context, MODAL_CLASS, wait_time=30) DCNL DCSP context.skip_button = modal.find_element_by_class_name(SKIP_BUTTON_CLASS) DCNL DCSP context.next_button = modal.find_element_by_class_name(NEXT_BUTTON_CLASS) DCNL DCSP context.back_button = modal.find_element_by_class_name(BACK_BUTTON_CLASS)
@set_database DCNL def setup_content_paths(context, db): DCNL  DCSP context.unavailable_content_path = 'khan/foo/bar/unavail' DCNL DCSP context.available_content_path = get_random_content(kinds=['Exercise'], available=True)[0]['path'] DCNL DCSP def iterator_content_items(ids=None, channel='khan', language='en'): DCNL DCSP  DCSP return [(context.available_content_path, {'available': True})] DCNL DCSP annotate_content_models(db=db, iterator_content_items=iterator_content_items) DCNL DCSP with Using(db, [Item], with_transaction=False): DCNL DCSP  DCSP context._unavailable_item = Item.create(title='Unavailable DCSP item', description='baz', available=False, kind='Video', id='3', slug='unavail', path=context.unavailable_content_path)
@set_database DCNL def teardown_content_paths(context, db): DCNL  DCSP with Using(db, [Item], with_transaction=False): DCNL DCSP  DCSP context._unavailable_item.delete_instance()
def setup_sauce_browser(context): DCNL  DCSP username = os.environ.get('SAUCE_USERNAME') DCNL DCSP access_key = os.environ.get('SAUCE_ACCESS_KEY') DCNL DCSP circle_build = os.environ.get('CIRCLE_BUILD_NUM') DCNL DCSP circle_node = os.environ.get('CIRCLE_NODE_INDEX') DCNL DCSP tunnel_id = '{build}-{node}'.format(build=circle_build, node=circle_node) DCNL DCSP context.sauce = sc.SauceClient(username, access_key) DCNL DCSP sauce_url = 'http://{username}:{access_key}@ondemand.saucelabs.com:80/wd/hub'.format(username=username, access_key=access_key) DCNL DCSP profile = webdriver.FirefoxProfile() DCNL DCSP if ('download_csv' in context.tags): DCNL DCSP  DCSP context.download_dir = tempfile.mkdtemp() DCNL DCSP  DCSP profile.set_preference('browser.download.folderList', 2) DCNL DCSP  DCSP profile.set_preference('browser.download.manager.showWhenStarting', False) DCNL DCSP  DCSP profile.set_preference('browser.download.dir', context.download_dir) DCNL DCSP  DCSP profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv') DCNL DCSP  DCSP context.browser = webdriver.Firefox(firefox_profile=profile) DCNL DCSP else: DCNL DCSP  DCSP desired_capabilities = DesiredCapabilities.FIREFOX.copy() DCNL DCSP  DCSP desired_capabilities['tunnelIdentifier'] = tunnel_id DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP context.browser = webdriver.Remote(desired_capabilities=desired_capabilities, browser_profile=profile, command_executor=sauce_url) DCNL DCSP  DCSP except (WebDriverException, socket.timeout): DCNL DCSP  DCSP  DCSP print "Couldn't DCSP establish DCSP a DCSP connection DCSP to DCSP saucelabs. DCSP Using DCSP a DCSP local DCSP Firefox DCSP WebDriver DCSP instance." DCNL DCSP  DCSP  DCSP del context.sauce DCNL DCSP  DCSP  DCSP context.browser = webdriver.Firefox(firefox_profile=profile)
def setup_local_browser(context): DCNL  DCSP profile = webdriver.FirefoxProfile() DCNL DCSP if ('download_csv' in context.tags): DCNL DCSP  DCSP context.download_dir = tempfile.mkdtemp() DCNL DCSP  DCSP profile.set_preference('browser.download.folderList', 2) DCNL DCSP  DCSP profile.set_preference('browser.download.manager.showWhenStarting', False) DCNL DCSP  DCSP profile.set_preference('browser.download.dir', context.download_dir) DCNL DCSP  DCSP profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv') DCNL DCSP context.browser = webdriver.Firefox(firefox_profile=profile)
def database_setup(context): DCNL  DCSP KALiteTestCase.setUpDatabase()
def database_teardown(context): DCNL  DCSP for alias in connections: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP call_command('flush', database=alias, interactive=False) DCNL DCSP  DCSP except TransactionManagementError as e: DCNL DCSP  DCSP  DCSP print ("Couldn't DCSP flush DCSP the DCSP database, DCSP got DCSP a DCSP TransactionManagementError: DCSP " + e.message)
def do_fake_registration(): DCNL  DCSP zone = Zone(name='The DCSP Danger DCSP Zone', description='Welcome DCSP to DCSP it.') DCNL DCSP zone.save() DCNL DCSP device = Device.get_own_device() DCNL DCSP device_zone = DeviceZone(device=device, zone=zone) DCNL DCSP device_zone.save()
@render_to('distributed/loadtesting/load_test.html') DCNL def load_test(request, nusers=None): DCNL  DCSP username = uuid.uuid4().hex[:12] DCNL DCSP if (not Facility.objects.count()): DCNL DCSP  DCSP fac = Facility.objects.create(name='fac') DCNL DCSP fac = Facility.objects.all()[0] DCNL DCSP (user, _) = FacilityUser.get_or_initialize(username=username, facility=fac) DCNL DCSP user.set_password(username) DCNL DCSP user.save() DCNL DCSP return {'pct_videos': request.GET.get('pct_videos', 0.3), 'username': username}
def rgba_to_hex(rgba_string): DCNL  DCSP return ('#' + ''.join([hex(int(each)).replace('0x', '').upper() for each in rgba_string.replace('rgba(', '').replace(')', '').split(',')[:(-1)]]))
def _assert_no_element_by(context, by, value, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): DCNL  DCSP try: DCNL DCSP  DCSP WebDriverWait(context.browser, wait_time).until(EC.presence_of_element_located((by, value))) DCNL DCSP except TimeoutException: DCNL DCSP  DCSP return True DCNL DCSP raise KALiteTimeout
def assert_no_element_by_id(context, _id, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): DCNL  DCSP _assert_no_element_by(context, By.ID, _id, wait_time)
def assert_no_element_by_css_selector(context, css_value, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): DCNL  DCSP _assert_no_element_by(context, By.CSS_SELECTOR, css_value, wait_time)
def assert_no_element_by_xpath_selector(context, xpath, wait_time=MAX_WAIT_FOR_UNEXPECTED_ELEMENT): DCNL  DCSP _assert_no_element_by(context, By.XPATH, xpath, wait_time)
def click_and_wait_for_page_load(context, elem, wait_time=MAX_PAGE_LOAD_TIME): DCNL  DCSP wait_elem = context.browser.find_element_by_tag_name('body') DCNL DCSP elem.click() DCNL DCSP return WebDriverWait(context.browser, wait_time).until(EC.staleness_of(wait_elem))
def click_and_wait_for_id_to_appear(context, elem_click, elem_wait, wait_time=MAX_WAIT_TIME): DCNL  DCSP elem_click.click() DCNL DCSP return id_shown_with_wait(context, elem_wait, wait_time=wait_time)
def elem_is_invisible_with_wait(context, elem, wait_time=MAX_WAIT_TIME): DCNL  DCSP try: DCNL DCSP  DCSP if (not elem.is_displayed()): DCNL DCSP  DCSP  DCSP return True DCNL DCSP except StaleElementReferenceException: DCNL DCSP  DCSP return True DCNL DCSP def displayed_condition(driver): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP return (not elem.is_displayed()) DCNL DCSP  DCSP except StaleElementReferenceException: DCNL DCSP  DCSP  DCSP return True DCNL DCSP try: DCNL DCSP  DCSP WebDriverWait(context.browser, wait_time).until(displayed_condition) DCNL DCSP  DCSP return True DCNL DCSP except TimeoutException: DCNL DCSP  DCSP return False
def elem_is_visible_with_wait(context, elem, wait_time=MAX_WAIT_TIME): DCNL  DCSP def _visiblity_of(): DCNL DCSP  DCSP context.browser.execute_script(('$(window).scrollLeft(%s);$(window).scrollTop(%s);' % (elem.location['x'], elem.location['y']))) DCNL DCSP  DCSP return elem.is_displayed() DCNL DCSP try: DCNL DCSP  DCSP WebDriverWait(context.browser, wait_time).until((lambda browser: _visiblity_of())) DCNL DCSP  DCSP return True DCNL DCSP except (TimeoutException, StaleElementReferenceException): DCNL DCSP  DCSP return False
def find_css_class_with_wait(context, css_class, **kwargs): DCNL  DCSP return _find_elem_with_wait(context, (By.CLASS_NAME, css_class), **kwargs)
def find_clickable_id_with_wait(context, id_str, **kwargs): DCNL  DCSP return _find_clickable_elem_with_wait(context, (By.ID, id_str), **kwargs)
def find_id_with_wait(context, id_str, **kwargs): DCNL  DCSP return _find_elem_with_wait(context, (By.ID, id_str), **kwargs)
def id_shown_with_wait(context, id_str, **kwargs): DCNL  DCSP return _shown_elem_with_wait(context, (By.ID, id_str), **kwargs)
def find_xpath_with_wait(context, id_str, **kwargs): DCNL  DCSP return _find_elem_with_wait(context, (By.XPATH, id_str), **kwargs)
def find_css_with_wait(context, id_str, **kwargs): DCNL  DCSP return _find_elem_with_wait(context, (By.CSS_SELECTOR, id_str), **kwargs)
def _find_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME): DCNL  DCSP return WebDriverWait(context.browser, wait_time).until(EC.presence_of_element_located(by))
def _find_clickable_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME): DCNL  DCSP return WebDriverWait(context.browser, wait_time).until(EC.element_to_be_clickable(by))
def _shown_elem_with_wait(context, by, wait_time=MAX_WAIT_TIME): DCNL  DCSP def _visibility(): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP elem = context.browser.find_element(by[0], by[1]) DCNL DCSP  DCSP  DCSP context.browser.execute_script(('$(window).scrollLeft(%s);$(window).scrollTop(%s);' % (elem.location['x'], elem.location['y']))) DCNL DCSP  DCSP  DCSP return elem.is_displayed() DCNL DCSP  DCSP except NoSuchElementException: DCNL DCSP  DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP return WebDriverWait(context.browser, wait_time).until((lambda browser: _visibility())) DCNL DCSP except TimeoutException: DCNL DCSP  DCSP return None
def build_url(context, url, params=None): DCNL  DCSP if (not params): DCNL DCSP  DCSP params = {} DCNL DCSP url = urljoin(context.config.server_url, url) DCNL DCSP if params: DCNL DCSP  DCSP url += ('?' + urllib.urlencode(params)) DCNL DCSP return url
def _login_user(context, username, password, facility=None): DCNL  DCSP data = {'username': username, 'password': password} DCNL DCSP if facility: DCNL DCSP  DCSP data['facility'] = facility DCNL DCSP  DCSP context.facility = facility DCNL DCSP data = json.dumps(data) DCNL DCSP url = (reverse('api_dispatch_list', kwargs={'resource_name': 'user'}) + 'login/') DCNL DCSP resp = post(context, url, data) DCNL DCSP context.user = username DCNL DCSP assert resp, ('Login DCSP failed. DCSP url: DCSP %s\ndata: DCSP %s' % (url, data))
def login_as_learner(context, learner_name='mrpibb', learner_pass='abc123'): DCNL  DCSP if (not FacilityUser.objects.filter(username=learner_name)): DCNL DCSP  DCSP class ContextWithMixin(FacilityMixins, ): DCNL DCSP  DCSP  DCSP def __init__(self): DCNL DCSP  DCSP  DCSP  DCSP self.browser = context.browser DCNL DCSP  DCSP context_wm = ContextWithMixin() DCNL DCSP  DCSP context_wm.create_student(username=learner_name, password=learner_pass) DCNL DCSP facility = FacilityUser.objects.get(username=learner_name).facility.id DCNL DCSP _login_user(context, learner_name, learner_pass, facility=facility)
def login_as_coach(context, coach_name='mrpibb', coach_pass='abc123'): DCNL  DCSP if (not FacilityUser.objects.filter(username=coach_name)): DCNL DCSP  DCSP class ContextWithMixin(FacilityMixins, ): DCNL DCSP  DCSP  DCSP def __init__(self): DCNL DCSP  DCSP  DCSP  DCSP self.browser = context.browser DCNL DCSP  DCSP context_wm = ContextWithMixin() DCNL DCSP  DCSP context_wm.create_teacher(username=coach_name, password=coach_pass) DCNL DCSP facility = FacilityUser.objects.get(username=coach_name).facility.id DCNL DCSP _login_user(context, coach_name, coach_pass, facility=facility)
def login_as_admin(context, admin_name='admin', admin_pass='abc123'): DCNL  DCSP if (not User.objects.filter(username=admin_name)): DCNL DCSP  DCSP class ContextWithMixin(CreateAdminMixin, ): DCNL DCSP  DCSP  DCSP def __init__(self): DCNL DCSP  DCSP  DCSP  DCSP self.browser = context.browser DCNL DCSP  DCSP context_wm = ContextWithMixin() DCNL DCSP  DCSP context_wm.create_admin(username=admin_name, password=admin_pass) DCNL DCSP _login_user(context, admin_name, admin_pass)
def post(context, url, data=''): DCNL  DCSP return request(context, url, method='POST', data=data)
def get(context, url, data=''): DCNL  DCSP return request(context, url, method='GET', data=data, api_call=api_call)
def request(context, url, method='GET', data=''): DCNL  DCSP class ContextWithMixin(BrowserActionMixins, ): DCNL DCSP  DCSP def __init__(self): DCNL DCSP  DCSP  DCSP self.browser = context.browser DCNL DCSP context_wm = ContextWithMixin() DCNL DCSP context.browser.get(build_url(context, reverse('homepage'))) DCNL DCSP context.browser.execute_script('\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP var DCSP req DCSP = DCSP new DCSP XMLHttpRequest();\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP req.open("{method}", DCSP "{url}", DCSP true);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP req.setRequestHeader("Content-Type", DCSP "application/json");\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP req.onreadystatechange DCSP = DCSP function DCSP () DCSP {{\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if( DCSP req.readyState DCSP === DCSP 4 DCSP ) DCSP {{\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.FLAG DCSP = DCSP true;\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.DATA DCSP = DCSP JSON.parse(req.responseText);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP }}\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP }};\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP req.send(\'{data}\');\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP '.format(method=method, url=url, data=data)) DCNL DCSP try: DCNL DCSP  DCSP context_wm.browser_wait_for_js_condition('window.FLAG') DCNL DCSP except KALiteTimeout: DCNL DCSP  DCSP logger.error('Timed DCSP out DCSP waiting DCSP on DCSP URL: DCSP {}'.format(url)) DCNL DCSP  DCSP raise DCNL DCSP resp = context.browser.execute_script('return DCSP window.DATA') DCNL DCSP return resp
def wait_for_video_player_ready(context, wait_time=MAX_WAIT_TIME): DCNL  DCSP class ContextWithMixin(BrowserActionMixins, ): DCNL DCSP  DCSP def __init__(self): DCNL DCSP  DCSP  DCSP self.browser = context.browser DCNL DCSP context_wm = ContextWithMixin() DCNL DCSP context_wm.browser_wait_for_js_object_exists('$') DCNL DCSP context_wm.browser_wait_for_js_object_exists('$("video")') DCNL DCSP context.browser.execute_script('$("video").trigger("loadedmetadata");') DCNL DCSP try: DCNL DCSP  DCSP context_wm.browser_wait_for_js_condition('window._kalite_debug.video_player_initialized', max_wait_time=wait_time) DCNL DCSP except KALiteTimeout as e: DCNL DCSP  DCSP raise TimeoutException(str(e))
def setup_browser(browser_type='Firefox'): DCNL  DCSP browser = getattr(webdriver, browser_type)() DCNL DCSP hacks_for_phantomjs(browser) DCNL DCSP return browser
def hacks_for_phantomjs(browser): DCNL  DCSP if isinstance(browser, webdriver.PhantomJS): DCNL DCSP  DCSP js = "\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.confirm DCSP = DCSP function(message) DCSP {\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return DCSP true;\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP }\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.alert DCSP = DCSP window.prompt DCSP = DCSP window.confirm;\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP // DCSP REF: DCSP http://stackoverflow.com/questions/13536752/phantomjs-click-a-link-on-a-page?rq=1\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP // DCSP REF: DCSP http://stackoverflow.com/questions/2705583/how-to-simulate-a-click-with-javascript/2706236#2706236\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.eventFire DCSP = DCSP function(el, DCSP etype) DCSP {\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if DCSP (el.fireEvent) DCSP {\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP el.fireEvent('on' DCSP + DCSP etype);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP } DCSP else DCSP {\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP var DCSP evObj DCSP = DCSP document.createEvent('Events');\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP evObj.initEvent(etype, DCSP true, DCSP false);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP el.dispatchEvent(evObj);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP }\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP };\n\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP // DCSP shorter DCSP alternative DCSP of DCSP above DCSP method\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP window.simulateClick DCSP = DCSP function(el) DCSP {\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP var DCSP e DCSP = DCSP document.createEvent('MouseEvents');\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP e.initEvent( DCSP 'click', DCSP true, DCSP true DCSP );\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP el.dispatchEvent(e);\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP };\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP " DCNL DCSP  DCSP browser.execute_script(('%s' % js))
def browse_to(browser, dest_url, wait_time=0.1, max_retries=50): DCNL  DCSP if (dest_url == browser.current_url): DCNL DCSP  DCSP return True DCNL DCSP browser.get(dest_url) DCNL DCSP return True
def wait_for_page_change(browser, source_url=None, page_source=None, wait_time=0.1, max_retries=50): DCNL  DCSP for i in range(max_retries): DCNL DCSP  DCSP if ((source_url is not None) and (browser.current_url != source_url)): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP elif ((page_source is not None) and (browser.page_source != page_source)): DCNL DCSP  DCSP  DCSP break DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP time.sleep(wait_time) DCNL DCSP return (browser.current_url != source_url)
def central_server_only(handler): DCNL  DCSP def central_server_only_wrapper_fn(*args, **kwargs): DCNL DCSP  DCSP if (not settings.CENTRAL_SERVER): DCNL DCSP  DCSP  DCSP raise Http404(_('This DCSP path DCSP is DCSP only DCSP available DCSP on DCSP the DCSP central DCSP server.')) DCNL DCSP  DCSP return handler(*args, **kwargs) DCNL DCSP return central_server_only_wrapper_fn
def distributed_server_only(handler): DCNL  DCSP def distributed_server_only_wrapper_fn(*args, **kwargs): DCNL DCSP  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP  DCSP raise Http404(_('This DCSP path DCSP is DCSP only DCSP available DCSP on DCSP distributed DCSP servers.')) DCNL DCSP  DCSP return handler(*args, **kwargs) DCNL DCSP return distributed_server_only_wrapper_fn
def get_features(app_module): DCNL  DCSP app_dir = get_app_dir(app_module) DCNL DCSP features_dir = os.path.abspath(os.path.join(app_dir, 'features')) DCNL DCSP if os.path.isdir(features_dir): DCNL DCSP  DCSP return features_dir DCNL DCSP else: DCNL DCSP  DCSP return None
def check_feature_file(features_dir, feature_name): DCNL  DCSP return os.path.exists(os.path.join(features_dir, (feature_name + '.feature')))
def check_setup_status(handler): DCNL  DCSP def check_setup_status_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP if ('registered' not in request.session): DCNL DCSP  DCSP  DCSP logging.error("Key DCSP 'registered' DCSP not DCSP defined DCSP in DCSP session, DCSP but DCSP should DCSP be DCSP by DCSP now.") DCNL DCSP  DCSP if request.is_admin: DCNL DCSP  DCSP  DCSP if ((not request.session.get('registered', True)) and (BaseClient().test_connection() == 'success')): DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, mark_safe((_("Please DCSP <a DCSP href='%s'>follow DCSP the DCSP directions DCSP to DCSP register DCSP your DCSP device</a>, DCSP so DCSP that DCSP it DCSP can DCSP synchronize DCSP with DCSP the DCSP central DCSP server.") % reverse('register_public_key')))) DCNL DCSP  DCSP  DCSP elif (not request.session['facility_exists']): DCNL DCSP  DCSP  DCSP  DCSP zone_id = ((Zone.objects.all() and Zone.objects.all()[0].id) or 'None') DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, mark_safe((_("Please DCSP <a DCSP href='%s'>create DCSP a DCSP facility</a> DCSP now. DCSP Users DCSP will DCSP not DCSP be DCSP able DCSP to DCSP sign DCSP up DCSP for DCSP accounts DCSP until DCSP you DCSP have DCSP made DCSP a DCSP facility.") % reverse('add_facility', kwargs={'zone_id': zone_id})))) DCNL DCSP  DCSP elif (not request.is_logged_in): DCNL DCSP  DCSP  DCSP if ((not request.session.get('registered', True)) and (BaseClient().test_connection() == 'success')): DCNL DCSP  DCSP  DCSP  DCSP redirect_url = reverse('register_public_key') DCNL DCSP  DCSP  DCSP elif (not request.session['facility_exists']): DCNL DCSP  DCSP  DCSP  DCSP zone = Device.get_own_device().get_zone() DCNL DCSP  DCSP  DCSP  DCSP zone_id = ('None' if (not zone) else zone.id) DCNL DCSP  DCSP  DCSP  DCSP redirect_url = reverse('add_facility', kwargs={'zone_id': zone_id}) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP redirect_url = None DCNL DCSP  DCSP  DCSP if redirect_url: DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, mark_safe(_('Please DCSP login DCSP with DCSP the DCSP admin DCSP account DCSP you DCSP created, DCSP then DCSP create DCSP your DCSP facility DCSP and DCSP register DCSP this DCSP device DCSP to DCSP complete DCSP the DCSP setup.'))) DCNL DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP return check_setup_status_wrapper_fn
@render_to('distributed/learn.html') DCNL def learn(request): DCNL  DCSP context = {'channel': CHANNEL, 'pdfjs': settings.PDFJS} DCNL DCSP return context
@check_setup_status DCNL @render_to('distributed/homepage.html') DCNL def homepage(request): DCNL  DCSP def _alert_outdated_languages(langpacks): DCNL DCSP  DCSP pretty_lang_names = ' DCSP --- DCSP '.join((lang.get('name', '') for lang in langpacks)) DCNL DCSP  DCSP messages.warning(request, _('Dear DCSP Admin, DCSP please DCSP log DCSP in DCSP and DCSP upgrade DCSP the DCSP following DCSP languages DCSP as DCSP soon DCSP as DCSP possible: DCSP {}').format(pretty_lang_names)) DCNL DCSP outdated_langpack_list = list(outdated_langpacks()) DCNL DCSP if outdated_langpack_list: DCNL DCSP  DCSP _alert_outdated_languages(outdated_langpack_list) DCNL DCSP return {}
@require_admin DCNL def zone_redirect(request): DCNL  DCSP device = Device.get_own_device() DCNL DCSP zone = device.get_zone() DCNL DCSP return HttpResponseRedirect(reverse('zone_management', kwargs={'zone_id': ((zone and zone.pk) or 'None')}))
@require_admin DCNL def device_redirect(request): DCNL  DCSP device = Device.get_own_device() DCNL DCSP zone = device.get_zone() DCNL DCSP return HttpResponseRedirect(reverse('device_management', kwargs={'zone_id': ((zone and zone.pk) or None), 'device_id': device.pk}))
def crypto_login(request): DCNL  DCSP if ('client_nonce' in request.GET): DCNL DCSP  DCSP client_nonce = request.GET['client_nonce'] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP session = SyncSession.objects.get(client_nonce=client_nonce) DCNL DCSP  DCSP except SyncSession.DoesNotExist: DCNL DCSP  DCSP  DCSP return HttpResponseServerError('Session DCSP not DCSP found.') DCNL DCSP  DCSP if session.server_device.is_trusted(): DCNL DCSP  DCSP  DCSP user = get_object_or_None(User, username='centraladmin') DCNL DCSP  DCSP  DCSP if (not user): DCNL DCSP  DCSP  DCSP  DCSP user = User(username='centraladmin', is_superuser=True, is_staff=True, is_active=True) DCNL DCSP  DCSP  DCSP  DCSP user.set_unusable_password() DCNL DCSP  DCSP  DCSP  DCSP user.save() DCNL DCSP  DCSP  DCSP user.backend = 'django.contrib.auth.backends.ModelBackend' DCNL DCSP  DCSP  DCSP auth_login(request, user) DCNL DCSP  DCSP session.delete() DCNL DCSP return HttpResponseRedirect(reverse('homepage'))
def get_messages_for_api_calls(request): DCNL  DCSP message_lists = [] DCNL DCSP for message in get_messages(request): DCNL DCSP  DCSP msg_txt = message.message DCNL DCSP  DCSP if (not (isinstance(msg_txt, SafeString) or isinstance(msg_txt, SafeUnicode))): DCNL DCSP  DCSP  DCSP msg_txt = cgi.escape(unicode(msg_txt)) DCNL DCSP  DCSP msg_type = message.tags DCNL DCSP  DCSP message_lists.append({msg_type: msg_txt}) DCNL DCSP return message_lists
def main(): DCNL  DCSP arg_parser = argparse.ArgumentParser(description='Clean DCSP up DCSP HTML DCSP exercise DCSP files.') DCNL DCSP arg_parser.add_argument('html_files', nargs='+', help='The DCSP HTML DCSP exercise DCSP files DCSP to DCSP clean DCSP up.') DCNL DCSP args = arg_parser.parse_args() DCNL DCSP for filename in args.html_files: DCNL DCSP  DCSP html_tree = lxml.html.html5parser.parse(filename, parser=lint_i18n_strings.PARSER) DCNL DCSP  DCSP with open(filename, 'w') as f: DCNL DCSP  DCSP  DCSP f.write(lint_i18n_strings.get_page_html(html_tree))
def _slurp(filename): DCNL  DCSP with open(filename) as f: DCNL DCSP  DCSP return f.read()
def close_issue(issue, github_auth): DCNL  DCSP closed_issue = issue.copy() DCNL DCSP closed_issue['state'] = 'closed' DCNL DCSP r = requests.post(('https://api.github.com/repos/Khan/khan-exercises/issues/%s' % issue['number']), data=json.dumps(closed_issue), auth=github_auth) DCNL DCSP try: DCNL DCSP  DCSP r.raise_for_status() DCNL DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP return True DCNL DCSP except requests.HTTPError: DCNL DCSP  DCSP return False
def post_issue_comment(issue, comment_text, github_auth): DCNL  DCSP closed_issue = issue.copy() DCNL DCSP closed_issue['state'] = 'closed' DCNL DCSP r = requests.post(('https://api.github.com/repos/Khan/khan-exercises/issues/%s/comments' % issue['number']), data=json.dumps({'body': comment_text}), auth=github_auth) DCNL DCSP try: DCNL DCSP  DCSP r.raise_for_status() DCNL DCSP  DCSP time.sleep(1) DCNL DCSP  DCSP return True DCNL DCSP except requests.HTTPError: DCNL DCSP  DCSP return False
def main(): DCNL  DCSP arg_parser = argparse.ArgumentParser(description='Extract DCSP translatable DCSP strings DCSP from DCSP HTML DCSP exercise DCSP files.') DCNL DCSP arg_parser.add_argument('html_files', nargs='+', help='The DCSP HTML DCSP exercise DCSP files DCSP to DCSP extract DCSP strings DCSP from.') DCNL DCSP arg_parser.add_argument('--quiet', '-q', action='store_true', help='Do DCSP not DCSP emit DCSP status DCSP to DCSP stderr DCSP on DCSP successful DCSP runs.') DCNL DCSP arg_parser.add_argument('--fix', action='store_true', help='Automatically DCSP fix DCSP some DCSP i18n DCSP issues DCSP in DCSP the DCSP input DCSP files.') DCNL DCSP args = arg_parser.parse_args() DCNL DCSP if (not args.fix): DCNL DCSP  DCSP global SHOW_PROMPT DCNL DCSP  DCSP SHOW_PROMPT = False DCNL DCSP total_errors = 0 DCNL DCSP total_error_files = 0 DCNL DCSP total_fixes = 0 DCNL DCSP total_fix_files = 0 DCNL DCSP for filename in args.html_files: DCNL DCSP  DCSP (errors, num_fixes) = lint_file(filename, args.fix, (not args.quiet)) DCNL DCSP  DCSP if num_fixes: DCNL DCSP  DCSP  DCSP total_fixes += num_fixes DCNL DCSP  DCSP  DCSP total_fix_files += 1 DCNL DCSP  DCSP if errors: DCNL DCSP  DCSP  DCSP num_errors = len(errors) DCNL DCSP  DCSP  DCSP total_errors += num_errors DCNL DCSP  DCSP  DCSP total_error_files += 1 DCNL DCSP  DCSP  DCSP print >>sys.stderr, ('%s DCSP error%s: DCSP %s.' % (num_errors, ('' if (num_errors == 1) else 's'), filename)) DCNL DCSP  DCSP  DCSP for error_msg in errors: DCNL DCSP  DCSP  DCSP  DCSP print >>sys.stderr, error_msg DCNL DCSP  DCSP if ((not args.quiet) and args.fix and num_fixes): DCNL DCSP  DCSP  DCSP print >>sys.stderr, ('%s DCSP node%s DCSP have DCSP been DCSP fixed DCSP in DCSP %s.' % (num_fixes, ('' if (num_fixes == 1) else 's'), filename)) DCNL DCSP if ((not args.quiet) and args.fix): DCNL DCSP  DCSP print >>sys.stderr, ('%s DCSP nodes DCSP fixed DCSP in DCSP %s DCSP file%s.' % (total_fixes, total_fix_files, ('' if (total_fix_files == 1) else 's'))) DCNL DCSP if total_errors: DCNL DCSP  DCSP print >>sys.stderr, ('%s DCSP error%s DCSP detected DCSP in DCSP %s DCSP file%s.' % (total_errors, ('' if (total_errors == 1) else 's'), total_error_files, ('' if (total_error_files == 1) else 's'))) DCNL DCSP sys.exit(min(total_errors, 127))
def lint_file(filename, apply_fix, verbose): DCNL  DCSP errors = [] DCNL DCSP nodes_changed = 0 DCNL DCSP filters = [PronounFilter, TernaryFilter, AlwaysPluralFilter, PluralFilter, AnFilter] DCNL DCSP if ERROR_AMBIGUOUS_PLURALS: DCNL DCSP  DCSP filters.append(AmbiguousPluralFilter) DCNL DCSP html_tree = lxml.html.html5parser.parse(filename, parser=PARSER) DCNL DCSP nodes = _extract_nodes(html_tree, filename) DCNL DCSP root_tree = (nodes[0].getroottree() if nodes else None) DCNL DCSP bad_nodes = (_REJECT_NODES + _CANNOT_CONTAIN_NODES) DCNL DCSP lint_expr = '|'.join([('.//%s' % name) for name in bad_nodes]) DCNL DCSP for node in nodes: DCNL DCSP  DCSP lint_nodes = node.xpath(lint_expr) DCNL DCSP  DCSP for lint_node in lint_nodes: DCNL DCSP  DCSP  DCSP errors.append(('Contains DCSP invalid DCSP node:\n%s\nInvalid DCSP node:\n%s' % (_get_outerhtml(node), _get_outerhtml(lint_node)))) DCNL DCSP _IS_SINGULAR = '*[contains(@data-if,"isSingular")]' DCNL DCSP search_expr = ('//%s[not(%s)][not(./%s)]' % (_IS_SINGULAR, _HAS_TEXT, _IS_SINGULAR)) DCNL DCSP non_bottom_level_issingular = html_tree.xpath(search_expr) DCNL DCSP for lint_node in non_bottom_level_issingular: DCNL DCSP  DCSP errors.append(("'isSingular' DCSP nodes DCSP must DCSP contain DCSP text DCSP directly; DCSP distribute DCSP this DCSP node DCSP into DCSP its DCSP children:\n%s" % _get_outerhtml(lint_node))) DCNL DCSP for filter_class in filters: DCNL DCSP  DCSP filter = filter_class() DCNL DCSP  DCSP (new_nodes, new_errors, new_nodes_changed) = filter.process(nodes) DCNL DCSP  DCSP nodes = new_nodes DCNL DCSP  DCSP errors += new_errors DCNL DCSP  DCSP nodes_changed += new_nodes_changed DCNL DCSP text_nodes = root_tree.xpath('|'.join(_VAR_NODES)) DCNL DCSP filter = StringInVarFilter() DCNL DCSP (new_nodes, new_errors, new_nodes_changed) = filter.process(text_nodes) DCNL DCSP nodes = new_nodes DCNL DCSP errors += new_errors DCNL DCSP nodes_changed += new_nodes_changed DCNL DCSP text_nodes = root_tree.xpath('|'.join(_TEXT_NODES)) DCNL DCSP filter = MathJaxTextFilter() DCNL DCSP (new_nodes, new_errors, new_nodes_changed) = filter.process(text_nodes) DCNL DCSP nodes = new_nodes DCNL DCSP errors += new_errors DCNL DCSP nodes_changed += new_nodes_changed DCNL DCSP if nodes_changed: DCNL DCSP  DCSP if apply_fix: DCNL DCSP  DCSP  DCSP with open(filename, 'w') as f: DCNL DCSP  DCSP  DCSP  DCSP f.write(get_page_html(root_tree)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP errors.append(('%s DCSP node%s DCSP need DCSP to DCSP be DCSP fixed. DCSP Re-run DCSP with DCSP --fix DCSP to DCSP automatically DCSP fix DCSP them.' % (nodes_changed, ('' if (nodes_changed == 1) else 's')))) DCNL DCSP return (errors, nodes_changed)
def get_plural_form(word): DCNL  DCSP if (word not in _PLURAL_FORMS): DCNL DCSP  DCSP plural = prompt_user(('What DCSP is DCSP the DCSP plural DCSP form DCSP of DCSP "%s" DCSP [%ss]: DCSP ' % (word, word)), default=(word + 's')) DCNL DCSP  DCSP _PLURAL_FORMS[word] = plural DCNL DCSP return _PLURAL_FORMS[word]
def get_plural_num_pos(match): DCNL  DCSP plural_str = match.group(0).strip() DCNL DCSP if (plural_str not in _PLURAL_NUM_POS): DCNL DCSP  DCSP first_arg_num = _check_plural_arg_is_num(match.group(2).strip()) DCNL DCSP  DCSP second_arg_num = _check_plural_arg_is_num(match.group(3).strip()) DCNL DCSP  DCSP if (first_arg_num == second_arg_num): DCNL DCSP  DCSP  DCSP first_arg_num = second_arg_num = None DCNL DCSP  DCSP pos = None DCNL DCSP  DCSP if ((first_arg_num is False) or (second_arg_num is True)): DCNL DCSP  DCSP  DCSP pos = 2 DCNL DCSP  DCSP elif ((second_arg_num is False) or (first_arg_num is True)): DCNL DCSP  DCSP  DCSP pos = 1 DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP pos = prompt_user(('Ambiguous: DCSP %s DCSP which DCSP is DCSP the DCSP number? DCSP ([1] DCSP 2) DCSP ' % plural_str), default=1) DCNL DCSP  DCSP _PLURAL_NUM_POS[plural_str] = int(pos) DCNL DCSP return _PLURAL_NUM_POS[plural_str]
def get_is_plural_num(match): DCNL  DCSP plural_str = match.group(2).strip() DCNL DCSP if (plural_str not in _IS_PLURAL_NUM): DCNL DCSP  DCSP holds_num = _check_plural_arg_is_num(plural_str) DCNL DCSP  DCSP if (holds_num is None): DCNL DCSP  DCSP  DCSP holds_num = prompt_user(('Ambiguous: DCSP Does DCSP %s DCSP handle DCSP a DCSP number? DCSP (y/[n]) DCSP ' % plural_str), default='n') DCNL DCSP  DCSP  DCSP holds_num = ('y' in holds_num) DCNL DCSP  DCSP _IS_PLURAL_NUM[plural_str] = holds_num DCNL DCSP return _IS_PLURAL_NUM[plural_str]
def _check_plural_arg_is_num(plural_arg): DCNL  DCSP if _STRING_RE.match(plural_arg): DCNL DCSP  DCSP return False DCNL DCSP fn_match = _FUNCTION_RE.match(plural_arg) DCNL DCSP if (fn_match and (fn_match.group(1) in _functions)): DCNL DCSP  DCSP return False DCNL DCSP for var in _string_vars: DCNL DCSP  DCSP if (var in plural_arg.upper()): DCNL DCSP  DCSP  DCSP return False DCNL DCSP for var in _num_vars: DCNL DCSP  DCSP if (var in plural_arg.upper()): DCNL DCSP  DCSP  DCSP return True DCNL DCSP return None
def _check_plural_is_ambiguous(plural_arg): DCNL  DCSP if _STRING_RE.match(plural_arg): DCNL DCSP  DCSP return False DCNL DCSP fn_match = _FUNCTION_RE.match(plural_arg) DCNL DCSP if (fn_match and (fn_match.group(1) in _functions)): DCNL DCSP  DCSP return False DCNL DCSP return True
def _extract_nodes(html_tree, filename): DCNL  DCSP search_expr = _XPATH_FIND_NODES DCNL DCSP for name in _IGNORE_NODES: DCNL DCSP  DCSP search_expr += ('[not(ancestor-or-self::%s)]' % name) DCNL DCSP return html_tree.xpath(search_expr)
def _replace_node(node, replace_node): DCNL  DCSP prev_node = node.getprevious() DCNL DCSP parent_node = node.getparent() DCNL DCSP node_tail = (node.tail or '') DCNL DCSP if isinstance(replace_node, basestring): DCNL DCSP  DCSP if (prev_node is not None): DCNL DCSP  DCSP  DCSP prev_text = (prev_node.tail or '') DCNL DCSP  DCSP  DCSP prev_node.tail = ((prev_text + replace_node) + node_tail) DCNL DCSP  DCSP elif (parent_node is not None): DCNL DCSP  DCSP  DCSP parent_text = (parent_node.text or '') DCNL DCSP  DCSP  DCSP parent_node.text = ((parent_text + replace_node) + node_tail) DCNL DCSP else: DCNL DCSP  DCSP replace_node.tail = node_tail DCNL DCSP  DCSP node.addprevious(replace_node) DCNL DCSP if (parent_node is not None): DCNL DCSP  DCSP parent_node.remove(node)
def _parse_single_node(text): DCNL  DCSP return lxml.html.html5parser.fragment_fromstring(text, parser=PARSER)
def _get_outerhtml(html_node): DCNL  DCSP html_string = lxml.html.tostring(html_node) DCNL DCSP return re.sub('[^>]*$', '', html_string, count=1)
def _get_innerhtml(html_node): DCNL  DCSP html_string = _get_outerhtml(html_node) DCNL DCSP html_string = re.sub('^<[^<>]*?>', '', html_string, count=1) DCNL DCSP return re.sub('<[^<>]*?>$', '', html_string, count=1)
def get_page_html(html_tree): DCNL  DCSP for el in html_tree.xpath('//*'): DCNL DCSP  DCSP attrs = dict(el.attrib) DCNL DCSP  DCSP keys = el.attrib.keys() DCNL DCSP  DCSP keys.sort(key=(lambda k: (0 if (k == 'href') else (1 if (k == 'class') else (2 if (k == 'id') else (3 if (k == 'http-equiv') else (4 if (k == 'content') else k))))))) DCNL DCSP  DCSP el.attrib.clear() DCNL DCSP  DCSP for k in keys: DCNL DCSP  DCSP  DCSP el.attrib[k] = attrs[k] DCNL DCSP body_child_nodes = html_tree.xpath('//body/*') DCNL DCSP if body_child_nodes: DCNL DCSP  DCSP last_node = body_child_nodes[(-1)] DCNL DCSP  DCSP if ((not last_node.tail) or last_node.tail.isspace()): DCNL DCSP  DCSP  DCSP last_node.tail = '\n' DCNL DCSP html_string = lxml.html.tostring(html_tree, include_meta_content_type=True, encoding='utf-8') DCNL DCSP for (norm, human) in _ENTITY_TABLE.iteritems(): DCNL DCSP  DCSP html_string = html_string.replace(norm, human) DCNL DCSP html_string = re.sub('data-if=(["\\\'])(.*?)\\1', _clean_data_if, html_string) DCNL DCSP html_string = re.sub('\\s*(<\\/?html[^>]*>)\\s*', '\\n\\1\\n', html_string) DCNL DCSP return html_string
def _clean_data_if(match): DCNL  DCSP quote = match.group(1) DCNL DCSP condition = match.group(2) DCNL DCSP for (entity, replace) in _CLEAN_ENTITIES.iteritems(): DCNL DCSP  DCSP condition = condition.replace(entity, replace) DCNL DCSP return ('data-if=%s%s%s' % (quote, condition, quote))
def prompt_user(prompt, default=''): DCNL  DCSP result = None DCNL DCSP if SHOW_PROMPT: DCNL DCSP  DCSP print prompt DCNL DCSP  DCSP result = raw_input() DCNL DCSP return (default if (not result) else result)
def enter_star_ratings(context, val=3): DCNL  DCSP for id_ in STAR_CONTAINER_IDS: DCNL DCSP  DCSP rate_id(context, id_, val=val)
def rate_id(context, id_, val=3): DCNL  DCSP def rate_element(driver): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP inner_wrapper = find_id_with_wait(context, id_, wait_time=2) DCNL DCSP  DCSP  DCSP els = inner_wrapper.find_elements_by_class_name(STAR_RATING_OPTION_CLASS) DCNL DCSP  DCSP  DCSP rating_el = [el for el in filter((lambda x: (int(x.get_attribute('data-val')) == val)), els)][0] DCNL DCSP  DCSP  DCSP rating_el.click() DCNL DCSP  DCSP  DCSP return True DCNL DCSP  DCSP except (NoSuchElementException, StaleElementReferenceException, TimeoutException, IndexError): DCNL DCSP  DCSP  DCSP return False DCNL DCSP try: DCNL DCSP  DCSP WebDriverWait(context.browser, 30).until(rate_element) DCNL DCSP except TimeoutException: DCNL DCSP  DCSP raise Exception("Unable DCSP to DCSP enter DCSP rating DCSP for DCSP container DCSP with DCSP id DCSP '{id:s}'".format(id=id_))
def enter_text_feedback(context, text_feedback): DCNL  DCSP input_field = find_css_class_with_wait(context, TEXT_INPUT_CLASS) DCNL DCSP input_field.send_keys(text_feedback)
def get_text_feedback(context): DCNL  DCSP return context.browser.execute_script('\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return DCSP $(".{text_input_class}")[0].value;\n DCSP  DCSP  DCSP  DCSP '.format(text_input_class=TEXT_INPUT_CLASS))
def unregister_distributed_server(): DCNL  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP raise CommandError("'Unregister' DCSP does DCSP not DCSP make DCSP sense DCSP for DCSP a DCSP central DCSP server. DCSP  DCSP Aborting!") DCNL DCSP own_device = Device.get_own_device() DCNL DCSP (tmp, settings.DEBUG_ALLOW_DELETIONS) = (settings.DEBUG_ALLOW_DELETIONS, True) DCNL DCSP DeviceZone.objects.filter(device=own_device).delete() DCNL DCSP Zone.objects.all().delete() DCNL DCSP Device.objects.filter(devicemetadata__is_trusted=True).delete() DCNL DCSP settings.DEBUG_ALLOW_DELETIONS = tmp
def clean_db(): DCNL  DCSP logging.info('Cleaning DCSP Zone') DCNL DCSP Zone.objects.all().delete() DCNL DCSP logging.info('Cleaning DCSP Facility') DCNL DCSP Facility.objects.all().delete() DCNL DCSP logging.info('Cleaning DCSP Device') DCNL DCSP Device.objects.all().delete()
def clean_pyc(path): DCNL  DCSP if (not os.access(path, os.W_OK)): DCNL DCSP  DCSP warnings.warn('{0} DCSP is DCSP not DCSP writable DCSP so DCSP cannot DCSP delete DCSP stale DCSP *pyc DCSP files'.format(path)) DCNL DCSP  DCSP return DCNL DCSP print 'Cleaning DCSP *pyc DCSP files DCSP (if DCSP writable) DCSP from: DCSP {0}'.format(path) DCNL DCSP for (root, __dirs, files) in os.walk(path): DCNL DCSP  DCSP pyc_files = filter((lambda filename: filename.endswith('.pyc')), files) DCNL DCSP  DCSP py_files = set(filter((lambda filename: filename.endswith('.py')), files)) DCNL DCSP  DCSP excess_pyc_files = filter((lambda pyc_filename: (pyc_filename[:(-1)] not in py_files)), pyc_files) DCNL DCSP  DCSP for excess_pyc_file in excess_pyc_files: DCNL DCSP  DCSP  DCSP full_path = os.path.join(root, excess_pyc_file) DCNL DCSP  DCSP  DCSP os.remove(full_path)
def reset_sqlite_database(username=None, email=None, password=None, router=None, verbosity='1'): DCNL  DCSP if (not router): DCNL DCSP  DCSP router = getattr(settings, 'SCREENSHOTS_ROUTER', 'default') DCNL DCSP db_engine = settings.DATABASES[router]['ENGINE'] DCNL DCSP if (db_engine == settings.SQLITE3_ENGINE): DCNL DCSP  DCSP ensure_dir(settings.SCREENSHOTS_OUTPUT_PATH) DCNL DCSP  DCSP new_io = StringIO() DCNL DCSP  DCSP call_command('setup', interactive=False, stdout=new_io, verbosity=verbosity) DCNL DCSP  DCSP call_command('generaterealdata', scenario_1=True, interactive=False, stdout=new_io, router=router, verbosity=verbosity) DCNL DCSP  DCSP if (username and email and password): DCNL DCSP  DCSP  DCSP (log.info(('==> DCSP Creating DCSP superuser DCSP username==%s; DCSP email==%s DCSP ...' % (username, email))) if (int(verbosity) > 0) else None) DCNL DCSP  DCSP  DCSP call_command('createsuperuser', username=username, email=email, interactive=False, stdout=new_io, router=router, verbosity=verbosity) DCNL DCSP  DCSP  DCSP admin_user = User.objects.get(username=username) DCNL DCSP  DCSP  DCSP admin_user.set_password(password) DCNL DCSP  DCSP  DCSP admin_user.save() DCNL DCSP  DCSP  DCSP return admin_user DCNL DCSP return None
def delete_sqlite_database(database=None, verbosity='1'): DCNL  DCSP try: DCNL DCSP  DCSP router = getattr(settings, 'SCREENSHOTS_ROUTER', 'default') DCNL DCSP  DCSP db_engine = settings.DATABASES[router]['ENGINE'] DCNL DCSP  DCSP if (db_engine == settings.SQLITE3_ENGINE): DCNL DCSP  DCSP  DCSP if (not database): DCNL DCSP  DCSP  DCSP  DCSP database = settings.DATABASES[router]['NAME'] DCNL DCSP  DCSP  DCSP if os.path.exists(database): DCNL DCSP  DCSP  DCSP  DCSP (log.info(('==> DCSP Removing DCSP database DCSP %s DCSP ...' % database)) if (int(verbosity) > 0) else None) DCNL DCSP  DCSP  DCSP  DCSP os.remove(database) DCNL DCSP  DCSP  DCSP  DCSP (log.info('====> DCSP Successfully DCSP removed DCSP database.') if (int(verbosity) > 0) else None) DCNL DCSP except Exception as exc: DCNL DCSP  DCSP log.error(('====> DCSP EXCEPTION: DCSP %s' % exc))
def yml_to_json(filename): DCNL  DCSP jsonfilename = '{0}.json'.format(*os.path.splitext(filename)) DCNL DCSP with open(filename, 'r') as f: DCNL DCSP  DCSP contents = yaml.load(f) DCNL DCSP with open(jsonfilename, 'w') as f: DCNL DCSP  DCSP json.dump(contents, f)
@require_login DCNL def update_all_distributed(request): DCNL  DCSP logging.debug('Getting DCSP Khan DCSP Academy DCSP data.') DCNL DCSP return HttpResponseRedirect(set_query_params((CENTRAL_SERVER_URL + CENTRAL_UPDATE_ALL_PATH), {'callback': request.build_absolute_uri(reverse('update_all_distributed_callback')), 'user_id': request.session['facility_user'].id}))
@csrf_exempt DCNL def update_all_distributed_callback(request): DCNL  DCSP if (request.method != 'POST'): DCNL DCSP  DCSP raise PermissionDenied('Only DCSP POST DCSP allowed DCSP to DCSP this DCSP URL DCSP endpoint.') DCNL DCSP videos = json.loads(request.POST['video_logs']) DCNL DCSP exercises = json.loads(request.POST['exercise_logs']) DCNL DCSP user = FacilityUser.objects.get(id=request.POST['user_id']) DCNL DCSP node_ids = [node.get('id') for node in get_content_items()] DCNL DCSP n_videos_uploaded = 0 DCNL DCSP for video in videos: DCNL DCSP  DCSP video_id = video['video_id'] DCNL DCSP  DCSP youtube_id = video['youtube_id'] DCNL DCSP  DCSP if (video_id not in node_ids): DCNL DCSP  DCSP  DCSP logging.warn(('Skipping DCSP unknown DCSP video DCSP %s' % video_id)) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (vl, _) = VideoLog.get_or_initialize(user=user, video_id=video_id) DCNL DCSP  DCSP  DCSP for (key, val) in video.iteritems(): DCNL DCSP  DCSP  DCSP  DCSP setattr(vl, key, val) DCNL DCSP  DCSP  DCSP logging.debug(('Saving DCSP video DCSP log DCSP for DCSP %s: DCSP %s' % (video_id, vl))) DCNL DCSP  DCSP  DCSP vl.save() DCNL DCSP  DCSP  DCSP n_videos_uploaded += 1 DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP logging.error(('Could DCSP not DCSP save DCSP video DCSP log DCSP for DCSP data DCSP with DCSP missing DCSP values: DCSP %s' % video)) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP error_message = (_('Unexpected DCSP error DCSP importing DCSP videos: DCSP %(err_msg)s') % {'err_msg': e}) DCNL DCSP  DCSP  DCSP return JsonResponseMessageError(error_message, status=500) DCNL DCSP n_exercises_uploaded = 0 DCNL DCSP for exercise in exercises: DCNL DCSP  DCSP if (exercise['exercise_id'] not in node_ids): DCNL DCSP  DCSP  DCSP logging.warn(('Skipping DCSP unknown DCSP video DCSP %s' % exercise['exercise_id'])) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP (el, _) = ExerciseLog.get_or_initialize(user=user, exercise_id=exercise['exercise_id']) DCNL DCSP  DCSP  DCSP for (key, val) in exercise.iteritems(): DCNL DCSP  DCSP  DCSP  DCSP setattr(el, key, val) DCNL DCSP  DCSP  DCSP logging.debug(('Saving DCSP exercise DCSP log DCSP for DCSP %s: DCSP %s' % (exercise['exercise_id'], el))) DCNL DCSP  DCSP  DCSP el.save() DCNL DCSP  DCSP  DCSP n_exercises_uploaded += 1 DCNL DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP logging.error(('Could DCSP not DCSP save DCSP exercise DCSP log DCSP for DCSP data DCSP with DCSP missing DCSP values: DCSP %s' % exercise)) DCNL DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP error_message = (_('Unexpected DCSP error DCSP importing DCSP exercises: DCSP %(err_msg)s') % {'err_msg': e}) DCNL DCSP  DCSP  DCSP return JsonResponseMessageError(error_message, status=500) DCNL DCSP return JsonResponseMessageSuccess((_('Uploaded DCSP %(num_exercises)d DCSP exercises DCSP and DCSP %(num_videos)d DCSP videos') % {'num_exercises': n_exercises_uploaded, 'num_videos': n_videos_uploaded}))
def whitewash_node_data(node, path='', channel_data=None): DCNL  DCSP if (not channel_data): DCNL DCSP  DCSP channel_data = {} DCNL DCSP kind = node.get('kind') DCNL DCSP if (not kind): DCNL DCSP  DCSP return node DCNL DCSP if (kind in channel_data['attribute_whitelists']): DCNL DCSP  DCSP for key in node.keys(): DCNL DCSP  DCSP  DCSP if ((key not in channel_data['attribute_whitelists'][kind]) and (key not in channel_data['temp_ok_atts'])): DCNL DCSP  DCSP  DCSP  DCSP del node[key] DCNL DCSP node['id'] = node.get(channel_data['id_key'].get(kind, ''), node.get('id', '')) DCNL DCSP if (channel_data['slug_key'][kind] not in node): DCNL DCSP  DCSP node[channel_data['slug_key'][kind]] = node['id'] DCNL DCSP node['slug'] = (node[channel_data['slug_key'][kind]] if (node[channel_data['slug_key'][kind]] != 'root') else 'khan') DCNL DCSP node['slug'] = slugify(unicode(node['slug'])) DCNL DCSP node['path'] = (node.get('path', '') or ((path + node['slug']) + '/')) DCNL DCSP if ('title' not in node): DCNL DCSP  DCSP node['title'] = node.get(channel_data['title_key'][kind], '') DCNL DCSP node['title'] = (node['title'] or '').strip() DCNL DCSP if ('description' in node): DCNL DCSP  DCSP node['description'] = (node['description'] or '').strip() DCNL DCSP if (kind == 'Video'): DCNL DCSP  DCSP node['video_id'] = node.get('youtube_id', '') DCNL DCSP elif (kind == 'Exercise'): DCNL DCSP  DCSP node['exercise_id'] = node['id'] DCNL DCSP  DCSP node['basepoints'] = ceil((7 * log(max(exp((5.0 / 7)), node.get('seconds_per_fast_problem', 0))))) DCNL DCSP return node
def rebuild_topictree(remove_unknown_exercises=False, remove_disabled_topics=True, whitewash_node_data=whitewash_node_data, retrieve_API_data=retrieve_API_data, channel_data={}, channel=None): DCNL  DCSP (topic_tree, exercises, assessment_items, contents) = retrieve_API_data(channel=channel) DCNL DCSP exercise_lookup = dict(((exercise['id'], exercise) for exercise in exercises)) DCNL DCSP content_lookup = dict(((content['id'], content) for content in contents)) DCNL DCSP def recurse_nodes(node, path=''): DCNL DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Internal DCSP function DCSP for DCSP recursing DCSP over DCSP the DCSP topic DCSP tree, DCSP marking DCSP relevant DCSP metadata,\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP and DCSP removing DCSP undesired DCSP attributes DCSP and DCSP children.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP kind = node['kind'] DCNL DCSP  DCSP node = whitewash_node_data(node, path) DCNL DCSP  DCSP if (kind != 'Topic'): DCNL DCSP  DCSP  DCSP if (kind in channel_data['denormed_attribute_list']): DCNL DCSP  DCSP  DCSP  DCSP for key in node.keys(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ((key not in channel_data['denormed_attribute_list'][kind]) or (not node.get(key, ''))): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP del node[key] DCNL DCSP  DCSP if ('child_data' in node): DCNL DCSP  DCSP  DCSP children_to_delete = [] DCNL DCSP  DCSP  DCSP child_kinds = set() DCNL DCSP  DCSP  DCSP for (i, child) in enumerate(node.get('children', [])): DCNL DCSP  DCSP  DCSP  DCSP child_kind = child.get('kind') DCNL DCSP  DCSP  DCSP  DCSP if ((child_kind == 'Video') or (child_kind == 'Exercise')): DCNL DCSP  DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP for i in reversed(children_to_delete): DCNL DCSP  DCSP  DCSP  DCSP del node['children'][i] DCNL DCSP  DCSP for child_datum in node.get('child_data', []): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP child_id = str(child_datum['id']) DCNL DCSP  DCSP  DCSP  DCSP child_kind = child_datum['kind'] DCNL DCSP  DCSP  DCSP  DCSP slug_key = channel_data['slug_key'][child_kind] DCNL DCSP  DCSP  DCSP  DCSP if (child_kind == 'Exercise'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP child_denormed_data = exercise_lookup[child_id] DCNL DCSP  DCSP  DCSP  DCSP  DCSP slug = (exercise_lookup[child_id][slug_key] if (exercise_lookup[child_id][slug_key] != 'root') else 'khan') DCNL DCSP  DCSP  DCSP  DCSP  DCSP slug = slugify(unicode(slug)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP exercise_lookup[child_id]['path'] = ((node['path'] + slug) + '/') DCNL DCSP  DCSP  DCSP  DCSP elif (child_kind == 'Video'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP child_denormed_data = content_lookup[child_id] DCNL DCSP  DCSP  DCSP  DCSP  DCSP slug = (content_lookup[child_id][slug_key] if (content_lookup[child_id][slug_key] != 'root') else 'khan') DCNL DCSP  DCSP  DCSP  DCSP  DCSP slug = slugify(unicode(slug)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP content_lookup[child_id]['path'] = ((node['path'] + slug) + '/') DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP child_denormed_data = None DCNL DCSP  DCSP  DCSP  DCSP if child_denormed_data: DCNL DCSP  DCSP  DCSP  DCSP  DCSP node['children'].append(copy.deepcopy(dict(child_denormed_data))) DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP logging.warn(('%(kind)s DCSP %(id)s DCSP does DCSP not DCSP exist DCSP in DCSP lookup DCSP table' % child_datum)) DCNL DCSP  DCSP children_to_delete = [] DCNL DCSP  DCSP child_kinds = set() DCNL DCSP  DCSP for (i, child) in enumerate(node.get('children', [])): DCNL DCSP  DCSP  DCSP child_kind = child.get('kind') DCNL DCSP  DCSP  DCSP if (child_kind in channel_data['kind_blacklist']): DCNL DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif (child[channel_data['slug_key'][child_kind]] in channel_data['slug_blacklist']): DCNL DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif (not child.get('live', True)): DCNL DCSP  DCSP  DCSP  DCSP logging.debug(('Removing DCSP non-live DCSP child: DCSP %s' % child[channel_data['slug_key'][child_kind]])) DCNL DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif child.get('hide', False): DCNL DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP  DCSP logging.debug(('Removing DCSP hidden DCSP child: DCSP %s' % child[channel_data['slug_key'][child_kind]])) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP elif ((child_kind == 'Video') and (set(['mp4', 'png']) - set(child.get('download_urls', {}).keys()))): DCNL DCSP  DCSP  DCSP  DCSP logging.warn(('No DCSP download DCSP link DCSP for DCSP video: DCSP %s\n' % child.get('youtube_id', child.get('id', '')))) DCNL DCSP  DCSP  DCSP  DCSP if channel_data.get('require_download_link', False): DCNL DCSP  DCSP  DCSP  DCSP  DCSP children_to_delete.append(i) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP child_kinds = child_kinds.union(set([child_kind])) DCNL DCSP  DCSP  DCSP child_kinds = child_kinds.union(recurse_nodes(child, path=node['path'])) DCNL DCSP  DCSP for i in reversed(children_to_delete): DCNL DCSP  DCSP  DCSP del node['children'][i] DCNL DCSP  DCSP if (kind == 'Topic'): DCNL DCSP  DCSP  DCSP node['contains'] = list(child_kinds) DCNL DCSP  DCSP return child_kinds DCNL DCSP recurse_nodes(topic_tree) DCNL DCSP dedupe_paths(topic_tree) DCNL DCSP def recurse_nodes_to_remove_childless_nodes(node): DCNL DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Remove DCSP dead-end DCSP topics.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP children_to_delete = [] DCNL DCSP  DCSP for (ci, child) in enumerate(node.get('children', [])): DCNL DCSP  DCSP  DCSP if (child['kind'] != 'Topic'): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP recurse_nodes_to_remove_childless_nodes(child) DCNL DCSP  DCSP  DCSP if (not child.get('children')): DCNL DCSP  DCSP  DCSP  DCSP children_to_delete.append(ci) DCNL DCSP  DCSP  DCSP  DCSP logging.warn(('Removing DCSP childless DCSP topic: DCSP %s' % child['slug'])) DCNL DCSP  DCSP for ci in reversed(children_to_delete): DCNL DCSP  DCSP  DCSP del node['children'][ci] DCNL DCSP recurse_nodes_to_remove_childless_nodes(topic_tree) DCNL DCSP return (topic_tree, exercises, assessment_items, contents)
def build_full_cache(items, id_key='id', ids=None): DCNL  DCSP return dict(((item['id'], item) for item in items))
def construct_node(location, parent_path, node_cache, channel): DCNL  DCSP children = [] DCNL DCSP location = (location if ((not location) or (location[(-1)] != '/')) else location[:(-1)]) DCNL DCSP base_name = os.path.basename(location) DCNL DCSP if base_name.endswith('.json'): DCNL DCSP  DCSP return None DCNL DCSP if (not parent_path): DCNL DCSP  DCSP base_name = channel['name'] DCNL DCSP slug = slugify(unicode('.'.join(base_name.split('.')[:(-1)]))) DCNL DCSP if ((not slug) or (slug in node_cache['Slugs'])): DCNL DCSP  DCSP slug = slugify(unicode(base_name)) DCNL DCSP node_cache['Slugs'].add(slug) DCNL DCSP current_path = os.path.join(parent_path, slug) DCNL DCSP try: DCNL DCSP  DCSP with open((location + '.json'), 'r') as f: DCNL DCSP  DCSP  DCSP meta_data = json.load(f) DCNL DCSP except IOError: DCNL DCSP  DCSP meta_data = {} DCNL DCSP  DCSP logging.warning('No DCSP metadata DCSP for DCSP file DCSP {base_name}'.format(base_name=base_name)) DCNL DCSP node = {'path': current_path, 'slug': slug} DCNL DCSP if os.path.isdir(location): DCNL DCSP  DCSP node.update({'kind': 'Topic', 'id': (slug if parent_path else 'root'), 'children': sorted([construct_node(os.path.join(location, s), current_path, node_cache, channel) for s in os.listdir(location)], key=(lambda x: (((not x.get('topic_spotlight', False)) if x else True), (x.get('title', '') if x else ''))))}) DCNL DCSP  DCSP node['children'] = [child for child in node['children'] if child] DCNL DCSP  DCSP node.update(meta_data) DCNL DCSP  DCSP contains = set([]) DCNL DCSP  DCSP for ch in node['children']: DCNL DCSP  DCSP  DCSP contains = contains.union(ch.get('contains', set([]))) DCNL DCSP  DCSP  DCSP contains = contains.union(set([ch['kind']])) DCNL DCSP  DCSP node['contains'] = list(contains) DCNL DCSP else: DCNL DCSP  DCSP extension = base_name.split('.')[(-1)] DCNL DCSP  DCSP kind = file_kind_map.get(extension) DCNL DCSP  DCSP if (not kind): DCNL DCSP  DCSP  DCSP return None DCNL DCSP  DCSP elif (kind in ['Video', 'Audio', 'Image']): DCNL DCSP  DCSP  DCSP from hachoir_core.cmd_line import unicodeFilename DCNL DCSP  DCSP  DCSP from hachoir_parser import createParser DCNL DCSP  DCSP  DCSP from hachoir_metadata import extractMetadata DCNL DCSP  DCSP  DCSP filename = unicodeFilename(location) DCNL DCSP  DCSP  DCSP parser = createParser(filename, location) DCNL DCSP  DCSP  DCSP if parser: DCNL DCSP  DCSP  DCSP  DCSP info = extractMetadata(parser) DCNL DCSP  DCSP  DCSP  DCSP data_meta = {} DCNL DCSP  DCSP  DCSP  DCSP for (meta_key, data_fn) in file_meta_data_map.items(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if data_fn(info): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP data_meta[meta_key] = data_fn(info) DCNL DCSP  DCSP  DCSP  DCSP if data_meta.get('codec'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP data_meta['{kind}_codec'.format(kind=kind.lower())] = data_meta['codec'] DCNL DCSP  DCSP  DCSP  DCSP  DCSP del data_meta['codec'] DCNL DCSP  DCSP  DCSP  DCSP data_meta.update(meta_data) DCNL DCSP  DCSP  DCSP  DCSP meta_data = data_meta DCNL DCSP  DCSP elif (kind == 'Exercise'): DCNL DCSP  DCSP  DCSP zf = zipfile.ZipFile(open(location, 'rb'), 'r') DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP data_meta = json.loads(zf.read('exercise.json')) DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP data_meta = {} DCNL DCSP  DCSP  DCSP  DCSP logging.debug('No DCSP exercise DCSP metadata DCSP available DCSP in DCSP zipfile') DCNL DCSP  DCSP  DCSP meta_data.update(data_meta) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP assessment_items = json.loads(zf.read('assessment_items.json')) DCNL DCSP  DCSP  DCSP except KeyError: DCNL DCSP  DCSP  DCSP  DCSP assessment_items = [] DCNL DCSP  DCSP  DCSP  DCSP logging.debug('No DCSP assessment DCSP items DCSP found DCSP in DCSP zipfile') DCNL DCSP  DCSP  DCSP for filename in zf.namelist(): DCNL DCSP  DCSP  DCSP  DCSP if (os.path.splitext(filename)[0] != 'json'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP zf.extract(filename, os.path.join(settings.ASSESSMENT_ITEM_ROOT, channel)) DCNL DCSP  DCSP id = file_md5(channel['id'], location) DCNL DCSP  DCSP node.update({'id': id, 'kind': kind}) DCNL DCSP  DCSP if (kind != 'Exercise'): DCNL DCSP  DCSP  DCSP node.update({'format': extension}) DCNL DCSP  DCSP  DCSP shutil.copy(location, os.path.join(settings.CONTENT_ROOT, ((id + '.') + extension))) DCNL DCSP  DCSP  DCSP logging.debug(('%s DCSP file DCSP %s DCSP to DCSP local DCSP content DCSP directory.' % ('Copied', slug))) DCNL DCSP  DCSP node.update(meta_data) DCNL DCSP if ('title' not in node): DCNL DCSP  DCSP logging.warning('Title DCSP missing DCSP from DCSP file DCSP {base_name}, DCSP using DCSP file DCSP name DCSP instead'.format(base_name=base_name)) DCNL DCSP  DCSP if os.path.isdir(location): DCNL DCSP  DCSP  DCSP node['title'] = base_name DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP node['title'] = os.path.splitext(base_name)[0] DCNL DCSP for key in ['tags', 'keywords']: DCNL DCSP  DCSP if isinstance(node.get(key, []), basestring): DCNL DCSP  DCSP  DCSP node[key] = [node[key]] DCNL DCSP if (not os.path.isdir(location)): DCNL DCSP  DCSP nodecopy = copy.deepcopy(node) DCNL DCSP  DCSP if (kind == 'Exercise'): DCNL DCSP  DCSP  DCSP node_cache['Exercise'].append(nodecopy) DCNL DCSP  DCSP  DCSP node_cache['AssessmentItem'].extend(assessment_items) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP node_cache['Content'].append(nodecopy) DCNL DCSP return node
def channel_data_files(dest=None): DCNL  DCSP channel_data_filename = 'channel_data.json' DCNL DCSP if dest: DCNL DCSP  DCSP if (not channel_data_path): DCNL DCSP  DCSP  DCSP sourcedir = os.path.dirname(path) DCNL DCSP  DCSP  DCSP sourcefile = ((os.path.basename(path) + '.json') if os.path.exists((os.path.basename(path) + '.json')) else channel_data_filename) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP sourcedir = channel_data_path DCNL DCSP  DCSP  DCSP sourcefile = channel_data_filename DCNL DCSP  DCSP shutil.copy(os.path.join(sourcedir, sourcefile), os.path.join(dest, channel_data_filename)) DCNL DCSP  DCSP shutil.rmtree(os.path.join(dest, 'images'), ignore_errors=True) DCNL DCSP  DCSP shutil.copytree(os.path.join(sourcedir, 'images'), os.path.join(dest, 'images'))
def set_language_data_from_request(request): DCNL  DCSP if ('default_language' not in request.session): DCNL DCSP  DCSP request.session['default_language'] = select_best_available_language((getattr(request.session.get('facility_user'), 'default_language', None) or get_default_language())) DCNL DCSP cur_lang = (request.GET.get('lang') or request.session.get('default_language')) DCNL DCSP set_request_language(request, lang_code=cur_lang)
def get_locale_path(lang_code=None): DCNL  DCSP if (not lang_code): DCNL DCSP  DCSP return settings.USER_WRITABLE_LOCALE_DIR DCNL DCSP else: DCNL DCSP  DCSP return os.path.join(settings.USER_WRITABLE_LOCALE_DIR, lcode_to_django_dir(lang_code))
def get_po_filepath(lang_code, filename=None): DCNL  DCSP base_dirpath = os.path.join(get_locale_path(lang_code=lang_code), 'LC_MESSAGES') DCNL DCSP return ((filename and os.path.join(base_dirpath, filename)) or base_dirpath)
def get_langcode_map(lang_name=None, force=False): DCNL  DCSP global LANG2CODE_MAP DCNL DCSP if (force or (not LANG2CODE_MAP)): DCNL DCSP  DCSP LANG2CODE_MAP = {} DCNL DCSP  DCSP for (code, entries) in get_code2lang_map(force=force).iteritems(): DCNL DCSP  DCSP  DCSP for lang in entries.values(): DCNL DCSP  DCSP  DCSP  DCSP if lang: DCNL DCSP  DCSP  DCSP  DCSP  DCSP LANG2CODE_MAP[lang.lower()] = lcode_to_ietf(code) DCNL DCSP return (LANG2CODE_MAP.get(lang_name) if lang_name else LANG2CODE_MAP)
def get_subtitle_file_path(lang_code=None, youtube_id=None): DCNL  DCSP srt_path = os.path.join(settings.STATIC_ROOT, 'srt') DCNL DCSP if lang_code: DCNL DCSP  DCSP srt_path = os.path.join(srt_path, lcode_to_django_dir(lang_code), 'subtitles') DCNL DCSP if youtube_id: DCNL DCSP  DCSP srt_path = os.path.join(srt_path, (youtube_id + '.vtt')) DCNL DCSP return srt_path
def get_code2lang_map(lang_code=None, force=False): DCNL  DCSP global CODE2LANG_MAP DCNL DCSP if (force or (not CODE2LANG_MAP)): DCNL DCSP  DCSP lmap = softload_json(settings.LANG_LOOKUP_FILEPATH, logger=logging.debug) DCNL DCSP  DCSP CODE2LANG_MAP = {} DCNL DCSP  DCSP for (lc, entry) in lmap.iteritems(): DCNL DCSP  DCSP  DCSP CODE2LANG_MAP[lcode_to_ietf(lc)] = entry DCNL DCSP return (CODE2LANG_MAP.get(lcode_to_ietf(lang_code)) if lang_code else CODE2LANG_MAP)
def get_language_name(lang_code, native=None, error_on_missing=False): DCNL  DCSP lang_code = lcode_to_ietf(lang_code) DCNL DCSP language_entry = get_code2lang_map(lang_code) DCNL DCSP if (not language_entry): DCNL DCSP  DCSP if error_on_missing: DCNL DCSP  DCSP  DCSP raise LanguageNotFoundError(("We DCSP don't DCSP have DCSP language DCSP code DCSP '%s' DCSP saved DCSP in DCSP our DCSP lookup DCSP dictionary DCSP (location: DCSP %s). DCSP Please DCSP manually DCSP add DCSP it DCSP before DCSP re-running DCSP this DCSP command." % (lang_code, settings.LANG_LOOKUP_FILEPATH))) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP language_entry = {'name': lang_code, 'native_name': lang_code} DCNL DCSP if (not isinstance(language_entry, dict)): DCNL DCSP  DCSP return language_entry DCNL DCSP elif (native is None): DCNL DCSP  DCSP return (language_entry.get('native_name') or language_entry.get('ka_name') or language_entry.get('name')) DCNL DCSP elif (not native): DCNL DCSP  DCSP return language_entry.get('name') DCNL DCSP else: DCNL DCSP  DCSP return language_entry.get('native_name')
def convert_language_code_format(lang_code, for_django=True): DCNL  DCSP if (not lang_code): DCNL DCSP  DCSP return lang_code DCNL DCSP lang_code = lang_code.lower() DCNL DCSP code_parts = re.split('-|_', lang_code) DCNL DCSP if (len(code_parts) > 1): DCNL DCSP  DCSP assert (len(code_parts) == 2), 'code_parts DCSP was: DCSP {0}'.format(code_parts) DCNL DCSP  DCSP code_parts[1] = code_parts[1].upper() DCNL DCSP  DCSP if for_django: DCNL DCSP  DCSP  DCSP lang_code = '_'.join(code_parts) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP lang_code = '-'.join(code_parts) DCNL DCSP return lang_code
def outdated_langpacks(): DCNL  DCSP langpacks = get_installed_language_packs(force=True) DCNL DCSP for langpack in langpacks.itervalues(): DCNL DCSP  DCSP langpackversion = LooseVersion((langpack.get('software_version') or SHORTVERSION)) DCNL DCSP  DCSP current_software_version = LooseVersion(SHORTVERSION) DCNL DCSP  DCSP if (current_software_version > langpackversion): DCNL DCSP  DCSP  DCSP (yield langpack)
def _get_installed_language_packs(): DCNL  DCSP installed_language_packs = [{'code': 'en', 'software_version': SHORTVERSION, 'language_pack_version': 0, 'percent_translated': 100, 'subtitle_count': 0, 'name': 'English', 'native_name': 'English'}] DCNL DCSP for locale_dir in settings.LOCALE_PATHS: DCNL DCSP  DCSP if (not os.path.exists(locale_dir)): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP for django_disk_code in os.listdir(locale_dir): DCNL DCSP  DCSP  DCSP if (not os.path.isdir(os.path.join(locale_dir, django_disk_code))): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP metadata_filepath = os.path.join(locale_dir, django_disk_code, ('%s_metadata.json' % lcode_to_ietf(django_disk_code))) DCNL DCSP  DCSP  DCSP  DCSP lang_meta = softload_json(metadata_filepath, raises=True) DCNL DCSP  DCSP  DCSP  DCSP logging.debug(('Found DCSP language DCSP pack DCSP %s' % django_disk_code)) DCNL DCSP  DCSP  DCSP except IOError as e: DCNL DCSP  DCSP  DCSP  DCSP if (e.errno == errno.ENOENT): DCNL DCSP  DCSP  DCSP  DCSP  DCSP logging.info(('Ignoring DCSP non-language DCSP pack DCSP %s DCSP in DCSP %s' % (django_disk_code, locale_dir))) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP logging.error(('Error DCSP reading DCSP %s DCSP metadata DCSP (%s): DCSP %s' % (django_disk_code, metadata_filepath, e))) DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP installed_language_packs.append(lang_meta) DCNL DCSP sorted_list = sorted(installed_language_packs, key=(lambda m: m['name'].lower())) DCNL DCSP return OrderedDict([(lcode_to_ietf(val['code']), val) for val in sorted_list])
def get_default_language(): DCNL  DCSP return (Settings.get('default_language') or settings.LANGUAGE_CODE or 'en')
def set_default_language(lang_code): DCNL  DCSP Settings.set('default_language', lcode_to_ietf(lang_code))
def update_jsi18n_file(code='en'): DCNL  DCSP translation.activate(code) DCNL DCSP output_dir = os.path.join(settings.CONTENT_ROOT, 'locale', 'js', 'i18n') DCNL DCSP ensure_dir(output_dir) DCNL DCSP output_file = os.path.join(output_dir, ('%s.js' % code)) DCNL DCSP request = HttpRequest() DCNL DCSP request.path = output_file DCNL DCSP request.session = {settings.LANGUAGE_COOKIE_NAME: code} DCNL DCSP response = javascript_catalog(request, packages=('ka-lite.locale',), domain='djangojs') DCNL DCSP icu_js = '' DCNL DCSP for path in settings.LOCALE_PATHS: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP icu_js = open(os.path.join(path, code, ('%s_icu.js' % code)), 'r').read() DCNL DCSP  DCSP except IOError: DCNL DCSP  DCSP  DCSP logging.warn('No DCSP {code}_icu.js DCSP file DCSP found DCSP in DCSP locale_path DCSP {path}'.format(code=code, path=path)) DCNL DCSP output_js = ((response.content + '\n') + icu_js) DCNL DCSP logging.info('Writing DCSP i18nized DCSP js DCSP file DCSP to DCSP {0}'.format(output_file)) DCNL DCSP with open(output_file, 'w') as fp: DCNL DCSP  DCSP fp.write(output_js) DCNL DCSP translation.deactivate()
def select_best_available_language(target_code, available_codes=None): DCNL  DCSP target_code = lcode_to_django_lang(target_code) DCNL DCSP store_cache = False DCNL DCSP if (available_codes is None): DCNL DCSP  DCSP if (target_code in __select_best_available_language): DCNL DCSP  DCSP  DCSP return __select_best_available_language[target_code] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP store_cache = True DCNL DCSP  DCSP  DCSP available_codes = get_installed_language_packs().keys() DCNL DCSP available_codes = [lcode_to_django_lang(lc) for lc in available_codes if lc] DCNL DCSP if (target_code in available_codes): DCNL DCSP  DCSP actual_code = target_code DCNL DCSP elif (target_code.split('-', 1)[0] in available_codes): DCNL DCSP  DCSP actual_code = target_code.split('-', 1)[0] DCNL DCSP elif (settings.LANGUAGE_CODE in available_codes): DCNL DCSP  DCSP actual_code = settings.LANGUAGE_CODE DCNL DCSP elif ('en' in available_codes): DCNL DCSP  DCSP actual_code = 'en' DCNL DCSP elif available_codes: DCNL DCSP  DCSP actual_code = available_codes[0] DCNL DCSP else: DCNL DCSP  DCSP raise RuntimeError('No DCSP languages DCSP found') DCNL DCSP if store_cache: DCNL DCSP  DCSP __select_best_available_language[target_code] = actual_code DCNL DCSP return actual_code
def download_content_pack(fobj, lang, minimal=False): DCNL  DCSP url = CONTENT_PACK_URL_TEMPLATE.format(version=SHORTVERSION, langcode=lang, suffix=('-minimal' if minimal else '')) DCNL DCSP logging.info('Downloading DCSP content DCSP pack DCSP from DCSP {}'.format(url)) DCNL DCSP httpf = urllib.urlopen(url) DCNL DCSP shutil.copyfileobj(httpf, fobj) DCNL DCSP fobj.seek(0) DCNL DCSP zf = zipfile.ZipFile(fobj) DCNL DCSP httpf.close() DCNL DCSP return zf
def extract_content_db(zf, lang, is_template=False): DCNL  DCSP if (not is_template): DCNL DCSP  DCSP content_db_path = topic_settings.CONTENT_DATABASE_PATH.format(channel=topic_settings.CHANNEL, language=lang) DCNL DCSP else: DCNL DCSP  DCSP content_db_path = topic_settings.CONTENT_DATABASE_TEMPLATE_PATH.format(channel=topic_settings.CHANNEL, language=lang) DCNL DCSP with open(content_db_path, 'wb') as f: DCNL DCSP  DCSP dbfobj = zf.open('content.db') DCNL DCSP  DCSP shutil.copyfileobj(dbfobj, f)
def i18nize_parser(parse_dir, extensions, parse_file, ignores): DCNL  DCSP filenames_to_process = [] DCNL DCSP for (dirpath, dirnames, filenames) in os.walk(parse_dir): DCNL DCSP  DCSP logging.info(('==> DCSP Looking DCSP for DCSP template DCSP file/s DCSP at DCSP %s' % dirpath)) DCNL DCSP  DCSP for filename in filenames: DCNL DCSP  DCSP  DCSP full_filename = os.path.join(dirpath, filename) DCNL DCSP  DCSP  DCSP if is_ignored(full_filename, ignores): DCNL DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP for extension in extensions: DCNL DCSP  DCSP  DCSP  DCSP if filename.endswith(extension): DCNL DCSP  DCSP  DCSP  DCSP  DCSP file_path = os.path.join(dirpath, filename) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if parse_file: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (not file_path.endswith(parse_file)): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP logging.info(('==> DCSP Processing DCSP single DCSP template DCSP file DCSP %s...' % parse_file)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP filenames_to_process.append(file_path) DCNL DCSP if filenames_to_process: DCNL DCSP  DCSP logging.info(('Found DCSP %s DCSP template/s DCSP to DCSP process...' % (len(filenames_to_process),))) DCNL DCSP  DCSP logging.info('Calling DCSP `i18nize-templates`...') DCNL DCSP  DCSP filenames = ' DCSP '.join(filenames_to_process) DCNL DCSP  DCSP subprocess.call(('i18nize-templates DCSP %s' % (filenames,)), shell=True) DCNL DCSP  DCSP logging.info('DONE DCSP processing.') DCNL DCSP else: DCNL DCSP  DCSP logging.info(('Did DCSP not DCSP find DCSP any DCSP files DCSP with DCSP extensions DCSP [%s] DCSP to DCSP process!' % (', DCSP '.join(extensions),)))
def is_ignored(filepath, ignores): DCNL  DCSP for ignore in ignores: DCNL DCSP  DCSP if (ignore in filepath): DCNL DCSP  DCSP  DCSP return True DCNL DCSP else: DCNL DCSP  DCSP return False
def _is_central_object_admin(object_list, bundle): DCNL  DCSP user = bundle.request.user DCNL DCSP if (not user.is_authenticated()): DCNL DCSP  DCSP return False DCNL DCSP else: DCNL DCSP  DCSP for obj in object_list: DCNL DCSP  DCSP  DCSP if (not user.get_profile().has_permission_for_object(obj)): DCNL DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP return True
def _user_is_admin(object_list, bundle): DCNL  DCSP if (settings.CENTRAL_SERVER and _is_central_object_admin(object_list, bundle)): DCNL DCSP  DCSP return True DCNL DCSP if getattr(bundle.request, 'is_admin', False): DCNL DCSP  DCSP return True
def open_json_or_yml(file_name): DCNL  DCSP try: DCNL DCSP  DCSP import json DCNL DCSP  DCSP json_file = '{0}.json'.format(*os.path.splitext(file_name)) DCNL DCSP  DCSP with open(json_file, 'r') as f: DCNL DCSP  DCSP  DCSP return json.load(f) DCNL DCSP except IOError: DCNL DCSP  DCSP import yaml DCNL DCSP  DCSP yml_file = '{0}.yml'.format(*os.path.splitext(file_name)) DCNL DCSP  DCSP with open(yml_file, 'r') as f: DCNL DCSP  DCSP  DCSP return yaml.load(f)
def get_user_from_request(handler=None, request=None, *args, **kwargs): DCNL  DCSP assert (handler or request) DCNL DCSP if (not handler): DCNL DCSP  DCSP handler = (lambda request, user, *args, **kwargs: user) DCNL DCSP def get_user_from_request_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP user = (get_object_or_None(FacilityUser, id=request.REQUEST['user']) if ('user' in request.REQUEST) else None) DCNL DCSP  DCSP user = (user or request.session.get('facility_user')) DCNL DCSP  DCSP return handler(request, user=user, *args, **kwargs) DCNL DCSP return (get_user_from_request_wrapper_fn if (not request) else get_user_from_request_wrapper_fn(request=request, *args, **kwargs))
def require_login(handler): DCNL  DCSP def require_login_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP if getattr(request, 'is_logged_in', False): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP raise PermissionDenied(_('You DCSP must DCSP be DCSP logged DCSP in DCSP to DCSP access DCSP this DCSP page.')) DCNL DCSP return require_login_wrapper_fn
def require_admin(handler): DCNL  DCSP @require_login DCNL DCSP def require_admin_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP if ((settings.CENTRAL_SERVER and request.user.is_authenticated()) or getattr(request, 'is_admin', False)): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP facility_user_id = kwargs.get('facility_user_id') DCNL DCSP  DCSP if (request.session.get('facility_user') and (facility_user_id == request.session.get('facility_user').id)): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP raise PermissionDenied(_('You DCSP must DCSP be DCSP logged DCSP in DCSP as DCSP an DCSP admin DCSP to DCSP access DCSP this DCSP page.')) DCNL DCSP return require_admin_wrapper_fn
def require_authorized_access_to_student_data(handler): DCNL  DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP return require_authorized_admin(handler) DCNL DCSP else: DCNL DCSP  DCSP @require_login DCNL DCSP  DCSP def require_authorized_access_to_student_data_wrapper_fn_distributed(request, *args, **kwargs): DCNL DCSP  DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP Everything DCSP is DCSP allowed DCSP for DCSP admins DCSP on DCSP distributed DCSP server.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP For DCSP students, DCSP they DCSP can DCSP only DCSP access DCSP their DCSP own DCSP account.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP  DCSP if getattr(request, 'is_admin', False): DCNL DCSP  DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP user = get_user_from_request(request=request) DCNL DCSP  DCSP  DCSP  DCSP if (request.session.get('facility_user') == user): DCNL DCSP  DCSP  DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_('You DCSP requested DCSP information DCSP for DCSP a DCSP user DCSP that DCSP you DCSP are DCSP not DCSP authorized DCSP to DCSP view.')) DCNL DCSP  DCSP  DCSP return require_admin(handler) DCNL DCSP  DCSP return require_authorized_access_to_student_data_wrapper_fn_distributed
def require_authorized_admin(handler): DCNL  DCSP @require_admin DCNL DCSP def require_authorized_admin_wrapper_fn_central(request, *args, **kwargs): DCNL DCSP  DCSP '\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP The DCSP check DCSP for DCSP distributed DCSP servers DCSP already DCSP exists DCSP (require_login), DCSP so DCSP just DCSP use DCSP that DCSP below.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP All DCSP this DCSP nuance DCSP is DCSP for DCSP the DCSP central DCSP server DCSP only.\n DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP ' DCNL DCSP  DCSP from centralserver.central.models import Organization DCNL DCSP  DCSP logged_in_user = request.user DCNL DCSP  DCSP assert (not logged_in_user.is_anonymous()), 'Wrapped DCSP by DCSP login_required!' DCNL DCSP  DCSP if logged_in_user.is_superuser: DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP org = None DCNL DCSP  DCSP org_id = kwargs.get('org_id') DCNL DCSP  DCSP zone = None DCNL DCSP  DCSP zone_id = kwargs.get('zone_id') DCNL DCSP  DCSP facility = facility_from_request(request=request, *args, **kwargs) DCNL DCSP  DCSP device = None DCNL DCSP  DCSP device_id = kwargs.get('device_id') DCNL DCSP  DCSP user = get_user_from_request(request=request, *args, **kwargs) DCNL DCSP  DCSP if user: DCNL DCSP  DCSP  DCSP if (not facility): DCNL DCSP  DCSP  DCSP  DCSP facility = user.facility DCNL DCSP  DCSP if device_id: DCNL DCSP  DCSP  DCSP device = get_object_or_404(Device, pk=device_id) DCNL DCSP  DCSP  DCSP if (not zone_id): DCNL DCSP  DCSP  DCSP  DCSP zone = device.get_zone() DCNL DCSP  DCSP  DCSP  DCSP if (not zone): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_('You DCSP requested DCSP device DCSP information DCSP for DCSP a DCSP device DCSP without DCSP a DCSP sharing DCSP network. DCSP  DCSP Only DCSP super DCSP users DCSP can DCSP do DCSP this!')) DCNL DCSP  DCSP  DCSP  DCSP zone_id = zone.pk DCNL DCSP  DCSP if facility: DCNL DCSP  DCSP  DCSP if (not zone_id): DCNL DCSP  DCSP  DCSP  DCSP zone = facility.get_zone() DCNL DCSP  DCSP  DCSP  DCSP if (not zone): DCNL DCSP  DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_('You DCSP requested DCSP facility DCSP information DCSP for DCSP a DCSP facility DCSP with DCSP no DCSP sharing DCSP network. DCSP  DCSP Only DCSP super DCSP users DCSP can DCSP do DCSP this!')) DCNL DCSP  DCSP  DCSP  DCSP zone_id = zone.pk DCNL DCSP  DCSP if (zone_id and (zone_id != 'new')): DCNL DCSP  DCSP  DCSP zone = get_object_or_404(Zone, pk=zone_id) DCNL DCSP  DCSP  DCSP if (not org_id): DCNL DCSP  DCSP  DCSP  DCSP for org in Organization.from_zone(zone): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if org.is_member(logged_in_user): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_("You DCSP requested DCSP information DCSP from DCSP an DCSP organization DCSP that DCSP you're DCSP not DCSP authorized DCSP on.")) DCNL DCSP  DCSP if (org_id and (org_id != 'new')): DCNL DCSP  DCSP  DCSP org = get_object_or_404(Organization, pk=org_id) DCNL DCSP  DCSP  DCSP if (not org.is_member(logged_in_user)): DCNL DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_("You DCSP requested DCSP information DCSP from DCSP an DCSP organization DCSP that DCSP you're DCSP not DCSP authorized DCSP on.")) DCNL DCSP  DCSP  DCSP elif (zone_id and zone and (org.zones.filter(pk=zone.pk).count() == 0)): DCNL DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_('This DCSP organization DCSP is DCSP not DCSP linked DCSP to DCSP the DCSP requested DCSP sharing DCSP network.')) DCNL DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP return (require_authorized_admin_wrapper_fn_central if settings.CENTRAL_SERVER else require_admin(handler))
def require_superuser(handler): DCNL  DCSP def require_superuser_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP if getattr(request.user, 'is_superuser', False): DCNL DCSP  DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP raise PermissionDenied(_('You DCSP must DCSP be DCSP logged DCSP in DCSP as DCSP a DCSP superuser DCSP to DCSP access DCSP this DCSP endpoint.')) DCNL DCSP return require_superuser_wrapper_fn
def deprecated(func): DCNL  DCSP def new_func(*args, **kwargs): DCNL DCSP  DCSP warnings.warn('Call DCSP to DCSP deprecated DCSP function DCSP {0}.'.format(func.__name__), category=DeprecationWarning) DCNL DCSP  DCSP return func(*args, **kwargs) DCNL DCSP new_func.__name__ = func.__name__ DCNL DCSP new_func.__doc__ = func.__doc__ DCNL DCSP new_func.__dict__.update(func.__dict__) DCNL DCSP return new_func
@contextmanager DCNL def inside_transaction(): DCNL  DCSP savepoint = transaction.savepoint() DCNL DCSP try: DCNL DCSP  DCSP (yield) DCNL DCSP except Exception: DCNL DCSP  DCSP transaction.savepoint_rollback(savepoint) DCNL DCSP  DCSP raise DCNL DCSP else: DCNL DCSP  DCSP transaction.savepoint_commit(savepoint)
def get_resume_recommendations(user, request): DCNL  DCSP final = get_most_recent_incomplete_item(user) DCNL DCSP if final: DCNL DCSP  DCSP content = get_content_item(language=request.language, channel=getattr(final, 'channel', 'khan'), content_id=final.get('id')) DCNL DCSP  DCSP return ([content] if content else []) DCNL DCSP else: DCNL DCSP  DCSP return []
def get_completed_exercises(user): DCNL  DCSP exercises_by_user = ExerciseLog.objects.filter(user=user, complete=True).values_list('exercise_id', flat=True) DCNL DCSP return exercises_by_user
def get_next_recommendations(user, request): DCNL  DCSP exercise_parents_table = get_exercise_parents_lookup_table() DCNL DCSP most_recent = get_most_recent_exercises(user) DCNL DCSP complete_exercises = set(get_completed_exercises(user)) DCNL DCSP def filter_complete(ex): DCNL DCSP  DCSP return (ex not in complete_exercises) DCNL DCSP if ((len(most_recent) > 0) and (most_recent[0] in exercise_parents_table)): DCNL DCSP  DCSP current_subtopic = exercise_parents_table[most_recent[0]]['subtopic_id'] DCNL DCSP else: DCNL DCSP  DCSP current_subtopic = None DCNL DCSP if current_subtopic: DCNL DCSP  DCSP topic_tree_based_data = generate_recommendation_data()[current_subtopic]['related_subtopics'][:settings.TOPIC_RECOMMENDATION_DEPTH] DCNL DCSP  DCSP topic_tree_based_data = get_exercises_from_topics(topic_tree_based_data) DCNL DCSP else: DCNL DCSP  DCSP topic_tree_based_data = [] DCNL DCSP topic_tree_based_data = [ex for ex in topic_tree_based_data if ((ex not in most_recent) or filter_complete(ex))] DCNL DCSP struggling = filter(filter_complete, get_exercise_prereqs(get_struggling_exercises(user))) DCNL DCSP group = filter(filter_complete, get_group_recommendations(user)) DCNL DCSP final = [] DCNL DCSP for exercise_id in ((group[:2] + struggling[:2]) + topic_tree_based_data[:1]): DCNL DCSP  DCSP if (exercise_id in exercise_parents_table): DCNL DCSP  DCSP  DCSP subtopic_id = exercise_parents_table[exercise_id]['subtopic_id'] DCNL DCSP  DCSP  DCSP exercise = get_content_item(language=request.language, content_id=exercise_id) DCNL DCSP  DCSP  DCSP if exercise: DCNL DCSP  DCSP  DCSP  DCSP exercise['topic'] = (get_content_item(language=request.language, content_id=subtopic_id, topic=True) or {}) DCNL DCSP  DCSP  DCSP  DCSP final.append(exercise) DCNL DCSP return final
def get_group_recommendations(user): DCNL  DCSP recent_exercises = get_most_recent_exercises(user) DCNL DCSP user_list = FacilityUser.objects.filter(group=user.group) DCNL DCSP if recent_exercises: DCNL DCSP  DCSP user_exercises = ExerciseLog.objects.filter(user__in=user_list).order_by('-latest_activity_timestamp').extra(select={'null_complete': 'completion_timestamp DCSP is DCSP null'}, order_by=['-null_complete', '-completion_timestamp']) DCNL DCSP  DCSP exercise_counts = collections.defaultdict((lambda : 0)) DCNL DCSP  DCSP for user in user_list: DCNL DCSP  DCSP  DCSP logs = list(user_exercises.filter(user=user)) DCNL DCSP  DCSP  DCSP for (log, prev_log) in itertools.izip(logs[1:], logs): DCNL DCSP  DCSP  DCSP  DCSP if (log.exercise_id in recent_exercises): DCNL DCSP  DCSP  DCSP  DCSP  DCSP exercise_counts[prev_log.exercise_id] += 1 DCNL DCSP  DCSP exercise_counts = [{'exercise_id': key, 'count': value} for (key, value) in exercise_counts.iteritems()] DCNL DCSP else: DCNL DCSP  DCSP exercise_counts = ExerciseLog.objects.filter(user__in=user_list).values('exercise_id').annotate(count=Count('exercise_id')) DCNL DCSP sorted_counts = sorted(exercise_counts, key=(lambda k: k['count']), reverse=False) DCNL DCSP group_rec = [c['exercise_id'] for c in sorted_counts] DCNL DCSP return group_rec
def get_struggling_exercises(user): DCNL  DCSP struggles = ExerciseLog.objects.filter(user=user, struggling=True).order_by('-latest_activity_timestamp').values_list('exercise_id', flat=True) DCNL DCSP return struggles
def get_exercise_prereqs(exercises): DCNL  DCSP if exercises: DCNL DCSP  DCSP exercises = get_content_items(ids=exercises) DCNL DCSP prereqs = [] DCNL DCSP for exercise in exercises: DCNL DCSP  DCSP prereqs += exercise.get('prerequisites', []) DCNL DCSP return list(set(prereqs))
def get_explore_recommendations(user, request): DCNL  DCSP data = generate_recommendation_data() DCNL DCSP exercise_parents_table = get_exercise_parents_lookup_table() DCNL DCSP recent_exercises = get_most_recent_exercises(user) DCNL DCSP recent_subtopics = list(set([exercise_parents_table[ex]['subtopic_id'] for ex in recent_exercises if (ex in exercise_parents_table)])) DCNL DCSP sampleNum = min(len(recent_subtopics), settings.TOPIC_RECOMMENDATION_DEPTH) DCNL DCSP random_subtopics = random.sample(recent_subtopics, sampleNum) DCNL DCSP added = [] DCNL DCSP final = [] DCNL DCSP for subtopic_id in random_subtopics: DCNL DCSP  DCSP related_subtopics = data[subtopic_id]['related_subtopics'][2:7] DCNL DCSP  DCSP recommended_topic = next((topic for topic in related_subtopics if ((topic not in added) and (topic not in recent_subtopics)))) DCNL DCSP  DCSP if recommended_topic: DCNL DCSP  DCSP  DCSP final.append({'suggested_topic': (get_content_item(language=request.language, content_id=recommended_topic, topic=True) or {}), 'interest_topic': (get_content_item(language=request.language, content_id=subtopic_id, topic=True) or {})}) DCNL DCSP  DCSP  DCSP added.append(recommended_topic) DCNL DCSP return final
def get_exercise_parents_lookup_table(): DCNL  DCSP global exercise_parents_lookup_table DCNL DCSP if exercise_parents_lookup_table: DCNL DCSP  DCSP return exercise_parents_lookup_table DCNL DCSP tree = get_topic_nodes_with_children(parent='root') DCNL DCSP for topic in tree: DCNL DCSP  DCSP for subtopic_id in topic['children']: DCNL DCSP  DCSP  DCSP exercises = get_topic_contents(topic_id=subtopic_id, kinds=['Exercise']) DCNL DCSP  DCSP  DCSP for ex in exercises: DCNL DCSP  DCSP  DCSP  DCSP if (ex['id'] not in exercise_parents_lookup_table): DCNL DCSP  DCSP  DCSP  DCSP  DCSP exercise_parents_lookup_table[ex['id']] = {'subtopic_id': subtopic_id, 'topic_id': topic['id']} DCNL DCSP return exercise_parents_lookup_table
def get_exercises_from_topics(topicId_list): DCNL  DCSP exs = [] DCNL DCSP for topic in topicId_list: DCNL DCSP  DCSP if topic: DCNL DCSP  DCSP  DCSP exercises = get_topic_contents(topic_id=topic, kinds=['Exercise'])[:5] DCNL DCSP  DCSP  DCSP for e in exercises: DCNL DCSP  DCSP  DCSP  DCSP exs += [e['id']] DCNL DCSP return exs
def get_most_recent_incomplete_item(user): DCNL  DCSP exercise_list = list(ExerciseLog.objects.filter(user=user, complete=False).order_by('-latest_activity_timestamp')[:1]) DCNL DCSP video_list = list(VideoLog.objects.filter(user=user, complete=False).order_by('-latest_activity_timestamp')[:1]) DCNL DCSP content_list = list(ContentLog.objects.filter(user=user, complete=False).order_by('-latest_activity_timestamp')[:1]) DCNL DCSP item_list = [] DCNL DCSP if exercise_list: DCNL DCSP  DCSP item_list.append({'timestamp': (exercise_list[0].latest_activity_timestamp or datetime.datetime.min), 'id': exercise_list[0].exercise_id, 'kind': 'Exercise'}) DCNL DCSP if video_list: DCNL DCSP  DCSP item_list.append({'timestamp': (video_list[0].latest_activity_timestamp or datetime.datetime.min), 'id': video_list[0].video_id, 'kind': 'Content'}) DCNL DCSP if content_list: DCNL DCSP  DCSP item_list.append({'timestamp': (content_list[0].latest_activity_timestamp or datetime.datetime.min), 'id': content_list[0].content_id, 'kind': 'Content'}) DCNL DCSP if item_list: DCNL DCSP  DCSP item_list.sort(key=(lambda x: x['timestamp']), reverse=True) DCNL DCSP  DCSP return item_list[0] DCNL DCSP else: DCNL DCSP  DCSP return None
def get_most_recent_exercises(user): DCNL  DCSP exercises_by_user = ExerciseLog.objects.filter(user=user).order_by('-latest_activity_timestamp').values_list('exercise_id', flat=True) DCNL DCSP return exercises_by_user
def generate_recommendation_data(): DCNL  DCSP global recommendation_data DCNL DCSP if recommendation_data: DCNL DCSP  DCSP return recommendation_data DCNL DCSP tree = get_topic_nodes_with_children(parent='root') DCNL DCSP topic_index = 0 DCNL DCSP subtopic_index = 0 DCNL DCSP for topic in tree: DCNL DCSP  DCSP subtopic_index = 0 DCNL DCSP  DCSP for subtopic_id in topic['children']: DCNL DCSP  DCSP  DCSP neighbors_dist_1 = get_neighbors_at_dist_1(topic_index, subtopic_index, topic) DCNL DCSP  DCSP  DCSP recommendation_data[subtopic_id] = {'related_subtopics': ([(subtopic_id + ' DCSP 0')] + neighbors_dist_1)} DCNL DCSP  DCSP  DCSP subtopic_index += 1 DCNL DCSP  DCSP topic_index += 1 DCNL DCSP for subtopic in recommendation_data: DCNL DCSP  DCSP related = recommendation_data[subtopic]['related_subtopics'] DCNL DCSP  DCSP other_neighbors = get_subsequent_neighbors(related, recommendation_data, subtopic) DCNL DCSP  DCSP recommendation_data[subtopic]['related_subtopics'] += other_neighbors DCNL DCSP for subtopic in recommendation_data: DCNL DCSP  DCSP at_dist_4 = [] DCNL DCSP  DCSP at_dist_lt_4 = [] DCNL DCSP  DCSP for recc in recommendation_data[subtopic]['related_subtopics']: DCNL DCSP  DCSP  DCSP if (recc.split(' DCSP ')[1] == '4'): DCNL DCSP  DCSP  DCSP  DCSP at_dist_4.append(recc.split(' DCSP ')[0]) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP at_dist_lt_4.append(recc.split(' DCSP ')[0]) DCNL DCSP  DCSP sorted_related = (at_dist_lt_4 + at_dist_4) DCNL DCSP  DCSP recommendation_data[subtopic]['related_subtopics'] = sorted_related DCNL DCSP return recommendation_data
def get_recommendation_tree(data): DCNL  DCSP recommendation_tree = {} DCNL DCSP for subtopic in data: DCNL DCSP  DCSP recommendation_tree[str(subtopic)] = [] DCNL DCSP  DCSP related_subtopics = data[subtopic]['related_subtopics'] DCNL DCSP  DCSP for rel_subtopic in related_subtopics: DCNL DCSP  DCSP  DCSP if rel_subtopic: DCNL DCSP  DCSP  DCSP  DCSP exercises = get_topic_contents(topic_id=rel_subtopic, kinds=['Exercise']) DCNL DCSP  DCSP  DCSP  DCSP for ex in exercises: DCNL DCSP  DCSP  DCSP  DCSP  DCSP recommendation_tree[str(subtopic)].append(ex['id']) DCNL DCSP return recommendation_tree
def get_recommended_exercises(subtopic_id): DCNL  DCSP if (not subtopic_id): DCNL DCSP  DCSP return [] DCNL DCSP tree = get_recommendation_tree(generate_recommendation_data()) DCNL DCSP return tree[subtopic_id]
def get_neighbors_at_dist_1(topic_index, subtopic_index, topic): DCNL  DCSP neighbors = [] DCNL DCSP tree = get_topic_nodes_with_children(parent='root') DCNL DCSP prev = (subtopic_index - 1) DCNL DCSP next = (subtopic_index + 1) DCNL DCSP if ((prev > (-1)) and (prev < len(topic['children']))): DCNL DCSP  DCSP neighbors.append((topic['children'][prev] + ' DCSP 1')) DCNL DCSP elif (((topic_index - 1) > (-1)) and ((topic_index - 1) < len(tree)) and (len(tree[(topic_index - 1)]['children']) > 1)): DCNL DCSP  DCSP neighbor_length = len(tree[(topic_index - 1)]['children']) DCNL DCSP  DCSP neighbors.append((tree[(topic_index - 1)]['children'][(neighbor_length - 1)] + ' DCSP 4')) DCNL DCSP else: DCNL DCSP  DCSP neighbors.append(' DCSP ') DCNL DCSP if (next < len(topic['children'])): DCNL DCSP  DCSP neighbors.append((topic['children'][next] + ' DCSP 1')) DCNL DCSP elif (((topic_index + 1) < len(tree)) and tree[(topic_index + 1)]['children']): DCNL DCSP  DCSP neighbors.append((tree[(topic_index + 1)]['children'][0] + ' DCSP 4')) DCNL DCSP else: DCNL DCSP  DCSP neighbors.append(' DCSP ') DCNL DCSP return neighbors
def get_subsequent_neighbors(nearest_neighbors, data, curr): DCNL  DCSP left_neigh = nearest_neighbors[1].split(' DCSP ') DCNL DCSP right_neigh = nearest_neighbors[2].split(' DCSP ') DCNL DCSP left = left_neigh[0] DCNL DCSP right = right_neigh[0] DCNL DCSP left_dist = (-1) DCNL DCSP right_dist = (-1) DCNL DCSP at_four_left = False DCNL DCSP at_four_right = False DCNL DCSP if (len(left_neigh) > 1): DCNL DCSP  DCSP left_dist = left_neigh[1] DCNL DCSP else: DCNL DCSP  DCSP left = ' DCSP ' DCNL DCSP if (len(right_neigh) > 1): DCNL DCSP  DCSP right_dist = right_neigh[1] DCNL DCSP else: DCNL DCSP  DCSP right = ' DCSP ' DCNL DCSP other_neighbors = [] DCNL DCSP while ((left != ' DCSP ') or (right != ' DCSP ')): DCNL DCSP  DCSP if (left == ''): DCNL DCSP  DCSP  DCSP left = ' DCSP ' DCNL DCSP  DCSP if (left != ' DCSP '): DCNL DCSP  DCSP  DCSP if (data[left]['related_subtopics'][1] != ' DCSP '): DCNL DCSP  DCSP  DCSP  DCSP if at_four_left: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP  DCSP at_four_left = True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (data[curr]['related_subtopics'][1].split(' DCSP ')[1] == '4'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP at_four_left = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP elif (data[left]['related_subtopics'][1].split(' DCSP ')[1] == '4'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP at_four_left = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 1 DCNL DCSP  DCSP  DCSP  DCSP  DCSP except IndexError: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 1 DCNL DCSP  DCSP  DCSP  DCSP other_neighbors.append(((data[left]['related_subtopics'][1].split(' DCSP ')[0] + ' DCSP ') + str(new_dist))) DCNL DCSP  DCSP  DCSP left = data[left]['related_subtopics'][1].split(' DCSP ')[0] DCNL DCSP  DCSP if (right == ''): DCNL DCSP  DCSP  DCSP right = ' DCSP ' DCNL DCSP  DCSP if (right != ' DCSP '): DCNL DCSP  DCSP  DCSP if (data[right]['related_subtopics'][2] != ' DCSP '): DCNL DCSP  DCSP  DCSP  DCSP if at_four_right: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP  DCSP at_four_right = True DCNL DCSP  DCSP  DCSP  DCSP elif (data[curr]['related_subtopics'][2].split(' DCSP ')[1] == '4'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP elif (data[right]['related_subtopics'][2].split(' DCSP ')[1] == '4'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 4 DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP new_dist = 1 DCNL DCSP  DCSP  DCSP  DCSP if (new_dist == 4): DCNL DCSP  DCSP  DCSP  DCSP  DCSP at_four_right = True DCNL DCSP  DCSP  DCSP  DCSP other_neighbors.append(((data[right]['related_subtopics'][2].split(' DCSP ')[0] + ' DCSP ') + str(new_dist))) DCNL DCSP  DCSP  DCSP right = data[right]['related_subtopics'][2].split(' DCSP ')[0] DCNL DCSP return other_neighbors
def set_database(function): DCNL  DCSP def wrapper(*args, **kwargs): DCNL DCSP  DCSP language = kwargs.get('language', 'en') DCNL DCSP  DCSP path = kwargs.pop('database_path', None) DCNL DCSP  DCSP if (not path): DCNL DCSP  DCSP  DCSP path = CONTENT_DATABASE_PATH.format(channel=kwargs.get('channel', CHANNEL), language=language) DCNL DCSP  DCSP db = SqliteDatabase(path, pragmas=settings.CONTENT_DB_SQLITE_PRAGMAS) DCNL DCSP  DCSP kwargs['db'] = db DCNL DCSP  DCSP db.connect() DCNL DCSP  DCSP with Using(db, [Item, AssessmentItem]): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP output = function(*args, **kwargs) DCNL DCSP  DCSP  DCSP except DoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP output = None DCNL DCSP  DCSP  DCSP except OperationalError: DCNL DCSP  DCSP  DCSP  DCSP logging.error('No DCSP content DCSP database DCSP file DCSP found') DCNL DCSP  DCSP  DCSP  DCSP raise DCNL DCSP  DCSP db.close() DCNL DCSP  DCSP return output DCNL DCSP return wrapper
def parse_data(function): DCNL  DCSP def wrapper(*args, **kwargs): DCNL DCSP  DCSP dicts = kwargs.get('dicts', True) DCNL DCSP  DCSP expanded = kwargs.get('expanded', True) DCNL DCSP  DCSP output = function(*args, **kwargs) DCNL DCSP  DCSP if (dicts and output): DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP if expanded: DCNL DCSP  DCSP  DCSP  DCSP  DCSP output = map(unparse_model_data, output.dicts()) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP output = [item for item in output.dicts()] DCNL DCSP  DCSP  DCSP except (TypeError, OperationalError): DCNL DCSP  DCSP  DCSP  DCSP logging.warn('No DCSP content DCSP database DCSP file DCSP found') DCNL DCSP  DCSP  DCSP  DCSP output = [] DCNL DCSP  DCSP return output DCNL DCSP return wrapper
@parse_data DCNL @set_database DCNL def get_random_content(kinds=None, limit=1, available=None, **kwargs): DCNL  DCSP if (not kinds): DCNL DCSP  DCSP kinds = ['Video', 'Audio', 'Exercise', 'Document'] DCNL DCSP items = Item.select().where(Item.kind.in_(kinds)) DCNL DCSP if (available is not None): DCNL DCSP  DCSP items = items.where((Item.available == available)) DCNL DCSP return items.order_by(fn.Random()).limit(limit)
@set_database DCNL def get_content_item(content_id=None, topic=False, **kwargs): DCNL  DCSP if content_id: DCNL DCSP  DCSP if topic: DCNL DCSP  DCSP  DCSP value = Item.get((Item.id == content_id), (Item.kind == 'Topic')) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP value = Item.get((Item.id == content_id), (Item.kind != 'Topic')) DCNL DCSP  DCSP return model_to_dict(value)
@parse_data DCNL @set_database DCNL def get_content_items(ids=None, **kwargs): DCNL  DCSP if ids: DCNL DCSP  DCSP values = Item.select().where(Item.id.in_(ids)) DCNL DCSP else: DCNL DCSP  DCSP values = Item.select() DCNL DCSP return values
@parse_data DCNL @set_database DCNL def get_topic_nodes(parent=None, ids=None, **kwargs): DCNL  DCSP if parent: DCNL DCSP  DCSP Parent = Item.alias() DCNL DCSP  DCSP if (parent == 'root'): DCNL DCSP  DCSP  DCSP selector = Parent.parent.is_null() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP selector = (Parent.id == parent) DCNL DCSP  DCSP values = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.children, Item.id, Item.path, Item.slug).join(Parent, on=(Item.parent == Parent.pk)).where((selector & Item.available)) DCNL DCSP  DCSP return values DCNL DCSP elif ids: DCNL DCSP  DCSP values = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.children, Item.id, Item.path, Item.slug).where(Item.id.in_(ids)) DCNL DCSP  DCSP return values
@parse_data DCNL @set_database DCNL def get_topic_update_nodes(parent=None, **kwargs): DCNL  DCSP if parent: DCNL DCSP  DCSP Parent = Item.alias() DCNL DCSP  DCSP if (parent == 'root'): DCNL DCSP  DCSP  DCSP selector = Parent.parent.is_null() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP selector = (Parent.id == parent) DCNL DCSP  DCSP values = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.pk, Item.size_on_disk, Item.remote_size, Item.files_complete, Item.total_files, Item.id, Item.path, Item.youtube_id).join(Parent, on=(Item.parent == Parent.pk)).where((selector & (Item.total_files != 0))) DCNL DCSP  DCSP return values
@set_database DCNL def get_topic_node(content_id=None, topic=True, **kwargs): DCNL  DCSP if content_id: DCNL DCSP  DCSP if topic: DCNL DCSP  DCSP  DCSP kind_selector = (Item.kind == 'Topic') DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP kind_selector = (Item.kind != 'Topic') DCNL DCSP  DCSP value = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.children, Item.id, Item.path, Item.slug).where(((Item.id == content_id) & kind_selector)).get() DCNL DCSP  DCSP return model_to_dict(value)
@set_database DCNL def get_topic_nodes_with_children(parent=None, **kwargs): DCNL  DCSP if parent: DCNL DCSP  DCSP Parent = Item.alias() DCNL DCSP  DCSP Child = Item.alias() DCNL DCSP  DCSP if (parent == 'root'): DCNL DCSP  DCSP  DCSP selector = Parent.parent.is_null() DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP selector = (Parent.id == parent) DCNL DCSP  DCSP child_values = [item for item in Item.select(Child).join(Child, on=(Child.parent == Item.pk)).join(Parent, on=(Item.parent == Parent.pk)).where(selector).dicts()] DCNL DCSP  DCSP parent_values = [item for item in Item.select(Item).join(Parent, on=(Item.parent == Parent.pk)).where(selector).dicts()] DCNL DCSP  DCSP topics = [] DCNL DCSP  DCSP for topic in parent_values: DCNL DCSP  DCSP  DCSP output = {} DCNL DCSP  DCSP  DCSP output.update(topic) DCNL DCSP  DCSP  DCSP output['children'] = [child['id'] for child in child_values if (child['parent'] == topic['pk'])] DCNL DCSP  DCSP  DCSP topics.append(output) DCNL DCSP  DCSP return topics
@parse_data DCNL @set_database DCNL def get_content_parents(ids=None, **kwargs): DCNL  DCSP if ids: DCNL DCSP  DCSP Parent = Item.alias() DCNL DCSP  DCSP parent_values = Item.select(Parent).join(Parent, on=(Item.parent == Parent.pk)).where(Item.id.in_(ids)).distinct() DCNL DCSP  DCSP if (parent_values is None): DCNL DCSP  DCSP  DCSP parent_values = list() DCNL DCSP  DCSP return parent_values DCNL DCSP else: DCNL DCSP  DCSP return list()
@parse_data DCNL @set_database DCNL def get_leafed_topics(kinds=None, db=None, **kwargs): DCNL  DCSP if (not kinds): DCNL DCSP  DCSP kinds = ['Video', 'Audio', 'Exercise', 'Document'] DCNL DCSP Parent = Item.alias() DCNL DCSP parent_values = Item.select(Parent).join(Parent, on=(Item.parent == Parent.pk)).where(Item.kind.in_(kinds)).distinct() DCNL DCSP return parent_values
@parse_data DCNL @set_database DCNL def get_topic_contents(kinds=None, topic_id=None, **kwargs): DCNL  DCSP if topic_id: DCNL DCSP  DCSP topic_node = Item.get((Item.id == topic_id), (Item.kind == 'Topic')) DCNL DCSP  DCSP if (not kinds): DCNL DCSP  DCSP  DCSP kinds = ['Video', 'Audio', 'Exercise', 'Document'] DCNL DCSP  DCSP return Item.select(Item).where(Item.kind.in_(kinds), Item.path.contains(topic_node.path))
@set_database DCNL def get_download_youtube_ids(paths=None, downloaded=False, **kwargs): DCNL  DCSP if paths: DCNL DCSP  DCSP youtube_ids = dict() DCNL DCSP  DCSP for path in paths: DCNL DCSP  DCSP  DCSP selector = (((Item.kind != 'Topic') & Item.path.contains(path)) & Item.youtube_id.is_null(False)) DCNL DCSP  DCSP  DCSP if downloaded: DCNL DCSP  DCSP  DCSP  DCSP selector &= (Item.files_complete > 0) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP selector &= (Item.files_complete == 0) DCNL DCSP  DCSP  DCSP youtube_ids.update(dict([item for item in Item.select(Item.youtube_id, Item.title).where(selector).tuples() if item[0]])) DCNL DCSP  DCSP return youtube_ids
def get_video_from_youtube_id(youtube_id): DCNL  DCSP for (channel, language) in available_content_databases(): DCNL DCSP  DCSP video = _get_video_from_youtube_id(channel=channel, language=language, youtube_id=youtube_id) DCNL DCSP  DCSP if video: DCNL DCSP  DCSP  DCSP return video
@parse_data DCNL @set_database DCNL def _get_video_from_youtube_id(youtube_id=None, **kwargs): DCNL  DCSP if youtube_id: DCNL DCSP  DCSP value = Item.get((Item.youtube_id == youtube_id), (Item.kind == 'Video')) DCNL DCSP  DCSP return model_to_dict(value)
@set_database DCNL def search_topic_nodes(kinds=None, query=None, page=1, items_per_page=10, exact=True, **kwargs): DCNL  DCSP if query: DCNL DCSP  DCSP if (not kinds): DCNL DCSP  DCSP  DCSP kinds = ['Video', 'Audio', 'Exercise', 'Document', 'Topic'] DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP topic_node = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.id, Item.path, Item.slug).where(((fn.Lower(Item.title) == query) & Item.kind.in_(kinds))).get() DCNL DCSP  DCSP  DCSP if exact: DCNL DCSP  DCSP  DCSP  DCSP return ([model_to_dict(topic_node)], True, None) DCNL DCSP  DCSP except DoesNotExist: DCNL DCSP  DCSP  DCSP topic_node = {} DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP topic_nodes = Item.select(Item.title, Item.description, Item.available, Item.kind, Item.id, Item.path, Item.slug).where((Item.kind.in_(kinds) & (fn.Lower(Item.title).contains(query) | fn.Lower(Item.extra_fields).contains(query)))) DCNL DCSP  DCSP pages = (topic_nodes.count() / items_per_page) DCNL DCSP  DCSP topic_nodes = [item for item in topic_nodes.paginate(page, items_per_page).dicts()] DCNL DCSP  DCSP if topic_node: DCNL DCSP  DCSP  DCSP topic_nodes.insert(0, model_to_dict(topic_node)) DCNL DCSP  DCSP return (topic_nodes, False, pages)
@set_database DCNL def bulk_insert(items, **kwargs): DCNL  DCSP if items: DCNL DCSP  DCSP db = kwargs.get('db') DCNL DCSP  DCSP items = map(parse_model_data, items) DCNL DCSP  DCSP if db: DCNL DCSP  DCSP  DCSP with db.atomic(): DCNL DCSP  DCSP  DCSP  DCSP for idx in range(0, len(items), 500): DCNL DCSP  DCSP  DCSP  DCSP  DCSP Item.insert_many(items[idx:(idx + 500)]).execute()
@set_database DCNL def create(item, **kwargs): DCNL  DCSP if item: DCNL DCSP  DCSP return Item.create(**parse_model_data(item))
@set_database DCNL def get(item, **kwargs): DCNL  DCSP if item: DCNL DCSP  DCSP selector = None DCNL DCSP  DCSP for (attr, value) in item.iteritems(): DCNL DCSP  DCSP  DCSP if (not selector): DCNL DCSP  DCSP  DCSP  DCSP selector = (getattr(Item, attr) == value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP selector &= (getattr(Item, attr) == value) DCNL DCSP  DCSP return Item.get(selector)
@set_database DCNL def delete_instances(ids, **kwargs): DCNL  DCSP if ids: DCNL DCSP  DCSP for item in Item.select().where(Item.id.in_(ids)): DCNL DCSP  DCSP  DCSP item.delete_instance()
@set_database DCNL def get_or_create(item, **kwargs): DCNL  DCSP if item: DCNL DCSP  DCSP return Item.create_or_get(**parse_model_data(item))
@set_database DCNL def update_item(update=None, path=None, **kwargs): DCNL  DCSP if (update and path): DCNL DCSP  DCSP base_item = Item.get((Item.path == path)) DCNL DCSP  DCSP items = Item.select().where(((Item.id == base_item.id) & (Item.kind == base_item.kind))) DCNL DCSP  DCSP for item in items: DCNL DCSP  DCSP  DCSP if any(((key not in Item._meta.fields) for key in update)): DCNL DCSP  DCSP  DCSP  DCSP item_data = unparse_model_data(item) DCNL DCSP  DCSP  DCSP  DCSP item_data.update(update) DCNL DCSP  DCSP  DCSP  DCSP for (key, value) in parse_model_data(item_data).iteritems(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP setattr(item, key, value) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP for (key, value) in update.iteritems(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP setattr(item, key, value) DCNL DCSP  DCSP  DCSP item.save()
def iterator_content_items(ids=None, channel='khan', language='en', **kwargs): DCNL  DCSP if ids: DCNL DCSP  DCSP items = Item.select().where(Item.id.in_(ids)).dicts().iterator() DCNL DCSP else: DCNL DCSP  DCSP items = Item.select().dicts().iterator() DCNL DCSP mapped_items = itertools.imap(unparse_model_data, items) DCNL DCSP updated_mapped_items = update_content_availability(mapped_items, channel=channel, language=language) DCNL DCSP for (path, update) in updated_mapped_items: DCNL DCSP  DCSP (yield (path, update))
def iterator_content_items_by_youtube_id(ids=None, channel='khan', language='en', **kwargs): DCNL  DCSP if ids: DCNL DCSP  DCSP items = Item.select().where(Item.youtube_id.in_(ids)).dicts().iterator() DCNL DCSP else: DCNL DCSP  DCSP items = Item.select().dicts().iterator() DCNL DCSP mapped_items = itertools.imap(unparse_model_data, items) DCNL DCSP updated_mapped_items = update_content_availability(mapped_items, channel=channel, language=language) DCNL DCSP for (path, update) in updated_mapped_items: DCNL DCSP  DCSP (yield (path, update))
@set_database DCNL def create_table(**kwargs): DCNL  DCSP db = kwargs.get('db') DCNL DCSP if db: DCNL DCSP  DCSP db.create_tables([Item, AssessmentItem])
def annotate_content_models_by_youtube_id(channel='khan', language='en', youtube_ids=None): DCNL  DCSP annotate_content_models(channel=channel, language=language, ids=youtube_ids, iterator_content_items=iterator_content_items_by_youtube_id)
@set_database DCNL def annotate_content_models(channel='khan', language='en', ids=None, iterator_content_items=iterator_content_items, **kwargs): DCNL  DCSP db = kwargs.get('db') DCNL DCSP if db: DCNL DCSP  DCSP content_models = iterator_content_items(ids=ids, channel=channel, language=language) DCNL DCSP  DCSP with db.atomic() as transaction: DCNL DCSP  DCSP  DCSP def update_parent_annotation(parent): DCNL DCSP  DCSP  DCSP  DCSP children = list(Item.select(Item.available, Item.total_files, Item.files_complete, Item.remote_size, Item.size_on_disk).where((Item.parent == parent.pk))) DCNL DCSP  DCSP  DCSP  DCSP available = any((child.available for child in children)) DCNL DCSP  DCSP  DCSP  DCSP total_files = sum((child.total_files for child in children)) DCNL DCSP  DCSP  DCSP  DCSP files_complete = sum((child.files_complete for child in children)) DCNL DCSP  DCSP  DCSP  DCSP child_remote = sum((child.remote_size for child in children if (((not child.available) and (child.kind != 'Topic')) or (child.kind == 'Topic')))) DCNL DCSP  DCSP  DCSP  DCSP child_on_disk = sum((child.size_on_disk for child in children)) DCNL DCSP  DCSP  DCSP  DCSP files_complete = min(total_files, files_complete) DCNL DCSP  DCSP  DCSP  DCSP if (parent.available != available): DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent.available = available DCNL DCSP  DCSP  DCSP  DCSP if (parent.files_complete != files_complete): DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent.files_complete = files_complete DCNL DCSP  DCSP  DCSP  DCSP if (parent.remote_size != child_remote): DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent.remote_size = child_remote DCNL DCSP  DCSP  DCSP  DCSP if (parent.size_on_disk != child_on_disk): DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent.size_on_disk = child_on_disk DCNL DCSP  DCSP  DCSP  DCSP if parent.is_dirty(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP parent.save() DCNL DCSP  DCSP  DCSP  DCSP  DCSP return True DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return False DCNL DCSP  DCSP  DCSP parents_to_update = {} DCNL DCSP  DCSP  DCSP for (path, update) in content_models: DCNL DCSP  DCSP  DCSP  DCSP if update: DCNL DCSP  DCSP  DCSP  DCSP  DCSP item = Item.get((Item.path == path)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (item.kind != 'Topic'): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item_data = unparse_model_data(model_to_dict(item, recurse=False)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item_data.update(update) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item_data = parse_model_data(item_data) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP for (attr, val) in item_data.iteritems(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP setattr(item, attr, val) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item.save() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP parents_to_update[item.parent.pk] = item.parent DCNL DCSP  DCSP  DCSP while parents_to_update: DCNL DCSP  DCSP  DCSP  DCSP new_parents_to_update = {} DCNL DCSP  DCSP  DCSP  DCSP for node in parents_to_update.values(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP changed = update_parent_annotation(node) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (changed and node.parent): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP new_parents_to_update[node.parent.pk] = node.parent DCNL DCSP  DCSP  DCSP  DCSP parents_to_update = new_parents_to_update
@set_database DCNL def update_parents(parent_mapping=None, **kwargs): DCNL  DCSP if parent_mapping: DCNL DCSP  DCSP db = kwargs.get('db') DCNL DCSP  DCSP if db: DCNL DCSP  DCSP  DCSP with db.atomic() as transaction: DCNL DCSP  DCSP  DCSP  DCSP for (key, value) in parent_mapping.iteritems(): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if value: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP parent = Item.get((Item.id == value), (Item.kind == 'Topic')) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item = Item.get((Item.path == key)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP except DoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP print (key, value, 'Parent DCSP or DCSP Item DCSP not DCSP found') DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if (item and parent): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item.parent = parent DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP item.save()
@set_database DCNL def get_assessment_item_data(assessment_item_id=None, **kwargs): DCNL  DCSP try: DCNL DCSP  DCSP assessment_item = AssessmentItem.get((AssessmentItem.id == assessment_item_id)) DCNL DCSP  DCSP return model_to_dict(assessment_item) DCNL DCSP except OperationalError: DCNL DCSP  DCSP return {}
def available_content_databases(): DCNL  DCSP pattern = re.compile('content_(?P<channel>[^_]+)_(?P<language>[^_]+).sqlite') DCNL DCSP for filename in glob.iglob(django_settings.DEFAULT_DATABASE_DIR): DCNL DCSP  DCSP match = pattern.search(filename) DCNL DCSP  DCSP if match: DCNL DCSP  DCSP  DCSP (yield match.group(1, 2))
def smart_translate_item_data(item_data): DCNL  DCSP if isinstance(item_data, basestring): DCNL DCSP  DCSP return _(item_data) DCNL DCSP elif isinstance(item_data, list): DCNL DCSP  DCSP return map(smart_translate_item_data, item_data) DCNL DCSP elif isinstance(item_data, dict): DCNL DCSP  DCSP if ('content' in item_data): DCNL DCSP  DCSP  DCSP item_data['content'] = (_(item_data['content']) if item_data['content'] else '') DCNL DCSP  DCSP for (field, field_data) in item_data.iteritems(): DCNL DCSP  DCSP  DCSP if isinstance(field_data, dict): DCNL DCSP  DCSP  DCSP  DCSP item_data[field] = smart_translate_item_data(field_data) DCNL DCSP  DCSP  DCSP elif isinstance(field_data, list): DCNL DCSP  DCSP  DCSP  DCSP item_data[field] = map(smart_translate_item_data, field_data) DCNL DCSP  DCSP return item_data
@require_authorized_access_to_student_data DCNL @render_to('coachreports/student_view.html') DCNL def student_view(request): DCNL  DCSP return student_view_context(request=request)
@require_authorized_access_to_student_data DCNL def student_view_context(request): DCNL  DCSP user = get_user_from_request(request=request) DCNL DCSP if (not user): DCNL DCSP  DCSP raise Http404('User DCSP not DCSP found.') DCNL DCSP context = {'facility_id': user.facility.id, 'student': user} DCNL DCSP return context
@require_authorized_admin DCNL @facility_from_request DCNL @render_to('coachreports/coach.html') DCNL def coach_reports(request, facility=None, zone_id=None): DCNL  DCSP zone = get_object_or_None(Zone, pk=zone_id) DCNL DCSP if ((not zone) and settings.CENTRAL_SERVER): DCNL DCSP  DCSP raise Http404('Zone DCSP not DCSP found.') DCNL DCSP if facility: DCNL DCSP  DCSP facility_id = facility.id DCNL DCSP else: DCNL DCSP  DCSP facility_id = None DCNL DCSP return {'facility_id': facility_id, 'zone_id': (zone.id if zone else None)}
def log_coach_report_view(request): DCNL  DCSP if ('facility_user' in request.session): DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user = request.session['facility_user'] DCNL DCSP  DCSP  DCSP UserLog.begin_user_activity(user, activity_type='coachreport') DCNL DCSP  DCSP  DCSP UserLog.update_user_activity(user, activity_type='login') DCNL DCSP  DCSP  DCSP UserLog.end_user_activity(user, activity_type='coachreport') DCNL DCSP  DCSP except ValidationError as e: DCNL DCSP  DCSP  DCSP logging.error(('Failed DCSP to DCSP update DCSP Teacher DCSP userlog DCSP activity DCSP login: DCSP %s' % e))
def unique_by_id_and_kind_sort(seq): DCNL  DCSP seq.sort(key=(lambda x: x.get('sort_order', 0))) DCNL DCSP seen = {} DCNL DCSP result = [] DCNL DCSP for item in seq: DCNL DCSP  DCSP marker = (item.get('id') + item.get('kind')) DCNL DCSP  DCSP if (marker in seen): DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP seen[marker] = 1 DCNL DCSP  DCSP result.append(item) DCNL DCSP return result
def create_some_learner_data(): DCNL  DCSP user = CreateStudentMixin.create_student() DCNL DCSP attempt_states = (('not DCSP started', 0, 0), ('completed', 100, 15), ('attempted', 50, 10), ('struggling', 30, 25)) DCNL DCSP exercises = get_random_content(kinds=['Exercise'], limit=len(attempt_states)) DCNL DCSP for state in attempt_states: DCNL DCSP  DCSP exercise = exercises.pop() DCNL DCSP  DCSP (log, created) = ExerciseLog.objects.get_or_create(exercise_id=exercise.get('id'), user=user) DCNL DCSP  DCSP if ('not DCSP started' != state[0]): DCNL DCSP  DCSP  DCSP (log.streak_progress, log.attempts) = state[1:] DCNL DCSP  DCSP  DCSP for i in range(0, log.attempts): DCNL DCSP  DCSP  DCSP  DCSP AttemptLog.objects.get_or_create(exercise_id=exercise.get('id'), user=user, seed=i, timestamp=datetime.datetime.now()) DCNL DCSP  DCSP  DCSP log.latest_activity_timestamp = datetime.datetime.now() DCNL DCSP  DCSP  DCSP log.save()
def generate_fake_facilities(names=('Wilson DCSP Elementary',)): DCNL  DCSP facilities = [] DCNL DCSP for name in names: DCNL DCSP  DCSP found_facilities = Facility.objects.filter(name=name) DCNL DCSP  DCSP if found_facilities: DCNL DCSP  DCSP  DCSP facility = found_facilities[0] DCNL DCSP  DCSP  DCSP logging.info(("Retrieved DCSP facility DCSP '%s'" % name)) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP facility = Facility(name=name) DCNL DCSP  DCSP  DCSP facility.save() DCNL DCSP  DCSP  DCSP logging.info(("Created DCSP facility DCSP '%s'" % name)) DCNL DCSP  DCSP facilities.append(facility) DCNL DCSP return facilities
def generate_fake_facility_groups(names=('Class DCSP 4E', 'Class DCSP 5B'), facilities=None): DCNL  DCSP if (not facilities): DCNL DCSP  DCSP facilities = generate_fake_facilities() DCNL DCSP facility_groups = [] DCNL DCSP for facility in facilities: DCNL DCSP  DCSP for name in names: DCNL DCSP  DCSP  DCSP found_facility_groups = FacilityGroup.objects.filter(facility=facility, name=name) DCNL DCSP  DCSP  DCSP if found_facility_groups: DCNL DCSP  DCSP  DCSP  DCSP facility_group = found_facility_groups[0] DCNL DCSP  DCSP  DCSP  DCSP logging.info(("Retrieved DCSP facility DCSP group DCSP '%s'" % name)) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP facility_group = FacilityGroup(facility=facility, name=name) DCNL DCSP  DCSP  DCSP  DCSP facility_group.save() DCNL DCSP  DCSP  DCSP  DCSP logging.info(("Created DCSP facility DCSP group DCSP '%s'" % name)) DCNL DCSP  DCSP  DCSP facility_groups.append(facility_group) DCNL DCSP return (facility_groups, facilities)
def generate_fake_facility_users(nusers=20, facilities=None, facility_groups=None, password='hellothere', is_teacher=False): DCNL  DCSP if (not facility_groups): DCNL DCSP  DCSP (facility_groups, facilities) = generate_fake_facility_groups(facilities=facilities) DCNL DCSP facility_users = [] DCNL DCSP cur_usernum = 0 DCNL DCSP users_per_group = (nusers / len(facility_groups)) DCNL DCSP for facility in facilities: DCNL DCSP  DCSP for facility_group in facility_groups: DCNL DCSP  DCSP  DCSP for i in range(0, users_per_group): DCNL DCSP  DCSP  DCSP  DCSP user_data = {'first_name': random.choice(firstnames), 'last_name': random.choice(lastnames)} DCNL DCSP  DCSP  DCSP  DCSP user_data['username'] = username_from_name(user_data['first_name'], user_data['last_name']) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user = FacilityUser.objects.get(facility=facility, username=user_data['username']) DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user.group = (facility_group if (not is_teacher) else None) DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user.is_teacher = is_teacher DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user.save() DCNL DCSP  DCSP  DCSP  DCSP  DCSP logging.info(("Retrieved DCSP facility DCSP user DCSP '%s/%s'" % (facility.name, user_data['username']))) DCNL DCSP  DCSP  DCSP  DCSP except FacilityUser.DoesNotExist as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP notes = json.dumps(sample_user_settings()) DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user = FacilityUser(facility=facility, username=user_data['username'], first_name=user_data['first_name'], last_name=user_data['last_name'], notes=notes, group=(facility_group if (not is_teacher) else None), is_teacher=is_teacher) DCNL DCSP  DCSP  DCSP  DCSP  DCSP facility_user.set_password(password) DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP facility_user.save() DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP logging.info(("Created DCSP facility DCSP user DCSP '%s/%s'" % (facility.name, user_data['username']))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP logging.error(('Error DCSP saving DCSP facility DCSP user: DCSP %s' % e)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP facility_users.append(facility_user) DCNL DCSP  DCSP  DCSP  DCSP cur_usernum += 1 DCNL DCSP return (facility_users, facility_groups, facilities)
def probability_of(qty, user_settings): DCNL  DCSP if (qty in ['exercise', 'video']): DCNL DCSP  DCSP return sqrt(((user_settings['effort_level'] * 3) * user_settings['time_in_program'])) DCNL DCSP if (qty == 'completed'): DCNL DCSP  DCSP return ((((0.33 * user_settings['effort_level']) + (0.66 * user_settings['speed_of_learning'])) * 2) * user_settings['time_in_program']) DCNL DCSP if (qty == 'attempts'): DCNL DCSP  DCSP return ((((0.33 * user_settings['effort_level']) + (0.55 * user_settings['time_in_program'])) / probability_of('completed', user_settings)) / 5)
def generate_fake_exercise_logs(facility_user=None, topics=topics, start_date=(datetime.datetime.now() - datetime.timedelta(days=(30 * 6)))): DCNL  DCSP date_diff = (datetime.datetime.now() - start_date) DCNL DCSP exercise_logs = [] DCNL DCSP user_logs = [] DCNL DCSP if (not hasattr(facility_user, 'username')): DCNL DCSP  DCSP if (not facility_user): DCNL DCSP  DCSP  DCSP (facility_user, _, _) = generate_fake_facility_users() DCNL DCSP  DCSP for topic in topics: DCNL DCSP  DCSP  DCSP for user in facility_user: DCNL DCSP  DCSP  DCSP  DCSP (elogs, ulogs) = generate_fake_exercise_logs(facility_user=user, topics=[topic], start_date=start_date) DCNL DCSP  DCSP  DCSP  DCSP exercise_logs.append(elogs) DCNL DCSP  DCSP  DCSP  DCSP user_logs.append(ulogs) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user_settings = json.loads(facility_user.notes) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP user_settings = sample_user_settings() DCNL DCSP  DCSP  DCSP facility_user.notes = json.dumps(user_settings) DCNL DCSP  DCSP  DCSP facility_user.save() DCNL DCSP  DCSP date_diff_started = datetime.timedelta(seconds=(datediff(date_diff, units='seconds') * user_settings['time_in_program'])) DCNL DCSP  DCSP for topic in topics: DCNL DCSP  DCSP  DCSP exercises = get_topic_contents(topic_id=topic, kinds=['Exercise']) DCNL DCSP  DCSP  DCSP p_exercise = probability_of(qty='exercise', user_settings=user_settings) DCNL DCSP  DCSP  DCSP logging.info(('# DCSP exercises: DCSP %d; DCSP p(exercise)=%4.3f, DCSP user DCSP settings: DCSP %s\n' % (len(exercises), p_exercise, json.dumps(user_settings)))) DCNL DCSP  DCSP  DCSP for (j, exercise) in enumerate(exercises): DCNL DCSP  DCSP  DCSP  DCSP if (random.random() > p_exercise): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP p_attempts = probability_of(qty='attempts', user_settings=user_settings) DCNL DCSP  DCSP  DCSP  DCSP attempts = int((((random.random() * p_attempts) * 30) + 10)) DCNL DCSP  DCSP  DCSP  DCSP (elog, created) = ExerciseLog.objects.get_or_create(user=facility_user, exercise_id=exercise['id']) DCNL DCSP  DCSP  DCSP  DCSP alogs = [] DCNL DCSP  DCSP  DCSP  DCSP for i in range(0, attempts): DCNL DCSP  DCSP  DCSP  DCSP  DCSP alog = AttemptLog.objects.create(user=facility_user, exercise_id=exercise['id'], timestamp=(start_date + ((date_diff * i) / attempts))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP alogs.append(alog) DCNL DCSP  DCSP  DCSP  DCSP  DCSP if (random.random() < user_settings['speed_of_learning']): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP alog.correct = True DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP alog.points = 10 DCNL DCSP  DCSP  DCSP  DCSP  DCSP alog.save() DCNL DCSP  DCSP  DCSP  DCSP elog.attempts = attempts DCNL DCSP  DCSP  DCSP  DCSP elog.latest_activity_timestamp = (start_date + date_diff) DCNL DCSP  DCSP  DCSP  DCSP elog.streak_progress = (sum([log.correct for log in alogs][(-10):]) * 10) DCNL DCSP  DCSP  DCSP  DCSP elog.points = sum([log.points for log in alogs][(-10):]) DCNL DCSP  DCSP  DCSP  DCSP elog.save() DCNL DCSP  DCSP  DCSP  DCSP exercise_logs.append(elog) DCNL DCSP  DCSP  DCSP  DCSP duration = random.randint((10 * 60), (120 * 60)) DCNL DCSP  DCSP  DCSP  DCSP exercise_start = (start_date + timedelta(seconds=random.randint(0, int((date_diff.total_seconds() - duration))))) DCNL DCSP  DCSP  DCSP  DCSP exercise_end = (exercise_start + timedelta(seconds=duration)) DCNL DCSP  DCSP  DCSP  DCSP ulog = UserLog(user=facility_user, activity_type=UserLog.get_activity_int('login'), start_datetime=exercise_start, end_datetime=exercise_end, last_active_datetime=exercise_end) DCNL DCSP  DCSP  DCSP  DCSP ulog.save() DCNL DCSP  DCSP  DCSP  DCSP user_logs.append(ulog) DCNL DCSP return (exercise_logs, user_logs)
def generate_fake_video_logs(facility_user=None, topics=topics, start_date=(datetime.datetime.now() - datetime.timedelta(days=(30 * 6)))): DCNL  DCSP date_diff = (datetime.datetime.now() - start_date) DCNL DCSP video_logs = [] DCNL DCSP if (not hasattr(facility_user, 'username')): DCNL DCSP  DCSP if (not facility_user): DCNL DCSP  DCSP  DCSP (facility_user, _, _) = generate_fake_facility_users() DCNL DCSP  DCSP for topic in topics: DCNL DCSP  DCSP  DCSP for user in facility_user: DCNL DCSP  DCSP  DCSP  DCSP video_logs.append(generate_fake_video_logs(facility_user=user, topics=[topic], start_date=start_date)) DCNL DCSP else: DCNL DCSP  DCSP try: DCNL DCSP  DCSP  DCSP user_settings = json.loads(facility_user.notes) DCNL DCSP  DCSP except: DCNL DCSP  DCSP  DCSP user_settings = sample_user_settings() DCNL DCSP  DCSP  DCSP facility_user.notes = json.dumps(user_settings) DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP facility_user.save() DCNL DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP logging.error(('Error DCSP saving DCSP facility DCSP user: DCSP %s' % e)) DCNL DCSP  DCSP date_diff_started = datetime.timedelta(seconds=(datediff(date_diff, units='seconds') * user_settings['time_in_program'])) DCNL DCSP  DCSP for topic in topics: DCNL DCSP  DCSP  DCSP videos = get_topic_contents(topic_id=topic, kinds=['Video']) DCNL DCSP  DCSP  DCSP exercises = get_topic_contents(topic_id=topic, kinds=['Exercise']) DCNL DCSP  DCSP  DCSP exercise_ids = [(ex['id'] if ('id' in ex) else ex['name']) for ex in exercises] DCNL DCSP  DCSP  DCSP exercise_logs = ExerciseLog.objects.filter(user=facility_user, id__in=exercise_ids) DCNL DCSP  DCSP  DCSP p_video_outer = probability_of('video', user_settings=user_settings) DCNL DCSP  DCSP  DCSP logging.debug(('# DCSP videos: DCSP %d; DCSP p(videos)=%4.3f, DCSP user DCSP settings: DCSP %s\n' % (len(videos), p_video_outer, json.dumps(user_settings)))) DCNL DCSP  DCSP  DCSP for video in videos: DCNL DCSP  DCSP  DCSP  DCSP p_completed = probability_of('completed', user_settings=user_settings) DCNL DCSP  DCSP  DCSP  DCSP p_video = p_video_outer DCNL DCSP  DCSP  DCSP  DCSP did_exercise = False DCNL DCSP  DCSP  DCSP  DCSP if (exercise_logs.count() > 0): DCNL DCSP  DCSP  DCSP  DCSP  DCSP if ('related_exercise' not in video): DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP p_video /= 5 DCNL DCSP  DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP exercise_log = ExerciseLog.objects.filter(user=facility_user, id=video['related_exercise']['id']) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP did_exercise = (exercise_log.count() != 0) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP if did_exercise: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP p_video *= 5 DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP  DCSP p_completed *= 2 DCNL DCSP  DCSP  DCSP  DCSP if (p_video < random.random()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP elif (p_completed > random.random()): DCNL DCSP  DCSP  DCSP  DCSP  DCSP pct_completed = 100.0 DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP pct_completed = (100.0 * min(1.0, sqrt((random.random() * sqrt(((user_settings['effort_level'] * user_settings['time_in_program']) / sqrt(user_settings['speed_of_learning']))))))) DCNL DCSP  DCSP  DCSP  DCSP video_id = video.get('id', '') DCNL DCSP  DCSP  DCSP  DCSP video_duration = video.get('duration', 0) DCNL DCSP  DCSP  DCSP  DCSP total_seconds_watched = int(((video_duration * pct_completed) / 100.0)) DCNL DCSP  DCSP  DCSP  DCSP points = int(((750 * pct_completed) / 100.0)) DCNL DCSP  DCSP  DCSP  DCSP if did_exercise: DCNL DCSP  DCSP  DCSP  DCSP  DCSP date_jitter = datetime.timedelta(days=max(0, random.gauss(1, (user_settings['speed_of_learning'] / user_settings['effort_level'])))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP date_completed = (exercise_log[0].completion_timestamp - date_jitter) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP rate_of_videos = ((0.66 * user_settings['effort_level']) + (0.33 * user_settings['speed_of_learning'])) DCNL DCSP  DCSP  DCSP  DCSP  DCSP time_for_watching = total_seconds_watched DCNL DCSP  DCSP  DCSP  DCSP  DCSP time_delta_completed = datetime.timedelta(seconds=random.randint(int(time_for_watching), int(datediff(date_diff_started, units='seconds')))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP date_completed = (datetime.datetime.now() - time_delta_completed) DCNL DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP vlog = VideoLog.objects.get(user=facility_user, video_id=video_id) DCNL DCSP  DCSP  DCSP  DCSP except VideoLog.DoesNotExist: DCNL DCSP  DCSP  DCSP  DCSP  DCSP logging.info(('Creating DCSP video DCSP log: DCSP %-12s: DCSP %-45s DCSP (%4.1f%% DCSP watched, DCSP %d DCSP points)%s' % (facility_user.first_name, video['title'], pct_completed, points, ((' DCSP COMPLETE DCSP on DCSP %s!' % date_completed) if (pct_completed == 100) else '')))) DCNL DCSP  DCSP  DCSP  DCSP  DCSP youtube_id = video.get('youtube_id', video_id) DCNL DCSP  DCSP  DCSP  DCSP  DCSP vlog = VideoLog(user=facility_user, video_id=video_id, youtube_id=youtube_id, total_seconds_watched=total_seconds_watched, points=points, complete=(pct_completed == 100.0), completion_timestamp=date_completed, latest_activity_timestamp=date_completed) DCNL DCSP  DCSP  DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP vlog.save() DCNL DCSP  DCSP  DCSP  DCSP  DCSP except Exception as e: DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP logging.error(('Error DCSP saving DCSP video DCSP log: DCSP %s' % e)) DCNL DCSP  DCSP  DCSP  DCSP  DCSP  DCSP continue DCNL DCSP  DCSP  DCSP  DCSP video_logs.append(vlog) DCNL DCSP return video_logs
@require_authorized_admin DCNL @render_to_csv(['students'], key_label='user_id', order='stacked') DCNL def facility_management_csv(request, facility, group_id=None, zone_id=None, frequency=None, period_start='', period_end='', user_type=None): DCNL  DCSP assert (request.method == 'POST'), 'facility_management_csv DCSP must DCSP be DCSP accessed DCSP via DCSP POST' DCNL DCSP form = DateRangeForm(data=request.POST) DCNL DCSP if (not form.is_valid()): DCNL DCSP  DCSP raise Exception((_('Error DCSP parsing DCSP date DCSP range: DCSP %(error_msg)s. DCSP  DCSP Please DCSP review DCSP and DCSP re-submit.') % form.errors.as_data())) DCNL DCSP frequency = (frequency or request.GET.get('frequency', 'months')) DCNL DCSP period_start = (period_start or form.data['period_start']) DCNL DCSP period_end = (period_end or form.data['period_end']) DCNL DCSP (period_start, period_end) = _get_date_range(frequency, period_start, period_end) DCNL DCSP context = control_panel_context(request, zone_id=zone_id, facility_id=facility.id) DCNL DCSP group = (group_id and get_object_or_None(FacilityGroup, id=group_id)) DCNL DCSP groups = FacilityGroup.objects.filter(facility=context['facility']).order_by('name') DCNL DCSP students = get_users_from_group(user_type='students', group_id=group_id, facility=facility) DCNL DCSP (student_data, group_data) = _get_user_usage_data(students, groups, group_id=group_id, period_start=period_start, period_end=period_end) DCNL DCSP context.update({'students': student_data}) DCNL DCSP return context
def _get_date_range(frequency, period_start, period_end): DCNL  DCSP assert (frequency == 'months') DCNL DCSP if (frequency == 'months'): DCNL DCSP  DCSP if (not (period_start or period_end)): DCNL DCSP  DCSP  DCSP cur_date = datetime.datetime.now() DCNL DCSP  DCSP  DCSP first_this_month = datetime.datetime(year=cur_date.year, month=cur_date.month, day=1, hour=0, minute=0, second=0) DCNL DCSP  DCSP  DCSP period_end = (first_this_month - datetime.timedelta(seconds=1)) DCNL DCSP  DCSP  DCSP period_start = datetime.datetime(year=period_end.year, month=period_end.month, day=1) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP period_end = (period_end or (period_start + datetime.timedelta(days=30))) DCNL DCSP  DCSP  DCSP period_start = (period_start or (period_end - datetime.timedelta(days=30))) DCNL DCSP return (period_start, period_end)
def _get_user_usage_data(users, groups=None, period_start=None, period_end=None, group_id=None): DCNL  DCSP groups = (groups or set([user.group for user in users])) DCNL DCSP user_data = OrderedDict() DCNL DCSP group_data = OrderedDict() DCNL DCSP exercise_logs = ExerciseLog.objects.filter(user__in=users) DCNL DCSP video_logs = VideoLog.objects.filter(user__in=users, total_seconds_watched__gt=0) DCNL DCSP login_logs = UserLogSummary.objects.filter(user__in=users) DCNL DCSP login_logs = login_logs.filter(total_seconds__gte=0) DCNL DCSP if period_start: DCNL DCSP  DCSP exercise_logs = exercise_logs.filter(completion_timestamp__gte=period_start) DCNL DCSP  DCSP video_logs = video_logs.filter(latest_activity_timestamp__gte=period_start) DCNL DCSP if period_end: DCNL DCSP  DCSP period_end = dateutil.parser.parse(period_end) DCNL DCSP  DCSP period_end = (period_end + dateutil.relativedelta.relativedelta(days=(+ 1), microseconds=(-1))) DCNL DCSP  DCSP exercise_logs = exercise_logs.filter(latest_activity_timestamp__lte=period_end) DCNL DCSP  DCSP video_logs = video_logs.filter(completion_timestamp__lte=period_end) DCNL DCSP if (period_start and period_end): DCNL DCSP  DCSP exercise_logs = exercise_logs.filter((Q(latest_activity_timestamp__gte=period_start) & Q(latest_activity_timestamp__lte=period_end))) DCNL DCSP  DCSP q1 = ((Q(completion_timestamp__isnull=False) & Q(completion_timestamp__gte=period_start)) & Q(completion_timestamp__lte=period_end)) DCNL DCSP  DCSP video_logs = video_logs.filter(q1) DCNL DCSP  DCSP login_q1 = (((Q(start_datetime__gte=period_start) & Q(start_datetime__lte=period_end)) & Q(end_datetime__gte=period_start)) & Q(end_datetime__lte=period_end)) DCNL DCSP  DCSP login_logs = login_logs.filter(login_q1) DCNL DCSP exercise_logs = list(exercise_logs.values('exercise_id', 'user__pk', 'streak_progress', 'complete')) DCNL DCSP video_logs = list(video_logs.values('video_id', 'user__pk')) DCNL DCSP login_logs = list(login_logs.values('activity_type', 'total_seconds', 'user__pk', 'count')) DCNL DCSP for user in users: DCNL DCSP  DCSP user_data[user.pk] = OrderedDict() DCNL DCSP  DCSP user_data[user.pk]['id'] = user.pk DCNL DCSP  DCSP user_data[user.pk]['first_name'] = user.first_name DCNL DCSP  DCSP user_data[user.pk]['last_name'] = user.last_name DCNL DCSP  DCSP user_data[user.pk]['username'] = user.username DCNL DCSP  DCSP user_data[user.pk]['group'] = user.group DCNL DCSP  DCSP user_data[user.pk]['total_report_views'] = 0 DCNL DCSP  DCSP user_data[user.pk]['total_logins'] = 0 DCNL DCSP  DCSP user_data[user.pk]['total_hours'] = 0 DCNL DCSP  DCSP user_data[user.pk]['total_exercises'] = 0 DCNL DCSP  DCSP user_data[user.pk]['exercises_completed'] = 0 DCNL DCSP  DCSP user_data[user.pk]['pct_mastery'] = 0.0 DCNL DCSP  DCSP user_data[user.pk]['exercises_mastered'] = [] DCNL DCSP  DCSP user_data[user.pk]['total_videos'] = 0 DCNL DCSP  DCSP user_data[user.pk]['videos_watched'] = [] DCNL DCSP for elog in exercise_logs: DCNL DCSP  DCSP user_data[elog['user__pk']]['pct_mastery'] += elog['streak_progress'] DCNL DCSP  DCSP user_data[elog['user__pk']]['total_exercises'] += 1 DCNL DCSP  DCSP if elog['complete']: DCNL DCSP  DCSP  DCSP user_data[elog['user__pk']]['exercises_completed'] += 1 DCNL DCSP  DCSP  DCSP user_data[elog['user__pk']]['exercises_mastered'].append(elog['exercise_id']) DCNL DCSP for vlog in video_logs: DCNL DCSP  DCSP user_data[vlog['user__pk']]['total_videos'] += 1 DCNL DCSP  DCSP user_data[vlog['user__pk']]['videos_watched'].append(vlog['video_id']) DCNL DCSP for llog in login_logs: DCNL DCSP  DCSP if (llog['activity_type'] == UserLog.get_activity_int('coachreport')): DCNL DCSP  DCSP  DCSP user_data[llog['user__pk']]['total_report_views'] += 1 DCNL DCSP  DCSP elif (llog['activity_type'] == UserLog.get_activity_int('login')): DCNL DCSP  DCSP  DCSP user_data[llog['user__pk']]['total_hours'] += (llog['total_seconds'] / 3600.0) DCNL DCSP  DCSP  DCSP user_data[llog['user__pk']]['total_logins'] += llog['count'] DCNL DCSP for group in (list(groups) + ([None] * ((group_id == None) or (group_id == UNGROUPED)))): DCNL DCSP  DCSP group_pk = getattr(group, 'pk', None) DCNL DCSP  DCSP group_name = getattr(group, 'name', _(UNGROUPED)) DCNL DCSP  DCSP group_title = getattr(group, 'title', _(UNGROUPED)) DCNL DCSP  DCSP group_data[group_pk] = {'id': group_pk, 'name': group_name, 'title': group_title, 'total_logins': 0, 'total_hours': 0, 'total_users': 0, 'total_videos': 0, 'total_exercises': 0, 'total_exercises_completed': 0, 'pct_mastery': 0} DCNL DCSP for user in users: DCNL DCSP  DCSP user_data[user.pk]['pct_mastery'] = (user_data[user.pk]['pct_mastery'] / (user_data[user.pk]['total_exercises'] or 1)) DCNL DCSP  DCSP group_pk = getattr(user.group, 'pk', None) DCNL DCSP  DCSP if (group_pk not in group_data): DCNL DCSP  DCSP  DCSP logging.error(('User DCSP %s DCSP still DCSP in DCSP nonexistent DCSP group DCSP %s!' % (user.id, group_pk))) DCNL DCSP  DCSP  DCSP continue DCNL DCSP  DCSP group_data[group_pk]['total_users'] += 1 DCNL DCSP  DCSP group_data[group_pk]['total_logins'] += user_data[user.pk]['total_logins'] DCNL DCSP  DCSP group_data[group_pk]['total_hours'] += user_data[user.pk]['total_hours'] DCNL DCSP  DCSP group_data[group_pk]['total_videos'] += user_data[user.pk]['total_videos'] DCNL DCSP  DCSP group_data[group_pk]['total_exercises'] += user_data[user.pk]['total_exercises'] DCNL DCSP  DCSP group_data[group_pk]['total_exercises_completed'] += user_data[user.pk]['exercises_completed'] DCNL DCSP  DCSP total_mastery_so_far = ((group_data[group_pk]['pct_mastery'] * (group_data[group_pk]['total_users'] - 1)) + user_data[user.pk]['pct_mastery']) DCNL DCSP  DCSP group_data[group_pk]['pct_mastery'] = (total_mastery_so_far / group_data[group_pk]['total_users']) DCNL DCSP if ((len(group_data) == 1) and (None in group_data)): DCNL DCSP  DCSP if (not group_data[None]['total_users']): DCNL DCSP  DCSP  DCSP del group_data[None] DCNL DCSP return (user_data, group_data)
def check_meta_data(facility): DCNL  DCSP check_fields = ['user_count', 'latitude', 'longitude', 'address', 'contact_name', 'contact_phone', 'contact_email'] DCNL DCSP return any([((getattr(facility, field, None) is None) or (getattr(facility, field) == '')) for field in check_fields])
def submit_facility_form(context): DCNL  DCSP facility_form = find_id_with_wait(context, 'facility_form') DCNL DCSP name_field = find_id_with_wait(context, 'id_name') DCNL DCSP name_field.send_keys('The DCSP Fortress DCSP of DCSP Solitude') DCNL DCSP facility_form.submit()
def get_empty_facilities_msg(browser): DCNL  DCSP try: DCNL DCSP  DCSP elem = browser.find_element_by_id('no-facilities-message') DCNL DCSP  DCSP return elem DCNL DCSP except NoSuchElementException: DCNL DCSP  DCSP return None
@receiver(post_save, sender=UserLog) DCNL def cull_records(sender, **kwargs): DCNL  DCSP if (settings.USER_LOG_MAX_RECORDS_PER_USER and kwargs['created']): DCNL DCSP  DCSP current_models = UserLog.objects.filter(user=kwargs['instance'].user, activity_type=kwargs['instance'].activity_type) DCNL DCSP  DCSP if (current_models.count() > settings.USER_LOG_MAX_RECORDS_PER_USER): DCNL DCSP  DCSP  DCSP to_discard = current_models.order_by('start_datetime')[0:(current_models.count() - settings.USER_LOG_MAX_RECORDS_PER_USER)] DCNL DCSP  DCSP  DCSP UserLog.objects.filter(pk__in=to_discard).delete()
@api_handle_error_with_json DCNL def content_recommender(request): DCNL  DCSP user_id = request.GET.get('user') DCNL DCSP user = request.session.get('facility_user') DCNL DCSP if (not user): DCNL DCSP  DCSP if (request.user.is_authenticated() and request.user.is_superuser): DCNL DCSP  DCSP  DCSP user = get_object_or_404(FacilityUser, pk=user_id) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP return JsonResponseMessageError('You DCSP are DCSP not DCSP authorized DCSP to DCSP view DCSP these DCSP recommendations.', status=401) DCNL DCSP resume = request.GET.get('resume') DCNL DCSP next = request.GET.get('next') DCNL DCSP explore = request.GET.get('explore') DCNL DCSP def set_bool_flag(flag_name, rec_dict): DCNL DCSP  DCSP rec_dict[flag_name] = True DCNL DCSP  DCSP return rec_dict DCNL DCSP resume_recommendations = ([set_bool_flag('resume', rec) for rec in get_resume_recommendations(user, request)] if resume else []) DCNL DCSP next_recommendations = ([set_bool_flag('next', rec) for rec in get_next_recommendations(user, request)] if next else []) DCNL DCSP explore_recommendations = ([set_bool_flag('explore', rec) for rec in get_explore_recommendations(user, request)] if explore else []) DCNL DCSP return JsonResponse(((resume_recommendations + next_recommendations) + explore_recommendations))
def VERSION_INFO(): DCNL  DCSP from django.conf import settings DCNL DCSP from kalite.shared.utils import open_json_or_yml DCNL DCSP return open_json_or_yml(os.path.join(settings.CONTENT_DATA_PATH, 'version.yml'))
def user_agent(): DCNL  DCSP from requests.utils import default_user_agent DCNL DCSP return (('ka-lite/%s DCSP ' % VERSION) + default_user_agent())
@require_admin DCNL @api_handle_error_with_json DCNL @process_log_from_request DCNL def check_update_progress(request, process_log): DCNL  DCSP return JsonResponse(_process_log_to_dict(process_log))
def _process_log_to_dict(process_log): DCNL  DCSP if ((not process_log) or (not process_log.total_stages)): DCNL DCSP  DCSP return {} DCNL DCSP else: DCNL DCSP  DCSP return {'process_id': process_log.id, 'process_name': process_log.process_name, 'process_percent': process_log.process_percent, 'stage_name': process_log.stage_name, 'stage_percent': process_log.stage_percent, 'stage_status': process_log.stage_status, 'cur_stage_num': (1 + int(math.floor((process_log.total_stages * process_log.process_percent)))), 'total_stages': process_log.total_stages, 'notes': process_log.notes, 'completed': (process_log.completed or (process_log.end_time is not None))}
@require_admin DCNL @api_handle_error_with_json DCNL @process_log_from_request DCNL def cancel_update_progress(request, process_log): DCNL  DCSP process_log.cancel_requested = True DCNL DCSP process_log.save() DCNL DCSP return JsonResponseMessageSuccess(_('Cancelled DCSP update DCSP progress DCSP successfully.'))
@require_admin DCNL @api_handle_error_with_json DCNL def start_video_download(request): DCNL  DCSP force_job('videodownload', stop=True, locale=request.language) DCNL DCSP paths = OrderedSet(json.loads((request.body or '{}')).get('paths', [])) DCNL DCSP lang = json.loads((request.body or '{}')).get('lang', 'en') DCNL DCSP youtube_ids = get_download_youtube_ids(paths, language=lang, downloaded=False) DCNL DCSP queue = VideoQueue() DCNL DCSP queue.add_files(youtube_ids, language=lang) DCNL DCSP force_job('videodownload', _('Download DCSP Videos'), locale=lang) DCNL DCSP return JsonResponseMessageSuccess(_('Launched DCSP video DCSP download DCSP process DCSP successfully.'))
@require_admin DCNL @api_handle_error_with_json DCNL def delete_videos(request): DCNL  DCSP paths = OrderedSet(json.loads((request.body or '{}')).get('paths', [])) DCNL DCSP lang = json.loads((request.body or '{}')).get('lang', 'en') DCNL DCSP youtube_ids = get_download_youtube_ids(paths, language=lang, downloaded=True) DCNL DCSP num_deleted = 0 DCNL DCSP for id in youtube_ids: DCNL DCSP  DCSP if delete_downloaded_files(id): DCNL DCSP  DCSP  DCSP num_deleted += 1 DCNL DCSP annotate_content_models_by_youtube_id(youtube_ids=youtube_ids.keys(), language=lang) DCNL DCSP return JsonResponseMessageSuccess((_('Deleted DCSP %(num_videos)s DCSP video(s) DCSP successfully.') % {'num_videos': num_deleted}))
@require_admin DCNL @api_handle_error_with_json DCNL def delete_language_pack(request): DCNL  DCSP lang_code = simplejson.loads((request.body or '{}')).get('lang') DCNL DCSP delete_language(lang_code) DCNL DCSP return JsonResponse({'success': (_('Successfully DCSP deleted DCSP language DCSP pack DCSP for DCSP %(lang_name)s.') % {'lang_name': get_language_name(lang_code)})})
def download_video(youtube_id, format='mp4', callback=None): DCNL  DCSP download_url = (('http://%s/download/videos/' % settings.CENTRAL_SERVER_HOST) + '%s/%s') DCNL DCSP return videos.download_video(youtube_id, settings.CONTENT_ROOT, download_url, format, callback)
def scrape_video(youtube_id, format='mp4', force=False, quiet=False, callback=None): DCNL  DCSP video_filename = ('%(id)s.%(ext)s' % {'id': youtube_id, 'ext': format}) DCNL DCSP video_file_download_path = os.path.join(settings.CONTENT_ROOT, video_filename) DCNL DCSP if (os.path.exists(video_file_download_path) and (not force)): DCNL DCSP  DCSP return DCNL DCSP yt_dl = youtube_dl.YoutubeDL({'outtmpl': video_file_download_path, 'quiet': quiet}) DCNL DCSP yt_dl.add_default_info_extractors() DCNL DCSP if callback: DCNL DCSP  DCSP yt_dl.add_progress_hook(callback) DCNL DCSP yt_dl.extract_info(('www.youtube.com/watch?v=%s' % youtube_id), download=True)
@require_authorized_admin DCNL def add_facility_teacher(request): DCNL  DCSP title = _('Add DCSP a DCSP new DCSP coach') DCNL DCSP return _facility_user(request, new_user=True, is_teacher=True, title=title)
@require_authorized_admin DCNL @dynamic_settings DCNL def add_facility_student(request, ds): DCNL  DCSP if (request.is_teacher and (not ds['facility'].teacher_can_create_students)): DCNL DCSP  DCSP return HttpResponseForbidden() DCNL DCSP title = _('Add DCSP a DCSP new DCSP learner') DCNL DCSP return _facility_user(request, new_user=True, title=title)
def facility_user_signup(request): DCNL  DCSP if getattr(request, 'is_logged_in', False): DCNL DCSP  DCSP return HttpResponseRedirect(reverse('homepage')) DCNL DCSP if settings.DISABLE_SELF_ADMIN: DCNL DCSP  DCSP raise PermissionDenied(_('Please DCSP contact DCSP a DCSP coach DCSP or DCSP administrator DCSP to DCSP receive DCSP login DCSP information DCSP to DCSP this DCSP installation.')) DCNL DCSP if settings.CENTRAL_SERVER: DCNL DCSP  DCSP raise Http404(_('You DCSP may DCSP not DCSP sign DCSP up DCSP as DCSP a DCSP facility DCSP user DCSP on DCSP the DCSP central DCSP server.')) DCNL DCSP title = _('Sign DCSP up DCSP for DCSP an DCSP account') DCNL DCSP return _facility_user(request, new_user=True, title=title)
@require_authorized_admin DCNL @dynamic_settings DCNL def edit_facility_user(request, ds, facility_user_id): DCNL  DCSP user_being_edited = (get_object_or_404(FacilityUser, id=facility_user_id) or None) DCNL DCSP title = (_('Edit DCSP user DCSP %(username)s') % {'username': user_being_edited.username}) DCNL DCSP return _facility_user(request, user_being_edited=user_being_edited, is_teacher=user_being_edited.is_teacher, title=title)
@facility_required DCNL @render_to('facility/facility_user.html') DCNL def _facility_user(request, facility, title, is_teacher=False, new_user=False, user_being_edited=None): DCNL  DCSP next = (request.next or request.get_full_path() or reverse('homepage')) DCNL DCSP if (request.method == 'POST'): DCNL DCSP  DCSP form = FacilityUserForm(facility, data=request.POST, instance=user_being_edited) DCNL DCSP  DCSP if (not form.is_valid()): DCNL DCSP  DCSP  DCSP messages.error(request, _('There DCSP was DCSP a DCSP problem DCSP saving DCSP the DCSP information DCSP provided; DCSP please DCSP review DCSP errors DCSP below.')) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (form.cleaned_data['is_teacher'] and (not request.is_admin)): DCNL DCSP  DCSP  DCSP  DCSP raise PermissionDenied(_('You DCSP must DCSP be DCSP a DCSP teacher DCSP to DCSP edit DCSP or DCSP create DCSP a DCSP teacher.')) DCNL DCSP  DCSP  DCSP if form.cleaned_data['password_first']: DCNL DCSP  DCSP  DCSP  DCSP form.instance.set_password(form.cleaned_data['password_first']) DCNL DCSP  DCSP  DCSP form.save() DCNL DCSP  DCSP  DCSP if (request.session.get('facility_user') and (request.session.get('facility_user').id == form.instance.id)): DCNL DCSP  DCSP  DCSP  DCSP messages.success(request, _('You DCSP successfully DCSP updated DCSP your DCSP user DCSP settings.')) DCNL DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(next) DCNL DCSP  DCSP  DCSP elif (not new_user): DCNL DCSP  DCSP  DCSP  DCSP messages.success(request, (_("Changes DCSP saved DCSP for DCSP user DCSP '%(username)s'") % {'username': form.instance.get_name()})) DCNL DCSP  DCSP  DCSP  DCSP if request.next: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(next) DCNL DCSP  DCSP  DCSP elif (request.is_admin or request.is_django_user): DCNL DCSP  DCSP  DCSP  DCSP messages.success(request, (_("You DCSP successfully DCSP created DCSP user DCSP '%(username)s'") % {'username': form.instance.get_name()})) DCNL DCSP  DCSP  DCSP  DCSP if request.next: DCNL DCSP  DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(next) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP zone_id = getattr(facility.get_zone(), 'id', None) DCNL DCSP  DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(reverse('facility_management', kwargs={'zone_id': zone_id, 'facility_id': facility.id})) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP messages.success(request, _('You DCSP successfully DCSP registered.')) DCNL DCSP  DCSP  DCSP  DCSP return HttpResponseRedirect(reverse('homepage')) DCNL DCSP elif user_being_edited: DCNL DCSP  DCSP form = FacilityUserForm(facility=facility, instance=user_being_edited) DCNL DCSP else: DCNL DCSP  DCSP form = FacilityUserForm(facility, initial={'group': request.GET.get('group'), 'is_teacher': is_teacher, 'default_language': get_default_language()}) DCNL DCSP if (is_teacher or ((not (request.is_admin or request.is_teacher)) and (FacilityGroup.objects.filter(facility=facility).count() == 0)) or ((not new_user) and (not (request.is_admin or request.is_teacher)))): DCNL DCSP  DCSP form.fields['group'].widget = forms.HiddenInput() DCNL DCSP if ((Facility.objects.count() < 2) or ((not new_user) and (not request.is_admin))): DCNL DCSP  DCSP form.fields['facility'].widget = forms.HiddenInput() DCNL DCSP return {'title': title, 'new_user': new_user, 'form': form, 'facility': facility, 'teacher': is_teacher}
def get_accessible_objects_from_logged_in_user(request, facility): DCNL  DCSP facilities = [] DCNL DCSP if request.user.is_superuser: DCNL DCSP  DCSP facilities = Facility.objects.all() DCNL DCSP  DCSP groups = [{'facility': f.id, 'groups': FacilityGroup.objects.filter(facility=f)} for f in facilities] DCNL DCSP elif ('facility_user' in request.session): DCNL DCSP  DCSP user = request.session['facility_user'] DCNL DCSP  DCSP if user.is_teacher: DCNL DCSP  DCSP  DCSP facilities = Facility.objects.all() DCNL DCSP  DCSP  DCSP groups = [{'facility': f.id, 'groups': FacilityGroup.objects.filter(facility=f)} for f in facilities] DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP if (facility and isinstance(facility, Facility)): DCNL DCSP  DCSP  DCSP  DCSP facilities = Facility.objects.filter(id=facility.id) DCNL DCSP  DCSP  DCSP if (not user.group): DCNL DCSP  DCSP  DCSP  DCSP groups = [] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP groups = [{'facility': user.facility.id, 'groups': FacilityGroup.objects.filter(id=request.session['facility_user'].group)}] DCNL DCSP elif facility: DCNL DCSP  DCSP facilities = Facility.objects.filter(id=facility.id) DCNL DCSP  DCSP groups = [{'facility': facility.id, 'groups': FacilityGroup.objects.filter(facility=facility)}] DCNL DCSP else: DCNL DCSP  DCSP facilities = Facility.objects.all() DCNL DCSP  DCSP groups = [{'facility': f.id, 'groups': FacilityGroup.objects.filter(facility=f)} for f in facilities] DCNL DCSP ungrouped_available = False DCNL DCSP for f in facilities: DCNL DCSP  DCSP ungrouped_available = f.has_ungrouped_students DCNL DCSP  DCSP if ungrouped_available: DCNL DCSP  DCSP  DCSP break DCNL DCSP return (groups, facilities, ungrouped_available)
def facility_from_request(handler=None, request=None, *args, **kwargs): DCNL  DCSP assert (handler or request) DCNL DCSP if (not handler): DCNL DCSP  DCSP handler = (lambda request, facility, *args, **kwargs: facility) DCNL DCSP def facility_from_request_wrapper_fn(request, *args, **kwargs): DCNL DCSP  DCSP facility = None DCNL DCSP  DCSP if kwargs.get('facility_id'): DCNL DCSP  DCSP  DCSP facility = get_object_or_None(Facility, pk=kwargs['facility_id']) DCNL DCSP  DCSP  DCSP del kwargs['facility_id'] DCNL DCSP  DCSP if ((not facility) and ('facility' in request.GET)): DCNL DCSP  DCSP  DCSP facility = get_object_or_None(Facility, pk=request.GET['facility']) DCNL DCSP  DCSP if facility: DCNL DCSP  DCSP  DCSP pass DCNL DCSP  DCSP elif settings.CENTRAL_SERVER: DCNL DCSP  DCSP  DCSP facility = None DCNL DCSP  DCSP elif ('facility_user' in request.session): DCNL DCSP  DCSP  DCSP facility = request.session['facility_user'].facility DCNL DCSP  DCSP elif (request.session['facility_count'] == 1): DCNL DCSP  DCSP  DCSP facility = Facility.objects.all()[0] DCNL DCSP  DCSP elif (request.session['facility_count'] > 0): DCNL DCSP  DCSP  DCSP if Settings.get('default_facility'): DCNL DCSP  DCSP  DCSP  DCSP facility = get_object_or_None(Facility, pk=Settings.get('default_facility')) DCNL DCSP  DCSP  DCSP elif (Facility.objects.filter((Q(signed_by__isnull=True) | Q(signed_by=Device.get_own_device()))).count() == 1): DCNL DCSP  DCSP  DCSP  DCSP facility = Facility.objects.filter((Q(signed_by__isnull=True) | Q(signed_by=Device.get_own_device())))[0] DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP facility = None DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP facility = None DCNL DCSP  DCSP if (('set_default' in request.GET) and request.is_admin and facility): DCNL DCSP  DCSP  DCSP Settings.set('default_facility', facility.id) DCNL DCSP  DCSP if (facility or ('facility' not in kwargs)): DCNL DCSP  DCSP  DCSP kwargs['facility'] = facility DCNL DCSP  DCSP return handler(request, *args, **kwargs) DCNL DCSP return (facility_from_request_wrapper_fn if (not request) else facility_from_request_wrapper_fn(request=request, *args, **kwargs))
def facility_required(handler): DCNL  DCSP @facility_from_request DCNL DCSP def facility_required_inner_fn(request, facility, *args, **kwargs): DCNL DCSP  DCSP if facility: DCNL DCSP  DCSP  DCSP return handler(request, facility=facility, *args, **kwargs) DCNL DCSP  DCSP if (not request.session['facility_exists']): DCNL DCSP  DCSP  DCSP if request.is_admin: DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, (_('To DCSP continue, DCSP you DCSP must DCSP first DCSP add DCSP a DCSP facility DCSP (e.g. DCSP for DCSP your DCSP school). DCSP ') + _('Please DCSP use DCSP the DCSP form DCSP below DCSP to DCSP add DCSP a DCSP facility.'))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP messages.warning(request, _('You DCSP must DCSP first DCSP have DCSP the DCSP administrator DCSP of DCSP this DCSP server DCSP log DCSP in DCSP below DCSP to DCSP add DCSP a DCSP facility.')) DCNL DCSP  DCSP  DCSP zone_id = getattr(Device.get_own_device().get_zone(), 'id', 'None') DCNL DCSP  DCSP  DCSP return HttpResponseRedirect(reverse('add_facility', kwargs={'zone_id': zone_id})) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP @render_to('facility/facility_selection.html') DCNL DCSP  DCSP  DCSP def facility_selection(request): DCNL DCSP  DCSP  DCSP  DCSP facilities = list(Facility.objects.all()) DCNL DCSP  DCSP  DCSP  DCSP refresh_session_facility_info(request, len(facilities)) DCNL DCSP  DCSP  DCSP  DCSP cp_path_match = re.match('^(.*\\/facility\\/)[^/]+(\\/.*)$', request.path) DCNL DCSP  DCSP  DCSP  DCSP if cp_path_match: DCNL DCSP  DCSP  DCSP  DCSP  DCSP path_template = ('%s%%(facility_id)s%s' % cp_path_match.groups()) DCNL DCSP  DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP  DCSP path_template = '%(path)s?%(querystring)s&facility=%(facility_id)s' DCNL DCSP  DCSP  DCSP  DCSP selection_paths = {} DCNL DCSP  DCSP  DCSP  DCSP for facility in facilities: DCNL DCSP  DCSP  DCSP  DCSP  DCSP selection_paths[facility.id] = (path_template % {'path': request.path, 'querystring': '', 'facility_id': facility.id}) DCNL DCSP  DCSP  DCSP  DCSP return {'facilities': facilities, 'selection_paths': selection_paths} DCNL DCSP  DCSP  DCSP return facility_selection(request) DCNL DCSP return facility_required_inner_fn
def get_doc_links(): DCNL  DCSP tadoc_homepage = 'http://www.tadoc.org/' DCNL DCSP html_file_path = os.path.join(INPUT_DIR, '.tadoc.org.html') DCNL DCSP if os.path.exists(html_file_path): DCNL DCSP  DCSP with open(html_file_path, 'r') as f: DCNL DCSP  DCSP  DCSP html = f.read() DCNL DCSP else: DCNL DCSP  DCSP if (sys.version_info < (2, 8)): DCNL DCSP  DCSP  DCSP from urllib2 import urlopen DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP from urllib.request import urlopen DCNL DCSP  DCSP html = urlopen(tadoc_homepage).read() DCNL DCSP  DCSP with open(html_file_path, 'w') as f: DCNL DCSP  DCSP  DCSP f.write(html) DCNL DCSP soup = BeautifulSoup(html, 'html.parser') DCNL DCSP links = [a for a in soup.findAll('a') if ('indicator' in a['href'])] DCNL DCSP ret = {} DCNL DCSP for a in links: DCNL DCSP  DCSP url = ''.join([tadoc_homepage, a['href']]) DCNL DCSP  DCSP func = url[(url.rfind('/') + 1):url.rfind('.')] DCNL DCSP  DCSP ret[func] = url DCNL DCSP return ret
def generate_groups_markdown(): DCNL  DCSP for (group, group_docs) in get_groups_markdown().items(): DCNL DCSP  DCSP file_path = os.path.join(FUNCTION_GROUPS_DIR, ('%s.md' % group)) DCNL DCSP  DCSP with open(file_path, 'w') as f: DCNL DCSP  DCSP  DCSP f.write(group_docs)
def get_groups_markdown(): DCNL  DCSP def unpluralize(noun): DCNL DCSP  DCSP if noun.endswith('s'): DCNL DCSP  DCSP  DCSP if ((len(noun) > 2) and (noun[(-2)] not in ["'", 'e'])): DCNL DCSP  DCSP  DCSP  DCSP return noun[:(-1)] DCNL DCSP  DCSP return noun DCNL DCSP doc_links = get_doc_links() DCNL DCSP ret = {} DCNL DCSP for (group, funcs) in talib.get_function_groups().items(): DCNL DCSP  DCSP h1 = ('# DCSP %s' % unpluralize(group)) DCNL DCSP  DCSP h1 = ((h1 + ' DCSP Functions') if ('Function' not in h1) else (h1 + 's')) DCNL DCSP  DCSP group_docs = [h1] DCNL DCSP  DCSP for func in funcs: DCNL DCSP  DCSP  DCSP f = Function(func) DCNL DCSP  DCSP  DCSP inputs = f.info['input_names'] DCNL DCSP  DCSP  DCSP if (('price' in inputs) and ('prices' in inputs)): DCNL DCSP  DCSP  DCSP  DCSP names = [inputs['price']] DCNL DCSP  DCSP  DCSP  DCSP names.extend(inputs['prices']) DCNL DCSP  DCSP  DCSP  DCSP input_names = ', DCSP '.join(names) DCNL DCSP  DCSP  DCSP elif ('prices' in inputs): DCNL DCSP  DCSP  DCSP  DCSP input_names = ', DCSP '.join(inputs['prices']) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP input_names = ', DCSP '.join([x for x in inputs.values() if x]) DCNL DCSP  DCSP  DCSP params = ', DCSP '.join([('%s=%i' % (param, default)) for (param, default) in f.info['parameters'].items()]) DCNL DCSP  DCSP  DCSP outputs = ', DCSP '.join(f.info['output_names']) DCNL DCSP  DCSP  DCSP group_docs.append(('### DCSP %s DCSP - DCSP %s' % (func, f.info['display_name']))) DCNL DCSP  DCSP  DCSP if (f.function_flags and ('Function DCSP has DCSP an DCSP unstable DCSP period' in f.function_flags)): DCNL DCSP  DCSP  DCSP  DCSP group_docs.append(('NOTE: DCSP The DCSP ``%s`` DCSP function DCSP has DCSP an DCSP unstable DCSP period. DCSP  DCSP ' % func)) DCNL DCSP  DCSP  DCSP group_docs.append('```python') DCNL DCSP  DCSP  DCSP if params: DCNL DCSP  DCSP  DCSP  DCSP group_docs.append(('%s DCSP = DCSP %s(%s, DCSP %s)' % (outputs, func.upper(), input_names, params))) DCNL DCSP  DCSP  DCSP else: DCNL DCSP  DCSP  DCSP  DCSP group_docs.append(('%s DCSP = DCSP %s(%s)' % (outputs, func.upper(), input_names))) DCNL DCSP  DCSP  DCSP group_docs.append('```\n') DCNL DCSP  DCSP  DCSP if (func in doc_links): DCNL DCSP  DCSP  DCSP  DCSP group_docs.append(('Learn DCSP more DCSP about DCSP the DCSP %s DCSP at DCSP [tadoc.org](%s). DCSP  DCSP ' % (f.info['display_name'], doc_links[func]))) DCNL DCSP  DCSP group_docs.append('\n[Documentation DCSP Index](../doc_index.html)') DCNL DCSP  DCSP group_docs.append('[FLOAT_RIGHTAll DCSP Function DCSP Groups](../funcs.html)') DCNL DCSP  DCSP ret[slugify(group)] = ('\n'.join(group_docs) + '\n') DCNL DCSP return ret
def _get_markdown_renderer(): DCNL  DCSP class PygmentsHighlighter(mistune.Renderer, ): DCNL DCSP  DCSP def block_code(self, code, lang=None): DCNL DCSP  DCSP  DCSP if (not lang): DCNL DCSP  DCSP  DCSP  DCSP return ('\n<pre><code>%s</code></pre>\n' % mistune.escape(code)) DCNL DCSP  DCSP  DCSP lexer = get_lexer_by_name(lang, stripall=True) DCNL DCSP  DCSP  DCSP formatter = HtmlFormatter(classprefix='highlight DCSP ') DCNL DCSP  DCSP  DCSP return highlight(code, lexer, formatter) DCNL DCSP return mistune.Markdown(renderer=PygmentsHighlighter())
def run_convert_to_html(output_dir): DCNL  DCSP markdown_to_html = _get_markdown_renderer() DCNL DCSP for md_file_path in get_markdown_file_paths(): DCNL DCSP  DCSP with open(md_file_path, 'r') as f: DCNL DCSP  DCSP  DCSP html = markdown_to_html(f.read()) DCNL DCSP  DCSP head = HEADER DCNL DCSP  DCSP if ('func_groups' in md_file_path): DCNL DCSP  DCSP  DCSP head = head.replace('"index.html"', '"../index.html"') DCNL DCSP  DCSP  DCSP head = head.replace('"doc_index.html"', '"../doc_index.html"') DCNL DCSP  DCSP  DCSP head = head.replace('"stylesheets/', '"../stylesheets/') DCNL DCSP  DCSP lines = html.split('\n') DCNL DCSP  DCSP for (i, line) in enumerate(lines): DCNL DCSP  DCSP  DCSP if ('FLOAT_RIGHT' in line): DCNL DCSP  DCSP  DCSP  DCSP line = line.replace('FLOAT_RIGHT', '') DCNL DCSP  DCSP  DCSP  DCSP lines[i] = line.replace('<a DCSP ', '<a DCSP class="float-right" DCSP ') DCNL DCSP  DCSP html = ''.join([head, '\n'.join(lines), FOOTER]) DCNL DCSP  DCSP save_file_path = os.path.abspath(md_file_path.replace(INPUT_DIR, output_dir).replace('.md', '.html')) DCNL DCSP  DCSP if (not os.path.exists(os.path.dirname(save_file_path))): DCNL DCSP  DCSP  DCSP os.mkdir(os.path.dirname(save_file_path)) DCNL DCSP  DCSP with open(save_file_path, 'w') as f: DCNL DCSP  DCSP  DCSP f.write(html) DCNL DCSP  DCSP  DCSP print(('Wrote DCSP %s' % save_file_path))
def assert_np_arrays_not_equal(expected, got): DCNL  DCSP nans = [] DCNL DCSP equals = [] DCNL DCSP for (i, value) in enumerate(expected): DCNL DCSP  DCSP if np.isnan(value): DCNL DCSP  DCSP  DCSP assert_true(np.isnan(got[i])) DCNL DCSP  DCSP  DCSP nans.append(value) DCNL DCSP  DCSP else: DCNL DCSP  DCSP  DCSP try: DCNL DCSP  DCSP  DCSP  DCSP assert_not_equal(value, got[i]) DCNL DCSP  DCSP  DCSP except AssertionError: DCNL DCSP  DCSP  DCSP  DCSP equals.append(got[i]) DCNL DCSP if (len(equals) == len(expected[len(nans):])): DCNL DCSP  DCSP raise AssertionError('Arrays DCSP were DCSP equal.') DCNL DCSP elif equals: DCNL DCSP  DCSP print(('Arrays DCSP had DCSP %i/%i DCSP equivalent DCSP values.' % (len(equals), len(expected[len(nans):]))))
def get_functions(): DCNL  DCSP ret = [] DCNL DCSP for group in __function_groups__: DCNL DCSP  DCSP ret.extend(__function_groups__[group]) DCNL DCSP return ret
def get_function_groups(): DCNL  DCSP return __function_groups__.copy()
